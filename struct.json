{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-05-31T19:13:19.721873Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": {
      "goals": [
        "Create universal JSON format for codebase structure (modules, functions, classes, calls, metadata)",
        "Ensure extensibility for new languages and entity types",
        "Develop modular, plugin-based parsers for new languages",
        "Maintain an open, RFC-style documented format",
        "Integrate with LLMs by generating and attaching JSON structure to queries"
      ]
    },
    "stats": {
      "modules_count": 202,
      "functions_count": 1482,
      "classes_count": 153,
      "call_edges_count": 4345
    },
    "artifact_id": "385e74b9-935e-4b39-a98d-5ae7313bbe26",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "ce76de82-5cc4-42ad-b7da-8391cbabba95",
        "metadata": {}
      },
      {
        "path": ".ORCHESTRATOR_PLAN",
        "type": "directory",
        "artifact_id": "7a9fad42-918f-47e0-8a3a-ac2aa247769f",
        "metadata": {}
      },
      {
        "path": ".ORCHESTRATOR_PLAN/MASTER_ORCHESTRATOR_PLAN.md",
        "type": "file",
        "artifact_id": "b7049138-cd4c-408e-b901-3ebe136aa09a",
        "metadata": {}
      },
      {
        "path": ".ORCHESTRATOR_PLAN/consultations",
        "type": "directory",
        "artifact_id": "2f984c09-9734-4ca2-802f-107085bcc04c",
        "metadata": {}
      },
      {
        "path": ".ORCHESTRATOR_PLAN/context",
        "type": "directory",
        "artifact_id": "94808d42-fa26-4b8c-a8bb-f6b66fa235c4",
        "metadata": {}
      },
      {
        "path": ".ORCHESTRATOR_PLAN/context/project_context.json",
        "type": "file",
        "artifact_id": "6b70b7aa-7ce8-41a6-a140-d6d189dcddbe",
        "metadata": {}
      },
      {
        "path": ".ORCHESTRATOR_PLAN/phases",
        "type": "directory",
        "artifact_id": "22375466-c541-4521-8a8c-0181eeb07131",
        "metadata": {}
      },
      {
        "path": ".ORCHESTRATOR_PLAN/prompts",
        "type": "directory",
        "artifact_id": "f647206c-ad51-4221-8ae1-ee81f3b73484",
        "metadata": {}
      },
      {
        "path": ".ORCHESTRATOR_PLAN/prompts/orchestrator_prompts.json",
        "type": "file",
        "artifact_id": "ad5b639f-42bc-4f58-92a8-8aa4a3d1ed99",
        "metadata": {}
      },
      {
        "path": ".continue",
        "type": "directory",
        "artifact_id": "eecc06cf-0cc9-43a0-b6ab-98b611277c95",
        "metadata": {}
      },
      {
        "path": ".continue/config.json",
        "type": "file",
        "artifact_id": "66d3a9c0-48e7-4594-92d5-28ddc3f09950",
        "metadata": {}
      },
      {
        "path": ".github",
        "type": "directory",
        "artifact_id": "9ec2cb26-57d1-4884-aacc-c4809b25cc6a",
        "metadata": {}
      },
      {
        "path": ".github/ISSUE_TEMPLATE",
        "type": "directory",
        "artifact_id": "512e8532-4e9a-44b3-b2d8-7eef14d3ae52",
        "metadata": {}
      },
      {
        "path": ".github/ISSUE_TEMPLATE/epic_template.md",
        "type": "file",
        "artifact_id": "58d11c98-d112-4990-8fb9-31f2e4ee4f5c",
        "metadata": {}
      },
      {
        "path": ".github/ISSUE_TEMPLATE/task_template.md",
        "type": "file",
        "artifact_id": "c0220402-160b-486b-bf14-48d63eca83c5",
        "metadata": {}
      },
      {
        "path": ".github/workflows",
        "type": "directory",
        "artifact_id": "03d3d577-ae5c-46a0-bf00-b11f2a416446",
        "metadata": {}
      },
      {
        "path": ".llmstruct_cache",
        "type": "directory",
        "artifact_id": "177f4aa1-63de-47d1-9857-0c999ca7c6b7",
        "metadata": {}
      },
      {
        "path": ".llmstruct_cache/class_index.json",
        "type": "file",
        "artifact_id": "d0d90200-eb74-4086-b8de-5f3c46f2a012",
        "metadata": {}
      },
      {
        "path": ".llmstruct_cache/function_index.json",
        "type": "file",
        "artifact_id": "e8c0fb23-e78e-41a5-bcb8-e924935bb583",
        "metadata": {}
      },
      {
        "path": ".llmstruct_cache/metadata.json",
        "type": "file",
        "artifact_id": "c274642b-0b36-4af0-a59f-7fcb9fe13a24",
        "metadata": {}
      },
      {
        "path": ".llmstruct_cache/module_index.json",
        "type": "file",
        "artifact_id": "7db9cd15-75c6-403d-b78b-f400efaf35b1",
        "metadata": {}
      },
      {
        "path": ".llmstruct_cache/search_cache.json",
        "type": "file",
        "artifact_id": "be3bf0c9-9ca9-4c31-989d-2e2cefe25b08",
        "metadata": {}
      },
      {
        "path": ".metrics",
        "type": "directory",
        "artifact_id": "03f65a66-db21-452e-abc3-9b36569fc021",
        "metadata": {}
      },
      {
        "path": ".metrics/aggregate_metrics.json",
        "type": "file",
        "artifact_id": "d49dc251-7f9a-46af-bdc6-e73d08723a03",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_161315.json",
        "type": "file",
        "artifact_id": "ecf94826-d409-4e8a-8f77-e8d7f9fdd8e0",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_161402.json",
        "type": "file",
        "artifact_id": "93631a2f-e353-48b9-b0ce-53f5ddbd616c",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_161527.json",
        "type": "file",
        "artifact_id": "4053c863-f1e0-4159-93bd-99ab46a70c14",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_161923.json",
        "type": "file",
        "artifact_id": "e4b48a23-44da-46b9-b003-283df6708281",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_162001.json",
        "type": "file",
        "artifact_id": "c3da170f-8d65-41ae-84bc-9948a9e81bba",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_162045.json",
        "type": "file",
        "artifact_id": "07317b7b-625c-4a22-911e-aec0f966eea5",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_162053.json",
        "type": "file",
        "artifact_id": "7e663b2b-bfc9-44c3-93e1-8bbe71e7015d",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_162217.json",
        "type": "file",
        "artifact_id": "4de449e0-e1c6-4ef3-8993-b3a573dea17a",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_163119.json",
        "type": "file",
        "artifact_id": "8d5f85e0-4b90-4fd1-af85-7f1cd047f074",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_163610.json",
        "type": "file",
        "artifact_id": "742e3c31-eea4-4eb3-bdea-9ca21856c16b",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_164334.json",
        "type": "file",
        "artifact_id": "df5a8968-51ba-480f-b6fa-942aea98bcc8",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_164520.json",
        "type": "file",
        "artifact_id": "f01f91df-18e6-441f-97a0-e111ce00e21d",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_165247.json",
        "type": "file",
        "artifact_id": "c155eda3-748b-43f2-9334-9c054a5f8581",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_165620.json",
        "type": "file",
        "artifact_id": "561d3748-121d-42a8-a7b4-830f0f4b4e10",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_165934.json",
        "type": "file",
        "artifact_id": "004a5c8e-d883-4418-9eeb-422458807fe7",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_171259.json",
        "type": "file",
        "artifact_id": "8b1dc8bd-3fd2-475b-b186-cc9079855477",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_171358.json",
        "type": "file",
        "artifact_id": "5a1b0f09-8b9a-4d2d-b59b-98b19bc569bd",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_171841.json",
        "type": "file",
        "artifact_id": "16f2ec63-0597-4b82-abe0-77c9557a062a",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_184035.json",
        "type": "file",
        "artifact_id": "02f1f7c7-3e34-4242-9aad-21a472a17efa",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_184747.json",
        "type": "file",
        "artifact_id": "3ea1e2b8-2fc0-4822-b273-da8fcaeffd53",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_190005.json",
        "type": "file",
        "artifact_id": "63ba0546-5ee1-48a3-b6a1-3e25071a80e3",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_190403.json",
        "type": "file",
        "artifact_id": "b965f73e-e3e0-451f-85b9-5b8bb4c5c4ab",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_190607.json",
        "type": "file",
        "artifact_id": "6708bb7a-c9c6-49a6-a359-58ed2e09620d",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_190649.json",
        "type": "file",
        "artifact_id": "5cd88b13-cd4a-460a-922a-1dfa13ccf346",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_201742.json",
        "type": "file",
        "artifact_id": "f71525c8-99f4-430b-9f39-c63bd145fe6e",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_202119.json",
        "type": "file",
        "artifact_id": "68d5eb4d-5c16-4a5d-b35d-ca40416dcd88",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_203023.json",
        "type": "file",
        "artifact_id": "605435e5-77f5-4723-92c4-479f69abf4ad",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_203112.json",
        "type": "file",
        "artifact_id": "3563ae2d-7c3f-4749-baaa-6551fdf0b72b",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_203634.json",
        "type": "file",
        "artifact_id": "a82e0052-c35b-4185-b4cf-c23f75ec552b",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_204618.json",
        "type": "file",
        "artifact_id": "cd77e902-4832-4ae1-a53d-b2a71eb64de0",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_204919.json",
        "type": "file",
        "artifact_id": "2f977390-59c0-4696-98e3-9f7c7a87b1c6",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_205001.json",
        "type": "file",
        "artifact_id": "7ece6522-c5f8-484e-8bbd-25a9072aac9e",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_205043.json",
        "type": "file",
        "artifact_id": "62c584fe-1bf4-4542-bca3-4d298d190a47",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_205821.json",
        "type": "file",
        "artifact_id": "f0b93cfb-12ef-4ff7-8cb4-9b344f583f95",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_205838.json",
        "type": "file",
        "artifact_id": "8e43252e-9ef1-419e-8cc7-bdb4bf0a9f6c",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_222813.json",
        "type": "file",
        "artifact_id": "2611d8bf-be80-4921-8cab-8be5084a51f3",
        "metadata": {}
      },
      {
        "path": "CHANGELOG.md",
        "type": "file",
        "artifact_id": "93280de4-add2-4b0d-8de6-7b94785b670b",
        "metadata": {}
      },
      {
        "path": "QUICK_START.md",
        "type": "file",
        "artifact_id": "aaeac9c0-0019-4170-81f8-135959df1889",
        "metadata": {}
      },
      {
        "path": "README.md",
        "type": "file",
        "artifact_id": "7afd4588-f943-4022-974f-2e090dba75e8",
        "metadata": {}
      },
      {
        "path": "UNKNOWN.egg-info",
        "type": "directory",
        "artifact_id": "79ba77d4-b800-4878-a5c1-0814f01856a3",
        "metadata": {}
      },
      {
        "path": "auto_init_ai_system.py",
        "type": "file",
        "artifact_id": "fd21ad31-d756-4441-bc46-b63101734bd2",
        "metadata": {}
      },
      {
        "path": "collect_json.py",
        "type": "file",
        "artifact_id": "d0451074-4aa6-40dd-a040-e13dccf1aa78",
        "metadata": {}
      },
      {
        "path": "collector.py",
        "type": "file",
        "artifact_id": "9e353d0e-7f53-4eaa-9ffa-c004af9f6d94",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration",
        "type": "directory",
        "artifact_id": "6ce10a50-6dd0-4992-9215-5caa2d266f0e",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/INSTALL.md",
        "type": "file",
        "artifact_id": "319fdbe0-b2d5-46d8-a74d-671460afd84c",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/PACKAGE_OVERVIEW.md",
        "type": "file",
        "artifact_id": "fbd110d6-158a-48c5-a7d2-d95bba0cbec9",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/README.md",
        "type": "file",
        "artifact_id": "a91773e9-1f05-4baf-a42e-231585c94647",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs",
        "type": "directory",
        "artifact_id": "6f4c5494-b3c8-4c47-baab-78ed596416c9",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/CURSOR_AI_EXAMPLES.md",
        "type": "file",
        "artifact_id": "47ca7b50-45a7-4a7d-8261-338091850ec1",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/SESSION_INTEGRATION_REPORT.md",
        "type": "file",
        "artifact_id": "66c23105-5a67-48b8-89cc-27c131834304",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/SESSION_MANAGEMENT_GUIDE.md",
        "type": "file",
        "artifact_id": "792a6dd1-1f0d-46f1-9bf3-28e3af5dd18a",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/WORKFLOW_CURSOR_INTEGRATION_REPORT.md",
        "type": "file",
        "artifact_id": "5b00e77a-151c-41d3-9fff-55fb0735c3fa",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/files",
        "type": "directory",
        "artifact_id": "7584195d-746b-4de4-aa10-5dfd29d8b631",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/files/auto_init_ai_system.py",
        "type": "file",
        "artifact_id": "747c299b-c58a-4fb6-8650-4284be377b6f",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/scripts",
        "type": "directory",
        "artifact_id": "6b0499bd-a713-47df-bc21-75c2aa108080",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/scripts/install_ai_integration.py",
        "type": "file",
        "artifact_id": "c812301b-381b-4e22-8fbd-550d8dc1c549",
        "metadata": {}
      },
      {
        "path": "data",
        "type": "directory",
        "artifact_id": "2ae3ba3e-7a45-4624-bab7-31900fe5e86b",
        "metadata": {}
      },
      {
        "path": "data/ai_diagnostics_report.json",
        "type": "file",
        "artifact_id": "970714c3-3c61-46b0-9e02-5ae96d4a9eb4",
        "metadata": {}
      },
      {
        "path": "data/ai_integration_config.json",
        "type": "file",
        "artifact_id": "6b5ea114-bdac-4c5b-9695-2d1e885fa428",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness",
        "type": "directory",
        "artifact_id": "8c699761-431a-418c-a1eb-9b445e37697b",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/ai_behavior_analysis.json",
        "type": "file",
        "artifact_id": "cb322d9d-33e8-45ef-aa26-e5123cf98e01",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/ai_usage_events.json",
        "type": "file",
        "artifact_id": "793d5355-8e95-4538-b6ac-afb1be27b15e",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/capability_cache.json",
        "type": "file",
        "artifact_id": "3e8e5baf-d545-4cb4-bc5d-d4b794a16cec",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/search_cache.json",
        "type": "file",
        "artifact_id": "f0549f62-0ca7-476c-86bb-ddd7e398bdce",
        "metadata": {}
      },
      {
        "path": "data/artifacts_index.json",
        "type": "file",
        "artifact_id": "52d4bdd5-3e9f-440c-a5d4-10ffb4ac0e5d",
        "metadata": {}
      },
      {
        "path": "data/chat_sessions",
        "type": "directory",
        "artifact_id": "7ac9b505-5542-4c53-8903-e29d79916591",
        "metadata": {}
      },
      {
        "path": "data/chat_sessions/telegram-bot-session.json",
        "type": "file",
        "artifact_id": "f5a3c46d-fc38-4a3a-a2c8-6fd42e323dd2",
        "metadata": {}
      },
      {
        "path": "data/chat_sessions/test-session.json",
        "type": "file",
        "artifact_id": "afec0e3c-fd17-4731-a7c5-3c1e6e6d6f06",
        "metadata": {}
      },
      {
        "path": "data/chat_sessions/tg_-4938821563_306157325.json",
        "type": "file",
        "artifact_id": "8eaf379c-122b-444c-ae05-b684b461a13e",
        "metadata": {}
      },
      {
        "path": "data/cli.json",
        "type": "file",
        "artifact_id": "a4605704-a3a3-458c-834d-665567f5912a",
        "metadata": {}
      },
      {
        "path": "data/cli_enhanced.json",
        "type": "file",
        "artifact_id": "4b745b22-a214-4583-ae78-4a6b581e12e9",
        "metadata": {}
      },
      {
        "path": "data/cli_queue.json",
        "type": "file",
        "artifact_id": "5eb72c10-852b-4350-babd-c4d55b60e407",
        "metadata": {}
      },
      {
        "path": "data/cli_queue_enhanced.json",
        "type": "file",
        "artifact_id": "8a703767-c95f-466c-9761-293c1957264b",
        "metadata": {}
      },
      {
        "path": "data/conflicts.json",
        "type": "file",
        "artifact_id": "9af57bfd-763f-4eef-ac5f-68c60bf603b2",
        "metadata": {}
      },
      {
        "path": "data/context_orchestration.json",
        "type": "file",
        "artifact_id": "f34a0a61-b3fa-4a0f-94f4-68b41c7a1458",
        "metadata": {}
      },
      {
        "path": "data/copilot_init.json",
        "type": "file",
        "artifact_id": "0093ea54-abf4-47f7-9b04-e9793e42bc90",
        "metadata": {}
      },
      {
        "path": "data/cursor",
        "type": "directory",
        "artifact_id": "cbd8dcf5-1c61-4ce3-8570-278cfcf722c3",
        "metadata": {}
      },
      {
        "path": "data/cursor/cursor_context_config.json",
        "type": "file",
        "artifact_id": "c9a315a8-6bfc-464a-a142-40e11fd3ed73",
        "metadata": {}
      },
      {
        "path": "data/cursor/cursor_personal_bridge.json",
        "type": "file",
        "artifact_id": "98d38032-0f4d-4cc1-b707-fcde13b250aa",
        "metadata": {}
      },
      {
        "path": "data/cursor/cursor_session_memory.json",
        "type": "file",
        "artifact_id": "ec043563-551a-4e9a-92a0-aaff1f39f466",
        "metadata": {}
      },
      {
        "path": "data/developer_onboarding.json",
        "type": "file",
        "artifact_id": "02556209-ecca-49c9-b867-38a12b1ee37b",
        "metadata": {}
      },
      {
        "path": "data/docs.json",
        "type": "file",
        "artifact_id": "bc2bd64c-1825-4887-9c0a-524bf0b8ea97",
        "metadata": {}
      },
      {
        "path": "data/gh_mapping.json",
        "type": "file",
        "artifact_id": "287fa63c-ae8b-4bae-8c17-c60b6fb85fb4",
        "metadata": {}
      },
      {
        "path": "data/ideas.json",
        "type": "file",
        "artifact_id": "9302e05a-4d92-4fea-ab66-452794ab77f5",
        "metadata": {}
      },
      {
        "path": "data/ideas_cache.json",
        "type": "file",
        "artifact_id": "711e4cb3-f4b6-4602-9742-17a8035574bf",
        "metadata": {}
      },
      {
        "path": "data/init.json",
        "type": "file",
        "artifact_id": "df09eadd-ea80-414f-8a0a-696ee2440405",
        "metadata": {}
      },
      {
        "path": "data/init_enhanced.json",
        "type": "file",
        "artifact_id": "6412bd5a-be6b-40fa-bbdf-e35684f0e98f",
        "metadata": {}
      },
      {
        "path": "data/init_enhanced_ai.json",
        "type": "file",
        "artifact_id": "021497f0-93ea-46cb-b283-f5775d196fc6",
        "metadata": {}
      },
      {
        "path": "data/insights.json",
        "type": "file",
        "artifact_id": "88db6be8-fb3e-4027-9125-b7866dd95e75",
        "metadata": {}
      },
      {
        "path": "data/metrics.json",
        "type": "file",
        "artifact_id": "c4e8d627-e83a-4d3e-a563-8f2cddc3f1d2",
        "metadata": {}
      },
      {
        "path": "data/ollama_api_chat",
        "type": "directory",
        "artifact_id": "34399ff7-073d-40ea-9959-70395c98a380",
        "metadata": {}
      },
      {
        "path": "data/ollama_chat",
        "type": "directory",
        "artifact_id": "befa03f9-5636-4120-9704-1a29df390d7f",
        "metadata": {}
      },
      {
        "path": "data/prs.json",
        "type": "file",
        "artifact_id": "30649ba8-ca8d-4147-b491-fdb6e514db45",
        "metadata": {}
      },
      {
        "path": "data/references.json",
        "type": "file",
        "artifact_id": "78a84119-0e5a-4856-8f3a-09d6661b4919",
        "metadata": {}
      },
      {
        "path": "data/sessions",
        "type": "directory",
        "artifact_id": "04ef1517-4196-4335-8b87-239e943b7488",
        "metadata": {}
      },
      {
        "path": "data/sessions/README.md",
        "type": "file",
        "artifact_id": "58a6c69e-6060-497d-aabd-064f9877ecba",
        "metadata": {}
      },
      {
        "path": "data/sessions/ai_sessions.json",
        "type": "file",
        "artifact_id": "d411e8cf-d096-4ad2-a414-d4df5ac95c18",
        "metadata": {}
      },
      {
        "path": "data/sessions/current_session.json",
        "type": "file",
        "artifact_id": "320f7b1b-eef9-4829-8745-d26063a710a5",
        "metadata": {}
      },
      {
        "path": "data/sessions/epic_tg_bot_enhancement.json",
        "type": "file",
        "artifact_id": "497d4a7e-2d59-4fb4-950f-5c043aee2532",
        "metadata": {}
      },
      {
        "path": "data/sessions/epics_roadmap.json",
        "type": "file",
        "artifact_id": "f397bc0c-0871-4d70-8779-27335bdc4ec6",
        "metadata": {}
      },
      {
        "path": "data/sessions/worklog.json",
        "type": "file",
        "artifact_id": "c3bd3fd6-5a22-4413-b6cf-3d38a8b1d454",
        "metadata": {}
      },
      {
        "path": "data/tasks.json",
        "type": "file",
        "artifact_id": "96674760-30af-44f7-bd21-143423380d04",
        "metadata": {}
      },
      {
        "path": "data/telegram",
        "type": "directory",
        "artifact_id": "9f585f5b-d628-47ec-a08a-b54de46c3df2",
        "metadata": {}
      },
      {
        "path": "data/telegram/bot_responses.json",
        "type": "file",
        "artifact_id": "8a7c44ee-233c-4208-9aeb-089ba0f0c209",
        "metadata": {}
      },
      {
        "path": "data/telegram/cursor_commands.json",
        "type": "file",
        "artifact_id": "e8108806-9e64-4c36-b2ea-0ac180466f81",
        "metadata": {}
      },
      {
        "path": "data/telegram/master_status.json",
        "type": "file",
        "artifact_id": "50743584-6855-4b4c-99c3-151ab5ff79cf",
        "metadata": {}
      },
      {
        "path": "data/telegram/user_messages.json",
        "type": "file",
        "artifact_id": "1e6625df-86df-49f5-b07c-e4045bc3b429",
        "metadata": {}
      },
      {
        "path": "data/user_memory.json",
        "type": "file",
        "artifact_id": "0cc9a18e-d31c-4bad-bb25-830bb0e55957",
        "metadata": {}
      },
      {
        "path": "data/vision.json",
        "type": "file",
        "artifact_id": "493a5ef0-a08e-4531-a5a4-8e10a5d94459",
        "metadata": {}
      },
      {
        "path": "data/weights.json",
        "type": "file",
        "artifact_id": "b873b816-d420-4676-92c5-9c8452641f38",
        "metadata": {}
      },
      {
        "path": "data/workflow_events.json",
        "type": "file",
        "artifact_id": "86f04dd1-bd60-469b-82c6-669118f73dc3",
        "metadata": {}
      },
      {
        "path": "data/workspace",
        "type": "directory",
        "artifact_id": "74ba759a-9d0a-477d-95a7-00d502d349fd",
        "metadata": {}
      },
      {
        "path": "data/workspace/git_workflow_config.json",
        "type": "file",
        "artifact_id": "98c6900d-ddcd-4053-a861-7e1784c81124",
        "metadata": {}
      },
      {
        "path": "data/workspace/workspace_state.json",
        "type": "file",
        "artifact_id": "7be893cd-711a-4170-b8e1-109a98076d6c",
        "metadata": {}
      },
      {
        "path": "docker",
        "type": "directory",
        "artifact_id": "bf91bed4-b89d-4d14-8ef6-f5414766962a",
        "metadata": {}
      },
      {
        "path": "docker/parser_go",
        "type": "directory",
        "artifact_id": "c1be91c1-0a62-4eec-81ff-636c64d0d669",
        "metadata": {}
      },
      {
        "path": "docs",
        "type": "directory",
        "artifact_id": "44b80d0e-f0a7-4d07-851d-6c640268da05",
        "metadata": {}
      },
      {
        "path": "docs/AI_DOGFOODING_FINAL_PLAN.md",
        "type": "file",
        "artifact_id": "87a6a76f-4fa0-48b2-b7f9-f938f792f8d0",
        "metadata": {}
      },
      {
        "path": "docs/AI_DOGFOODING_IMPLEMENTATION_PLAN.md",
        "type": "file",
        "artifact_id": "d92f96b0-77f8-4c46-8e32-06f900e2b35b",
        "metadata": {}
      },
      {
        "path": "docs/AI_DOGFOODING_PLANNING_MEMO.md",
        "type": "file",
        "artifact_id": "6345275c-7aa5-4abd-9145-95f872575a9d",
        "metadata": {}
      },
      {
        "path": "docs/AI_INTEGRATION_REALITY_CHECK.md",
        "type": "file",
        "artifact_id": "914cba2f-b807-44ce-a00c-3eb9cb0fc7b9",
        "metadata": {}
      },
      {
        "path": "docs/AI_SESSION_MOBILE_CONTROL.md",
        "type": "file",
        "artifact_id": "92eddbc5-97f5-49d7-b2a8-90c53b7d4464",
        "metadata": {}
      },
      {
        "path": "docs/COMPREHENSIVE_ANALYSIS.md",
        "type": "file",
        "artifact_id": "01b3ae9e-aa5d-4910-af5b-5b96e88a35c4",
        "metadata": {}
      },
      {
        "path": "docs/COMPREHENSIVE_INDEX.json",
        "type": "file",
        "artifact_id": "971bacf7-2f89-43d9-b88a-59fbd791fecf",
        "metadata": {}
      },
      {
        "path": "docs/CONTEXT_TAGS_SYSTEM.md",
        "type": "file",
        "artifact_id": "4ecd41f7-3d41-46f0-a8e7-90828f2acb09",
        "metadata": {}
      },
      {
        "path": "docs/CONTINUE_INTEGRATION.md",
        "type": "file",
        "artifact_id": "162f367a-0b0b-4390-af21-ca1902c5a241",
        "metadata": {}
      },
      {
        "path": "docs/CONTRIBUTING.md",
        "type": "file",
        "artifact_id": "8cb7ef39-54f3-4eed-881f-d093f3a09d67",
        "metadata": {}
      },
      {
        "path": "docs/COPILOT_INTEGRATION_CLARIFICATION_QUESTIONS.md",
        "type": "file",
        "artifact_id": "b4e5da09-d569-4850-9eb7-b8e22259037a",
        "metadata": {}
      },
      {
        "path": "docs/COPILOT_INTEGRATION_RESEARCH_NOTES.md",
        "type": "file",
        "artifact_id": "7db333f0-4eea-4f06-87bb-f1cc3000c328",
        "metadata": {}
      },
      {
        "path": "docs/CURSOR_AI_INTEGRATION.md",
        "type": "file",
        "artifact_id": "18d0087b-6120-4439-8f47-b7d1bbfd8bd6",
        "metadata": {}
      },
      {
        "path": "docs/CURSOR_ECOSYSTEM_TECHNICAL_ASSESSMENT.md",
        "type": "file",
        "artifact_id": "945a6f39-b95d-4713-ae72-f982d8736864",
        "metadata": {}
      },
      {
        "path": "docs/GITHUB_ROLLOUT_STRATEGY.md",
        "type": "file",
        "artifact_id": "08ccb059-4e3a-4281-b0fc-6a146627d6f2",
        "metadata": {}
      },
      {
        "path": "docs/GITHUB_TOKEN_SETUP.md",
        "type": "file",
        "artifact_id": "602a7fbd-f964-4fd0-9b8f-8bbc7bb7e715",
        "metadata": {}
      },
      {
        "path": "docs/HIDDEN_GEMS_ANALYSIS.md",
        "type": "file",
        "artifact_id": "d2b96b7c-b992-43a5-b4e6-7537ce2177a0",
        "metadata": {}
      },
      {
        "path": "docs/INTEGRATION_AND_WORKFLOW_CLARIFICATIONS.md",
        "type": "file",
        "artifact_id": "45a90b2e-0785-44bd-81d6-65ee07bbc4b5",
        "metadata": {}
      },
      {
        "path": "docs/JSON_OPTIMIZATION_CLARIFICATIONS.md",
        "type": "file",
        "artifact_id": "3c300ea1-49dd-40ba-83f0-d53d7fcb4353",
        "metadata": {}
      },
      {
        "path": "docs/JSON_OPTIMIZATION_FINAL_PLAN.md",
        "type": "file",
        "artifact_id": "9d293045-a50a-4690-aa4f-a997e476fa39",
        "metadata": {}
      },
      {
        "path": "docs/JSON_SYSTEM_OPTIMIZATION_RESEARCH.md",
        "type": "file",
        "artifact_id": "aa8f4f5f-4549-4c48-80fa-f14eb0196bbf",
        "metadata": {}
      },
      {
        "path": "docs/LLM_instructions_api.md",
        "type": "file",
        "artifact_id": "2e68733b-64db-41cf-8835-e02452e2ef8a",
        "metadata": {}
      },
      {
        "path": "docs/MISSING_INNOVATIONS_SUMMARY.md",
        "type": "file",
        "artifact_id": "5e18f383-7032-43e7-a5e9-32ddd40e58e7",
        "metadata": {}
      },
      {
        "path": "docs/PRIORITY_DASHBOARD.md",
        "type": "file",
        "artifact_id": "4eefcc38-d90e-42c8-9062-d31685923fbc",
        "metadata": {}
      },
      {
        "path": "docs/QUICK_START_GUIDE.md",
        "type": "file",
        "artifact_id": "e52a3e6a-a4cc-41b2-85c5-ddfb59a3d883",
        "metadata": {}
      },
      {
        "path": "docs/SECURITY.md",
        "type": "file",
        "artifact_id": "ec96fbe2-a160-4195-8b2b-c28abd886cec",
        "metadata": {}
      },
      {
        "path": "docs/STRATEGIC_ROADMAP_2025.md",
        "type": "file",
        "artifact_id": "6a1650d5-3bf9-416f-86ee-7aed5d2af75f",
        "metadata": {}
      },
      {
        "path": "docs/TASKS_AND_IDEAS_REASSESSMENT.md",
        "type": "file",
        "artifact_id": "3bce788e-9b56-4712-9920-336479f6c6d6",
        "metadata": {}
      },
      {
        "path": "docs/TASKS_INDEX.json",
        "type": "file",
        "artifact_id": "082f2bd3-e974-4b5d-a9ff-8d22f8caf52d",
        "metadata": {}
      },
      {
        "path": "docs/TASKS_SUMMARY.md",
        "type": "file",
        "artifact_id": "4f067302-b284-47a4-93a1-702feeb0a195",
        "metadata": {}
      },
      {
        "path": "docs/TASK_IDEA_CONSOLIDATION_WORK_NOTE.md",
        "type": "file",
        "artifact_id": "d15136ae-e8cc-404b-90c2-bb99b6f0a2e7",
        "metadata": {}
      },
      {
        "path": "docs/TASK_MANAGEMENT_SYSTEM.md",
        "type": "file",
        "artifact_id": "1893a6a3-f1ec-4802-8fca-abc6310b82bf",
        "metadata": {}
      },
      {
        "path": "docs/TPOT_DEPLOYMENT_WORK_PLAN.md",
        "type": "file",
        "artifact_id": "b9628572-f302-4e93-b027-23f3f1e147af",
        "metadata": {}
      },
      {
        "path": "docs/WORKFLOW_METRICS_INTEGRATION.md",
        "type": "file",
        "artifact_id": "531bad90-2e4c-4ea4-bf35-b3ad363ceb27",
        "metadata": {}
      },
      {
        "path": "docs/ai",
        "type": "directory",
        "artifact_id": "81e69d87-9196-45e7-8019-e9b6500b920d",
        "metadata": {}
      },
      {
        "path": "docs/ai-constraints-implementation-report.md",
        "type": "file",
        "artifact_id": "b6ce4e45-6cd8-4634-8e3d-1998ee19b11f",
        "metadata": {}
      },
      {
        "path": "docs/ai-session-monitor",
        "type": "directory",
        "artifact_id": "44fe8af4-ec5d-48b0-aa63-6f6d58c0bf9d",
        "metadata": {}
      },
      {
        "path": "docs/ai-session-monitor/README.md",
        "type": "file",
        "artifact_id": "6b4aedc7-ab9d-40f9-8b44-432d749e0d24",
        "metadata": {}
      },
      {
        "path": "docs/ai/README.md",
        "type": "file",
        "artifact_id": "5bc93ad6-7e86-40e3-8773-462f75fbe4f0",
        "metadata": {}
      },
      {
        "path": "docs/ai/system_overview.md",
        "type": "file",
        "artifact_id": "1f7f4fdf-1def-41a4-913a-de152e09c3a6",
        "metadata": {}
      },
      {
        "path": "docs/ai/workflow_guide.md",
        "type": "file",
        "artifact_id": "0f5bedf1-a12c-4c0c-8acc-57399c5a53b7",
        "metadata": {}
      },
      {
        "path": "docs/best_practices.md",
        "type": "file",
        "artifact_id": "c41c4996-f518-4735-8975-fc965a08c2a1",
        "metadata": {}
      },
      {
        "path": "docs/cache.py",
        "type": "file",
        "artifact_id": "86238892-247e-4f0e-9c7e-901baefe8519",
        "metadata": {}
      },
      {
        "path": "docs/cli.py",
        "type": "file",
        "artifact_id": "5be798ed-3d41-4d21-9e53-6e4e3e2665d9",
        "metadata": {}
      },
      {
        "path": "docs/cli_modular_architecture.md",
        "type": "file",
        "artifact_id": "d7c37f86-ce11-4c15-a29f-8f423a626ab3",
        "metadata": {}
      },
      {
        "path": "docs/context_orchestration_architecture.md",
        "type": "file",
        "artifact_id": "47e3e85b-5413-48dc-9396-5fcda25f4f99",
        "metadata": {}
      },
      {
        "path": "docs/copilot_integration.md",
        "type": "file",
        "artifact_id": "15cf6efa-440e-4cd0-a6fe-0570a5b70e23",
        "metadata": {}
      },
      {
        "path": "docs/examples",
        "type": "directory",
        "artifact_id": "ccc0912d-c70a-4119-a55b-405b9fb9bbab",
        "metadata": {}
      },
      {
        "path": "docs/examples/struct.json",
        "type": "file",
        "artifact_id": "84beb636-877b-4413-b23a-41a6bdf6f26f",
        "metadata": {}
      },
      {
        "path": "docs/gh_view.md",
        "type": "file",
        "artifact_id": "d804c4ce-aad6-45e3-adfe-763113d8371e",
        "metadata": {}
      },
      {
        "path": "docs/github_projects_export.md",
        "type": "file",
        "artifact_id": "1420a4fd-2d47-492f-88a6-3c398b6034ac",
        "metadata": {}
      },
      {
        "path": "docs/hybrid_log.md",
        "type": "file",
        "artifact_id": "0563b777-b726-4d72-a9d8-c52c29665786",
        "metadata": {}
      },
      {
        "path": "docs/ideas_community.md",
        "type": "file",
        "artifact_id": "0dd7d4fb-a96d-4b93-b60a-ca0bbab3ce08",
        "metadata": {}
      },
      {
        "path": "docs/ideas_strategy.md",
        "type": "file",
        "artifact_id": "1294588a-3239-4c09-98e0-a4871408bf32",
        "metadata": {}
      },
      {
        "path": "docs/ideas_technical.md",
        "type": "file",
        "artifact_id": "1fc5416a-dcbb-4060-9db3-7f45b90a140f",
        "metadata": {}
      },
      {
        "path": "docs/incremental_indexing_plan.md",
        "type": "file",
        "artifact_id": "7cb7ea03-c6cc-413e-bb20-95fb9d5ddc8a",
        "metadata": {}
      },
      {
        "path": "docs/integration.md",
        "type": "file",
        "artifact_id": "25fcefd3-2dab-4ca6-8456-d740629a9361",
        "metadata": {}
      },
      {
        "path": "docs/interactions_diagram.ru.md",
        "type": "file",
        "artifact_id": "85b5ed1a-0f5a-41d9-abf5-c3ffb4000c23",
        "metadata": {}
      },
      {
        "path": "docs/internal",
        "type": "directory",
        "artifact_id": "24de1671-09b6-46a5-bf77-d82035cb8d32",
        "metadata": {}
      },
      {
        "path": "docs/internal/collaborative-decision-workflow.md",
        "type": "file",
        "artifact_id": "0ad76bc6-3afc-4ddb-9f92-617eb72abfa5",
        "metadata": {}
      },
      {
        "path": "docs/internal/elastic-workflow-concept.md",
        "type": "file",
        "artifact_id": "09fb6a36-b63a-4f9c-821e-8cbbbc68dee4",
        "metadata": {}
      },
      {
        "path": "docs/internal/mamay-scenario-onboarding-design.md",
        "type": "file",
        "artifact_id": "17c49977-db0f-4c59-807b-2041031138b5",
        "metadata": {}
      },
      {
        "path": "docs/internal/notes",
        "type": "directory",
        "artifact_id": "2c8988bc-23c9-4af2-8670-351adb2e8286",
        "metadata": {}
      },
      {
        "path": "docs/internal/notes/session_integration.md",
        "type": "file",
        "artifact_id": "7ad48f0c-ad10-47b0-acfa-b1ddba130eb8",
        "metadata": {}
      },
      {
        "path": "docs/internal/project-status-summary.md",
        "type": "file",
        "artifact_id": "a129ef5b-fe82-4acc-803c-13f8ebb6a5e8",
        "metadata": {}
      },
      {
        "path": "docs/internal/roadmap.md",
        "type": "file",
        "artifact_id": "e5ed28f4-dab1-448b-9f12-6a3b5bb36466",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru",
        "type": "directory",
        "artifact_id": "6cbbbe90-ad51-4916-adfc-a166a03fc123",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/roadmap.md",
        "type": "file",
        "artifact_id": "e3c17940-0888-43b5-ae76-e3e1a332231b",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/ses-003_critical_analysis.md",
        "type": "file",
        "artifact_id": "67924d3c-443c-47fc-9f3a-1458f41c31e8",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/setup.md",
        "type": "file",
        "artifact_id": "024a17ed-c54e-4e1a-be9d-a291ecb045a9",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/team.md",
        "type": "file",
        "artifact_id": "b9af8b80-84b7-49b6-ad32-ce756b89d7bf",
        "metadata": {}
      },
      {
        "path": "docs/internal/ses-004-implementation-decisions.md",
        "type": "file",
        "artifact_id": "5a72d237-1aee-444b-8aec-f22b82d6b8d8",
        "metadata": {}
      },
      {
        "path": "docs/internal/setup.md",
        "type": "file",
        "artifact_id": "4d97d1fc-3cbb-43c2-89a1-93d93ad58728",
        "metadata": {}
      },
      {
        "path": "docs/internal/team.md",
        "type": "file",
        "artifact_id": "5ba2e213-fa50-4f64-b77a-14508c296331",
        "metadata": {}
      },
      {
        "path": "docs/internal/workspace-mode-design-clarifications.md",
        "type": "file",
        "artifact_id": "f702acc1-f6c0-4b9c-ad7e-5e68e9defc12",
        "metadata": {}
      },
      {
        "path": "docs/internal/workspace-state-mode-system-design.md",
        "type": "file",
        "artifact_id": "98f63ee7-c8e0-4809-b21d-f478e9dd4cdd",
        "metadata": {}
      },
      {
        "path": "docs/json_selector.py",
        "type": "file",
        "artifact_id": "36f01f36-cf74-483e-90b8-b1bd8b815c72",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_config.md",
        "type": "file",
        "artifact_id": "50bedbcc-e67d-4f6b-b5eb-914af47b584f",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_decision_checklist.md",
        "type": "file",
        "artifact_id": "9b9d737b-df5b-4123-90e3-d5b9b067d943",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_format.md",
        "type": "file",
        "artifact_id": "d8954f55-1c4d-432a-b798-9f7bbbcec93e",
        "metadata": {}
      },
      {
        "path": "docs/management",
        "type": "directory",
        "artifact_id": "d740c4bd-d7f1-4837-a065-2c743e6c969e",
        "metadata": {}
      },
      {
        "path": "docs/management/README.md",
        "type": "file",
        "artifact_id": "4440a169-c148-424d-9bce-16f68a678852",
        "metadata": {}
      },
      {
        "path": "docs/manifesto.md",
        "type": "file",
        "artifact_id": "ea3ca785-1a5d-4d04-816e-71f0e79e4163",
        "metadata": {}
      },
      {
        "path": "docs/onboarding.md",
        "type": "file",
        "artifact_id": "a1b26339-8409-4753-8056-0d1abfbb976b",
        "metadata": {}
      },
      {
        "path": "docs/project_structure.md",
        "type": "file",
        "artifact_id": "6d59b719-17a0-4725-975a-a53126d6dfa0",
        "metadata": {}
      },
      {
        "path": "docs/ru",
        "type": "directory",
        "artifact_id": "7e8538f2-bc1a-4c04-af6f-b983f24e826b",
        "metadata": {}
      },
      {
        "path": "docs/ru/CONTRIBUTING.md",
        "type": "file",
        "artifact_id": "b13ecfe7-c3a7-44e3-b9fa-5aa695e6bc8a",
        "metadata": {}
      },
      {
        "path": "docs/ru/README.md",
        "type": "file",
        "artifact_id": "97c85472-56d5-4e3e-b689-eb3bde7558d9",
        "metadata": {}
      },
      {
        "path": "docs/ru/best_practices.md",
        "type": "file",
        "artifact_id": "7116b2f7-71ff-4f32-8700-bbc953a1bdde",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples",
        "type": "directory",
        "artifact_id": "7de23f7e-9fc7-4ed2-bb75-4a1e90c0a1de",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples/struct.json",
        "type": "file",
        "artifact_id": "864d4512-5000-4bc5-8221-b39c3fb8a632",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_community.md",
        "type": "file",
        "artifact_id": "a05ddeb9-2782-47c7-83b6-ccde9365fd63",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_strategy.md",
        "type": "file",
        "artifact_id": "09585a26-f078-46c9-bbf2-0988d5c36825",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_technical.md",
        "type": "file",
        "artifact_id": "8c2f8053-c170-450c-ae27-708cd2cffc43",
        "metadata": {}
      },
      {
        "path": "docs/ru/integration.md",
        "type": "file",
        "artifact_id": "5ab56dd1-33bf-4949-a630-7779a2310120",
        "metadata": {}
      },
      {
        "path": "docs/ru/interactions_diagram.ru.md",
        "type": "file",
        "artifact_id": "75384977-e929-454a-bffe-079b39f94382",
        "metadata": {}
      },
      {
        "path": "docs/ru/llmstruct_config.md",
        "type": "file",
        "artifact_id": "63030b53-33e8-4063-80d5-7ae417194df9",
        "metadata": {}
      },
      {
        "path": "docs/ru/llmstruct_format.md",
        "type": "file",
        "artifact_id": "698bd925-2364-4bad-9318-5be5fd9b28a0",
        "metadata": {}
      },
      {
        "path": "docs/ru/manifesto.md",
        "type": "file",
        "artifact_id": "47fdaa9d-ae87-48f2-957d-eec48f122179",
        "metadata": {}
      },
      {
        "path": "docs/ru/onboarding.md",
        "type": "file",
        "artifact_id": "5de1bd32-9ea3-471b-999a-e70b1f49a18b",
        "metadata": {}
      },
      {
        "path": "docs/ru/project_structure.md",
        "type": "file",
        "artifact_id": "a804a37e-991b-492a-a73e-e74723bc573b",
        "metadata": {}
      },
      {
        "path": "docs/self_run.py",
        "type": "file",
        "artifact_id": "1b1f09a0-a9b7-4cc0-a371-d958b0357071",
        "metadata": {}
      },
      {
        "path": "docs/struct_security.md",
        "type": "file",
        "artifact_id": "d45af3bf-09bb-4869-81d1-0749b2b973ec",
        "metadata": {}
      },
      {
        "path": "docs/test_self_run.py",
        "type": "file",
        "artifact_id": "4378b47d-faf9-4533-8124-056c1dc8a295",
        "metadata": {}
      },
      {
        "path": "epics",
        "type": "directory",
        "artifact_id": "038c32f9-4ced-4f14-b1df-3b4a7ab9b9f7",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-1-AI-BRANCH-SAFETY-SYSTEM.md",
        "type": "file",
        "artifact_id": "eb67133e-4217-4ebf-8db4-b9926100ea41",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-2-AI-SESSION-MANAGEMENT.md",
        "type": "file",
        "artifact_id": "c42718b1-5ee4-4b05-a58f-671d6ef9651e",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-3-ENHANCED-DOGFOOD-COMMAND.md",
        "type": "file",
        "artifact_id": "c5717ff7-b0b6-497c-8786-a487dccfe212",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-4-RISK-BASED-DEVELOPMENT-WORKFLOW.md",
        "type": "file",
        "artifact_id": "bf3a7d46-1ca8-481a-a3fb-21ed331a88cd",
        "metadata": {}
      },
      {
        "path": "epics/README.md",
        "type": "file",
        "artifact_id": "1b8cd6e4-86a5-4560-ab94-6976099b290f",
        "metadata": {}
      },
      {
        "path": "epics/epics_data.json",
        "type": "file",
        "artifact_id": "6bd8c182-37f2-46e1-83ca-9650cf31a2c3",
        "metadata": {}
      },
      {
        "path": "examples",
        "type": "directory",
        "artifact_id": "c1f84a8c-de81-4c8e-9a65-14867b7372e2",
        "metadata": {}
      },
      {
        "path": "examples/python_project_main.py",
        "type": "file",
        "artifact_id": "a4410a18-8f88-4075-8f07-5224d0fad7b7",
        "metadata": {}
      },
      {
        "path": "examples/python_project_utils.py",
        "type": "file",
        "artifact_id": "7d0d0246-2051-46e1-9a20-95794a306eeb",
        "metadata": {}
      },
      {
        "path": "examples/telegram_bot",
        "type": "directory",
        "artifact_id": "583969c0-d39e-44a1-b138-f5a354a00f4a",
        "metadata": {}
      },
      {
        "path": "examples/telegram_bot/test_bot.py",
        "type": "file",
        "artifact_id": "345d0cd8-e0fd-4053-970d-3d82711c001c",
        "metadata": {}
      },
      {
        "path": "install_ai_integration.py",
        "type": "file",
        "artifact_id": "752b9b65-17f6-4ab0-96bd-f226873b8dde",
        "metadata": {}
      },
      {
        "path": "integrations",
        "type": "directory",
        "artifact_id": "305613bc-cb01-4bd1-9eef-22ae0c400d98",
        "metadata": {}
      },
      {
        "path": "integrations/continue",
        "type": "directory",
        "artifact_id": "7ace1c41-8318-49fb-a09b-c1c72df5a145",
        "metadata": {}
      },
      {
        "path": "integrations/continue/README.md",
        "type": "file",
        "artifact_id": "bb0c5020-0ed8-46a9-9242-a001231855a3",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot",
        "type": "directory",
        "artifact_id": "af8e959e-22ce-40b0-bf1a-76190b01906a",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot/mp002_progress_bot.py",
        "type": "file",
        "artifact_id": "68faeb2f-eb85-4f22-a7ea-36120e7b225a",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot/simple_bot.py",
        "type": "file",
        "artifact_id": "911e6623-c44b-4ea0-952a-b67bc0027d92",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot/test_bot.py",
        "type": "file",
        "artifact_id": "47ddd498-0327-4e75-840a-ffff8ca891e6",
        "metadata": {}
      },
      {
        "path": "quick_ws_test.py",
        "type": "file",
        "artifact_id": "79658fae-81cb-4f2c-b308-0f954c0786c3",
        "metadata": {}
      },
      {
        "path": "run_ai_diagnostics.py",
        "type": "file",
        "artifact_id": "ed737456-efba-482b-845f-0c11c7e84413",
        "metadata": {}
      },
      {
        "path": "schema",
        "type": "directory",
        "artifact_id": "112277bd-12cb-4d74-9187-b634e0e3ed33",
        "metadata": {}
      },
      {
        "path": "schema/artifacts_simplified.json",
        "type": "file",
        "artifact_id": "e97dbf1a-0678-4c64-a141-d2598c7faabf",
        "metadata": {}
      },
      {
        "path": "schema/cli_queue.json",
        "type": "file",
        "artifact_id": "778c6d57-fd33-4745-9655-6adf01353ad3",
        "metadata": {}
      },
      {
        "path": "schema/cli_simplified.json",
        "type": "file",
        "artifact_id": "45367c6f-c096-44f0-baf2-06917507d509",
        "metadata": {}
      },
      {
        "path": "schema/common",
        "type": "directory",
        "artifact_id": "bb75c3e4-062b-45dc-93fe-08754334e3da",
        "metadata": {}
      },
      {
        "path": "schema/common/definitions.json",
        "type": "file",
        "artifact_id": "7a872f9b-f267-4f2b-9a2a-e7e1e61e831a",
        "metadata": {}
      },
      {
        "path": "schema/core.json",
        "type": "file",
        "artifact_id": "9a612cb8-e2a5-4572-a91f-688252a32611",
        "metadata": {}
      },
      {
        "path": "schema/core_simplified.json",
        "type": "file",
        "artifact_id": "0ec3ab0e-6dc3-4253-9d16-76bd1426f693",
        "metadata": {}
      },
      {
        "path": "schema/insights_simplified.json",
        "type": "file",
        "artifact_id": "eae8af51-10cf-4f0a-b534-ff451aacf56e",
        "metadata": {}
      },
      {
        "path": "schema/llmstruct_schema.json",
        "type": "file",
        "artifact_id": "733e9c24-bf16-4aa1-b315-39c7eeb424c8",
        "metadata": {}
      },
      {
        "path": "schema/llmstruct_schema_simplified.json",
        "type": "file",
        "artifact_id": "06834c9a-323d-467a-862f-476667a71669",
        "metadata": {}
      },
      {
        "path": "schema/plugins",
        "type": "directory",
        "artifact_id": "12b6f3a5-e84a-4859-bda0-f58aabe28fbf",
        "metadata": {}
      },
      {
        "path": "schema/plugins/artifacts.json",
        "type": "file",
        "artifact_id": "f71e5e02-054b-4a8e-9abc-3b3d93da810a",
        "metadata": {}
      },
      {
        "path": "schema/plugins/cli.json",
        "type": "file",
        "artifact_id": "4fb125bb-487f-4b68-ac3a-6279d27c2c0b",
        "metadata": {}
      },
      {
        "path": "schema/plugins/data_sorter.json",
        "type": "file",
        "artifact_id": "1f9b99ff-8b39-41f0-9c21-af6d4e9a0629",
        "metadata": {}
      },
      {
        "path": "schema/plugins/insights.json",
        "type": "file",
        "artifact_id": "58fc90cb-9527-492c-af70-53c5f976027e",
        "metadata": {}
      },
      {
        "path": "src",
        "type": "directory",
        "artifact_id": "62cdeb74-8700-40b3-9ddc-40a7b89e2db6",
        "metadata": {}
      },
      {
        "path": "src/llmstruct",
        "type": "directory",
        "artifact_id": "63fe7c37-e22b-41bb-bc79-1138b72e664e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct.egg-info",
        "type": "directory",
        "artifact_id": "c872ede8-3333-43f4-b7e7-c27ff8fea9fb",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__init__.py",
        "type": "file",
        "artifact_id": "91194cda-aeac-4d5e-b98a-4d6e992e73b4",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__main__.py",
        "type": "file",
        "artifact_id": "2be89890-fb24-4b89-a836-c7e70fc1fd2d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_cli_integration.py",
        "type": "file",
        "artifact_id": "3ba8ac96-2b19-4008-8c53-5b38843f2d20",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_self_awareness.py",
        "type": "file",
        "artifact_id": "02ac0331-9631-4d2f-b8e4-b7e2b5a8e47b",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_self_monitor.py",
        "type": "file",
        "artifact_id": "c16764fc-96c1-47da-8697-4bb20fb10828",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_workflow_middleware.py",
        "type": "file",
        "artifact_id": "77d20bfd-ab62-4364-b7ae-361098c2c219",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cache.py",
        "type": "file",
        "artifact_id": "dac70abd-5171-483e-ab35-3a8ef562c812",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli.py",
        "type": "file",
        "artifact_id": "5c6c7ec5-8803-4d99-a70b-3b1bc7e31d1d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_argument_parser.py",
        "type": "file",
        "artifact_id": "91155ebe-edc7-411e-bd6b-c1b0ff3066c0",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_commands.py",
        "type": "file",
        "artifact_id": "071a0b1c-d398-4764-9909-f0aec47c1132",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_config.py",
        "type": "file",
        "artifact_id": "7195ba4b-05c0-424e-9c3b-f264568b66ca",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_core.py",
        "type": "file",
        "artifact_id": "51901de3-3ac5-4319-8f07-e6ccd25b0ea7",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_main_commands.py",
        "type": "file",
        "artifact_id": "894380b1-9d24-46ee-bed3-0425ef2ecc0e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_utils.py",
        "type": "file",
        "artifact_id": "5c1a14ce-b043-430d-b514-a8148d1ad8ca",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/context_orchestrator.py",
        "type": "file",
        "artifact_id": "56690dd5-716a-4958-bec5-c7e684b40aef",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/copilot.py",
        "type": "file",
        "artifact_id": "6b7ef275-1114-4644-a5ef-d8b1bdfa8414",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cursor_ai_bridge.py",
        "type": "file",
        "artifact_id": "d200d91c-592b-4605-b1f0-526eaf952941",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cursor_integration.py",
        "type": "file",
        "artifact_id": "bbd1afa9-d0cc-44eb-907b-bb2a7b37cef3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators",
        "type": "directory",
        "artifact_id": "d8ab2a8d-706a-4410-9f90-819cb449f987",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/__init__.py",
        "type": "file",
        "artifact_id": "affce691-d43f-432c-a528-77b42bb30beb",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/go_json_generator.py",
        "type": "file",
        "artifact_id": "d71964e2-b733-40b5-9ec7-66d219be0fbc",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/json_generator.py",
        "type": "file",
        "artifact_id": "be237735-947e-4a12-bcb7-f82d28ef652e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/gh_view.py",
        "type": "file",
        "artifact_id": "47e4718a-f1cc-4242-ba30-912de0ff97e5",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/grok.py",
        "type": "file",
        "artifact_id": "47220468-8ede-44ae-8eef-88528473c24a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/json_selector.py",
        "type": "file",
        "artifact_id": "1fde7476-906b-4656-9a43-e2422bc236df",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/llm_client.py",
        "type": "file",
        "artifact_id": "263404bc-b85f-4bec-ba01-f7b9d54f0aea",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/metrics_tracker.py",
        "type": "file",
        "artifact_id": "73c87af8-10ab-4a1f-9e70-b15facd36fd4",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules",
        "type": "directory",
        "artifact_id": "1192e6d9-b9bb-459e-861c-5936f068545e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules/commands",
        "type": "directory",
        "artifact_id": "be8b6e1b-ecb4-4417-a4ac-eec680c6d09d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules/commands/__init__.py",
        "type": "file",
        "artifact_id": "cebbb6b6-abe8-4275-a1fb-21099b8a0977",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules/commands/metrics.py",
        "type": "file",
        "artifact_id": "0b23dcf3-35af-411e-af97-1af65fbbf9d8",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules/commands/queue.py",
        "type": "file",
        "artifact_id": "7463aaa1-4103-4118-b6c6-23b3b1595c88",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules/commands/services.py",
        "type": "file",
        "artifact_id": "ce28d18b-d331-4d27-955e-26f99f0a801a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers",
        "type": "directory",
        "artifact_id": "22bacc13-aad4-41f0-9ff8-fc5e5e1de8fc",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/__init__.py",
        "type": "file",
        "artifact_id": "abfb90b1-79da-4152-b679-3987211b9916",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/go_analyzer.py",
        "type": "file",
        "artifact_id": "584ab3ee-9434-4639-a692-86a1fbfb9730",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/javascript_parser.py",
        "type": "file",
        "artifact_id": "014b53d3-b5bd-4601-b8e0-fb6ac13ded8b",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/python_parser.py",
        "type": "file",
        "artifact_id": "92df37f8-036d-4891-ada3-dfa0b4e0caed",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/universal_converter.py",
        "type": "file",
        "artifact_id": "35a8b85b-501e-4b58-8cdd-4984091d55d3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/self_run.py",
        "type": "file",
        "artifact_id": "bf47b5ac-8845-477d-9e78-06067f7b974a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates",
        "type": "directory",
        "artifact_id": "73d251f5-4271-45d9-a1da-0f4037363f12",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates/__init__.py",
        "type": "file",
        "artifact_id": "4246d740-2ab2-4890-ae6e-df046d720237",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/transpiler.py",
        "type": "file",
        "artifact_id": "641dcbc6-1bbb-47d7-985f-6da8b2b01988",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators",
        "type": "directory",
        "artifact_id": "e8c29f24-6099-4f32-bead-58fed00423d0",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/__init__.py",
        "type": "file",
        "artifact_id": "5dab0060-a2b1-471f-a0b2-e989a6efb464",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/json_validator.py",
        "type": "file",
        "artifact_id": "90132621-a827-4f1f-a146-3f778ea8e67f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/workflow_orchestrator.py",
        "type": "file",
        "artifact_id": "49457620-6aa8-4722-8a99-7b8ea1e4665d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/workspace.py",
        "type": "file",
        "artifact_id": "a90d3a81-427a-476a-8692-38d1c9ffaa0b",
        "metadata": {}
      },
      {
        "path": "src/scripts",
        "type": "directory",
        "artifact_id": "2aed4c15-031f-41ab-af73-4d085c622fcb",
        "metadata": {}
      },
      {
        "path": "src/scripts/auto_update_struct.py",
        "type": "file",
        "artifact_id": "5ffa5516-4836-44de-9cc0-48a992291b74",
        "metadata": {}
      },
      {
        "path": "src/scripts/collector.py",
        "type": "file",
        "artifact_id": "116dec12-36d6-4c2a-8cc2-7729724dc42e",
        "metadata": {}
      },
      {
        "path": "src/scripts/create_comprehensive_index.py",
        "type": "file",
        "artifact_id": "ea77d04f-9e54-45d9-a677-2ac9d40b95fb",
        "metadata": {}
      },
      {
        "path": "src/scripts/create_github_issues.py",
        "type": "file",
        "artifact_id": "b28e4fdb-614b-4b6f-b53a-9f0f3e634303",
        "metadata": {}
      },
      {
        "path": "src/scripts/create_tasks_index.py",
        "type": "file",
        "artifact_id": "db5dcd02-77c3-4b92-a634-73c91119c85c",
        "metadata": {}
      },
      {
        "path": "src/scripts/deploy_embedded_files.py",
        "type": "file",
        "artifact_id": "08322c01-b4ca-423e-b0e3-52e2d80d562e",
        "metadata": {}
      },
      {
        "path": "src/scripts/epic_roadmap_manager.py",
        "type": "file",
        "artifact_id": "3b303cf0-cdb3-46dc-a72d-71ea35d8d158",
        "metadata": {}
      },
      {
        "path": "src/scripts/export_to_github_projects.py",
        "type": "file",
        "artifact_id": "08ec0321-aa16-4e1e-86a6-8e9c1d466be9",
        "metadata": {}
      },
      {
        "path": "src/scripts/fix_github_script.py",
        "type": "file",
        "artifact_id": "ab71a333-b007-4e1f-950c-06ebfe872e35",
        "metadata": {}
      },
      {
        "path": "src/scripts/fix_hardcoded_usernames.py",
        "type": "file",
        "artifact_id": "22c85ada-5538-4bad-a18a-20a2badd761a",
        "metadata": {}
      },
      {
        "path": "src/scripts/github_sync_manager.py",
        "type": "file",
        "artifact_id": "4dfe1be9-b9ee-4351-8111-28e50794c654",
        "metadata": {}
      },
      {
        "path": "src/scripts/github_sync_manager_enhanced.py",
        "type": "file",
        "artifact_id": "7d5bf484-dc83-44fa-83a4-83bd9af37c72",
        "metadata": {}
      },
      {
        "path": "src/scripts/old",
        "type": "directory",
        "artifact_id": "fb8b2f36-dd97-46cf-9510-86498936e6ea",
        "metadata": {}
      },
      {
        "path": "src/scripts/process_926_items.py",
        "type": "file",
        "artifact_id": "d971b558-c5ef-4cf1-9b1e-a204c563e7f9",
        "metadata": {}
      },
      {
        "path": "src/scripts/session_cli.py",
        "type": "file",
        "artifact_id": "5d9c639d-e0fb-4d12-aa19-87e379758ab2",
        "metadata": {}
      },
      {
        "path": "src/scripts/team",
        "type": "directory",
        "artifact_id": "ec7c543f-a9d3-40c2-9e9b-1d2693d33931",
        "metadata": {}
      },
      {
        "path": "src/scripts/team/__init__.py",
        "type": "file",
        "artifact_id": "104b2635-dff9-4cf2-8e89-a26606d6bb42",
        "metadata": {}
      },
      {
        "path": "src/scripts/validate_epics.py",
        "type": "file",
        "artifact_id": "99ca4a9a-afea-4355-ad4b-aaebee40be0a",
        "metadata": {}
      },
      {
        "path": "src/scripts/validate_json.py",
        "type": "file",
        "artifact_id": "5829116d-fb2c-4aba-917a-10a0bf7e2b83",
        "metadata": {}
      },
      {
        "path": "src/scripts/validate_refs.py",
        "type": "file",
        "artifact_id": "3ae12caf-0bfc-4bfa-a9e1-c3bd6240ac26",
        "metadata": {}
      },
      {
        "path": "src/scripts/validate_schemas.py",
        "type": "file",
        "artifact_id": "19d9a479-d2bc-4d81-b057-4a113df222bf",
        "metadata": {}
      },
      {
        "path": "start_development.py",
        "type": "file",
        "artifact_id": "d350e2cc-f5b4-4b4e-a6ed-8d575a2b69ee",
        "metadata": {}
      },
      {
        "path": "struct.json",
        "type": "file",
        "artifact_id": "d21b464d-7980-40ce-b4db-c788e30c51c6",
        "metadata": {}
      },
      {
        "path": "struct_cache_manager.py",
        "type": "file",
        "artifact_id": "c371c86d-2bc4-44f1-85ca-7b63cb4cd273",
        "metadata": {}
      },
      {
        "path": "temp",
        "type": "directory",
        "artifact_id": "b08b44b5-f4f8-4bd8-91f4-1c119e3a8f81",
        "metadata": {}
      },
      {
        "path": "temp/discussion_notes.md",
        "type": "file",
        "artifact_id": "981e1e9b-80ce-4da5-8bf4-330763bbf629",
        "metadata": {}
      },
      {
        "path": "temp/pause_recovery.md",
        "type": "file",
        "artifact_id": "610d8bf6-0212-4475-8183-35c4177518e1",
        "metadata": {}
      },
      {
        "path": "temp/restore_ai_context.md",
        "type": "file",
        "artifact_id": "972265ce-ae0f-482d-a4ca-4a05f17c2444",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox",
        "type": "directory",
        "artifact_id": "e95501e9-e3df-4930-8235-fabb1bbf1edc",
        "metadata": {}
      },
      {
        "path": "tests",
        "type": "directory",
        "artifact_id": "873ad1d4-4fb9-4ffd-8a65-e6abbbf57f5e",
        "metadata": {}
      },
      {
        "path": "tests/__init__.py",
        "type": "file",
        "artifact_id": "aea303ee-ec17-48cc-a7d7-f3b40fa16c16",
        "metadata": {}
      },
      {
        "path": "tests/test_self_run.py",
        "type": "file",
        "artifact_id": "e11e6165-c5a4-4961-aef6-279f4c193a17",
        "metadata": {}
      },
      {
        "path": "validate_schemas.py",
        "type": "file",
        "artifact_id": "7141052e-25da-4010-b113-48ac41a1c88b",
        "metadata": {}
      },
      {
        "path": "validate_sessions.py",
        "type": "file",
        "artifact_id": "ee2d6aa0-9b51-4c9d-82b0-b44a505cbf3f",
        "metadata": {}
      },
      {
        "path": "verify_llm_response.py",
        "type": "file",
        "artifact_id": "8c8b5bff-d2e9-4d0c-898a-ce2bb53680e0",
        "metadata": {}
      },
      {
        "path": "workspace_state.json",
        "type": "file",
        "artifact_id": "f100f81b-3eb8-435c-ba1a-c2d10cd3689a",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "Session Schema Validation Script for llmstruct",
      "artifact_id": "2f14082e-ffd6-4318-9799-56a367885a79"
    },
    {
      "module_id": "auto_init_ai_system",
      "path": "auto_init_ai_system.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor",
      "artifact_id": "4d2d17d8-ddd1-48eb-b95f-c4abf7289844"
    },
    {
      "module_id": "collect_json",
      "path": "collect_json.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "6e09e11c-d556-4b6d-98d1-0462e3bfdb25"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "JSON Schema Validation Script for llmstruct",
      "artifact_id": "8aab3474-3adf-42f4-8bb8-ac5912bb951f"
    },
    {
      "module_id": "install_ai_integration",
      "path": "install_ai_integration.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor",
      "artifact_id": "07a1f79b-1320-497b-9061-d53b38fda454"
    },
    {
      "module_id": "run_ai_diagnostics",
      "path": "run_ai_diagnostics.py",
      "category": "core",
      "functions": 19,
      "classes": 0,
      "summary": "Comprehensive AI Self-Awareness Diagnostics Runner",
      "artifact_id": "ebb79b44-a375-4b8b-9701-bf39d4c6bf59"
    },
    {
      "module_id": "start_development",
      "path": "start_development.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "LLMStruct Development Startup Script",
      "artifact_id": "bb51b797-94a2-4eb4-8b79-adc399e8a34c"
    },
    {
      "module_id": "quick_ws_test",
      "path": "quick_ws_test.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Quick WebSocket Test Script",
      "artifact_id": "a4e9283e-93ee-46a8-a888-21a6cddcc8c0"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "f884fcf6-c70a-47b8-bcad-a7f56a629f12"
    },
    {
      "module_id": "struct_cache_manager",
      "path": "struct_cache_manager.py",
      "category": "core",
      "functions": 12,
      "classes": 1,
      "summary": "\ud83d\ude80 Smart struct.json Cache Manager for [code] Mode",
      "artifact_id": "a0751217-03be-4eab-b7e3-0efb787afdca"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "fc165121-a126-4beb-bacf-9c8065145d69"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_models",
      "path": ".ARCHIVE/parse_ollama_models.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "\u041f\u0430\u0440\u0441\u0435\u0440 \u0441\u043f\u0438\u0441\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Ollama \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430",
      "artifact_id": "c86a3019-0daa-4717-a84b-23e20cc1b442"
    },
    {
      "module_id": ".ARCHIVE.test_cli_demo",
      "path": ".ARCHIVE/test_cli_demo.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Quick CLI test to demonstrate new commands",
      "artifact_id": "e372092a-94ae-4e6d-8299-f9c3391d85cb"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_full",
      "path": ".ARCHIVE/parse_ollama_full.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "Full Ollama List Parser + Context Merger for Grok Consultation",
      "artifact_id": "06954892-922f-40ef-97e9-4740ad9ad670"
    },
    {
      "module_id": ".ARCHIVE.force_ai_integration",
      "path": ".ARCHIVE/force_ai_integration.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Force AI Integration Script",
      "artifact_id": "61eda24d-0204-4c62-b6b5-6f0d8af29b2e"
    },
    {
      "module_id": ".ARCHIVE.test_modular_cli",
      "path": ".ARCHIVE/test_modular_cli.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "Test script for modular CLI structure",
      "artifact_id": "76d85bb7-c32f-43dc-94bf-7233045a0aa4"
    },
    {
      "module_id": ".ARCHIVE.test_websocket",
      "path": ".ARCHIVE/test_websocket.py",
      "category": "test",
      "functions": 4,
      "classes": 1,
      "summary": "WebSocket Chat Client",
      "artifact_id": "8a15d389-f37b-4800-8d91-5d1441520fb8"
    },
    {
      "module_id": ".ARCHIVE.final_system_check",
      "path": ".ARCHIVE/final_system_check.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final System Status Check - LLMStruct Modular CLI Integration",
      "artifact_id": "482c6924-b115-4442-b108-6dc2c28d93e0"
    },
    {
      "module_id": ".ARCHIVE.telegram_bot_final",
      "path": ".ARCHIVE/telegram_bot_final.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "\ud83c\udfaf \u0424\u0418\u041d\u0410\u041b\u042c\u041d\u0410\u042f \u0432\u0435\u0440\u0441\u0438\u044f Telegram \u0431\u043e\u0442\u0430 \u0434\u043b\u044f LLMStruct",
      "artifact_id": "7bf091b3-6b65-48bb-85df-55cab1f7bee2"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_for_grok",
      "path": ".ARCHIVE/parse_ollama_for_grok.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "0b7ce795-c556-46a3-a513-a7b8330cb7b4"
    },
    {
      "module_id": ".ARCHIVE.final_system_validation",
      "path": ".ARCHIVE/final_system_validation.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final system validation script for LLMStruct Modular CLI Integration",
      "artifact_id": "c34bc39a-8915-4a84-bb4d-b5f2f7c84e37"
    },
    {
      "module_id": ".ARCHIVE.test_ai_cli_debug",
      "path": ".ARCHIVE/test_ai_cli_debug.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "Simple test for AI CLI Integration - Debug Version",
      "artifact_id": "fb74440e-f7f6-44c4-9b97-6271e6218b12"
    },
    {
      "module_id": ".ARCHIVE.test_audit",
      "path": ".ARCHIVE/test_audit.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test script for audit functionality.",
      "artifact_id": "b34405fc-e181-43d5-9088-e47c11b7a45f"
    },
    {
      "module_id": ".ARCHIVE.test_bot_functionality",
      "path": ".ARCHIVE/test_bot_functionality.py",
      "category": "test",
      "functions": 10,
      "classes": 1,
      "summary": "\ud83e\uddea Comprehensive Bot Functionality Test",
      "artifact_id": "817c2242-80ff-4483-a22d-3ad825648815"
    },
    {
      "module_id": ".ARCHIVE.debug_terminal",
      "path": ".ARCHIVE/debug_terminal.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Debug Terminal Script - Fallback for when terminal output is not visible",
      "artifact_id": "3c8aad81-665e-4493-a190-8cba80347845"
    },
    {
      "module_id": ".ARCHIVE.test_export",
      "path": ".ARCHIVE/test_export.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "deb0453e-f074-4e61-9979-f2779e2ec77d"
    },
    {
      "module_id": ".ARCHIVE.telegram_bot_enhanced",
      "path": ".ARCHIVE/telegram_bot_enhanced.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "7b22ec48-397f-4621-a65f-e625fd39f943"
    },
    {
      "module_id": ".ARCHIVE.test_api",
      "path": ".ARCHIVE/test_api.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Test script for LLMStruct FastAPI",
      "artifact_id": "be5edb05-84a1-412d-85d7-8264f481d079"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_minimal",
      "path": ".ARCHIVE/parse_ollama_minimal.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "Minimal Ollama Parser - Clean JSON without extra analytics",
      "artifact_id": "5c4a2b3a-75c9-4e28-89f0-5d42f1709e89"
    },
    {
      "module_id": ".ARCHIVE.chat_bot_final",
      "path": ".ARCHIVE/chat_bot_final.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "LLMStruct Chat Bot Final - \u041f\u043e\u043b\u043d\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 FastAPI",
      "artifact_id": "a3bb4235-42e2-43a5-ae9e-8edd202e6a7d"
    },
    {
      "module_id": ".ARCHIVE.monitor_system",
      "path": ".ARCHIVE/monitor_system.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "System Monitor - Continuous logging for debugging terminal issues",
      "artifact_id": "0a490352-3eaa-4a06-987c-d3cefdebe4bf"
    },
    {
      "module_id": ".ARCHIVE.ollama_full_parser",
      "path": ".ARCHIVE/ollama_full_parser.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "52bfcb98-16fe-4b82-a9c6-2d98d6f849cc"
    },
    {
      "module_id": ".ARCHIVE.test_enhanced_ai_awareness",
      "path": ".ARCHIVE/test_enhanced_ai_awareness.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test script for AI Self-Awareness Enhancement with Unused Function Integration",
      "artifact_id": "08c89454-2b50-46e9-8156-54330580020e"
    },
    {
      "module_id": ".ARCHIVE.telegram_bot_test",
      "path": ".ARCHIVE/telegram_bot_test.py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "\ud83e\uddea \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 FastAPI",
      "artifact_id": "faddf6fe-8444-49c4-8e1e-eacdfa0f6712"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_fixed",
      "path": ".ARCHIVE/parse_ollama_fixed.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "Fixed Ollama List Parser + Context Merger for Grok Consultation",
      "artifact_id": "7c56dfa8-9939-4860-889b-87f64673d5c7"
    },
    {
      "module_id": ".ARCHIVE.board_cli",
      "path": ".ARCHIVE/board_cli.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "CLI Kanban Board for llmstruct tasks and ideas",
      "artifact_id": "77f5d66c-9b15-43dd-9e2e-2802f25d59a1"
    },
    {
      "module_id": ".ARCHIVE.test_cli_integration",
      "path": ".ARCHIVE/test_cli_integration.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test script for CLI integration with new commands",
      "artifact_id": "7fd3894b-8288-4708-a167-08634e80ce63"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_improved",
      "path": ".ARCHIVE/parse_ollama_improved.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "Improved Ollama List Parser + Context Merger for Grok Consultation",
      "artifact_id": "4d5a3978-0a3d-4a29-8d60-aee1289b3ddb"
    },
    {
      "module_id": ".ARCHIVE.test_efficiency",
      "path": ".ARCHIVE/test_efficiency.py",
      "category": "test",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "f72c2ca3-69f6-495b-9d0d-7eaffe68a306"
    },
    {
      "module_id": ".ARCHIVE.bot_api_server",
      "path": ".ARCHIVE/bot_api_server.py",
      "category": "core",
      "functions": 19,
      "classes": 3,
      "summary": "\ud83e\udd16 Enhanced Bot API Server",
      "artifact_id": "88784c68-ae1a-485a-94cc-8d8b35ece847"
    },
    {
      "module_id": ".ARCHIVE.bot_file_operations",
      "path": ".ARCHIVE/bot_file_operations.py",
      "category": "core",
      "functions": 14,
      "classes": 1,
      "summary": "\ud83d\udcc1 Bot File Operations Module",
      "artifact_id": "972da631-5f74-4f1e-b1ec-f55e0d6feeae"
    },
    {
      "module_id": ".ARCHIVE.test_file_operations",
      "path": ".ARCHIVE/test_file_operations.py",
      "category": "test",
      "functions": 8,
      "classes": 0,
      "summary": "\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
      "artifact_id": "de70d42d-4f52-4291-a8b0-57a35328fc4a"
    },
    {
      "module_id": ".ARCHIVE.chat_bot_working",
      "path": ".ARCHIVE/chat_bot_working.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "\ud83d\ude80 ENHANCED Telegram Bot \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
      "artifact_id": "461d8eb1-7261-49af-a76b-bdebd939e3de"
    },
    {
      "module_id": ".ARCHIVE.chat_bot",
      "path": ".ARCHIVE/chat_bot.py",
      "category": "core",
      "functions": 17,
      "classes": 1,
      "summary": "LLMStruct Chat Bot - \u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 Cursor + Ollama",
      "artifact_id": "7b50ccbf-717a-46d6-b959-f6b0e7f82de1"
    },
    {
      "module_id": ".ARCHIVE.test_api_simple",
      "path": ".ARCHIVE/test_api_simple.py",
      "category": "test",
      "functions": 13,
      "classes": 6,
      "summary": "\u0423\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0439 API \u0441\u0435\u0440\u0432\u0435\u0440 LLMStruct \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 development",
      "artifact_id": "29dd2d06-42fb-44d3-9242-26a2048be94e"
    },
    {
      "module_id": ".ARCHIVE.fastapi_ollama_server_working",
      "path": ".ARCHIVE/fastapi_ollama_server_working.py",
      "category": "core",
      "functions": 16,
      "classes": 4,
      "summary": "\ud83d\ude80 \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f LLMStruct",
      "artifact_id": "9fec6baa-09e7-4569-8fc0-d56ea1da2b2b"
    },
    {
      "module_id": ".ARCHIVE.test_context_orchestration",
      "path": ".ARCHIVE/test_context_orchestration.py",
      "category": "test",
      "functions": 23,
      "classes": 2,
      "summary": "LLM Context Orchestration Testing Suite",
      "artifact_id": "74073da2-a277-408d-946d-3a138355834a"
    },
    {
      "module_id": ".ARCHIVE.test_cli",
      "path": ".ARCHIVE/test_cli.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "f84bebfe-c21d-4e1c-b091-b76d32b92759"
    },
    {
      "module_id": ".ARCHIVE.modules.query.handlers",
      "path": ".ARCHIVE/modules/query/handlers.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "8d453478-c14d-4208-be65-814411abde52"
    },
    {
      "module_id": ".ARCHIVE.modules.query.__init__",
      "path": ".ARCHIVE/modules/query/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "90dc30f1-9ba7-4271-880f-7135a6fa38e0"
    },
    {
      "module_id": ".ARCHIVE.modules.bot.handlers",
      "path": ".ARCHIVE/modules/bot/handlers.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "353e6bbb-57d2-4e1f-8a74-fac92f89a04e"
    },
    {
      "module_id": ".ARCHIVE.modules.bot.__init__",
      "path": ".ARCHIVE/modules/bot/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "76ddd521-a8a0-4f10-a858-7ee480bf6b09"
    },
    {
      "module_id": ".ARCHIVE.modules.metrics.handlers",
      "path": ".ARCHIVE/modules/metrics/handlers.py",
      "category": "core",
      "functions": 7,
      "classes": 0,
      "summary": "",
      "artifact_id": "383a2c91-4bdc-435c-a3be-08f6a734d715"
    },
    {
      "module_id": ".ARCHIVE.modules.metrics.__init__",
      "path": ".ARCHIVE/modules/metrics/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "ca0dd6bd-155e-45e6-b97f-b45d0154a5df"
    },
    {
      "module_id": ".ARCHIVE.modules.analyze_duplicates.handlers",
      "path": ".ARCHIVE/modules/analyze_duplicates/handlers.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "5839c53c-9ab7-40b8-956b-6e8d887ea93f"
    },
    {
      "module_id": ".ARCHIVE.modules.analyze_duplicates.__init__",
      "path": ".ARCHIVE/modules/analyze_duplicates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "e9bade85-f410-4c75-8b62-3adea7ccff89"
    },
    {
      "module_id": ".ARCHIVE.modules.parse.handlers",
      "path": ".ARCHIVE/modules/parse/handlers.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "04431f99-b6dd-4d1a-957f-eafb4b00e29d"
    },
    {
      "module_id": ".ARCHIVE.modules.parse.__init__",
      "path": ".ARCHIVE/modules/parse/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "eacdac14-b5fd-4d10-b7e5-e089b1f446b8"
    },
    {
      "module_id": ".ARCHIVE.modules.audit.handlers",
      "path": ".ARCHIVE/modules/audit/handlers.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "5ea46d12-8416-4e1c-a0a0-0e6ac95fc3a4"
    },
    {
      "module_id": ".ARCHIVE.modules.audit.__init__",
      "path": ".ARCHIVE/modules/audit/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "97652813-188f-49ad-9910-0708e22a37d5"
    },
    {
      "module_id": ".ARCHIVE.modules.review.handlers",
      "path": ".ARCHIVE/modules/review/handlers.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "66fbc957-d081-46de-98bd-6b1c76eccadb"
    },
    {
      "module_id": ".ARCHIVE.modules.review.__init__",
      "path": ".ARCHIVE/modules/review/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "c83139c0-2679-43ba-a58a-0ab5056d6006"
    },
    {
      "module_id": ".ARCHIVE.modules.context.handlers",
      "path": ".ARCHIVE/modules/context/handlers.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "0319101c-ddee-494e-9d34-138972f094fc"
    },
    {
      "module_id": ".ARCHIVE.modules.context.__init__",
      "path": ".ARCHIVE/modules/context/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "6ff11225-ed80-4b87-8d2f-686d1fa0ef98"
    },
    {
      "module_id": ".ARCHIVE.modules.copilot.handlers",
      "path": ".ARCHIVE/modules/copilot/handlers.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "f52ab16d-2170-4150-9901-2e050c78dd89"
    },
    {
      "module_id": ".ARCHIVE.modules.copilot.__init__",
      "path": ".ARCHIVE/modules/copilot/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "3523c5cd-0f72-43a9-97de-644846bfe23b"
    },
    {
      "module_id": ".ARCHIVE.modules.api.handlers",
      "path": ".ARCHIVE/modules/api/handlers.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "78bb03b2-7e6d-4470-915d-1c2426267d86"
    },
    {
      "module_id": ".ARCHIVE.modules.api.__init__",
      "path": ".ARCHIVE/modules/api/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "468e298e-8aef-4cab-818b-fea10372cbce"
    },
    {
      "module_id": ".ARCHIVE.modules.interactive.handlers",
      "path": ".ARCHIVE/modules/interactive/handlers.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "b97f4901-93cc-4af6-8a97-59198a309dc2"
    },
    {
      "module_id": ".ARCHIVE.modules.interactive.__init__",
      "path": ".ARCHIVE/modules/interactive/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "ca9de26e-5fe7-4524-9e3c-aa28f0fc842b"
    },
    {
      "module_id": ".ARCHIVE.modules.dogfood.handlers",
      "path": ".ARCHIVE/modules/dogfood/handlers.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "9ce30c13-4bb8-4bd1-9bd3-8cc612fb9e74"
    },
    {
      "module_id": ".ARCHIVE.modules.dogfood.__init__",
      "path": ".ARCHIVE/modules/dogfood/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "4f89d71b-f075-4cda-9131-114fb84b8b3f"
    },
    {
      "module_id": ".ARCHIVE.modules.services.handlers",
      "path": ".ARCHIVE/modules/services/handlers.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "fd1c9b5a-1296-43f8-9ec6-5c3f7f7daa02"
    },
    {
      "module_id": ".ARCHIVE.modules.services.__init__",
      "path": ".ARCHIVE/modules/services/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "4e150612-d5fd-434c-aa00-6294f11ba884"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.business_planning",
      "path": ".ARCHIVE/temp_boss_missing/scripts/business_planning.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "Business Planning Module",
      "artifact_id": "db76b497-f960-468f-af7e-ad687d0fc0a6"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.team_management",
      "path": ".ARCHIVE/temp_boss_missing/scripts/team_management.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "Team Management Module",
      "artifact_id": "b8498791-0cbd-4c77-aa12-9e8af49be327"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.boss_cli",
      "path": ".ARCHIVE/temp_boss_missing/scripts/boss_cli.py",
      "category": "core",
      "functions": 25,
      "classes": 1,
      "summary": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f",
      "artifact_id": "8994a53e-6870-447b-92c4-43751822812e"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.__init__",
      "path": ".ARCHIVE/temp_boss_missing/scripts/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "3d0bdc42-adcf-4062-a1cb-08be15f91786"
    },
    {
      "module_id": ".ARCHIVE..PHOENIX.executable_phoenix_plan",
      "path": ".ARCHIVE/.PHOENIX/executable_phoenix_plan.py",
      "category": "core",
      "functions": 17,
      "classes": 1,
      "summary": "PHOENIX: \u0418\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0439 \u043f\u043b\u0430\u043d \u0440\u0435\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0437\u0430\u0446\u0438\u0438",
      "artifact_id": "c729c202-1f19-4205-8810-b6d28306885c"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.commercial_planning",
      "path": ".ARCHIVE/temp_personal_analysis/personal/commercial_planning.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "2a937cce-04f1-4002-af30-223e599d4b4c"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.business_planning",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/business_planning.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "Business Planning Module",
      "artifact_id": "a5baade5-30f0-4349-8dea-f89e44357065"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.team_management",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/team_management.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "Team Management Module",
      "artifact_id": "efd40308-0f8b-430e-bf87-4bb72c0466d1"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.boss_cli",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/boss_cli.py",
      "category": "core",
      "functions": 25,
      "classes": 1,
      "summary": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f",
      "artifact_id": "a8a4a67d-d0c1-48ce-9a97-1d9716dca436"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.__init__",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "4b5bd564-2de5-4ce7-bd16-c6c81949b2ee"
    },
    {
      "module_id": ".ARCHIVE..personal.boss.scripts.boss_cli",
      "path": ".ARCHIVE/.personal/boss/scripts/boss_cli.py",
      "category": "core",
      "functions": 29,
      "classes": 1,
      "summary": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f",
      "artifact_id": "2445cf12-f3df-4ab6-aa57-c298015072ee"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.send_cursor_response",
      "path": ".ARCHIVE/archive/telegram_experiments/send_cursor_response.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "65f9630f-9d5d-47e9-a749-df0fe688e068"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_telegram_reader_enhanced",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_telegram_reader_enhanced.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Enhanced Cursor Telegram Reader",
      "artifact_id": "3250a482-fac7-4048-a124-edc2f1fd95da"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.api_memory_endpoints",
      "path": ".ARCHIVE/archive/telegram_experiments/api_memory_endpoints.py",
      "category": "core",
      "functions": 9,
      "classes": 3,
      "summary": "API Endpoints \u0434\u043b\u044f \u043f\u0430\u043c\u044f\u0442\u0438 Telegram \u0431\u043e\u0442\u0430",
      "artifact_id": "006c88b6-c9d2-40d1-bf47-9b0e2d81a740"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.fastapi_ollama_server",
      "path": ".ARCHIVE/archive/telegram_experiments/fastapi_ollama_server.py",
      "category": "core",
      "functions": 14,
      "classes": 4,
      "summary": "\ud83d\ude80 \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f LLMStruct",
      "artifact_id": "43ec7aec-82d8-469f-a9f2-a8a9b3a8be95"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.test_read_telegram",
      "path": ".ARCHIVE/archive/telegram_experiments/test_read_telegram.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0441\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438\u0437 Telegram",
      "artifact_id": "fb5c3cb7-18d4-423c-9fc4-abae3f9120ac"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.dummy_work_executor",
      "path": ".ARCHIVE/archive/telegram_experiments/dummy_work_executor.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Dummy Work Executor - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0432\u0443\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u0439 \u0441\u0432\u044f\u0437\u0438 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0447\u0435\u0440\u0435\u0437 Telegram",
      "artifact_id": "d70da9e0-f3fe-4ac7-b4b5-c20fb1ecc8af"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_telegram_reader",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_telegram_reader.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Cursor Telegram Reader - \u0427\u0438\u0442\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0437 Telegram \u0431\u043e\u0442\u0430 \u0434\u043b\u044f Cursor",
      "artifact_id": "176dc567-b6bc-425e-ac0e-36a80802e051"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_bot_messenger",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_bot_messenger.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Cursor Bot Messenger - \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0447\u0435\u0440\u0435\u0437 Telegram",
      "artifact_id": "17dc0f16-8970-4e00-b4cb-4d69b310d061"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.send_test_message",
      "path": ".ARCHIVE/archive/telegram_experiments/send_test_message.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "Test message sender to Telegram",
      "artifact_id": "a3ed78d0-f80d-4a31-8ac5-701e934a8c21"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.test_master_plan_flow",
      "path": ".ARCHIVE/archive/telegram_experiments/test_master_plan_flow.py",
      "category": "test",
      "functions": 6,
      "classes": 1,
      "summary": "Test Master Plan Flow - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u0430",
      "artifact_id": "2e73bcd2-320b-46be-b8d8-f18940c733fc"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_integration",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_integration.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "\ud83c\udfaf Cursor Integration for Telegram Master Controller",
      "artifact_id": "e14b5144-fb51-4c65-896f-69e9aad50563"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_simple_integration",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_simple_integration.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "\u041f\u0440\u043e\u0441\u0442\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 Cursor \u0441 Telegram \u0431\u043e\u0442\u043e\u043c",
      "artifact_id": "a9ec9f83-b351-4013-bb32-b0d789ae9eb5"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.simple_telegram_bot",
      "path": ".ARCHIVE/archive/telegram_experiments/simple_telegram_bot.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u043d\u0430\u0434\u0435\u0436\u043d\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f Cursor \u2194 Telegram",
      "artifact_id": "3759916b-0785-4e45-87b2-32e52825ba8d"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.start_simple_telegram",
      "path": ".ARCHIVE/archive/telegram_experiments/start_simple_telegram.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "\u0421\u043a\u0440\u0438\u043f\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f Cursor \u2194 Telegram",
      "artifact_id": "f3ac27a7-0d80-478c-8170-485979e97d57"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.chat_bot_fastapi_enhanced",
      "path": ".ARCHIVE/archive/telegram_experiments/chat_bot_fastapi_enhanced.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "\ud83d\ude80 ENHANCED Telegram Bot \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
      "artifact_id": "0319a4d5-06ff-4072-96ba-152116cd22ff"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.chat_bot_enhanced",
      "path": ".ARCHIVE/archive/telegram_bots/chat_bot_enhanced.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "Enhanced LLMStruct Telegram Bot",
      "artifact_id": "81b3d3a1-a7bc-495c-a0b8-013b681f75fc"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.cursor_telegram_bridge",
      "path": ".ARCHIVE/archive/telegram_bots/cursor_telegram_bridge.py",
      "category": "core",
      "functions": 7,
      "classes": 1,
      "summary": "Cursor \u2194 Telegram Bridge",
      "artifact_id": "eea6abe9-a87e-45c2-b42c-cb285e6c53f6"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.test_bot_quick",
      "path": ".ARCHIVE/archive/telegram_bots/test_bot_quick.py",
      "category": "test",
      "functions": 3,
      "classes": 0,
      "summary": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0442\u0435\u0441\u0442 Telegram \u0431\u043e\u0442\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u0432\u044f\u0437\u0438",
      "artifact_id": "6ada56ff-fab2-402d-9151-d47224087b01"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.start_ollama_bot",
      "path": ".ARCHIVE/archive/telegram_bots/start_ollama_bot.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "Quick launcher for Ollama Chat Bot",
      "artifact_id": "a952d1b5-e2d9-46f9-806f-cc2e2822b456"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.ollama_chat_bot",
      "path": ".ARCHIVE/archive/telegram_bots/ollama_chat_bot.py",
      "category": "core",
      "functions": 23,
      "classes": 6,
      "summary": "LLMStruct Ollama Chat Bot",
      "artifact_id": "84e1bc53-1342-4f42-98e0-5364e3d1d143"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.demo_bot_features",
      "path": ".ARCHIVE/archive/telegram_bots/demo_bot_features.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 Ollama Chat Bot",
      "artifact_id": "637afd64-6ab6-4e3b-aced-3713c068494f"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.cursor_reporter",
      "path": ".ARCHIVE/archive/telegram_bots/cursor_reporter.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "Cursor Task Reporter",
      "artifact_id": "cda6f35e-33ec-4c0d-a8c9-3b5bff613bf9"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.ollama_api_bot",
      "path": ".ARCHIVE/archive/telegram_bots/ollama_api_bot.py",
      "category": "core",
      "functions": 28,
      "classes": 7,
      "summary": "Ollama Chat Bot \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0439 FastAPI API \u0432\u043c\u0435\u0441\u0442\u043e CLI",
      "artifact_id": "52b0ffa8-7ed2-404b-be3d-3c93c33a89f2"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.start_api_bot",
      "path": ".ARCHIVE/archive/telegram_bots/start_api_bot.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "\u041b\u0430\u0443\u043d\u0447\u0435\u0440 \u0434\u043b\u044f Ollama API Bot \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430\u043c\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 API",
      "artifact_id": "4323bc27-7e6d-41c0-b6ff-b86062ffeab2"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.telegram_cursor_master",
      "path": ".ARCHIVE/archive/telegram_bots/telegram_cursor_master.py",
      "category": "core",
      "functions": 17,
      "classes": 1,
      "summary": "\ud83c\udfaf LLMStruct Telegram Master Controller",
      "artifact_id": "9e443a61-5ade-441b-826f-34f024911e26"
    },
    {
      "module_id": "src.scripts.session_cli",
      "path": "src/scripts/session_cli.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Session Management CLI",
      "artifact_id": "735c8833-98c9-4d73-93c6-a4a28afe9986"
    },
    {
      "module_id": "src.scripts.auto_update_struct",
      "path": "src/scripts/auto_update_struct.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Automatic struct.json update script",
      "artifact_id": "cfea11af-42a6-4a8d-b06a-ef8af8032acb"
    },
    {
      "module_id": "src.scripts.fix_hardcoded_usernames",
      "path": "src/scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "functions": 12,
      "classes": 2,
      "summary": "Fix Hardcoded Usernames Script",
      "artifact_id": "9ec47ed2-c193-4a79-b7b3-87433da2bbf4"
    },
    {
      "module_id": "src.scripts.create_github_issues",
      "path": "src/scripts/create_github_issues.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "GitHub Issues Creator for AI-Dogfooding Project",
      "artifact_id": "2623812c-6641-45f8-ad87-206550e09afc"
    },
    {
      "module_id": "src.scripts.export_to_github_projects",
      "path": "src/scripts/export_to_github_projects.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Export script for GitHub Projects integration",
      "artifact_id": "5837b4c4-3401-4b8a-8b18-d86128b03a6a"
    },
    {
      "module_id": "src.scripts.validate_schemas",
      "path": "src/scripts/validate_schemas.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "9d2d23f9-532a-423f-b7a6-04eeb1ddf8ba"
    },
    {
      "module_id": "src.scripts.process_926_items",
      "path": "src/scripts/process_926_items.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "926 Items Processing Script - Updated Implementation",
      "artifact_id": "be95b823-8cf7-4ba7-a650-695fad7c0d77"
    },
    {
      "module_id": "src.scripts.fix_github_script",
      "path": "src/scripts/fix_github_script.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Quick fix for GitHub issues creation script",
      "artifact_id": "2cf6c2fa-e374-408c-8d5a-39dcd35a2ea7"
    },
    {
      "module_id": "src.scripts.github_sync_manager",
      "path": "src/scripts/github_sync_manager.py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub",
      "artifact_id": "1867f403-e687-4ad7-97ad-5ff32c595063"
    },
    {
      "module_id": "src.scripts.create_comprehensive_index",
      "path": "src/scripts/create_comprehensive_index.py",
      "category": "core",
      "functions": 37,
      "classes": 2,
      "summary": "Comprehensive Project Index Creator",
      "artifact_id": "bbce29e3-5cfc-4c0b-ad6a-1ef2c18063b3"
    },
    {
      "module_id": "src.scripts.validate_json",
      "path": "src/scripts/validate_json.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "JSON Validation Script",
      "artifact_id": "5953cc9e-149a-44a5-8ee3-4c7ee2e3e99c"
    },
    {
      "module_id": "src.scripts.validate_refs",
      "path": "src/scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "478ec932-a269-4d8d-a6a9-ba8e181d0035"
    },
    {
      "module_id": "src.scripts.create_tasks_index",
      "path": "src/scripts/create_tasks_index.py",
      "category": "core",
      "functions": 18,
      "classes": 3,
      "summary": "Tasks Index Creator",
      "artifact_id": "0604430f-3ddb-47a0-b557-0d9719eefa74"
    },
    {
      "module_id": "src.scripts.github_sync_manager_enhanced",
      "path": "src/scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "functions": 28,
      "classes": 3,
      "summary": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout",
      "artifact_id": "a9cdd670-3b11-4d89-925c-cbba29979564"
    },
    {
      "module_id": "src.scripts.collector",
      "path": "src/scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "b2c750ad-09f6-429b-a547-127db171978c"
    },
    {
      "module_id": "src.scripts.validate_epics",
      "path": "src/scripts/validate_epics.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "Epic Data Validator",
      "artifact_id": "0091302c-b7a8-44e9-862b-32a586390461"
    },
    {
      "module_id": "src.scripts.epic_roadmap_manager",
      "path": "src/scripts/epic_roadmap_manager.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439",
      "artifact_id": "bb1e0615-403f-48ff-b2e8-814723698d6b"
    },
    {
      "module_id": "src.scripts.deploy_embedded_files",
      "path": "src/scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "f29dee1a-206f-48d7-9be4-c6422eb342ef"
    },
    {
      "module_id": "src.scripts.team.__init__",
      "path": "src/scripts/team/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "6da9f4d6-d249-4525-878b-2c0448f787a1"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Core CLI functionality and main loop.",
      "artifact_id": "81c56464-0a6a-47fb-b212-f6182b1b4add"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "functions": 20,
      "classes": 1,
      "summary": "Workspace State & Mode Management System",
      "artifact_id": "4b9973d1-706f-4317-b13c-9a67b7c3ec5c"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "3efebbd9-0ef4-4923-8394-6b4890cf5474"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "f3d17ced-b618-4c78-bff8-9656b30fb635"
    },
    {
      "module_id": "src.llmstruct.workflow_orchestrator",
      "path": "src/llmstruct/workflow_orchestrator.py",
      "category": "core",
      "functions": 27,
      "classes": 5,
      "summary": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture",
      "artifact_id": "2ebe66dc-35f1-45b9-a253-a2d472b9fc69"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "GitHub visualization/graph feature (gh-view-v1)",
      "artifact_id": "b9bd40a3-d977-44ac-b6d3-b5d0d9a4dacd"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "444c57f5-eb26-4aa4-bd37-f996ef7ad3f5"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "functions": 26,
      "classes": 5,
      "summary": "LLMStruct Copilot Integration Module",
      "artifact_id": "10e34fb1-d59f-425d-bf09-837152881fb3"
    },
    {
      "module_id": "src.llmstruct.ai_workflow_middleware",
      "path": "src/llmstruct/ai_workflow_middleware.py",
      "category": "core",
      "functions": 22,
      "classes": 4,
      "summary": "AI Workflow Middleware - Forces AI Integration with LLMStruct",
      "artifact_id": "81ab8ec1-49d2-4df1-bcbe-1b2093e47bfc"
    },
    {
      "module_id": "src.llmstruct.ai_cli_integration",
      "path": "src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "functions": 14,
      "classes": 1,
      "summary": "AI Self-Awareness CLI Integration Module",
      "artifact_id": "f2f2d3bf-c1b2-4ef0-aef7-4625c01edfad"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "CLI configuration management.",
      "artifact_id": "9193f64e-35cd-43d7-b62f-ab405df5ca01"
    },
    {
      "module_id": "src.llmstruct.cursor_integration",
      "path": "src/llmstruct/cursor_integration.py",
      "category": "core",
      "functions": 22,
      "classes": 6,
      "summary": "Cursor IDE Integration Module",
      "artifact_id": "97be1c5c-777d-44cd-a9fa-67aa548de2d3"
    },
    {
      "module_id": "src.llmstruct.cli_argument_parser",
      "path": "src/llmstruct/cli_argument_parser.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "CLI argument parsing for LLMStruct.",
      "artifact_id": "14a64d1b-9d51-422c-b392-ac64ed4679aa"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "bc2a17bf-2df8-4364-90a7-b0d54b5497ed"
    },
    {
      "module_id": "src.llmstruct.transpiler",
      "path": "src/llmstruct/transpiler.py",
      "category": "core",
      "functions": 10,
      "classes": 3,
      "summary": "AI-Powered Universal Transpiler",
      "artifact_id": "d8de3dd5-1d82-4c02-ac91-49324619cc4d"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "83ccd7b8-73fd-4824-8378-be3536ff9aea"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "6b428299-17ae-46b1-9379-d55fc7d19e8d"
    },
    {
      "module_id": "src.llmstruct.metrics_tracker",
      "path": "src/llmstruct/metrics_tracker.py",
      "category": "core",
      "functions": 29,
      "classes": 4,
      "summary": "LLMStruct Metrics Tracker - \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "artifact_id": "692bf827-d440-4107-91be-da09bf6fb652"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "artifact_id": "52bda8ac-751c-44be-9090-d59c727b1e18"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "functions": 20,
      "classes": 5,
      "summary": "Smart Context Orchestration for LLMStruct",
      "artifact_id": "27d50d01-49ee-4137-b5ac-d906b27ed9fa"
    },
    {
      "module_id": "src.llmstruct.cli_main_commands",
      "path": "src/llmstruct/cli_main_commands.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "Main CLI command handlers for LLMStruct.",
      "artifact_id": "4db66488-4bba-4023-b9ae-a8491e8ea584"
    },
    {
      "module_id": "src.llmstruct.ai_self_monitor",
      "path": "src/llmstruct/ai_self_monitor.py",
      "category": "core",
      "functions": 16,
      "classes": 4,
      "summary": "AI Self-Monitoring System",
      "artifact_id": "96e87cb0-e9b5-4e2e-add4-8e1908e6cc12"
    },
    {
      "module_id": "src.llmstruct.cursor_ai_bridge",
      "path": "src/llmstruct/cursor_ai_bridge.py",
      "category": "core",
      "functions": 21,
      "classes": 1,
      "summary": "Cursor AI Bridge - API Layer for AI Assistant Integration",
      "artifact_id": "0a25f7c9-a6c4-4772-a41e-48847b996b3d"
    },
    {
      "module_id": "src.llmstruct.ai_self_awareness",
      "path": "src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "functions": 47,
      "classes": 8,
      "summary": "AI Self-Awareness Enhancement Module",
      "artifact_id": "66992ac8-bcc9-4cf5-80e7-c44c17a3717c"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "CLI utility functions.",
      "artifact_id": "2f4259de-4bec-4c2b-b3ec-51ff9434315b"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "functions": 22,
      "classes": 1,
      "summary": "CLI command processing and handlers.",
      "artifact_id": "16c0b64e-0173-4e71-8477-09edb3fb3f06"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "c79cf893-3b5e-4e23-8d6a-79f410352ca8"
    },
    {
      "module_id": "src.llmstruct.modules.cli.handlers_legacy",
      "path": "src/llmstruct/modules/cli/handlers_legacy.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "98b10198-51ff-4385-8016-eea3dbc458f4"
    },
    {
      "module_id": "src.llmstruct.modules.cli.analyze_duplicates",
      "path": "src/llmstruct/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "c34f64ee-e85a-4d92-a47a-4ebff1f0209c"
    },
    {
      "module_id": "src.llmstruct.modules.cli.copilot",
      "path": "src/llmstruct/modules/cli/copilot.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "0abbbe61-1ff3-4597-a7f9-86b01582a487"
    },
    {
      "module_id": "src.llmstruct.modules.cli.handlers",
      "path": "src/llmstruct/modules/cli/handlers.py",
      "category": "cli",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "20614bd2-3124-423f-9651-d09d51dc60a1"
    },
    {
      "module_id": "src.llmstruct.modules.cli.review",
      "path": "src/llmstruct/modules/cli/review.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "d8246b38-f27b-40bd-896a-42e63c33f62b"
    },
    {
      "module_id": "src.llmstruct.modules.cli.dogfood",
      "path": "src/llmstruct/modules/cli/dogfood.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "cbbf9395-8b84-4561-90fa-178aadea702b"
    },
    {
      "module_id": "src.llmstruct.modules.cli.parse",
      "path": "src/llmstruct/modules/cli/parse.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "3ccfbed6-0378-4888-9b36-91650c5e44c3"
    },
    {
      "module_id": "src.llmstruct.modules.cli.audit",
      "path": "src/llmstruct/modules/cli/audit.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "d43644d7-39be-4f47-8e61-b9fe49b26800"
    },
    {
      "module_id": "src.llmstruct.modules.cli.query",
      "path": "src/llmstruct/modules/cli/query.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "adc91d1d-2294-490c-bc1f-18a02129194b"
    },
    {
      "module_id": "src.llmstruct.modules.cli.utils",
      "path": "src/llmstruct/modules/cli/utils.py",
      "category": "cli",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "200d560c-83f1-49eb-9360-b5249dbdd827"
    },
    {
      "module_id": "src.llmstruct.modules.cli.context",
      "path": "src/llmstruct/modules/cli/context.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "4741b5ab-60ae-40a8-84bf-ee21c98db9e7"
    },
    {
      "module_id": "src.llmstruct.modules.cli.__init__",
      "path": "src/llmstruct/modules/cli/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "bacf59ee-ab47-4ab4-a4b1-43760750c6a3"
    },
    {
      "module_id": "src.llmstruct.modules.commands.queue",
      "path": "src/llmstruct/modules/commands/queue.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "ee001e47-963e-47e5-90c9-ed994989503c"
    },
    {
      "module_id": "src.llmstruct.modules.commands.metrics",
      "path": "src/llmstruct/modules/commands/metrics.py",
      "category": "core",
      "functions": 7,
      "classes": 0,
      "summary": "",
      "artifact_id": "45012035-4dd9-419e-954a-c7ef9dc8c2bd"
    },
    {
      "module_id": "src.llmstruct.modules.commands.services",
      "path": "src/llmstruct/modules/commands/services.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "0eda8aa9-eb0e-44f4-a061-5fc34331cf90"
    },
    {
      "module_id": "src.llmstruct.modules.commands.__init__",
      "path": "src/llmstruct/modules/commands/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "794be93c-5070-44d4-bff6-f6c73a871673"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "72aef470-ff4a-4b03-aa7f-e316678a7db1"
    },
    {
      "module_id": "src.llmstruct.api.app",
      "path": "src/llmstruct/api/app.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Main FastAPI application for LLMStruct",
      "artifact_id": "2762847c-87b0-476c-b991-eb7464d31f97"
    },
    {
      "module_id": "src.llmstruct.api.routes.continue_adapter",
      "path": "src/llmstruct/api/routes/continue_adapter.py",
      "category": "core",
      "functions": 5,
      "classes": 2,
      "summary": "Continue API Adapter",
      "artifact_id": "a8e7bbd3-8d38-4949-b89a-9b260a256304"
    },
    {
      "module_id": "src.llmstruct.api.middleware.auth",
      "path": "src/llmstruct/api/middleware/auth.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Authentication middleware for LLMStruct FastAPI",
      "artifact_id": "d396d0df-a267-40d3-a136-fffdd18cf6a4"
    },
    {
      "module_id": "src.llmstruct.api.services.llm_service",
      "path": "src/llmstruct/api/services/llm_service.py",
      "category": "core",
      "functions": 17,
      "classes": 4,
      "summary": "LLM Service",
      "artifact_id": "81e4d3be-4fd7-45cc-ab6a-0f32de0d0e8d"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "70748a88-e16b-40b4-ba37-4007e57380c5"
    },
    {
      "module_id": "src.llmstruct.generators.go_json_generator",
      "path": "src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "8cae14af-a260-4835-bdd5-2aff2f24116f"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "c5477996-70b8-4567-822e-86947bc1eae0"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "2d987c31-c619-4a1f-a2c6-5ab864441cf7"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "9120815b-2ebf-4024-9845-e45f67f193d3"
    },
    {
      "module_id": "src.llmstruct.parsers.universal_converter",
      "path": "src/llmstruct/parsers/universal_converter.py",
      "category": "core",
      "functions": 14,
      "classes": 3,
      "summary": "Universal Code Converter - Orchestrates all language parsers",
      "artifact_id": "8574ed1b-9368-4956-bdb7-e3c193b9939b"
    },
    {
      "module_id": "src.llmstruct.parsers.go_analyzer",
      "path": "src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430",
      "artifact_id": "91b0fd73-38fc-4934-8bdf-fedf15df1dcf"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "337ac45e-7a6b-48c8-8b80-42d6a18fbadf"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "",
      "artifact_id": "80cdd765-c5f5-49f1-b3d6-9e32d8b181d3"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "bec13e04-3527-4f00-8a0c-4f5c1c35a1cf"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project.",
      "artifact_id": "3ecb7721-c352-44c4-9a3c-ab50e7a29a76"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project.",
      "artifact_id": "8e51b349-e476-4b39-8b8e-0b2a05c98d5d"
    },
    {
      "module_id": "examples.telegram_bot.test_bot",
      "path": "examples/telegram_bot/test_bot.py",
      "category": "test",
      "functions": 4,
      "classes": 0,
      "summary": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430 \u0431\u0435\u0437 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e Telegram",
      "artifact_id": "b1654cf3-430d-4d6f-a5e4-f52212ce38ac"
    },
    {
      "module_id": "integrations.telegram_bot.test_bot",
      "path": "integrations/telegram_bot/test_bot.py",
      "category": "test",
      "functions": 4,
      "classes": 0,
      "summary": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430 \u0431\u0435\u0437 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e Telegram",
      "artifact_id": "e5c8b801-6270-4721-a0f2-518c9274ae6f"
    },
    {
      "module_id": "integrations.telegram_bot.mp002_progress_bot",
      "path": "integrations/telegram_bot/mp002_progress_bot.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "MP-002A Progress Bot - Telegram \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Smart Wrapper \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438",
      "artifact_id": "4ce3a58e-21db-4bc1-a3d2-95f5d705f829"
    },
    {
      "module_id": "integrations.telegram_bot.simple_bot",
      "path": "integrations/telegram_bot/simple_bot.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "\u0423\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f LLMStruct \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u043c\u0435\u0442\u0440\u0438\u043a",
      "artifact_id": "b0c3d394-792e-47de-b9dc-b49b4cf497be"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "658e191a-ccb6-4515-b398-7b23633bc8e5"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "a4f67ec9-bc17-4f68-b500-62b953ffead5"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "83459274-1656-4f6a-840f-c55c4789811a"
    },
    {
      "module_id": "docs.test_self_run",
      "path": "docs/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "beeae84f-40d6-43f3-a386-99781d54a265"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "509552ae-2ae3-43fe-a798-608c6eaa16a4"
    },
    {
      "module_id": "tests.test_self_run",
      "path": "tests/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "44f8cbeb-a1cc-4eb3-a7f4-4d84168fbfce"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "artifact_id": "65b9070c-1774-4845-99ca-5580fc69ecff"
    },
    {
      "module_id": "cursor_workflow_integration.scripts.install_ai_integration",
      "path": "cursor_workflow_integration/scripts/install_ai_integration.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor",
      "artifact_id": "cf618c3b-9993-4465-9f8a-fcc70f16ad18"
    },
    {
      "module_id": "cursor_workflow_integration.files.auto_init_ai_system",
      "path": "cursor_workflow_integration/files/auto_init_ai_system.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor",
      "artifact_id": "68381d85-c434-46b7-be9c-328149dbf428"
    }
  ],
  "modules": [
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "module_doc": "Session Schema Validation Script for llmstruct\nValidates session management JSON files against their schemas.\nFocused validation for session system only.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            21,
            31
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": [
            33,
            52
          ],
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            54,
            124
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            13,
            19
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "json.load",
          "print",
          "open"
        ],
        "validate_json_against_schema": [
          "validator.iter_errors",
          "print",
          "str",
          "Draft7Validator",
          "len",
          "list"
        ],
        "main": [
          "errors.append",
          "validate_json_against_schema",
          "print",
          "load_json"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "2f14082e-ffd6-4318-9799-56a367885a79"
    },
    {
      "module_id": "auto_init_ai_system",
      "path": "auto_init_ai_system.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor\n\u042d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439\nENHANCED: \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 workflow \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439, \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438 \u0438 context tags",
      "functions": [
        {
          "name": "auto_initialize_ai_system",
          "docstring": "\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            27,
            91
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_current_workflow_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 workflow \u0441\u0435\u0441\u0441\u0438\u0438 \u0438 workspace mode",
          "line_range": [
            93,
            129
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_workflow_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 workflow \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            131,
            215
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "switch_workspace_mode",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c workspace mode (\u0434\u043b\u044f CLI integration)",
          "line_range": [
            217,
            233
          ],
          "parameters": [
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            235,
            245
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "search_ai_capabilities",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 AI \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e struct.json \u0438 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            247,
            314
          ],
          "parameters": [
            "query"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f AI \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435",
          "line_range": [
            316,
            347
          ],
          "parameters": [
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "get_epic_sessions_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u0441\u0435\u0445 \u044d\u043f\u0438\u043a-\u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            349,
            398
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "create_epic_session",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            400,
            421
          ],
          "parameters": [
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "switch_to_session",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            423,
            441
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "get_available_sessions",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            443,
            504
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "session_management_commands",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438",
          "line_range": [
            506,
            532
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "auto_initialize_ai_system": [
          "Path",
          "f.exists",
          "print",
          "logger.info",
          "str",
          "src_path.exists",
          "logger.error",
          "AI_CAPABILITIES.discover_all_capabilities",
          "len",
          "get_current_workflow_context",
          "SystemCapabilityDiscovery"
        ],
        "get_current_workflow_context": [
          "Path",
          "workspace_file.exists",
          "json.load",
          "logger.info",
          "session_file.exists",
          "roadmap_file.exists",
          "roadmap.get",
          "epic_data.get",
          "session.get",
          "logger.warning",
          "workspace.get",
          "open"
        ],
        "get_workflow_status": [
          "json.load",
          "struct_file.exists",
          "e.get",
          "metrics_tracker.get_session_summary",
          "struct_status.upper",
          "roadmap.get",
          "session_info.get",
          "len",
          "time.time",
          "Path",
          "workspace_manager.get_epic_summaries",
          "get_metrics_tracker",
          "roadmap_file.exists",
          "str",
          "workspace_manager.get_mode_description",
          "track_workflow_event",
          "open",
          "workspace_manager.get_current_mode",
          "workspace_manager.get_session_info",
          "workspace_manager._get_git_branch",
          "WorkspaceStateManager"
        ],
        "switch_workspace_mode": [
          "Path",
          "ws.set_mode",
          "logger.info",
          "str",
          "WorkspaceStateManager",
          "logger.error",
          "get_current_workflow_context"
        ],
        "get_ai_status": [
          "auto_initialize_ai_system",
          "get_workflow_status",
          "AI_STATUS.get",
          "AI_CAPABILITIES.get_enhanced_capabilities_summary"
        ],
        "search_ai_capabilities": [
          "Path",
          "json.load",
          "struct_file.exists",
          "struct_data.get",
          "file_info.get",
          "cls.get",
          "track_task_complete",
          "track_task_start",
          "len",
          "str",
          "enumerate",
          "func.get",
          "track_workflow_event",
          "int",
          "time.time",
          "results.append",
          "query.lower",
          "open"
        ],
        "get_ai_context": [
          "auto_initialize_ai_system",
          "logger.error",
          "AI_CAPABILITIES.discover_all_capabilities",
          "json.dumps",
          "get_current_workflow_context",
          "len"
        ],
        "get_epic_sessions_status": [
          "Path",
          "json.load",
          "roadmap_file.exists",
          "sessions_file.exists",
          "roadmap.get",
          "status_lines.append",
          "epic_data.get",
          "logger.error",
          "session.get",
          "open"
        ],
        "create_epic_session": [
          "Path",
          "epic_id.split",
          "logger.info",
          "os.system",
          "logger.error"
        ],
        "switch_to_session": [
          "Path",
          "logger.info",
          "os.system",
          "logger.error",
          "get_current_workflow_context"
        ],
        "get_available_sessions": [
          "Path",
          "current_data.get",
          "json.load",
          "roadmap_file.exists",
          "sessions_file.exists",
          "roadmap.get",
          "current_session_file.exists",
          "epic_data.get",
          "logger.error",
          "sessions_list.append",
          "session.get",
          "sessions_data.get",
          "open"
        ],
        "session_management_commands": []
      },
      "dependencies": [
        "Path",
        "SystemCapabilityDiscovery",
        "WorkspaceStateManager",
        "datetime",
        "get_metrics_tracker",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.workspace",
        "logging",
        "os",
        "pathlib",
        "src.llmstruct.metrics_tracker",
        "src.llmstruct.workspace",
        "sys",
        "time",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event"
      ],
      "hash": null,
      "artifact_id": "4d2d17d8-ddd1-48eb-b95f-c4abf7289844"
    },
    {
      "module_id": "collect_json",
      "path": "collect_json.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json_files",
          "docstring": "",
          "line_range": [
            5,
            19
          ],
          "parameters": [
            "base_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json_files": [
          "json.load",
          "base_dir.rglob",
          "path.relative_to",
          "current.setdefault",
          "sorted",
          "path.open"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "6e09e11c-d556-4b6d-98d1-0462e3bfdb25"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "module_doc": "JSON Schema Validation Script for llmstruct\nValidates all enhanced JSON files against their appropriate schemas.\nPart of TSK-130 implementation.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            24,
            34
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            56,
            193
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            15,
            21
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "json.load",
          "print",
          "open"
        ],
        "validate_json_against_schema": [
          "str",
          "print",
          "validate"
        ],
        "main": [
          "errors.append",
          "validate_json_against_schema",
          "print",
          "load_json"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "8aab3474-3adf-42f4-8bb8-ac5912bb951f"
    },
    {
      "module_id": "install_ai_integration",
      "path": "install_ai_integration.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor\n\u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u043b\u044e\u0431\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
      "functions": [
        {
          "name": "install_ai_integration",
          "docstring": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u0432 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            12,
            58
          ],
          "parameters": [
            "target_project"
          ],
          "decorators": []
        },
        {
          "name": "adapt_cursorrules",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c .cursorrules \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            60,
            99
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "adapt_auto_init",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c auto_init_ai_system.py \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            101,
            123
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "create_simplified_auto_init",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e auto_init \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0431\u0435\u0437 llmstruct",
          "line_range": [
            125,
            189
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438",
          "line_range": [
            191,
            207
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "install_ai_integration": [
          "Path",
          "print",
          "adapt_auto_init",
          "source_path.exists",
          "adapt_cursorrules",
          "shutil.copy2",
          "target_root.exists",
          "vscode_dir.mkdir"
        ],
        "adapt_cursorrules": [
          "content.replace",
          "print",
          "cursorrules_path.write_text",
          "cursorrules_path.read_text",
          "cursorrules_path.exists",
          "len",
          "list",
          "project_root.rglob"
        ],
        "adapt_auto_init": [
          "content.replace",
          "print",
          "auto_init_path.write_text",
          "create_simplified_auto_init",
          "auto_init_path.read_text",
          "auto_init_path.exists"
        ],
        "create_simplified_auto_init": [],
        "main": [
          "install_ai_integration",
          "len",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "shutil",
        "sys"
      ],
      "hash": null,
      "artifact_id": "07a1f79b-1320-497b-9061-d53b38fda454"
    },
    {
      "module_id": "run_ai_diagnostics",
      "path": "run_ai_diagnostics.py",
      "category": "core",
      "module_doc": "Comprehensive AI Self-Awareness Diagnostics Runner\nEnhanced with Cursor integration testing, multi-AI orchestration validation,\npersonal planning bridge testing, and real-time performance metrics.",
      "functions": [
        {
          "name": "print_section",
          "docstring": "Print a formatted section header.",
          "line_range": [
            20,
            23
          ],
          "parameters": [
            "title",
            "emoji"
          ],
          "decorators": []
        },
        {
          "name": "print_subsection",
          "docstring": "Print a formatted subsection header.",
          "line_range": [
            25,
            28
          ],
          "parameters": [
            "title",
            "emoji"
          ],
          "decorators": []
        },
        {
          "name": "test_basic_ai_awareness",
          "docstring": "Test basic AI self-awareness capabilities.",
          "line_range": [
            30,
            51
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_cursor_integration",
          "docstring": "Test Cursor IDE integration capabilities.",
          "line_range": [
            53,
            124
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_real_time_metrics",
          "docstring": "Test real-time metrics calculation.",
          "line_range": [
            126,
            146
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_personal_planning_bridge",
          "docstring": "Test personal planning bridge functionality.",
          "line_range": [
            148,
            196
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_session_management",
          "docstring": "Test session management capabilities.",
          "line_range": [
            198,
            233
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_configuration_loading",
          "docstring": "Test configuration file loading.",
          "line_range": [
            235,
            255
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_performance_benchmark",
          "docstring": "Run performance benchmarks for AI operations.",
          "line_range": [
            257,
            287
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_diagnostic_report",
          "docstring": "Generate a comprehensive diagnostic report.",
          "line_range": [
            289,
            333
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "continuous_monitoring_mode",
          "docstring": "Run continuous monitoring of AI system health.",
          "line_range": [
            335,
            382
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_specific_component",
          "docstring": "Test a specific AI component in detail.",
          "line_range": [
            384,
            423
          ],
          "parameters": [
            "component_name"
          ],
          "decorators": []
        },
        {
          "name": "test_cli_commands",
          "docstring": "Test CLI command processing capabilities.",
          "line_range": [
            425,
            447
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_context_scenarios",
          "docstring": "Test context orchestrator scenarios.",
          "line_range": [
            449,
            466
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_copilot_features",
          "docstring": "Test copilot manager features.",
          "line_range": [
            468,
            485
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_integration_health_check",
          "docstring": "Run comprehensive integration health check.",
          "line_range": [
            487,
            524
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_optimization_suggestions",
          "docstring": "Generate automated optimization suggestions based on diagnostics.",
          "line_range": [
            526,
            597
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_stress_test",
          "docstring": "Run stress test on AI system.",
          "line_range": [
            599,
            651
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run comprehensive AI diagnostics.",
          "line_range": [
            653,
            738
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "print_section": [
          "len",
          "print"
        ],
        "print_subsection": [
          "len",
          "print"
        ],
        "test_basic_ai_awareness": [
          "print",
          "print_section",
          "len",
          "discovery.discover_all_capabilities",
          "discovery.get_comprehensive_ai_status",
          "discovery.get_enhanced_capabilities_summary",
          "SystemCapabilityDiscovery"
        ],
        "test_cursor_integration": [
          "print_subsection",
          "response.get",
          "print",
          "cursor_integration.get_comprehensive_cursor_response",
          "delegation.get",
          "print_section",
          "create_cursor_integration",
          "context_data.get",
          "len"
        ],
        "test_real_time_metrics": [
          "print",
          "discovery._calculate_real_cache_hit_rate",
          "discovery._get_real_system_load",
          "print_section",
          "SystemCapabilityDiscovery",
          "discovery.get_cursor_status_report"
        ],
        "test_personal_planning_bridge": [
          "print",
          "PersonalPlanningCursorBridge",
          "bridge.get_goal_aligned_suggestions",
          "print_section",
          "guidance.get",
          "enumerate",
          "top_feature.get",
          "len",
          "bridge.get_priority_guidance"
        ],
        "test_session_management": [
          "print",
          "CursorSessionManager",
          "session_manager.save_session_context",
          "print_section",
          "session_manager.start_session"
        ],
        "test_configuration_loading": [
          "Path",
          "json.load",
          "print",
          "print_section",
          "config_path.exists",
          "len",
          "open"
        ],
        "run_performance_benchmark": [
          "print",
          "print_section",
          "create_cursor_integration",
          "discovery.discover_all_capabilities",
          "SystemCapabilityDiscovery",
          "time.time"
        ],
        "generate_diagnostic_report": [
          "Path",
          "print",
          "json.dump",
          "time.strftime",
          "print_section",
          "len",
          "discovery.discover_all_capabilities",
          "SystemCapabilityDiscovery",
          "open"
        ],
        "continuous_monitoring_mode": [
          "time.sleep",
          "print",
          "discovery._calculate_real_cache_hit_rate",
          "discovery._get_real_system_load",
          "print_section",
          "time.strftime",
          "len",
          "discovery.discover_all_capabilities",
          "SystemCapabilityDiscovery"
        ],
        "test_specific_component": [
          "component_name.upper",
          "print",
          "test_copilot_features",
          "test_context_scenarios",
          "print_section",
          "len",
          "enumerate",
          "discovery.discover_all_capabilities",
          "test_cli_commands",
          "SystemCapabilityDiscovery",
          "list"
        ],
        "test_cli_commands": [
          "CLIConfig",
          "print",
          "CLIUtils",
          "CommandProcessor"
        ],
        "test_context_scenarios": [
          "print",
          "create_context_orchestrator"
        ],
        "test_copilot_features": [
          "hasattr",
          "initialize_copilot",
          "print",
          "feature.replace"
        ],
        "run_integration_health_check": [
          "response.get",
          "print",
          "cursor_integration.get_comprehensive_cursor_response",
          "print_section",
          "create_cursor_integration"
        ],
        "generate_optimization_suggestions": [
          "print",
          "suggestions.append",
          "print_section",
          "len",
          "enumerate",
          "discovery.discover_all_capabilities",
          "SystemCapabilityDiscovery"
        ],
        "run_stress_test": [
          "range",
          "print",
          "delegation.get",
          "print_section",
          "create_cursor_integration",
          "discovery.discover_all_capabilities",
          "enumerate",
          "SystemCapabilityDiscovery",
          "time.time",
          "context_data.get"
        ],
        "main": [
          "time.time",
          "print",
          "test_specific_component",
          "generate_optimization_suggestions",
          "test_func",
          "continuous_monitoring_mode",
          "print_section",
          "len",
          "run_integration_health_check",
          "run_stress_test"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CursorSessionManager",
        "Path",
        "PersonalPlanningCursorBridge",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "create_cursor_integration",
        "initialize_copilot",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.cursor_integration",
        "os",
        "pathlib",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "ebb79b44-a375-4b8b-9701-bf39d4c6bf59"
    },
    {
      "module_id": "start_development",
      "path": "start_development.py",
      "category": "core",
      "module_doc": "LLMStruct Development Startup Script\nConvenient one-command startup for daily development workflow.\nEnhanced with AI Workflow Middleware and Self-Monitoring for seamless llmstruct integration.",
      "functions": [
        {
          "name": "print_header",
          "docstring": "Print startup header.",
          "line_range": [
            17,
            21
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_ai_integration_layer",
          "docstring": "Initialize AI integration layer - this is the NEW seamless integration",
          "line_range": [
            23,
            73
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_environment",
          "docstring": "Check if development environment is properly set up.",
          "line_range": [
            75,
            110
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_workflow_orchestrator",
          "docstring": "Initialize and test WorkflowOrchestrator integration.",
          "line_range": [
            112,
            156
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_cursor_ai_bridge",
          "docstring": "Initialize and test CursorAIBridge integration.",
          "line_range": [
            158,
            198
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "sync_architecture_components",
          "docstring": "Sync with existing llmstruct architecture components and AI integration.",
          "line_range": [
            200,
            240
          ],
          "parameters": [
            "orchestrator",
            "ai_integration"
          ],
          "decorators": []
        },
        {
          "name": "run_system_health_check",
          "docstring": "Run comprehensive system health check.",
          "line_range": [
            242,
            263
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_optimization_suggestions",
          "docstring": "Get AI optimization suggestions with WorkflowOrchestrator integration.",
          "line_range": [
            265,
            320
          ],
          "parameters": [
            "orchestrator"
          ],
          "decorators": []
        },
        {
          "name": "check_git_status",
          "docstring": "Check git repository status.",
          "line_range": [
            322,
            368
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_context",
          "docstring": "Show current project context and priorities.",
          "line_range": [
            370,
            411
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_useful_commands",
          "docstring": "Show useful commands for development.",
          "line_range": [
            413,
            472
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main startup routine with AI Workflow Middleware and WorkflowOrchestrator integration.",
          "line_range": [
            474,
            593
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "print_header": [
          "print"
        ],
        "initialize_ai_integration_layer": [
          "Path",
          "middleware.process_ai_request",
          "print",
          "initialize_ai_middleware",
          "str",
          "record_ai_usage",
          "initialize_ai_monitor"
        ],
        "check_environment": [
          "Path",
          "hasattr",
          "print",
          "missing_files.append"
        ],
        "initialize_workflow_orchestrator": [
          "print",
          "stats.get",
          "system_caps.get",
          "struct_analysis.get",
          "WorkflowOrchestrator",
          "copilot_status.get",
          "orchestrator.get_current_context",
          "len",
          "dup_analysis.get",
          "context.get"
        ],
        "initialize_cursor_ai_bridge": [
          "CursorAIBridge",
          "print",
          "task_analysis.get",
          "ai_rec.get",
          "context.get",
          "bridge.ai_get_context",
          "len",
          "project_state.get",
          "bridge.ai_analyze_task"
        ],
        "sync_architecture_components": [
          "ai_integration.get",
          "print",
          "orchestrator.sync_with_existing_architecture",
          "middleware.get_middleware_stats",
          "sync_results.items"
        ],
        "run_system_health_check": [
          "print",
          "subprocess.run"
        ],
        "get_optimization_suggestions": [
          "duplication_analysis.get",
          "print",
          "subprocess.run",
          "suggestions.append",
          "orchestrator.analyze_codebase_for_duplicates",
          "r.get",
          "enumerate",
          "line.strip"
        ],
        "check_git_status": [
          "changes.split",
          "len",
          "print",
          "subprocess.run"
        ],
        "show_current_context": [
          "Path",
          "json.load",
          "print",
          "init_file.exists",
          "init_data.get",
          "vision.get",
          "business_obj.get",
          "enumerate",
          "bridge_file.exists",
          "bridge_data.get",
          "open"
        ],
        "show_useful_commands": [
          "print"
        ],
        "main": [
          "initialize_cursor_ai_bridge",
          "ai_integration.get",
          "print",
          "get_optimization_suggestions",
          "show_useful_commands",
          "initialize_workflow_orchestrator",
          "sync_architecture_components",
          "check_environment",
          "initialize_ai_integration_layer",
          "monitor.analyze_behavior_trends",
          "show_current_context",
          "print_header",
          "check_git_status",
          "run_system_health_check",
          "middleware.get_middleware_stats"
        ]
      },
      "dependencies": [
        "AIWorkflowMode",
        "CursorAIBridge",
        "Path",
        "WorkflowOrchestrator",
        "initialize_ai_middleware",
        "initialize_ai_monitor",
        "json",
        "llmstruct.ai_self_monitor",
        "llmstruct.ai_workflow_middleware",
        "llmstruct.cursor_ai_bridge",
        "llmstruct.workflow_orchestrator",
        "os",
        "pathlib",
        "record_ai_usage",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "bb51b797-94a2-4eb4-8b79-adc399e8a34c"
    },
    {
      "module_id": "quick_ws_test",
      "path": "quick_ws_test.py",
      "category": "core",
      "module_doc": "Quick WebSocket Test Script",
      "functions": [
        {
          "name": "test_websocket",
          "docstring": "Test WebSocket with automatic messages",
          "line_range": [
            11,
            65
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_websocket": [
          "websocket.send",
          "print",
          "asyncio.sleep",
          "data.get",
          "websockets.connect",
          "json.loads",
          "json.dumps",
          "len",
          "websocket.recv"
        ]
      },
      "dependencies": [
        "asyncio",
        "json",
        "sys",
        "websockets"
      ],
      "hash": null,
      "artifact_id": "a4e9283e-93ee-46a8-a888-21a6cddcc8c0"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json_file",
          "docstring": "Load a JSON file and return its contents.",
          "line_range": [
            15,
            25
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_with_struct",
          "docstring": "Verify llm_response.json against struct.json.",
          "line_range": [
            28,
            71
          ],
          "parameters": [
            "response_text",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_without_struct",
          "docstring": "Verify llm_response.json based on LLMstruct principles.",
          "line_range": [
            74,
            108
          ],
          "parameters": [
            "response_text"
          ],
          "decorators": []
        },
        {
          "name": "generate_metrics",
          "docstring": "Generate metrics for the response per EXT-004.",
          "line_range": [
            111,
            141
          ],
          "parameters": [
            "response_data",
            "server_log"
          ],
          "decorators": []
        },
        {
          "name": "update_tasks_json",
          "docstring": "Append a new task to tasks.json.",
          "line_range": [
            144,
            151
          ],
          "parameters": [
            "tasks_file",
            "new_task"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            154,
            225
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json_file": [
          "logging.error",
          "json.load",
          "open"
        ],
        "verify_response_with_struct": [
          "set",
          "expected_extensions.issubset",
          "struct_data.get",
          "logging.error",
          "expected_goals.issubset",
          "e.startswith",
          "expected_files.issubset",
          "re.findall",
          "logging.info"
        ],
        "verify_response_without_struct": [
          "set",
          "response_text.lower",
          "expected_extensions.issubset",
          "logging.error",
          "expected_goals.issubset",
          "expected_files.issubset",
          "re.findall",
          "principle.lower",
          "logging.info"
        ],
        "generate_metrics": [
          "response_text.split",
          "datetime.utcnow",
          "re.findall",
          "len",
          "server_log.get"
        ],
        "update_tasks_json": [
          "json.dump",
          "tasks.get",
          "load_json_file",
          "logging.info",
          "open"
        ],
        "main": [
          "argparse.ArgumentParser",
          "verify_response_without_struct",
          "json.dump",
          "load_json_file",
          "parser.parse_args",
          "verify_response_with_struct",
          "update_tasks_json",
          "logging.info",
          "generate_metrics",
          "parser.add_argument",
          "open"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "argparse",
        "datetime",
        "json",
        "logging",
        "os",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f884fcf6-c70a-47b8-bcad-a7f56a629f12"
    },
    {
      "module_id": "struct_cache_manager",
      "path": "struct_cache_manager.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 Smart struct.json Cache Manager for [code] Mode\n\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "functions": [
        {
          "name": "test_cache_performance",
          "docstring": "\u0422\u0435\u0441\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u0435\u0448\u0430",
          "line_range": [
            321,
            355
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            17,
            29
          ],
          "parameters": [
            "self",
            "struct_file"
          ],
          "decorators": []
        },
        {
          "name": "get_file_hash",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0445\u0435\u0448 \u0444\u0430\u0439\u043b\u0430 struct.json \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439",
          "line_range": [
            31,
            38
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_cache_valid",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043a\u0435\u0448\u0430",
          "line_range": [
            40,
            54
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "build_cache",
          "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u043f\u043e\u043b\u043d\u044b\u0439 \u043a\u0435\u0448 \u0438\u0437 struct.json",
          "line_range": [
            56,
            150
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "search_modules",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043c\u043e\u0434\u0443\u043b\u0435\u0439",
          "line_range": [
            152,
            177
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        },
        {
          "name": "search_functions",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
          "line_range": [
            179,
            205
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        },
        {
          "name": "search_classes",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043a\u043b\u0430\u0441\u0441\u043e\u0432",
          "line_range": [
            207,
            233
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        },
        {
          "name": "get_module_details",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0435\u0442\u0430\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044f",
          "line_range": [
            235,
            248
          ],
          "parameters": [
            "self",
            "module_name"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_stats",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043a\u0435\u0448\u0430",
          "line_range": [
            250,
            265
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "invalidate_cache",
          "docstring": "\u0418\u043d\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043a\u0435\u0448",
          "line_range": [
            267,
            281
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "smart_search",
          "docstring": "\u0423\u043c\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0432\u0441\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c \u0441 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432",
          "line_range": [
            283,
            319
          ],
          "parameters": [
            "self",
            "query",
            "search_type"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "StructCacheManager",
          "docstring": "\u0423\u043c\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043a\u0435\u0448\u0430 \u0434\u043b\u044f struct.json \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 [code]",
          "line_range": [
            14,
            319
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                17,
                29
              ],
              "parameters": [
                "self",
                "struct_file"
              ]
            },
            {
              "name": "get_file_hash",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0445\u0435\u0448 \u0444\u0430\u0439\u043b\u0430 struct.json \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439",
              "line_range": [
                31,
                38
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_cache_valid",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043a\u0435\u0448\u0430",
              "line_range": [
                40,
                54
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "build_cache",
              "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u043f\u043e\u043b\u043d\u044b\u0439 \u043a\u0435\u0448 \u0438\u0437 struct.json",
              "line_range": [
                56,
                150
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "search_modules",
              "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043c\u043e\u0434\u0443\u043b\u0435\u0439",
              "line_range": [
                152,
                177
              ],
              "parameters": [
                "self",
                "query"
              ]
            },
            {
              "name": "search_functions",
              "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
              "line_range": [
                179,
                205
              ],
              "parameters": [
                "self",
                "query"
              ]
            },
            {
              "name": "search_classes",
              "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043a\u043b\u0430\u0441\u0441\u043e\u0432",
              "line_range": [
                207,
                233
              ],
              "parameters": [
                "self",
                "query"
              ]
            },
            {
              "name": "get_module_details",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0435\u0442\u0430\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044f",
              "line_range": [
                235,
                248
              ],
              "parameters": [
                "self",
                "module_name"
              ]
            },
            {
              "name": "get_cache_stats",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043a\u0435\u0448\u0430",
              "line_range": [
                250,
                265
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "invalidate_cache",
              "docstring": "\u0418\u043d\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043a\u0435\u0448",
              "line_range": [
                267,
                281
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "smart_search",
              "docstring": "\u0423\u043c\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0432\u0441\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c \u0441 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432",
              "line_range": [
                283,
                319
              ],
              "parameters": [
                "self",
                "query",
                "search_type"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "print"
        ],
        "get_file_hash": [
          "f.read",
          "hashlib.md5",
          "open"
        ],
        "is_cache_valid": [
          "self.get_file_hash",
          "json.load",
          "open",
          "metadata.get"
        ],
        "build_cache": [
          "self.get_file_hash",
          "json.load",
          "print",
          "f.get",
          "json.dump",
          "data.get",
          "m.get",
          "datetime.now",
          "len",
          "c.get",
          "module.get",
          "func.get",
          "cls.get",
          "time.time",
          "open"
        ],
        "search_modules": [
          "name.lower",
          "json.load",
          "print",
          "self.build_cache",
          "modules.items",
          "self.is_cache_valid",
          "len",
          "results.append",
          "query.lower",
          "open"
        ],
        "search_functions": [
          "name.lower",
          "json.load",
          "functions.items",
          "print",
          "self.build_cache",
          "sorted",
          "self.is_cache_valid",
          "results.append",
          "query.lower",
          "open"
        ],
        "search_classes": [
          "name.lower",
          "json.load",
          "print",
          "self.build_cache",
          "sorted",
          "self.is_cache_valid",
          "len",
          "results.append",
          "query.lower",
          "open",
          "classes.items"
        ],
        "get_module_details": [
          "json.load",
          "print",
          "self.build_cache",
          "self.is_cache_valid",
          "modules.get",
          "open"
        ],
        "get_cache_stats": [
          "str",
          "json.load",
          "self.is_cache_valid",
          "open"
        ],
        "invalidate_cache": [
          "print",
          "cache_file.exists",
          "cache_file.unlink"
        ],
        "smart_search": [
          "json.load",
          "print",
          "json.dump",
          "self.search_classes",
          "self.search_functions",
          "self.search_modules",
          "query.lower",
          "open"
        ],
        "test_cache_performance": [
          "cache_manager.smart_search",
          "cache_manager.get_cache_stats",
          "print",
          "sum",
          "StructCacheManager",
          "cache_manager.build_cache",
          "stats.get",
          "len",
          "time.time"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "hashlib",
        "json",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "a0751217-03be-4eab-b7e3-0efb787afdca"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            13,
            17
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_text_file",
          "docstring": "Check if file is likely a text file based on extension.",
          "line_range": [
            20,
            31
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": [
            34,
            66
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "gitignore_parser.parse_gitignore",
          "gitignore_path.exists"
        ],
        "is_text_file": [],
        "collect_project": [
          "Path",
          "root_dir.rglob",
          "logger.info",
          "logger.warning",
          "any",
          "json.dump",
          "load_gitignore",
          "str",
          "doc_files.items",
          "gitignore",
          "logger.error",
          "file_path.is_file",
          "len",
          "f.read",
          "open",
          "is_text_file"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "fc165121-a126-4beb-bacf-9c8065145d69"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_models",
      "path": ".ARCHIVE/parse_ollama_models.py",
      "category": "core",
      "module_doc": "\u041f\u0430\u0440\u0441\u0435\u0440 \u0441\u043f\u0438\u0441\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Ollama \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430",
      "functions": [
        {
          "name": "parse_ollama_models",
          "docstring": "\u041f\u0430\u0440\u0441\u0438\u0442 \u0444\u0430\u0439\u043b \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Ollama \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            8,
            44
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "parse_model_block",
          "docstring": "\u041f\u0430\u0440\u0441\u0438\u0442 \u0431\u043b\u043e\u043a \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043c\u043e\u0434\u0435\u043b\u0438",
          "line_range": [
            46,
            105
          ],
          "parameters": [
            "name",
            "block"
          ],
          "decorators": []
        },
        {
          "name": "categorize_models",
          "docstring": "\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u043c \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044e",
          "line_range": [
            107,
            156
          ],
          "parameters": [
            "models"
          ],
          "decorators": []
        },
        {
          "name": "analyze_for_rtx3060ti",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u0438 \u0441 RTX 3060 Ti (8GB VRAM)",
          "line_range": [
            158,
            179
          ],
          "parameters": [
            "models"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_ollama_models": [
          "re.match",
          "models.append",
          "parse_model_block",
          "content.split",
          "current_block.append",
          "len",
          "f.read",
          "line.strip",
          "open"
        ],
        "parse_model_block": [
          "sizes.append",
          "prev_line.isdigit",
          "re.match",
          "capabilities.append",
          "prev_line.replace",
          "enumerate",
          "line.isdigit",
          "int",
          "len"
        ],
        "categorize_models": [
          "any"
        ],
        "analyze_for_rtx3060ti": [
          "size.endswith",
          "float",
          "sorted",
          "max",
          "compatible_models.append"
        ]
      },
      "dependencies": [
        "json",
        "re"
      ],
      "hash": null,
      "artifact_id": "c86a3019-0daa-4717-a84b-23e20cc1b442"
    },
    {
      "module_id": ".ARCHIVE.test_cli_demo",
      "path": ".ARCHIVE/test_cli_demo.py",
      "category": "test",
      "module_doc": "Quick CLI test to demonstrate new commands",
      "functions": [
        {
          "name": "test_interactive_cli",
          "docstring": "Test interactive CLI with new commands",
          "line_range": [
            10,
            69
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_interactive_cli": [
          "print",
          "subprocess.run"
        ]
      },
      "dependencies": [
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "e372092a-94ae-4e6d-8299-f9c3391d85cb"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_full",
      "path": ".ARCHIVE/parse_ollama_full.py",
      "category": "core",
      "module_doc": "Full Ollama List Parser + Context Merger for Grok Consultation\nParses ollama_list.txt (2103 lines) and merges with existing context",
      "functions": [
        {
          "name": "parse_ollama_list",
          "docstring": "Parse ollama_list.txt and return structured data",
          "line_range": [
            11,
            92
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_md_to_json",
          "docstring": "Convert markdown content to structured JSON",
          "line_range": [
            94,
            124
          ],
          "parameters": [
            "md_content"
          ],
          "decorators": []
        },
        {
          "name": "create_flattened_models_structure",
          "docstring": "Create a flattened structure that's more LLM-friendly",
          "line_range": [
            126,
            222
          ],
          "parameters": [
            "models"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            224,
            301
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "parse_pulls",
          "docstring": "",
          "line_range": [
            150,
            157
          ],
          "parameters": [
            "pulls_str"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_ollama_list": [
          "f.readlines",
          "c.isdigit",
          "models.append",
          "any",
          "line.isdigit",
          "current_model.get",
          "line.endswith",
          "len",
          "open"
        ],
        "convert_md_to_json": [
          "md_content.split",
          "line.strip",
          "line.startswith",
          "current_content.append"
        ],
        "create_flattened_models_structure": [
          "len"
        ],
        "parse_pulls": [
          "float",
          "pulls_str.endswith"
        ],
        "main": [
          "print",
          "json.dump",
          "convert_md_to_json",
          "parse_ollama_list",
          "enumerate",
          "len",
          "f.read",
          "create_flattened_models_structure",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "re"
      ],
      "hash": null,
      "artifact_id": "06954892-922f-40ef-97e9-4740ad9ad670"
    },
    {
      "module_id": ".ARCHIVE.force_ai_integration",
      "path": ".ARCHIVE/force_ai_integration.py",
      "category": "core",
      "module_doc": "Force AI Integration Script\nInitializes middleware and monitoring to ensure AI uses llmstruct system.",
      "functions": [
        {
          "name": "force_ai_integration",
          "docstring": "Force AI to use llmstruct system.",
          "line_range": [
            18,
            106
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_integration_status",
          "docstring": "Check current AI integration status.",
          "line_range": [
            109,
            138
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "force_ai_integration": [
          "Path",
          "middleware.process_ai_request",
          "config_file.exists",
          "print",
          "initialize_ai_middleware",
          "json.dump",
          "str",
          "record_ai_usage",
          "monitor.get_real_time_guidance",
          "initialize_ai_monitor",
          "open"
        ],
        "check_integration_status": [
          "get_ai_middleware",
          "print",
          "get_ai_monitor",
          "monitor.analyze_behavior_trends",
          "middleware.get_middleware_stats"
        ]
      },
      "dependencies": [
        "AIWorkflowMode",
        "Path",
        "get_ai_middleware",
        "get_ai_monitor",
        "initialize_ai_middleware",
        "initialize_ai_monitor",
        "json",
        "llmstruct.ai_self_monitor",
        "llmstruct.ai_workflow_middleware",
        "pathlib",
        "record_ai_usage",
        "sys"
      ],
      "hash": null,
      "artifact_id": "61eda24d-0204-4c62-b6b5-6f0d8af29b2e"
    },
    {
      "module_id": ".ARCHIVE.test_modular_cli",
      "path": ".ARCHIVE/test_modular_cli.py",
      "category": "test",
      "module_doc": "Test script for modular CLI structure",
      "functions": [
        {
          "name": "test_modular_cli",
          "docstring": "Test basic modular CLI functionality.",
          "line_range": [
            14,
            63
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_copilot_integration",
          "docstring": "Test Copilot integration.",
          "line_range": [
            65,
            100
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_modular_cli": [
          "CLIConfig",
          "create_cli_core",
          "print",
          "CommandProcessor",
          "tempfile.TemporaryDirectory",
          "config.get_cache_config",
          "utils.read_file_content",
          "len",
          "CLIUtils",
          "utils.write_file_content",
          "traceback.print_exc"
        ],
        "test_copilot_integration": [
          "initialize_copilot",
          "print",
          "tempfile.TemporaryDirectory",
          "manager.get_context_status",
          "len",
          "traceback.print_exc",
          "manager.close",
          "CopilotEvent"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLICore",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "CopilotEvent",
        "Path",
        "create_cli_core",
        "initialize_copilot",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_core",
        "llmstruct.cli_utils",
        "llmstruct.copilot",
        "os",
        "pathlib",
        "sys",
        "tempfile",
        "traceback"
      ],
      "hash": null,
      "artifact_id": "76d85bb7-c32f-43dc-94bf-7233045a0aa4"
    },
    {
      "module_id": ".ARCHIVE.test_websocket",
      "path": ".ARCHIVE/test_websocket.py",
      "category": "test",
      "module_doc": "WebSocket Chat Client\n\nSimple client to test WebSocket chat functionality",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            15,
            16
          ],
          "parameters": [
            "self",
            "url"
          ],
          "decorators": []
        },
        {
          "name": "connect_and_chat",
          "docstring": "Connect to WebSocket and start interactive chat",
          "line_range": [
            18,
            53
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "listen_for_messages",
          "docstring": "Listen for messages from server",
          "line_range": [
            55,
            65
          ],
          "parameters": [
            "self",
            "websocket"
          ],
          "decorators": []
        },
        {
          "name": "handle_server_message",
          "docstring": "Handle incoming server messages",
          "line_range": [
            67,
            97
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ChatClient",
          "docstring": "",
          "line_range": [
            14,
            97
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                15,
                16
              ],
              "parameters": [
                "self",
                "url"
              ]
            },
            {
              "name": "connect_and_chat",
              "docstring": "Connect to WebSocket and start interactive chat",
              "line_range": [
                18,
                53
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "listen_for_messages",
              "docstring": "Listen for messages from server",
              "line_range": [
                55,
                65
              ],
              "parameters": [
                "self",
                "websocket"
              ]
            },
            {
              "name": "handle_server_message",
              "docstring": "Handle incoming server messages",
              "line_range": [
                67,
                97
              ],
              "parameters": [
                "self",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "connect_and_chat": [
          "input",
          "websocket.send",
          "self.listen_for_messages",
          "print",
          "websockets.connect",
          "asyncio.create_task",
          "json.dumps",
          "user_input.lower"
        ],
        "listen_for_messages": [
          "json.loads",
          "self.handle_server_message",
          "print"
        ],
        "handle_server_message": [
          "context_info.get",
          "print",
          "data.get"
        ]
      },
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "sys",
        "websockets"
      ],
      "hash": null,
      "artifact_id": "8a15d389-f37b-4800-8d91-5d1441520fb8"
    },
    {
      "module_id": ".ARCHIVE.final_system_check",
      "path": ".ARCHIVE/final_system_check.py",
      "category": "core",
      "module_doc": "Final System Status Check - LLMStruct Modular CLI Integration\nComprehensive validation of all completed components",
      "functions": [
        {
          "name": "check_system_status",
          "docstring": "Comprehensive system status check",
          "line_range": [
            12,
            155
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_system_status": [
          "json.load",
          "print",
          "t.get",
          "data.get",
          "i.get",
          "len",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "482c6924-b115-4442-b108-6dc2c28d93e0"
    },
    {
      "module_id": ".ARCHIVE.telegram_bot_final",
      "path": ".ARCHIVE/telegram_bot_final.py",
      "category": "core",
      "module_doc": "\ud83c\udfaf \u0424\u0418\u041d\u0410\u041b\u042c\u041d\u0410\u042f \u0432\u0435\u0440\u0441\u0438\u044f Telegram \u0431\u043e\u0442\u0430 \u0434\u043b\u044f LLMStruct\n- \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 FastAPI \u2705\n- \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 SSL \u043e\u0448\u0438\u0431\u043e\u043a \u2705  \n- \u0410\u0432\u0442\u043e\u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u2705\n- \u041f\u043e\u043b\u043d\u043e\u0435 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u2705",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            292,
            325
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            42,
            53
          ],
          "parameters": [
            "self",
            "token",
            "api_base_url"
          ],
          "decorators": []
        },
        {
          "name": "get_session",
          "docstring": "",
          "line_range": [
            55,
            59
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_call",
          "docstring": "\u0423\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 API \u0441 \u043f\u043e\u0432\u0442\u043e\u0440\u0430\u043c\u0438",
          "line_range": [
            61,
            92
          ],
          "parameters": [
            "self",
            "endpoint",
            "method",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "save_user_message",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            94,
            106
          ],
          "parameters": [
            "self",
            "user_id",
            "username",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            108,
            116
          ],
          "parameters": [
            "self",
            "user_id",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
          "line_range": [
            118,
            133
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_system_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            135,
            137
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
          "line_range": [
            139,
            150
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            152,
            176
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
          "line_range": [
            178,
            200
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "memory_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
          "line_range": [
            202,
            222
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "help_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
          "line_range": [
            224,
            243
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            245,
            272
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "error_handler",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043e\u0448\u0438\u0431\u043e\u043a",
          "line_range": [
            274,
            284
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
          "line_range": [
            286,
            290
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "FinalLLMStructBot",
          "docstring": "",
          "line_range": [
            41,
            290
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                42,
                53
              ],
              "parameters": [
                "self",
                "token",
                "api_base_url"
              ]
            },
            {
              "name": "get_session",
              "docstring": "",
              "line_range": [
                55,
                59
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_call",
              "docstring": "\u0423\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 API \u0441 \u043f\u043e\u0432\u0442\u043e\u0440\u0430\u043c\u0438",
              "line_range": [
                61,
                92
              ],
              "parameters": [
                "self",
                "endpoint",
                "method",
                "data"
              ]
            },
            {
              "name": "save_user_message",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                94,
                106
              ],
              "parameters": [
                "self",
                "user_id",
                "username",
                "message"
              ]
            },
            {
              "name": "get_user_history",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                108,
                116
              ],
              "parameters": [
                "self",
                "user_id",
                "limit"
              ]
            },
            {
              "name": "chat_with_ollama",
              "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
              "line_range": [
                118,
                133
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "get_system_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                135,
                137
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
              "line_range": [
                139,
                150
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                152,
                176
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
              "line_range": [
                178,
                200
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "memory_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
              "line_range": [
                202,
                222
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "help_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
              "line_range": [
                224,
                243
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                245,
                272
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "error_handler",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043e\u0448\u0438\u0431\u043e\u043a",
              "line_range": [
                274,
                284
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
              "line_range": [
                286,
                290
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.setup_handlers",
          "Application.builder",
          "logger.info"
        ],
        "get_session": [
          "aiohttp.ClientSession",
          "aiohttp.ClientTimeout"
        ],
        "api_call": [
          "range",
          "logger.debug",
          "session.post",
          "asyncio.sleep",
          "self.get_session",
          "response.json",
          "logger.error",
          "session.get",
          "logger.warning"
        ],
        "save_user_message": [
          "self.api_call",
          "logger.info",
          "datetime.now"
        ],
        "get_user_history": [
          "self.api_call",
          "len",
          "logger.info",
          "result.get"
        ],
        "chat_with_ollama": [
          "self.api_call",
          "logger.error",
          "logger.info",
          "result.get"
        ],
        "get_system_status": [
          "self.api_call"
        ],
        "setup_handlers": [
          "logger.info",
          "MessageHandler",
          "CommandHandler"
        ],
        "start_command": [
          "logger.info",
          "logger.error",
          "self.save_user_message"
        ],
        "status_command": [
          "logger.info",
          "status.get",
          "self.get_system_status",
          "logger.error",
          "self.save_user_message"
        ],
        "memory_command": [
          "self.get_user_history",
          "logger.info",
          "msg.get",
          "logger.error",
          "enumerate",
          "self.save_user_message"
        ],
        "help_command": [
          "logger.error",
          "logger.info"
        ],
        "handle_message": [
          "thinking_msg.edit_text",
          "self.chat_with_ollama",
          "logger.info",
          "logger.error",
          "self.save_user_message"
        ],
        "error_handler": [
          "isinstance",
          "asyncio.sleep",
          "logger.error",
          "logger.info"
        ],
        "cleanup": [
          "logger.info"
        ],
        "main": [
          "BotCommand",
          "print",
          "logger.info",
          "os.getenv",
          "FinalLLMStructBot",
          "logger.error"
        ]
      },
      "dependencies": [
        "Application",
        "BotCommand",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "NetworkError",
        "Path",
        "RetryAfter",
        "TimedOut",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "json",
        "logging",
        "os",
        "pathlib",
        "telegram",
        "telegram.error",
        "telegram.ext",
        "time"
      ],
      "hash": null,
      "artifact_id": "7bf091b3-6b65-48bb-85df-55cab1f7bee2"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_for_grok",
      "path": ".ARCHIVE/parse_ollama_for_grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "0b7ce795-c556-46a3-a513-a7b8330cb7b4"
    },
    {
      "module_id": ".ARCHIVE.final_system_validation",
      "path": ".ARCHIVE/final_system_validation.py",
      "category": "core",
      "module_doc": "Final system validation script for LLMStruct Modular CLI Integration",
      "functions": [
        {
          "name": "main",
          "docstring": "Run comprehensive system validation",
          "line_range": [
            13,
            238
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "create_cli_core",
          "json.load",
          "print",
          "__import__",
          "subprocess.run",
          "next",
          "getattr",
          "status.upper",
          "len",
          "task.get",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "create_cli_core",
        "json",
        "llmstruct.cli_core",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "c34bc39a-8915-4a84-bb4d-b5f2f7c84e37"
    },
    {
      "module_id": ".ARCHIVE.test_ai_cli_debug",
      "path": ".ARCHIVE/test_ai_cli_debug.py",
      "category": "test",
      "module_doc": "Simple test for AI CLI Integration - Debug Version",
      "functions": [
        {
          "name": "test_basic_functionality",
          "docstring": "Test basic functionality step by step.",
          "line_range": [
            14,
            80
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_ai_self_awareness",
          "docstring": "Test the main AI self-awareness system.",
          "line_range": [
            82,
            116
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_basic_functionality": [
          "AISelfAwarenessCLIIntegration",
          "print",
          "integration.get_integration_summary",
          "integration.integrate_ai_status_command",
          "str",
          "status_result.get",
          "len",
          "traceback.print_exc"
        ],
        "test_ai_self_awareness": [
          "print",
          "str",
          "len",
          "discovery.discover_all_capabilities",
          "discovery.get_enhanced_capabilities_summary",
          "SystemCapabilityDiscovery",
          "traceback.print_exc"
        ]
      },
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "Path",
        "SystemCapabilityDiscovery",
        "os",
        "pathlib",
        "src.llmstruct.ai_cli_integration",
        "src.llmstruct.ai_self_awareness",
        "sys",
        "traceback"
      ],
      "hash": null,
      "artifact_id": "fb74440e-f7f6-44c4-9b97-6271e6218b12"
    },
    {
      "module_id": ".ARCHIVE.test_audit",
      "path": ".ARCHIVE/test_audit.py",
      "category": "test",
      "module_doc": "Test script for audit functionality.",
      "functions": [
        {
          "name": "test_audit_status",
          "docstring": "Test audit status directly.",
          "line_range": [
            7,
            49
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_audit_status": [
          "Path",
          "ideas_data.keys",
          "json.load",
          "print",
          "t.get",
          "tasks_file.exists",
          "tasks_data.keys",
          "i.get",
          "len",
          "list",
          "open",
          "ideas_file.exists"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "b34405fc-e181-43d5-9088-e47c11b7a45f"
    },
    {
      "module_id": ".ARCHIVE.test_bot_functionality",
      "path": ".ARCHIVE/test_bot_functionality.py",
      "category": "test",
      "module_doc": "\ud83e\uddea Comprehensive Bot Functionality Test\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 FastAPI + Telegram Bot:\n- \u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432\n- \u0417\u0430\u043f\u0438\u0441\u044c \u0432 /tmp (\u0441\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u043a\u043e\u0440\u043d\u044f)  \n- \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432\n- \u041f\u0430\u043c\u044f\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n- API \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435\n- struct.json \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            21,
            31
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_api_health",
          "docstring": "Test 1: API Health Check",
          "line_range": [
            33,
            50
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_file_reading",
          "docstring": "Test 2: File Reading Capability",
          "line_range": [
            52,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_file_writing",
          "docstring": "Test 3: File Writing (\u0432 /tmp \u043a\u0430\u043a \u0441\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u043a\u043e\u0440\u043d\u044f)",
          "line_range": [
            71,
            96
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_file_editing",
          "docstring": "Test 4: File Editing",
          "line_range": [
            98,
            124
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_memory_system",
          "docstring": "Test 5: Memory System",
          "line_range": [
            126,
            160
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_struct_json_analysis",
          "docstring": "Test 6: struct.json Analysis and Caching Strategy",
          "line_range": [
            162,
            222
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_api_communication",
          "docstring": "Test 7: API Communication",
          "line_range": [
            224,
            254
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_telegram_logs",
          "docstring": "Test 8: Telegram Message Logging",
          "line_range": [
            256,
            295
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_all_tests",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432",
          "line_range": [
            297,
            347
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BotFunctionalityTester",
          "docstring": "",
          "line_range": [
            20,
            347
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                21,
                31
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_api_health",
              "docstring": "Test 1: API Health Check",
              "line_range": [
                33,
                50
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_file_reading",
              "docstring": "Test 2: File Reading Capability",
              "line_range": [
                52,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_file_writing",
              "docstring": "Test 3: File Writing (\u0432 /tmp \u043a\u0430\u043a \u0441\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u043a\u043e\u0440\u043d\u044f)",
              "line_range": [
                71,
                96
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_file_editing",
              "docstring": "Test 4: File Editing",
              "line_range": [
                98,
                124
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_memory_system",
              "docstring": "Test 5: Memory System",
              "line_range": [
                126,
                160
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_struct_json_analysis",
              "docstring": "Test 6: struct.json Analysis and Caching Strategy",
              "line_range": [
                162,
                222
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_api_communication",
              "docstring": "Test 7: API Communication",
              "line_range": [
                224,
                254
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_telegram_logs",
              "docstring": "Test 8: Telegram Message Logging",
              "line_range": [
                256,
                295
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_all_tests",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432",
              "line_range": [
                297,
                347
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "print"
        ],
        "test_api_health": [
          "response.json",
          "aiohttp.ClientSession",
          "session.get",
          "print"
        ],
        "test_file_reading": [
          "len",
          "test_file.write_text",
          "test_file.read_text",
          "print"
        ],
        "test_file_writing": [
          "new_file.write_text",
          "new_file.stat",
          "print",
          "datetime.now"
        ],
        "test_file_editing": [
          "print",
          "edit_file.read_text",
          "content.replace",
          "edit_file.write_text",
          "len"
        ],
        "test_memory_system": [
          "Path",
          "json.load",
          "print",
          "sum",
          "json.dump",
          "memory_data.values",
          "datetime.now",
          "len",
          "open",
          "memory_file.exists"
        ],
        "test_struct_json_analysis": [
          "json.load",
          "print",
          "json.dump",
          "stats.get",
          "data.get",
          "metadata.get",
          "time.time",
          "open"
        ],
        "test_api_communication": [
          "aiohttp.ClientSession",
          "response.text",
          "print",
          "session.post",
          "data.get",
          "response.json",
          "len"
        ],
        "test_telegram_logs": [
          "Path",
          "print",
          "cursor_log.stat",
          "datetime.now",
          "user_log.stat",
          "cursor_log.exists",
          "user_log.exists",
          "logs_dir.mkdir",
          "f.write",
          "open"
        ],
        "run_all_tests": [
          "self.test_file_writing",
          "self.test_file_editing",
          "self.test_memory_system",
          "self.test_struct_json_analysis",
          "print",
          "asyncio.iscoroutine",
          "self.test_api_health",
          "self.test_file_reading",
          "self.test_telegram_logs",
          "len",
          "results.append",
          "self.test_api_communication"
        ]
      },
      "dependencies": [
        "Path",
        "aiohttp",
        "asyncio",
        "datetime",
        "json",
        "pathlib",
        "time"
      ],
      "hash": null,
      "artifact_id": "817c2242-80ff-4483-a22d-3ad825648815"
    },
    {
      "module_id": ".ARCHIVE.debug_terminal",
      "path": ".ARCHIVE/debug_terminal.py",
      "category": "core",
      "module_doc": "Debug Terminal Script - Fallback for when terminal output is not visible\nSaves all output to files for manual inspection",
      "functions": [
        {
          "name": "run_with_output_capture",
          "docstring": "Run command and capture output to both console and file.",
          "line_range": [
            13,
            78
          ],
          "parameters": [
            "command",
            "description"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run common diagnostic commands with output capture.",
          "line_range": [
            80,
            110
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "run_with_output_capture": [
          "print",
          "subprocess.run",
          "len",
          "f.write",
          "open"
        ],
        "main": [
          "results.append",
          "run_with_output_capture",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "3c8aad81-665e-4493-a190-8cba80347845"
    },
    {
      "module_id": ".ARCHIVE.test_export",
      "path": ".ARCHIVE/test_export.py",
      "category": "test",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "deb0453e-f074-4e61-9979-f2779e2ec77d"
    },
    {
      "module_id": ".ARCHIVE.telegram_bot_enhanced",
      "path": ".ARCHIVE/telegram_bot_enhanced.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "7b22ec48-397f-4621-a65f-e625fd39f943"
    },
    {
      "module_id": ".ARCHIVE.test_api",
      "path": ".ARCHIVE/test_api.py",
      "category": "test",
      "module_doc": "Test script for LLMStruct FastAPI",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "app",
        "llmstruct.api.app",
        "os",
        "sys",
        "uvicorn"
      ],
      "hash": null,
      "artifact_id": "be5edb05-84a1-412d-85d7-8264f481d079"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_minimal",
      "path": ".ARCHIVE/parse_ollama_minimal.py",
      "category": "core",
      "module_doc": "Minimal Ollama Parser - Clean JSON without extra analytics\nJust structure original data properly, remove irrelevant entries",
      "functions": [
        {
          "name": "parse_ollama_minimal",
          "docstring": "Minimal parser - just clean structure",
          "line_range": [
            10,
            90
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "create_compact_json",
          "docstring": "Create compact JSON structure",
          "line_range": [
            92,
            137
          ],
          "parameters": [
            "models",
            "md_content"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            139,
            177
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_ollama_minimal": [
          "f.readlines",
          "c.isdigit",
          "models.append",
          "line.isdigit",
          "any",
          "line.endswith",
          "len",
          "line.strip",
          "open"
        ],
        "create_compact_json": [
          "md_content.split",
          "current_content.append",
          "line.startswith",
          "len",
          "line.strip"
        ],
        "main": [
          "f.readlines",
          "print",
          "json.dump",
          "parse_ollama_minimal",
          "create_compact_json",
          "enumerate",
          "len",
          "f.read",
          "open"
        ]
      },
      "dependencies": [
        "json",
        "os",
        "re"
      ],
      "hash": null,
      "artifact_id": "5c4a2b3a-75c9-4e28-89f0-5d42f1709e89"
    },
    {
      "module_id": ".ARCHIVE.chat_bot_final",
      "path": ".ARCHIVE/chat_bot_final.py",
      "category": "core",
      "module_doc": "LLMStruct Chat Bot Final - \u041f\u043e\u043b\u043d\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 FastAPI\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c: API \u0432\u043c\u0435\u0441\u0442\u043e CLI, \u0431\u0435\u0437 Markdown parse_mode, \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u043f\u0430\u043c\u044f\u0442\u044c",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            31,
            47
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "get_http_session",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 HTTP \u0441\u0435\u0441\u0441\u0438\u0438 \u0434\u043b\u044f API \u0432\u044b\u0437\u043e\u0432\u043e\u0432",
          "line_range": [
            49,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_call",
          "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f API \u0432\u044b\u0437\u043e\u0432\u043e\u0432",
          "line_range": [
            55,
            69
          ],
          "parameters": [
            "self",
            "endpoint",
            "method",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "save_user_memory",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            71,
            78
          ],
          "parameters": [
            "self",
            "user_id",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            80,
            83
          ],
          "parameters": [
            "self",
            "user_id",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            85,
            100
          ],
          "parameters": [
            "self",
            "message",
            "user_id"
          ],
          "decorators": []
        },
        {
          "name": "get_system_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            102,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_available_models",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            106,
            109
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "log_user_message",
          "docstring": "\u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            111,
            124
          ],
          "parameters": [
            "self",
            "user_info",
            "message",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            126,
            133
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            135,
            162
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "help_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
          "line_range": [
            164,
            186
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
          "line_range": [
            188,
            205
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "memory_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
          "line_range": [
            207,
            221
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "models_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /models",
          "line_range": [
            223,
            234
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            236,
            255
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
          "line_range": [
            257,
            260
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "signal_handler",
          "docstring": "",
          "line_range": [
            266,
            268
          ],
          "parameters": [
            "sig",
            "frame"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "FinalLLMStructBot",
          "docstring": "\u0424\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0431\u043e\u0442\u0430 \u0441 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
          "line_range": [
            28,
            260
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                31,
                47
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "get_http_session",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 HTTP \u0441\u0435\u0441\u0441\u0438\u0438 \u0434\u043b\u044f API \u0432\u044b\u0437\u043e\u0432\u043e\u0432",
              "line_range": [
                49,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_call",
              "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f API \u0432\u044b\u0437\u043e\u0432\u043e\u0432",
              "line_range": [
                55,
                69
              ],
              "parameters": [
                "self",
                "endpoint",
                "method",
                "data"
              ]
            },
            {
              "name": "save_user_memory",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                71,
                78
              ],
              "parameters": [
                "self",
                "user_id",
                "message"
              ]
            },
            {
              "name": "get_user_history",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                80,
                83
              ],
              "parameters": [
                "self",
                "user_id",
                "limit"
              ]
            },
            {
              "name": "chat_with_ollama",
              "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                85,
                100
              ],
              "parameters": [
                "self",
                "message",
                "user_id"
              ]
            },
            {
              "name": "get_system_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                102,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_available_models",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                106,
                109
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "log_user_message",
              "docstring": "\u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                111,
                124
              ],
              "parameters": [
                "self",
                "user_info",
                "message",
                "chat_id"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                126,
                133
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                135,
                162
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "help_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
              "line_range": [
                164,
                186
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
              "line_range": [
                188,
                205
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "memory_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
              "line_range": [
                207,
                221
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "models_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /models",
              "line_range": [
                223,
                234
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                236,
                255
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
              "line_range": [
                257,
                260
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "Application.builder",
          "self.setup_handlers",
          "logger.info"
        ],
        "get_http_session": [
          "aiohttp.ClientSession"
        ],
        "api_call": [
          "self.get_http_session",
          "session.post",
          "response.json",
          "str",
          "logger.error",
          "session.get"
        ],
        "save_user_memory": [
          "self.api_call",
          "datetime.now"
        ],
        "get_user_history": [
          "self.api_call",
          "result.get"
        ],
        "chat_with_ollama": [
          "self.api_call",
          "h.get",
          "self.get_user_history",
          "result.get"
        ],
        "get_system_status": [
          "self.api_call"
        ],
        "get_available_models": [
          "self.api_call",
          "result.get"
        ],
        "log_user_message": [
          "open",
          "f.write",
          "user_info.get",
          "datetime.now"
        ],
        "setup_handlers": [
          "MessageHandler",
          "CommandHandler"
        ],
        "start_command": [
          "self.log_user_message"
        ],
        "help_command": [],
        "status_command": [
          "self.get_system_status",
          "status.get"
        ],
        "memory_command": [
          "str",
          "self.get_user_history",
          "enumerate",
          "msg.get"
        ],
        "models_command": [
          "self.get_available_models"
        ],
        "handle_message": [
          "str",
          "self.chat_with_ollama",
          "self.save_user_memory",
          "self.log_user_message"
        ],
        "cleanup": [],
        "signal_handler": [
          "sys.exit",
          "logger.info"
        ]
      },
      "dependencies": [
        "Any",
        "Application",
        "BotCommand",
        "CommandHandler",
        "ContextTypes",
        "Dict",
        "MessageHandler",
        "Optional",
        "Path",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "json",
        "logging",
        "os",
        "pathlib",
        "signal",
        "sys",
        "telegram",
        "telegram.ext",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "a3bb4235-42e2-43a5-ae9e-8edd202e6a7d"
    },
    {
      "module_id": ".ARCHIVE.monitor_system",
      "path": ".ARCHIVE/monitor_system.py",
      "category": "core",
      "module_doc": "System Monitor - Continuous logging for debugging terminal issues\nRuns in background and logs system status to files",
      "functions": [
        {
          "name": "log_system_status",
          "docstring": "Log current system status to file.",
          "line_range": [
            15,
            60
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run continuous monitoring.",
          "line_range": [
            62,
            86
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "log_system_status": [
          "Path",
          "timestamp.strftime",
          "timestamp.isoformat",
          "str",
          "open",
          "f.write",
          "context.get",
          "len",
          "wo.get_current_context",
          "json.dumps",
          "WorkflowOrchestrator"
        ],
        "main": [
          "len",
          "time.sleep",
          "print",
          "log_system_status"
        ]
      },
      "dependencies": [
        "Path",
        "WorkflowOrchestrator",
        "datetime",
        "json",
        "llmstruct.workflow_orchestrator",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "0a490352-3eaa-4a06-987c-d3cefdebe4bf"
    },
    {
      "module_id": ".ARCHIVE.ollama_full_parser",
      "path": ".ARCHIVE/ollama_full_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "52bfcb98-16fe-4b82-a9c6-2d98d6f849cc"
    },
    {
      "module_id": ".ARCHIVE.test_enhanced_ai_awareness",
      "path": ".ARCHIVE/test_enhanced_ai_awareness.py",
      "category": "test",
      "module_doc": "Test script for AI Self-Awareness Enhancement with Unused Function Integration",
      "functions": [
        {
          "name": "test_enhanced_ai_self_awareness",
          "docstring": "Test the enhanced AI self-awareness system.",
          "line_range": [
            12,
            48
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_enhanced_ai_self_awareness": [
          "print",
          "discovery.discover_all_capabilities",
          "discovery.get_comprehensive_ai_status",
          "SystemCapabilityDiscovery",
          "traceback.print_exc",
          "integration_metrics.get"
        ]
      },
      "dependencies": [
        "SystemCapabilityDiscovery",
        "os",
        "src.llmstruct.ai_self_awareness",
        "sys",
        "traceback"
      ],
      "hash": null,
      "artifact_id": "08c89454-2b50-46e9-8156-54330580020e"
    },
    {
      "module_id": ".ARCHIVE.telegram_bot_test",
      "path": ".ARCHIVE/telegram_bot_test.py",
      "category": "core",
      "module_doc": "\ud83e\uddea \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 FastAPI\n\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0434\u043b\u044f \u0444\u043e\u0440\u0433\u0440\u0430\u0443\u043d\u0434 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            238,
            266
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "self",
            "token",
            "api_base_url"
          ],
          "decorators": []
        },
        {
          "name": "get_session",
          "docstring": "",
          "line_range": [
            45,
            48
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_call",
          "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 API",
          "line_range": [
            50,
            74
          ],
          "parameters": [
            "self",
            "endpoint",
            "method",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "save_user_message",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            76,
            90
          ],
          "parameters": [
            "self",
            "user_id",
            "username",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            92,
            102
          ],
          "parameters": [
            "self",
            "user_id",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
          "line_range": [
            104,
            119
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_system_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            121,
            123
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
          "line_range": [
            125,
            133
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            135,
            153
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
          "line_range": [
            155,
            174
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "memory_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
          "line_range": [
            176,
            193
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "chat_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /chat",
          "line_range": [
            195,
            216
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            218,
            230
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
          "line_range": [
            232,
            236
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TelegramBotTest",
          "docstring": "",
          "line_range": [
            33,
            236
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                34,
                43
              ],
              "parameters": [
                "self",
                "token",
                "api_base_url"
              ]
            },
            {
              "name": "get_session",
              "docstring": "",
              "line_range": [
                45,
                48
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_call",
              "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 API",
              "line_range": [
                50,
                74
              ],
              "parameters": [
                "self",
                "endpoint",
                "method",
                "data"
              ]
            },
            {
              "name": "save_user_message",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                76,
                90
              ],
              "parameters": [
                "self",
                "user_id",
                "username",
                "message"
              ]
            },
            {
              "name": "get_user_history",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                92,
                102
              ],
              "parameters": [
                "self",
                "user_id",
                "limit"
              ]
            },
            {
              "name": "chat_with_ollama",
              "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
              "line_range": [
                104,
                119
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "get_system_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                121,
                123
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
              "line_range": [
                125,
                133
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                135,
                153
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
              "line_range": [
                155,
                174
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "memory_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
              "line_range": [
                176,
                193
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "chat_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /chat",
              "line_range": [
                195,
                216
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                218,
                230
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
              "line_range": [
                232,
                236
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.setup_handlers",
          "Application.builder",
          "logger.info"
        ],
        "get_session": [
          "aiohttp.ClientSession"
        ],
        "api_call": [
          "session.post",
          "self.get_session",
          "response.json",
          "str",
          "logger.error",
          "session.get"
        ],
        "save_user_message": [
          "logger.info",
          "result.get",
          "self.api_call",
          "datetime.now",
          "logger.error"
        ],
        "get_user_history": [
          "logger.info",
          "result.get",
          "self.api_call",
          "logger.error",
          "len"
        ],
        "chat_with_ollama": [
          "self.api_call",
          "logger.error",
          "logger.info",
          "result.get"
        ],
        "get_system_status": [
          "self.api_call"
        ],
        "setup_handlers": [
          "logger.info",
          "MessageHandler",
          "CommandHandler"
        ],
        "start_command": [
          "logger.info",
          "self.save_user_message"
        ],
        "status_command": [
          "logger.info",
          "self.get_system_status",
          "status.get",
          "self.save_user_message"
        ],
        "memory_command": [
          "logger.info",
          "self.get_user_history",
          "self.save_user_message",
          "msg.get"
        ],
        "chat_command": [
          "logger.info",
          "len",
          "self.chat_with_ollama",
          "self.save_user_message"
        ],
        "handle_message": [
          "logger.info",
          "self.chat_with_ollama",
          "self.save_user_message"
        ],
        "cleanup": [
          "logger.info"
        ],
        "main": [
          "TelegramBotTest",
          "BotCommand",
          "print",
          "logger.info",
          "os.getenv",
          "logger.error"
        ]
      },
      "dependencies": [
        "Application",
        "BotCommand",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "json",
        "logging",
        "os",
        "telegram",
        "telegram.ext",
        "time"
      ],
      "hash": null,
      "artifact_id": "faddf6fe-8444-49c4-8e1e-eacdfa0f6712"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_fixed",
      "path": ".ARCHIVE/parse_ollama_fixed.py",
      "category": "core",
      "module_doc": "Fixed Ollama List Parser + Context Merger for Grok Consultation\nCorrectly parses the specific structure of ollama_list.txt",
      "functions": [
        {
          "name": "parse_ollama_list_fixed",
          "docstring": "Parse ollama_list.txt with correct understanding of structure",
          "line_range": [
            11,
            101
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "create_smart_categorization",
          "docstring": "Create intelligent categorization with RTX 3060 Ti focus",
          "line_range": [
            103,
            279
          ],
          "parameters": [
            "models"
          ],
          "decorators": []
        },
        {
          "name": "convert_md_to_json",
          "docstring": "Convert markdown content to structured JSON",
          "line_range": [
            281,
            306
          ],
          "parameters": [
            "md_content"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            308,
            412
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "parse_pulls_number",
          "docstring": "Convert pulls string to number for sorting",
          "line_range": [
            156,
            167
          ],
          "parameters": [
            "pulls_str"
          ],
          "decorators": []
        },
        {
          "name": "get_max_size_gb",
          "docstring": "Get maximum model size in GB",
          "line_range": [
            169,
            182
          ],
          "parameters": [
            "sizes"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_ollama_list_fixed": [
          "block.strip",
          "block.split",
          "c.isdigit",
          "re.split",
          "models.append",
          "f.read",
          "line.isdigit",
          "any",
          "line.endswith",
          "len",
          "line.strip",
          "open"
        ],
        "create_smart_categorization": [
          "len"
        ],
        "parse_pulls_number": [
          "float",
          "pulls_str.endswith"
        ],
        "get_max_size_gb": [
          "size.endswith",
          "float",
          "max"
        ],
        "convert_md_to_json": [
          "md_content.split",
          "line.strip",
          "line.startswith",
          "current_content.append"
        ],
        "main": [
          "print",
          "json.dump",
          "parse_ollama_list_fixed",
          "create_smart_categorization",
          "convert_md_to_json",
          "enumerate",
          "len",
          "f.read",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "re"
      ],
      "hash": null,
      "artifact_id": "7c56dfa8-9939-4860-889b-87f64673d5c7"
    },
    {
      "module_id": ".ARCHIVE.board_cli",
      "path": ".ARCHIVE/board_cli.py",
      "category": "core",
      "module_doc": "CLI Kanban Board for llmstruct tasks and ideas\n- Reads data/tasks.json and data/ideas.json\n- Shows board in terminal: columns by status, rows by priority\n- Supports filtering, sorting, and shows links between tasks/ideas",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": [
            26,
            28
          ],
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "group_by_status_and_priority",
          "docstring": "",
          "line_range": [
            30,
            36
          ],
          "parameters": [
            "items",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "render_board",
          "docstring": "",
          "line_range": [
            38,
            64
          ],
          "parameters": [
            "board",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            66,
            74
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "json.load",
          "open"
        ],
        "group_by_status_and_priority": [
          "defaultdict",
          "item.get"
        ],
        "render_board": [
          "kind.capitalize",
          "Table",
          "console.print",
          "Panel",
          "table.add_column",
          "table.add_row",
          "links.append",
          "item.get",
          "links.extend"
        ],
        "main": [
          "group_by_status_and_priority",
          "tasks_data.get",
          "ideas_data.get",
          "console.rule",
          "load_json",
          "render_board"
        ]
      },
      "dependencies": [
        "Console",
        "Panel",
        "Path",
        "Table",
        "box",
        "collections",
        "defaultdict",
        "json",
        "os",
        "pathlib",
        "rich",
        "rich.console",
        "rich.panel",
        "rich.table"
      ],
      "hash": null,
      "artifact_id": "77f5d66c-9b15-43dd-9e2e-2802f25d59a1"
    },
    {
      "module_id": ".ARCHIVE.test_cli_integration",
      "path": ".ARCHIVE/test_cli_integration.py",
      "category": "test",
      "module_doc": "Test script for CLI integration with new commands",
      "functions": [
        {
          "name": "test_modular_cli_commands",
          "docstring": "Test new CLI commands integration",
          "line_range": [
            13,
            164
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_modular_cli_commands": [
          "create_cli_core",
          "json.load",
          "subprocess.run",
          "print",
          "time.ctime",
          "os.stat",
          "os.makedirs",
          "json.dump",
          "events_data.append",
          "int",
          "time.time",
          "open"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLICore",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "Path",
        "create_cli_core",
        "json",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_core",
        "llmstruct.cli_utils",
        "llmstruct.copilot",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "7fd3894b-8288-4708-a167-08634e80ce63"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_improved",
      "path": ".ARCHIVE/parse_ollama_improved.py",
      "category": "core",
      "module_doc": "Improved Ollama List Parser + Context Merger for Grok Consultation\nBetter parsing algorithm for ollama_list.txt structure",
      "functions": [
        {
          "name": "parse_ollama_list_improved",
          "docstring": "Parse ollama_list.txt with improved algorithm",
          "line_range": [
            11,
            95
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "create_better_flattened_structure",
          "docstring": "Create an improved flattened structure for LLM consumption",
          "line_range": [
            97,
            245
          ],
          "parameters": [
            "models"
          ],
          "decorators": []
        },
        {
          "name": "convert_md_to_json",
          "docstring": "Convert markdown content to structured JSON",
          "line_range": [
            247,
            276
          ],
          "parameters": [
            "md_content"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            278,
            373
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "parse_pulls",
          "docstring": "",
          "line_range": [
            146,
            156
          ],
          "parameters": [
            "pulls_str"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_ollama_list_improved": [
          "block.strip",
          "block.split",
          "c.isdigit",
          "model_name.lower",
          "model_name.isdigit",
          "models.append",
          "content.split",
          "line.isdigit",
          "any",
          "line.endswith",
          "len",
          "f.read",
          "line.strip",
          "open"
        ],
        "create_better_flattened_structure": [
          "len"
        ],
        "parse_pulls": [
          "float",
          "pulls_str.endswith"
        ],
        "convert_md_to_json": [
          "md_content.split",
          "line.strip",
          "line.startswith",
          "current_content.append"
        ],
        "main": [
          "create_better_flattened_structure",
          "print",
          "json.dump",
          "parse_ollama_list_improved",
          "convert_md_to_json",
          "len",
          "f.read",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "re"
      ],
      "hash": null,
      "artifact_id": "4d5a3978-0a3d-4a29-8d60-aee1289b3ddb"
    },
    {
      "module_id": ".ARCHIVE.test_efficiency",
      "path": ".ARCHIVE/test_efficiency.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": [
            15,
            19
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_local_address",
          "docstring": "",
          "line_range": [
            22,
            28
          ],
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": [
            31,
            34
          ],
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "check_ollama",
          "docstring": "",
          "line_range": [
            37,
            42
          ],
          "parameters": [
            "api_url"
          ],
          "decorators": []
        },
        {
          "name": "optimize_prompt",
          "docstring": "",
          "line_range": [
            45,
            51
          ],
          "parameters": [
            "struct_data",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": [
            54,
            78
          ],
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "check_llmstruct_cli",
          "docstring": "",
          "line_range": [
            81,
            82
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": [
            85,
            112
          ],
          "parameters": [
            "api_url",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": [
            115,
            122
          ],
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_grok",
          "docstring": "",
          "line_range": [
            125,
            147
          ],
          "parameters": [
            "api_key",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": [
            150,
            152
          ],
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            155,
            215
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "is_local_address": [
          "ipaddress.ip_address",
          "urlparse"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "check_ollama": [
          "requests.get",
          "response.json",
          "api_url.replace",
          "str"
        ],
        "optimize_prompt": [
          "struct_data.split",
          "len",
          "print"
        ],
        "run_llm_request": [
          "type",
          "print",
          "session.post",
          "requests.Session",
          "time.perf_counter",
          "response.json",
          "is_local_address",
          "get_system_metrics",
          "len",
          "response.raise_for_status"
        ],
        "check_llmstruct_cli": [
          "shutil.which"
        ],
        "test_with_llmstruct": [
          "Path",
          "target_path.exists",
          "subprocess.run",
          "FileNotFoundError",
          "json.dump",
          "optimize_prompt",
          "str",
          "check_llmstruct_cli",
          "run_llm_request",
          "f.read",
          "open"
        ],
        "test_without_llmstruct": [
          "Path",
          "optimize_prompt",
          "run_llm_request",
          "f.read",
          "open"
        ],
        "test_with_grok": [
          "Path",
          "target_path.exists",
          "test_grok",
          "FileNotFoundError",
          "json.dump",
          "optimize_prompt",
          "f.read",
          "open"
        ],
        "evaluate_accuracy": [
          "response_text.lower",
          "len",
          "sum"
        ],
        "main": [
          "test_with_grok",
          "range",
          "argparse.ArgumentParser",
          "print",
          "json.dump",
          "str",
          "check_ollama",
          "check_llmstruct_cli",
          "evaluate_accuracy",
          "test_without_llmstruct",
          "parser.parse_args",
          "open",
          "test_with_llmstruct",
          "parser.add_argument",
          "setup_proxy"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "ipaddress",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "shutil",
        "src.llmstruct.grok",
        "subprocess",
        "test_grok",
        "time",
        "urllib.parse",
        "urlparse"
      ],
      "hash": null,
      "artifact_id": "f72c2ca3-69f6-495b-9d0d-7eaffe68a306"
    },
    {
      "module_id": ".ARCHIVE.bot_api_server",
      "path": ".ARCHIVE/bot_api_server.py",
      "category": "core",
      "module_doc": "\ud83e\udd16 Enhanced Bot API Server\nFastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0431\u043e\u0442\u0430",
      "functions": [
        {
          "name": "get_file_ops",
          "docstring": "Lazy loading \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439",
          "line_range": [
            62,
            67
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_cache_manager",
          "docstring": "Lazy loading \u043a\u0435\u0448 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430",
          "line_range": [
            69,
            74
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "root",
          "docstring": "\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 API",
          "line_range": [
            94,
            112
          ],
          "parameters": [],
          "decorators": [
            "app.get('/', summary='Bot API Information')"
          ]
        },
        {
          "name": "health_check",
          "docstring": "Health check",
          "line_range": [
            115,
            126
          ],
          "parameters": [],
          "decorators": [
            "app.get('/health')"
          ]
        },
        {
          "name": "list_files",
          "docstring": "\u0421\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0440\u0430\u0431\u043e\u0447\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
          "line_range": [
            131,
            147
          ],
          "parameters": [
            "path"
          ],
          "decorators": [
            "app.get('/api/v1/files/list')"
          ]
        },
        {
          "name": "read_file",
          "docstring": "\u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            150,
            166
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": [
            "app.get('/api/v1/files/read')"
          ]
        },
        {
          "name": "write_file",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            169,
            185
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/files/write')"
          ]
        },
        {
          "name": "edit_file",
          "docstring": "\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            188,
            204
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/files/edit')"
          ]
        },
        {
          "name": "create_directory",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
          "line_range": [
            207,
            220
          ],
          "parameters": [
            "dir_path"
          ],
          "decorators": [
            "app.post('/api/v1/files/mkdir')"
          ]
        },
        {
          "name": "delete_file",
          "docstring": "\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430 \u0438\u043b\u0438 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
          "line_range": [
            223,
            236
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": [
            "app.delete('/api/v1/files/delete')"
          ]
        },
        {
          "name": "search_struct",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432 struct.json \u0441 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c",
          "line_range": [
            241,
            257
          ],
          "parameters": [
            "query",
            "search_type"
          ],
          "decorators": [
            "app.get('/api/v1/struct/search')"
          ]
        },
        {
          "name": "get_struct_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 struct.json \u043a\u0435\u0448\u0430",
          "line_range": [
            260,
            270
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/struct/stats')"
          ]
        },
        {
          "name": "invalidate_struct_cache",
          "docstring": "\u0418\u043d\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043a\u0435\u0448\u0430 struct.json",
          "line_range": [
            273,
            283
          ],
          "parameters": [],
          "decorators": [
            "app.post('/api/v1/struct/invalidate')"
          ]
        },
        {
          "name": "rebuild_struct_cache",
          "docstring": "\u041f\u0435\u0440\u0435\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043a\u0435\u0448\u0430 struct.json",
          "line_range": [
            286,
            305
          ],
          "parameters": [],
          "decorators": [
            "app.post('/api/v1/struct/rebuild')"
          ]
        },
        {
          "name": "get_workspace_status",
          "docstring": "\u0421\u0442\u0430\u0442\u0443\u0441 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430",
          "line_range": [
            310,
            320
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/workspace/status')"
          ]
        },
        {
          "name": "send_message_to_claude",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f Claude \u0447\u0435\u0440\u0435\u0437 API (\u0441\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f)",
          "line_range": [
            325,
            338
          ],
          "parameters": [
            "message"
          ],
          "decorators": [
            "app.post('/api/v1/claude/message')"
          ]
        },
        {
          "name": "run_full_test",
          "docstring": "\u041f\u043e\u043b\u043d\u044b\u0439 \u0442\u0435\u0441\u0442 \u0432\u0441\u0435\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0431\u043e\u0442\u0430",
          "line_range": [
            343,
            380
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/test/full')"
          ]
        },
        {
          "name": "startup_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435",
          "line_range": [
            385,
            392
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('startup')"
          ]
        },
        {
          "name": "shutdown_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435",
          "line_range": [
            395,
            400
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('shutdown')"
          ]
        }
      ],
      "classes": [
        {
          "name": "FileWriteRequest",
          "docstring": "",
          "line_range": [
            77,
            80
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "FileEditRequest",
          "docstring": "",
          "line_range": [
            82,
            84
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ChatMessage",
          "docstring": "",
          "line_range": [
            86,
            89
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        }
      ],
      "callgraph": {
        "get_file_ops": [
          "BotFileOperations"
        ],
        "get_cache_manager": [
          "StructCacheManager"
        ],
        "root": [
          "app.get"
        ],
        "health_check": [
          "track_workflow_event",
          "app.get",
          "datetime.now"
        ],
        "list_files": [
          "Query",
          "HTTPException",
          "app.get",
          "ops.list_files",
          "get_file_ops",
          "track_workflow_event"
        ],
        "read_file": [
          "Query",
          "HTTPException",
          "app.get",
          "get_file_ops",
          "track_workflow_event",
          "ops.read_file"
        ],
        "write_file": [
          "HTTPException",
          "get_file_ops",
          "app.post",
          "track_workflow_event",
          "ops.write_file"
        ],
        "edit_file": [
          "HTTPException",
          "get_file_ops",
          "app.post",
          "ops.edit_file",
          "track_workflow_event"
        ],
        "create_directory": [
          "Query",
          "HTTPException",
          "get_file_ops",
          "app.post",
          "ops.create_directory",
          "track_workflow_event"
        ],
        "delete_file": [
          "Query",
          "HTTPException",
          "ops.delete_file",
          "get_file_ops",
          "track_workflow_event",
          "app.delete"
        ],
        "search_struct": [
          "Query",
          "HTTPException",
          "app.get",
          "get_file_ops",
          "ops.search_struct",
          "track_workflow_event"
        ],
        "get_struct_stats": [
          "get_cache_manager",
          "cache.get_cache_stats",
          "HTTPException",
          "app.get",
          "track_workflow_event"
        ],
        "invalidate_struct_cache": [
          "get_cache_manager",
          "HTTPException",
          "cache.invalidate_cache",
          "app.post",
          "datetime.now",
          "track_workflow_event"
        ],
        "rebuild_struct_cache": [
          "get_cache_manager",
          "cache.get_cache_stats",
          "HTTPException",
          "app.post",
          "datetime.now",
          "track_workflow_event",
          "cache.build_cache"
        ],
        "get_workspace_status": [
          "HTTPException",
          "app.get",
          "get_file_ops",
          "track_workflow_event",
          "ops.get_workspace_status"
        ],
        "send_message_to_claude": [
          "app.post",
          "datetime.now",
          "track_workflow_event",
          "int",
          "time.time"
        ],
        "run_full_test": [
          "cache.smart_search",
          "get_cache_manager",
          "cache.get_cache_stats",
          "app.get",
          "get_file_ops",
          "datetime.now",
          "search_result.get",
          "track_workflow_event",
          "len",
          "ops.write_file",
          "ops.read_file"
        ],
        "startup_event": [
          "track_workflow_event",
          "app.on_event",
          "print"
        ],
        "shutdown_event": [
          "track_workflow_event",
          "app.on_event",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "BotFileOperations",
        "CORSMiddleware",
        "Dict",
        "FastAPI",
        "HTTPException",
        "List",
        "Optional",
        "Path",
        "Query",
        "StructCacheManager",
        "aiohttp",
        "bot_file_operations",
        "datetime",
        "fastapi",
        "fastapi.middleware.cors",
        "get_metrics_tracker",
        "json",
        "pathlib",
        "pydantic",
        "src.llmstruct.metrics_tracker",
        "struct_cache_manager",
        "time",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event",
        "typing",
        "uvicorn"
      ],
      "hash": null,
      "artifact_id": "88784c68-ae1a-485a-94cc-8d8b35ece847"
    },
    {
      "module_id": ".ARCHIVE.bot_file_operations",
      "path": ".ARCHIVE/bot_file_operations.py",
      "category": "core",
      "module_doc": "\ud83d\udcc1 Bot File Operations Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0434\u043b\u044f Telegram \u0431\u043e\u0442\u0430 \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 [code]",
      "functions": [
        {
          "name": "test_file_operations",
          "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439",
          "line_range": [
            354,
            384
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Args:\n    work_dir: \u0420\u0430\u0431\u043e\u0447\u0430\u044f \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f (\u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c /tmp)\n    simulate_root: \u0421\u0438\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043a\u0430\u043a \u0432 \u043a\u043e\u0440\u043d\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            19,
            37
          ],
          "parameters": [
            "self",
            "work_dir",
            "simulate_root"
          ],
          "decorators": []
        },
        {
          "name": "setup_simulated_environment",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0438\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 /tmp",
          "line_range": [
            39,
            57
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "list_files",
          "docstring": "\u0421\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
          "line_range": [
            59,
            83
          ],
          "parameters": [
            "self",
            "path"
          ],
          "decorators": []
        },
        {
          "name": "read_file",
          "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u0444\u0430\u0439\u043b",
          "line_range": [
            85,
            114
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_file",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0444\u0430\u0439\u043b",
          "line_range": [
            116,
            143
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "edit_file",
          "docstring": "\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b (\u0437\u0430\u043c\u0435\u043d\u0430, \u0432\u0441\u0442\u0430\u0432\u043a\u0430, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a)",
          "line_range": [
            145,
            235
          ],
          "parameters": [
            "self",
            "file_path",
            "operation"
          ],
          "decorators": []
        },
        {
          "name": "create_directory",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e",
          "line_range": [
            237,
            250
          ],
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "delete_file",
          "docstring": "\u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0444\u0430\u0439\u043b",
          "line_range": [
            252,
            270
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "copy_file",
          "docstring": "\u041a\u043e\u043f\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b",
          "line_range": [
            272,
            294
          ],
          "parameters": [
            "self",
            "src_path",
            "dst_path"
          ],
          "decorators": []
        },
        {
          "name": "search_struct",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432 struct.json \u0447\u0435\u0440\u0435\u0437 \u043a\u0435\u0448",
          "line_range": [
            296,
            309
          ],
          "parameters": [
            "self",
            "query",
            "search_type"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_stats",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 struct.json \u043a\u0435\u0448\u0430",
          "line_range": [
            311,
            317
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "invalidate_struct_cache",
          "docstring": "\u0418\u043d\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043a\u0435\u0448 struct.json",
          "line_range": [
            319,
            325
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_workspace_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430",
          "line_range": [
            327,
            352
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BotFileOperations",
          "docstring": "\u0424\u0430\u0439\u043b\u043e\u0432\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Telegram \u0431\u043e\u0442\u0430",
          "line_range": [
            16,
            352
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Args:\n    work_dir: \u0420\u0430\u0431\u043e\u0447\u0430\u044f \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f (\u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c /tmp)\n    simulate_root: \u0421\u0438\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043a\u0430\u043a \u0432 \u043a\u043e\u0440\u043d\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                19,
                37
              ],
              "parameters": [
                "self",
                "work_dir",
                "simulate_root"
              ]
            },
            {
              "name": "setup_simulated_environment",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0438\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 /tmp",
              "line_range": [
                39,
                57
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "list_files",
              "docstring": "\u0421\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
              "line_range": [
                59,
                83
              ],
              "parameters": [
                "self",
                "path"
              ]
            },
            {
              "name": "read_file",
              "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u0444\u0430\u0439\u043b",
              "line_range": [
                85,
                114
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "write_file",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0444\u0430\u0439\u043b",
              "line_range": [
                116,
                143
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "mode"
              ]
            },
            {
              "name": "edit_file",
              "docstring": "\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b (\u0437\u0430\u043c\u0435\u043d\u0430, \u0432\u0441\u0442\u0430\u0432\u043a\u0430, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a)",
              "line_range": [
                145,
                235
              ],
              "parameters": [
                "self",
                "file_path",
                "operation"
              ]
            },
            {
              "name": "create_directory",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e",
              "line_range": [
                237,
                250
              ],
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "delete_file",
              "docstring": "\u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0444\u0430\u0439\u043b",
              "line_range": [
                252,
                270
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "copy_file",
              "docstring": "\u041a\u043e\u043f\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b",
              "line_range": [
                272,
                294
              ],
              "parameters": [
                "self",
                "src_path",
                "dst_path"
              ]
            },
            {
              "name": "search_struct",
              "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432 struct.json \u0447\u0435\u0440\u0435\u0437 \u043a\u0435\u0448",
              "line_range": [
                296,
                309
              ],
              "parameters": [
                "self",
                "query",
                "search_type"
              ]
            },
            {
              "name": "get_struct_stats",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 struct.json \u043a\u0435\u0448\u0430",
              "line_range": [
                311,
                317
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "invalidate_struct_cache",
              "docstring": "\u0418\u043d\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043a\u0435\u0448 struct.json",
              "line_range": [
                319,
                325
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_workspace_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430",
              "line_range": [
                327,
                352
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "StructCacheManager",
          "print",
          "self.setup_simulated_environment"
        ],
        "setup_simulated_environment": [
          "print"
        ],
        "list_files": [
          "target_path.iterdir",
          "target_path.exists",
          "item.is_dir",
          "items.append",
          "sorted",
          "item.stat",
          "str",
          "datetime.fromtimestamp",
          "item.is_file"
        ],
        "read_file": [
          "content.splitlines",
          "target_file.exists",
          "target_file.stat",
          "len",
          "target_file.read_text",
          "target_file.is_file"
        ],
        "write_file": [
          "target_file.write_text",
          "content.splitlines",
          "target_file.stat",
          "len",
          "f.write",
          "open"
        ],
        "edit_file": [
          "target_file.write_text",
          "operation.get",
          "content.replace",
          "lines.append",
          "lines.insert",
          "target_file.exists",
          "content.count",
          "new_content.splitlines",
          "len",
          "target_file.read_text"
        ],
        "create_directory": [
          "target_dir.mkdir"
        ],
        "delete_file": [
          "target_path.exists",
          "shutil.rmtree",
          "target_path.unlink",
          "target_path.is_dir",
          "target_path.is_file"
        ],
        "copy_file": [
          "dst_file.stat",
          "shutil.copy2",
          "src_file.exists"
        ],
        "search_struct": [
          "len",
          "sum"
        ],
        "get_struct_stats": [],
        "invalidate_struct_cache": [],
        "get_workspace_status": [
          "str",
          "item.is_dir",
          "item.is_file",
          "item.stat"
        ],
        "test_file_operations": [
          "BotFileOperations",
          "print",
          "result.get",
          "ops.edit_file",
          "ops.search_struct",
          "ops.get_workspace_status",
          "ops.write_file",
          "ops.read_file"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "StructCacheManager",
        "datetime",
        "json",
        "os",
        "pathlib",
        "shutil",
        "struct_cache_manager",
        "typing"
      ],
      "hash": null,
      "artifact_id": "972da631-5f74-4f1e-b1ec-f55e0d6feeae"
    },
    {
      "module_id": ".ARCHIVE.test_file_operations",
      "path": ".ARCHIVE/test_file_operations.py",
      "category": "test",
      "module_doc": "\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
      "functions": [
        {
          "name": "test_file_system_integrity",
          "docstring": "\u0422\u0435\u0441\u0442 \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u0438 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            15,
            38
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_json_cache_operations",
          "docstring": "\u0422\u0435\u0441\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441 JSON \u043a\u0435\u0448\u0435\u043c",
          "line_range": [
            40,
            86
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_chat_session_persistence",
          "docstring": "\u0422\u0435\u0441\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0439 \u0447\u0430\u0442\u0430",
          "line_range": [
            88,
            156
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_project_structure_cache",
          "docstring": "\u0422\u0435\u0441\u0442 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            158,
            218
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_api_file_interactions",
          "docstring": "\u0422\u0435\u0441\u0442 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f API \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438",
          "line_range": [
            220,
            281
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_logging_system",
          "docstring": "\u0422\u0435\u0441\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
          "line_range": [
            283,
            303
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_dependency_integrity",
          "docstring": "\u0422\u0435\u0441\u0442 \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439",
          "line_range": [
            305,
            327
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_all_tests",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432",
          "line_range": [
            329,
            381
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_file_system_integrity": [
          "print",
          "missing_paths.append"
        ],
        "test_json_cache_operations": [
          "os.remove",
          "json.load",
          "print",
          "json.dump",
          "time.time",
          "open"
        ],
        "test_chat_session_persistence": [
          "Path",
          "sessions_dir.glob",
          "json.load",
          "print",
          "json.dump",
          "len",
          "test_session_file.unlink",
          "time.time",
          "list",
          "sessions_dir.mkdir",
          "open"
        ],
        "test_project_structure_cache": [
          "Path",
          "json.load",
          "print",
          "struct_file.exists",
          "struct_data.get",
          "stats.get",
          "metadata.get",
          "len",
          "open"
        ],
        "test_api_file_interactions": [
          "client.post",
          "print",
          "client.get",
          "httpx.AsyncClient",
          "response.json",
          "len",
          "health_data.get"
        ],
        "test_logging_system": [
          "f.readlines",
          "print",
          "open"
        ],
        "test_dependency_integrity": [
          "print"
        ],
        "run_all_tests": [
          "print",
          "test_func",
          "len",
          "asyncio.iscoroutinefunction",
          "results.items"
        ]
      },
      "dependencies": [
        "LLMService",
        "Path",
        "SmartContextOrchestrator",
        "app",
        "asyncio",
        "httpx",
        "json",
        "llmstruct",
        "llmstruct.api.app",
        "llmstruct.api.services.llm_service",
        "llmstruct.context_orchestrator",
        "os",
        "pathlib",
        "shutil",
        "tempfile",
        "time"
      ],
      "hash": null,
      "artifact_id": "de70d42d-4f52-4291-a8b0-57a35328fc4a"
    },
    {
      "module_id": ".ARCHIVE.chat_bot_working",
      "path": ".ARCHIVE/chat_bot_working.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 ENHANCED Telegram Bot \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432\u0430\u0448 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f:\n- \u041a\u0435\u0448\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 WebSocket\n- \u041f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 API endpoints\n- \u041c\u0435\u0442\u0440\u0438\u043a \u0447\u0435\u0440\u0435\u0437 API\n\n\u0411\u043e\u043b\u044c\u0448\u0435 \u043d\u0438\u043a\u0430\u043a\u0438\u0445 CLI \u0432\u044b\u0437\u043e\u0432\u043e\u0432 - \u0432\u0441\u0435 \u0447\u0435\u0440\u0435\u0437 API!",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            342,
            378
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            35,
            43
          ],
          "parameters": [
            "self",
            "telegram_token",
            "fastapi_base_url"
          ],
          "decorators": []
        },
        {
          "name": "setup_session",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            45,
            48
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "close_session",
          "docstring": "\u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            50,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "health_check_api",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            55,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_user_message_via_api",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            71,
            102
          ],
          "parameters": [
            "self",
            "user_id",
            "username",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_user_history_via_api",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            104,
            122
          ],
          "parameters": [
            "self",
            "user_id",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama_via_api",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 FastAPI endpoint",
          "line_range": [
            124,
            150
          ],
          "parameters": [
            "self",
            "message",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_system_metrics_via_api",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            152,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            164,
            172
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            174,
            198
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "memory_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory - \u0442\u0435\u0441\u0442 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            200,
            207
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "history_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /history - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e",
          "line_range": [
            209,
            228
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "health_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /health - \u0441\u0442\u0430\u0442\u0443\u0441 FastAPI",
          "line_range": [
            230,
            237
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "metrics_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics - \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            239,
            269
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "ollama_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u0447\u0430\u0442 \u0441 Ollama",
          "line_range": [
            271,
            289
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            291,
            321
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
          "line_range": [
            323,
            340
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "FastAPIIntegratedBot",
          "docstring": "Telegram \u0431\u043e\u0442 \u0441 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
          "line_range": [
            32,
            340
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                35,
                43
              ],
              "parameters": [
                "self",
                "telegram_token",
                "fastapi_base_url"
              ]
            },
            {
              "name": "setup_session",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                45,
                48
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "close_session",
              "docstring": "\u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                50,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "health_check_api",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
              "line_range": [
                55,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_user_message_via_api",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                71,
                102
              ],
              "parameters": [
                "self",
                "user_id",
                "username",
                "message"
              ]
            },
            {
              "name": "get_user_history_via_api",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                104,
                122
              ],
              "parameters": [
                "self",
                "user_id",
                "limit"
              ]
            },
            {
              "name": "chat_with_ollama_via_api",
              "docstring": "\u0427\u0430\u0442 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 FastAPI endpoint",
              "line_range": [
                124,
                150
              ],
              "parameters": [
                "self",
                "message",
                "context"
              ]
            },
            {
              "name": "get_system_metrics_via_api",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                152,
                162
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                164,
                172
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                174,
                198
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "memory_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory - \u0442\u0435\u0441\u0442 \u043f\u0430\u043c\u044f\u0442\u0438",
              "line_range": [
                200,
                207
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "history_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /history - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e",
              "line_range": [
                209,
                228
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "health_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /health - \u0441\u0442\u0430\u0442\u0443\u0441 FastAPI",
              "line_range": [
                230,
                237
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "metrics_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics - \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                239,
                269
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "ollama_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u0447\u0430\u0442 \u0441 Ollama",
              "line_range": [
                271,
                289
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                291,
                321
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "run",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
              "line_range": [
                323,
                340
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.setup_handlers",
          "Application.builder"
        ],
        "setup_session": [
          "aiohttp.ClientSession"
        ],
        "close_session": [],
        "health_check_api": [
          "logger.info",
          "data.get",
          "self.setup_session",
          "logger.error",
          "resp.json"
        ],
        "save_user_message_via_api": [
          "logger.info",
          "datetime.now",
          "self.setup_session",
          "logger.error",
          "logger.warning"
        ],
        "get_user_history_via_api": [
          "logger.info",
          "data.get",
          "self.setup_session",
          "logger.error",
          "resp.json",
          "len",
          "logger.warning"
        ],
        "chat_with_ollama_via_api": [
          "logger.info",
          "data.get",
          "self.setup_session",
          "str",
          "logger.error",
          "resp.json"
        ],
        "get_system_metrics_via_api": [
          "self.setup_session",
          "str",
          "resp.json"
        ],
        "setup_handlers": [
          "MessageHandler",
          "CommandHandler"
        ],
        "start_command": [
          "self.save_user_message_via_api"
        ],
        "memory_command": [
          "self.save_user_message_via_api"
        ],
        "history_command": [
          "int",
          "len",
          "msg.get",
          "self.get_user_history_via_api"
        ],
        "health_command": [
          "self.health_check_api"
        ],
        "metrics_command": [
          "struct_json.get",
          "metrics.get",
          "features.get",
          "self.get_system_metrics_via_api",
          "system.get"
        ],
        "ollama_command": [
          "self.save_user_message_via_api",
          "self.chat_with_ollama_via_api",
          "status_msg.edit_text"
        ],
        "handle_message": [
          "self.chat_with_ollama_via_api",
          "self.get_user_history_via_api",
          "msg.get",
          "message_text.lower",
          "message_text.replace",
          "message_text.startswith",
          "enumerate",
          "self.save_user_message_via_api"
        ],
        "run": [
          "logger.info",
          "self.health_check_api",
          "self.close_session",
          "logger.error",
          "logger.warning"
        ],
        "main": [
          "loop.run_until_complete",
          "exit",
          "print",
          "asyncio.set_event_loop",
          "FastAPIIntegratedBot",
          "asyncio.get_event_loop",
          "loop.close",
          "os.getenv",
          "bot.run",
          "traceback.print_exc",
          "asyncio.new_event_loop"
        ]
      },
      "dependencies": [
        "Application",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "json",
        "logging",
        "os",
        "telegram",
        "telegram.ext",
        "timedelta",
        "traceback",
        "websockets"
      ],
      "hash": null,
      "artifact_id": "461d8eb1-7261-49af-a76b-bdebd939e3de"
    },
    {
      "module_id": ".ARCHIVE.chat_bot",
      "path": ".ARCHIVE/chat_bot.py",
      "category": "core",
      "module_doc": "LLMStruct Chat Bot - \u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 Cursor + Ollama",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            756,
            767
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            41,
            59
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "load_ollama_config",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e Ollama \u0438\u0437 llmstruct.toml",
          "line_range": [
            61,
            91
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "query_ollama",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043a Ollama \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442",
          "line_range": [
            93,
            138
          ],
          "parameters": [
            "self",
            "message",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "log_user_message",
          "docstring": "\u041b\u043e\u0433\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439 \u0444\u0430\u0439\u043b \u0434\u043b\u044f Cursor",
          "line_range": [
            140,
            158
          ],
          "parameters": [
            "self",
            "user_info",
            "message",
            "message_type",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            160,
            171
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            173,
            220
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cursor_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /cursor - \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0441 Cursor",
          "line_range": [
            222,
            259
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "logs_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /logs - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
          "line_range": [
            261,
            300
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "help_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
          "line_range": [
            302,
            341
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
          "line_range": [
            343,
            424
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "metrics_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics",
          "line_range": [
            426,
            486
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "dev_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /dev - \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
          "line_range": [
            488,
            533
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "ollama_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0432\u044f\u0437\u0438 \u0441 Ollama",
          "line_range": [
            535,
            608
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "model_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /model - \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 Ollama",
          "line_range": [
            610,
            625
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441 Ollama + \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435",
          "line_range": [
            627,
            714
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
          "line_range": [
            716,
            754
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMStructChatBot",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 \u0447\u0430\u0442-\u0431\u043e\u0442 \u0434\u043b\u044f LLMStruct \u0441 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0434\u043b\u044f Cursor + Ollama",
          "line_range": [
            38,
            754
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                41,
                59
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "load_ollama_config",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e Ollama \u0438\u0437 llmstruct.toml",
              "line_range": [
                61,
                91
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "query_ollama",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043a Ollama \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442",
              "line_range": [
                93,
                138
              ],
              "parameters": [
                "self",
                "message",
                "context"
              ]
            },
            {
              "name": "log_user_message",
              "docstring": "\u041b\u043e\u0433\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439 \u0444\u0430\u0439\u043b \u0434\u043b\u044f Cursor",
              "line_range": [
                140,
                158
              ],
              "parameters": [
                "self",
                "user_info",
                "message",
                "message_type",
                "chat_id"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                160,
                171
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                173,
                220
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cursor_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /cursor - \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0441 Cursor",
              "line_range": [
                222,
                259
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "logs_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /logs - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
              "line_range": [
                261,
                300
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "help_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
              "line_range": [
                302,
                341
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
              "line_range": [
                343,
                424
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "metrics_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics",
              "line_range": [
                426,
                486
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "dev_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /dev - \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
              "line_range": [
                488,
                533
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "ollama_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0432\u044f\u0437\u0438 \u0441 Ollama",
              "line_range": [
                535,
                608
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "model_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /model - \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 Ollama",
              "line_range": [
                610,
                625
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441 Ollama + \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435",
              "line_range": [
                627,
                714
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
              "line_range": [
                716,
                754
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "Application.builder",
          "self.setup_handlers",
          "track_workflow_event",
          "self.load_ollama_config"
        ],
        "load_ollama_config": [
          "Path",
          "config.get",
          "logger.info",
          "logger.error",
          "logger.warning",
          "toml.load",
          "config_path.exists"
        ],
        "query_ollama": [
          "message.split",
          "aiohttp.ClientSession",
          "ollama_response.split",
          "response.text",
          "error_msg.lower",
          "result.get",
          "session.post",
          "get_metrics_tracker",
          "response.json",
          "str",
          "tracker.track_token_usage",
          "logger.error",
          "len"
        ],
        "log_user_message": [
          "message.lower",
          "user_info.get",
          "datetime.now",
          "any",
          "f.write",
          "open"
        ],
        "setup_handlers": [
          "MessageHandler",
          "CommandHandler"
        ],
        "start_command": [
          "chr",
          "enumerate",
          "track_workflow_event",
          "len",
          "self.log_user_message"
        ],
        "cursor_command": [
          "track_workflow_event",
          "self.log_user_message"
        ],
        "logs_command": [
          "message_line.replace",
          "next",
          "content.split",
          "entry.strip",
          "line.startswith",
          "track_workflow_event",
          "len",
          "f.read",
          "open",
          "self.log_user_message"
        ],
        "help_command": [
          "track_workflow_event",
          "self.log_user_message"
        ],
        "status_command": [
          "Path",
          "struct_file.stat",
          "f.readlines",
          "tracker.get_session_summary",
          "requests.get",
          "struct_file.exists",
          "get_metrics_tracker",
          "datetime.now",
          "str",
          "track_task_complete",
          "track_task_start",
          "len",
          "track_workflow_event",
          "int",
          "time.time",
          "open",
          "self.log_user_message"
        ],
        "metrics_command": [
          "track_workflow_event",
          "get_metrics_tracker",
          "tracker.get_session_summary",
          "self.log_user_message"
        ],
        "dev_command": [
          "track_workflow_event",
          "self.log_user_message"
        ],
        "ollama_command": [
          "aiohttp.ClientSession",
          "data.get",
          "m.get",
          "response.json",
          "str",
          "self.query_ollama",
          "len",
          "track_workflow_event",
          "session.get",
          "test_response.startswith",
          "self.log_user_message"
        ],
        "model_command": [
          "track_workflow_event",
          "enumerate",
          "self.log_user_message"
        ],
        "handle_message": [
          "datetime.now",
          "self.query_ollama",
          "track_task_start",
          "message_text.split",
          "int",
          "self.log_user_message",
          "message_text.isdigit",
          "track_token_usage",
          "len",
          "time.time",
          "Path",
          "str",
          "track_workflow_event",
          "open",
          "response.split",
          "message_text.lower",
          "track_task_complete",
          "logger.error",
          "any",
          "f.write"
        ],
        "run_sync": [
          "BotCommand",
          "loop.run_until_complete",
          "logger.info",
          "get_metrics_tracker",
          "asyncio.set_event_loop",
          "tracker.save_session",
          "str",
          "logger.error",
          "track_workflow_event",
          "asyncio.new_event_loop"
        ],
        "main": [
          "os.getenv",
          "bot.run_sync",
          "LLMStructChatBot",
          "print"
        ]
      },
      "dependencies": [
        "Application",
        "BotCommand",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "Optional",
        "Path",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "get_metrics_tracker",
        "json",
        "logging",
        "os",
        "pathlib",
        "requests",
        "src.llmstruct.metrics_tracker",
        "sys",
        "telegram",
        "telegram.ext",
        "time",
        "toml",
        "track_task_complete",
        "track_task_start",
        "track_token_usage",
        "track_workflow_event",
        "typing"
      ],
      "hash": null,
      "artifact_id": "7b50ccbf-717a-46d6-b959-f6b0e7f82de1"
    },
    {
      "module_id": ".ARCHIVE.test_api_simple",
      "path": ".ARCHIVE/test_api_simple.py",
      "category": "test",
      "module_doc": "\u0423\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0439 API \u0441\u0435\u0440\u0432\u0435\u0440 LLMStruct \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 development\n\u0411\u0435\u0437 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439, \u0442\u043e\u043b\u044c\u043a\u043e \u0431\u0430\u0437\u043e\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c",
      "functions": [
        {
          "name": "query_ollama",
          "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441 \u043a Ollama",
          "line_range": [
            93,
            119
          ],
          "parameters": [
            "message",
            "context",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "health_check",
          "docstring": "Health check endpoint",
          "line_range": [
            123,
            133
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/system/health', response_model=HealthResponse)"
          ]
        },
        {
          "name": "system_status",
          "docstring": "Detailed system status",
          "line_range": [
            137,
            172
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/system/status')"
          ]
        },
        {
          "name": "chat_ollama",
          "docstring": "Chat with Ollama through API",
          "line_range": [
            176,
            204
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/chat/ollama')"
          ]
        },
        {
          "name": "get_ollama_models",
          "docstring": "Get available Ollama models",
          "line_range": [
            208,
            220
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/ollama/models')"
          ]
        },
        {
          "name": "save_memory",
          "docstring": "Save user message to memory",
          "line_range": [
            224,
            239
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/memory/save')"
          ]
        },
        {
          "name": "get_memory_history",
          "docstring": "Get user message history",
          "line_range": [
            242,
            251
          ],
          "parameters": [
            "user_id",
            "limit"
          ],
          "decorators": [
            "app.get('/api/v1/memory/history/{user_id}')"
          ]
        },
        {
          "name": "chat_message",
          "docstring": "Simple chat endpoint with metrics tracking",
          "line_range": [
            255,
            286
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/chat/message', response_model=ChatResponse)"
          ]
        },
        {
          "name": "execute_cli_command",
          "docstring": "Execute CLI command via API",
          "line_range": [
            290,
            344
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/cli/execute')"
          ]
        },
        {
          "name": "get_metrics",
          "docstring": "Get current metrics data",
          "line_range": [
            348,
            363
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/metrics')"
          ]
        },
        {
          "name": "root",
          "docstring": "Root endpoint with basic info",
          "line_range": [
            367,
            375
          ],
          "parameters": [],
          "decorators": [
            "app.get('/')"
          ]
        },
        {
          "name": "startup_event",
          "docstring": "Startup initialization",
          "line_range": [
            379,
            386
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('startup')"
          ]
        },
        {
          "name": "shutdown_event",
          "docstring": "Cleanup on shutdown",
          "line_range": [
            390,
            398
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('shutdown')"
          ]
        }
      ],
      "classes": [
        {
          "name": "ChatMessage",
          "docstring": "",
          "line_range": [
            51,
            54
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "OllamaMessage",
          "docstring": "",
          "line_range": [
            56,
            60
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "MemoryMessage",
          "docstring": "",
          "line_range": [
            62,
            65
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "CommandRequest",
          "docstring": "",
          "line_range": [
            67,
            69
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HealthResponse",
          "docstring": "",
          "line_range": [
            72,
            76
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ChatResponse",
          "docstring": "",
          "line_range": [
            78,
            82
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        }
      ],
      "callgraph": {
        "query_ollama": [
          "aiohttp.ClientSession",
          "result.get",
          "session.post",
          "response.json",
          "str"
        ],
        "health_check": [
          "track_workflow_event",
          "time.strftime",
          "HealthResponse",
          "app.get"
        ],
        "system_status": [
          "aiohttp.ClientSession",
          "HTTPException",
          "app.get",
          "str",
          "track_task_complete",
          "track_task_start",
          "time.strftime",
          "session.get",
          "track_workflow_event",
          "int",
          "time.time"
        ],
        "chat_ollama": [
          "HTTPException",
          "get_metrics_tracker",
          "app.post",
          "response.split",
          "str",
          "track_task_complete",
          "track_task_start",
          "len",
          "tracker.track_token_usage",
          "time.strftime",
          "track_workflow_event",
          "int",
          "time.time",
          "query_ollama"
        ],
        "get_ollama_models": [
          "aiohttp.ClientSession",
          "app.get",
          "data.get",
          "response.json",
          "session.get"
        ],
        "save_memory": [
          "len",
          "app.post"
        ],
        "get_memory_history": [
          "app.get",
          "len",
          "USER_MEMORY.get"
        ],
        "chat_message": [
          "ChatResponse",
          "HTTPException",
          "response_text.split",
          "get_metrics_tracker",
          "app.post",
          "str",
          "track_task_complete",
          "track_task_start",
          "len",
          "tracker.track_token_usage",
          "time.strftime",
          "track_workflow_event",
          "int",
          "time.time"
        ],
        "execute_cli_command": [
          "HTTPException",
          "subprocess.run",
          "app.post",
          "str",
          "track_task_complete",
          "track_task_start",
          "time.strftime",
          "cmd_parts.extend",
          "track_workflow_event",
          "int",
          "time.time"
        ],
        "get_metrics": [
          "tracker.get_session_summary",
          "HTTPException",
          "app.get",
          "get_metrics_tracker",
          "str",
          "tracker.get_analytics_data",
          "track_workflow_event"
        ],
        "root": [
          "app.get"
        ],
        "startup_event": [
          "track_workflow_event",
          "get_metrics_tracker",
          "app.on_event",
          "print"
        ],
        "shutdown_event": [
          "print",
          "get_metrics_tracker",
          "app.on_event",
          "tracker.save_session",
          "track_workflow_event"
        ]
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "CORSMiddleware",
        "Depends",
        "Dict",
        "FastAPI",
        "HTTPException",
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "fastapi",
        "fastapi.middleware.cors",
        "get_metrics_tracker",
        "json",
        "pathlib",
        "pydantic",
        "src.llmstruct.metrics_tracker",
        "subprocess",
        "time",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event",
        "typing",
        "uvicorn"
      ],
      "hash": null,
      "artifact_id": "29dd2d06-42fb-44d3-9242-26a2048be94e"
    },
    {
      "module_id": ".ARCHIVE.fastapi_ollama_server_working",
      "path": ".ARCHIVE/fastapi_ollama_server_working.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f LLMStruct\n- Ollama \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f\n- \u041f\u0430\u043c\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \n- \u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b\n- \u0412\u0441\u0435 \u0432 \u043e\u0434\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b",
      "functions": [
        {
          "name": "load_user_memory",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439",
          "line_range": [
            56,
            64
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "save_user_memory",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439",
          "line_range": [
            66,
            72
          ],
          "parameters": [
            "memory"
          ],
          "decorators": []
        },
        {
          "name": "load_ollama_config",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 Ollama",
          "line_range": [
            74,
            82
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "root",
          "docstring": "\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 API",
          "line_range": [
            114,
            131
          ],
          "parameters": [],
          "decorators": [
            "app.get('/', summary='API Information')"
          ]
        },
        {
          "name": "health_check",
          "docstring": "Health check \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 Ollama",
          "line_range": [
            134,
            155
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/system/health', response_model=HealthResponse)"
          ]
        },
        {
          "name": "system_status",
          "docstring": "\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            158,
            246
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/system/status')"
          ]
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
          "line_range": [
            251,
            319
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/chat/ollama')"
          ]
        },
        {
          "name": "get_ollama_models",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Ollama",
          "line_range": [
            322,
            350
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/ollama/models')"
          ]
        },
        {
          "name": "save_user_message",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            355,
            389
          ],
          "parameters": [
            "message"
          ],
          "decorators": [
            "app.post('/api/v1/memory/save')"
          ]
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            392,
            415
          ],
          "parameters": [
            "user_id",
            "limit"
          ],
          "decorators": [
            "app.get('/api/v1/memory/history/{user_id}')"
          ]
        },
        {
          "name": "memory_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            418,
            450
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/memory/stats')"
          ]
        },
        {
          "name": "clear_user_memory",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            453,
            476
          ],
          "parameters": [
            "user_id"
          ],
          "decorators": [
            "app.delete('/api/v1/memory/clear/{user_id}')"
          ]
        },
        {
          "name": "read_project_file",
          "docstring": "\u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            481,
            566
          ],
          "parameters": [
            "path",
            "lines",
            "start_line"
          ],
          "decorators": [
            "app.get('/api/v1/files/read')"
          ]
        },
        {
          "name": "list_available_files",
          "docstring": "\u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            569,
            600
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/files/list')"
          ]
        },
        {
          "name": "startup_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435",
          "line_range": [
            605,
            612
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('startup')"
          ]
        },
        {
          "name": "shutdown_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435",
          "line_range": [
            615,
            623
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('shutdown')"
          ]
        }
      ],
      "classes": [
        {
          "name": "UserMessage",
          "docstring": "",
          "line_range": [
            85,
            90
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "OllamaRequest",
          "docstring": "",
          "line_range": [
            92,
            97
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ChatMessage",
          "docstring": "",
          "line_range": [
            99,
            102
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HealthResponse",
          "docstring": "",
          "line_range": [
            104,
            109
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        }
      ],
      "callgraph": {
        "load_user_memory": [
          "USER_MEMORY_FILE.exists",
          "json.load",
          "print",
          "open"
        ],
        "save_user_memory": [
          "json.dump",
          "print",
          "open"
        ],
        "load_ollama_config": [
          "toml.load",
          "open"
        ],
        "root": [
          "app.get"
        ],
        "health_check": [
          "aiohttp.ClientSession",
          "load_ollama_config",
          "app.get",
          "aiohttp.ClientTimeout",
          "HealthResponse",
          "time.strftime",
          "track_workflow_event",
          "session.get"
        ],
        "system_status": [
          "HTTPException",
          "struct_file.exists",
          "app.get",
          "USER_MEMORY_FILE.exists",
          "track_task_start",
          "int",
          "aiohttp.ClientSession",
          "aiohttp.ClientTimeout",
          "load_user_memory",
          "len",
          "time.time",
          "Path",
          "struct_file.stat",
          "tracker.get_session_summary",
          "sum",
          "time.ctime",
          "get_metrics_tracker",
          "data.get",
          "str",
          "time.strftime",
          "resp.json",
          "track_workflow_event",
          "load_ollama_config",
          "memory.values",
          "track_task_complete",
          "session.get"
        ],
        "chat_with_ollama": [
          "HTTPException",
          "track_task_start",
          "int",
          "aiohttp.ClientSession",
          "session.post",
          "aiohttp.ClientTimeout",
          "app.post",
          "len",
          "time.time",
          "response_text.split",
          "get_metrics_tracker",
          "resp.text",
          "data.get",
          "str",
          "time.strftime",
          "resp.json",
          "track_workflow_event",
          "load_ollama_config",
          "track_task_complete",
          "tracker.track_token_usage"
        ],
        "get_ollama_models": [
          "aiohttp.ClientSession",
          "load_ollama_config",
          "HTTPException",
          "model.get",
          "app.get",
          "aiohttp.ClientTimeout",
          "models.append",
          "data.get",
          "str",
          "len",
          "resp.json",
          "session.get"
        ],
        "save_user_message": [
          "HTTPException",
          "app.post",
          "load_user_memory",
          "str",
          "time.strftime",
          "track_workflow_event",
          "len",
          "save_user_memory"
        ],
        "get_user_history": [
          "Query",
          "HTTPException",
          "app.get",
          "load_user_memory",
          "str",
          "memory.get",
          "track_workflow_event",
          "len"
        ],
        "memory_stats": [
          "USER_MEMORY_FILE.stat",
          "user_stats.append",
          "HTTPException",
          "sum",
          "memory.values",
          "time.ctime",
          "app.get",
          "last_message.get",
          "load_user_memory",
          "user_stats.sort",
          "str",
          "USER_MEMORY_FILE.exists",
          "memory.items",
          "int",
          "len"
        ],
        "clear_user_memory": [
          "HTTPException",
          "load_user_memory",
          "str",
          "time.strftime",
          "memory.get",
          "track_workflow_event",
          "len",
          "save_user_memory",
          "app.delete"
        ],
        "read_project_file": [
          "HTTPException",
          "app.get",
          "content.split",
          "track_task_start",
          "int",
          "f.read",
          "min",
          "len",
          "time.time",
          "Path",
          "Query",
          "time.ctime",
          "str",
          "time.strftime",
          "track_workflow_event",
          "open",
          "f.readlines",
          "file_path.exists",
          "track_task_complete",
          "file_path.stat"
        ],
        "list_available_files": [
          "file_path.stat",
          "Path",
          "files_info.append",
          "time.ctime",
          "app.get",
          "file_path.exists",
          "time.strftime",
          "track_workflow_event",
          "len"
        ],
        "startup_event": [
          "track_workflow_event",
          "get_metrics_tracker",
          "app.on_event",
          "print"
        ],
        "shutdown_event": [
          "print",
          "get_metrics_tracker",
          "app.on_event",
          "tracker.save_session",
          "track_workflow_event"
        ]
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "CORSMiddleware",
        "Dict",
        "FastAPI",
        "HTTPException",
        "List",
        "Optional",
        "Path",
        "Query",
        "aiohttp",
        "asyncio",
        "datetime",
        "fastapi",
        "fastapi.middleware.cors",
        "get_metrics_tracker",
        "json",
        "pathlib",
        "pydantic",
        "src.llmstruct.metrics_tracker",
        "time",
        "timedelta",
        "toml",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event",
        "typing",
        "uvicorn"
      ],
      "hash": null,
      "artifact_id": "9fec6baa-09e7-4569-8fc0-d56ea1da2b2b"
    },
    {
      "module_id": ".ARCHIVE.test_context_orchestration",
      "path": ".ARCHIVE/test_context_orchestration.py",
      "category": "test",
      "module_doc": "LLM Context Orchestration Testing Suite\n\nComprehensive testing framework for validating context modes, token budgets,\nand LLM integration capabilities across different scenarios.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main function for CLI testing.",
          "line_range": [
            422,
            461
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_relationship_context_focused",
          "docstring": "",
          "line_range": [
            467,
            480
          ],
          "parameters": [],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            44,
            47
          ],
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "setup_logging",
          "docstring": "Set up logging for test execution.",
          "line_range": [
            49,
            59
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_test_config",
          "docstring": "Load context orchestration configuration.",
          "line_range": [
            61,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_context_mode",
          "docstring": "Test a specific context mode with given scenario.",
          "line_range": [
            84,
            132
          ],
          "parameters": [
            "self",
            "mode",
            "scenario"
          ],
          "decorators": []
        },
        {
          "name": "load_context_for_mode",
          "docstring": "Load context data based on mode and token budget.",
          "line_range": [
            134,
            166
          ],
          "parameters": [
            "self",
            "mode",
            "token_budget"
          ],
          "decorators": []
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            168,
            177
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "load_file_content",
          "docstring": "Load text file content.",
          "line_range": [
            179,
            188
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "load_docs_summary",
          "docstring": "Load documentation summary.",
          "line_range": [
            190,
            193
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_src_summary",
          "docstring": "Load source code summary.",
          "line_range": [
            195,
            198
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_current_context",
          "docstring": "Load current working context.",
          "line_range": [
            200,
            202
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_project_summary",
          "docstring": "Load minimal project summary.",
          "line_range": [
            204,
            206
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_current_task",
          "docstring": "Load current task information.",
          "line_range": [
            208,
            210
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_session_context",
          "docstring": "Load AI session context.",
          "line_range": [
            212,
            214
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "estimate_tokens",
          "docstring": "Estimate token count for context data.",
          "line_range": [
            216,
            226
          ],
          "parameters": [
            "self",
            "context_data"
          ],
          "decorators": []
        },
        {
          "name": "trim_context_to_budget",
          "docstring": "Trim context data to fit within token budget.",
          "line_range": [
            228,
            255
          ],
          "parameters": [
            "self",
            "context_data",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "truncate_content",
          "docstring": "Truncate content to fit token budget.",
          "line_range": [
            257,
            271
          ],
          "parameters": [
            "self",
            "content",
            "token_budget"
          ],
          "decorators": []
        },
        {
          "name": "assess_response_quality",
          "docstring": "Assess the quality of context for LLM response.",
          "line_range": [
            273,
            295
          ],
          "parameters": [
            "self",
            "context_data",
            "scenario"
          ],
          "decorators": []
        },
        {
          "name": "run_comprehensive_test_suite",
          "docstring": "Run the complete test suite for all context modes and scenarios.",
          "line_range": [
            297,
            318
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_test_report",
          "docstring": "Generate comprehensive test report.",
          "line_range": [
            320,
            370
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_recommendations",
          "docstring": "Generate recommendations based on test results.",
          "line_range": [
            372,
            405
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_relationship_context_in_focused",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0447\u0442\u043e \u0432 FOCUSED \u0440\u0435\u0436\u0438\u043c\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 relationship_context \u0438 \u043e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u043e\u0434\u0443\u043b\u0438 \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438.",
          "line_range": [
            407,
            419
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextTestResult",
          "docstring": "Test result for context orchestration testing.",
          "line_range": [
            29,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "LLMContextTester",
          "docstring": "Main testing class for LLM context capabilities.",
          "line_range": [
            41,
            419
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                44,
                47
              ],
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "setup_logging",
              "docstring": "Set up logging for test execution.",
              "line_range": [
                49,
                59
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_test_config",
              "docstring": "Load context orchestration configuration.",
              "line_range": [
                61,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_context_mode",
              "docstring": "Test a specific context mode with given scenario.",
              "line_range": [
                84,
                132
              ],
              "parameters": [
                "self",
                "mode",
                "scenario"
              ]
            },
            {
              "name": "load_context_for_mode",
              "docstring": "Load context data based on mode and token budget.",
              "line_range": [
                134,
                166
              ],
              "parameters": [
                "self",
                "mode",
                "token_budget"
              ]
            },
            {
              "name": "load_json_file",
              "docstring": "Load JSON file with error handling.",
              "line_range": [
                168,
                177
              ],
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "load_file_content",
              "docstring": "Load text file content.",
              "line_range": [
                179,
                188
              ],
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "load_docs_summary",
              "docstring": "Load documentation summary.",
              "line_range": [
                190,
                193
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_src_summary",
              "docstring": "Load source code summary.",
              "line_range": [
                195,
                198
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_current_context",
              "docstring": "Load current working context.",
              "line_range": [
                200,
                202
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_project_summary",
              "docstring": "Load minimal project summary.",
              "line_range": [
                204,
                206
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_current_task",
              "docstring": "Load current task information.",
              "line_range": [
                208,
                210
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_session_context",
              "docstring": "Load AI session context.",
              "line_range": [
                212,
                214
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "estimate_tokens",
              "docstring": "Estimate token count for context data.",
              "line_range": [
                216,
                226
              ],
              "parameters": [
                "self",
                "context_data"
              ]
            },
            {
              "name": "trim_context_to_budget",
              "docstring": "Trim context data to fit within token budget.",
              "line_range": [
                228,
                255
              ],
              "parameters": [
                "self",
                "context_data",
                "budget"
              ]
            },
            {
              "name": "truncate_content",
              "docstring": "Truncate content to fit token budget.",
              "line_range": [
                257,
                271
              ],
              "parameters": [
                "self",
                "content",
                "token_budget"
              ]
            },
            {
              "name": "assess_response_quality",
              "docstring": "Assess the quality of context for LLM response.",
              "line_range": [
                273,
                295
              ],
              "parameters": [
                "self",
                "context_data",
                "scenario"
              ]
            },
            {
              "name": "run_comprehensive_test_suite",
              "docstring": "Run the complete test suite for all context modes and scenarios.",
              "line_range": [
                297,
                318
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_test_report",
              "docstring": "Generate comprehensive test report.",
              "line_range": [
                320,
                370
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_recommendations",
              "docstring": "Generate recommendations based on test results.",
              "line_range": [
                372,
                405
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_relationship_context_in_focused",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0447\u0442\u043e \u0432 FOCUSED \u0440\u0435\u0436\u0438\u043c\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 relationship_context \u0438 \u043e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u043e\u0434\u0443\u043b\u0438 \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438.",
              "line_range": [
                407,
                419
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self.setup_logging"
        ],
        "setup_logging": [
          "logging.basicConfig",
          "logging.FileHandler",
          "logging.StreamHandler",
          "logging.getLogger"
        ],
        "load_test_config": [
          "json.load",
          "open"
        ],
        "test_context_mode": [
          "config.get",
          "list",
          "isinstance",
          "self.load_test_config",
          "context_data.keys",
          "str",
          "self.load_context_for_mode",
          "self.assess_response_quality",
          "self.estimate_tokens",
          "ContextTestResult",
          "time.time",
          "mode_config.get"
        ],
        "load_context_for_mode": [
          "self.load_docs_summary",
          "self.load_current_task",
          "self.trim_context_to_budget",
          "self.load_json_file",
          "self.load_project_summary",
          "self.load_current_context",
          "self.load_src_summary",
          "self.load_file_content",
          "self.load_session_context"
        ],
        "load_json_file": [
          "Path",
          "json.load",
          "open",
          "path.exists"
        ],
        "load_file_content": [
          "Path",
          "f.read",
          "open",
          "path.exists"
        ],
        "load_docs_summary": [],
        "load_src_summary": [],
        "load_current_context": [],
        "load_project_summary": [],
        "load_current_task": [],
        "load_session_context": [
          "self.load_json_file"
        ],
        "estimate_tokens": [
          "isinstance",
          "len",
          "str",
          "json.dumps"
        ],
        "trim_context_to_budget": [
          "self.truncate_content",
          "self.estimate_tokens"
        ],
        "truncate_content": [
          "isinstance",
          "len"
        ],
        "assess_response_quality": [
          "len",
          "min"
        ],
        "run_comprehensive_test_suite": [
          "self.test_context_mode",
          "self.generate_test_report"
        ],
        "generate_test_report": [
          "Path",
          "sum",
          "self.generate_recommendations",
          "asdict",
          "json.dump",
          "mode_results.items",
          "len",
          "open"
        ],
        "generate_recommendations": [
          "recommendations.append",
          "mode_success.items",
          "len",
          "sum"
        ],
        "test_relationship_context_in_focused": [
          "isinstance",
          "self.load_context_for_mode",
          "len",
          "print"
        ],
        "main": [
          "argparse.ArgumentParser",
          "LLMContextTester",
          "print",
          "tester.test_context_mode",
          "parser.parse_args",
          "tester.run_comprehensive_test_suite",
          "parser.add_argument"
        ],
        "test_relationship_context_focused": [
          "SmartContextOrchestrator",
          "print",
          "isinstance",
          "orchestrator.get_context_for_scenario",
          "len",
          "os.getcwd"
        ]
      },
      "dependencies": [
        "Any",
        "CLICommands",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "argparse",
        "asdict",
        "asyncio",
        "dataclass",
        "dataclasses",
        "json",
        "logging",
        "os",
        "pathlib",
        "pytest",
        "src.llmstruct.cli_commands",
        "src.llmstruct.context_orchestrator",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "74073da2-a277-408d-946d-3a138355834a"
    },
    {
      "module_id": ".ARCHIVE.test_cli",
      "path": ".ARCHIVE/test_cli.py",
      "category": "test",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "f84bebfe-c21d-4e1c-b091-b76d32b92759"
    },
    {
      "module_id": ".ARCHIVE.modules.query.handlers",
      "path": ".ARCHIVE/modules/query/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            8,
            52
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "query": [
          "Path",
          "hasattr",
          "client.query_with_context",
          "client.query",
          "create_context_orchestrator",
          "logging.error",
          "orchestrator.get_context_for_scenario",
          "json.dump",
          "JSONCache",
          "cache.close",
          "LLMClient",
          "logging.warning",
          "logging.info"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "context_orchestrator",
        "create_context_orchestrator",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "8d453478-c14d-4208-be65-814411abde52"
    },
    {
      "module_id": ".ARCHIVE.modules.query.__init__",
      "path": ".ARCHIVE/modules/query/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "handlers",
        "query"
      ],
      "hash": null,
      "artifact_id": "90dc30f1-9ba7-4271-880f-7135a6fa38e0"
    },
    {
      "module_id": ".ARCHIVE.modules.bot.handlers",
      "path": ".ARCHIVE/modules/bot/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "cmd_bot_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430\u043c\u0438",
          "line_range": [
            6,
            83
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "cmd_bot_management": [
          "Path",
          "subprocess.Popen",
          "print",
          "active_bots.append",
          "pid_file.exists",
          "str",
          "os.getenv",
          "process.terminate",
          "pid_file.unlink",
          "f.read",
          "psutil.Process",
          "process.is_running",
          "process.wait",
          "int",
          "f.write",
          "bot_scripts.get",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "os",
        "pathlib",
        "psutil",
        "subprocess"
      ],
      "hash": null,
      "artifact_id": "353e6bbb-57d2-4e1f-8a74-fac92f89a04e"
    },
    {
      "module_id": ".ARCHIVE.modules.bot.__init__",
      "path": ".ARCHIVE/modules/bot/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "cmd_bot_management",
        "handlers"
      ],
      "hash": null,
      "artifact_id": "76ddd521-a8a0-4f10-a858-7ee480bf6b09"
    },
    {
      "module_id": ".ARCHIVE.modules.metrics.handlers",
      "path": ".ARCHIVE/modules/metrics/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "metrics_status",
          "docstring": "",
          "line_range": [
            4,
            22
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_summary",
          "docstring": "",
          "line_range": [
            24,
            67
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_analytics",
          "docstring": "",
          "line_range": [
            69,
            102
          ],
          "parameters": [
            "output_file",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "metrics_report",
          "docstring": "",
          "line_range": [
            104,
            130
          ],
          "parameters": [
            "sessions",
            "output_file"
          ],
          "decorators": []
        },
        {
          "name": "metrics_track",
          "docstring": "",
          "line_range": [
            132,
            140
          ],
          "parameters": [
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "metrics_tokens",
          "docstring": "",
          "line_range": [
            142,
            179
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "cmd_metrics",
          "docstring": "",
          "line_range": [
            181,
            198
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "metrics_status": [
          "get_metrics_tracker",
          "tracker.get_session_summary",
          "print"
        ],
        "metrics_summary": [
          "get_metrics_tracker",
          "max",
          "tracker.get_session_summary",
          "print"
        ],
        "metrics_analytics": [
          "writer.writerow",
          "csv.writer",
          "tracker.get_session_summary",
          "print",
          "get_metrics_tracker",
          "json.dump",
          "tracker.get_analytics_data",
          "time.strftime",
          "enumerate",
          "json.dumps",
          "open"
        ],
        "metrics_report": [
          "print",
          "sum",
          "get_metrics_tracker",
          "min",
          "tracker.get_analytics_data",
          "analytics.get",
          "time.strftime",
          "len",
          "f.write",
          "open"
        ],
        "metrics_track": [
          "track_workflow_event",
          "print"
        ],
        "metrics_tokens": [
          "print",
          "get_metrics_tracker",
          "get_token_summary",
          "interaction.get",
          "enumerate",
          "summary.get"
        ],
        "cmd_metrics": [
          "metrics_status",
          "metrics_summary",
          "print",
          "metrics_track",
          "metrics_report",
          "metrics_tokens",
          "metrics_analytics"
        ]
      },
      "dependencies": [
        "csv",
        "get_metrics_tracker",
        "get_token_summary",
        "json",
        "metrics_tracker",
        "time",
        "track_workflow_event"
      ],
      "hash": null,
      "artifact_id": "383a2c91-4bdc-435c-a3be-08f6a734d715"
    },
    {
      "module_id": ".ARCHIVE.modules.metrics.__init__",
      "path": ".ARCHIVE/modules/metrics/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "cmd_metrics",
        "handlers"
      ],
      "hash": null,
      "artifact_id": "ca0dd6bd-155e-45e6-b97f-b45d0154a5df"
    },
    {
      "module_id": ".ARCHIVE.modules.analyze_duplicates.handlers",
      "path": ".ARCHIVE/modules/analyze_duplicates/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": [
            4,
            84
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "analyze_duplicates": [
          "print",
          "f.get",
          "logging.error",
          "getattr",
          "json.dump",
          "analysis.get",
          "orchestrator.analyze_codebase_for_duplicates",
          "open",
          "json.dumps",
          "len",
          "func.get",
          "WorkflowOrchestrator"
        ]
      },
      "dependencies": [
        "WorkflowOrchestrator",
        "json",
        "logging",
        "workflow_orchestrator"
      ],
      "hash": null,
      "artifact_id": "5839c53c-9ab7-40b8-956b-6e8d887ea93f"
    },
    {
      "module_id": ".ARCHIVE.modules.analyze_duplicates.__init__",
      "path": ".ARCHIVE/modules/analyze_duplicates/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "analyze_duplicates",
        "handlers"
      ],
      "hash": null,
      "artifact_id": "e9bade85-f410-4c75-8b62-3adea7ccff89"
    },
    {
      "module_id": ".ARCHIVE.modules.parse.handlers",
      "path": ".ARCHIVE/modules/parse/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            8,
            38
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse": [
          "generate_json_with_output_file",
          "logging.error",
          "JSONCache",
          "cache.close",
          "load_gitignore",
          "logging.info",
          "attach_to_llm_request"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "attach_to_llm_request",
        "cli",
        "generate_json_with_output_file",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "04431f99-b6dd-4d1a-957f-eafb4b00e29d"
    },
    {
      "module_id": ".ARCHIVE.modules.parse.__init__",
      "path": ".ARCHIVE/modules/parse/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "handlers",
        "parse"
      ],
      "hash": null,
      "artifact_id": "eacdac14-b5fd-4d10-b7e5-e089b1f446b8"
    },
    {
      "module_id": ".ARCHIVE.modules.audit.handlers",
      "path": ".ARCHIVE/modules/audit/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": [
            4,
            17
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "audit": [
          "Path",
          "hasattr",
          "print",
          "file_path.exists",
          "analyze_duplicates"
        ]
      },
      "dependencies": [
        "Path",
        "analyze_duplicates",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "5ea46d12-8416-4e1c-a0a0-0e6ac95fc3a4"
    },
    {
      "module_id": ".ARCHIVE.modules.audit.__init__",
      "path": ".ARCHIVE/modules/audit/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "audit",
        "handlers"
      ],
      "hash": null,
      "artifact_id": "97652813-188f-49ad-9910-0708e22a37d5"
    },
    {
      "module_id": ".ARCHIVE.modules.review.handlers",
      "path": ".ARCHIVE/modules/review/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            3,
            7
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "review": [
          "print",
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "66fbc957-d081-46de-98bd-6b1c76eccadb"
    },
    {
      "module_id": ".ARCHIVE.modules.review.__init__",
      "path": ".ARCHIVE/modules/review/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "handlers",
        "review"
      ],
      "hash": null,
      "artifact_id": "c83139c0-2679-43ba-a58a-0ab5056d6006"
    },
    {
      "module_id": ".ARCHIVE.modules.context.handlers",
      "path": ".ARCHIVE/modules/context/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            3,
            7
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "context": [
          "print",
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "0319101c-ddee-494e-9d34-138972f094fc"
    },
    {
      "module_id": ".ARCHIVE.modules.context.__init__",
      "path": ".ARCHIVE/modules/context/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "context",
        "handlers"
      ],
      "hash": null,
      "artifact_id": "6ff11225-ed80-4b87-8d2f-686d1fa0ef98"
    },
    {
      "module_id": ".ARCHIVE.modules.copilot.handlers",
      "path": ".ARCHIVE/modules/copilot/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            5,
            95
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "copilot": [
          "hasattr",
          "manager.unload_context_layer",
          "layers.split",
          "manager.load_context_layer",
          "manager.refresh_all_contexts",
          "manager.export_context",
          "enumerate",
          "manager.get_context_status",
          "logging.info",
          "manager.close",
          "shutil.copy",
          "template_path.exists",
          "logging.error",
          "Path",
          "getattr",
          "smart_suggest",
          "manager.validate_change",
          "config_path.exists",
          "open",
          "initialize_copilot",
          "print",
          "f.write"
        ]
      },
      "dependencies": [
        "Path",
        "copilot",
        "initialize_copilot",
        "logging",
        "pathlib",
        "shutil",
        "smart_suggest"
      ],
      "hash": null,
      "artifact_id": "f52ab16d-2170-4150-9901-2e050c78dd89"
    },
    {
      "module_id": ".ARCHIVE.modules.copilot.__init__",
      "path": ".ARCHIVE/modules/copilot/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "copilot",
        "handlers"
      ],
      "hash": null,
      "artifact_id": "3523c5cd-0f72-43a9-97de-644846bfe23b"
    },
    {
      "module_id": ".ARCHIVE.modules.api.handlers",
      "path": ".ARCHIVE/modules/api/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "cmd_api_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 API \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c",
          "line_range": [
            7,
            69
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "cmd_api_management": [
          "Path",
          "subprocess.Popen",
          "print",
          "requests.get",
          "data.get",
          "pid_file.exists",
          "str",
          "response.json",
          "process.terminate",
          "pid_file.unlink",
          "f.read",
          "psutil.Process",
          "venv_path.exists",
          "requests.post",
          "process.wait",
          "int",
          "f.write",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "pathlib",
        "psutil",
        "requests",
        "signal",
        "subprocess"
      ],
      "hash": null,
      "artifact_id": "78bb03b2-7e6d-4470-915d-1c2426267d86"
    },
    {
      "module_id": ".ARCHIVE.modules.api.__init__",
      "path": ".ARCHIVE/modules/api/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "cmd_api_management",
        "handlers"
      ],
      "hash": null,
      "artifact_id": "468e298e-8aef-4cab-818b-fea10372cbce"
    },
    {
      "module_id": ".ARCHIVE.modules.interactive.handlers",
      "path": ".ARCHIVE/modules/interactive/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            7,
            13
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "",
          "line_range": [
            15,
            21
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_legacy",
          "docstring": "",
          "line_range": [
            23,
            40
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "basic_interactive_processing",
          "docstring": "",
          "line_range": [
            42,
            64
          ],
          "parameters": [
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive": [
          "interactive_legacy",
          "logging.warning",
          "interactive_modular"
        ],
        "interactive_modular": [
          "create_cli_core",
          "cli_core.run_interactive_mode"
        ],
        "interactive_legacy": [
          "Path",
          "basic_interactive_processing",
          "print",
          "logging.error",
          "JSONCache",
          "cache.close",
          "LLMClient"
        ],
        "basic_interactive_processing": [
          "input",
          "user_input.startswith",
          "print",
          "user_input.lower",
          "f.read",
          "open"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "create_cli_core",
        "llmstruct",
        "llmstruct.cache",
        "logging",
        "os",
        "pathlib",
        "src.llmstruct.cli_core"
      ],
      "hash": null,
      "artifact_id": "b97f4901-93cc-4af6-8a97-59198a309dc2"
    },
    {
      "module_id": ".ARCHIVE.modules.interactive.__init__",
      "path": ".ARCHIVE/modules/interactive/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "handlers",
        "interactive"
      ],
      "hash": null,
      "artifact_id": "ca9de26e-5fe7-4524-9e3c-aa28f0fc842b"
    },
    {
      "module_id": ".ARCHIVE.modules.dogfood.handlers",
      "path": ".ARCHIVE/modules/dogfood/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "dogfood": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "9ce30c13-4bb8-4bd1-9bd3-8cc612fb9e74"
    },
    {
      "module_id": ".ARCHIVE.modules.dogfood.__init__",
      "path": ".ARCHIVE/modules/dogfood/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "dogfood",
        "handlers"
      ],
      "hash": null,
      "artifact_id": "4f89d71b-f075-4cda-9131-114fb84b8b3f"
    },
    {
      "module_id": ".ARCHIVE.modules.services.handlers",
      "path": ".ARCHIVE/modules/services/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "cmd_services",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 (API + Bots)",
          "line_range": [
            4,
            46
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "cmd_services": [
          "time.sleep",
          "print",
          "cmd_bot_management",
          "cmd_api_management",
          "type"
        ]
      },
      "dependencies": [
        "api",
        "bot",
        "cmd_api_management",
        "cmd_bot_management",
        "time"
      ],
      "hash": null,
      "artifact_id": "fd1c9b5a-1296-43f8-9ec6-5c3f7f7daa02"
    },
    {
      "module_id": ".ARCHIVE.modules.services.__init__",
      "path": ".ARCHIVE/modules/services/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "cmd_services",
        "handlers"
      ],
      "hash": null,
      "artifact_id": "4e150612-d5fd-434c-aa00-6294f11ba884"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.business_planning",
      "path": ".ARCHIVE/temp_boss_missing/scripts/business_planning.py",
      "category": "core",
      "module_doc": "Business Planning Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
      "functions": [
        {
          "name": "create_business_planning_manager",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
          "line_range": [
            216,
            218
          ],
          "parameters": [
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
          "line_range": [
            20,
            27
          ],
          "parameters": [
            "self",
            "boss_data_dir"
          ],
          "decorators": []
        },
        {
          "name": "create_business_roadmap",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.",
          "line_range": [
            29,
            55
          ],
          "parameters": [
            "self",
            "roadmap_data"
          ],
          "decorators": []
        },
        {
          "name": "create_financial_plan",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "plan_data"
          ],
          "decorators": []
        },
        {
          "name": "record_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.",
          "line_range": [
            84,
            116
          ],
          "parameters": [
            "self",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_business_metrics",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            118,
            154
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_business_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.",
          "line_range": [
            156,
            193
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
          "line_range": [
            195,
            204
          ],
          "parameters": [
            "self",
            "file_path",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
          "line_range": [
            206,
            213
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BusinessPlanningManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439.",
          "line_range": [
            17,
            213
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
              "line_range": [
                20,
                27
              ],
              "parameters": [
                "self",
                "boss_data_dir"
              ]
            },
            {
              "name": "create_business_roadmap",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.",
              "line_range": [
                29,
                55
              ],
              "parameters": [
                "self",
                "roadmap_data"
              ]
            },
            {
              "name": "create_financial_plan",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "plan_data"
              ]
            },
            {
              "name": "record_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.",
              "line_range": [
                84,
                116
              ],
              "parameters": [
                "self",
                "decision_data"
              ]
            },
            {
              "name": "analyze_business_metrics",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                118,
                154
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_business_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.",
              "line_range": [
                156,
                193
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
              "line_range": [
                195,
                204
              ],
              "parameters": [
                "self",
                "file_path",
                "default"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
              "line_range": [
                206,
                213
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "create_business_roadmap": [
          "logger.info",
          "self._save_data",
          "logger.error",
          "datetime.now"
        ],
        "create_financial_plan": [
          "logger.info",
          "self._save_data",
          "logger.error",
          "datetime.now"
        ],
        "record_strategic_decision": [
          "self._load_data",
          "logger.info",
          "isinstance",
          "datetime.now",
          "decision_data.get",
          "logger.error",
          "self._save_data",
          "decisions.append"
        ],
        "analyze_business_metrics": [
          "self._load_data",
          "isinstance",
          "datetime.now",
          "logger.error",
          "len"
        ],
        "get_business_summary": [
          "self._load_data",
          "isinstance",
          "roadmap.get",
          "datetime.now",
          "financial.get",
          "logger.error",
          "bool",
          "len"
        ],
        "_load_data": [
          "file_path.exists",
          "json.load",
          "file_path.open",
          "logger.error"
        ],
        "_save_data": [
          "json.dump",
          "file_path.open",
          "logger.error"
        ],
        "create_business_planning_manager": [
          "BusinessPlanningManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "db76b497-f960-468f-af7e-ad687d0fc0a6"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.team_management",
      "path": ".ARCHIVE/temp_boss_missing/scripts/team_management.py",
      "category": "core",
      "module_doc": "Team Management Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439, \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
      "functions": [
        {
          "name": "create_team_management_system",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            291,
            293
          ],
          "parameters": [
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            20,
            27
          ],
          "parameters": [
            "self",
            "boss_data_dir"
          ],
          "decorators": []
        },
        {
          "name": "create_team_strategy",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            29,
            54
          ],
          "parameters": [
            "self",
            "strategy_data"
          ],
          "decorators": []
        },
        {
          "name": "record_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            56,
            88
          ],
          "parameters": [
            "self",
            "evaluation_data"
          ],
          "decorators": []
        },
        {
          "name": "create_hiring_plan",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            90,
            115
          ],
          "parameters": [
            "self",
            "plan_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_team_performance",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            117,
            156
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_team_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            158,
            195
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_team_report",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            197,
            226
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_strategy",
          "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.",
          "line_range": [
            228,
            238
          ],
          "parameters": [
            "self",
            "strategy"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_evaluations",
          "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.",
          "line_range": [
            240,
            250
          ],
          "parameters": [
            "self",
            "evaluations"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.",
          "line_range": [
            252,
            268
          ],
          "parameters": [
            "self",
            "strategy",
            "evaluations"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
          "line_range": [
            270,
            279
          ],
          "parameters": [
            "self",
            "file_path",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
          "line_range": [
            281,
            288
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TeamManagementSystem",
          "docstring": "\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438.",
          "line_range": [
            17,
            288
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
              "line_range": [
                20,
                27
              ],
              "parameters": [
                "self",
                "boss_data_dir"
              ]
            },
            {
              "name": "create_team_strategy",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
              "line_range": [
                29,
                54
              ],
              "parameters": [
                "self",
                "strategy_data"
              ]
            },
            {
              "name": "record_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                56,
                88
              ],
              "parameters": [
                "self",
                "evaluation_data"
              ]
            },
            {
              "name": "create_hiring_plan",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                90,
                115
              ],
              "parameters": [
                "self",
                "plan_data"
              ]
            },
            {
              "name": "analyze_team_performance",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                117,
                156
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_team_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                158,
                195
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_team_report",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                197,
                226
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_summarize_strategy",
              "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.",
              "line_range": [
                228,
                238
              ],
              "parameters": [
                "self",
                "strategy"
              ]
            },
            {
              "name": "_summarize_evaluations",
              "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.",
              "line_range": [
                240,
                250
              ],
              "parameters": [
                "self",
                "evaluations"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.",
              "line_range": [
                252,
                268
              ],
              "parameters": [
                "self",
                "strategy",
                "evaluations"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
              "line_range": [
                270,
                279
              ],
              "parameters": [
                "self",
                "file_path",
                "default"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
              "line_range": [
                281,
                288
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "create_team_strategy": [
          "logger.info",
          "self._save_data",
          "logger.error",
          "datetime.now"
        ],
        "record_team_evaluation": [
          "evaluations.append",
          "self._load_data",
          "logger.info",
          "isinstance",
          "datetime.now",
          "logger.error",
          "self._save_data"
        ],
        "create_hiring_plan": [
          "logger.info",
          "self._save_data",
          "logger.error",
          "datetime.now"
        ],
        "analyze_team_performance": [
          "self._load_data",
          "isinstance",
          "datetime.now",
          "logger.error",
          "bool",
          "len"
        ],
        "get_team_summary": [
          "self._load_data",
          "isinstance",
          "datetime.now",
          "logger.error",
          "bool",
          "strategy.get",
          "len",
          "hiring_plans.get"
        ],
        "generate_team_report": [
          "self._load_data",
          "self._summarize_strategy",
          "datetime.now",
          "self._summarize_evaluations",
          "logger.error",
          "self._generate_recommendations"
        ],
        "_summarize_strategy": [
          "strategy.get"
        ],
        "_summarize_evaluations": [
          "isinstance",
          "len"
        ],
        "_generate_recommendations": [
          "recommendations.append",
          "len"
        ],
        "_load_data": [
          "file_path.exists",
          "json.load",
          "file_path.open",
          "logger.error"
        ],
        "_save_data": [
          "json.dump",
          "file_path.open",
          "logger.error"
        ],
        "create_team_management_system": [
          "TeamManagementSystem"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b8498791-0cbd-4c77-aa12-9e8af49be327"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.boss_cli",
      "path": ".ARCHIVE/temp_boss_missing/scripts/boss_cli.py",
      "category": "core",
      "module_doc": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u043e\u0434\u0443\u043b\u0438",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f.",
          "line_range": [
            490,
            503
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
          "line_range": [
            42,
            101
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
          "line_range": [
            103,
            126
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            128,
            147
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_status",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.",
          "line_range": [
            150,
            157
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_audit",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.",
          "line_range": [
            159,
            166
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_context",
          "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.",
          "line_range": [
            168,
            175
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_queue",
          "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.",
          "line_range": [
            177,
            184
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_summary",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.",
          "line_range": [
            186,
            193
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_roadmap",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
          "line_range": [
            196,
            221
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_financial_plan",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.",
          "line_range": [
            223,
            256
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
          "line_range": [
            258,
            273
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            275,
            282
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_summary",
          "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
          "line_range": [
            284,
            291
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_strategy",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            294,
            308
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            310,
            326
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_hiring_plan",
          "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            328,
            346
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            348,
            355
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_report",
          "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            357,
            364
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_technical",
          "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
          "line_range": [
            367,
            379
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context_full",
          "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
          "line_range": [
            381,
            384
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace_override",
          "docstring": "Emergency workspace overrides.",
          "line_range": [
            387,
            396
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_capabilities",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
          "line_range": [
            399,
            422
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_boss_status",
          "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
          "line_range": [
            424,
            440
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
          "line_range": [
            442,
            487
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BossCLI",
          "docstring": "Boss CLI - \u043f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f.\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u0444\u0443\u043d\u043a\u0446\u0438\u0438.",
          "line_range": [
            36,
            487
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
              "line_range": [
                42,
                101
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "run_interactive",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
              "line_range": [
                103,
                126
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                128,
                147
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "cmd_ai_status",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.",
              "line_range": [
                150,
                157
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_audit",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.",
              "line_range": [
                159,
                166
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_context",
              "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.",
              "line_range": [
                168,
                175
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_queue",
              "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.",
              "line_range": [
                177,
                184
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_summary",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.",
              "line_range": [
                186,
                193
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_roadmap",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
              "line_range": [
                196,
                221
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_financial_plan",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.",
              "line_range": [
                223,
                256
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
              "line_range": [
                258,
                273
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                275,
                282
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_summary",
              "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
              "line_range": [
                284,
                291
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_strategy",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                294,
                308
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                310,
                326
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_hiring_plan",
              "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                328,
                346
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                348,
                355
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_report",
              "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                357,
                364
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_technical",
              "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
              "line_range": [
                367,
                379
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context_full",
              "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
              "line_range": [
                381,
                384
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace_override",
              "docstring": "Emergency workspace overrides.",
              "line_range": [
                387,
                396
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_capabilities",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
              "line_range": [
                399,
                422
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_boss_status",
              "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
              "line_range": [
                424,
                440
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
              "line_range": [
                442,
                487
              ],
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "CLIConfig",
          "AISelfAwarenessCLIIntegration",
          "CommandProcessor",
          "str",
          "TeamManagementSystem",
          "CLIUtils",
          "BusinessPlanningManager"
        ],
        "run_interactive": [
          "input",
          "user_input.lower",
          "print",
          "self.process_command"
        ],
        "process_command": [
          "cmd.startswith",
          "len",
          "command_line.split",
          "print"
        ],
        "cmd_ai_status": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_audit": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_context": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_queue": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_business_roadmap": [
          "print",
          "json.dumps"
        ],
        "cmd_financial_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_strategic_decision": [
          "print",
          "json.dumps"
        ],
        "cmd_business_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_business_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_team_strategy": [
          "print",
          "json.dumps"
        ],
        "cmd_team_evaluation": [
          "print",
          "json.dumps"
        ],
        "cmd_hiring_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_team_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_team_report": [
          "print",
          "json.dumps"
        ],
        "cmd_technical": [
          "print"
        ],
        "cmd_context_full": [
          "print"
        ],
        "cmd_workspace_override": [
          "print"
        ],
        "cmd_capabilities": [
          "json.dumps",
          "print",
          "bool"
        ],
        "cmd_boss_status": [
          "print",
          "json.dumps"
        ],
        "cmd_help": [
          "print"
        ],
        "main": [
          "argparse.ArgumentParser",
          "BossCLI",
          "parser.parse_args",
          "boss_cli.run_interactive",
          "boss_cli.process_command",
          "parser.add_argument"
        ]
      },
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "Any",
        "BusinessPlanningManager",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "Dict",
        "Optional",
        "Path",
        "TeamManagementSystem",
        "argparse",
        "business_planning",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "os",
        "pathlib",
        "sys",
        "team_management",
        "typing"
      ],
      "hash": null,
      "artifact_id": "8994a53e-6870-447b-92c4-43751822812e"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.__init__",
      "path": ".ARCHIVE/temp_boss_missing/scripts/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "3d0bdc42-adcf-4062-a1cb-08be15f91786"
    },
    {
      "module_id": ".ARCHIVE..PHOENIX.executable_phoenix_plan",
      "path": ".ARCHIVE/.PHOENIX/executable_phoenix_plan.py",
      "category": "core",
      "module_doc": "PHOENIX: \u0418\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0439 \u043f\u043b\u0430\u043d \u0440\u0435\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0448\u0430\u0433\u043e\u0432 \u0438\u0437 opus_PHOENIX_FINAL_EXECUTABLE_PLAN.md",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            19,
            23
          ],
          "parameters": [
            "self",
            "workspace_path",
            "ollama_url"
          ],
          "decorators": []
        },
        {
          "name": "setup_workspace",
          "docstring": "\u0424\u0430\u0437\u0430 0: \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430",
          "line_range": [
            25,
            38
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_duplicates",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c\u0438 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438",
          "line_range": [
            40,
            60
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "query_ollama",
          "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441 \u043a Ollama \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0432\u0435\u0442\u0430",
          "line_range": [
            62,
            92
          ],
          "parameters": [
            "self",
            "message",
            "model",
            "context_file"
          ],
          "decorators": []
        },
        {
          "name": "validate_checkpoint",
          "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f checkpoint \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c\u0438 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f\u043c\u0438",
          "line_range": [
            94,
            109
          ],
          "parameters": [
            "self",
            "phase"
          ],
          "decorators": []
        },
        {
          "name": "_validate_phase_0",
          "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 0: \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430",
          "line_range": [
            111,
            121
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_validate_phase_1",
          "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 1: \u043a\u043e\u043d\u0441\u043e\u043b\u0438\u0434\u0430\u0446\u0438\u044f",
          "line_range": [
            123,
            127
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_validate_phase_2",
          "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 2: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0445\u0435\u043c",
          "line_range": [
            129,
            133
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_validate_phase_3",
          "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 3: \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433",
          "line_range": [
            135,
            143
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_validate_phase_4",
          "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 4: \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f",
          "line_range": [
            145,
            148
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "execute_phase",
          "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0444\u0430\u0437\u044b \u043f\u043b\u0430\u043d\u0430",
          "line_range": [
            150,
            173
          ],
          "parameters": [
            "self",
            "phase"
          ],
          "decorators": []
        },
        {
          "name": "_execute_phase_0",
          "docstring": "\u0424\u0430\u0437\u0430 0: \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432",
          "line_range": [
            175,
            197
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_execute_phase_1",
          "docstring": "\u0424\u0430\u0437\u0430 1: \u041a\u043e\u043d\u0441\u043e\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0438 \u0430\u0440\u0445\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435",
          "line_range": [
            199,
            223
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_execute_phase_2",
          "docstring": "\u0424\u0430\u0437\u0430 2: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0445\u0435\u043c \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b",
          "line_range": [
            225,
            239
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_execute_phase_3",
          "docstring": "\u0424\u0430\u0437\u0430 3: \u0420\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u0441 LLM-first \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u043c",
          "line_range": [
            241,
            246
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_execute_phase_4",
          "docstring": "\u0424\u0430\u0437\u0430 4: \u0424\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f",
          "line_range": [
            248,
            262
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_full_plan",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430 Phoenix",
          "line_range": [
            264,
            275
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "PhoenixExecutor",
          "docstring": "",
          "line_range": [
            18,
            275
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                19,
                23
              ],
              "parameters": [
                "self",
                "workspace_path",
                "ollama_url"
              ]
            },
            {
              "name": "setup_workspace",
              "docstring": "\u0424\u0430\u0437\u0430 0: \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430",
              "line_range": [
                25,
                38
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_duplicates",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c\u0438 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438",
              "line_range": [
                40,
                60
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "query_ollama",
              "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441 \u043a Ollama \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0432\u0435\u0442\u0430",
              "line_range": [
                62,
                92
              ],
              "parameters": [
                "self",
                "message",
                "model",
                "context_file"
              ]
            },
            {
              "name": "validate_checkpoint",
              "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f checkpoint \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c\u0438 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f\u043c\u0438",
              "line_range": [
                94,
                109
              ],
              "parameters": [
                "self",
                "phase"
              ]
            },
            {
              "name": "_validate_phase_0",
              "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 0: \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430",
              "line_range": [
                111,
                121
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_validate_phase_1",
              "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 1: \u043a\u043e\u043d\u0441\u043e\u043b\u0438\u0434\u0430\u0446\u0438\u044f",
              "line_range": [
                123,
                127
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_validate_phase_2",
              "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 2: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0445\u0435\u043c",
              "line_range": [
                129,
                133
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_validate_phase_3",
              "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 3: \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433",
              "line_range": [
                135,
                143
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_validate_phase_4",
              "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 4: \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f",
              "line_range": [
                145,
                148
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "execute_phase",
              "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0444\u0430\u0437\u044b \u043f\u043b\u0430\u043d\u0430",
              "line_range": [
                150,
                173
              ],
              "parameters": [
                "self",
                "phase"
              ]
            },
            {
              "name": "_execute_phase_0",
              "docstring": "\u0424\u0430\u0437\u0430 0: \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432",
              "line_range": [
                175,
                197
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_execute_phase_1",
              "docstring": "\u0424\u0430\u0437\u0430 1: \u041a\u043e\u043d\u0441\u043e\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0438 \u0430\u0440\u0445\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435",
              "line_range": [
                199,
                223
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_execute_phase_2",
              "docstring": "\u0424\u0430\u0437\u0430 2: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0445\u0435\u043c \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b",
              "line_range": [
                225,
                239
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_execute_phase_3",
              "docstring": "\u0424\u0430\u0437\u0430 3: \u0420\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u0441 LLM-first \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u043c",
              "line_range": [
                241,
                246
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_execute_phase_4",
              "docstring": "\u0424\u0430\u0437\u0430 4: \u0424\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f",
              "line_range": [
                248,
                262
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_full_plan",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430 Phoenix",
              "line_range": [
                264,
                275
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "setup_workspace": [
          "logger.error",
          "logger.info"
        ],
        "analyze_duplicates": [
          "json.load",
          "subprocess.run",
          "logger.info",
          "report.get",
          "str",
          "logger.error",
          "open"
        ],
        "query_ollama": [
          "logger.info",
          "result.get",
          "response.json",
          "logger.error",
          "requests.post",
          "len",
          "logger.warning"
        ],
        "validate_checkpoint": [
          "validations.get",
          "logger.warning",
          "validator"
        ],
        "_validate_phase_0": [
          "logger.info",
          "checks.values",
          "all"
        ],
        "_validate_phase_1": [
          "archive_dir.glob",
          "archive_dir.exists",
          "list",
          "len"
        ],
        "_validate_phase_2": [
          "all"
        ],
        "_validate_phase_3": [
          "list",
          "subprocess.run"
        ],
        "_validate_phase_4": [
          "all"
        ],
        "execute_phase": [
          "method",
          "logger.info",
          "phase_methods.get",
          "logger.error",
          "self.validate_checkpoint"
        ],
        "_execute_phase_0": [
          "self.setup_workspace",
          "self.analyze_duplicates",
          "str",
          "self.query_ollama",
          "f.write",
          "open"
        ],
        "_execute_phase_1": [
          "bot.rename",
          "logger.info",
          "archive_dir.mkdir",
          "str",
          "len",
          "list"
        ],
        "_execute_phase_2": [
          "self.query_ollama",
          "f.write",
          "open"
        ],
        "_execute_phase_3": [
          "logger.info"
        ],
        "_execute_phase_4": [
          "self.query_ollama",
          "f.write",
          "open"
        ],
        "run_full_plan": [
          "self.execute_phase",
          "range",
          "logger.error",
          "logger.info"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "json",
        "logging",
        "pathlib",
        "requests",
        "subprocess",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c729c202-1f19-4205-8810-b6d28306885c"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.commercial_planning",
      "path": ".ARCHIVE/temp_personal_analysis/personal/commercial_planning.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "2a937cce-04f1-4002-af30-223e599d4b4c"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.business_planning",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/business_planning.py",
      "category": "core",
      "module_doc": "Business Planning Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
      "functions": [
        {
          "name": "create_business_planning_manager",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
          "line_range": [
            216,
            218
          ],
          "parameters": [
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
          "line_range": [
            20,
            27
          ],
          "parameters": [
            "self",
            "boss_data_dir"
          ],
          "decorators": []
        },
        {
          "name": "create_business_roadmap",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.",
          "line_range": [
            29,
            55
          ],
          "parameters": [
            "self",
            "roadmap_data"
          ],
          "decorators": []
        },
        {
          "name": "create_financial_plan",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "plan_data"
          ],
          "decorators": []
        },
        {
          "name": "record_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.",
          "line_range": [
            84,
            116
          ],
          "parameters": [
            "self",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_business_metrics",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            118,
            154
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_business_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.",
          "line_range": [
            156,
            193
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
          "line_range": [
            195,
            204
          ],
          "parameters": [
            "self",
            "file_path",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
          "line_range": [
            206,
            213
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BusinessPlanningManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439.",
          "line_range": [
            17,
            213
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
              "line_range": [
                20,
                27
              ],
              "parameters": [
                "self",
                "boss_data_dir"
              ]
            },
            {
              "name": "create_business_roadmap",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.",
              "line_range": [
                29,
                55
              ],
              "parameters": [
                "self",
                "roadmap_data"
              ]
            },
            {
              "name": "create_financial_plan",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "plan_data"
              ]
            },
            {
              "name": "record_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.",
              "line_range": [
                84,
                116
              ],
              "parameters": [
                "self",
                "decision_data"
              ]
            },
            {
              "name": "analyze_business_metrics",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                118,
                154
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_business_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.",
              "line_range": [
                156,
                193
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
              "line_range": [
                195,
                204
              ],
              "parameters": [
                "self",
                "file_path",
                "default"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
              "line_range": [
                206,
                213
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "create_business_roadmap": [
          "logger.info",
          "self._save_data",
          "logger.error",
          "datetime.now"
        ],
        "create_financial_plan": [
          "logger.info",
          "self._save_data",
          "logger.error",
          "datetime.now"
        ],
        "record_strategic_decision": [
          "self._load_data",
          "logger.info",
          "isinstance",
          "datetime.now",
          "decision_data.get",
          "logger.error",
          "self._save_data",
          "decisions.append"
        ],
        "analyze_business_metrics": [
          "self._load_data",
          "isinstance",
          "datetime.now",
          "logger.error",
          "len"
        ],
        "get_business_summary": [
          "self._load_data",
          "isinstance",
          "roadmap.get",
          "datetime.now",
          "financial.get",
          "logger.error",
          "bool",
          "len"
        ],
        "_load_data": [
          "file_path.exists",
          "json.load",
          "file_path.open",
          "logger.error"
        ],
        "_save_data": [
          "json.dump",
          "file_path.open",
          "logger.error"
        ],
        "create_business_planning_manager": [
          "BusinessPlanningManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "a5baade5-30f0-4349-8dea-f89e44357065"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.team_management",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/team_management.py",
      "category": "core",
      "module_doc": "Team Management Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439, \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
      "functions": [
        {
          "name": "create_team_management_system",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            291,
            293
          ],
          "parameters": [
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            20,
            27
          ],
          "parameters": [
            "self",
            "boss_data_dir"
          ],
          "decorators": []
        },
        {
          "name": "create_team_strategy",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            29,
            54
          ],
          "parameters": [
            "self",
            "strategy_data"
          ],
          "decorators": []
        },
        {
          "name": "record_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            56,
            88
          ],
          "parameters": [
            "self",
            "evaluation_data"
          ],
          "decorators": []
        },
        {
          "name": "create_hiring_plan",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            90,
            115
          ],
          "parameters": [
            "self",
            "plan_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_team_performance",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            117,
            156
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_team_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            158,
            195
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_team_report",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            197,
            226
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_strategy",
          "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.",
          "line_range": [
            228,
            238
          ],
          "parameters": [
            "self",
            "strategy"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_evaluations",
          "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.",
          "line_range": [
            240,
            250
          ],
          "parameters": [
            "self",
            "evaluations"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.",
          "line_range": [
            252,
            268
          ],
          "parameters": [
            "self",
            "strategy",
            "evaluations"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
          "line_range": [
            270,
            279
          ],
          "parameters": [
            "self",
            "file_path",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
          "line_range": [
            281,
            288
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TeamManagementSystem",
          "docstring": "\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438.",
          "line_range": [
            17,
            288
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
              "line_range": [
                20,
                27
              ],
              "parameters": [
                "self",
                "boss_data_dir"
              ]
            },
            {
              "name": "create_team_strategy",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
              "line_range": [
                29,
                54
              ],
              "parameters": [
                "self",
                "strategy_data"
              ]
            },
            {
              "name": "record_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                56,
                88
              ],
              "parameters": [
                "self",
                "evaluation_data"
              ]
            },
            {
              "name": "create_hiring_plan",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                90,
                115
              ],
              "parameters": [
                "self",
                "plan_data"
              ]
            },
            {
              "name": "analyze_team_performance",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                117,
                156
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_team_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                158,
                195
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_team_report",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                197,
                226
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_summarize_strategy",
              "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.",
              "line_range": [
                228,
                238
              ],
              "parameters": [
                "self",
                "strategy"
              ]
            },
            {
              "name": "_summarize_evaluations",
              "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.",
              "line_range": [
                240,
                250
              ],
              "parameters": [
                "self",
                "evaluations"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.",
              "line_range": [
                252,
                268
              ],
              "parameters": [
                "self",
                "strategy",
                "evaluations"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
              "line_range": [
                270,
                279
              ],
              "parameters": [
                "self",
                "file_path",
                "default"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
              "line_range": [
                281,
                288
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "create_team_strategy": [
          "logger.info",
          "self._save_data",
          "logger.error",
          "datetime.now"
        ],
        "record_team_evaluation": [
          "evaluations.append",
          "self._load_data",
          "logger.info",
          "isinstance",
          "datetime.now",
          "logger.error",
          "self._save_data"
        ],
        "create_hiring_plan": [
          "logger.info",
          "self._save_data",
          "logger.error",
          "datetime.now"
        ],
        "analyze_team_performance": [
          "self._load_data",
          "isinstance",
          "datetime.now",
          "logger.error",
          "bool",
          "len"
        ],
        "get_team_summary": [
          "self._load_data",
          "isinstance",
          "datetime.now",
          "logger.error",
          "bool",
          "strategy.get",
          "len",
          "hiring_plans.get"
        ],
        "generate_team_report": [
          "self._load_data",
          "self._summarize_strategy",
          "datetime.now",
          "self._summarize_evaluations",
          "logger.error",
          "self._generate_recommendations"
        ],
        "_summarize_strategy": [
          "strategy.get"
        ],
        "_summarize_evaluations": [
          "isinstance",
          "len"
        ],
        "_generate_recommendations": [
          "recommendations.append",
          "len"
        ],
        "_load_data": [
          "file_path.exists",
          "json.load",
          "file_path.open",
          "logger.error"
        ],
        "_save_data": [
          "json.dump",
          "file_path.open",
          "logger.error"
        ],
        "create_team_management_system": [
          "TeamManagementSystem"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "efd40308-0f8b-430e-bf87-4bb72c0466d1"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.boss_cli",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/boss_cli.py",
      "category": "core",
      "module_doc": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u043e\u0434\u0443\u043b\u0438",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f.",
          "line_range": [
            490,
            503
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
          "line_range": [
            42,
            101
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
          "line_range": [
            103,
            126
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            128,
            147
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_status",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.",
          "line_range": [
            150,
            157
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_audit",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.",
          "line_range": [
            159,
            166
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_context",
          "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.",
          "line_range": [
            168,
            175
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_queue",
          "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.",
          "line_range": [
            177,
            184
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_summary",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.",
          "line_range": [
            186,
            193
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_roadmap",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
          "line_range": [
            196,
            221
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_financial_plan",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.",
          "line_range": [
            223,
            256
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
          "line_range": [
            258,
            273
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            275,
            282
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_summary",
          "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
          "line_range": [
            284,
            291
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_strategy",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            294,
            308
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            310,
            326
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_hiring_plan",
          "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            328,
            346
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            348,
            355
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_report",
          "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            357,
            364
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_technical",
          "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
          "line_range": [
            367,
            379
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context_full",
          "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
          "line_range": [
            381,
            384
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace_override",
          "docstring": "Emergency workspace overrides.",
          "line_range": [
            387,
            396
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_capabilities",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
          "line_range": [
            399,
            422
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_boss_status",
          "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
          "line_range": [
            424,
            440
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
          "line_range": [
            442,
            487
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BossCLI",
          "docstring": "Boss CLI - \u043f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f.\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u0444\u0443\u043d\u043a\u0446\u0438\u0438.",
          "line_range": [
            36,
            487
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
              "line_range": [
                42,
                101
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "run_interactive",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
              "line_range": [
                103,
                126
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                128,
                147
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "cmd_ai_status",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.",
              "line_range": [
                150,
                157
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_audit",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.",
              "line_range": [
                159,
                166
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_context",
              "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.",
              "line_range": [
                168,
                175
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_queue",
              "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.",
              "line_range": [
                177,
                184
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_summary",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.",
              "line_range": [
                186,
                193
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_roadmap",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
              "line_range": [
                196,
                221
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_financial_plan",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.",
              "line_range": [
                223,
                256
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
              "line_range": [
                258,
                273
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                275,
                282
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_summary",
              "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
              "line_range": [
                284,
                291
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_strategy",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                294,
                308
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                310,
                326
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_hiring_plan",
              "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                328,
                346
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                348,
                355
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_report",
              "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                357,
                364
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_technical",
              "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
              "line_range": [
                367,
                379
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context_full",
              "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
              "line_range": [
                381,
                384
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace_override",
              "docstring": "Emergency workspace overrides.",
              "line_range": [
                387,
                396
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_capabilities",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
              "line_range": [
                399,
                422
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_boss_status",
              "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
              "line_range": [
                424,
                440
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
              "line_range": [
                442,
                487
              ],
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "CLIConfig",
          "AISelfAwarenessCLIIntegration",
          "CommandProcessor",
          "str",
          "TeamManagementSystem",
          "CLIUtils",
          "BusinessPlanningManager"
        ],
        "run_interactive": [
          "input",
          "user_input.lower",
          "print",
          "self.process_command"
        ],
        "process_command": [
          "cmd.startswith",
          "len",
          "command_line.split",
          "print"
        ],
        "cmd_ai_status": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_audit": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_context": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_queue": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_business_roadmap": [
          "print",
          "json.dumps"
        ],
        "cmd_financial_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_strategic_decision": [
          "print",
          "json.dumps"
        ],
        "cmd_business_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_business_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_team_strategy": [
          "print",
          "json.dumps"
        ],
        "cmd_team_evaluation": [
          "print",
          "json.dumps"
        ],
        "cmd_hiring_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_team_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_team_report": [
          "print",
          "json.dumps"
        ],
        "cmd_technical": [
          "print"
        ],
        "cmd_context_full": [
          "print"
        ],
        "cmd_workspace_override": [
          "print"
        ],
        "cmd_capabilities": [
          "json.dumps",
          "print",
          "bool"
        ],
        "cmd_boss_status": [
          "print",
          "json.dumps"
        ],
        "cmd_help": [
          "print"
        ],
        "main": [
          "argparse.ArgumentParser",
          "BossCLI",
          "parser.parse_args",
          "boss_cli.run_interactive",
          "boss_cli.process_command",
          "parser.add_argument"
        ]
      },
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "Any",
        "BusinessPlanningManager",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "Dict",
        "Optional",
        "Path",
        "TeamManagementSystem",
        "argparse",
        "business_planning",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "os",
        "pathlib",
        "sys",
        "team_management",
        "typing"
      ],
      "hash": null,
      "artifact_id": "a8a4a67d-d0c1-48ce-9a97-1d9716dca436"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.__init__",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "4b5bd564-2de5-4ce7-bd16-c6c81949b2ee"
    },
    {
      "module_id": ".ARCHIVE..personal.boss.scripts.boss_cli",
      "path": ".ARCHIVE/.personal/boss/scripts/boss_cli.py",
      "category": "core",
      "module_doc": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n\u0414\u043e\u0441\u0442\u0443\u043f \u043a\u043e \u0432\u0441\u0435\u043c \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430, \u0432\u043a\u043b\u044e\u0447\u0430\u044f business planning \u0438 team management.",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f.",
          "line_range": [
            493,
            506
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
          "line_range": [
            47,
            95
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
          "line_range": [
            97,
            119
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            121,
            141
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_status",
          "docstring": "\u0421\u0442\u0430\u0442\u0443\u0441 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
          "line_range": [
            144,
            151
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_audit",
          "docstring": "\u0410\u0443\u0434\u0438\u0442 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439.",
          "line_range": [
            153,
            160
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_context",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c.",
          "line_range": [
            162,
            170
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_queue",
          "docstring": "\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 AI \u043e\u0447\u0435\u0440\u0435\u0434\u0438.",
          "line_range": [
            172,
            179
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_summary",
          "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.",
          "line_range": [
            181,
            188
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_roadmap",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
          "line_range": [
            191,
            210
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_financial_plan",
          "docstring": "\u0424\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0435 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.",
          "line_range": [
            212,
            226
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
          "line_range": [
            228,
            242
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            244,
            251
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_summary",
          "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
          "line_range": [
            253,
            260
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_strategy",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            263,
            277
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            279,
            295
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_hiring_plan",
          "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            297,
            315
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            317,
            324
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_report",
          "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            326,
            333
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_technical",
          "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
          "line_range": [
            336,
            348
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context_full",
          "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
          "line_range": [
            350,
            353
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace_override",
          "docstring": "Emergency workspace overrides.",
          "line_range": [
            356,
            365
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_capabilities",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
          "line_range": [
            368,
            391
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_boss_status",
          "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
          "line_range": [
            393,
            409
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
          "line_range": [
            411,
            456
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_init_ai_integration",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.",
          "line_range": [
            458,
            464
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_init_command_processor",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430 \u043a\u043e\u043c\u0430\u043d\u0434.",
          "line_range": [
            466,
            472
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_init_business_manager",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430.",
          "line_range": [
            474,
            481
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_init_team_manager",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            483,
            490
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BossCLI",
          "docstring": "Boss CLI - \u043f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f.\n\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f \u043a\u043e \u0432\u0441\u0435\u043c \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
          "line_range": [
            41,
            490
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
              "line_range": [
                47,
                95
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "run_interactive",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
              "line_range": [
                97,
                119
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                121,
                141
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "cmd_ai_status",
              "docstring": "\u0421\u0442\u0430\u0442\u0443\u0441 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
              "line_range": [
                144,
                151
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_audit",
              "docstring": "\u0410\u0443\u0434\u0438\u0442 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439.",
              "line_range": [
                153,
                160
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_context",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c.",
              "line_range": [
                162,
                170
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_queue",
              "docstring": "\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 AI \u043e\u0447\u0435\u0440\u0435\u0434\u0438.",
              "line_range": [
                172,
                179
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_summary",
              "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.",
              "line_range": [
                181,
                188
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_roadmap",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
              "line_range": [
                191,
                210
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_financial_plan",
              "docstring": "\u0424\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0435 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.",
              "line_range": [
                212,
                226
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
              "line_range": [
                228,
                242
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                244,
                251
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_summary",
              "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
              "line_range": [
                253,
                260
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_strategy",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                263,
                277
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                279,
                295
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_hiring_plan",
              "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                297,
                315
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                317,
                324
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_report",
              "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                326,
                333
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_technical",
              "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
              "line_range": [
                336,
                348
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context_full",
              "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
              "line_range": [
                350,
                353
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace_override",
              "docstring": "Emergency workspace overrides.",
              "line_range": [
                356,
                365
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_capabilities",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
              "line_range": [
                368,
                391
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_boss_status",
              "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
              "line_range": [
                393,
                409
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
              "line_range": [
                411,
                456
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_init_ai_integration",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.",
              "line_range": [
                458,
                464
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_init_command_processor",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430 \u043a\u043e\u043c\u0430\u043d\u0434.",
              "line_range": [
                466,
                472
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_init_business_manager",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430.",
              "line_range": [
                474,
                481
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_init_team_manager",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                483,
                490
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._init_team_manager",
          "self._init_command_processor",
          "self._init_ai_integration",
          "str",
          "self._init_business_manager"
        ],
        "run_interactive": [
          "input",
          "user_input.lower",
          "print",
          "self.process_command"
        ],
        "process_command": [
          "cmd.startswith",
          "command_line.split",
          "print"
        ],
        "cmd_ai_status": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_audit": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_context": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_queue": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_business_roadmap": [
          "print",
          "json.dumps"
        ],
        "cmd_financial_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_strategic_decision": [
          "print",
          "json.dumps"
        ],
        "cmd_business_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_business_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_team_strategy": [
          "print",
          "json.dumps"
        ],
        "cmd_team_evaluation": [
          "print",
          "json.dumps"
        ],
        "cmd_hiring_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_team_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_team_report": [
          "print",
          "json.dumps"
        ],
        "cmd_technical": [
          "print"
        ],
        "cmd_context_full": [
          "print"
        ],
        "cmd_workspace_override": [
          "print"
        ],
        "cmd_capabilities": [
          "json.dumps",
          "print",
          "bool"
        ],
        "cmd_boss_status": [
          "print",
          "json.dumps"
        ],
        "cmd_help": [
          "print"
        ],
        "_init_ai_integration": [],
        "_init_command_processor": [],
        "_init_business_manager": [
          "logger.error",
          "BusinessPlanningManager"
        ],
        "_init_team_manager": [
          "TeamManagementSystem",
          "logger.error"
        ],
        "main": [
          "argparse.ArgumentParser",
          "BossCLI",
          "parser.parse_args",
          "boss_cli.run_interactive",
          "boss_cli.process_command",
          "parser.add_argument"
        ]
      },
      "dependencies": [
        "BusinessPlanningManager",
        "Path",
        "TeamManagementSystem",
        "argparse",
        "business_planning",
        "json",
        "logging",
        "pathlib",
        "sys",
        "team_management"
      ],
      "hash": null,
      "artifact_id": "2445cf12-f3df-4ab6-aa57-c298015072ee"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.send_cursor_response",
      "path": ".ARCHIVE/archive/telegram_experiments/send_cursor_response.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            5,
            32
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "send_to_user",
          "print"
        ]
      },
      "dependencies": [
        "asyncio",
        "cursor_bot_messenger",
        "send_to_user"
      ],
      "hash": null,
      "artifact_id": "65f9630f-9d5d-47e9-a749-df0fe688e068"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_telegram_reader_enhanced",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_telegram_reader_enhanced.py",
      "category": "core",
      "module_doc": "Enhanced Cursor Telegram Reader\n\u0427\u0438\u0442\u0430\u0435\u0442 cursor \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0441 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 reply context",
      "functions": [
        {
          "name": "handle_cursor_command",
          "docstring": "Example handler for cursor commands",
          "line_range": [
            181,
            203
          ],
          "parameters": [
            "command_data"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main entry point",
          "line_range": [
            205,
            222
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            20
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "read_cursor_commands",
          "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0435 cursor \u043a\u043e\u043c\u0430\u043d\u0434\u044b",
          "line_range": [
            22,
            44
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_parse_cursor_command",
          "docstring": "Parse single cursor command entry",
          "line_range": [
            46,
            84
          ],
          "parameters": [
            "self",
            "entry"
          ],
          "decorators": []
        },
        {
          "name": "get_recent_user_messages",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
          "line_range": [
            86,
            108
          ],
          "parameters": [
            "self",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "_parse_user_message",
          "docstring": "Parse user message entry",
          "line_range": [
            110,
            158
          ],
          "parameters": [
            "self",
            "entry"
          ],
          "decorators": []
        },
        {
          "name": "poll_for_commands",
          "docstring": "Polling \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            160,
            179
          ],
          "parameters": [
            "self",
            "callback_func",
            "poll_interval"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EnhancedCursorTelegramReader",
          "docstring": "Enhanced reader \u0434\u043b\u044f cursor \u043a\u043e\u043c\u0430\u043d\u0434 \u0438\u0437 Telegram \u043b\u043e\u0433\u043e\u0432",
          "line_range": [
            13,
            179
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                20
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "read_cursor_commands",
              "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0435 cursor \u043a\u043e\u043c\u0430\u043d\u0434\u044b",
              "line_range": [
                22,
                44
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_parse_cursor_command",
              "docstring": "Parse single cursor command entry",
              "line_range": [
                46,
                84
              ],
              "parameters": [
                "self",
                "entry"
              ]
            },
            {
              "name": "get_recent_user_messages",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
              "line_range": [
                86,
                108
              ],
              "parameters": [
                "self",
                "limit"
              ]
            },
            {
              "name": "_parse_user_message",
              "docstring": "Parse user message entry",
              "line_range": [
                110,
                158
              ],
              "parameters": [
                "self",
                "entry"
              ]
            },
            {
              "name": "poll_for_commands",
              "docstring": "Polling \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                160,
                179
              ],
              "parameters": [
                "self",
                "callback_func",
                "poll_interval"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "read_cursor_commands": [
          "print",
          "self._parse_cursor_command",
          "content.split",
          "entry.strip",
          "commands.append",
          "f.read",
          "open"
        ],
        "_parse_cursor_command": [
          "timestamp_line.split",
          "print",
          "timestamp.isoformat",
          "datetime.now",
          "int",
          "entry.strip",
          "line.startswith",
          "datetime.strptime",
          "len",
          "line.strip",
          "timestamp.timestamp"
        ],
        "get_recent_user_messages": [
          "print",
          "messages.append",
          "content.split",
          "entry.strip",
          "self._parse_user_message",
          "f.read",
          "open"
        ],
        "_parse_user_message": [
          "print",
          "timestamp.isoformat",
          "datetime.now",
          "int",
          "entry.strip",
          "line.startswith",
          "datetime.strptime",
          "len",
          "timestamp_line.replace",
          "line.strip"
        ],
        "poll_for_commands": [
          "self.read_cursor_commands",
          "callback_func",
          "print",
          "time.sleep"
        ],
        "handle_cursor_command": [
          "print"
        ],
        "main": [
          "EnhancedCursorTelegramReader",
          "print",
          "reader.poll_for_commands",
          "reader.get_recent_user_messages"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "datetime",
        "json",
        "os",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "3250a482-fac7-4048-a124-edc2f1fd95da"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.api_memory_endpoints",
      "path": ".ARCHIVE/archive/telegram_experiments/api_memory_endpoints.py",
      "category": "core",
      "module_doc": "API Endpoints \u0434\u043b\u044f \u043f\u0430\u043c\u044f\u0442\u0438 Telegram \u0431\u043e\u0442\u0430\n\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 FastAPI \u0434\u043b\u044f \u043a\u0435\u0448\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439",
      "functions": [
        {
          "name": "load_user_memory",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            44,
            52
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "save_user_memory",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u0444\u0430\u0439\u043b",
          "line_range": [
            54,
            60
          ],
          "parameters": [
            "memory"
          ],
          "decorators": []
        },
        {
          "name": "add_memory_endpoints",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 endpoints \u043f\u0430\u043c\u044f\u0442\u0438 \u043a FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044e",
          "line_range": [
            62,
            273
          ],
          "parameters": [
            "app"
          ],
          "decorators": []
        },
        {
          "name": "save_user_message",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            66,
            97
          ],
          "parameters": [
            "message"
          ],
          "decorators": [
            "app.post('/api/v1/memory/save')"
          ]
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            100,
            122
          ],
          "parameters": [
            "user_id",
            "limit"
          ],
          "decorators": [
            "app.get('/api/v1/memory/history/{user_id}')"
          ]
        },
        {
          "name": "search_user_memory",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            125,
            152
          ],
          "parameters": [
            "query"
          ],
          "decorators": [
            "app.post('/api/v1/memory/search')"
          ]
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            155,
            215
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/chat/ollama')"
          ]
        },
        {
          "name": "clear_user_memory",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            218,
            238
          ],
          "parameters": [
            "user_id"
          ],
          "decorators": [
            "app.delete('/api/v1/memory/clear/{user_id}')"
          ]
        },
        {
          "name": "memory_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            241,
            273
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/memory/stats')"
          ]
        }
      ],
      "classes": [
        {
          "name": "UserMessage",
          "docstring": "",
          "line_range": [
            21,
            26
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "MemoryQuery",
          "docstring": "",
          "line_range": [
            28,
            31
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "OllamaRequest",
          "docstring": "",
          "line_range": [
            33,
            38
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        }
      ],
      "callgraph": {
        "load_user_memory": [
          "USER_MEMORY_FILE.exists",
          "json.load",
          "print",
          "open"
        ],
        "save_user_memory": [
          "json.dump",
          "print",
          "open"
        ],
        "add_memory_endpoints": [],
        "save_user_message": [
          "HTTPException",
          "app.post",
          "load_user_memory",
          "str",
          "time.strftime",
          "len",
          "save_user_memory"
        ],
        "get_user_history": [
          "Query",
          "HTTPException",
          "app.get",
          "load_user_memory",
          "str",
          "memory.get",
          "len"
        ],
        "search_user_memory": [
          "HTTPException",
          "app.post",
          "load_user_memory",
          "msg.get",
          "str",
          "found_messages.append",
          "memory.get",
          "len"
        ],
        "chat_with_ollama": [
          "aiohttp.ClientSession",
          "HTTPException",
          "session.post",
          "response_text.split",
          "aiohttp.ClientTimeout",
          "resp.text",
          "app.post",
          "data.get",
          "str",
          "time.strftime",
          "resp.json",
          "len",
          "toml.load",
          "open"
        ],
        "clear_user_memory": [
          "HTTPException",
          "load_user_memory",
          "str",
          "time.strftime",
          "memory.get",
          "len",
          "save_user_memory",
          "app.delete"
        ],
        "memory_stats": [
          "USER_MEMORY_FILE.stat",
          "user_stats.append",
          "HTTPException",
          "sum",
          "memory.values",
          "time.ctime",
          "app.get",
          "last_message.get",
          "load_user_memory",
          "user_stats.sort",
          "str",
          "USER_MEMORY_FILE.exists",
          "memory.items",
          "int",
          "len"
        ]
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "Dict",
        "FastAPI",
        "HTTPException",
        "List",
        "Optional",
        "Path",
        "Query",
        "aiohttp",
        "asyncio",
        "datetime",
        "fastapi",
        "json",
        "pathlib",
        "pydantic",
        "time",
        "timedelta",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "006c88b6-c9d2-40d1-bf47-9b0e2d81a740"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.fastapi_ollama_server",
      "path": ".ARCHIVE/archive/telegram_experiments/fastapi_ollama_server.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f LLMStruct\n- Ollama \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f\n- \u041f\u0430\u043c\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \n- \u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b\n- \u0412\u0441\u0435 \u0432 \u043e\u0434\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b",
      "functions": [
        {
          "name": "load_user_memory",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439",
          "line_range": [
            56,
            64
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "save_user_memory",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439",
          "line_range": [
            66,
            72
          ],
          "parameters": [
            "memory"
          ],
          "decorators": []
        },
        {
          "name": "load_ollama_config",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 Ollama",
          "line_range": [
            74,
            82
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "root",
          "docstring": "\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 API",
          "line_range": [
            114,
            131
          ],
          "parameters": [],
          "decorators": [
            "app.get('/', summary='API Information')"
          ]
        },
        {
          "name": "health_check",
          "docstring": "Health check \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 Ollama",
          "line_range": [
            134,
            155
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/system/health', response_model=HealthResponse)"
          ]
        },
        {
          "name": "system_status",
          "docstring": "\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            158,
            246
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/system/status')"
          ]
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
          "line_range": [
            251,
            319
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/chat/ollama')"
          ]
        },
        {
          "name": "get_ollama_models",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Ollama",
          "line_range": [
            322,
            350
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/ollama/models')"
          ]
        },
        {
          "name": "save_user_message",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            355,
            389
          ],
          "parameters": [
            "message"
          ],
          "decorators": [
            "app.post('/api/v1/memory/save')"
          ]
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            392,
            415
          ],
          "parameters": [
            "user_id",
            "limit"
          ],
          "decorators": [
            "app.get('/api/v1/memory/history/{user_id}')"
          ]
        },
        {
          "name": "memory_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            418,
            450
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/memory/stats')"
          ]
        },
        {
          "name": "clear_user_memory",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            453,
            476
          ],
          "parameters": [
            "user_id"
          ],
          "decorators": [
            "app.delete('/api/v1/memory/clear/{user_id}')"
          ]
        },
        {
          "name": "startup_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435",
          "line_range": [
            481,
            488
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('startup')"
          ]
        },
        {
          "name": "shutdown_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435",
          "line_range": [
            491,
            499
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('shutdown')"
          ]
        }
      ],
      "classes": [
        {
          "name": "UserMessage",
          "docstring": "",
          "line_range": [
            85,
            90
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "OllamaRequest",
          "docstring": "",
          "line_range": [
            92,
            97
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ChatMessage",
          "docstring": "",
          "line_range": [
            99,
            102
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HealthResponse",
          "docstring": "",
          "line_range": [
            104,
            109
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        }
      ],
      "callgraph": {
        "load_user_memory": [
          "USER_MEMORY_FILE.exists",
          "json.load",
          "print",
          "open"
        ],
        "save_user_memory": [
          "json.dump",
          "print",
          "open"
        ],
        "load_ollama_config": [
          "toml.load",
          "open"
        ],
        "root": [
          "app.get"
        ],
        "health_check": [
          "aiohttp.ClientSession",
          "load_ollama_config",
          "app.get",
          "aiohttp.ClientTimeout",
          "HealthResponse",
          "time.strftime",
          "track_workflow_event",
          "session.get"
        ],
        "system_status": [
          "HTTPException",
          "struct_file.exists",
          "app.get",
          "USER_MEMORY_FILE.exists",
          "track_task_start",
          "int",
          "aiohttp.ClientSession",
          "aiohttp.ClientTimeout",
          "load_user_memory",
          "len",
          "time.time",
          "Path",
          "struct_file.stat",
          "tracker.get_session_summary",
          "sum",
          "time.ctime",
          "get_metrics_tracker",
          "data.get",
          "str",
          "time.strftime",
          "resp.json",
          "track_workflow_event",
          "load_ollama_config",
          "memory.values",
          "track_task_complete",
          "session.get"
        ],
        "chat_with_ollama": [
          "HTTPException",
          "track_task_start",
          "int",
          "aiohttp.ClientSession",
          "session.post",
          "aiohttp.ClientTimeout",
          "app.post",
          "len",
          "time.time",
          "response_text.split",
          "get_metrics_tracker",
          "resp.text",
          "data.get",
          "str",
          "time.strftime",
          "resp.json",
          "track_workflow_event",
          "load_ollama_config",
          "track_task_complete",
          "tracker.track_token_usage"
        ],
        "get_ollama_models": [
          "aiohttp.ClientSession",
          "load_ollama_config",
          "HTTPException",
          "model.get",
          "app.get",
          "aiohttp.ClientTimeout",
          "models.append",
          "data.get",
          "str",
          "len",
          "resp.json",
          "session.get"
        ],
        "save_user_message": [
          "HTTPException",
          "app.post",
          "load_user_memory",
          "str",
          "time.strftime",
          "track_workflow_event",
          "len",
          "save_user_memory"
        ],
        "get_user_history": [
          "Query",
          "HTTPException",
          "app.get",
          "load_user_memory",
          "str",
          "memory.get",
          "track_workflow_event",
          "len"
        ],
        "memory_stats": [
          "USER_MEMORY_FILE.stat",
          "user_stats.append",
          "HTTPException",
          "sum",
          "memory.values",
          "time.ctime",
          "app.get",
          "last_message.get",
          "load_user_memory",
          "user_stats.sort",
          "str",
          "USER_MEMORY_FILE.exists",
          "memory.items",
          "int",
          "len"
        ],
        "clear_user_memory": [
          "HTTPException",
          "load_user_memory",
          "str",
          "time.strftime",
          "memory.get",
          "track_workflow_event",
          "len",
          "save_user_memory",
          "app.delete"
        ],
        "startup_event": [
          "track_workflow_event",
          "get_metrics_tracker",
          "app.on_event",
          "print"
        ],
        "shutdown_event": [
          "print",
          "get_metrics_tracker",
          "app.on_event",
          "tracker.save_session",
          "track_workflow_event"
        ]
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "CORSMiddleware",
        "Dict",
        "FastAPI",
        "HTTPException",
        "List",
        "Optional",
        "Path",
        "Query",
        "aiohttp",
        "asyncio",
        "datetime",
        "fastapi",
        "fastapi.middleware.cors",
        "get_metrics_tracker",
        "json",
        "pathlib",
        "pydantic",
        "src.llmstruct.metrics_tracker",
        "time",
        "timedelta",
        "toml",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event",
        "typing",
        "uvicorn"
      ],
      "hash": null,
      "artifact_id": "43ec7aec-82d8-469f-a9f2-a8a9b3a8be95"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.test_read_telegram",
      "path": ".ARCHIVE/archive/telegram_experiments/test_read_telegram.py",
      "category": "test",
      "module_doc": "\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0441\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438\u0437 Telegram",
      "functions": [
        {
          "name": "read_latest_message",
          "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438\u0437 \u043b\u043e\u0433\u043e\u0432",
          "line_range": [
            9,
            41
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            43,
            53
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "read_latest_message": [
          "Path",
          "messages_log.exists",
          "print",
          "content.split",
          "last_entry.strip",
          "len",
          "f.read",
          "open"
        ],
        "main": [
          "print",
          "read_latest_message"
        ]
      },
      "dependencies": [
        "Path",
        "pathlib",
        "time"
      ],
      "hash": null,
      "artifact_id": "fb5c3cb7-18d4-423c-9fc4-abae3f9120ac"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.dummy_work_executor",
      "path": ".ARCHIVE/archive/telegram_experiments/dummy_work_executor.py",
      "category": "core",
      "module_doc": "Dummy Work Executor - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0432\u0443\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u0439 \u0441\u0432\u044f\u0437\u0438 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0447\u0435\u0440\u0435\u0437 Telegram",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            340,
            350
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            31,
            43
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0447\u0435\u0440\u0435\u0437 Telegram",
          "line_range": [
            45,
            61
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "check_user_response",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u043b\u043e\u0433\u043e\u0432",
          "line_range": [
            63,
            102
          ],
          "parameters": [
            "self",
            "expected_keywords"
          ],
          "decorators": []
        },
        {
          "name": "wait_for_user_input",
          "docstring": "\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u043e\u043c",
          "line_range": [
            104,
            118
          ],
          "parameters": [
            "self",
            "timeout",
            "expected_keywords"
          ],
          "decorators": []
        },
        {
          "name": "dummy_phase_1",
          "docstring": "Dummy Phase 1: \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0432\u044f\u0437\u0438",
          "line_range": [
            120,
            173
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "dummy_phase_2",
          "docstring": "Dummy Phase 2: \u0413\u043e\u0442\u043e\u0432\u043d\u043e\u0441\u0442\u044c \u043a \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u0443",
          "line_range": [
            175,
            296
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "execute_dummy_work",
          "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430 dummy work",
          "line_range": [
            298,
            338
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "DummyWorkExecutor",
          "docstring": "\u0418\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c dummy work \u0441 \u0434\u0432\u0443\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u0439 \u0441\u0432\u044f\u0437\u044c\u044e",
          "line_range": [
            28,
            338
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                31,
                43
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0447\u0435\u0440\u0435\u0437 Telegram",
              "line_range": [
                45,
                61
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "check_user_response",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u043b\u043e\u0433\u043e\u0432",
              "line_range": [
                63,
                102
              ],
              "parameters": [
                "self",
                "expected_keywords"
              ]
            },
            {
              "name": "wait_for_user_input",
              "docstring": "\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u043e\u043c",
              "line_range": [
                104,
                118
              ],
              "parameters": [
                "self",
                "timeout",
                "expected_keywords"
              ]
            },
            {
              "name": "dummy_phase_1",
              "docstring": "Dummy Phase 1: \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0432\u044f\u0437\u0438",
              "line_range": [
                120,
                173
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "dummy_phase_2",
              "docstring": "Dummy Phase 2: \u0413\u043e\u0442\u043e\u0432\u043d\u043e\u0441\u0442\u044c \u043a \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u0443",
              "line_range": [
                175,
                296
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "execute_dummy_work",
              "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430 dummy work",
              "line_range": [
                298,
                338
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Bot",
          "os.getenv",
          "track_workflow_event",
          "int",
          "time.time"
        ],
        "send_message": [
          "print"
        ],
        "check_user_response": [
          "Path",
          "message.lower",
          "messages_log.exists",
          "print",
          "message_line.replace",
          "next",
          "keyword.lower",
          "content.split",
          "line.startswith",
          "last_entry.strip",
          "len",
          "f.read",
          "open"
        ],
        "wait_for_user_input": [
          "asyncio.sleep",
          "time.time",
          "self.check_user_response",
          "print"
        ],
        "dummy_phase_1": [
          "print",
          "self.send_message",
          "track_task_complete",
          "track_task_start",
          "self.wait_for_user_input"
        ],
        "dummy_phase_2": [
          "print",
          "self.send_message",
          "user_message.lower",
          "track_task_complete",
          "track_task_start",
          "track_workflow_event",
          "self.wait_for_user_input",
          "any"
        ],
        "execute_dummy_work": [
          "print",
          "self.send_message",
          "asyncio.sleep",
          "self.dummy_phase_2",
          "datetime.now",
          "str",
          "self.dummy_phase_1",
          "track_workflow_event"
        ],
        "main": [
          "executor.execute_dummy_work",
          "DummyWorkExecutor",
          "print"
        ]
      },
      "dependencies": [
        "Bot",
        "Path",
        "asyncio",
        "datetime",
        "os",
        "pathlib",
        "src.llmstruct.metrics_tracker",
        "sys",
        "telegram",
        "time",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event"
      ],
      "hash": null,
      "artifact_id": "d70da9e0-f3fe-4ac7-b4b5-c20fb1ecc8af"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_telegram_reader",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_telegram_reader.py",
      "category": "core",
      "module_doc": "Cursor Telegram Reader - \u0427\u0438\u0442\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0437 Telegram \u0431\u043e\u0442\u0430 \u0434\u043b\u044f Cursor",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            153,
            202
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            20
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_latest_messages",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
          "line_range": [
            22,
            56
          ],
          "parameters": [
            "self",
            "count"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_commands",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f Cursor \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0447\u0430\u0441\u044b",
          "line_range": [
            58,
            91
          ],
          "parameters": [
            "self",
            "hours"
          ],
          "decorators": []
        },
        {
          "name": "watch_new_messages",
          "docstring": "\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438",
          "line_range": [
            93,
            127
          ],
          "parameters": [
            "self",
            "callback"
          ],
          "decorators": []
        },
        {
          "name": "print_status",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
          "line_range": [
            129,
            151
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TelegramLogReader",
          "docstring": "\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c \u043b\u043e\u0433\u043e\u0432 Telegram \u0434\u043b\u044f Cursor",
          "line_range": [
            13,
            151
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                20
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_latest_messages",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
              "line_range": [
                22,
                56
              ],
              "parameters": [
                "self",
                "count"
              ]
            },
            {
              "name": "get_cursor_commands",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f Cursor \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0447\u0430\u0441\u044b",
              "line_range": [
                58,
                91
              ],
              "parameters": [
                "self",
                "hours"
              ]
            },
            {
              "name": "watch_new_messages",
              "docstring": "\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438",
              "line_range": [
                93,
                127
              ],
              "parameters": [
                "self",
                "callback"
              ]
            },
            {
              "name": "print_status",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
              "line_range": [
                129,
                151
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "get_latest_messages": [
          "print",
          "type_line.replace",
          "message_line.replace",
          "messages.append",
          "content.split",
          "entry.strip",
          "len",
          "f.read",
          "open",
          "user_line.replace"
        ],
        "get_cursor_commands": [
          "f.readlines",
          "line.split",
          "timedelta",
          "print",
          "datetime.now",
          "commands.append",
          "datetime.strptime",
          "len",
          "open"
        ],
        "watch_new_messages": [
          "time.sleep",
          "print",
          "new_content.strip",
          "callback",
          "f.seek",
          "f.read",
          "open"
        ],
        "print_status": [
          "print",
          "datetime.fromtimestamp"
        ],
        "main": [
          "print",
          "reader.watch_new_messages",
          "reader.get_cursor_commands",
          "reader.get_latest_messages",
          "TelegramLogReader",
          "reader.print_status",
          "int",
          "len"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "sys",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "176dc567-b6bc-425e-ac0e-36a80802e051"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_bot_messenger",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_bot_messenger.py",
      "category": "core",
      "module_doc": "Cursor Bot Messenger - \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0447\u0435\u0440\u0435\u0437 Telegram",
      "functions": [
        {
          "name": "send_to_user",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
          "line_range": [
            113,
            116
          ],
          "parameters": [
            "message"
          ],
          "decorators": []
        },
        {
          "name": "wait_for_response",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430",
          "line_range": [
            118,
            121
          ],
          "parameters": [
            "timeout_minutes"
          ],
          "decorators": []
        },
        {
          "name": "interactive_communication",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0432\u043e\u043f\u0440\u043e\u0441 \u0438 \u0434\u043e\u0436\u0434\u0430\u0442\u044c\u0441\u044f \u043e\u0442\u0432\u0435\u0442\u0430",
          "line_range": [
            123,
            134
          ],
          "parameters": [
            "question",
            "timeout_minutes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            22,
            30
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_user_chat_id",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 chat_id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u043b\u043e\u0433\u043e\u0432",
          "line_range": [
            32,
            50
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e",
          "line_range": [
            52,
            71
          ],
          "parameters": [
            "self",
            "message",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "wait_for_user_response",
          "docstring": "\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            73,
            111
          ],
          "parameters": [
            "self",
            "timeout_minutes"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            145,
            146
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorBotMessenger",
          "docstring": "\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438\u0437 Cursor \u0432 Telegram",
          "line_range": [
            19,
            111
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                22,
                30
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_user_chat_id",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 chat_id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u043b\u043e\u0433\u043e\u0432",
              "line_range": [
                32,
                50
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e",
              "line_range": [
                52,
                71
              ],
              "parameters": [
                "self",
                "message",
                "parse_mode"
              ]
            },
            {
              "name": "wait_for_user_response",
              "docstring": "\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                73,
                111
              ],
              "parameters": [
                "self",
                "timeout_minutes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "os.getenv",
          "Bot",
          "ValueError"
        ],
        "get_user_chat_id": [
          "line.split",
          "reversed",
          "messages_log.exists",
          "print",
          "content.split",
          "int",
          "f.read",
          "open"
        ],
        "send_message": [
          "self.get_user_chat_id",
          "print"
        ],
        "wait_for_user_response": [
          "reversed",
          "messages_log.exists",
          "print",
          "asyncio.sleep",
          "datetime.now",
          "content.split",
          "entry.strip",
          "len",
          "datetime.fromisoformat",
          "time.time",
          "f.read",
          "open"
        ],
        "send_to_user": [
          "CursorBotMessenger",
          "messenger.send_message"
        ],
        "wait_for_response": [
          "CursorBotMessenger",
          "messenger.wait_for_user_response"
        ],
        "interactive_communication": [
          "CursorBotMessenger",
          "messenger.send_message",
          "messenger.wait_for_user_response"
        ],
        "main": [
          "send_to_user"
        ]
      },
      "dependencies": [
        "Bot",
        "Path",
        "asyncio",
        "datetime",
        "logging",
        "os",
        "pathlib",
        "sys",
        "telegram",
        "time"
      ],
      "hash": null,
      "artifact_id": "17dc0f16-8970-4e00-b4cb-4d69b310d061"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.send_test_message",
      "path": ".ARCHIVE/archive/telegram_experiments/send_test_message.py",
      "category": "core",
      "module_doc": "Test message sender to Telegram\n\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438 \u0436\u0434\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
      "functions": [
        {
          "name": "send_test_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 Telegram",
          "line_range": [
            13,
            57
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "wait_for_user_response",
          "docstring": "\u0416\u0434\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u043b\u043e\u0433\u043e\u0432",
          "line_range": [
            59,
            101
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
          "line_range": [
            103,
            120
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "send_test_message": [
          "client.post",
          "print",
          "httpx.AsyncClient",
          "datetime.now",
          "os.getenv"
        ],
        "wait_for_user_response": [
          "f.readlines",
          "line.split",
          "reversed",
          "print",
          "log_time.strftime",
          "asyncio.sleep",
          "datetime.now",
          "timestamp_str.replace",
          "datetime.fromisoformat",
          "open",
          "start_time.strftime"
        ],
        "main": [
          "send_test_message",
          "wait_for_user_response",
          "print"
        ]
      },
      "dependencies": [
        "asyncio",
        "datetime",
        "httpx",
        "os",
        "sys"
      ],
      "hash": null,
      "artifact_id": "a3ed78d0-f80d-4a31-8ac5-701e934a8c21"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.test_master_plan_flow",
      "path": ".ARCHIVE/archive/telegram_experiments/test_master_plan_flow.py",
      "category": "test",
      "module_doc": "Test Master Plan Flow - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u0430",
      "functions": [
        {
          "name": "test_full_flow",
          "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430",
          "line_range": [
            174,
            208
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            18,
            21
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "dummy_work_phase",
          "docstring": "Dummy \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0441\u0432\u044f\u0437\u0438",
          "line_range": [
            23,
            86
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "wait_for_master_plan_approval",
          "docstring": "\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u0430",
          "line_range": [
            88,
            114
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "execute_git_operations",
          "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 git \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439",
          "line_range": [
            116,
            155
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_master_plan_execution",
          "docstring": "\u041d\u0430\u0447\u0430\u043b\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u0430",
          "line_range": [
            157,
            172
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "MasterPlanExecutor",
          "docstring": "\u0418\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u0430 \u0441 \u0434\u0432\u0443\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u0439 \u0441\u0432\u044f\u0437\u044c\u044e",
          "line_range": [
            15,
            172
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                18,
                21
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "dummy_work_phase",
              "docstring": "Dummy \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0441\u0432\u044f\u0437\u0438",
              "line_range": [
                23,
                86
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "wait_for_master_plan_approval",
              "docstring": "\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u0430",
              "line_range": [
                88,
                114
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "execute_git_operations",
              "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 git \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439",
              "line_range": [
                116,
                155
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_master_plan_execution",
              "docstring": "\u041d\u0430\u0447\u0430\u043b\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u0430",
              "line_range": [
                157,
                172
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "dummy_work_phase": [
          "send_to_user",
          "interactive_communication",
          "print",
          "asyncio.sleep",
          "datetime.now"
        ],
        "wait_for_master_plan_approval": [
          "send_to_user",
          "print",
          "wait_for_response",
          "response.lower",
          "any"
        ],
        "execute_git_operations": [
          "send_to_user",
          "print",
          "asyncio.sleep"
        ],
        "start_master_plan_execution": [
          "send_to_user"
        ],
        "test_full_flow": [
          "send_to_user",
          "executor.start_master_plan_execution",
          "print",
          "executor.wait_for_master_plan_approval",
          "executor.dummy_work_phase",
          "executor.execute_git_operations",
          "MasterPlanExecutor"
        ]
      },
      "dependencies": [
        "Path",
        "asyncio",
        "cursor_bot_messenger",
        "datetime",
        "interactive_communication",
        "os",
        "pathlib",
        "send_to_user",
        "time",
        "wait_for_response"
      ],
      "hash": null,
      "artifact_id": "2e73bcd2-320b-46be-b8d8-f18940c733fc"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_integration",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_integration.py",
      "category": "core",
      "module_doc": "\ud83c\udfaf Cursor Integration for Telegram Master Controller\n\u041f\u0440\u043e\u0441\u0442\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 Cursor \u0441 Telegram \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u043c",
      "functions": [
        {
          "name": "check_telegram_commands",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            142,
            144
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "send_telegram_message",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            146,
            148
          ],
          "parameters": [
            "message",
            "msg_type"
          ],
          "decorators": []
        },
        {
          "name": "update_telegram_status",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0443\u0441\u0430",
          "line_range": [
            150,
            152
          ],
          "parameters": [
            "message",
            "status"
          ],
          "decorators": []
        },
        {
          "name": "send_progress",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            154,
            156
          ],
          "parameters": [
            "step",
            "details",
            "progress"
          ],
          "decorators": []
        },
        {
          "name": "send_completion",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438",
          "line_range": [
            158,
            160
          ],
          "parameters": [
            "summary",
            "success"
          ],
          "decorators": []
        },
        {
          "name": "ask_confirmation",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f",
          "line_range": [
            162,
            164
          ],
          "parameters": [
            "question",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            25
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "check_for_commands",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            27,
            48
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_response",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0432 Telegram",
          "line_range": [
            50,
            78
          ],
          "parameters": [
            "self",
            "message",
            "response_type"
          ],
          "decorators": []
        },
        {
          "name": "update_status",
          "docstring": "\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f",
          "line_range": [
            80,
            96
          ],
          "parameters": [
            "self",
            "message",
            "status"
          ],
          "decorators": []
        },
        {
          "name": "send_progress_update",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            98,
            109
          ],
          "parameters": [
            "self",
            "step",
            "details",
            "progress"
          ],
          "decorators": []
        },
        {
          "name": "send_completion",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438",
          "line_range": [
            111,
            124
          ],
          "parameters": [
            "self",
            "summary",
            "success"
          ],
          "decorators": []
        },
        {
          "name": "ask_for_confirmation",
          "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441\u0438\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            126,
            137
          ],
          "parameters": [
            "self",
            "question",
            "context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorTelegramIntegration",
          "docstring": "\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f Cursor \u0441 Telegram Master Controller",
          "line_range": [
            13,
            137
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                25
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "check_for_commands",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                27,
                48
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_response",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0432 Telegram",
              "line_range": [
                50,
                78
              ],
              "parameters": [
                "self",
                "message",
                "response_type"
              ]
            },
            {
              "name": "update_status",
              "docstring": "\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f",
              "line_range": [
                80,
                96
              ],
              "parameters": [
                "self",
                "message",
                "status"
              ]
            },
            {
              "name": "send_progress_update",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                98,
                109
              ],
              "parameters": [
                "self",
                "step",
                "details",
                "progress"
              ]
            },
            {
              "name": "send_completion",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438",
              "line_range": [
                111,
                124
              ],
              "parameters": [
                "self",
                "summary",
                "success"
              ]
            },
            {
              "name": "ask_for_confirmation",
              "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441\u0438\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                126,
                137
              ],
              "parameters": [
                "self",
                "question",
                "context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "set"
        ],
        "check_for_commands": [
          "cmd.get",
          "new_commands.append",
          "json.load",
          "print",
          "open"
        ],
        "send_response": [
          "json.load",
          "responses.append",
          "print",
          "json.dump",
          "datetime.now",
          "len",
          "int",
          "time.time",
          "open"
        ],
        "update_status": [
          "print",
          "json.dump",
          "open",
          "datetime.now"
        ],
        "send_progress_update": [
          "self.update_status",
          "self.send_response"
        ],
        "send_completion": [
          "_integration.send_completion"
        ],
        "ask_for_confirmation": [
          "self.update_status",
          "self.send_response"
        ],
        "check_telegram_commands": [
          "_integration.check_for_commands"
        ],
        "send_telegram_message": [
          "_integration.send_response"
        ],
        "update_telegram_status": [
          "_integration.update_status"
        ],
        "send_progress": [
          "_integration.send_progress_update"
        ],
        "ask_confirmation": [
          "_integration.ask_for_confirmation"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "e14b5144-fb51-4c65-896f-69e9aad50563"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_simple_integration",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_simple_integration.py",
      "category": "core",
      "module_doc": "\u041f\u0440\u043e\u0441\u0442\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 Cursor \u0441 Telegram \u0431\u043e\u0442\u043e\u043c\n\u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 JSON \u0444\u0430\u0439\u043b\u044b \u0431\u0435\u0437 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439",
      "functions": [
        {
          "name": "ensure_data_dir",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445",
          "line_range": [
            20,
            27
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_user_messages",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n\nArgs:\n    limit: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e 10)\n\nReturns:\n    \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            29,
            50
          ],
          "parameters": [
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "send_to_telegram",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram \u0447\u0435\u0440\u0435\u0437 \u0431\u043e\u0442\u0430\n\nArgs:\n    text: \u0422\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\n    message_type: \u0422\u0438\u043f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (response, notification, etc.)\n\nReturns:\n    True \u0435\u0441\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c",
          "line_range": [
            52,
            94
          ],
          "parameters": [
            "text",
            "message_type"
          ],
          "decorators": []
        },
        {
          "name": "check_new_messages",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438\n\nArgs:\n    last_check_timestamp: ISO timestamp \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\n\nReturns:\n    \u0421\u043f\u0438\u0441\u043e\u043a \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            96,
            126
          ],
          "parameters": [
            "last_check_timestamp"
          ],
          "decorators": []
        },
        {
          "name": "get_last_message",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n\nReturns:\n    \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 None",
          "line_range": [
            128,
            136
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_conversation_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430\n\nReturns:\n    \u0421\u0442\u0430\u0442\u0443\u0441 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430 \u0441 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438",
          "line_range": [
            138,
            178
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "start_conversation_monitor",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n\nArgs:\n    callback_func: \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n    check_interval: \u0418\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445",
          "line_range": [
            180,
            214
          ],
          "parameters": [
            "callback_func",
            "check_interval"
          ],
          "decorators": []
        },
        {
          "name": "quick_reply",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u0432 Telegram",
          "line_range": [
            218,
            220
          ],
          "parameters": [
            "text"
          ],
          "decorators": []
        },
        {
          "name": "quick_status",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            222,
            224
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "quick_notification",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u043e\u0435 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435",
          "line_range": [
            226,
            228
          ],
          "parameters": [
            "text"
          ],
          "decorators": []
        },
        {
          "name": "list_recent_messages",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
          "line_range": [
            230,
            243
          ],
          "parameters": [
            "count"
          ],
          "decorators": []
        },
        {
          "name": "test_integration",
          "docstring": "\u0422\u0435\u0441\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438",
          "line_range": [
            245,
            264
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "ensure_data_dir": [
          "file.write_text",
          "file.exists",
          "DATA_DIR.mkdir"
        ],
        "get_user_messages": [
          "json.load",
          "ensure_data_dir",
          "print",
          "open"
        ],
        "send_to_telegram": [
          "json.load",
          "ensure_data_dir",
          "print",
          "json.dump",
          "datetime.now",
          "commands.append",
          "len",
          "int",
          "time.time",
          "open"
        ],
        "check_new_messages": [
          "new_messages.append",
          "json.load",
          "ensure_data_dir",
          "print",
          "msg.get",
          "open"
        ],
        "get_last_message": [
          "get_user_messages"
        ],
        "show_conversation_status": [
          "cmd.get",
          "Path",
          "json.load",
          "ensure_data_dir",
          "print",
          "CURSOR_COMMANDS_FILE.exists",
          "BOT_RESPONSES_FILE.exists",
          "datetime.now",
          "str",
          "USER_MESSAGES_FILE.exists",
          "len",
          "open"
        ],
        "start_conversation_monitor": [
          "time.sleep",
          "ensure_data_dir",
          "print",
          "datetime.now",
          "msg.get",
          "check_new_messages",
          "max",
          "len",
          "callback_func"
        ],
        "quick_reply": [
          "send_to_telegram"
        ],
        "quick_status": [
          "send_to_telegram",
          "datetime.now"
        ],
        "quick_notification": [
          "send_to_telegram"
        ],
        "list_recent_messages": [
          "print",
          "get_user_messages",
          "msg.get",
          "enumerate",
          "len"
        ],
        "test_integration": [
          "show_conversation_status",
          "ensure_data_dir",
          "print",
          "send_to_telegram"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "sys",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "a9ec9f83-b351-4013-bb32-b0d789ae9eb5"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.simple_telegram_bot",
      "path": ".ARCHIVE/archive/telegram_experiments/simple_telegram_bot.py",
      "category": "core",
      "module_doc": "\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u043d\u0430\u0434\u0435\u0436\u043d\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f Cursor \u2194 Telegram\n\u0411\u0435\u0437 asyncio \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432, \u0441 \u043f\u0440\u043e\u0441\u0442\u044b\u043c threading \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u043c",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            277,
            297
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            34,
            64
          ],
          "parameters": [
            "self",
            "token",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
          "line_range": [
            66,
            84
          ],
          "parameters": [
            "self",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "get_updates",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0442 Telegram",
          "line_range": [
            86,
            108
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_user_message",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            110,
            153
          ],
          "parameters": [
            "self",
            "update"
          ],
          "decorators": []
        },
        {
          "name": "process_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            155,
            173
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "handle_update",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f",
          "line_range": [
            175,
            193
          ],
          "parameters": [
            "self",
            "update"
          ],
          "decorators": []
        },
        {
          "name": "check_cursor_commands",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434 \u043e\u0442 Cursor",
          "line_range": [
            195,
            225
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0446\u0438\u043a\u043b \u0431\u043e\u0442\u0430",
          "line_range": [
            227,
            258
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cursor_watcher",
          "docstring": "\u041d\u0430\u0431\u043b\u044e\u0434\u0430\u0442\u0435\u043b\u044c \u0437\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438 Cursor",
          "line_range": [
            260,
            270
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "stop",
          "docstring": "\u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0431\u043e\u0442\u0430",
          "line_range": [
            272,
            274
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "SimpleTelegramBot",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u043e\u0439 Telegram \u0431\u043e\u0442 \u0431\u0435\u0437 asyncio",
          "line_range": [
            31,
            274
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                34,
                64
              ],
              "parameters": [
                "self",
                "token",
                "chat_id"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
              "line_range": [
                66,
                84
              ],
              "parameters": [
                "self",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "get_updates",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0442 Telegram",
              "line_range": [
                86,
                108
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_user_message",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                110,
                153
              ],
              "parameters": [
                "self",
                "update"
              ]
            },
            {
              "name": "process_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                155,
                173
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "handle_update",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f",
              "line_range": [
                175,
                193
              ],
              "parameters": [
                "self",
                "update"
              ]
            },
            {
              "name": "check_cursor_commands",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434 \u043e\u0442 Cursor",
              "line_range": [
                195,
                225
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run",
              "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0446\u0438\u043a\u043b \u0431\u043e\u0442\u0430",
              "line_range": [
                227,
                258
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cursor_watcher",
              "docstring": "\u041d\u0430\u0431\u043b\u044e\u0434\u0430\u0442\u0435\u043b\u044c \u0437\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438 Cursor",
              "line_range": [
                260,
                270
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "stop",
              "docstring": "\u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0431\u043e\u0442\u0430",
              "line_range": [
                272,
                274
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "requests.Session",
          "Retry",
          "file.exists",
          "file.write_text",
          "HTTPAdapter"
        ],
        "send_message": [
          "logger.info",
          "logger.error",
          "response.raise_for_status"
        ],
        "get_updates": [
          "response.json",
          "data.get",
          "logger.error",
          "response.raise_for_status"
        ],
        "save_user_message": [
          "json.load",
          "logger.info",
          "messages.append",
          "message.get",
          "json.dump",
          "user.get",
          "datetime.now",
          "update.get",
          "logger.error",
          "len",
          "open",
          "chat.get"
        ],
        "process_message": [
          "message.get",
          "text.startswith",
          "user.get",
          "datetime.now"
        ],
        "handle_update": [
          "self.process_message",
          "self.send_message",
          "update.get",
          "max",
          "self.save_user_message",
          "logger.error"
        ],
        "check_cursor_commands": [
          "cmd.get",
          "json.load",
          "self.send_message",
          "json.dump",
          "datetime.now",
          "processed_commands.append",
          "logger.error",
          "open"
        ],
        "run": [
          "threading.Thread",
          "time.sleep",
          "self.get_updates",
          "logger.info",
          "self.send_message",
          "logger.error",
          "cursor_thread.start",
          "self.handle_update"
        ],
        "cursor_watcher": [
          "self.check_cursor_commands",
          "time.sleep",
          "logger.error",
          "logger.info"
        ],
        "stop": [],
        "main": [
          "logger.info",
          "os.getenv",
          "SimpleTelegramBot",
          "logger.error",
          "bot.run",
          "bot.stop"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "HTTPAdapter",
        "Optional",
        "Path",
        "Retry",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "requests",
        "requests.adapters",
        "threading",
        "time",
        "typing",
        "urllib3.util.retry"
      ],
      "hash": null,
      "artifact_id": "3759916b-0785-4e45-87b2-32e52825ba8d"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.start_simple_telegram",
      "path": ".ARCHIVE/archive/telegram_experiments/start_simple_telegram.py",
      "category": "core",
      "module_doc": "\u0421\u043a\u0440\u0438\u043f\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f Cursor \u2194 Telegram\n\u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0438 \u043d\u0430\u0434\u0435\u0436\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439",
      "functions": [
        {
          "name": "check_token",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430",
          "line_range": [
            14,
            23
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_dependencies",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439",
          "line_range": [
            25,
            34
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "start_bot",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0431\u043e\u0442\u0430",
          "line_range": [
            36,
            76
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_integration",
          "docstring": "\u0422\u0435\u0441\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438",
          "line_range": [
            78,
            87
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_status",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            89,
            112
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            114,
            144
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_token": [
          "os.getenv",
          "print"
        ],
        "check_dependencies": [
          "print"
        ],
        "start_bot": [
          "subprocess.Popen",
          "print",
          "check_token",
          "process.kill",
          "check_dependencies",
          "process.terminate",
          "Path.cwd",
          "process.wait"
        ],
        "test_integration": [
          "test_integration",
          "print"
        ],
        "show_status": [
          "list_recent_messages",
          "print",
          "status.get",
          "msg.get",
          "show_conversation_status"
        ],
        "main": [
          "print",
          "show_status",
          "start_bot",
          "len",
          "test_integration"
        ]
      },
      "dependencies": [
        "Path",
        "cursor_simple_integration",
        "list_recent_messages",
        "os",
        "pathlib",
        "requests",
        "show_conversation_status",
        "signal",
        "subprocess",
        "sys",
        "test_integration",
        "time"
      ],
      "hash": null,
      "artifact_id": "f3ac27a7-0d80-478c-8170-485979e97d57"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.chat_bot_fastapi_enhanced",
      "path": ".ARCHIVE/archive/telegram_experiments/chat_bot_fastapi_enhanced.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 ENHANCED Telegram Bot \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432\u0430\u0448 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f:\n- \u041a\u0435\u0448\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 WebSocket\n- \u041f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 API endpoints\n- \u041c\u0435\u0442\u0440\u0438\u043a \u0447\u0435\u0440\u0435\u0437 API\n\n\u0411\u043e\u043b\u044c\u0448\u0435 \u043d\u0438\u043a\u0430\u043a\u0438\u0445 CLI \u0432\u044b\u0437\u043e\u0432\u043e\u0432 - \u0432\u0441\u0435 \u0447\u0435\u0440\u0435\u0437 API!",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            342,
            378
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            35,
            43
          ],
          "parameters": [
            "self",
            "telegram_token",
            "fastapi_base_url"
          ],
          "decorators": []
        },
        {
          "name": "setup_session",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            45,
            48
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "close_session",
          "docstring": "\u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            50,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "health_check_api",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            55,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_user_message_via_api",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            71,
            102
          ],
          "parameters": [
            "self",
            "user_id",
            "username",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_user_history_via_api",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            104,
            122
          ],
          "parameters": [
            "self",
            "user_id",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama_via_api",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 FastAPI endpoint",
          "line_range": [
            124,
            150
          ],
          "parameters": [
            "self",
            "message",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_system_metrics_via_api",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            152,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            164,
            172
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            174,
            198
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "memory_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory - \u0442\u0435\u0441\u0442 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            200,
            207
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "history_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /history - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e",
          "line_range": [
            209,
            228
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "health_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /health - \u0441\u0442\u0430\u0442\u0443\u0441 FastAPI",
          "line_range": [
            230,
            237
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "metrics_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics - \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            239,
            269
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "ollama_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u0447\u0430\u0442 \u0441 Ollama",
          "line_range": [
            271,
            289
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            291,
            321
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
          "line_range": [
            323,
            340
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "FastAPIIntegratedBot",
          "docstring": "Telegram \u0431\u043e\u0442 \u0441 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
          "line_range": [
            32,
            340
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                35,
                43
              ],
              "parameters": [
                "self",
                "telegram_token",
                "fastapi_base_url"
              ]
            },
            {
              "name": "setup_session",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                45,
                48
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "close_session",
              "docstring": "\u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                50,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "health_check_api",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
              "line_range": [
                55,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_user_message_via_api",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                71,
                102
              ],
              "parameters": [
                "self",
                "user_id",
                "username",
                "message"
              ]
            },
            {
              "name": "get_user_history_via_api",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                104,
                122
              ],
              "parameters": [
                "self",
                "user_id",
                "limit"
              ]
            },
            {
              "name": "chat_with_ollama_via_api",
              "docstring": "\u0427\u0430\u0442 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 FastAPI endpoint",
              "line_range": [
                124,
                150
              ],
              "parameters": [
                "self",
                "message",
                "context"
              ]
            },
            {
              "name": "get_system_metrics_via_api",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                152,
                162
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                164,
                172
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                174,
                198
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "memory_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory - \u0442\u0435\u0441\u0442 \u043f\u0430\u043c\u044f\u0442\u0438",
              "line_range": [
                200,
                207
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "history_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /history - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e",
              "line_range": [
                209,
                228
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "health_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /health - \u0441\u0442\u0430\u0442\u0443\u0441 FastAPI",
              "line_range": [
                230,
                237
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "metrics_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics - \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                239,
                269
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "ollama_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u0447\u0430\u0442 \u0441 Ollama",
              "line_range": [
                271,
                289
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                291,
                321
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "run",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
              "line_range": [
                323,
                340
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.setup_handlers",
          "Application.builder"
        ],
        "setup_session": [
          "aiohttp.ClientSession"
        ],
        "close_session": [],
        "health_check_api": [
          "logger.info",
          "data.get",
          "self.setup_session",
          "logger.error",
          "resp.json"
        ],
        "save_user_message_via_api": [
          "logger.info",
          "datetime.now",
          "self.setup_session",
          "logger.error",
          "logger.warning"
        ],
        "get_user_history_via_api": [
          "logger.info",
          "data.get",
          "self.setup_session",
          "logger.error",
          "resp.json",
          "len",
          "logger.warning"
        ],
        "chat_with_ollama_via_api": [
          "logger.info",
          "data.get",
          "self.setup_session",
          "str",
          "logger.error",
          "resp.json"
        ],
        "get_system_metrics_via_api": [
          "self.setup_session",
          "str",
          "resp.json"
        ],
        "setup_handlers": [
          "MessageHandler",
          "CommandHandler"
        ],
        "start_command": [
          "self.save_user_message_via_api"
        ],
        "memory_command": [
          "self.save_user_message_via_api"
        ],
        "history_command": [
          "int",
          "len",
          "msg.get",
          "self.get_user_history_via_api"
        ],
        "health_command": [
          "self.health_check_api"
        ],
        "metrics_command": [
          "struct_json.get",
          "metrics.get",
          "features.get",
          "self.get_system_metrics_via_api",
          "system.get"
        ],
        "ollama_command": [
          "self.save_user_message_via_api",
          "self.chat_with_ollama_via_api",
          "status_msg.edit_text"
        ],
        "handle_message": [
          "self.chat_with_ollama_via_api",
          "self.get_user_history_via_api",
          "msg.get",
          "message_text.lower",
          "message_text.replace",
          "message_text.startswith",
          "enumerate",
          "self.save_user_message_via_api"
        ],
        "run": [
          "logger.info",
          "self.health_check_api",
          "self.close_session",
          "logger.error",
          "logger.warning"
        ],
        "main": [
          "loop.run_until_complete",
          "exit",
          "print",
          "asyncio.set_event_loop",
          "FastAPIIntegratedBot",
          "asyncio.get_event_loop",
          "loop.close",
          "os.getenv",
          "bot.run",
          "traceback.print_exc",
          "asyncio.new_event_loop"
        ]
      },
      "dependencies": [
        "Application",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "json",
        "logging",
        "os",
        "telegram",
        "telegram.ext",
        "timedelta",
        "traceback",
        "websockets"
      ],
      "hash": null,
      "artifact_id": "0319a4d5-06ff-4072-96ba-152116cd22ff"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.chat_bot_enhanced",
      "path": ".ARCHIVE/archive/telegram_bots/chat_bot_enhanced.py",
      "category": "core",
      "module_doc": "Enhanced LLMStruct Telegram Bot\n- Smart reply detection (reply_to_message support)\n- LLM chain: Ollama \u2192 Grok \u2192 Anthropic\n- Cursor command forwarding to Cursor AI\n- Concise responses by default",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point",
          "line_range": [
            439,
            459
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            37,
            68
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "log_user_message",
          "docstring": "Log user message with reply context",
          "line_range": [
            70,
            83
          ],
          "parameters": [
            "self",
            "user_info",
            "message",
            "message_type",
            "chat_id",
            "reply_to_message"
          ],
          "decorators": []
        },
        {
          "name": "log_cursor_command",
          "docstring": "Log cursor command for processing",
          "line_range": [
            85,
            95
          ],
          "parameters": [
            "self",
            "message",
            "user_info",
            "reply_context"
          ],
          "decorators": []
        },
        {
          "name": "ollama_chat",
          "docstring": "Try Ollama first",
          "line_range": [
            97,
            114
          ],
          "parameters": [
            "self",
            "message",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "grok_chat",
          "docstring": "Fallback to Grok",
          "line_range": [
            116,
            143
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "anthropic_chat",
          "docstring": "Final fallback to Anthropic",
          "line_range": [
            145,
            173
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "llm_chain_response",
          "docstring": "LLM chain: Ollama \u2192 Grok \u2192 Anthropic",
          "line_range": [
            175,
            194
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "Setup bot handlers",
          "line_range": [
            196,
            208
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "Start command handler",
          "line_range": [
            210,
            236
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "help_command",
          "docstring": "Help command",
          "line_range": [
            238,
            260
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "Status command",
          "line_range": [
            262,
            287
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "Handle all text messages with smart routing",
          "line_range": [
            289,
            368
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "Run bot synchronously with timeout",
          "line_range": [
            370,
            437
          ],
          "parameters": [
            "self",
            "timeout_minutes"
          ],
          "decorators": []
        },
        {
          "name": "signal_handler",
          "docstring": "",
          "line_range": [
            374,
            377
          ],
          "parameters": [
            "signum",
            "frame"
          ],
          "decorators": []
        },
        {
          "name": "run_with_timeout",
          "docstring": "",
          "line_range": [
            396,
            413
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EnhancedLLMStructChatBot",
          "docstring": "Enhanced Telegram bot with LLM chain and smart reply detection",
          "line_range": [
            34,
            437
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                37,
                68
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "log_user_message",
              "docstring": "Log user message with reply context",
              "line_range": [
                70,
                83
              ],
              "parameters": [
                "self",
                "user_info",
                "message",
                "message_type",
                "chat_id",
                "reply_to_message"
              ]
            },
            {
              "name": "log_cursor_command",
              "docstring": "Log cursor command for processing",
              "line_range": [
                85,
                95
              ],
              "parameters": [
                "self",
                "message",
                "user_info",
                "reply_context"
              ]
            },
            {
              "name": "ollama_chat",
              "docstring": "Try Ollama first",
              "line_range": [
                97,
                114
              ],
              "parameters": [
                "self",
                "message",
                "model"
              ]
            },
            {
              "name": "grok_chat",
              "docstring": "Fallback to Grok",
              "line_range": [
                116,
                143
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "anthropic_chat",
              "docstring": "Final fallback to Anthropic",
              "line_range": [
                145,
                173
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "llm_chain_response",
              "docstring": "LLM chain: Ollama \u2192 Grok \u2192 Anthropic",
              "line_range": [
                175,
                194
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "Setup bot handlers",
              "line_range": [
                196,
                208
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "Start command handler",
              "line_range": [
                210,
                236
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "help_command",
              "docstring": "Help command",
              "line_range": [
                238,
                260
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "Status command",
              "line_range": [
                262,
                287
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "Handle all text messages with smart routing",
              "line_range": [
                289,
                368
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "Run bot synchronously with timeout",
              "line_range": [
                370,
                437
              ],
              "parameters": [
                "self",
                "timeout_minutes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Bot",
          "get_metrics_tracker",
          "os.makedirs",
          "os.getenv",
          "logging.basicConfig",
          "track_workflow_event",
          "logging.getLogger"
        ],
        "log_user_message": [
          "user_info.get",
          "datetime.now",
          "reply_to_message.get",
          "f.write",
          "open"
        ],
        "log_cursor_command": [
          "user_info.get",
          "f.write",
          "open",
          "datetime.now"
        ],
        "ollama_chat": [
          "response.json",
          "client.post",
          "httpx.AsyncClient",
          "result.get"
        ],
        "grok_chat": [
          "response.json",
          "client.post",
          "httpx.AsyncClient"
        ],
        "anthropic_chat": [
          "response.json",
          "client.post",
          "httpx.AsyncClient"
        ],
        "llm_chain_response": [
          "self.grok_chat",
          "self.ollama_chat",
          "self.anthropic_chat"
        ],
        "setup_handlers": [
          "Application.builder",
          "MessageHandler",
          "CommandHandler"
        ],
        "start_command": [],
        "help_command": [],
        "status_command": [
          "client.get",
          "status_parts.append",
          "httpx.AsyncClient",
          "response.json",
          "len"
        ],
        "handle_message": [
          "self.log_cursor_command",
          "cursor_message.split",
          "self.llm_chain_response",
          "user.to_dict",
          "response.split",
          "reply_to_message.get",
          "text.split",
          "track_task_start",
          "len",
          "message.reply_text",
          "track_task_complete",
          "track_token_usage",
          "track_workflow_event",
          "int",
          "time.time",
          "text.lower",
          "self.log_user_message"
        ],
        "run_sync": [],
        "signal_handler": [],
        "run_with_timeout": [
          "application.stop",
          "asyncio.sleep",
          "application.start",
          "application.shutdown",
          "application.initialize",
          "time.time"
        ],
        "main": [
          "argparse.ArgumentParser",
          "print",
          "bot.run_sync",
          "os.getenv",
          "parser.parse_args",
          "parser.add_argument",
          "EnhancedLLMStructChatBot"
        ]
      },
      "dependencies": [
        "Any",
        "Application",
        "Bot",
        "CommandHandler",
        "ContextTypes",
        "Dict",
        "MessageHandler",
        "Optional",
        "Update",
        "argparse",
        "asyncio",
        "datetime",
        "filters",
        "get_metrics_tracker",
        "httpx",
        "json",
        "logging",
        "os",
        "signal",
        "src.llmstruct.metrics_tracker",
        "sys",
        "telegram",
        "telegram.ext",
        "time",
        "traceback",
        "track_task_complete",
        "track_task_start",
        "track_token_usage",
        "track_workflow_event",
        "typing"
      ],
      "hash": null,
      "artifact_id": "81b3d3a1-a7bc-495c-a0b8-013b681f75fc"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.cursor_telegram_bridge",
      "path": ".ARCHIVE/archive/telegram_bots/cursor_telegram_bridge.py",
      "category": "core",
      "module_doc": "Cursor \u2194 Telegram Bridge\n\u0427\u0438\u0442\u0430\u0435\u0442 cursor \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u044b \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0432 Telegram",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point",
          "line_range": [
            218,
            226
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            36
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_telegram_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 Telegram",
          "line_range": [
            38,
            62
          ],
          "parameters": [
            "self",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "process_cursor_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c cursor \u043a\u043e\u043c\u0430\u043d\u0434\u0443",
          "line_range": [
            64,
            85
          ],
          "parameters": [
            "self",
            "command_data"
          ],
          "decorators": []
        },
        {
          "name": "simulate_cursor_processing",
          "docstring": "\u0421\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434s Cursor AI",
          "line_range": [
            87,
            175
          ],
          "parameters": [
            "self",
            "command",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_cursor_command",
          "docstring": "Handle cursor command (sync wrapper)",
          "line_range": [
            177,
            188
          ],
          "parameters": [
            "self",
            "command_data"
          ],
          "decorators": []
        },
        {
          "name": "start_bridge",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c bridge",
          "line_range": [
            190,
            216
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorTelegramBridge",
          "docstring": "Bridge \u043c\u0435\u0436\u0434\u0443 cursor \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438 \u0438 Telegram \u043e\u0442\u0432\u0435\u0442\u0430\u043c\u0438",
          "line_range": [
            21,
            216
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                36
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_telegram_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 Telegram",
              "line_range": [
                38,
                62
              ],
              "parameters": [
                "self",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "process_cursor_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c cursor \u043a\u043e\u043c\u0430\u043d\u0434\u0443",
              "line_range": [
                64,
                85
              ],
              "parameters": [
                "self",
                "command_data"
              ]
            },
            {
              "name": "simulate_cursor_processing",
              "docstring": "\u0421\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434s Cursor AI",
              "line_range": [
                87,
                175
              ],
              "parameters": [
                "self",
                "command",
                "context"
              ]
            },
            {
              "name": "handle_cursor_command",
              "docstring": "Handle cursor command (sync wrapper)",
              "line_range": [
                177,
                188
              ],
              "parameters": [
                "self",
                "command_data"
              ]
            },
            {
              "name": "start_bridge",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c bridge",
              "line_range": [
                190,
                216
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getenv",
          "EnhancedCursorTelegramReader"
        ],
        "send_telegram_message": [
          "client.post",
          "print",
          "httpx.AsyncClient"
        ],
        "process_cursor_command": [
          "print",
          "result.get",
          "command_data.get",
          "self.send_telegram_message",
          "self.simulate_cursor_processing"
        ],
        "simulate_cursor_processing": [
          "asyncio.sleep",
          "len",
          "any",
          "command.lower"
        ],
        "handle_cursor_command": [
          "self.process_cursor_command",
          "asyncio.run",
          "print"
        ],
        "start_bridge": [
          "asyncio.run",
          "print",
          "self.send_telegram_message"
        ],
        "main": [
          "CursorTelegramBridge",
          "os.getenv",
          "print",
          "bridge.start_bridge"
        ]
      },
      "dependencies": [
        "Dict",
        "EnhancedCursorTelegramReader",
        "Optional",
        "asyncio",
        "cursor_telegram_reader_enhanced",
        "datetime",
        "httpx",
        "json",
        "os",
        "sys",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "eea6abe9-a87e-45c2-b42c-cb285e6c53f6"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.test_bot_quick",
      "path": ".ARCHIVE/archive/telegram_bots/test_bot_quick.py",
      "category": "test",
      "module_doc": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0442\u0435\u0441\u0442 Telegram \u0431\u043e\u0442\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u0432\u044f\u0437\u0438",
      "functions": [
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            25,
            30
          ],
          "parameters": [
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            32,
            38
          ],
          "parameters": [
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            40,
            58
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "start_command": [],
        "handle_message": [],
        "main": [
          "logger.info",
          "application.add_handler",
          "application.run_polling",
          "Application.builder",
          "logger.error",
          "MessageHandler",
          "CommandHandler"
        ]
      },
      "dependencies": [
        "Application",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "Update",
        "filters",
        "logging",
        "os",
        "telegram",
        "telegram.ext"
      ],
      "hash": null,
      "artifact_id": "6ada56ff-fab2-402d-9151-d47224087b01"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.start_ollama_bot",
      "path": ".ARCHIVE/archive/telegram_bots/start_ollama_bot.py",
      "category": "core",
      "module_doc": "Quick launcher for Ollama Chat Bot",
      "functions": [
        {
          "name": "check_dependencies",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438",
          "line_range": [
            11,
            25
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_services",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u044c \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432",
          "line_range": [
            27,
            65
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            67,
            118
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_ollama",
          "docstring": "",
          "line_range": [
            36,
            51
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_dependencies": [
          "print",
          "__import__"
        ],
        "check_services": [
          "print"
        ],
        "check_ollama": [
          "print",
          "client.get",
          "httpx.AsyncClient",
          "response.json",
          "len"
        ],
        "main": [
          "Path",
          "print",
          "subprocess.run",
          "check_dependencies",
          "os.getenv",
          "Path.cwd",
          "check_services"
        ]
      },
      "dependencies": [
        "Path",
        "asyncio",
        "httpx",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "a952d1b5-e2d9-46f9-806f-cc2e2822b456"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.ollama_chat_bot",
      "path": ".ARCHIVE/archive/telegram_bots/ollama_chat_bot.py",
      "category": "core",
      "module_doc": "LLMStruct Ollama Chat Bot\n\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0439 \u0431\u043e\u0442 \u0441 \u041e\u043b\u043b\u0430\u043c\u043e\u0439, fallback \u043d\u0430 \u0413\u0440\u043e\u043a/\u0410\u043d\u0442\u0440\u043e\u043f\u0438\u043a, \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043e\u043c \u043a \u0444\u0430\u0439\u043b\u0430\u043c",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0422\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430",
          "line_range": [
            646,
            668
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            53,
            57
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama",
          "line_range": [
            59,
            83
          ],
          "parameters": [
            "self",
            "messages",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_grok",
          "docstring": "Fallback \u043d\u0430 Grok",
          "line_range": [
            85,
            110
          ],
          "parameters": [
            "self",
            "messages"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_anthropic",
          "docstring": "Fallback \u043d\u0430 Anthropic",
          "line_range": [
            112,
            153
          ],
          "parameters": [
            "self",
            "messages"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            158,
            159
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "read_file",
          "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u0444\u0430\u0439\u043b \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e",
          "line_range": [
            161,
            189
          ],
          "parameters": [
            "self",
            "file_path",
            "max_lines"
          ],
          "decorators": []
        },
        {
          "name": "list_directory",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
          "line_range": [
            191,
            223
          ],
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "run_cli_command",
          "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 CLI \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            225,
            269
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            274,
            284
          ],
          "parameters": [
            "self",
            "storage_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            286,
            315
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            317,
            341
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_or_create_session",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            343,
            360
          ],
          "parameters": [
            "self",
            "chat_id",
            "user_id",
            "user_name"
          ],
          "decorators": []
        },
        {
          "name": "add_message",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            362,
            380
          ],
          "parameters": [
            "self",
            "session",
            "role",
            "content",
            "model_used"
          ],
          "decorators": []
        },
        {
          "name": "get_conversation_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430 \u0434\u043b\u044f LLM",
          "line_range": [
            382,
            394
          ],
          "parameters": [
            "self",
            "session",
            "max_messages"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            399,
            408
          ],
          "parameters": [
            "self",
            "bot_token"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 Telegram",
          "line_range": [
            410,
            420
          ],
          "parameters": [
            "self",
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "_send_single_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0434\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
          "line_range": [
            422,
            438
          ],
          "parameters": [
            "self",
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "get_updates",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0442 Telegram",
          "line_range": [
            440,
            455
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_task_report",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0447\u0435\u0442 \u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0447\u0430\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430",
          "line_range": [
            457,
            472
          ],
          "parameters": [
            "self",
            "task_description",
            "status",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ai",
          "docstring": "\u041e\u0431\u0449\u0430\u0435\u0442\u0441\u044f \u0441 AI (Ollama + fallback)",
          "line_range": [
            474,
            506
          ],
          "parameters": [
            "self",
            "session",
            "user_message"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
          "line_range": [
            508,
            621
          ],
          "parameters": [
            "self",
            "update"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0446\u0438\u043a\u043b \u0431\u043e\u0442\u0430",
          "line_range": [
            623,
            644
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ChatMessage",
          "docstring": "",
          "line_range": [
            31,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ChatSession",
          "docstring": "",
          "line_range": [
            39,
            48
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ModelManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 LLM \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430\u043c\u0438",
          "line_range": [
            50,
            153
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                53,
                57
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "chat_with_ollama",
              "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama",
              "line_range": [
                59,
                83
              ],
              "parameters": [
                "self",
                "messages",
                "model"
              ]
            },
            {
              "name": "chat_with_grok",
              "docstring": "Fallback \u043d\u0430 Grok",
              "line_range": [
                85,
                110
              ],
              "parameters": [
                "self",
                "messages"
              ]
            },
            {
              "name": "chat_with_anthropic",
              "docstring": "Fallback \u043d\u0430 Anthropic",
              "line_range": [
                112,
                153
              ],
              "parameters": [
                "self",
                "messages"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "FileManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043e\u043c \u043a \u0444\u0430\u0439\u043b\u0430\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0447\u0435\u0440\u0435\u0437 CLI",
          "line_range": [
            155,
            269
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                158,
                159
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "read_file",
              "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u0444\u0430\u0439\u043b \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e",
              "line_range": [
                161,
                189
              ],
              "parameters": [
                "self",
                "file_path",
                "max_lines"
              ]
            },
            {
              "name": "list_directory",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
              "line_range": [
                191,
                223
              ],
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "run_cli_command",
              "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 CLI \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                225,
                269
              ],
              "parameters": [
                "self",
                "command"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "MemoryManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u043e\u0432",
          "line_range": [
            271,
            394
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                274,
                284
              ],
              "parameters": [
                "self",
                "storage_dir"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                286,
                315
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435",
              "line_range": [
                317,
                341
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_or_create_session",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                343,
                360
              ],
              "parameters": [
                "self",
                "chat_id",
                "user_id",
                "user_name"
              ]
            },
            {
              "name": "add_message",
              "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                362,
                380
              ],
              "parameters": [
                "self",
                "session",
                "role",
                "content",
                "model_used"
              ]
            },
            {
              "name": "get_conversation_context",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430 \u0434\u043b\u044f LLM",
              "line_range": [
                382,
                394
              ],
              "parameters": [
                "self",
                "session",
                "max_messages"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "OllamaChatBot",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 Telegram \u0431\u043e\u0442\u0430",
          "line_range": [
            396,
            644
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                399,
                408
              ],
              "parameters": [
                "self",
                "bot_token"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 Telegram",
              "line_range": [
                410,
                420
              ],
              "parameters": [
                "self",
                "chat_id",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "_send_single_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0434\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
              "line_range": [
                422,
                438
              ],
              "parameters": [
                "self",
                "chat_id",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "get_updates",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0442 Telegram",
              "line_range": [
                440,
                455
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_task_report",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0447\u0435\u0442 \u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0447\u0430\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430",
              "line_range": [
                457,
                472
              ],
              "parameters": [
                "self",
                "task_description",
                "status",
                "details"
              ]
            },
            {
              "name": "chat_with_ai",
              "docstring": "\u041e\u0431\u0449\u0430\u0435\u0442\u0441\u044f \u0441 AI (Ollama + fallback)",
              "line_range": [
                474,
                506
              ],
              "parameters": [
                "self",
                "session",
                "user_message"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
              "line_range": [
                508,
                621
              ],
              "parameters": [
                "self",
                "update"
              ]
            },
            {
              "name": "run",
              "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0446\u0438\u043a\u043b \u0431\u043e\u0442\u0430",
              "line_range": [
                623,
                644
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "MemoryManager",
          "ModelManager",
          "logger.info",
          "FileManager"
        ],
        "chat_with_ollama": [
          "client.post",
          "result.get",
          "httpx.AsyncClient",
          "response.json",
          "logger.error"
        ],
        "chat_with_grok": [
          "response.json",
          "client.post",
          "logger.error",
          "httpx.AsyncClient"
        ],
        "chat_with_anthropic": [
          "client.post",
          "httpx.AsyncClient",
          "response.json",
          "logger.error",
          "user_messages.append"
        ],
        "read_file": [
          "f.readlines",
          "str",
          "full_path.is_dir",
          "full_path.exists",
          "len",
          "open"
        ],
        "list_directory": [
          "item.is_dir",
          "items.append",
          "sorted",
          "item.stat",
          "str",
          "full_path.is_dir",
          "full_path.exists",
          "len",
          "full_path.iterdir"
        ],
        "run_cli_command": [
          "subprocess.run",
          "command.split",
          "str",
          "len",
          "safe_commands.keys"
        ],
        "_load_data": [
          "ChatSession",
          "json.load",
          "logger.info",
          "ChatMessage",
          "logger.error",
          "data.values",
          "len",
          "session_data.get",
          "open"
        ],
        "_save_data": [
          "asdict",
          "json.dump",
          "logger.error",
          "open"
        ],
        "get_or_create_session": [
          "ChatSession",
          "datetime.now"
        ],
        "add_message": [
          "len",
          "self._save_data",
          "ChatMessage",
          "datetime.now"
        ],
        "get_conversation_context": [
          "context.append"
        ],
        "send_message": [
          "len",
          "range",
          "self._send_single_message",
          "enumerate"
        ],
        "_send_single_message": [
          "response.json",
          "client.post",
          "logger.error",
          "httpx.AsyncClient"
        ],
        "get_updates": [
          "response.json",
          "client.get",
          "logger.error",
          "httpx.AsyncClient"
        ],
        "send_task_report": [
          "logger.info",
          "datetime.now",
          "self.send_message"
        ],
        "chat_with_ai": [
          "context.append",
          "logger.info"
        ],
        "handle_message": [
          "self.chat_with_ai",
          "logger.info",
          "self.send_message",
          "message.get",
          "update.get",
          "text.startswith",
          "len"
        ],
        "run": [
          "logger.info",
          "self.get_updates",
          "asyncio.sleep",
          "updates.get",
          "self.handle_message",
          "logger.error"
        ],
        "main": [
          "Path",
          "print",
          "bot.send_task_report",
          "os.getenv",
          "OllamaChatBot",
          "bot.run"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asdict",
        "asyncio",
        "dataclass",
        "dataclasses",
        "datetime",
        "httpx",
        "json",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "84e1bc53-1342-4f42-98e0-5364e3d1d143"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.demo_bot_features",
      "path": ".ARCHIVE/archive/telegram_bots/demo_bot_features.py",
      "category": "core",
      "module_doc": "\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 Ollama Chat Bot",
      "functions": [
        {
          "name": "demo_task_reporting",
          "docstring": "\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043e\u0442\u0447\u0435\u0442\u043e\u0432",
          "line_range": [
            9,
            57
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_bot_commands",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u043c\u0430\u043d\u0434 \u0431\u043e\u0442\u0430",
          "line_range": [
            59,
            78
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_architecture",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            80,
            106
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438",
          "line_range": [
            108,
            125
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "demo_task_reporting": [
          "time.sleep",
          "report_started",
          "print",
          "report_completed",
          "report_progress"
        ],
        "show_bot_commands": [
          "print"
        ],
        "show_architecture": [
          "print"
        ],
        "main": [
          "show_architecture",
          "show_bot_commands",
          "demo_task_reporting",
          "print"
        ]
      },
      "dependencies": [
        "cursor_reporter",
        "report_completed",
        "report_progress",
        "report_started",
        "time"
      ],
      "hash": null,
      "artifact_id": "637afd64-6ab6-4e3b-aced-3713c068494f"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.cursor_reporter",
      "path": ".ARCHIVE/archive/telegram_bots/cursor_reporter.py",
      "category": "core",
      "module_doc": "Cursor Task Reporter\n\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043e\u0442\u0447\u0435\u0442\u043e\u0432 \u043e \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u0432 Telegram",
      "functions": [
        {
          "name": "report_task_started",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            93,
            96
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_task_progress",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            98,
            101
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_task_completed",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            103,
            106
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_task_failed",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            108,
            111
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_started",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f - \u043e\u0442\u0447\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435",
          "line_range": [
            114,
            116
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_progress",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f - \u043e\u0442\u0447\u0435\u0442 \u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0435",
          "line_range": [
            118,
            120
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_completed",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f - \u043e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438",
          "line_range": [
            122,
            124
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_failed",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f - \u043e\u0442\u0447\u0435\u0442 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435",
          "line_range": [
            126,
            128
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            21
          ],
          "parameters": [
            "self",
            "bot_token",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "send_report",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0434\u0430\u0447\u0435",
          "line_range": [
            23,
            90
          ],
          "parameters": [
            "self",
            "task",
            "status",
            "details",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "escape_markdown",
          "docstring": "\u042d\u043a\u0440\u0430\u043d\u0438\u0440\u0443\u0435\u0442 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b Markdown",
          "line_range": [
            48,
            53
          ],
          "parameters": [
            "text"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorReporter",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0447\u0435\u0442\u044b \u043e \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u0432 Telegram",
          "line_range": [
            13,
            90
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                21
              ],
              "parameters": [
                "self",
                "bot_token",
                "chat_id"
              ]
            },
            {
              "name": "send_report",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0434\u0430\u0447\u0435",
              "line_range": [
                23,
                90
              ],
              "parameters": [
                "self",
                "task",
                "status",
                "details",
                "priority"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getenv",
          "ValueError"
        ],
        "send_report": [
          "status.lower",
          "priority.lower",
          "priority_emojis.get",
          "status_emojis.get"
        ],
        "escape_markdown": [
          "text.replace"
        ],
        "report_task_started": [
          "reporter.send_report",
          "CursorReporter"
        ],
        "report_task_progress": [
          "reporter.send_report",
          "CursorReporter"
        ],
        "report_task_completed": [
          "reporter.send_report",
          "CursorReporter"
        ],
        "report_task_failed": [
          "reporter.send_report",
          "CursorReporter"
        ],
        "report_started": [
          "report_task_started",
          "asyncio.run"
        ],
        "report_progress": [
          "report_task_progress",
          "asyncio.run"
        ],
        "report_completed": [
          "report_task_completed",
          "asyncio.run"
        ],
        "report_failed": [
          "report_task_failed",
          "asyncio.run"
        ]
      },
      "dependencies": [
        "Optional",
        "asyncio",
        "datetime",
        "httpx",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "cda6f35e-33ec-4c0d-a8c9-3b5bff613bf9"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.ollama_api_bot",
      "path": ".ARCHIVE/archive/telegram_bots/ollama_api_bot.py",
      "category": "core",
      "module_doc": "Ollama Chat Bot \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0439 FastAPI API \u0432\u043c\u0435\u0441\u0442\u043e CLI\n\u0411\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 API \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            468,
            487
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            50,
            52
          ],
          "parameters": [
            "self",
            "api_base_url"
          ],
          "decorators": []
        },
        {
          "name": "__aenter__",
          "docstring": "",
          "line_range": [
            54,
            56
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__aexit__",
          "docstring": "",
          "line_range": [
            58,
            60
          ],
          "parameters": [
            "self",
            "exc_type",
            "exc_val",
            "exc_tb"
          ],
          "decorators": []
        },
        {
          "name": "health_check",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f API",
          "line_range": [
            62,
            65
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "system_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            67,
            70
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "chat_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0447\u0430\u0442 \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            72,
            80
          ],
          "parameters": [
            "self",
            "message",
            "context_mode",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "execute_cli_command",
          "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 CLI \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            82,
            89
          ],
          "parameters": [
            "self",
            "command",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "get_metrics",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            91,
            94
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            99,
            101
          ],
          "parameters": [
            "self",
            "api_client"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u044f\u043c\u043e\u0439 API",
          "line_range": [
            103,
            121
          ],
          "parameters": [
            "self",
            "messages",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_api_fallback",
          "docstring": "Fallback \u0447\u0435\u0440\u0435\u0437 FastAPI \u0447\u0430\u0442",
          "line_range": [
            123,
            130
          ],
          "parameters": [
            "self",
            "message",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            135,
            137
          ],
          "parameters": [
            "self",
            "api_client"
          ],
          "decorators": []
        },
        {
          "name": "read_file",
          "docstring": "\u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430 \u0447\u0435\u0440\u0435\u0437 API \u043a\u043e\u043c\u0430\u043d\u0434\u044b",
          "line_range": [
            139,
            147
          ],
          "parameters": [
            "self",
            "file_path",
            "max_lines"
          ],
          "decorators": []
        },
        {
          "name": "get_system_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            149,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            167,
            175
          ],
          "parameters": [
            "self",
            "storage_dir",
            "api_client"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0441\u0435\u0441\u0441\u0438\u0439 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            177,
            189
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0439 \u0432 \u0444\u0430\u0439\u043b",
          "line_range": [
            191,
            208
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_or_create_session",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            210,
            227
          ],
          "parameters": [
            "self",
            "chat_id",
            "user_id",
            "user_name"
          ],
          "decorators": []
        },
        {
          "name": "add_message",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            229,
            246
          ],
          "parameters": [
            "self",
            "session",
            "role",
            "content",
            "model_used"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            251,
            264
          ],
          "parameters": [
            "self",
            "bot_token",
            "api_base_url"
          ],
          "decorators": []
        },
        {
          "name": "_signal_handler",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441\u0438\u0433\u043d\u0430\u043b\u043e\u0432 \u0434\u043b\u044f graceful shutdown",
          "line_range": [
            266,
            269
          ],
          "parameters": [
            "self",
            "signum",
            "frame"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
          "line_range": [
            271,
            284
          ],
          "parameters": [
            "self",
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "get_updates",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0442 Telegram",
          "line_range": [
            286,
            295
          ],
          "parameters": [
            "self",
            "offset"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ai",
          "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 AI \u0447\u0435\u0440\u0435\u0437 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 API",
          "line_range": [
            297,
            321
          ],
          "parameters": [
            "self",
            "session",
            "user_message"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
          "line_range": [
            323,
            361
          ],
          "parameters": [
            "self",
            "update"
          ],
          "decorators": []
        },
        {
          "name": "handle_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434 \u0431\u043e\u0442\u0430",
          "line_range": [
            363,
            431
          ],
          "parameters": [
            "self",
            "chat_id",
            "command",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
          "line_range": [
            433,
            466
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ChatMessage",
          "docstring": "",
          "line_range": [
            28,
            33
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ChatSession",
          "docstring": "",
          "line_range": [
            36,
            45
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "APIClient",
          "docstring": "\u041a\u043b\u0438\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c",
          "line_range": [
            47,
            94
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                50,
                52
              ],
              "parameters": [
                "self",
                "api_base_url"
              ]
            },
            {
              "name": "__aenter__",
              "docstring": "",
              "line_range": [
                54,
                56
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "__aexit__",
              "docstring": "",
              "line_range": [
                58,
                60
              ],
              "parameters": [
                "self",
                "exc_type",
                "exc_val",
                "exc_tb"
              ]
            },
            {
              "name": "health_check",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f API",
              "line_range": [
                62,
                65
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "system_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                67,
                70
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "chat_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0447\u0430\u0442 \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                72,
                80
              ],
              "parameters": [
                "self",
                "message",
                "context_mode",
                "session_id"
              ]
            },
            {
              "name": "execute_cli_command",
              "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 CLI \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                82,
                89
              ],
              "parameters": [
                "self",
                "command",
                "args"
              ]
            },
            {
              "name": "get_metrics",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a",
              "line_range": [
                91,
                94
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "ModelManager",
          "docstring": "\u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 LLM \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441 API \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439",
          "line_range": [
            96,
            130
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                99,
                101
              ],
              "parameters": [
                "self",
                "api_client"
              ]
            },
            {
              "name": "chat_with_ollama",
              "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u044f\u043c\u043e\u0439 API",
              "line_range": [
                103,
                121
              ],
              "parameters": [
                "self",
                "messages",
                "model"
              ]
            },
            {
              "name": "chat_with_api_fallback",
              "docstring": "Fallback \u0447\u0435\u0440\u0435\u0437 FastAPI \u0447\u0430\u0442",
              "line_range": [
                123,
                130
              ],
              "parameters": [
                "self",
                "message",
                "session_id"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "FileManager",
          "docstring": "\u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0444\u0430\u0439\u043b\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            132,
            162
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                135,
                137
              ],
              "parameters": [
                "self",
                "api_client"
              ]
            },
            {
              "name": "read_file",
              "docstring": "\u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430 \u0447\u0435\u0440\u0435\u0437 API \u043a\u043e\u043c\u0430\u043d\u0434\u044b",
              "line_range": [
                139,
                147
              ],
              "parameters": [
                "self",
                "file_path",
                "max_lines"
              ]
            },
            {
              "name": "get_system_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                149,
                162
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "MemoryManager",
          "docstring": "\u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u0430\u043c\u044f\u0442\u0438 \u0441 API \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439",
          "line_range": [
            164,
            246
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                167,
                175
              ],
              "parameters": [
                "self",
                "storage_dir",
                "api_client"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0441\u0435\u0441\u0441\u0438\u0439 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                177,
                189
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0439 \u0432 \u0444\u0430\u0439\u043b",
              "line_range": [
                191,
                208
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_or_create_session",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                210,
                227
              ],
              "parameters": [
                "self",
                "chat_id",
                "user_id",
                "user_name"
              ]
            },
            {
              "name": "add_message",
              "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                229,
                246
              ],
              "parameters": [
                "self",
                "session",
                "role",
                "content",
                "model_used"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "OllamaAPIBot",
          "docstring": "Telegram \u0431\u043e\u0442 \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
          "line_range": [
            248,
            466
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                251,
                264
              ],
              "parameters": [
                "self",
                "bot_token",
                "api_base_url"
              ]
            },
            {
              "name": "_signal_handler",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441\u0438\u0433\u043d\u0430\u043b\u043e\u0432 \u0434\u043b\u044f graceful shutdown",
              "line_range": [
                266,
                269
              ],
              "parameters": [
                "self",
                "signum",
                "frame"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
              "line_range": [
                271,
                284
              ],
              "parameters": [
                "self",
                "chat_id",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "get_updates",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0442 Telegram",
              "line_range": [
                286,
                295
              ],
              "parameters": [
                "self",
                "offset"
              ]
            },
            {
              "name": "chat_with_ai",
              "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 AI \u0447\u0435\u0440\u0435\u0437 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 API",
              "line_range": [
                297,
                321
              ],
              "parameters": [
                "self",
                "session",
                "user_message"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
              "line_range": [
                323,
                361
              ],
              "parameters": [
                "self",
                "update"
              ]
            },
            {
              "name": "handle_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434 \u0431\u043e\u0442\u0430",
              "line_range": [
                363,
                431
              ],
              "parameters": [
                "self",
                "chat_id",
                "command",
                "session"
              ]
            },
            {
              "name": "run",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
              "line_range": [
                433,
                466
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "MemoryManager",
          "signal.signal",
          "logging.getLogger"
        ],
        "__aenter__": [
          "aiohttp.ClientSession"
        ],
        "__aexit__": [],
        "health_check": [
          "response.json"
        ],
        "system_status": [
          "response.json"
        ],
        "chat_message": [
          "response.json"
        ],
        "execute_cli_command": [
          "response.json"
        ],
        "get_metrics": [
          "response.json"
        ],
        "chat_with_ollama": [
          "response.json",
          "aiohttp.ClientSession",
          "logging.error",
          "session.post"
        ],
        "chat_with_api_fallback": [
          "logging.error",
          "result.get"
        ],
        "read_file": [
          "result.get"
        ],
        "get_system_status": [],
        "_load_data": [
          "ChatSession",
          "json.load",
          "logging.error",
          "data.get",
          "ChatMessage",
          "open"
        ],
        "_save_data": [
          "logging.error",
          "asdict",
          "json.dump",
          "datetime.now",
          "sessions_data.append",
          "open"
        ],
        "get_or_create_session": [
          "ChatSession",
          "datetime.now"
        ],
        "add_message": [
          "datetime.now",
          "content.split",
          "ChatMessage",
          "self._save_data",
          "len"
        ],
        "_signal_handler": [],
        "send_message": [
          "response.json",
          "aiohttp.ClientSession",
          "session.post"
        ],
        "get_updates": [
          "response.json",
          "aiohttp.ClientSession",
          "session.get"
        ],
        "chat_with_ai": [
          "model_manager.chat_with_api_fallback",
          "ModelManager",
          "model_manager.chat_with_ollama",
          "messages.append"
        ],
        "handle_message": [
          "self.chat_with_ai",
          "self.send_message",
          "message.get",
          "locals",
          "update.get",
          "text.startswith",
          "self.handle_command"
        ],
        "handle_command": [
          "file_manager.get_system_status",
          "len",
          "FileManager",
          "self.send_message"
        ],
        "run": [
          "self.get_updates",
          "asyncio.sleep",
          "updates.get",
          "self.handle_message",
          "APIClient"
        ],
        "main": [
          "OllamaAPIBot",
          "print",
          "logging.error",
          "os.getenv",
          "bot.run",
          "logging.info"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "aiohttp",
        "asdict",
        "asyncio",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "signal",
        "typing"
      ],
      "hash": null,
      "artifact_id": "52b0ffa8-7ed2-404b-be3d-3c93c33a89f2"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.start_api_bot",
      "path": ".ARCHIVE/archive/telegram_bots/start_api_bot.py",
      "category": "core",
      "module_doc": "\u041b\u0430\u0443\u043d\u0447\u0435\u0440 \u0434\u043b\u044f Ollama API Bot \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430\u043c\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 API",
      "functions": [
        {
          "name": "check_environment",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f",
          "line_range": [
            13,
            30
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_api_server",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            32,
            53
          ],
          "parameters": [
            "api_url"
          ],
          "decorators": []
        },
        {
          "name": "check_ollama",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 Ollama",
          "line_range": [
            55,
            77
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_dependencies",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 Python \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439",
          "line_range": [
            79,
            99
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "start_api_server",
          "docstring": "\u041f\u043e\u043f\u044b\u0442\u043a\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 API \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            101,
            125
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            127,
            183
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_environment": [
          "os.getenv",
          "print"
        ],
        "check_api_server": [
          "response.json",
          "aiohttp.ClientSession",
          "session.get",
          "print"
        ],
        "check_ollama": [
          "aiohttp.ClientSession",
          "print",
          "data.get",
          "response.json",
          "len",
          "session.get"
        ],
        "check_dependencies": [
          "print",
          "__import__",
          "missing.append"
        ],
        "start_api_server": [
          "Path",
          "subprocess.Popen",
          "print",
          "time.sleep"
        ],
        "main": [
          "check_api_server",
          "Path",
          "print",
          "start_api_server",
          "asyncio.sleep",
          "check_environment",
          "check_dependencies",
          "os.getenv",
          "check_ollama",
          "bot_main"
        ]
      },
      "dependencies": [
        "Path",
        "aiohttp",
        "asyncio",
        "main",
        "ollama_api_bot",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "4323bc27-7e6d-41c0-b6ff-b86062ffeab2"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.telegram_cursor_master",
      "path": ".ARCHIVE/archive/telegram_bots/telegram_cursor_master.py",
      "category": "core",
      "module_doc": "\ud83c\udfaf LLMStruct Telegram Master Controller\n\u0415\u0434\u0438\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043b\u044f seamless \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u043e\u043c \u0447\u0435\u0440\u0435\u0437 Telegram\n\n\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430:\n- \u041e\u0434\u0438\u043d \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0439 Telegram Bot  \n- File-based communication \u0441 Cursor\n- Clear command protocols\n- Real-time status updates",
      "functions": [
        {
          "name": "main",
          "docstring": "Main function",
          "line_range": [
            355,
            395
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            40,
            60
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "Setup command and message handlers",
          "line_range": [
            62,
            75
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cmd_start",
          "docstring": "Start command",
          "line_range": [
            77,
            96
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Status command",
          "line_range": [
            98,
            119
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cmd_master",
          "docstring": "Master plan command",
          "line_range": [
            121,
            149
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cmd_stop",
          "docstring": "Stop command",
          "line_range": [
            151,
            171
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Help command",
          "line_range": [
            173,
            196
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "Handle regular messages",
          "line_range": [
            198,
            229
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "write_command",
          "docstring": "Write command to file for Cursor",
          "line_range": [
            231,
            251
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "read_status",
          "docstring": "Read current status",
          "line_range": [
            253,
            262
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_status",
          "docstring": "Update status file",
          "line_range": [
            264,
            279
          ],
          "parameters": [
            "self",
            "message",
            "status"
          ],
          "decorators": []
        },
        {
          "name": "start_response_watcher",
          "docstring": "Start watching for responses from Cursor",
          "line_range": [
            281,
            298
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_responses",
          "docstring": "Process responses from Cursor",
          "line_range": [
            300,
            316
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_response",
          "docstring": "Send response to Telegram",
          "line_range": [
            318,
            332
          ],
          "parameters": [
            "self",
            "response"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Run the master controller",
          "line_range": [
            334,
            353
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_in_thread",
          "docstring": "",
          "line_range": [
            372,
            376
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TelegramCursorMaster",
          "docstring": "\u041c\u0430\u0441\u0442\u0435\u0440-\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0447\u0435\u0440\u0435\u0437 Telegram",
          "line_range": [
            37,
            353
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                40,
                60
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "Setup command and message handlers",
              "line_range": [
                62,
                75
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cmd_start",
              "docstring": "Start command",
              "line_range": [
                77,
                96
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Status command",
              "line_range": [
                98,
                119
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cmd_master",
              "docstring": "Master plan command",
              "line_range": [
                121,
                149
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cmd_stop",
              "docstring": "Stop command",
              "line_range": [
                151,
                171
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Help command",
              "line_range": [
                173,
                196
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "Handle regular messages",
              "line_range": [
                198,
                229
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "write_command",
              "docstring": "Write command to file for Cursor",
              "line_range": [
                231,
                251
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "read_status",
              "docstring": "Read current status",
              "line_range": [
                253,
                262
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_status",
              "docstring": "Update status file",
              "line_range": [
                264,
                279
              ],
              "parameters": [
                "self",
                "message",
                "status"
              ]
            },
            {
              "name": "start_response_watcher",
              "docstring": "Start watching for responses from Cursor",
              "line_range": [
                281,
                298
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_responses",
              "docstring": "Process responses from Cursor",
              "line_range": [
                300,
                316
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_response",
              "docstring": "Send response to Telegram",
              "line_range": [
                318,
                332
              ],
              "parameters": [
                "self",
                "response"
              ]
            },
            {
              "name": "run",
              "docstring": "Run the master controller",
              "line_range": [
                334,
                353
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "Bot",
          "self.update_status",
          "logger.info",
          "Application.builder",
          "self.setup_handlers"
        ],
        "setup_handlers": [
          "MessageHandler",
          "CommandHandler"
        ],
        "cmd_start": [
          "logger.info"
        ],
        "cmd_status": [
          "logger.info",
          "status.get",
          "self.read_status"
        ],
        "cmd_master": [
          "self.write_command",
          "self.update_status",
          "logger.info",
          "datetime.now",
          "int",
          "time.time"
        ],
        "cmd_stop": [
          "self.write_command",
          "self.update_status",
          "logger.info",
          "datetime.now",
          "int",
          "time.time"
        ],
        "cmd_help": [],
        "handle_message": [
          "self.write_command",
          "logger.info",
          "datetime.now",
          "int",
          "time.time"
        ],
        "write_command": [
          "json.load",
          "logger.info",
          "json.dump",
          "commands.append",
          "logger.error",
          "len",
          "open"
        ],
        "read_status": [
          "json.load",
          "logger.error",
          "open"
        ],
        "update_status": [
          "logger.info",
          "json.dump",
          "datetime.now",
          "logger.error",
          "open"
        ],
        "start_response_watcher": [
          "asyncio.sleep",
          "self.process_responses",
          "logger.error",
          "logger.info"
        ],
        "process_responses": [
          "json.load",
          "response.get",
          "json.dump",
          "self.send_response",
          "logger.error",
          "open"
        ],
        "send_response": [
          "response.get",
          "logger.error",
          "logger.info"
        ],
        "run": [
          "asyncio.create_task",
          "logger.info",
          "self.start_response_watcher"
        ],
        "main": [
          "loop.is_running",
          "TelegramCursorMaster",
          "asyncio.get_event_loop",
          "os.getenv",
          "logger.error"
        ],
        "run_in_thread": [
          "asyncio.set_event_loop",
          "asyncio.new_event_loop",
          "new_loop.run_until_complete",
          "new_loop.close",
          "master.run"
        ]
      },
      "dependencies": [
        "Application",
        "Bot",
        "CommandHandler",
        "ContextTypes",
        "Dict",
        "List",
        "MessageHandler",
        "Optional",
        "Path",
        "Update",
        "asyncio",
        "datetime",
        "filters",
        "httpx",
        "json",
        "logging",
        "os",
        "pathlib",
        "sys",
        "telegram",
        "telegram.ext",
        "threading",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9e443a61-5ade-441b-826f-34f024911e26"
    },
    {
      "module_id": "src.scripts.session_cli",
      "path": "src/scripts/session_cli.py",
      "category": "core",
      "module_doc": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct.\nPart of the comprehensive session management system.",
      "functions": [
        {
          "name": "get_current_branch",
          "docstring": "Get current git branch.",
          "line_range": [
            24,
            31
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "save_json_file",
          "docstring": "Save JSON file with error handling.",
          "line_range": [
            42,
            51
          ],
          "parameters": [
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_current_timestamp",
          "docstring": "Get current timestamp in ISO format.",
          "line_range": [
            53,
            55
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log_event",
          "docstring": "Log an event to worklog.json.",
          "line_range": [
            57,
            88
          ],
          "parameters": [
            "event_message",
            "author"
          ],
          "decorators": []
        },
        {
          "name": "switch_session",
          "docstring": "Switch to a different session or create new one.",
          "line_range": [
            90,
            141
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "list_sessions",
          "docstring": "List all available sessions.",
          "line_range": [
            143,
            166
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_session",
          "docstring": "Show current session details.",
          "line_range": [
            168,
            183
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_worklog",
          "docstring": "Show recent worklog entries.",
          "line_range": [
            185,
            203
          ],
          "parameters": [
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main CLI interface.",
          "line_range": [
            205,
            244
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            16,
            22
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "get_current_branch": [
          "subprocess.run"
        ],
        "load_json_file": [
          "json.load",
          "print",
          "open"
        ],
        "save_json_file": [
          "os.makedirs",
          "json.dump",
          "print",
          "open"
        ],
        "get_current_timestamp": [
          "datetime.now"
        ],
        "log_event": [
          "print",
          "save_json_file",
          "current_session.get",
          "get_current_timestamp",
          "load_json_file",
          "get_current_branch"
        ],
        "switch_session": [
          "print",
          "save_json_file",
          "get_current_timestamp",
          "load_json_file",
          "get_current_branch",
          "log_event"
        ],
        "list_sessions": [
          "load_json_file",
          "current_session.get",
          "print"
        ],
        "show_current_session": [
          "load_json_file",
          "current_session.get",
          "print"
        ],
        "show_worklog": [
          "load_json_file",
          "reversed",
          "len",
          "print"
        ],
        "main": [
          "print",
          "list_sessions",
          "show_worklog",
          "show_current_session",
          "int",
          "len",
          "switch_session",
          "log_event"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "735c8833-98c9-4d73-93c6-a4a28afe9986"
    },
    {
      "module_id": "src.scripts.auto_update_struct",
      "path": "src/scripts/auto_update_struct.py",
      "category": "core",
      "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.",
      "functions": [
        {
          "name": "detect_project_changes",
          "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.",
          "line_range": [
            44,
            81
          ],
          "parameters": [
            "root_dir",
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_struct_json",
          "docstring": "Create a backup of existing struct.json.",
          "line_range": [
            84,
            97
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_struct_json",
          "docstring": "Validate generated struct.json for basic structure.",
          "line_range": [
            100,
            128
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "update_struct_json",
          "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful",
          "line_range": [
            131,
            225
          ],
          "parameters": [
            "root_dir",
            "struct_path",
            "force",
            "config_override"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for auto-update script.",
          "line_range": [
            228,
            286
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "",
          "line_range": [
            24,
            25
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            26,
            27
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_config": [],
        "load_gitignore": [],
        "generate_json": [
          "ImportError"
        ],
        "detect_project_changes": [
          "Path",
          "subprocess.run",
          "logger.info",
          "file_path.stat",
          "logger.warning"
        ],
        "backup_struct_json": [
          "Path",
          "subprocess.run",
          "logger.info",
          "datetime.now",
          "logger.error"
        ],
        "validate_struct_json": [
          "logger.info",
          "json.load",
          "logger.error",
          "open"
        ],
        "update_struct_json": [
          "config.get",
          "generate_json",
          "cli_config.get",
          "logger.info",
          "subprocess.run",
          "load_config",
          "json.dump",
          "load_gitignore",
          "open",
          "backup_struct_json",
          "os.getcwd",
          "config.update",
          "logger.error",
          "validate_struct_json",
          "detect_project_changes"
        ],
        "main": [
          "argparse.ArgumentParser",
          "print",
          "detect_project_changes",
          "update_struct_json",
          "parser.parse_args",
          "sys.exit",
          "parser.add_argument",
          "os.getcwd",
          "logging.getLogger"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "generate_json",
        "json",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "cfea11af-42a6-4a8d-b06a-ef8af8032acb"
    },
    {
      "module_id": "src.scripts.fix_hardcoded_usernames",
      "path": "src/scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "module_doc": "Fix Hardcoded Usernames Script\nAutomatically detects and replaces hardcoded usernames with dynamic values from .env or git config.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            234,
            288
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            22,
            24
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_detect_user_info",
          "docstring": "Detect user info from .env, git config, or environment.",
          "line_range": [
            26,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_env",
          "docstring": "Load user info from .env file.",
          "line_range": [
            64,
            86
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_git",
          "docstring": "Load user info from git config.",
          "line_range": [
            88,
            120
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_environment",
          "docstring": "Load user info from environment variables.",
          "line_range": [
            122,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_user_info",
          "docstring": "Get detected user information.",
          "line_range": [
            130,
            132
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            138,
            148
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_files",
          "docstring": "Scan for files containing hardcoded usernames.",
          "line_range": [
            150,
            172
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "fix_file",
          "docstring": "Fix hardcoded usernames in a single file.",
          "line_range": [
            174,
            200
          ],
          "parameters": [
            "self",
            "file_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "fix_all_files",
          "docstring": "Fix hardcoded usernames in all project files.",
          "line_range": [
            202,
            214
          ],
          "parameters": [
            "self",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "generate_env_template",
          "docstring": "Generate .env template with required variables.",
          "line_range": [
            216,
            231
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "UserInfoDetector",
          "docstring": "Detect user information from various sources.",
          "line_range": [
            19,
            132
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                22,
                24
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_detect_user_info",
              "docstring": "Detect user info from .env, git config, or environment.",
              "line_range": [
                26,
                62
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_env",
              "docstring": "Load user info from .env file.",
              "line_range": [
                64,
                86
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_git",
              "docstring": "Load user info from git config.",
              "line_range": [
                88,
                120
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_environment",
              "docstring": "Load user info from environment variables.",
              "line_range": [
                122,
                128
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_user_info",
              "docstring": "Get detected user information.",
              "line_range": [
                130,
                132
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "HardcodeFixer",
          "docstring": "Fix hardcoded usernames in project files.",
          "line_range": [
            135,
            231
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                138,
                148
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_files",
              "docstring": "Scan for files containing hardcoded usernames.",
              "line_range": [
                150,
                172
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "fix_file",
              "docstring": "Fix hardcoded usernames in a single file.",
              "line_range": [
                174,
                200
              ],
              "parameters": [
                "self",
                "file_path",
                "dry_run"
              ]
            },
            {
              "name": "fix_all_files",
              "docstring": "Fix hardcoded usernames in all project files.",
              "line_range": [
                202,
                214
              ],
              "parameters": [
                "self",
                "dry_run"
              ]
            },
            {
              "name": "generate_env_template",
              "docstring": "Generate .env template with required variables.",
              "line_range": [
                216,
                231
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "UserInfoDetector"
        ],
        "_detect_user_info": [
          "self._load_from_environment",
          "logger.info",
          "self._load_from_git",
          "user_info.get",
          "env_info.items",
          "user_info.update",
          "env_vars.items",
          "self._load_from_env"
        ],
        "_load_from_env": [
          "line.split",
          "key.strip",
          "env_file.exists",
          "value.strip",
          "line.startswith",
          "logger.error",
          "env_vars.get",
          "line.strip",
          "open"
        ],
        "_load_from_git": [
          "logger.error",
          "re.search",
          "match.group",
          "subprocess.run"
        ],
        "_load_from_environment": [],
        "get_user_info": [],
        "scan_files": [
          "logger.warning",
          "str",
          "content.count",
          "any",
          "files_with_hardcode.append",
          "f.read",
          "open"
        ],
        "fix_file": [
          "content.replace",
          "logger.info",
          "content.count",
          "logger.error",
          "f.write",
          "f.read",
          "open"
        ],
        "fix_all_files": [
          "self.scan_files",
          "logger.info",
          "str",
          "self.fix_file",
          "len"
        ],
        "generate_env_template": [],
        "main": [
          "Path",
          "fixer.scan_files",
          "argparse.ArgumentParser",
          "print",
          "logger.info",
          "fixer.generate_env_template",
          "results.items",
          "fixer.fix_all_files",
          "parser.parse_args",
          "f.write",
          "len",
          "HardcodeFixer",
          "parser.add_argument",
          "replacements.items",
          "open"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9ec47ed2-c193-4a79-b7b3-87433da2bbf4"
    },
    {
      "module_id": "src.scripts.create_github_issues",
      "path": "src/scripts/create_github_issues.py",
      "category": "core",
      "module_doc": "GitHub Issues Creator for AI-Dogfooding Project\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GitHub issues \u0438\u0437 \u043d\u0430\u0448\u0438\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447",
      "functions": [
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            16,
            28
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_epics_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438\u0437 JSON",
          "line_range": [
            205,
            213
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f issues",
          "line_range": [
            215,
            252
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "token",
            "use_cli"
          ],
          "decorators": []
        },
        {
          "name": "create_epic_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            45,
            83
          ],
          "parameters": [
            "self",
            "epic_data"
          ],
          "decorators": []
        },
        {
          "name": "create_task_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            85,
            128
          ],
          "parameters": [
            "self",
            "task_data",
            "epic_number"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_api",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
          "line_range": [
            130,
            150
          ],
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_cli",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
          "line_range": [
            152,
            186
          ],
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_format_criteria",
          "docstring": "",
          "line_range": [
            188,
            189
          ],
          "parameters": [
            "self",
            "criteria"
          ],
          "decorators": []
        },
        {
          "name": "_format_tasks",
          "docstring": "",
          "line_range": [
            191,
            200
          ],
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "_format_metrics",
          "docstring": "",
          "line_range": [
            202,
            203
          ],
          "parameters": [
            "self",
            "metrics"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubIssuesCreator",
          "docstring": "",
          "line_range": [
            33,
            203
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                34,
                43
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "token",
                "use_cli"
              ]
            },
            {
              "name": "create_epic_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
              "line_range": [
                45,
                83
              ],
              "parameters": [
                "self",
                "epic_data"
              ]
            },
            {
              "name": "create_task_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                85,
                128
              ],
              "parameters": [
                "self",
                "task_data",
                "epic_number"
              ]
            },
            {
              "name": "_create_issue_via_api",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
              "line_range": [
                130,
                150
              ],
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_create_issue_via_cli",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
              "line_range": [
                152,
                186
              ],
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_format_criteria",
              "docstring": "",
              "line_range": [
                188,
                189
              ],
              "parameters": [
                "self",
                "criteria"
              ]
            },
            {
              "name": "_format_tasks",
              "docstring": "",
              "line_range": [
                191,
                200
              ],
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "_format_metrics",
              "docstring": "",
              "line_range": [
                202,
                203
              ],
              "parameters": [
                "self",
                "metrics"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "load_env_file": [
          "Path",
          "line.split",
          "key.strip",
          "print",
          "env_file.exists",
          "value.strip",
          "line.startswith",
          "line.strip",
          "open"
        ],
        "__init__": [],
        "create_epic_issue": [
          "self._create_issue_via_api",
          "self._format_metrics",
          "self._format_tasks",
          "epic_data.get",
          "self._format_criteria",
          "self._create_issue_via_cli"
        ],
        "create_task_issue": [
          "self._format_criteria",
          "self._create_issue_via_api",
          "task_data.get",
          "self._create_issue_via_cli"
        ],
        "_create_issue_via_api": [
          "response.json",
          "print",
          "requests.post"
        ],
        "_create_issue_via_cli": [
          "os.getpid",
          "subprocess.run",
          "print",
          "os.unlink",
          "int",
          "f.write",
          "open",
          "issue_url.split"
        ],
        "_format_criteria": [],
        "_format_tasks": [],
        "_format_metrics": [
          "metrics.items"
        ],
        "load_epics_data": [
          "Path",
          "json.load",
          "print",
          "epics_file.exists",
          "open"
        ],
        "main": [
          "GitHubIssuesCreator",
          "creator.create_task_issue",
          "creator.create_epic_issue",
          "print",
          "os.getenv",
          "epic_data.get",
          "load_epics_data",
          "len",
          "epics_data.get"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "2623812c-6641-45f8-ad87-206550e09afc"
    },
    {
      "module_id": "src.scripts.export_to_github_projects",
      "path": "src/scripts/export_to_github_projects.py",
      "category": "core",
      "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            183,
            266
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            23,
            26
          ],
          "parameters": [
            "self",
            "config_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "check_github_cli",
          "docstring": "Check if GitHub CLI is installed and authenticated",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "list_projects",
          "docstring": "List available GitHub Projects (via gh-projects extension)",
          "line_range": [
            38,
            55
          ],
          "parameters": [
            "self",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "create_project_item",
          "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "project_number",
            "title",
            "body",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_tasks_to_project",
          "docstring": "Export tasks to GitHub Project",
          "line_range": [
            84,
            123
          ],
          "parameters": [
            "self",
            "tasks",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_ideas_to_project",
          "docstring": "Export ideas to GitHub Project",
          "line_range": [
            125,
            164
          ],
          "parameters": [
            "self",
            "ideas",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "filter_data",
          "docstring": "Filter data by status and priority",
          "line_range": [
            166,
            180
          ],
          "parameters": [
            "self",
            "data",
            "status_filter",
            "priority_filter"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExportScript",
          "docstring": "Extended exporter with command-line interface and GitHub CLI integration",
          "line_range": [
            20,
            180
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                23,
                26
              ],
              "parameters": [
                "self",
                "config_path",
                "dry_run"
              ]
            },
            {
              "name": "check_github_cli",
              "docstring": "Check if GitHub CLI is installed and authenticated",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "list_projects",
              "docstring": "List available GitHub Projects (via gh-projects extension)",
              "line_range": [
                38,
                55
              ],
              "parameters": [
                "self",
                "owner",
                "repo"
              ]
            },
            {
              "name": "create_project_item",
              "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "project_number",
                "title",
                "body",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_tasks_to_project",
              "docstring": "Export tasks to GitHub Project",
              "line_range": [
                84,
                123
              ],
              "parameters": [
                "self",
                "tasks",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_ideas_to_project",
              "docstring": "Export ideas to GitHub Project",
              "line_range": [
                125,
                164
              ],
              "parameters": [
                "self",
                "ideas",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "filter_data",
              "docstring": "Filter data by status and priority",
              "line_range": [
                166,
                180
              ],
              "parameters": [
                "self",
                "data",
                "status_filter",
                "priority_filter"
              ]
            }
          ],
          "bases": [
            "GitHubProjectsExporter"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "super"
        ],
        "check_github_cli": [
          "print",
          "self._run_gh_command"
        ],
        "list_projects": [
          "isinstance",
          "print",
          "json.loads",
          "self._run_gh_command"
        ],
        "create_project_item": [
          "str",
          "output.strip",
          "self._run_gh_command",
          "print"
        ],
        "export_tasks_to_project": [
          "print",
          "self.create_project_item",
          "len",
          "task.get",
          "self.format_task_for_github"
        ],
        "export_ideas_to_project": [
          "self.format_idea_for_github",
          "print",
          "idea.get",
          "self.create_project_item",
          "len"
        ],
        "filter_data": [
          "item.get"
        ],
        "main": [
          "argparse.ArgumentParser",
          "exporter.filter_data",
          "print",
          "exporter.export_ideas_to_project",
          "exporter._save_mapping",
          "exporter.check_github_cli",
          "parser.parse_args",
          "sys.exit",
          "exporter.load_official_data",
          "parser.add_argument",
          "GitHubProjectsExportScript",
          "exporter.export_tasks_to_project"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "GitHubProjectsExporter",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "datetime",
        "json",
        "llmstruct.gh_view",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "5837b4c4-3401-4b8a-8b18-d86128b03a6a"
    },
    {
      "module_id": "src.scripts.validate_schemas",
      "path": "src/scripts/validate_schemas.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "9d2d23f9-532a-423f-b7a6-04eeb1ddf8ba"
    },
    {
      "module_id": "src.scripts.process_926_items",
      "path": "src/scripts/process_926_items.py",
      "category": "core",
      "module_doc": "926 Items Processing Script - Updated Implementation\nProcesses items according to GitHub roadmap + personal management vision\nImplements all decisions from 926_items_processing_execution_plan.md",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            51
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_comprehensive_index",
          "docstring": "Load the 926 items from comprehensive index",
          "line_range": [
            53,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "calculate_confidence_score",
          "docstring": "Calculate confidence score for categorization decision",
          "line_range": [
            113,
            146
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "check_t_pot_related",
          "docstring": "Enhanced T-Pot detection",
          "line_range": [
            148,
            155
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_team_implementable",
          "docstring": "Check if team can implement without architecture review",
          "line_range": [
            157,
            176
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_personal_vs_team_vs_business",
          "docstring": "Classify as personal/team/business",
          "line_range": [
            178,
            214
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "identify_epic_candidates",
          "docstring": "Identify items that should be grouped into epics",
          "line_range": [
            216,
            233
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "extract_epic_name",
          "docstring": "Extract epic name from item",
          "line_range": [
            235,
            241
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "categorize_item",
          "docstring": "Main categorization logic with confidence scoring",
          "line_range": [
            243,
            278
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "find_duplicates",
          "docstring": "Enhanced duplicate detection with T-Pot special handling",
          "line_range": [
            280,
            319
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "calculate_similarity",
          "docstring": "Enhanced similarity calculation",
          "line_range": [
            321,
            342
          ],
          "parameters": [
            "self",
            "title1",
            "title2"
          ],
          "decorators": []
        },
        {
          "name": "suggest_merge_strategy",
          "docstring": "Enhanced merge strategy with T-Pot consideration",
          "line_range": [
            344,
            359
          ],
          "parameters": [
            "self",
            "item1",
            "item2"
          ],
          "decorators": []
        },
        {
          "name": "process_items",
          "docstring": "Main processing workflow implementing execution plan",
          "line_range": [
            361,
            468
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "save_results",
          "docstring": "Save categorized results with enhanced metadata",
          "line_range": [
            470,
            546
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_category_description",
          "docstring": "Category descriptions per execution plan",
          "line_range": [
            548,
            562
          ],
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Main execution workflow per execution plan",
          "line_range": [
            564,
            606
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskProcessor926",
          "docstring": "",
          "line_range": [
            15,
            606
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                51
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_comprehensive_index",
              "docstring": "Load the 926 items from comprehensive index",
              "line_range": [
                53,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "calculate_confidence_score",
              "docstring": "Calculate confidence score for categorization decision",
              "line_range": [
                113,
                146
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "check_t_pot_related",
              "docstring": "Enhanced T-Pot detection",
              "line_range": [
                148,
                155
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_team_implementable",
              "docstring": "Check if team can implement without architecture review",
              "line_range": [
                157,
                176
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_personal_vs_team_vs_business",
              "docstring": "Classify as personal/team/business",
              "line_range": [
                178,
                214
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "identify_epic_candidates",
              "docstring": "Identify items that should be grouped into epics",
              "line_range": [
                216,
                233
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "extract_epic_name",
              "docstring": "Extract epic name from item",
              "line_range": [
                235,
                241
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "categorize_item",
              "docstring": "Main categorization logic with confidence scoring",
              "line_range": [
                243,
                278
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "find_duplicates",
              "docstring": "Enhanced duplicate detection with T-Pot special handling",
              "line_range": [
                280,
                319
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "calculate_similarity",
              "docstring": "Enhanced similarity calculation",
              "line_range": [
                321,
                342
              ],
              "parameters": [
                "self",
                "title1",
                "title2"
              ]
            },
            {
              "name": "suggest_merge_strategy",
              "docstring": "Enhanced merge strategy with T-Pot consideration",
              "line_range": [
                344,
                359
              ],
              "parameters": [
                "self",
                "item1",
                "item2"
              ]
            },
            {
              "name": "process_items",
              "docstring": "Main processing workflow implementing execution plan",
              "line_range": [
                361,
                468
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "save_results",
              "docstring": "Save categorized results with enhanced metadata",
              "line_range": [
                470,
                546
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_category_description",
              "docstring": "Category descriptions per execution plan",
              "line_range": [
                548,
                562
              ],
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "run",
              "docstring": "Main execution workflow per execution plan",
              "line_range": [
                564,
                606
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "datetime.now"
        ],
        "load_comprehensive_index": [
          "index_path.exists",
          "set",
          "json.load",
          "print",
          "value.items",
          "item.get",
          "isinstance",
          "item_content.lower",
          "items.append",
          "hash",
          "data.items",
          "str",
          "seen_items.add",
          "unique_items.append",
          "items.extend",
          "any",
          "len",
          "open"
        ],
        "calculate_confidence_score": [
          "sum",
          "min",
          "str",
          "item.get",
          "self.check_t_pot_related"
        ],
        "check_t_pot_related": [
          "str",
          "any"
        ],
        "check_team_implementable": [
          "str",
          "sum"
        ],
        "check_personal_vs_team_vs_business": [
          "str",
          "max",
          "sum",
          "item.get"
        ],
        "identify_epic_candidates": [
          "self.extract_epic_name",
          "str",
          "item.get",
          "any",
          "len",
          "epic_groups.items"
        ],
        "extract_epic_name": [
          "title.split",
          "item.get"
        ],
        "categorize_item": [
          "self.check_personal_vs_team_vs_business",
          "str",
          "self.calculate_confidence_score",
          "any",
          "self.check_team_implementable",
          "self.check_t_pot_related"
        ],
        "find_duplicates": [
          "self.calculate_similarity",
          "duplicates.append",
          "self.suggest_merge_strategy",
          "item.get",
          "seen_items.items",
          "self.check_t_pot_related"
        ],
        "calculate_similarity": [
          "set",
          "words1.intersection",
          "min",
          "title2.split",
          "words1.union",
          "len",
          "title1.split"
        ],
        "suggest_merge_strategy": [
          "item1.get",
          "item2.get",
          "str",
          "len",
          "self.check_t_pot_related"
        ],
        "process_items": [
          "set",
          "self.categorize_item",
          "print",
          "duplicate_item_ids.add",
          "self.extract_epic_name",
          "low_confidence_items.append",
          "datetime.now",
          "str",
          "category.startswith",
          "id",
          "processed_item.copy",
          "any",
          "self.find_duplicates",
          "len",
          "self.check_team_implementable",
          "self.check_t_pot_related"
        ],
        "save_results": [
          "self.get_category_description",
          "sum",
          "print",
          "json.dump",
          "datetime.now",
          "item.get",
          "len",
          "open"
        ],
        "get_category_description": [
          "descriptions.get"
        ],
        "run": [
          "self.save_results",
          "self.process_items",
          "self.load_comprehensive_index",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "be95b823-8cf7-4ba7-a650-695fad7c0d77"
    },
    {
      "module_id": "src.scripts.fix_github_script",
      "path": "src/scripts/fix_github_script.py",
      "category": "core",
      "module_doc": "Quick fix for GitHub issues creation script\n\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 JSON \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445",
      "functions": [
        {
          "name": "fix_json_loading",
          "docstring": "\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 JSON \u0434\u0430\u043d\u043d\u044b\u0445",
          "line_range": [
            11,
            42
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "fix_json_loading": [
          "Path",
          "content.replace",
          "print",
          "f.write",
          "f.read",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "2cf6c2fa-e374-408c-8d5a-39dcd35a2ea7"
    },
    {
      "module_id": "src.scripts.github_sync_manager",
      "path": "src/scripts/github_sync_manager.py",
      "category": "core",
      "module_doc": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub\nSupports: Issues, Epics (Projects), Discussions\nSafety: dry-run mode, logging, collision detection",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface",
          "line_range": [
            375,
            408
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            17,
            48
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results for idempotency",
          "line_range": [
            50,
            60
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log for future idempotency",
          "line_range": [
            62,
            65
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Safe GitHub API request with rate limiting",
          "line_range": [
            67,
            94
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_issues",
          "docstring": "Get existing GitHub issues for collision detection",
          "line_range": [
            96,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_discussions",
          "docstring": "Get existing GitHub discussions",
          "line_range": [
            114,
            118
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced (idempotency)",
          "line_range": [
            120,
            125
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "find_existing_by_title",
          "docstring": "Find existing GitHub item by title similarity",
          "line_range": [
            127,
            143
          ],
          "parameters": [
            "self",
            "title",
            "existing_items"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue",
          "docstring": "Create GitHub issue from processed item",
          "line_range": [
            145,
            182
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion",
          "docstring": "Create GitHub discussion from processed item",
          "line_range": [
            184,
            194
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic",
          "docstring": "Create GitHub epic (as Project or enhanced Issue)",
          "line_range": [
            196,
            214
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "sync_category",
          "docstring": "Sync specific category with GitHub",
          "line_range": [
            216,
            290
          ],
          "parameters": [
            "self",
            "category",
            "filename"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Pre-sync validation checks",
          "line_range": [
            292,
            322
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "Main sync execution",
          "line_range": [
            324,
            373
          ],
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubSyncManager",
          "docstring": "",
          "line_range": [
            16,
            373
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                17,
                48
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results for idempotency",
              "line_range": [
                50,
                60
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log for future idempotency",
              "line_range": [
                62,
                65
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Safe GitHub API request with rate limiting",
              "line_range": [
                67,
                94
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "get_existing_issues",
              "docstring": "Get existing GitHub issues for collision detection",
              "line_range": [
                96,
                112
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_existing_discussions",
              "docstring": "Get existing GitHub discussions",
              "line_range": [
                114,
                118
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced (idempotency)",
              "line_range": [
                120,
                125
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "find_existing_by_title",
              "docstring": "Find existing GitHub item by title similarity",
              "line_range": [
                127,
                143
              ],
              "parameters": [
                "self",
                "title",
                "existing_items"
              ]
            },
            {
              "name": "create_github_issue",
              "docstring": "Create GitHub issue from processed item",
              "line_range": [
                145,
                182
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion",
              "docstring": "Create GitHub discussion from processed item",
              "line_range": [
                184,
                194
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_epic",
              "docstring": "Create GitHub epic (as Project or enhanced Issue)",
              "line_range": [
                196,
                214
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "sync_category",
              "docstring": "Sync specific category with GitHub",
              "line_range": [
                216,
                290
              ],
              "parameters": [
                "self",
                "category",
                "filename"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Pre-sync validation checks",
              "line_range": [
                292,
                322
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "Main sync execution",
              "line_range": [
                324,
                373
              ],
              "parameters": [
                "self",
                "categories"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "os.getenv",
          "self.load_sync_log",
          "print"
        ],
        "load_sync_log": [
          "json.load",
          "open"
        ],
        "save_sync_log": [
          "json.dump",
          "open"
        ],
        "api_request": [
          "time.sleep",
          "print",
          "requests.get",
          "ValueError",
          "method.upper",
          "response.json",
          "requests.patch",
          "requests.post",
          "int",
          "response.raise_for_status"
        ],
        "get_existing_issues": [
          "issues.extend",
          "len",
          "self.api_request"
        ],
        "get_existing_discussions": [],
        "item_already_synced": [
          "item.get"
        ],
        "find_existing_by_title": [
          "len",
          "title.lower",
          "item.get"
        ],
        "create_github_issue": [
          "print",
          "self.api_request",
          "labels.append",
          "processing_meta.get",
          "item.get"
        ],
        "create_github_discussion": [
          "print",
          "item.get"
        ],
        "create_github_epic": [
          "self.api_request",
          "print",
          "item.get"
        ],
        "sync_category": [
          "json.load",
          "print",
          "self.get_existing_discussions",
          "item.get",
          "self.create_github_epic",
          "result.get",
          "file_path.exists",
          "data.get",
          "datetime.now",
          "self.create_github_discussion",
          "self.get_existing_issues",
          "self.create_github_issue",
          "self.find_existing_by_title",
          "existing.get",
          "open",
          "self.item_already_synced"
        ],
        "validate_before_sync": [
          "print",
          "self.api_request",
          "user_info.get",
          "repo_info.get",
          "rate_limit.get",
          "core_limit.get"
        ],
        "run_sync": [
          "self.validate_before_sync",
          "print",
          "sum",
          "self.save_sync_log",
          "datetime.now",
          "self.sync_category",
          "r.get",
          "results.values"
        ],
        "main": [
          "manager.run_sync",
          "GitHubSyncManager",
          "argparse.ArgumentParser",
          "print",
          "result.get",
          "parser.parse_args",
          "len",
          "parser.add_argument"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "1867f403-e687-4ad7-97ad-5ff32c595063"
    },
    {
      "module_id": "src.scripts.create_comprehensive_index",
      "path": "src/scripts/create_comprehensive_index.py",
      "category": "core",
      "module_doc": "Comprehensive Project Index Creator\nScans ALL project directories for tasks, ideas, sessions, and concepts.\nProvides complete visibility into project state and unaccounted innovations.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            714,
            735
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            45,
            58
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize comprehensive extraction patterns.",
          "line_range": [
            60,
            92
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "scan_all_directories",
          "docstring": "Scan all configured directories comprehensively.",
          "line_range": [
            94,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_scan_directory",
          "docstring": "Scan a specific directory according to its configuration.",
          "line_range": [
            113,
            127
          ],
          "parameters": [
            "self",
            "directory",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_scan_root_files",
          "docstring": "Scan root-level files.",
          "line_range": [
            129,
            133
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_should_scan_file",
          "docstring": "Check if file should be scanned based on extension.",
          "line_range": [
            135,
            137
          ],
          "parameters": [
            "self",
            "file_path",
            "allowed_types"
          ],
          "decorators": []
        },
        {
          "name": "_scan_file",
          "docstring": "Scan individual file for project items.",
          "line_range": [
            139,
            152
          ],
          "parameters": [
            "self",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_text",
          "docstring": "Extract items from text/markdown files.",
          "line_range": [
            154,
            206
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_json",
          "docstring": "Extract items from JSON files.",
          "line_range": [
            208,
            225
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_item_from_match",
          "docstring": "Create ProjectItem from regex match.",
          "line_range": [
            227,
            249
          ],
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_checkbox_item",
          "docstring": "Create ProjectItem from checkbox match.",
          "line_range": [
            251,
            274
          ],
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_simple_item",
          "docstring": "Create simple ProjectItem.",
          "line_range": [
            276,
            297
          ],
          "parameters": [
            "self",
            "title",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_status",
          "docstring": "Detect item status from surrounding content.",
          "line_range": [
            299,
            308
          ],
          "parameters": [
            "self",
            "content",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_priority",
          "docstring": "Detect item priority from surrounding content.",
          "line_range": [
            310,
            319
          ],
          "parameters": [
            "self",
            "content",
            "position",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_assess_strategic_value",
          "docstring": "Assess strategic value of item.",
          "line_range": [
            321,
            330
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract context around position.",
          "line_range": [
            332,
            336
          ],
          "parameters": [
            "self",
            "content",
            "position",
            "length"
          ],
          "decorators": []
        },
        {
          "name": "_detect_category",
          "docstring": "Detect item category.",
          "line_range": [
            338,
            351
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_effort",
          "docstring": "Estimate effort required.",
          "line_range": [
            353,
            362
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tags",
          "docstring": "Extract relevant tags.",
          "line_range": [
            364,
            378
          ],
          "parameters": [
            "self",
            "title",
            "content",
            "source_dir"
          ],
          "decorators": []
        },
        {
          "name": "_is_noise_checkbox",
          "docstring": "Check if checkbox is noise (navigation, etc).",
          "line_range": [
            380,
            384
          ],
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "_parse_json_files",
          "docstring": "Parse structured JSON files for existing data.",
          "line_range": [
            386,
            402
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_process_structured_json",
          "docstring": "Process structured JSON data.",
          "line_range": [
            404,
            419
          ],
          "parameters": [
            "self",
            "data",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_add_json_item",
          "docstring": "Add item from JSON structure.",
          "line_range": [
            421,
            441
          ],
          "parameters": [
            "self",
            "item",
            "file_path",
            "item_type"
          ],
          "decorators": []
        },
        {
          "name": "_assess_json_strategic_value",
          "docstring": "Assess strategic value from JSON item.",
          "line_range": [
            443,
            450
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_extract_innovation_concepts",
          "docstring": "Extract innovation concepts from content.",
          "line_range": [
            452,
            482
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_enhance_items",
          "docstring": "Post-process items to enhance metadata and find relationships.",
          "line_range": [
            484,
            501
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_find_related_items",
          "docstring": "Find related items based on content similarity.",
          "line_range": [
            503,
            517
          ],
          "parameters": [
            "self",
            "item",
            "id_map",
            "title_map"
          ],
          "decorators": []
        },
        {
          "name": "generate_comprehensive_report",
          "docstring": "Generate comprehensive analysis report.",
          "line_range": [
            519,
            561
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_comprehensive_index",
          "docstring": "Save comprehensive index and reports.",
          "line_range": [
            563,
            582
          ],
          "parameters": [
            "self",
            "output_dir"
          ],
          "decorators": []
        },
        {
          "name": "_generate_analysis_report",
          "docstring": "Generate human-readable analysis report.",
          "line_range": [
            584,
            658
          ],
          "parameters": [
            "self",
            "report"
          ],
          "decorators": []
        },
        {
          "name": "_format_dict",
          "docstring": "Format dictionary for markdown display.",
          "line_range": [
            660,
            662
          ],
          "parameters": [
            "self",
            "d"
          ],
          "decorators": []
        },
        {
          "name": "_format_items_list",
          "docstring": "Format items list for markdown display.",
          "line_range": [
            664,
            677
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_tasks",
          "docstring": "Extract tasks from JSON tasks array.",
          "line_range": [
            679,
            684
          ],
          "parameters": [
            "self",
            "tasks_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_ideas",
          "docstring": "Extract ideas from JSON ideas array.",
          "line_range": [
            686,
            691
          ],
          "parameters": [
            "self",
            "ideas_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_sessions",
          "docstring": "Extract sessions from JSON sessions array.",
          "line_range": [
            693,
            698
          ],
          "parameters": [
            "self",
            "sessions_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_array",
          "docstring": "Extract items from JSON array.",
          "line_range": [
            700,
            711
          ],
          "parameters": [
            "self",
            "array_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ProjectItem",
          "docstring": "Unified representation of any project item (task, idea, session, concept).",
          "line_range": [
            22,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ComprehensiveIndexer",
          "docstring": "Comprehensive indexer for all project content.",
          "line_range": [
            42,
            711
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                45,
                58
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize comprehensive extraction patterns.",
              "line_range": [
                60,
                92
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "scan_all_directories",
              "docstring": "Scan all configured directories comprehensively.",
              "line_range": [
                94,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_scan_directory",
              "docstring": "Scan a specific directory according to its configuration.",
              "line_range": [
                113,
                127
              ],
              "parameters": [
                "self",
                "directory",
                "config"
              ]
            },
            {
              "name": "_scan_root_files",
              "docstring": "Scan root-level files.",
              "line_range": [
                129,
                133
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "_should_scan_file",
              "docstring": "Check if file should be scanned based on extension.",
              "line_range": [
                135,
                137
              ],
              "parameters": [
                "self",
                "file_path",
                "allowed_types"
              ]
            },
            {
              "name": "_scan_file",
              "docstring": "Scan individual file for project items.",
              "line_range": [
                139,
                152
              ],
              "parameters": [
                "self",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_text",
              "docstring": "Extract items from text/markdown files.",
              "line_range": [
                154,
                206
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_json",
              "docstring": "Extract items from JSON files.",
              "line_range": [
                208,
                225
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_item_from_match",
              "docstring": "Create ProjectItem from regex match.",
              "line_range": [
                227,
                249
              ],
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_checkbox_item",
              "docstring": "Create ProjectItem from checkbox match.",
              "line_range": [
                251,
                274
              ],
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_simple_item",
              "docstring": "Create simple ProjectItem.",
              "line_range": [
                276,
                297
              ],
              "parameters": [
                "self",
                "title",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority",
                "position"
              ]
            },
            {
              "name": "_detect_status",
              "docstring": "Detect item status from surrounding content.",
              "line_range": [
                299,
                308
              ],
              "parameters": [
                "self",
                "content",
                "position"
              ]
            },
            {
              "name": "_detect_priority",
              "docstring": "Detect item priority from surrounding content.",
              "line_range": [
                310,
                319
              ],
              "parameters": [
                "self",
                "content",
                "position",
                "default"
              ]
            },
            {
              "name": "_assess_strategic_value",
              "docstring": "Assess strategic value of item.",
              "line_range": [
                321,
                330
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract context around position.",
              "line_range": [
                332,
                336
              ],
              "parameters": [
                "self",
                "content",
                "position",
                "length"
              ]
            },
            {
              "name": "_detect_category",
              "docstring": "Detect item category.",
              "line_range": [
                338,
                351
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_estimate_effort",
              "docstring": "Estimate effort required.",
              "line_range": [
                353,
                362
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_tags",
              "docstring": "Extract relevant tags.",
              "line_range": [
                364,
                378
              ],
              "parameters": [
                "self",
                "title",
                "content",
                "source_dir"
              ]
            },
            {
              "name": "_is_noise_checkbox",
              "docstring": "Check if checkbox is noise (navigation, etc).",
              "line_range": [
                380,
                384
              ],
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "_parse_json_files",
              "docstring": "Parse structured JSON files for existing data.",
              "line_range": [
                386,
                402
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_process_structured_json",
              "docstring": "Process structured JSON data.",
              "line_range": [
                404,
                419
              ],
              "parameters": [
                "self",
                "data",
                "file_path"
              ]
            },
            {
              "name": "_add_json_item",
              "docstring": "Add item from JSON structure.",
              "line_range": [
                421,
                441
              ],
              "parameters": [
                "self",
                "item",
                "file_path",
                "item_type"
              ]
            },
            {
              "name": "_assess_json_strategic_value",
              "docstring": "Assess strategic value from JSON item.",
              "line_range": [
                443,
                450
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_extract_innovation_concepts",
              "docstring": "Extract innovation concepts from content.",
              "line_range": [
                452,
                482
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_enhance_items",
              "docstring": "Post-process items to enhance metadata and find relationships.",
              "line_range": [
                484,
                501
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_find_related_items",
              "docstring": "Find related items based on content similarity.",
              "line_range": [
                503,
                517
              ],
              "parameters": [
                "self",
                "item",
                "id_map",
                "title_map"
              ]
            },
            {
              "name": "generate_comprehensive_report",
              "docstring": "Generate comprehensive analysis report.",
              "line_range": [
                519,
                561
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_comprehensive_index",
              "docstring": "Save comprehensive index and reports.",
              "line_range": [
                563,
                582
              ],
              "parameters": [
                "self",
                "output_dir"
              ]
            },
            {
              "name": "_generate_analysis_report",
              "docstring": "Generate human-readable analysis report.",
              "line_range": [
                584,
                658
              ],
              "parameters": [
                "self",
                "report"
              ]
            },
            {
              "name": "_format_dict",
              "docstring": "Format dictionary for markdown display.",
              "line_range": [
                660,
                662
              ],
              "parameters": [
                "self",
                "d"
              ]
            },
            {
              "name": "_format_items_list",
              "docstring": "Format items list for markdown display.",
              "line_range": [
                664,
                677
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "_extract_json_tasks",
              "docstring": "Extract tasks from JSON tasks array.",
              "line_range": [
                679,
                684
              ],
              "parameters": [
                "self",
                "tasks_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_ideas",
              "docstring": "Extract ideas from JSON ideas array.",
              "line_range": [
                686,
                691
              ],
              "parameters": [
                "self",
                "ideas_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_sessions",
              "docstring": "Extract sessions from JSON sessions array.",
              "line_range": [
                693,
                698
              ],
              "parameters": [
                "self",
                "sessions_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_array",
              "docstring": "Extract items from JSON array.",
              "line_range": [
                700,
                711
              ],
              "parameters": [
                "self",
                "array_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._init_patterns"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "scan_all_directories": [
          "self._parse_json_files",
          "logger.info",
          "self._enhance_items",
          "len",
          "self._scan_directory",
          "self._scan_root_files"
        ],
        "_scan_directory": [
          "logger.info",
          "dir_path.glob",
          "self._scan_file",
          "dir_path.exists",
          "file_path.is_file",
          "self._should_scan_file",
          "logger.warning"
        ],
        "_scan_root_files": [
          "file_path.is_file",
          "self._should_scan_file",
          "self._scan_file"
        ],
        "_should_scan_file": [],
        "_scan_file": [
          "self._extract_from_json",
          "logger.error",
          "self._extract_from_text",
          "f.read",
          "open"
        ],
        "_extract_from_text": [
          "self._create_simple_item",
          "self._extract_innovation_concepts",
          "match.group",
          "self._create_item_from_match",
          "match.start",
          "self._create_checkbox_item",
          "self._is_noise_checkbox"
        ],
        "_extract_from_json": [
          "isinstance",
          "self._extract_json_tasks",
          "json.loads",
          "self._extract_json_array",
          "self._extract_json_ideas",
          "logger.warning",
          "self._extract_json_sessions"
        ],
        "_create_item_from_match": [
          "self._detect_priority",
          "self._estimate_effort",
          "self._detect_status",
          "self._extract_tags",
          "datetime.now",
          "self._detect_category",
          "self._extract_context",
          "str",
          "match.group",
          "title.strip",
          "match.start",
          "self._assess_strategic_value",
          "ProjectItem"
        ],
        "_create_checkbox_item": [
          "self._detect_priority",
          "self._estimate_effort",
          "self._extract_tags",
          "datetime.now",
          "self._detect_category",
          "self._extract_context",
          "str",
          "match.group",
          "match.start",
          "self._assess_strategic_value",
          "ProjectItem"
        ],
        "_create_simple_item": [
          "datetime.now",
          "self._extract_context",
          "str",
          "title.strip",
          "ProjectItem"
        ],
        "_detect_status": [
          "max"
        ],
        "_detect_priority": [
          "max"
        ],
        "_assess_strategic_value": [],
        "_extract_context": [
          "min",
          "len",
          "max"
        ],
        "_detect_category": [
          "any",
          "title.lower"
        ],
        "_estimate_effort": [
          "any"
        ],
        "_extract_tags": [
          "tags.append",
          "source_dir.replace",
          "title.lower"
        ],
        "_is_noise_checkbox": [
          "any",
          "len",
          "text.strip",
          "text.lower"
        ],
        "_parse_json_files": [
          "json.load",
          "file_path.exists",
          "logger.error",
          "self._process_structured_json",
          "open"
        ],
        "_process_structured_json": [
          "isinstance",
          "self._add_json_item"
        ],
        "_add_json_item": [
          "self._assess_json_strategic_value",
          "datetime.now",
          "str",
          "item.get",
          "len",
          "ProjectItem"
        ],
        "_assess_json_strategic_value": [
          "item.get"
        ],
        "_extract_innovation_concepts": [
          "content.find",
          "innovation_lines.append",
          "datetime.now",
          "self._extract_context",
          "content.split",
          "str",
          "enumerate",
          "len",
          "line.strip",
          "source_dir.replace",
          "ProjectItem"
        ],
        "_enhance_items": [
          "re.sub",
          "logger.info",
          "self._find_related_items"
        ],
        "_find_related_items": [
          "ref_type.upper",
          "re.findall",
          "related.append"
        ],
        "generate_comprehensive_report": [
          "asdict",
          "datetime.now",
          "by_type.get",
          "by_status.get",
          "by_strategic_value.get",
          "by_source.get",
          "len",
          "by_priority.get"
        ],
        "save_comprehensive_index": [
          "logger.info",
          "self._generate_analysis_report",
          "self.generate_comprehensive_report",
          "os.makedirs",
          "json.dump",
          "len",
          "f.write",
          "open"
        ],
        "_generate_analysis_report": [
          "self._format_dict",
          "len",
          "self._format_items_list"
        ],
        "_format_dict": [
          "d.items",
          "sorted"
        ],
        "_format_items_list": [
          "result.append"
        ],
        "_extract_json_tasks": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_ideas": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_sessions": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_array": [
          "isinstance",
          "self._add_json_item",
          "str"
        ],
        "main": [
          "print",
          "logger.info",
          "indexer.save_comprehensive_index",
          "by_strategic.get",
          "indexer.scan_all_directories",
          "ComprehensiveIndexer",
          "len"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "bbce29e3-5cfc-4c0b-ad6a-1ef2c18063b3"
    },
    {
      "module_id": "src.scripts.validate_json",
      "path": "src/scripts/validate_json.py",
      "category": "core",
      "module_doc": "JSON Validation Script\nValidates JSON files against their respective schemas.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            13,
            23
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate a JSON file against a schema.",
          "line_range": [
            26,
            49
          ],
          "parameters": [
            "file_path",
            "schema_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "json.load",
          "print",
          "open"
        ],
        "validate_json": [
          "Path",
          "print",
          "str",
          "validator.validate",
          "Draft7Validator",
          "load_json"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "pathlib",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "5953cc9e-149a-44a5-8ee3-4c7ee2e3e99c"
    },
    {
      "module_id": "src.scripts.validate_refs",
      "path": "src/scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": [
            11,
            43
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            46,
            47
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "Path",
          "json.load",
          "logger.info",
          "idea.get",
          "broken_links.append",
          "json.dump",
          "target_file.exists",
          "logger.error",
          "enumerate",
          "logger.warning",
          "source_file.exists"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "478ec932-a269-4d8d-a6a9-ba8e181d0035"
    },
    {
      "module_id": "src.scripts.create_tasks_index",
      "path": "src/scripts/create_tasks_index.py",
      "category": "core",
      "module_doc": "Tasks Index Creator\nScans all documentation files and creates comprehensive index of tasks, EPICs, TODOs, and other actionable items.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            469,
            515
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            42,
            44
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize regex patterns for task extraction.",
          "line_range": [
            46,
            73
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "extract_from_markdown",
          "docstring": "Extract tasks from markdown file.",
          "line_range": [
            75,
            107
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_status",
          "docstring": "Extract document status.",
          "line_range": [
            109,
            120
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_priority",
          "docstring": "Extract document priority.",
          "line_range": [
            122,
            135
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_date",
          "docstring": "Extract document date.",
          "line_range": [
            137,
            142
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_epics",
          "docstring": "Extract EPIC items.",
          "line_range": [
            144,
            168
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tasks",
          "docstring": "Extract explicit task items.",
          "line_range": [
            170,
            194
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_todos",
          "docstring": "Extract TODO items.",
          "line_range": [
            196,
            219
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_phases",
          "docstring": "Extract phase/step items.",
          "line_range": [
            221,
            245
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_checkboxes",
          "docstring": "Extract checkbox items as tasks.",
          "line_range": [
            247,
            275
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract surrounding context for a match.",
          "line_range": [
            277,
            286
          ],
          "parameters": [
            "self",
            "content",
            "start",
            "end",
            "context_lines"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            292,
            294
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_documentation",
          "docstring": "Scan all documentation files for tasks.",
          "line_range": [
            296,
            314
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_index",
          "docstring": "Generate comprehensive task index.",
          "line_range": [
            316,
            367
          ],
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "generate_summary_report",
          "docstring": "Generate human-readable summary report.",
          "line_range": [
            369,
            446
          ],
          "parameters": [
            "self",
            "index"
          ],
          "decorators": []
        },
        {
          "name": "save_index",
          "docstring": "Save index and summary to files.",
          "line_range": [
            448,
            466
          ],
          "parameters": [
            "self",
            "index",
            "summary",
            "output_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Task",
          "docstring": "Represents a single task or actionable item.",
          "line_range": [
            21,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "TaskExtractor",
          "docstring": "Extract tasks from various document formats.",
          "line_range": [
            39,
            286
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                42,
                44
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize regex patterns for task extraction.",
              "line_range": [
                46,
                73
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "extract_from_markdown",
              "docstring": "Extract tasks from markdown file.",
              "line_range": [
                75,
                107
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_status",
              "docstring": "Extract document status.",
              "line_range": [
                109,
                120
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_priority",
              "docstring": "Extract document priority.",
              "line_range": [
                122,
                135
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_date",
              "docstring": "Extract document date.",
              "line_range": [
                137,
                142
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_epics",
              "docstring": "Extract EPIC items.",
              "line_range": [
                144,
                168
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_tasks",
              "docstring": "Extract explicit task items.",
              "line_range": [
                170,
                194
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_todos",
              "docstring": "Extract TODO items.",
              "line_range": [
                196,
                219
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_phases",
              "docstring": "Extract phase/step items.",
              "line_range": [
                221,
                245
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_checkboxes",
              "docstring": "Extract checkbox items as tasks.",
              "line_range": [
                247,
                275
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract surrounding context for a match.",
              "line_range": [
                277,
                286
              ],
              "parameters": [
                "self",
                "content",
                "start",
                "end",
                "context_lines"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TaskIndexGenerator",
          "docstring": "Generate comprehensive task index.",
          "line_range": [
            289,
            466
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                292,
                294
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_documentation",
              "docstring": "Scan all documentation files for tasks.",
              "line_range": [
                296,
                314
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_index",
              "docstring": "Generate comprehensive task index.",
              "line_range": [
                316,
                367
              ],
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "generate_summary_report",
              "docstring": "Generate human-readable summary report.",
              "line_range": [
                369,
                446
              ],
              "parameters": [
                "self",
                "index"
              ]
            },
            {
              "name": "save_index",
              "docstring": "Save index and summary to files.",
              "line_range": [
                448,
                466
              ],
              "parameters": [
                "self",
                "index",
                "summary",
                "output_dir"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "TaskExtractor"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "extract_from_markdown": [
          "tasks.extend",
          "self._extract_todos",
          "self._extract_tasks",
          "self._extract_phases",
          "self._extract_date",
          "self._extract_priority",
          "self._extract_checkboxes",
          "logger.error",
          "self._extract_status",
          "f.read",
          "self._extract_epics",
          "open"
        ],
        "_extract_status": [
          "match.group"
        ],
        "_extract_priority": [
          "match.group"
        ],
        "_extract_date": [
          "match.group",
          "datetime.now"
        ],
        "_extract_epics": [
          "match.end",
          "tasks.append",
          "Task",
          "self._extract_context",
          "str",
          "match.group",
          "match.start"
        ],
        "_extract_tasks": [
          "match.end",
          "tasks.append",
          "Task",
          "self._extract_context",
          "str",
          "match.group",
          "match.start"
        ],
        "_extract_todos": [
          "tasks.append",
          "Task",
          "str",
          "match.group",
          "match.start"
        ],
        "_extract_phases": [
          "match.end",
          "tasks.append",
          "Task",
          "self._extract_context",
          "str",
          "match.group",
          "match.start"
        ],
        "_extract_checkboxes": [
          "tasks.append",
          "Task",
          "any",
          "str",
          "match.group",
          "task_title.upper",
          "match.start"
        ],
        "_extract_context": [
          "min",
          "content.split",
          "max",
          "len",
          "context.strip"
        ],
        "scan_documentation": [
          "docs_dir.exists",
          "docs_dir.glob",
          "logger.info",
          "all_tasks.extend"
        ],
        "generate_index": [
          "asdict",
          "by_priority.items",
          "by_status.items",
          "datetime.now",
          "by_file.items",
          "len",
          "by_category.items"
        ],
        "generate_summary_report": [
          "Path",
          "file_categories.items",
          "category.upper",
          "sorted",
          "priority.upper",
          "status.upper",
          "len"
        ],
        "save_index": [
          "Path",
          "output_path.mkdir",
          "logger.info",
          "json.dump",
          "f.write",
          "open"
        ],
        "main": [
          "argparse.ArgumentParser",
          "generator.generate_summary_report",
          "print",
          "logger.info",
          "by_category.get",
          "sorted",
          "by_status.items",
          "len",
          "by_status.get",
          "parser.parse_args",
          "generator.save_index",
          "TaskIndexGenerator",
          "by_category.items",
          "parser.add_argument",
          "generator.generate_index",
          "generator.scan_documentation"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "0604430f-3ddb-47a0-b557-0d9719eefa74"
    },
    {
      "module_id": "src.scripts.github_sync_manager_enhanced",
      "path": "src/scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "module_doc": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout\n\u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442: processing results + GitHub API + token management + CLI fallback",
      "functions": [
        {
          "name": "print_info",
          "docstring": "",
          "line_range": [
            25,
            26
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_success",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_warning",
          "docstring": "",
          "line_range": [
            31,
            32
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_error",
          "docstring": "",
          "line_range": [
            34,
            35
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_step",
          "docstring": "",
          "line_range": [
            37,
            38
          ],
          "parameters": [
            "step",
            "total",
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Enhanced CLI interface",
          "line_range": [
            620,
            655
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            43,
            44
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            46,
            57
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_github_token",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
          "line_range": [
            59,
            73
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "check_gh_cli",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
          "line_range": [
            75,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_token_from_gh_cli",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
          "line_range": [
            84,
            93
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_github_token",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
          "line_range": [
            95,
            117
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            122,
            164
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "detect_repo_from_git",
          "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
          "line_range": [
            166,
            198
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results",
          "line_range": [
            200,
            211
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log",
          "line_range": [
            213,
            216
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Enhanced API request with CLI fallback",
          "line_range": [
            218,
            231
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_direct",
          "docstring": "Direct API request",
          "line_range": [
            233,
            261
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_via_cli",
          "docstring": "API request via GitHub CLI",
          "line_range": [
            263,
            293
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue_enhanced",
          "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
          "line_range": [
            295,
            359
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_acceptance_criteria",
          "docstring": "Format acceptance criteria from item metadata",
          "line_range": [
            361,
            380
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_implementation_notes",
          "docstring": "Format implementation notes",
          "line_range": [
            382,
            397
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Enhanced validation",
          "line_range": [
            399,
            434
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_enhanced_sync",
          "docstring": "Enhanced sync with full project rollout integration",
          "line_range": [
            436,
            494
          ],
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        },
        {
          "name": "sync_category_enhanced",
          "docstring": "Enhanced category sync",
          "line_range": [
            496,
            554
          ],
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced",
          "line_range": [
            556,
            560
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic_enhanced",
          "docstring": "Enhanced epic creation",
          "line_range": [
            562,
            607
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion_enhanced",
          "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
          "line_range": [
            609,
            618
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            18,
            23
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "GitHubTokenManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 GitHub \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 (\u0438\u0437 setup_github_token.sh)",
          "line_range": [
            40,
            117
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                43,
                44
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_env_file",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                46,
                57
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_github_token",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
              "line_range": [
                59,
                73
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "check_gh_cli",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
              "line_range": [
                75,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_token_from_gh_cli",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
              "line_range": [
                84,
                93
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_github_token",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
              "line_range": [
                95,
                117
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "EnhancedGitHubSyncManager",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 GitHub Sync Manager \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0432\u0441\u0435\u0445 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a",
          "line_range": [
            119,
            618
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                122,
                164
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "detect_repo_from_git",
              "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
              "line_range": [
                166,
                198
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results",
              "line_range": [
                200,
                211
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log",
              "line_range": [
                213,
                216
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Enhanced API request with CLI fallback",
              "line_range": [
                218,
                231
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_direct",
              "docstring": "Direct API request",
              "line_range": [
                233,
                261
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_via_cli",
              "docstring": "API request via GitHub CLI",
              "line_range": [
                263,
                293
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "create_github_issue_enhanced",
              "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
              "line_range": [
                295,
                359
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_acceptance_criteria",
              "docstring": "Format acceptance criteria from item metadata",
              "line_range": [
                361,
                380
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_implementation_notes",
              "docstring": "Format implementation notes",
              "line_range": [
                382,
                397
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Enhanced validation",
              "line_range": [
                399,
                434
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_enhanced_sync",
              "docstring": "Enhanced sync with full project rollout integration",
              "line_range": [
                436,
                494
              ],
              "parameters": [
                "self",
                "categories"
              ]
            },
            {
              "name": "sync_category_enhanced",
              "docstring": "Enhanced category sync",
              "line_range": [
                496,
                554
              ],
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced",
              "line_range": [
                556,
                560
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "create_github_epic_enhanced",
              "docstring": "Enhanced epic creation",
              "line_range": [
                562,
                607
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion_enhanced",
              "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
              "line_range": [
                609,
                618
              ],
              "parameters": [
                "self",
                "item"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "print_info": [
          "print"
        ],
        "print_success": [
          "print"
        ],
        "print_warning": [
          "print"
        ],
        "print_error": [
          "print"
        ],
        "print_step": [
          "print"
        ],
        "__init__": [
          "Path",
          "print_info",
          "self.detect_repo_from_git",
          "self.load_sync_log",
          "GitHubTokenManager"
        ],
        "load_env_file": [
          "Path",
          "line.split",
          "key.strip",
          "env_file.exists",
          "value.strip",
          "line.startswith",
          "line.strip",
          "open"
        ],
        "test_github_token": [
          "requests.get",
          "response.json"
        ],
        "check_gh_cli": [
          "subprocess.run"
        ],
        "get_token_from_gh_cli": [
          "subprocess.run"
        ],
        "get_github_token": [
          "self.check_gh_cli",
          "self.get_token_from_gh_cli",
          "os.getenv",
          "self.test_github_token",
          "print_warning"
        ],
        "detect_repo_from_git": [
          "url.startswith",
          "url.split",
          "subprocess.run",
          "print_info",
          "url.replace",
          "print_warning",
          "path.split",
          "url.endswith",
          "len"
        ],
        "load_sync_log": [
          "json.load",
          "open"
        ],
        "save_sync_log": [
          "json.dump",
          "open"
        ],
        "api_request": [
          "print_error",
          "time.sleep",
          "self._api_request_via_cli",
          "self._api_request_direct"
        ],
        "_api_request_direct": [
          "print_error",
          "requests.get",
          "ValueError",
          "method.upper",
          "response.json",
          "requests.patch",
          "requests.post",
          "int",
          "print_warning",
          "response.raise_for_status"
        ],
        "_api_request_via_cli": [
          "print_error",
          "subprocess.run",
          "method.upper",
          "cmd.extend",
          "json.loads",
          "json.dumps",
          "print_warning"
        ],
        "create_github_issue_enhanced": [
          "print_info",
          "self._format_implementation_notes",
          "labels.append",
          "self.api_request",
          "processing_meta.get",
          "self._format_acceptance_criteria",
          "print_success",
          "item.get"
        ],
        "_format_acceptance_criteria": [
          "criteria.append",
          "criteria.extend",
          "item.get"
        ],
        "_format_implementation_notes": [
          "notes.append",
          "processing_meta.get",
          "item.get"
        ],
        "validate_before_sync": [
          "print_error",
          "self.api_request",
          "file_path.exists",
          "user_info.get",
          "print_success",
          "repo_info.get",
          "print_step"
        ],
        "run_enhanced_sync": [
          "self.sync_category_enhanced",
          "self.validate_before_sync",
          "print",
          "print_info",
          "result.get",
          "self.save_sync_log",
          "datetime.now",
          "print_success",
          "enumerate",
          "print_step"
        ],
        "sync_category_enhanced": [
          "self.create_github_issue_enhanced",
          "json.load",
          "print_error",
          "print_info",
          "result.get",
          "file_path.exists",
          "self.create_github_discussion_enhanced",
          "data.get",
          "self.create_github_epic_enhanced",
          "datetime.now",
          "item.get",
          "print_warning",
          "open",
          "self.item_already_synced"
        ],
        "item_already_synced": [
          "item.get"
        ],
        "create_github_epic_enhanced": [
          "self.api_request",
          "print_success",
          "print_info",
          "item.get"
        ],
        "create_github_discussion_enhanced": [
          "print_warning",
          "print_info",
          "item.get"
        ],
        "main": [
          "print_error",
          "argparse.ArgumentParser",
          "EnhancedGitHubSyncManager",
          "result.get",
          "manager.run_enhanced_sync",
          "print_success",
          "parser.parse_args",
          "len",
          "parser.add_argument"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "a9cdd670-3b11-4d89-925c-cbba29979564"
    },
    {
      "module_id": "src.scripts.collector",
      "path": "src/scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": [
            13,
            29
          ],
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": [
            32,
            38
          ],
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": [
            41,
            88
          ],
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            91,
            92
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "fnmatch.fnmatch",
          "pattern.startswith",
          "filtered.append"
        ],
        "collect_files": [
          "root_dir.rglob",
          "files.append",
          "apply_filters",
          "path.relative_to",
          "str",
          "path.is_file"
        ],
        "generate_struct": [
          "Path",
          "json.load",
          "logger.info",
          "collect_files",
          "output_path.exists",
          "json.dump",
          "output_path.open",
          "str",
          "len",
          "existing.get",
          "uuid.uuid4"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "b2c750ad-09f6-429b-a547-127db171978c"
    },
    {
      "module_id": "src.scripts.validate_epics",
      "path": "src/scripts/validate_epics.py",
      "category": "core",
      "module_doc": "Epic Data Validator\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c GitHub issues",
      "functions": [
        {
          "name": "validate_epic_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            12,
            35
          ],
          "parameters": [
            "epic"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "task",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "validate_priorities",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u0432",
          "line_range": [
            55,
            68
          ],
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_ids",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c ID \u0437\u0430\u0434\u0430\u0447",
          "line_range": [
            70,
            82
          ],
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438",
          "line_range": [
            84,
            131
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_epic_structure": [
          "isinstance",
          "errors.append"
        ],
        "validate_task_structure": [
          "isinstance",
          "task.get",
          "errors.append"
        ],
        "validate_priorities": [
          "epic.get",
          "task.get",
          "errors.append",
          "data.get"
        ],
        "validate_task_ids": [
          "set",
          "errors.append",
          "data.get",
          "seen_ids.add",
          "epic.get",
          "task.get"
        ],
        "main": [
          "Path",
          "validate_priorities",
          "json.load",
          "print",
          "sum",
          "isinstance",
          "e.get",
          "all_errors.extend",
          "validate_task_ids",
          "epics_file.exists",
          "len",
          "validate_epic_structure",
          "sys.exit",
          "epic.get",
          "all_errors.append",
          "open",
          "validate_task_structure"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "pathlib",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "0091302c-b7a8-44e9-862b-32a586390461"
    },
    {
      "module_id": "src.scripts.epic_roadmap_manager",
      "path": "src/scripts/epic_roadmap_manager.py",
      "category": "core",
      "module_doc": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u0438:\n- \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 roadmap \u0438 \u043f\u043b\u0430\u043d\u043e\u0432\n- \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439\n- \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441 GitHub epics\n- \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u0432",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            259,
            291
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            19,
            22
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_roadmap",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            24,
            31
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_roadmap",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "self",
            "roadmap"
          ],
          "decorators": []
        },
        {
          "name": "show_overview",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
          "line_range": [
            42,
            80
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "show_epic_details",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            82,
            125
          ],
          "parameters": [
            "self",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
          "line_range": [
            127,
            189
          ],
          "parameters": [
            "self",
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "complete_session",
          "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            191,
            257
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EpicRoadmapManager",
          "docstring": "",
          "line_range": [
            18,
            257
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                19,
                22
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_roadmap",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                24,
                31
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_roadmap",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
              "line_range": [
                33,
                40
              ],
              "parameters": [
                "self",
                "roadmap"
              ]
            },
            {
              "name": "show_overview",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
              "line_range": [
                42,
                80
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "show_epic_details",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
              "line_range": [
                82,
                125
              ],
              "parameters": [
                "self",
                "epic_id"
              ]
            },
            {
              "name": "start_session",
              "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
              "line_range": [
                127,
                189
              ],
              "parameters": [
                "self",
                "epic_id",
                "session_id"
              ]
            },
            {
              "name": "complete_session",
              "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                191,
                257
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "load_roadmap": [
          "json.load",
          "print",
          "open"
        ],
        "save_roadmap": [
          "print",
          "json.dump",
          "open",
          "datetime.now"
        ],
        "show_overview": [
          "epics.items",
          "print",
          "roadmap.get",
          "stats.get",
          "self.load_roadmap",
          "epic.get"
        ],
        "show_epic_details": [
          "print",
          "roadmap.get",
          "self.load_roadmap",
          "epic_data.get",
          "session.get",
          "len",
          "epic.get"
        ],
        "start_session": [
          "print",
          "self.save_roadmap",
          "sess.get",
          "os.makedirs",
          "roadmap.get",
          "json.dump",
          "datetime.now",
          "self.load_roadmap",
          "epic_data.get",
          "session.get",
          "epic.get",
          "open"
        ],
        "complete_session": [
          "os.remove",
          "json.load",
          "print",
          "self.save_roadmap",
          "sess.get",
          "os.makedirs",
          "sessions_log.append",
          "roadmap.get",
          "current_session.get",
          "datetime.now",
          "all",
          "json.dump",
          "self.load_roadmap",
          "session.get",
          "epic.get",
          "open"
        ],
        "main": [
          "argparse.ArgumentParser",
          "print",
          "manager.start_session",
          "manager.complete_session",
          "EpicRoadmapManager",
          "manager.show_epic_details",
          "parser.parse_args",
          "manager.show_overview",
          "parser.add_argument"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "bb1e0615-403f-48ff-b2e8-814723698d6b"
    },
    {
      "module_id": "src.scripts.deploy_embedded_files",
      "path": "src/scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": [
            931,
            941
          ],
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": [
            944,
            950
          ],
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": [
            953,
            1007
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            1010,
            1011
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.warning",
          "logger.error",
          "RefResolver",
          "validate"
        ],
        "backup_files": [
          "logger.info",
          "shutil.copytree",
          "datetime.now",
          "target_dir.exists"
        ],
        "deploy_embedded_files": [
          "Path",
          "target_path.exists",
          "validate_json",
          "logger.info",
          "json.dump",
          "EMBEDDED_FILES.get",
          "Path.cwd",
          "logger.error",
          "f.write",
          "backup_files",
          "logger.warning",
          "target_path.open"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "f29dee1a-206f-48d7-9be4-c6422eb342ef"
    },
    {
      "module_id": "src.scripts.team.__init__",
      "path": "src/scripts/team/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "6da9f4d6-d249-4525-878b-2c0448f787a1"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "module_doc": "Core CLI functionality and main loop.",
      "functions": [
        {
          "name": "create_cli_core",
          "docstring": "Factory function to create CLI core instance.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI core with root directory.",
          "line_range": [
            28,
            35
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_cache",
          "docstring": "Initialize cache if enabled in config.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_copilot",
          "docstring": "Initialize Copilot integration if enabled.",
          "line_range": [
            55,
            63
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive_mode",
          "docstring": "Run the interactive CLI mode.",
          "line_range": [
            65,
            97
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "Clean up resources.",
          "line_range": [
            99,
            107
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLICore",
          "docstring": "Core CLI class handling main loop and coordination.",
          "line_range": [
            25,
            107
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI core with root directory.",
              "line_range": [
                28,
                35
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "setup_cache",
              "docstring": "Initialize cache if enabled in config.",
              "line_range": [
                37,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_copilot",
              "docstring": "Initialize Copilot integration if enabled.",
              "line_range": [
                55,
                63
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_interactive_mode",
              "docstring": "Run the interactive CLI mode.",
              "line_range": [
                65,
                97
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources.",
              "line_range": [
                99,
                107
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CLIConfig",
          "CLIUtils",
          "CommandProcessor"
        ],
        "setup_cache": [
          "Path",
          "cache_path.mkdir",
          "str",
          "JSONCache",
          "logging.warning",
          "logging.info",
          "cache_config.get"
        ],
        "setup_copilot": [
          "copilot_config.get",
          "logging.info",
          "initialize_copilot",
          "logging.warning"
        ],
        "run_interactive_mode": [
          "self.setup_cache",
          "input",
          "user_input.startswith",
          "self.cleanup",
          "print",
          "logging.error",
          "user_input.lower",
          "self.setup_copilot"
        ],
        "cleanup": [
          "logging.info"
        ],
        "create_cli_core": [
          "CLICore"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "JSONCache",
        "Optional",
        "Path",
        "cli_commands",
        "cli_config",
        "cli_utils",
        "copilot",
        "initialize_copilot",
        "llmstruct.cache",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "81c56464-0a6a-47fb-b212-f6182b1b4add"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "module_doc": "Workspace State & Mode Management System\nEnhanced AI-Human Collaboration with Context Boundaries",
      "functions": [
        {
          "name": "create_workspace_manager",
          "docstring": "Factory function to create workspace manager",
          "line_range": [
            461,
            463
          ],
          "parameters": [
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_or_create_state",
          "docstring": "Load existing workspace state or create default",
          "line_range": [
            38,
            75
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_permission_templates",
          "docstring": "Load permission templates for different modes",
          "line_range": [
            77,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "set_mode",
          "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
          "line_range": [
            130,
            176
          ],
          "parameters": [
            "self",
            "modes",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_parse_modes_from_string",
          "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
          "line_range": [
            178,
            182
          ],
          "parameters": [
            "self",
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "_combine_mode_permissions",
          "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
          "line_range": [
            184,
            216
          ],
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "_get_mode_combination_name",
          "docstring": "Get descriptive name for mode combination",
          "line_range": [
            218,
            232
          ],
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "get_current_state",
          "docstring": "Get current workspace state",
          "line_range": [
            234,
            236
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "check_permission",
          "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
          "line_range": [
            238,
            302
          ],
          "parameters": [
            "self",
            "operation",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "_get_required_capability",
          "docstring": "Map operations to required capabilities",
          "line_range": [
            304,
            320
          ],
          "parameters": [
            "self",
            "operation"
          ],
          "decorators": []
        },
        {
          "name": "_is_restricted_target",
          "docstring": "Check if target matches any file restrictions",
          "line_range": [
            322,
            334
          ],
          "parameters": [
            "self",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "set_emergency_override",
          "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
          "line_range": [
            336,
            365
          ],
          "parameters": [
            "self",
            "level",
            "reason",
            "duration_minutes"
          ],
          "decorators": []
        },
        {
          "name": "_check_emergency_override",
          "docstring": "Check if emergency override is active and not expired",
          "line_range": [
            367,
            381
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_strict_mode",
          "docstring": "Integration with existing strict mode system",
          "line_range": [
            383,
            387
          ],
          "parameters": [
            "self",
            "strict_tags"
          ],
          "decorators": []
        },
        {
          "name": "add_decision_workflow",
          "docstring": "Add decision to workflow tracking (for [decide] mode)",
          "line_range": [
            389,
            396
          ],
          "parameters": [
            "self",
            "decision_id",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "get_workspace_status",
          "docstring": "Get comprehensive workspace status for debugging and display",
          "line_range": [
            398,
            420
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_override_time_remaining",
          "docstring": "Get formatted time remaining for emergency override",
          "line_range": [
            422,
            437
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_state",
          "docstring": "Save current state to file",
          "line_range": [
            439,
            442
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_mode_status",
          "docstring": "Get formatted status string for CLI display",
          "line_range": [
            444,
            458
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WorkspaceStateManager",
          "docstring": "Core workspace state management with mode-based permissions and context boundaries.\n\nFeatures:\n- Multi-dimensional mode system ([code][debug], [discuss][meta])\n- Hybrid permission system (capabilities + file restrictions)\n- Smart mode combinations with context awareness\n- Emergency override protocols with time-boxing\n- Integration with existing strict mode system",
          "line_range": [
            16,
            458
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "workspace_dir"
              ]
            },
            {
              "name": "_load_or_create_state",
              "docstring": "Load existing workspace state or create default",
              "line_range": [
                38,
                75
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_permission_templates",
              "docstring": "Load permission templates for different modes",
              "line_range": [
                77,
                128
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "set_mode",
              "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
              "line_range": [
                130,
                176
              ],
              "parameters": [
                "self",
                "modes",
                "session_id"
              ]
            },
            {
              "name": "_parse_modes_from_string",
              "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
              "line_range": [
                178,
                182
              ],
              "parameters": [
                "self",
                "mode_string"
              ]
            },
            {
              "name": "_combine_mode_permissions",
              "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
              "line_range": [
                184,
                216
              ],
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "_get_mode_combination_name",
              "docstring": "Get descriptive name for mode combination",
              "line_range": [
                218,
                232
              ],
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "get_current_state",
              "docstring": "Get current workspace state",
              "line_range": [
                234,
                236
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "check_permission",
              "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
              "line_range": [
                238,
                302
              ],
              "parameters": [
                "self",
                "operation",
                "target"
              ]
            },
            {
              "name": "_get_required_capability",
              "docstring": "Map operations to required capabilities",
              "line_range": [
                304,
                320
              ],
              "parameters": [
                "self",
                "operation"
              ]
            },
            {
              "name": "_is_restricted_target",
              "docstring": "Check if target matches any file restrictions",
              "line_range": [
                322,
                334
              ],
              "parameters": [
                "self",
                "target"
              ]
            },
            {
              "name": "set_emergency_override",
              "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
              "line_range": [
                336,
                365
              ],
              "parameters": [
                "self",
                "level",
                "reason",
                "duration_minutes"
              ]
            },
            {
              "name": "_check_emergency_override",
              "docstring": "Check if emergency override is active and not expired",
              "line_range": [
                367,
                381
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_strict_mode",
              "docstring": "Integration with existing strict mode system",
              "line_range": [
                383,
                387
              ],
              "parameters": [
                "self",
                "strict_tags"
              ]
            },
            {
              "name": "add_decision_workflow",
              "docstring": "Add decision to workflow tracking (for [decide] mode)",
              "line_range": [
                389,
                396
              ],
              "parameters": [
                "self",
                "decision_id",
                "decision_data"
              ]
            },
            {
              "name": "get_workspace_status",
              "docstring": "Get comprehensive workspace status for debugging and display",
              "line_range": [
                398,
                420
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_override_time_remaining",
              "docstring": "Get formatted time remaining for emergency override",
              "line_range": [
                422,
                437
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_state",
              "docstring": "Save current state to file",
              "line_range": [
                439,
                442
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_mode_status",
              "docstring": "Get formatted status string for CLI display",
              "line_range": [
                444,
                458
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_permission_templates",
          "self._load_or_create_state"
        ],
        "_load_or_create_state": [
          "self._save_state",
          "json.load",
          "open",
          "datetime.now"
        ],
        "_load_permission_templates": [],
        "set_mode": [
          "self._parse_modes_from_string",
          "self._get_mode_combination_name",
          "isinstance",
          "self._save_state",
          "self._combine_mode_permissions",
          "combined_permissions.get",
          "datetime.now",
          "len"
        ],
        "_parse_modes_from_string": [
          "re.findall"
        ],
        "_combine_mode_permissions": [
          "set",
          "template.get",
          "logger.info",
          "sorted",
          "list"
        ],
        "_get_mode_combination_name": [
          "sorted",
          "combination_names.get"
        ],
        "get_current_state": [],
        "check_permission": [
          "permissions.get",
          "self._check_emergency_override",
          "self._is_restricted_target",
          "self._get_required_capability"
        ],
        "_get_required_capability": [
          "operation.startswith",
          "capability_map.items"
        ],
        "_is_restricted_target": [
          "target.startswith",
          "restriction.startswith",
          "fnmatch.fnmatch"
        ],
        "set_emergency_override": [
          "self._save_state",
          "expires_at.isoformat",
          "timedelta",
          "datetime.now"
        ],
        "_check_emergency_override": [
          "self._save_state",
          "datetime.fromisoformat",
          "datetime.now",
          "override.get"
        ],
        "integrate_strict_mode": [
          "self._save_state",
          "datetime.now"
        ],
        "add_decision_workflow": [
          "self._save_state",
          "datetime.now"
        ],
        "get_workspace_status": [
          "self._get_mode_combination_name",
          "len",
          "self._get_override_time_remaining",
          "override.get"
        ],
        "_get_override_time_remaining": [
          "datetime.now",
          "override.get",
          "datetime.fromisoformat",
          "remaining.total_seconds",
          "int"
        ],
        "_save_state": [
          "json.dump",
          "open"
        ],
        "get_mode_status": [
          "self._get_mode_combination_name",
          "override.get"
        ],
        "create_workspace_manager": [
          "WorkspaceStateManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "Union",
        "datetime",
        "fnmatch",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "timedelta",
        "timezone",
        "typing"
      ],
      "hash": null,
      "artifact_id": "4b9973d1-706f-4317-b13c-9a67b7c3ec5c"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            21,
            25
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            27,
            49
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            51,
            90
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            92,
            108
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            110,
            126
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            128,
            130
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            20,
            130
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                27,
                49
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                51,
                90
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                92,
                108
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                110,
                126
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                128,
                130
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "sqlite3.connect",
          "self.create_tables"
        ],
        "create_tables": [],
        "cache_json": [
          "Path",
          "logging.error",
          "content.encode",
          "json_file.exists",
          "hashlib.sha256",
          "str",
          "json.dumps",
          "logging.info",
          "f.read",
          "open"
        ],
        "get_metadata": [
          "cursor.fetchone",
          "json.loads"
        ],
        "get_full_json": [
          "logging.error",
          "cursor.fetchone",
          "json.load",
          "open"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "3efebbd9-0ef4-4923-8394-6b4890cf5474"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            20,
            46
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            49,
            116
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "isinstance",
          "filtered.append",
          "data.get",
          "item.get"
        ],
        "select_json": [
          "Path",
          "json.load",
          "logging.error",
          "json_file.exists",
          "path.append",
          "filter_json",
          "f.seek",
          "prefix.startswith",
          "current_item.get",
          "ijson.parse",
          "open",
          "filtered.append"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f3d17ced-b618-4c78-bff8-9656b30fb635"
    },
    {
      "module_id": "src.llmstruct.workflow_orchestrator",
      "path": "src/llmstruct/workflow_orchestrator.py",
      "category": "core",
      "module_doc": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture\nExtends CopilotContextManager and SmartContextOrchestrator instead of duplicating",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface that integrates with existing llmstruct architecture",
          "line_range": [
            650,
            687
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            62,
            70
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            89,
            101
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            110,
            151
          ],
          "parameters": [
            "self",
            "project_root",
            "debug"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_onboarding_guide",
          "docstring": "Generate comprehensive AI onboarding guide using existing architecture",
          "line_range": [
            153,
            163
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_project_overview_from_struct",
          "docstring": "Get project overview from struct.json analysis",
          "line_range": [
            165,
            183
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_existing_architecture_guide",
          "docstring": "Guide to existing llmstruct architecture",
          "line_range": [
            185,
            207
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_copilot_integration_guide",
          "docstring": "Guide for proper CopilotContextManager usage",
          "line_range": [
            209,
            222
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_orchestration_guide",
          "docstring": "Guide for SmartContextOrchestrator usage",
          "line_range": [
            224,
            239
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_analysis_guide",
          "docstring": "Guide for proper struct.json analysis approach",
          "line_range": [
            241,
            259
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_current_context",
          "docstring": "Get comprehensive current context using existing architecture",
          "line_range": [
            261,
            300
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_analysis",
          "docstring": "Analyze struct.json for current codebase state",
          "line_range": [
            302,
            356
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_architecture_from_struct",
          "docstring": "Analyze architecture patterns from struct.json",
          "line_range": [
            358,
            376
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_function_duplication",
          "docstring": "Analyze function duplication across modules",
          "line_range": [
            378,
            399
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_metrics",
          "docstring": "Calculate complexity metrics from struct.json",
          "line_range": [
            401,
            417
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_score",
          "docstring": "Calculate overall complexity score",
          "line_range": [
            419,
            432
          ],
          "parameters": [
            "self",
            "stats"
          ],
          "decorators": []
        },
        {
          "name": "_get_orchestrator_state",
          "docstring": "Get SmartContextOrchestrator state",
          "line_range": [
            434,
            445
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_codebase_for_duplicates",
          "docstring": "Analyze codebase for duplicate functions using struct.json",
          "line_range": [
            447,
            495
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "sync_with_existing_architecture",
          "docstring": "Sync with existing llmstruct architecture instead of duplicating",
          "line_range": [
            497,
            520
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "create_task",
          "docstring": "Create new task (this is new functionality, not duplication)",
          "line_range": [
            526,
            554
          ],
          "parameters": [
            "self",
            "title",
            "description",
            "priority",
            "tags",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_active_tasks",
          "docstring": "Get all active tasks",
          "line_range": [
            556,
            564
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_json_safe",
          "docstring": "Safe JSON loading with error handling",
          "line_range": [
            566,
            576
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_save_json_safe",
          "docstring": "Safe JSON saving with error handling",
          "line_range": [
            578,
            587
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_get_active_session_context",
          "docstring": "Get current session context",
          "line_range": [
            590,
            594
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_identify_key_components",
          "docstring": "Identify key components from struct analysis",
          "line_range": [
            596,
            607
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_patterns",
          "docstring": "Define workflow patterns that integrate with existing architecture",
          "line_range": [
            609,
            629
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_available_commands",
          "docstring": "Available commands that work with existing architecture",
          "line_range": [
            631,
            647
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskStatus",
          "docstring": "",
          "line_range": [
            29,
            34
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "SessionType",
          "docstring": "",
          "line_range": [
            37,
            42
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "Task",
          "docstring": "Structured task representation",
          "line_range": [
            46,
            70
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                62,
                70
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "Session",
          "docstring": "AI work session with context and goals",
          "line_range": [
            74,
            101
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                89,
                101
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "WorkflowOrchestrator",
          "docstring": "Integration layer that extends existing llmstruct architecture\nUses CopilotContextManager, SmartContextOrchestrator, and struct.json analysis",
          "line_range": [
            104,
            647
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                110,
                151
              ],
              "parameters": [
                "self",
                "project_root",
                "debug"
              ]
            },
            {
              "name": "get_ai_onboarding_guide",
              "docstring": "Generate comprehensive AI onboarding guide using existing architecture",
              "line_range": [
                153,
                163
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_project_overview_from_struct",
              "docstring": "Get project overview from struct.json analysis",
              "line_range": [
                165,
                183
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_existing_architecture_guide",
              "docstring": "Guide to existing llmstruct architecture",
              "line_range": [
                185,
                207
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_copilot_integration_guide",
              "docstring": "Guide for proper CopilotContextManager usage",
              "line_range": [
                209,
                222
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_context_orchestration_guide",
              "docstring": "Guide for SmartContextOrchestrator usage",
              "line_range": [
                224,
                239
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_analysis_guide",
              "docstring": "Guide for proper struct.json analysis approach",
              "line_range": [
                241,
                259
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_current_context",
              "docstring": "Get comprehensive current context using existing architecture",
              "line_range": [
                261,
                300
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_analysis",
              "docstring": "Analyze struct.json for current codebase state",
              "line_range": [
                302,
                356
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_architecture_from_struct",
              "docstring": "Analyze architecture patterns from struct.json",
              "line_range": [
                358,
                376
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_analyze_function_duplication",
              "docstring": "Analyze function duplication across modules",
              "line_range": [
                378,
                399
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_calculate_complexity_metrics",
              "docstring": "Calculate complexity metrics from struct.json",
              "line_range": [
                401,
                417
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_calculate_complexity_score",
              "docstring": "Calculate overall complexity score",
              "line_range": [
                419,
                432
              ],
              "parameters": [
                "self",
                "stats"
              ]
            },
            {
              "name": "_get_orchestrator_state",
              "docstring": "Get SmartContextOrchestrator state",
              "line_range": [
                434,
                445
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_codebase_for_duplicates",
              "docstring": "Analyze codebase for duplicate functions using struct.json",
              "line_range": [
                447,
                495
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "sync_with_existing_architecture",
              "docstring": "Sync with existing llmstruct architecture instead of duplicating",
              "line_range": [
                497,
                520
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "create_task",
              "docstring": "Create new task (this is new functionality, not duplication)",
              "line_range": [
                526,
                554
              ],
              "parameters": [
                "self",
                "title",
                "description",
                "priority",
                "tags",
                "dependencies"
              ]
            },
            {
              "name": "get_active_tasks",
              "docstring": "Get all active tasks",
              "line_range": [
                556,
                564
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_json_safe",
              "docstring": "Safe JSON loading with error handling",
              "line_range": [
                566,
                576
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_save_json_safe",
              "docstring": "Safe JSON saving with error handling",
              "line_range": [
                578,
                587
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            },
            {
              "name": "_get_active_session_context",
              "docstring": "Get current session context",
              "line_range": [
                590,
                594
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_identify_key_components",
              "docstring": "Identify key components from struct analysis",
              "line_range": [
                596,
                607
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_get_workflow_patterns",
              "docstring": "Define workflow patterns that integrate with existing architecture",
              "line_range": [
                609,
                629
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_available_commands",
              "docstring": "Available commands that work with existing architecture",
              "line_range": [
                631,
                647
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "Path",
          "time.time",
          "SmartContextOrchestrator",
          "CLIConfig",
          "print",
          "CopilotContextManager",
          "UniversalConverter",
          "str",
          "SystemCapabilityDiscovery"
        ],
        "get_ai_onboarding_guide": [
          "self._get_copilot_integration_guide",
          "self._get_workflow_patterns",
          "self._get_available_commands",
          "self._get_struct_analysis_guide",
          "self._get_context_orchestration_guide",
          "self._get_existing_architecture_guide",
          "self._get_project_overview_from_struct"
        ],
        "_get_project_overview_from_struct": [
          "json.load",
          "struct_data.get",
          "self._identify_key_components",
          "struct_path.exists",
          "self._analyze_architecture_from_struct",
          "len",
          "logger.warning",
          "open"
        ],
        "_get_existing_architecture_guide": [],
        "_get_copilot_integration_guide": [],
        "_get_context_orchestration_guide": [],
        "_get_struct_analysis_guide": [],
        "get_current_context": [
          "print",
          "isinstance",
          "self.get_active_tasks",
          "self._get_orchestrator_state",
          "self._get_struct_analysis",
          "str",
          "self._get_active_session_context",
          "time.time",
          "logger.warning"
        ],
        "_get_struct_analysis": [
          "json.load",
          "self._calculate_complexity_metrics",
          "print",
          "struct_data.get",
          "self._analyze_function_duplication",
          "str",
          "len",
          "logger.error",
          "struct_path.exists",
          "self._analyze_architecture_from_struct",
          "time.time",
          "open"
        ],
        "_analyze_architecture_from_struct": [
          "directories.items",
          "Path",
          "struct_data.get",
          "directories.keys",
          "len",
          "list"
        ],
        "_analyze_function_duplication": [
          "struct_data.get",
          "function_names.items",
          "len",
          "module.get"
        ],
        "_calculate_complexity_metrics": [
          "sum",
          "struct_data.get",
          "stats.get",
          "m.get",
          "round",
          "len",
          "self._calculate_complexity_score"
        ],
        "_calculate_complexity_score": [
          "round",
          "stats.get"
        ],
        "_get_orchestrator_state": [
          "str"
        ],
        "analyze_codebase_for_duplicates": [
          "print",
          "recommendations.append",
          "struct_analysis.get",
          "self._get_struct_analysis",
          "len",
          "duplication.get",
          "time.time"
        ],
        "sync_with_existing_architecture": [
          "str",
          "json.dump",
          "logger.error",
          "open"
        ],
        "create_task": [
          "logger.info",
          "asdict",
          "Task",
          "str",
          "self._save_json_safe",
          "self._load_json_safe",
          "uuid.uuid4"
        ],
        "get_active_tasks": [
          "self._load_json_safe",
          "t.get"
        ],
        "_load_json_safe": [
          "file_path.exists",
          "json.load",
          "logger.error",
          "open"
        ],
        "_save_json_safe": [
          "json.dump",
          "logger.error",
          "open"
        ],
        "_get_active_session_context": [
          "asdict"
        ],
        "_identify_key_components": [
          "struct_data.get",
          "len",
          "key_components.append",
          "module.get"
        ],
        "_get_workflow_patterns": [],
        "_get_available_commands": [],
        "main": [
          "argparse.ArgumentParser",
          "orchestrator.get_ai_onboarding_guide",
          "print",
          "context.get",
          "orchestrator.sync_with_existing_architecture",
          "results.items",
          "orchestrator.analyze_codebase_for_duplicates",
          "parser.parse_args",
          "json.dumps",
          "orchestrator.get_current_context",
          "len",
          "parser.add_argument",
          "WorkflowOrchestrator"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "SystemCapabilityDiscovery",
        "Union",
        "UniversalConverter",
        "ai_self_awareness",
        "argparse",
        "asdict",
        "cli_config",
        "context_orchestrator",
        "copilot",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "os",
        "parsers.universal_converter",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "2ebe66dc-35f1-45b9-a253-a2d472b9fc69"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "module_doc": "GitHub visualization/graph feature (gh-view-v1)\nExport consolidated tasks/ideas from JSON files to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for GitHub Projects export",
          "line_range": [
            177,
            208
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize exporter with configuration",
          "line_range": [
            19,
            25
          ],
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from TOML file",
          "line_range": [
            27,
            35
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_mapping",
          "docstring": "Load existing ID mapping between local and GitHub",
          "line_range": [
            37,
            45
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_mapping",
          "docstring": "Save ID mapping to file",
          "line_range": [
            47,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_run_gh_command",
          "docstring": "Run GitHub CLI command and return success status and output",
          "line_range": [
            55,
            68
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "load_official_data",
          "docstring": "Load tasks and ideas from official JSON files",
          "line_range": [
            70,
            98
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "format_task_for_github",
          "docstring": "Format task data for GitHub Project card",
          "line_range": [
            100,
            137
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "format_idea_for_github",
          "docstring": "Format idea data for GitHub Project card",
          "line_range": [
            139,
            174
          ],
          "parameters": [
            "self",
            "idea"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExporter",
          "docstring": "Export tasks and ideas to GitHub Projects as cards",
          "line_range": [
            16,
            174
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize exporter with configuration",
              "line_range": [
                19,
                25
              ],
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from TOML file",
              "line_range": [
                27,
                35
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_mapping",
              "docstring": "Load existing ID mapping between local and GitHub",
              "line_range": [
                37,
                45
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_mapping",
              "docstring": "Save ID mapping to file",
              "line_range": [
                47,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_run_gh_command",
              "docstring": "Run GitHub CLI command and return success status and output",
              "line_range": [
                55,
                68
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "load_official_data",
              "docstring": "Load tasks and ideas from official JSON files",
              "line_range": [
                70,
                98
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "format_task_for_github",
              "docstring": "Format task data for GitHub Project card",
              "line_range": [
                100,
                137
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "format_idea_for_github",
              "docstring": "Format idea data for GitHub Project card",
              "line_range": [
                139,
                174
              ],
              "parameters": [
                "self",
                "idea"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_mapping",
          "self._load_config"
        ],
        "_load_config": [
          "config.get",
          "print",
          "toml.load",
          "open"
        ],
        "_load_mapping": [
          "json.load",
          "open"
        ],
        "_save_mapping": [
          "json.dump",
          "print",
          "open"
        ],
        "_run_gh_command": [
          "subprocess.run"
        ],
        "load_official_data": [
          "json.load",
          "print",
          "tasks_file.exists",
          "tasks_data.get",
          "ideas_data.get",
          "len",
          "open",
          "ideas_file.exists"
        ],
        "format_task_for_github": [
          "body_parts.append",
          "task.get",
          "status_map.get"
        ],
        "format_idea_for_github": [
          "idea.get",
          "body_parts.append",
          "status_map.get"
        ],
        "main": [
          "exporter.format_task_for_github",
          "print",
          "GitHubProjectsExporter",
          "sys.exit",
          "len",
          "exporter.load_official_data",
          "exporter.format_idea_for_github"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "pathlib",
        "subprocess",
        "sys",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b9bd40a3-d977-44ac-b6d3-b5d0d9a4dacd"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
          "line_range": [
            20,
            71
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            74,
            114
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "struct.get",
          "prompt.lower",
          "isinstance",
          "str",
          "filter_json",
          "module.get",
          "item.get",
          "any"
        ],
        "attach_to_llm_request": [
          "Path",
          "prompt.lower",
          "select_json",
          "logging.error",
          "cache.get_metadata",
          "cache.cache_json",
          "context_file.exists",
          "filter_json",
          "logging.info",
          "filter_struct",
          "json.dumps",
          "cache.get_full_json"
        ]
      },
      "dependencies": [
        "Any",
        "JSONCache",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "444c57f5-eb26-4aa4-bd37-f996ef7ad3f5"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "module_doc": "LLMStruct Copilot Integration Module\nProvides context-aware development assistance with hybrid copilot capabilities.",
      "functions": [
        {
          "name": "initialize_copilot",
          "docstring": "Initialize copilot context manager for the project.\n\nArgs:\n    project_root: Project root directory\n\nReturns:\n    Configured CopilotContextManager instance",
          "line_range": [
            649,
            659
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "trigger_copilot_event",
          "docstring": "Trigger a copilot event and get relevant context.\n\nArgs:\n    manager: CopilotContextManager instance\n    event_type: Type of event\n    file_path: Optional file path\n    **kwargs: Additional event metadata\n\nReturns:\n    Dict with event context",
          "line_range": [
            662,
            679
          ],
          "parameters": [
            "manager",
            "event_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "smart_suggest",
          "docstring": "Get smart suggestions based on query and context.\n\nArgs:\n    manager: CopilotContextManager instance\n    query: Query string\n    context: Context type (code, workflow, task, etc.)\n\nReturns:\n    List of suggestions",
          "line_range": [
            682,
            702
          ],
          "parameters": [
            "manager",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context_for_scenario",
          "docstring": "Get optimized context for specific scenario - standalone function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            705,
            728
          ],
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
          "line_range": [
            68,
            90
          ],
          "parameters": [
            "self",
            "project_root",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load copilot configuration from JSON file.",
          "line_range": [
            92,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_layers",
          "docstring": "Initialize context layers from configuration.",
          "line_range": [
            106,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_context_layer",
          "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
          "line_range": [
            118,
            160
          ],
          "parameters": [
            "self",
            "layer_name",
            "force"
          ],
          "decorators": []
        },
        {
          "name": "unload_context_layer",
          "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
          "line_range": [
            162,
            180
          ],
          "parameters": [
            "self",
            "layer_name"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            182,
            225
          ],
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_context",
          "docstring": "Fallback to legacy context loading.",
          "line_range": [
            227,
            235
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_vscode",
          "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
          "line_range": [
            237,
            251
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_event",
          "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
          "line_range": [
            252,
            296
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_event_context",
          "docstring": "Legacy event context loading as fallback.",
          "line_range": [
            298,
            350
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "suggest_completion",
          "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
          "line_range": [
            352,
            397
          ],
          "parameters": [
            "self",
            "current_code",
            "file_path",
            "cursor_position"
          ],
          "decorators": []
        },
        {
          "name": "validate_change",
          "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
          "line_range": [
            399,
            445
          ],
          "parameters": [
            "self",
            "file_path",
            "change_type"
          ],
          "decorators": []
        },
        {
          "name": "_matches_scope",
          "docstring": "Check if file matches scope pattern.",
          "line_range": [
            447,
            452
          ],
          "parameters": [
            "self",
            "file_path",
            "scope"
          ],
          "decorators": []
        },
        {
          "name": "_matches_trigger",
          "docstring": "Check if change type matches trigger.",
          "line_range": [
            454,
            463
          ],
          "parameters": [
            "self",
            "change_type",
            "trigger"
          ],
          "decorators": []
        },
        {
          "name": "_validate_json_schema",
          "docstring": "Validate JSON file against schema.",
          "line_range": [
            465,
            480
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_check_circular_dependencies",
          "docstring": "Check for circular dependencies.",
          "line_range": [
            482,
            507
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_validate_task_references",
          "docstring": "Validate task references in tasks.json.",
          "line_range": [
            509,
            536
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
          "line_range": [
            538,
            568
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "refresh_all_contexts",
          "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
          "line_range": [
            570,
            584
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_status",
          "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
          "line_range": [
            586,
            607
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "export_context",
          "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
          "line_range": [
            609,
            631
          ],
          "parameters": [
            "self",
            "layers",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Clean up resources.",
          "line_range": [
            633,
            643
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextLayer",
          "docstring": "Context layer priorities for copilot integration.",
          "line_range": [
            22,
            28
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AttachMode",
          "docstring": "Context attachment modes.",
          "line_range": [
            31,
            37
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLayerConfig",
          "docstring": "Configuration for a context layer.",
          "line_range": [
            41,
            49
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotEvent",
          "docstring": "Represents a copilot event for context triggering.",
          "line_range": [
            53,
            59
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotContextManager",
          "docstring": "Manages context layers and integration with GitHub Copilot.\nProvides intelligent context loading and workflow assistance.",
          "line_range": [
            62,
            643
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
              "line_range": [
                68,
                90
              ],
              "parameters": [
                "self",
                "project_root",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load copilot configuration from JSON file.",
              "line_range": [
                92,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_initialize_layers",
              "docstring": "Initialize context layers from configuration.",
              "line_range": [
                106,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_context_layer",
              "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
              "line_range": [
                118,
                160
              ],
              "parameters": [
                "self",
                "layer_name",
                "force"
              ]
            },
            {
              "name": "unload_context_layer",
              "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
              "line_range": [
                162,
                180
              ],
              "parameters": [
                "self",
                "layer_name"
              ]
            },
            {
              "name": "get_optimized_context",
              "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
              "line_range": [
                182,
                225
              ],
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "max_tokens"
              ]
            },
            {
              "name": "_get_legacy_context",
              "docstring": "Fallback to legacy context loading.",
              "line_range": [
                227,
                235
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_vscode",
              "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
              "line_range": [
                237,
                251
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_context_for_event",
              "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
              "line_range": [
                252,
                296
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_get_legacy_event_context",
              "docstring": "Legacy event context loading as fallback.",
              "line_range": [
                298,
                350
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "suggest_completion",
              "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
              "line_range": [
                352,
                397
              ],
              "parameters": [
                "self",
                "current_code",
                "file_path",
                "cursor_position"
              ]
            },
            {
              "name": "validate_change",
              "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
              "line_range": [
                399,
                445
              ],
              "parameters": [
                "self",
                "file_path",
                "change_type"
              ]
            },
            {
              "name": "_matches_scope",
              "docstring": "Check if file matches scope pattern.",
              "line_range": [
                447,
                452
              ],
              "parameters": [
                "self",
                "file_path",
                "scope"
              ]
            },
            {
              "name": "_matches_trigger",
              "docstring": "Check if change type matches trigger.",
              "line_range": [
                454,
                463
              ],
              "parameters": [
                "self",
                "change_type",
                "trigger"
              ]
            },
            {
              "name": "_validate_json_schema",
              "docstring": "Validate JSON file against schema.",
              "line_range": [
                465,
                480
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_check_circular_dependencies",
              "docstring": "Check for circular dependencies.",
              "line_range": [
                482,
                507
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_validate_task_references",
              "docstring": "Validate task references in tasks.json.",
              "line_range": [
                509,
                536
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
              "line_range": [
                538,
                568
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "refresh_all_contexts",
              "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
              "line_range": [
                570,
                584
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_status",
              "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
              "line_range": [
                586,
                607
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "export_context",
              "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
              "line_range": [
                609,
                631
              ],
              "parameters": [
                "self",
                "layers",
                "format"
              ]
            },
            {
              "name": "close",
              "docstring": "Clean up resources.",
              "line_range": [
                633,
                643
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "create_context_orchestrator",
          "self._initialize_layers",
          "str",
          "JSONCache",
          "self._load_config",
          "os.getcwd"
        ],
        "_load_config": [
          "Path",
          "json.load",
          "logger.info",
          "logger.error",
          "logger.warning",
          "open"
        ],
        "_initialize_layers": [
          "layers_config.items",
          "ContextLayerConfig",
          "layer_config.get"
        ],
        "load_context_layer": [
          "json.load",
          "logger.debug",
          "logger.info",
          "source_path.exists",
          "logger.error",
          "time.time",
          "logger.warning",
          "open"
        ],
        "unload_context_layer": [
          "logger.info"
        ],
        "get_optimized_context": [
          "self._get_legacy_context",
          "scenario_mapping.get",
          "logger.error"
        ],
        "_get_legacy_context": [
          "self.load_context_layer"
        ],
        "get_context_for_vscode": [
          "self.get_optimized_context"
        ],
        "get_context_for_event": [
          "self.get_optimized_context",
          "scenario_mapping.get",
          "logger.error",
          "self._get_legacy_event_context"
        ],
        "_get_legacy_event_context": [
          "workflow_triggers.get",
          "json.load",
          "self.load_context_layer",
          "triggers.get",
          "file_triggers.get",
          "source_path.exists",
          "code_triggers.get",
          "logger.error",
          "open"
        ],
        "suggest_completion": [
          "Path",
          "self.load_context_layer",
          "struct_context.get",
          "suggestions.append",
          "str",
          "module.get",
          "func.get",
          "current_module.get"
        ],
        "validate_change": [
          "self._matches_scope",
          "safety_features.get",
          "result.get",
          "self._matches_trigger",
          "len",
          "self._validate_json_schema",
          "rule.get",
          "self._validate_task_references",
          "self._check_circular_dependencies"
        ],
        "_matches_scope": [
          "str",
          "fnmatch",
          "Path"
        ],
        "_matches_trigger": [
          "trigger_map.get"
        ],
        "_validate_json_schema": [
          "json.load",
          "open",
          "file_path.endswith"
        ],
        "_check_circular_dependencies": [
          "Path",
          "self.load_context_layer",
          "struct_data.get",
          "str",
          "module.get",
          "len"
        ],
        "_validate_task_references": [
          "set",
          "task_ids.add",
          "json.load",
          "file_path.endswith",
          "tasks_data.get",
          "task.get",
          "open"
        ],
        "get_workflow_suggestions": [
          "self.load_context_layer",
          "workflows.items",
          "suggestions.append",
          "suggestions.extend",
          "command.lower",
          "workflow.get"
        ],
        "refresh_all_contexts": [
          "self.load_context_layer",
          "list",
          "logger.info"
        ],
        "get_context_status": [
          "list"
        ],
        "export_context": [
          "str",
          "list",
          "json.dumps"
        ],
        "close": [
          "hasattr",
          "logger.info"
        ],
        "initialize_copilot": [
          "CopilotContextManager"
        ],
        "trigger_copilot_event": [
          "CopilotEvent",
          "manager.get_context_for_event"
        ],
        "smart_suggest": [
          "manager.get_workflow_suggestions"
        ],
        "get_optimized_context_for_scenario": [
          "locals",
          "initialize_copilot",
          "manager.close",
          "manager.get_optimized_context"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "Union",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "fnmatch",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "10e34fb1-d59f-425d-bf09-837152881fb3"
    },
    {
      "module_id": "src.llmstruct.ai_workflow_middleware",
      "path": "src/llmstruct/ai_workflow_middleware.py",
      "category": "core",
      "module_doc": "AI Workflow Middleware - Forces AI Integration with LLMStruct\nIntercepts all AI requests and ensures they go through our orchestration system.",
      "functions": [
        {
          "name": "initialize_ai_middleware",
          "docstring": "Initialize global AI middleware.",
          "line_range": [
            393,
            397
          ],
          "parameters": [
            "project_root",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_middleware",
          "docstring": "Get current AI middleware instance.",
          "line_range": [
            400,
            402
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "process_ai_query",
          "docstring": "Global function to process AI queries through middleware.",
          "line_range": [
            405,
            410
          ],
          "parameters": [
            "query",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "ensure_llmstruct_integration",
          "docstring": "Decorator that ensures function uses llmstruct system.",
          "line_range": [
            414,
            431
          ],
          "parameters": [
            "func"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            55,
            74
          ],
          "parameters": [
            "self",
            "project_root",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "_load_middleware_config",
          "docstring": "Load middleware configuration.",
          "line_range": [
            76,
            101
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_ai_request",
          "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration",
          "line_range": [
            103,
            135
          ],
          "parameters": [
            "self",
            "raw_query",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_parse_ai_request",
          "docstring": "Parse raw query into structured AI request.",
          "line_range": [
            137,
            160
          ],
          "parameters": [
            "self",
            "raw_query"
          ],
          "decorators": []
        },
        {
          "name": "_should_use_llmstruct",
          "docstring": "Determine if request should use llmstruct system.",
          "line_range": [
            162,
            186
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_process_with_llmstruct",
          "docstring": "Process request through full llmstruct system.",
          "line_range": [
            188,
            219
          ],
          "parameters": [
            "self",
            "request",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_process_bypass",
          "docstring": "Process request without llmstruct system.",
          "line_range": [
            221,
            236
          ],
          "parameters": [
            "self",
            "request",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_optimize_context",
          "docstring": "Optimize context using orchestrator.",
          "line_range": [
            238,
            261
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_ai_delegation",
          "docstring": "Analyze which AI should handle this request.",
          "line_range": [
            263,
            280
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_context",
          "docstring": "Get enhanced context with project awareness.",
          "line_range": [
            282,
            295
          ],
          "parameters": [
            "self",
            "request",
            "context_result"
          ],
          "decorators": []
        },
        {
          "name": "_get_capability_summary",
          "docstring": "Get current system capabilities.",
          "line_range": [
            297,
            310
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_generate_usage_guidance",
          "docstring": "Generate guidance for AI on how to use llmstruct system.",
          "line_range": [
            312,
            331
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_map_tags_to_scenario",
          "docstring": "Map context tags to orchestrator scenarios.",
          "line_range": [
            333,
            348
          ],
          "parameters": [
            "self",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "_default_ai_processing",
          "docstring": "Default AI processing when no custom handler provided.",
          "line_range": [
            350,
            365
          ],
          "parameters": [
            "self",
            "request",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_middleware_stats",
          "docstring": "Get middleware usage statistics.",
          "line_range": [
            367,
            376
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "force_llmstruct_mode",
          "docstring": "Force all future requests to use llmstruct system.",
          "line_range": [
            378,
            381
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enable_guidance_mode",
          "docstring": "Enable guided mode with llmstruct suggestions.",
          "line_range": [
            383,
            386
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "wrapper",
          "docstring": "",
          "line_range": [
            416,
            429
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AIWorkflowMode",
          "docstring": "AI workflow enforcement modes.",
          "line_range": [
            21,
            26
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AIRequest",
          "docstring": "Standardized AI request structure.",
          "line_range": [
            30,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIResponse",
          "docstring": "Standardized AI response structure.",
          "line_range": [
            40,
            46
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIWorkflowMiddleware",
          "docstring": "Middleware that ensures ALL AI interactions go through LLMStruct system.\nThis solves the problem of AI not using its own infrastructure.",
          "line_range": [
            49,
            386
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                55,
                74
              ],
              "parameters": [
                "self",
                "project_root",
                "mode"
              ]
            },
            {
              "name": "_load_middleware_config",
              "docstring": "Load middleware configuration.",
              "line_range": [
                76,
                101
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_ai_request",
              "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration",
              "line_range": [
                103,
                135
              ],
              "parameters": [
                "self",
                "raw_query",
                "ai_handler"
              ]
            },
            {
              "name": "_parse_ai_request",
              "docstring": "Parse raw query into structured AI request.",
              "line_range": [
                137,
                160
              ],
              "parameters": [
                "self",
                "raw_query"
              ]
            },
            {
              "name": "_should_use_llmstruct",
              "docstring": "Determine if request should use llmstruct system.",
              "line_range": [
                162,
                186
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_process_with_llmstruct",
              "docstring": "Process request through full llmstruct system.",
              "line_range": [
                188,
                219
              ],
              "parameters": [
                "self",
                "request",
                "ai_handler"
              ]
            },
            {
              "name": "_process_bypass",
              "docstring": "Process request without llmstruct system.",
              "line_range": [
                221,
                236
              ],
              "parameters": [
                "self",
                "request",
                "ai_handler"
              ]
            },
            {
              "name": "_optimize_context",
              "docstring": "Optimize context using orchestrator.",
              "line_range": [
                238,
                261
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_analyze_ai_delegation",
              "docstring": "Analyze which AI should handle this request.",
              "line_range": [
                263,
                280
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_get_enhanced_context",
              "docstring": "Get enhanced context with project awareness.",
              "line_range": [
                282,
                295
              ],
              "parameters": [
                "self",
                "request",
                "context_result"
              ]
            },
            {
              "name": "_get_capability_summary",
              "docstring": "Get current system capabilities.",
              "line_range": [
                297,
                310
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_generate_usage_guidance",
              "docstring": "Generate guidance for AI on how to use llmstruct system.",
              "line_range": [
                312,
                331
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_map_tags_to_scenario",
              "docstring": "Map context tags to orchestrator scenarios.",
              "line_range": [
                333,
                348
              ],
              "parameters": [
                "self",
                "tags"
              ]
            },
            {
              "name": "_default_ai_processing",
              "docstring": "Default AI processing when no custom handler provided.",
              "line_range": [
                350,
                365
              ],
              "parameters": [
                "self",
                "request",
                "context"
              ]
            },
            {
              "name": "get_middleware_stats",
              "docstring": "Get middleware usage statistics.",
              "line_range": [
                367,
                376
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "force_llmstruct_mode",
              "docstring": "Force all future requests to use llmstruct system.",
              "line_range": [
                378,
                381
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enable_guidance_mode",
              "docstring": "Enable guided mode with llmstruct suggestions.",
              "line_range": [
                383,
                386
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "CursorAIBridge",
          "logger.info",
          "create_context_orchestrator",
          "str",
          "self._load_middleware_config",
          "SystemCapabilityDiscovery"
        ],
        "_load_middleware_config": [
          "json.load",
          "open",
          "config_path.exists"
        ],
        "process_ai_request": [
          "AIResponse",
          "self._process_with_llmstruct",
          "str",
          "logger.error",
          "time.time",
          "self._should_use_llmstruct",
          "self._parse_ai_request",
          "self._process_bypass"
        ],
        "_parse_ai_request": [
          "re.sub",
          "AIRequest",
          "context_tags.extend",
          "re.findall",
          "time.time"
        ],
        "_should_use_llmstruct": [],
        "_process_with_llmstruct": [
          "AIResponse",
          "self._get_enhanced_context",
          "enhanced_context.get",
          "self._optimize_context",
          "self._analyze_ai_delegation",
          "ai_handler",
          "self._default_ai_processing",
          "time.time"
        ],
        "_process_bypass": [
          "AIResponse",
          "ai_handler"
        ],
        "_optimize_context": [
          "str",
          "logger.error",
          "self._map_tags_to_scenario",
          "context.get",
          "len"
        ],
        "_analyze_ai_delegation": [
          "delegation.get",
          "logger.error",
          "str"
        ],
        "_get_enhanced_context": [
          "self._get_capability_summary",
          "self._generate_usage_guidance"
        ],
        "_get_capability_summary": [
          "str"
        ],
        "_generate_usage_guidance": [
          "guidance.append"
        ],
        "_map_tags_to_scenario": [],
        "_default_ai_processing": [],
        "get_middleware_stats": [],
        "force_llmstruct_mode": [
          "logger.info"
        ],
        "enable_guidance_mode": [
          "logger.info"
        ],
        "initialize_ai_middleware": [
          "AIWorkflowMiddleware"
        ],
        "get_ai_middleware": [],
        "process_ai_query": [
          "_middleware_instance.process_ai_request",
          "RuntimeError"
        ],
        "ensure_llmstruct_integration": [],
        "wrapper": [
          "get_ai_middleware",
          "middleware.process_ai_request",
          "func",
          "str",
          "logger.warning",
          "kwargs.get"
        ]
      },
      "dependencies": [
        "Any",
        "Callable",
        "CursorAIBridge",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.context_orchestrator",
        "llmstruct.cursor_ai_bridge",
        "logging",
        "pathlib",
        "re",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "81ab8ec1-49d2-4df1-bcbe-1b2093e47bfc"
    },
    {
      "module_id": "src.llmstruct.ai_cli_integration",
      "path": "src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "module_doc": "AI Self-Awareness CLI Integration Module\nIntegrates unused CLI functions into the AI self-awareness system.",
      "functions": [
        {
          "name": "create_ai_cli_integration",
          "docstring": "Factory function to create AI CLI integration instance.",
          "line_range": [
            304,
            306
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_enhanced_cli_summary",
          "docstring": "Get a formatted summary of AI CLI integration capabilities.",
          "line_range": [
            309,
            346
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI integration system.",
          "line_range": [
            21,
            25
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_discover_available_commands",
          "docstring": "Discover which unused CLI commands are available for integration.",
          "line_range": [
            27,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_status_command",
          "docstring": "Integrate cmd_status for real-time AI system status awareness.",
          "line_range": [
            71,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_audit_command",
          "docstring": "Integrate cmd_audit for system health analysis awareness.",
          "line_range": [
            102,
            131
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_context_command",
          "docstring": "Integrate cmd_context for context mode awareness.",
          "line_range": [
            133,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_queue_command",
          "docstring": "Integrate cmd_queue for workflow queue monitoring.",
          "line_range": [
            164,
            193
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_integration_summary",
          "docstring": "Get summary of CLI command integrations for AI awareness.",
          "line_range": [
            195,
            215
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_ai_enhancement_impact",
          "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
          "line_range": [
            217,
            241
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_status",
          "docstring": "Create fallback status information if cmd_status is not available.",
          "line_range": [
            243,
            256
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_audit",
          "docstring": "Create fallback audit information if cmd_audit is not available.",
          "line_range": [
            258,
            271
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_context",
          "docstring": "Create fallback context information if cmd_context is not available.",
          "line_range": [
            273,
            286
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_queue",
          "docstring": "Create fallback queue information if cmd_queue is not available.",
          "line_range": [
            288,
            301
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AISelfAwarenessCLIIntegration",
          "docstring": "Integrates unused CLI functions to enhance AI self-awareness capabilities.\nTransforms 21 unused CLI commands into useful AI interaction tools.",
          "line_range": [
            15,
            301
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI integration system.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_discover_available_commands",
              "docstring": "Discover which unused CLI commands are available for integration.",
              "line_range": [
                27,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_status_command",
              "docstring": "Integrate cmd_status for real-time AI system status awareness.",
              "line_range": [
                71,
                100
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_audit_command",
              "docstring": "Integrate cmd_audit for system health analysis awareness.",
              "line_range": [
                102,
                131
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_context_command",
              "docstring": "Integrate cmd_context for context mode awareness.",
              "line_range": [
                133,
                162
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_queue_command",
              "docstring": "Integrate cmd_queue for workflow queue monitoring.",
              "line_range": [
                164,
                193
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_integration_summary",
              "docstring": "Get summary of CLI command integrations for AI awareness.",
              "line_range": [
                195,
                215
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_ai_enhancement_impact",
              "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
              "line_range": [
                217,
                241
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_status",
              "docstring": "Create fallback status information if cmd_status is not available.",
              "line_range": [
                243,
                256
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_audit",
              "docstring": "Create fallback audit information if cmd_audit is not available.",
              "line_range": [
                258,
                271
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_context",
              "docstring": "Create fallback context information if cmd_context is not available.",
              "line_range": [
                273,
                286
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_queue",
              "docstring": "Create fallback queue information if cmd_queue is not available.",
              "line_range": [
                288,
                301
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._discover_available_commands"
        ],
        "_discover_available_commands": [
          "hasattr",
          "getattr",
          "logger.error",
          "unused_command_mapping.items"
        ],
        "integrate_ai_status_command": [
          "str",
          "self._create_fallback_status",
          "logger.error",
          "cmd_status"
        ],
        "integrate_ai_audit_command": [
          "str",
          "logger.error",
          "cmd_audit",
          "self._create_fallback_audit"
        ],
        "integrate_ai_context_command": [
          "str",
          "cmd_context",
          "logger.error",
          "self._create_fallback_context"
        ],
        "integrate_ai_queue_command": [
          "str",
          "cmd_queue",
          "logger.error",
          "self._create_fallback_queue"
        ],
        "get_integration_summary": [
          "cmd.get",
          "sum",
          "info.get",
          "len",
          "self._calculate_ai_enhancement_impact"
        ],
        "_calculate_ai_enhancement_impact": [
          "enhanced_categories.append",
          "info.get",
          "any",
          "capability_categories.items",
          "len"
        ],
        "_create_fallback_status": [
          "str"
        ],
        "_create_fallback_audit": [
          "str"
        ],
        "_create_fallback_context": [],
        "_create_fallback_queue": [],
        "create_ai_cli_integration": [
          "AISelfAwarenessCLIIntegration"
        ],
        "get_ai_enhanced_cli_summary": [
          "integration.integrate_ai_queue_command",
          "integration.get_integration_summary",
          "integration.integrate_ai_status_command",
          "integration.integrate_ai_audit_command",
          "create_ai_cli_integration",
          "integration.integrate_ai_context_command"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "cli_commands",
        "json",
        "llmstruct",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f2f2d3bf-c1b2-4ef0-aef7-4625c01edfad"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "module_doc": "CLI configuration management.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize configuration manager.",
          "line_range": [
            20,
            24
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from llmstruct.toml.",
          "line_range": [
            26,
            34
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "Get cache configuration section.",
          "line_range": [
            36,
            38
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "Get Copilot configuration section.",
          "line_range": [
            40,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "Get queue configuration section.",
          "line_range": [
            44,
            46
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "Get context configuration section.",
          "line_range": [
            48,
            50
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_gitignore_patterns",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            52,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "Get directories to exclude from scanning.",
          "line_range": [
            68,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "Get file patterns to include.",
          "line_range": [
            84,
            89
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "Get file patterns to exclude.",
          "line_range": [
            91,
            96
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "Get maximum file size for processing (in bytes).",
          "line_range": [
            98,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_auto_update_config",
          "docstring": "Get auto-update configuration.",
          "line_range": [
            102,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_auto_update_enabled",
          "docstring": "Check if auto-update is enabled.",
          "line_range": [
            106,
            108
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "Get path to struct.json file.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "Get path to context file.",
          "line_range": [
            114,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "Save current configuration to file.",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_config",
          "docstring": "Update configuration value.",
          "line_range": [
            126,
            131
          ],
          "parameters": [
            "self",
            "section",
            "key",
            "value"
          ],
          "decorators": []
        },
        {
          "name": "reload_config",
          "docstring": "Reload configuration from file.",
          "line_range": [
            133,
            135
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIConfig",
          "docstring": "Manages CLI configuration from llmstruct.toml and other sources.",
          "line_range": [
            17,
            135
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize configuration manager.",
              "line_range": [
                20,
                24
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from llmstruct.toml.",
              "line_range": [
                26,
                34
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cache_config",
              "docstring": "Get cache configuration section.",
              "line_range": [
                36,
                38
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_copilot_config",
              "docstring": "Get Copilot configuration section.",
              "line_range": [
                40,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_queue_config",
              "docstring": "Get queue configuration section.",
              "line_range": [
                44,
                46
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_config",
              "docstring": "Get context configuration section.",
              "line_range": [
                48,
                50
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_gitignore_patterns",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": [
                52,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "Get directories to exclude from scanning.",
              "line_range": [
                68,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_include_patterns",
              "docstring": "Get file patterns to include.",
              "line_range": [
                84,
                89
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "Get file patterns to exclude.",
              "line_range": [
                91,
                96
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_max_file_size",
              "docstring": "Get maximum file size for processing (in bytes).",
              "line_range": [
                98,
                100
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_auto_update_config",
              "docstring": "Get auto-update configuration.",
              "line_range": [
                102,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_auto_update_enabled",
              "docstring": "Check if auto-update is enabled.",
              "line_range": [
                106,
                108
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_struct_file_path",
              "docstring": "Get path to struct.json file.",
              "line_range": [
                110,
                112
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_file_path",
              "docstring": "Get path to context file.",
              "line_range": [
                114,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_config",
              "docstring": "Save current configuration to file.",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_config",
              "docstring": "Update configuration value.",
              "line_range": [
                126,
                131
              ],
              "parameters": [
                "self",
                "section",
                "key",
                "value"
              ]
            },
            {
              "name": "reload_config",
              "docstring": "Reload configuration from file.",
              "line_range": [
                133,
                135
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config"
        ],
        "_load_config": [
          "logging.error",
          "toml.load"
        ],
        "get_cache_config": [],
        "get_copilot_config": [],
        "get_queue_config": [],
        "get_context_config": [],
        "get_gitignore_patterns": [
          "Path",
          "logging.error",
          "gitignore_path.open",
          "gitignore_path.exists",
          "line.startswith",
          "line.strip"
        ],
        "get_exclude_dirs": [
          "set",
          "list",
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_include_patterns": [
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_exclude_patterns": [
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_max_file_size": [],
        "get_auto_update_config": [],
        "is_auto_update_enabled": [
          "self.get_auto_update_config"
        ],
        "get_struct_file_path": [],
        "get_context_file_path": [],
        "save_config": [
          "logging.error",
          "toml.dump"
        ],
        "update_config": [
          "self.save_config"
        ],
        "reload_config": [
          "self._load_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "logging",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9193f64e-35cd-43d7-b62f-ab405df5ca01"
    },
    {
      "module_id": "src.llmstruct.cursor_integration",
      "path": "src/llmstruct/cursor_integration.py",
      "category": "core",
      "module_doc": "Cursor IDE Integration Module\nProvides seamless integration between llmstruct AI capabilities and Cursor IDE.",
      "functions": [
        {
          "name": "create_cursor_integration",
          "docstring": "Create a Cursor integration manager for the project.",
          "line_range": [
            435,
            437
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            31,
            35
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_optimized_context",
          "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
          "line_range": [
            37,
            71
          ],
          "parameters": [
            "self",
            "query_type",
            "file_context"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": [
            73,
            83
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": [
            85,
            101
          ],
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": [
            103,
            115
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            121,
            124
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "delegate_to_optimal_ai",
          "docstring": "Route tasks to best AI model based on preferences.",
          "line_range": [
            126,
            160
          ],
          "parameters": [
            "self",
            "task_type",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_delegation_confidence",
          "docstring": "Calculate confidence in AI delegation decision.",
          "line_range": [
            162,
            175
          ],
          "parameters": [
            "self",
            "task_type",
            "selected_ai"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor configuration.",
          "line_range": [
            177,
            187
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            193,
            195
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals.",
          "line_range": [
            197,
            242
          ],
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "get_priority_guidance",
          "docstring": "Provide priority guidance based on business objectives.",
          "line_range": [
            244,
            270
          ],
          "parameters": [
            "self",
            "feature_options"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_feature_score",
          "docstring": "Calculate priority score for a feature.",
          "line_range": [
            272,
            292
          ],
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_get_scoring_reasoning",
          "docstring": "Get reasoning for feature scoring.",
          "line_range": [
            294,
            307
          ],
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": [
            309,
            319
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            325,
            328
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "Start a new Cursor session.",
          "line_range": [
            330,
            349
          ],
          "parameters": [
            "self",
            "session_id",
            "user_preferences"
          ],
          "decorators": []
        },
        {
          "name": "save_session_context",
          "docstring": "Save important context for next session.",
          "line_range": [
            351,
            377
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load context from previous sessions.",
          "line_range": [
            379,
            388
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            394,
            400
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_cursor_response",
          "docstring": "Get comprehensive response optimized for Cursor.",
          "line_range": [
            402,
            431
          ],
          "parameters": [
            "self",
            "query",
            "file_context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorSession",
          "docstring": "Represents a Cursor IDE session with context and preferences.",
          "line_range": [
            19,
            25
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CursorContextManager",
          "docstring": "Manages context optimization specifically for Cursor interactions.",
          "line_range": [
            28,
            115
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_cursor_optimized_context",
              "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
              "line_range": [
                37,
                71
              ],
              "parameters": [
                "self",
                "query_type",
                "file_context"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": [
                73,
                83
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": [
                85,
                101
              ],
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": [
                103,
                115
              ],
              "parameters": [
                "self",
                "data"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorMultiAIOrchestrator",
          "docstring": "Coordinates different AI models through Cursor interface.",
          "line_range": [
            118,
            187
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                121,
                124
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "delegate_to_optimal_ai",
              "docstring": "Route tasks to best AI model based on preferences.",
              "line_range": [
                126,
                160
              ],
              "parameters": [
                "self",
                "task_type",
                "context"
              ]
            },
            {
              "name": "_calculate_delegation_confidence",
              "docstring": "Calculate confidence in AI delegation decision.",
              "line_range": [
                162,
                175
              ],
              "parameters": [
                "self",
                "task_type",
                "selected_ai"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor configuration.",
              "line_range": [
                177,
                187
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "PersonalPlanningCursorBridge",
          "docstring": "Bridge between personal planning and Cursor without exposing sensitive data.",
          "line_range": [
            190,
            319
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                193,
                195
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals.",
              "line_range": [
                197,
                242
              ],
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "get_priority_guidance",
              "docstring": "Provide priority guidance based on business objectives.",
              "line_range": [
                244,
                270
              ],
              "parameters": [
                "self",
                "feature_options"
              ]
            },
            {
              "name": "_calculate_feature_score",
              "docstring": "Calculate priority score for a feature.",
              "line_range": [
                272,
                292
              ],
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_get_scoring_reasoning",
              "docstring": "Get reasoning for feature scoring.",
              "line_range": [
                294,
                307
              ],
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": [
                309,
                319
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorSessionManager",
          "docstring": "Maintains context across Cursor sessions for better continuity.",
          "line_range": [
            322,
            388
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                325,
                328
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "start_session",
              "docstring": "Start a new Cursor session.",
              "line_range": [
                330,
                349
              ],
              "parameters": [
                "self",
                "session_id",
                "user_preferences"
              ]
            },
            {
              "name": "save_session_context",
              "docstring": "Save important context for next session.",
              "line_range": [
                351,
                377
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load context from previous sessions.",
              "line_range": [
                379,
                388
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorIntegrationManager",
          "docstring": "Main integration manager that coordinates all Cursor-specific features.",
          "line_range": [
            391,
            431
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                394,
                400
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_comprehensive_cursor_response",
              "docstring": "Get comprehensive response optimized for Cursor.",
              "line_range": [
                402,
                431
              ],
              "parameters": [
                "self",
                "query",
                "file_context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CursorContextManager",
          "CursorSessionManager",
          "PersonalPlanningCursorBridge",
          "CursorMultiAIOrchestrator",
          "SystemCapabilityDiscovery"
        ],
        "get_cursor_optimized_context": [
          "self._apply_privacy_filter",
          "json.load",
          "file_path.exists",
          "str",
          "optimal_config.get",
          "logger.error",
          "open",
          "context_rules.get"
        ],
        "_load_cursor_config": [
          "Path",
          "json.load",
          "logger.error",
          "config_path.exists",
          "open"
        ],
        "_apply_privacy_filter": [
          "context_data.items",
          "isinstance",
          "self._filter_sensitive_dict"
        ],
        "_filter_sensitive_dict": [
          "self._filter_sensitive_dict",
          "key.lower",
          "isinstance",
          "data.items",
          "any"
        ],
        "delegate_to_optimal_ai": [
          "Path",
          "self._calculate_delegation_confidence",
          "str",
          "logger.error",
          "delegation_rules.get"
        ],
        "_calculate_delegation_confidence": [
          "delegation_rules.get"
        ],
        "get_goal_aligned_suggestions": [
          "any",
          "logger.error",
          "suggestions.extend",
          "technical_context.lower"
        ],
        "get_priority_guidance": [
          "self._get_scoring_reasoning",
          "str",
          "scored_features.append",
          "logger.error",
          "decision_guidance.get",
          "self._calculate_feature_score",
          "scored_features.sort"
        ],
        "_calculate_feature_score": [
          "any",
          "float",
          "prioritization.get",
          "feature.lower"
        ],
        "_get_scoring_reasoning": [
          "any",
          "reasons.append",
          "feature.lower"
        ],
        "_load_personal_bridge": [
          "bridge_path.exists",
          "json.load",
          "logger.error",
          "open"
        ],
        "start_session": [
          "previous_context.get",
          "CursorSession",
          "logger.error",
          "self._load_session_context"
        ],
        "save_session_context": [
          "Path",
          "json.dump",
          "str",
          "logger.error",
          "session_data.get",
          "open"
        ],
        "_load_session_context": [
          "json.load",
          "logger.error",
          "open"
        ],
        "get_comprehensive_cursor_response": [
          "str",
          "logger.error"
        ],
        "create_cursor_integration": [
          "CursorIntegrationManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.context_orchestrator",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "97be1c5c-777d-44cd-a9fa-67aa548de2d3"
    },
    {
      "module_id": "src.llmstruct.cli_argument_parser",
      "path": "src/llmstruct/cli_argument_parser.py",
      "category": "core",
      "module_doc": "CLI argument parsing for LLMStruct.",
      "functions": [
        {
          "name": "create_argument_parser",
          "docstring": "Create and configure the main argument parser.",
          "line_range": [
            14,
            113
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "add_api_bot_commands",
          "docstring": "Add API and bot management commands to the parser.",
          "line_range": [
            116,
            126
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        },
        {
          "name": "create_full_argument_parser",
          "docstring": "Create the full argument parser with all commands.",
          "line_range": [
            129,
            137
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "create_argument_parser": [
          "argparse.ArgumentParser",
          "dogfood_parser.add_argument",
          "interactive_parser.add_argument",
          "parse_parser.add_argument",
          "duplicates_parser.add_argument",
          "audit_parser.add_argument",
          "parser.add_subparsers",
          "query_parser.add_argument",
          "copilot_parser.add_argument",
          "review_parser.add_argument",
          "context_parser.add_argument",
          "subparsers.add_parser"
        ],
        "add_api_bot_commands": [
          "add_api_commands",
          "add_bot_commands"
        ],
        "create_full_argument_parser": [
          "create_argument_parser",
          "add_api_bot_commands"
        ]
      },
      "dependencies": [
        "Path",
        "add_api_commands",
        "add_bot_commands",
        "api_commands",
        "argparse",
        "bot_commands",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "14a64d1b-9d51-422c-b392-ac64ed4679aa"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": [
            24,
            30
          ],
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            6,
            11
          ],
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": [
            13,
            21
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": [
            5,
            21
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                6,
                11
              ],
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": [
                13,
                21
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "response.json",
          "len",
          "prompt.split",
          "response.raise_for_status"
        ],
        "test_grok": [
          "GrokClient",
          "time.perf_counter",
          "client.generate"
        ]
      },
      "dependencies": [
        "requests",
        "time"
      ],
      "hash": null,
      "artifact_id": "bc2a17bf-2df8-4364-90a7-b0d54b5497ed"
    },
    {
      "module_id": "src.llmstruct.transpiler",
      "path": "src/llmstruct/transpiler.py",
      "category": "core",
      "module_doc": "AI-Powered Universal Transpiler\nConverts entire codebases from one language to another using LLM analysis",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for AI transpiler",
          "line_range": [
            475,
            527
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            142,
            149
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "analyze_source_project",
          "docstring": "Analyze source project structure",
          "line_range": [
            151,
            155
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "create_target_project_structure",
          "docstring": "Create target project directory structure",
          "line_range": [
            157,
            221
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_generate_structure_info",
          "docstring": "Generate structure information for README",
          "line_range": [
            223,
            253
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "transpile_module",
          "docstring": "Transpile a single module using AI",
          "line_range": [
            255,
            318
          ],
          "parameters": [
            "self",
            "module",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_format_functions",
          "docstring": "Format functions for prompt",
          "line_range": [
            320,
            333
          ],
          "parameters": [
            "self",
            "functions"
          ],
          "decorators": []
        },
        {
          "name": "_format_classes",
          "docstring": "Format classes for prompt",
          "line_range": [
            335,
            348
          ],
          "parameters": [
            "self",
            "classes"
          ],
          "decorators": []
        },
        {
          "name": "determine_target_path",
          "docstring": "Determine target file path for transpiled module",
          "line_range": [
            350,
            388
          ],
          "parameters": [
            "self",
            "module"
          ],
          "decorators": []
        },
        {
          "name": "transpile_project",
          "docstring": "Transpile entire project",
          "line_range": [
            390,
            472
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TranspilerConfig",
          "docstring": "Configuration for AI transpiler",
          "line_range": [
            24,
            35
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "LanguageTemplates",
          "docstring": "Templates and patterns for different target languages",
          "line_range": [
            38,
            136
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AITranspiler",
          "docstring": "AI-powered code transpiler",
          "line_range": [
            139,
            472
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                142,
                149
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "analyze_source_project",
              "docstring": "Analyze source project structure",
              "line_range": [
                151,
                155
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "create_target_project_structure",
              "docstring": "Create target project directory structure",
              "line_range": [
                157,
                221
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_generate_structure_info",
              "docstring": "Generate structure information for README",
              "line_range": [
                223,
                253
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "transpile_module",
              "docstring": "Transpile a single module using AI",
              "line_range": [
                255,
                318
              ],
              "parameters": [
                "self",
                "module",
                "context"
              ]
            },
            {
              "name": "_format_functions",
              "docstring": "Format functions for prompt",
              "line_range": [
                320,
                333
              ],
              "parameters": [
                "self",
                "functions"
              ]
            },
            {
              "name": "_format_classes",
              "docstring": "Format classes for prompt",
              "line_range": [
                335,
                348
              ],
              "parameters": [
                "self",
                "classes"
              ]
            },
            {
              "name": "determine_target_path",
              "docstring": "Determine target file path for transpiled module",
              "line_range": [
                350,
                388
              ],
              "parameters": [
                "self",
                "module"
              ]
            },
            {
              "name": "transpile_project",
              "docstring": "Transpile entire project",
              "line_range": [
                390,
                472
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "UniversalConverter",
          "LLMClient",
          "ConverterConfig"
        ],
        "analyze_source_project": [
          "logger.info"
        ],
        "create_target_project_structure": [
          "Path",
          "self._generate_structure_info",
          "src_dir.mkdir",
          "output_path.mkdir",
          "shutil.rmtree",
          "output_path.exists",
          "logger.warning"
        ],
        "_generate_structure_info": [
          "category.title",
          "categories.items",
          "analysis.get",
          "stats.get",
          "module.get",
          "len"
        ],
        "transpile_module": [
          "self._format_functions",
          "ctx_module.get",
          "target_lang.upper",
          "str",
          "target_lang.lower",
          "self._format_classes",
          "logger.error",
          "module.get",
          "len",
          "response.strip"
        ],
        "_format_functions": [
          "len",
          "func.get"
        ],
        "_format_classes": [
          "cls.get",
          "len"
        ],
        "determine_target_path": [
          "Path",
          "len",
          "module.get",
          "module_id.split"
        ],
        "transpile_project": [
          "Path",
          "full_target_path.write_text",
          "range",
          "self.create_target_project_structure",
          "report_path.write_text",
          "errors.append",
          "logger.info",
          "transpiled_files.append",
          "analysis.get",
          "str",
          "self.determine_target_path",
          "logger.error",
          "json.dumps",
          "self.transpile_module",
          "len",
          "self.analyze_source_project"
        ],
        "main": [
          "argparse.ArgumentParser",
          "exit",
          "print",
          "AITranspiler",
          "transpiler.transpile_project",
          "Language",
          "TranspilerConfig",
          "parser.parse_args",
          "logger.error",
          "len",
          "traceback.print_exc",
          "parser.add_argument"
        ]
      },
      "dependencies": [
        "Any",
        "ConverterConfig",
        "Dict",
        "Enum",
        "LLMClient",
        "Language",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "UniversalConverter",
        "argparse",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "llm_client",
        "logging",
        "os",
        "parsers.universal_converter",
        "pathlib",
        "shutil",
        "traceback",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d8de3dd5-1d82-4c02-ac91-49324619cc4d"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": [
            38,
            86
          ],
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": [
            88,
            115
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": [
            117,
            141
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": [
            143,
            156
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": [
            158,
            172
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": [
            27,
            172
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": [
                38,
                86
              ],
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": [
                88,
                115
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": [
                117,
                141
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": [
                143,
                156
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": [
                158,
                172
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getenv",
          "logging.info",
          "int"
        ],
        "query": [
          "Path",
          "self._query_hybrid",
          "range",
          "json.load",
          "self._query_anthropic",
          "logging.error",
          "asyncio.sleep",
          "json.dumps",
          "self._query_ollama",
          "logging.info",
          "self._query_grok",
          "logging.warning"
        ],
        "_query_grok": [
          "aiohttp.ClientSession",
          "session.post",
          "logging.error",
          "result.get",
          "response.json",
          "logging.info"
        ],
        "_query_anthropic": [
          "aiohttp.ClientSession",
          "session.post",
          "logging.error",
          "result.get",
          "response.json",
          "logging.info"
        ],
        "_query_ollama": [
          "aiohttp.ClientSession",
          "session.post",
          "logging.debug",
          "result.get",
          "logging.error",
          "response.json",
          "logging.info"
        ],
        "_query_hybrid": [
          "asyncio.gather",
          "self._query_anthropic",
          "isinstance",
          "len",
          "self._query_ollama",
          "logging.info",
          "self._query_grok"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "83ccd7b8-73fd-4824-8378-be3536ff9aea"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "llmstruct.cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "6b428299-17ae-46b1-9379-d55fc7d19e8d"
    },
    {
      "module_id": "src.llmstruct.metrics_tracker",
      "path": "src/llmstruct/metrics_tracker.py",
      "category": "core",
      "module_doc": "LLMStruct Metrics Tracker - \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u0442\u043e\u043a\u0435\u043d\u044b, performance, \u043e\u0448\u0438\u0431\u043a\u0438, \u043b\u043e\u0436\u043d\u044b\u0435 \u043f\u0443\u0442\u0438 \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 master-plans",
      "functions": [
        {
          "name": "get_metrics_tracker",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 MetricsTracker",
          "line_range": [
            364,
            369
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "track_token_usage",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            371,
            373
          ],
          "parameters": [
            "provider",
            "model",
            "input_tokens",
            "output_tokens",
            "cost"
          ],
          "decorators": []
        },
        {
          "name": "track_task_start",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            375,
            377
          ],
          "parameters": [
            "task_id",
            "task_type"
          ],
          "decorators": []
        },
        {
          "name": "track_task_complete",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            379,
            381
          ],
          "parameters": [
            "task_id",
            "status",
            "error"
          ],
          "decorators": []
        },
        {
          "name": "track_false_path",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439",
          "line_range": [
            383,
            385
          ],
          "parameters": [
            "task_id",
            "description"
          ],
          "decorators": []
        },
        {
          "name": "track_workflow_event",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f workflow \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": [
            387,
            389
          ],
          "parameters": [
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "track_telegram_interaction",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0447\u0435\u0440\u0435\u0437 Telegram \u0441 \u043f\u043e\u043b\u043d\u044b\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c",
          "line_range": [
            391,
            421
          ],
          "parameters": [
            "user_message",
            "bot_response",
            "context_size"
          ],
          "decorators": []
        },
        {
          "name": "track_api_interaction",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 API \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043f\u043e\u043b\u043d\u044b\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c",
          "line_range": [
            423,
            449
          ],
          "parameters": [
            "endpoint",
            "request_tokens",
            "response_tokens",
            "context_tokens"
          ],
          "decorators": []
        },
        {
          "name": "get_token_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0432\u043e\u0434\u043a\u0443 \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c",
          "line_range": [
            451,
            470
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            41,
            43
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            58,
            60
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            65,
            87
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_generate_session_id",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 ID \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            89,
            92
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_current_branch",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0443\u044e git \u0432\u0435\u0442\u043a\u0443",
          "line_range": [
            94,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_commit_hash",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 commit hash",
          "line_range": [
            106,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_json_hash",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 hash struct.json \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "track_token_usage",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            126,
            142
          ],
          "parameters": [
            "self",
            "provider",
            "model",
            "input_tokens",
            "output_tokens",
            "cost_estimate"
          ],
          "decorators": []
        },
        {
          "name": "start_task",
          "docstring": "\u041d\u0430\u0447\u0430\u043b\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            144,
            155
          ],
          "parameters": [
            "self",
            "task_id",
            "task_type"
          ],
          "decorators": []
        },
        {
          "name": "complete_task",
          "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            157,
            174
          ],
          "parameters": [
            "self",
            "task_id",
            "status",
            "error_message"
          ],
          "decorators": []
        },
        {
          "name": "track_false_path",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439",
          "line_range": [
            176,
            185
          ],
          "parameters": [
            "self",
            "task_id",
            "false_path_description"
          ],
          "decorators": []
        },
        {
          "name": "track_rollback",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u043a\u0430\u0442\u043e\u0432",
          "line_range": [
            187,
            193
          ],
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        },
        {
          "name": "track_retry",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0445 \u043f\u043e\u043f\u044b\u0442\u043e\u043a",
          "line_range": [
            195,
            201
          ],
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        },
        {
          "name": "track_workflow_event",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 workflow \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": [
            203,
            226
          ],
          "parameters": [
            "self",
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "calculate_efficiency_score",
          "docstring": "\u0420\u0430\u0441\u0447\u0435\u0442 \u043e\u0446\u0435\u043d\u043a\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438",
          "line_range": [
            228,
            253
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_session_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            255,
            277
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_session_duration",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0435\u0441\u0441\u0438\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445",
          "line_range": [
            279,
            282
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_session",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            284,
            292
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_update_aggregate_metrics",
          "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            294,
            322
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_analytics_data",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432",
          "line_range": [
            324,
            358
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TokenUsage",
          "docstring": "\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            17,
            25
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "TaskExecution",
          "docstring": "\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            28,
            43
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                41,
                43
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "WorkflowMetrics",
          "docstring": "\u041c\u0435\u0442\u0440\u0438\u043a\u0438 workflow",
          "line_range": [
            46,
            60
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                58,
                60
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "MetricsTracker",
          "docstring": "\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            62,
            358
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                65,
                87
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_generate_session_id",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 ID \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                89,
                92
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_current_branch",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0443\u044e git \u0432\u0435\u0442\u043a\u0443",
              "line_range": [
                94,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_commit_hash",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 commit hash",
              "line_range": [
                106,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_json_hash",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 hash struct.json \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "track_token_usage",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
              "line_range": [
                126,
                142
              ],
              "parameters": [
                "self",
                "provider",
                "model",
                "input_tokens",
                "output_tokens",
                "cost_estimate"
              ]
            },
            {
              "name": "start_task",
              "docstring": "\u041d\u0430\u0447\u0430\u043b\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                144,
                155
              ],
              "parameters": [
                "self",
                "task_id",
                "task_type"
              ]
            },
            {
              "name": "complete_task",
              "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                157,
                174
              ],
              "parameters": [
                "self",
                "task_id",
                "status",
                "error_message"
              ]
            },
            {
              "name": "track_false_path",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439",
              "line_range": [
                176,
                185
              ],
              "parameters": [
                "self",
                "task_id",
                "false_path_description"
              ]
            },
            {
              "name": "track_rollback",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u043a\u0430\u0442\u043e\u0432",
              "line_range": [
                187,
                193
              ],
              "parameters": [
                "self",
                "task_id"
              ]
            },
            {
              "name": "track_retry",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0445 \u043f\u043e\u043f\u044b\u0442\u043e\u043a",
              "line_range": [
                195,
                201
              ],
              "parameters": [
                "self",
                "task_id"
              ]
            },
            {
              "name": "track_workflow_event",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 workflow \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
              "line_range": [
                203,
                226
              ],
              "parameters": [
                "self",
                "event_type",
                "details"
              ]
            },
            {
              "name": "calculate_efficiency_score",
              "docstring": "\u0420\u0430\u0441\u0447\u0435\u0442 \u043e\u0446\u0435\u043d\u043a\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438",
              "line_range": [
                228,
                253
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_session_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                255,
                277
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_session_duration",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0435\u0441\u0441\u0438\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445",
              "line_range": [
                279,
                282
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_session",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                284,
                292
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_update_aggregate_metrics",
              "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a",
              "line_range": [
                294,
                322
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_analytics_data",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432",
              "line_range": [
                324,
                358
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "Path",
          "WorkflowMetrics",
          "self._generate_session_id",
          "self._get_current_branch",
          "asdict",
          "self._get_commit_hash",
          "datetime.now",
          "self._get_struct_json_hash",
          "logging.info"
        ],
        "_generate_session_id": [
          "timestamp.encode",
          "hashlib.md5",
          "datetime.now"
        ],
        "_get_current_branch": [
          "subprocess.run"
        ],
        "_get_commit_hash": [
          "subprocess.run"
        ],
        "_get_struct_json_hash": [
          "struct_file.exists",
          "f.read",
          "hashlib.md5",
          "open"
        ],
        "track_token_usage": [
          "get_metrics_tracker"
        ],
        "start_task": [
          "asdict",
          "TaskExecution",
          "logging.info",
          "datetime.now"
        ],
        "complete_task": [
          "logging.info",
          "datetime.fromisoformat",
          "task_data.get",
          "datetime.now"
        ],
        "track_false_path": [
          "get_metrics_tracker"
        ],
        "track_rollback": [
          "logging.warning"
        ],
        "track_retry": [
          "logging.info"
        ],
        "track_workflow_event": [
          "get_metrics_tracker"
        ],
        "calculate_efficiency_score": [
          "sum",
          "t.get",
          "min",
          "max",
          "len"
        ],
        "get_session_summary": [
          "self.calculate_efficiency_score",
          "sum",
          "t.get",
          "self._get_session_duration",
          "usage.get",
          "len"
        ],
        "_get_session_duration": [
          "datetime.fromisoformat",
          "datetime.now"
        ],
        "save_session": [
          "logging.info",
          "self._update_aggregate_metrics",
          "json.dump",
          "open"
        ],
        "_update_aggregate_metrics": [
          "json.load",
          "sum",
          "json.dump",
          "self.get_session_summary",
          "len",
          "open"
        ],
        "get_analytics_data": [
          "json.load",
          "max",
          "open"
        ],
        "get_metrics_tracker": [
          "MetricsTracker"
        ],
        "track_task_start": [
          "get_metrics_tracker"
        ],
        "track_task_complete": [
          "get_metrics_tracker"
        ],
        "track_telegram_interaction": [
          "logger.info",
          "get_metrics_tracker",
          "datetime.now",
          "logger.error",
          "len"
        ],
        "track_api_interaction": [
          "get_metrics_tracker",
          "logger.error",
          "logger.info",
          "datetime.now"
        ],
        "get_token_summary": [
          "get_metrics_tracker",
          "len",
          "logger.error"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "subprocess",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "692bf827-d440-4107-91be-da09bf6fb652"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            54,
            250
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "audit",
          "analyze_duplicates",
          "audit_parser.add_argument",
          "dogfood",
          "subparsers.add_parser",
          "query",
          "parse",
          "parse_parser.add_argument",
          "parser.add_subparsers",
          "context",
          "query_parser.add_argument",
          "parser.parse_args",
          "review_parser.add_argument",
          "argparse.ArgumentParser",
          "asyncio.run",
          "copilot_parser.add_argument",
          "dogfood_parser.add_argument",
          "duplicates_parser.add_argument",
          "copilot",
          "context_parser.add_argument",
          "review"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "analyze_duplicates",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "audit",
        "cli_core",
        "context",
        "copilot",
        "create_cli_core",
        "dogfood",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "interactive",
        "interactive_legacy",
        "interactive_modular",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.analyze_duplicates",
        "llmstruct.modules.cli.audit",
        "llmstruct.modules.cli.context",
        "llmstruct.modules.cli.copilot",
        "llmstruct.modules.cli.dogfood",
        "llmstruct.modules.cli.handlers",
        "llmstruct.modules.cli.parse",
        "llmstruct.modules.cli.query",
        "llmstruct.modules.cli.review",
        "llmstruct.modules.cli.utils",
        "llmstruct.modules.commands.queue",
        "llmstruct.self_run",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "parse_files_from_response",
        "pathlib",
        "process_cli_queue_enhanced",
        "query",
        "re",
        "read_file_content",
        "review",
        "shutil",
        "sys",
        "time",
        "toml",
        "typing",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "52bda8ac-751c-44be-9090-d59c727b1e18"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "module_doc": "Smart Context Orchestration for LLMStruct\nOptimizes context loading for different LLM usage scenarios",
      "functions": [
        {
          "name": "create_context_orchestrator",
          "docstring": "Factory function to create context orchestrator.",
          "line_range": [
            506,
            508
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context for scenario - convenience function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (cli_direct, vscode_copilot, session_work)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            511,
            543
          ],
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            57,
            75
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load context orchestration configuration.",
          "line_range": [
            77,
            119
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_scenario",
          "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            121,
            161
          ],
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "custom_budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_budget_for_scenario",
          "docstring": "Create budget configuration for scenario.",
          "line_range": [
            163,
            172
          ],
          "parameters": [
            "self",
            "scenario_config"
          ],
          "decorators": []
        },
        {
          "name": "_load_full_context",
          "docstring": "Load complete context without token restrictions.",
          "line_range": [
            174,
            187
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_extract_relationship_summary",
          "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438",
          "line_range": [
            189,
            216
          ],
          "parameters": [
            "self",
            "max_modules"
          ],
          "decorators": []
        },
        {
          "name": "_load_focused_context",
          "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441",
          "line_range": [
            218,
            275
          ],
          "parameters": [
            "self",
            "file_path",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load session-specific context.",
          "line_range": [
            277,
            299
          ],
          "parameters": [
            "self",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_minimal_context",
          "docstring": "Load minimal context for quick operations.",
          "line_range": [
            301,
            319
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_source_with_filtering",
          "docstring": "Load source with optional filtering based on budget.",
          "line_range": [
            321,
            344
          ],
          "parameters": [
            "self",
            "source_name",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_file_context",
          "docstring": "Get context specific to a file.",
          "line_range": [
            346,
            357
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_essential_parts",
          "docstring": "Extract essential parts of data to fit token budget.",
          "line_range": [
            359,
            381
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_filter_for_current_session",
          "docstring": "Filter data to items relevant to current session.",
          "line_range": [
            383,
            422
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_summary",
          "docstring": "Extract summary information from data.",
          "line_range": [
            424,
            443
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_apply_section_filtering",
          "docstring": "Apply section filtering to exclude specified sections.",
          "line_range": [
            445,
            457
          ],
          "parameters": [
            "self",
            "data",
            "exclude_sections"
          ],
          "decorators": []
        },
        {
          "name": "_update_metrics",
          "docstring": "Update performance metrics.",
          "line_range": [
            459,
            477
          ],
          "parameters": [
            "self",
            "scenario",
            "context",
            "load_time"
          ],
          "decorators": []
        },
        {
          "name": "get_metrics_summary",
          "docstring": "Get summary of context loading metrics.",
          "line_range": [
            479,
            494
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_metrics",
          "docstring": "Save metrics to file for analysis.",
          "line_range": [
            496,
            501
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextMode",
          "docstring": "Context loading modes for different scenarios.",
          "line_range": [
            17,
            22
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLevel",
          "docstring": "Progressive context levels with token budgets.",
          "line_range": [
            25,
            30
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextBudget",
          "docstring": "Token budget configuration for context loading.",
          "line_range": [
            34,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextMetrics",
          "docstring": "Metrics for context loading performance.",
          "line_range": [
            43,
            48
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SmartContextOrchestrator",
          "docstring": "Orchestrates context loading based on usage scenario and token budget.\nProvides optimized context for different LLM integration patterns.",
          "line_range": [
            51,
            501
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                57,
                75
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load context orchestration configuration.",
              "line_range": [
                77,
                119
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_scenario",
              "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
              "line_range": [
                121,
                161
              ],
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "custom_budget"
              ]
            },
            {
              "name": "_get_budget_for_scenario",
              "docstring": "Create budget configuration for scenario.",
              "line_range": [
                163,
                172
              ],
              "parameters": [
                "self",
                "scenario_config"
              ]
            },
            {
              "name": "_load_full_context",
              "docstring": "Load complete context without token restrictions.",
              "line_range": [
                174,
                187
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_extract_relationship_summary",
              "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438",
              "line_range": [
                189,
                216
              ],
              "parameters": [
                "self",
                "max_modules"
              ]
            },
            {
              "name": "_load_focused_context",
              "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441",
              "line_range": [
                218,
                275
              ],
              "parameters": [
                "self",
                "file_path",
                "budget"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load session-specific context.",
              "line_range": [
                277,
                299
              ],
              "parameters": [
                "self",
                "budget"
              ]
            },
            {
              "name": "_load_minimal_context",
              "docstring": "Load minimal context for quick operations.",
              "line_range": [
                301,
                319
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_source_with_filtering",
              "docstring": "Load source with optional filtering based on budget.",
              "line_range": [
                321,
                344
              ],
              "parameters": [
                "self",
                "source_name",
                "budget"
              ]
            },
            {
              "name": "_get_file_context",
              "docstring": "Get context specific to a file.",
              "line_range": [
                346,
                357
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_essential_parts",
              "docstring": "Extract essential parts of data to fit token budget.",
              "line_range": [
                359,
                381
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_filter_for_current_session",
              "docstring": "Filter data to items relevant to current session.",
              "line_range": [
                383,
                422
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_extract_summary",
              "docstring": "Extract summary information from data.",
              "line_range": [
                424,
                443
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_apply_section_filtering",
              "docstring": "Apply section filtering to exclude specified sections.",
              "line_range": [
                445,
                457
              ],
              "parameters": [
                "self",
                "data",
                "exclude_sections"
              ]
            },
            {
              "name": "_update_metrics",
              "docstring": "Update performance metrics.",
              "line_range": [
                459,
                477
              ],
              "parameters": [
                "self",
                "scenario",
                "context",
                "load_time"
              ]
            },
            {
              "name": "get_metrics_summary",
              "docstring": "Get summary of context loading metrics.",
              "line_range": [
                479,
                494
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_metrics",
              "docstring": "Save metrics to file for analysis.",
              "line_range": [
                496,
                501
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config"
        ],
        "_load_config": [
          "json.load",
          "open",
          "config_path.exists"
        ],
        "get_context_for_scenario": [
          "self._load_focused_context",
          "scenario_config.get",
          "self._update_metrics",
          "self._load_full_context",
          "self._load_session_context",
          "ContextMode",
          "self._load_minimal_context",
          "time.time",
          "self._get_budget_for_scenario"
        ],
        "_get_budget_for_scenario": [
          "budget_config.get",
          "scenario_config.get",
          "ContextBudget"
        ],
        "_load_full_context": [
          "logger.warning",
          "full_path.exists",
          "json.load",
          "open"
        ],
        "_extract_relationship_summary": [
          "json.load",
          "struct.get",
          "m.get",
          "struct_path.exists",
          "logger.warning",
          "summary.append",
          "open"
        ],
        "_load_focused_context": [
          "json.load",
          "file_path.endswith",
          "init_path.exists",
          "self._extract_relationship_summary",
          "self._get_file_context",
          "session_path.exists",
          "json.dumps",
          "len",
          "logger.warning",
          "self._extract_summary",
          "open"
        ],
        "_load_session_context": [
          "self._filter_for_current_session",
          "self._load_source_with_filtering"
        ],
        "_load_minimal_context": [
          "json.load",
          "source_path.exists",
          "logger.warning",
          "self._extract_summary",
          "open"
        ],
        "_load_source_with_filtering": [
          "self._apply_section_filtering",
          "json.load",
          "source_path.exists",
          "logger.warning",
          "open"
        ],
        "_get_file_context": [
          "Path"
        ],
        "_extract_essential_parts": [
          "isinstance",
          "task.get"
        ],
        "_filter_for_current_session": [
          "json.load",
          "idea.get",
          "current_session.get",
          "current_session_path.exists",
          "data.items",
          "logger.warning",
          "task.get",
          "open"
        ],
        "_extract_summary": [
          "isinstance",
          "len",
          "t.get"
        ],
        "_apply_section_filtering": [
          "data.items"
        ],
        "_update_metrics": [
          "context.get",
          "len",
          "ContextMetrics"
        ],
        "get_metrics_summary": [
          "len",
          "sum"
        ],
        "save_metrics": [
          "self.get_metrics_summary",
          "json.dump",
          "open"
        ],
        "create_context_orchestrator": [
          "SmartContextOrchestrator"
        ],
        "get_optimized_context": [
          "ContextBudget",
          "orchestrator.get_context_for_scenario",
          "create_context_orchestrator"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Union",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "27d50d01-49ee-4137-b5ac-d906b27ed9fa"
    },
    {
      "module_id": "src.llmstruct.cli_main_commands",
      "path": "src/llmstruct/cli_main_commands.py",
      "category": "core",
      "module_doc": "Main CLI command handlers for LLMStruct.",
      "functions": [
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            33,
            68
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            71,
            127
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            130,
            136
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            139,
            146
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            149,
            175
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "basic_interactive_processing",
          "docstring": "Basic interactive processing without enhanced features.",
          "line_range": [
            178,
            230
          ],
          "parameters": [
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            233,
            235
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            238,
            240
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            243,
            245
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            248,
            366
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": [
            369,
            387
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": [
            390,
            495
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse": [
          "logging.error",
          "JSONCache",
          "cache.close",
          "load_gitignore",
          "logging.info",
          "attach_to_llm_request",
          "generate_json"
        ],
        "query": [
          "Path",
          "hasattr",
          "client.query_with_context",
          "client.query",
          "create_context_orchestrator",
          "logging.error",
          "orchestrator.get_context_for_scenario",
          "json.dump",
          "JSONCache",
          "cache.close",
          "LLMClient",
          "logging.warning",
          "logging.info"
        ],
        "interactive": [
          "interactive_legacy",
          "logging.warning",
          "interactive_modular"
        ],
        "interactive_modular": [
          "logging.error",
          "create_cli_core",
          "interactive_legacy",
          "cli_core.run_interactive_mode"
        ],
        "interactive_legacy": [
          "Path",
          "basic_interactive_processing",
          "print",
          "logging.error",
          "JSONCache",
          "cache.close",
          "LLMClient",
          "process_cli_queue_enhanced"
        ],
        "basic_interactive_processing": [
          "input",
          "user_input.startswith",
          "client.query",
          "print",
          "user_input.lower",
          "f.read",
          "open"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "copilot": [
          "hasattr",
          "manager.unload_context_layer",
          "layers.split",
          "manager.load_context_layer",
          "manager.refresh_all_contexts",
          "manager.export_context",
          "enumerate",
          "manager.get_context_status",
          "logging.info",
          "manager.close",
          "shutil.copy",
          "template_path.exists",
          "logging.error",
          "Path",
          "getattr",
          "smart_suggest",
          "manager.validate_change",
          "config_path.exists",
          "open",
          "initialize_copilot",
          "print",
          "f.write"
        ],
        "audit": [
          "Path",
          "hasattr",
          "print",
          "file_path.exists",
          "analyze_duplicates"
        ],
        "analyze_duplicates": [
          "print",
          "f.get",
          "logging.error",
          "getattr",
          "json.dump",
          "analysis.get",
          "orchestrator.analyze_codebase_for_duplicates",
          "open",
          "json.dumps",
          "len",
          "func.get",
          "WorkflowOrchestrator"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Optional",
        "Path",
        "WorkflowOrchestrator",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "cli",
        "cli_core",
        "context_orchestrator",
        "copilot",
        "create_cli_core",
        "create_context_orchestrator",
        "generate_json",
        "initialize_copilot",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "process_cli_queue_enhanced",
        "shutil",
        "smart_suggest",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": null,
      "artifact_id": "4db66488-4bba-4023-b9ae-a8491e8ea584"
    },
    {
      "module_id": "src.llmstruct.ai_self_monitor",
      "path": "src/llmstruct/ai_self_monitor.py",
      "category": "core",
      "module_doc": "AI Self-Monitoring System\nTracks AI usage patterns and ensures proper llmstruct integration.",
      "functions": [
        {
          "name": "initialize_ai_monitor",
          "docstring": "Initialize global AI monitor.",
          "line_range": [
            433,
            437
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_monitor",
          "docstring": "Get current AI monitor instance.",
          "line_range": [
            440,
            442
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "record_ai_usage",
          "docstring": "Global function to record AI usage.",
          "line_range": [
            445,
            456
          ],
          "parameters": [
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            60,
            80
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "record_ai_interaction",
          "docstring": "Record an AI interaction for monitoring.",
          "line_range": [
            82,
            121
          ],
          "parameters": [
            "self",
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_interaction_patterns",
          "docstring": "Analyze patterns in AI interaction.",
          "line_range": [
            123,
            157
          ],
          "parameters": [
            "self",
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_effectiveness_score",
          "docstring": "Calculate effectiveness score for interaction.",
          "line_range": [
            159,
            188
          ],
          "parameters": [
            "self",
            "patterns",
            "tools_used",
            "used_llmstruct"
          ],
          "decorators": []
        },
        {
          "name": "_check_immediate_feedback",
          "docstring": "Check if immediate feedback/correction is needed.",
          "line_range": [
            190,
            209
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_log_immediate_feedback",
          "docstring": "Log immediate feedback message.",
          "line_range": [
            211,
            214
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "analyze_behavior_trends",
          "docstring": "Analyze AI behavior trends over specified period.",
          "line_range": [
            216,
            300
          ],
          "parameters": [
            "self",
            "days"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "Generate specific recommendations for improvement.",
          "line_range": [
            302,
            335
          ],
          "parameters": [
            "self",
            "llmstruct_usage",
            "context_awareness",
            "tool_diversity",
            "effectiveness"
          ],
          "decorators": []
        },
        {
          "name": "get_real_time_guidance",
          "docstring": "Get real-time guidance for current query.",
          "line_range": [
            337,
            365
          ],
          "parameters": [
            "self",
            "current_query"
          ],
          "decorators": []
        },
        {
          "name": "_load_events",
          "docstring": "Load events from disk.",
          "line_range": [
            367,
            379
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_events",
          "docstring": "Save events to disk.",
          "line_range": [
            381,
            388
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_analysis",
          "docstring": "Save behavior analysis to disk.",
          "line_range": [
            390,
            397
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "get_monitoring_report",
          "docstring": "Get comprehensive monitoring report.",
          "line_range": [
            399,
            426
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AIBehaviorPattern",
          "docstring": "AI behavior patterns to monitor.",
          "line_range": [
            18,
            26
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AIUsageEvent",
          "docstring": "Single AI usage event.",
          "line_range": [
            30,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIBehaviorAnalysis",
          "docstring": "Analysis of AI behavior patterns.",
          "line_range": [
            43,
            51
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AISelfMonitor",
          "docstring": "Monitors AI behavior and ensures proper llmstruct integration.\nProvides feedback and corrective guidance.",
          "line_range": [
            54,
            426
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                60,
                80
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "record_ai_interaction",
              "docstring": "Record an AI interaction for monitoring.",
              "line_range": [
                82,
                121
              ],
              "parameters": [
                "self",
                "query",
                "tools_used",
                "used_llmstruct",
                "context_tags",
                "metadata"
              ]
            },
            {
              "name": "_analyze_interaction_patterns",
              "docstring": "Analyze patterns in AI interaction.",
              "line_range": [
                123,
                157
              ],
              "parameters": [
                "self",
                "query",
                "tools_used",
                "used_llmstruct",
                "context_tags"
              ]
            },
            {
              "name": "_calculate_effectiveness_score",
              "docstring": "Calculate effectiveness score for interaction.",
              "line_range": [
                159,
                188
              ],
              "parameters": [
                "self",
                "patterns",
                "tools_used",
                "used_llmstruct"
              ]
            },
            {
              "name": "_check_immediate_feedback",
              "docstring": "Check if immediate feedback/correction is needed.",
              "line_range": [
                190,
                209
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_log_immediate_feedback",
              "docstring": "Log immediate feedback message.",
              "line_range": [
                211,
                214
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "analyze_behavior_trends",
              "docstring": "Analyze AI behavior trends over specified period.",
              "line_range": [
                216,
                300
              ],
              "parameters": [
                "self",
                "days"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "Generate specific recommendations for improvement.",
              "line_range": [
                302,
                335
              ],
              "parameters": [
                "self",
                "llmstruct_usage",
                "context_awareness",
                "tool_diversity",
                "effectiveness"
              ]
            },
            {
              "name": "get_real_time_guidance",
              "docstring": "Get real-time guidance for current query.",
              "line_range": [
                337,
                365
              ],
              "parameters": [
                "self",
                "current_query"
              ]
            },
            {
              "name": "_load_events",
              "docstring": "Load events from disk.",
              "line_range": [
                367,
                379
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_events",
              "docstring": "Save events to disk.",
              "line_range": [
                381,
                388
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_analysis",
              "docstring": "Save behavior analysis to disk.",
              "line_range": [
                390,
                397
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "get_monitoring_report",
              "docstring": "Get comprehensive monitoring report.",
              "line_range": [
                399,
                426
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_events",
          "logger.info"
        ],
        "record_ai_interaction": [
          "self._calculate_effectiveness_score",
          "self._check_immediate_feedback",
          "datetime.now",
          "self._save_events",
          "AIUsageEvent",
          "len",
          "self._analyze_interaction_patterns"
        ],
        "_analyze_interaction_patterns": [
          "any",
          "patterns.append",
          "query.lower"
        ],
        "_calculate_effectiveness_score": [
          "set",
          "min",
          "len",
          "pattern_scores.get"
        ],
        "_check_immediate_feedback": [
          "any",
          "self._log_immediate_feedback"
        ],
        "_log_immediate_feedback": [
          "logger.warning",
          "print"
        ],
        "analyze_behavior_trends": [
          "set",
          "AIBehaviorAnalysis",
          "timedelta",
          "sum",
          "strengths.append",
          "self._generate_recommendations",
          "self._save_analysis",
          "datetime.now",
          "improvements.append",
          "all_tools.update",
          "datetime.fromisoformat",
          "any",
          "len"
        ],
        "_generate_recommendations": [
          "recommendations.append",
          "recommendations.extend"
        ],
        "get_real_time_guidance": [
          "any",
          "guidance.append",
          "current_query.lower"
        ],
        "_load_events": [
          "json.load",
          "logger.info",
          "logger.error",
          "AIUsageEvent",
          "len",
          "open"
        ],
        "_save_events": [
          "asdict",
          "json.dump",
          "logger.error",
          "open"
        ],
        "_save_analysis": [
          "asdict",
          "json.dump",
          "logger.error",
          "open"
        ],
        "get_monitoring_report": [
          "len",
          "chr",
          "self.analyze_behavior_trends",
          "datetime.now"
        ],
        "initialize_ai_monitor": [
          "AISelfMonitor"
        ],
        "get_ai_monitor": [],
        "record_ai_usage": [
          "_monitor_instance.record_ai_interaction"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "96e87cb0-e9b5-4e2e-add4-8e1908e6cc12"
    },
    {
      "module_id": "src.llmstruct.cursor_ai_bridge",
      "path": "src/llmstruct/cursor_ai_bridge.py",
      "category": "core",
      "module_doc": "Cursor AI Bridge - API Layer for AI Assistant Integration\nProvides CLI and HTTP endpoints so Cursor AI can use WorkflowOrchestrator",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for Cursor AI Bridge.",
          "line_range": [
            350,
            401
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            29,
            32
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "ai_get_context",
          "docstring": "Get AI-optimized context for current development state.",
          "line_range": [
            34,
            67
          ],
          "parameters": [
            "self",
            "query_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "ai_analyze_task",
          "docstring": "Analyze a task and provide AI-optimized guidance.",
          "line_range": [
            69,
            93
          ],
          "parameters": [
            "self",
            "task_description"
          ],
          "decorators": []
        },
        {
          "name": "ai_create_task",
          "docstring": "Create a task through AI interface.",
          "line_range": [
            95,
            114
          ],
          "parameters": [
            "self",
            "title",
            "description",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "ai_get_onboarding_guide",
          "docstring": "Get comprehensive AI onboarding guide.",
          "line_range": [
            116,
            145
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "ai_check_duplicates",
          "docstring": "Check for code duplicates with AI-friendly output.",
          "line_range": [
            147,
            171
          ],
          "parameters": [
            "self",
            "threshold"
          ],
          "decorators": []
        },
        {
          "name": "ai_suggest",
          "docstring": "Get AI suggestions based on context.",
          "line_range": [
            173,
            199
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_task_complexity",
          "docstring": "Estimate task complexity based on codebase analysis.",
          "line_range": [
            201,
            215
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_suggest_approach",
          "docstring": "Suggest approach based on task and codebase state.",
          "line_range": [
            217,
            234
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_find_relevant_modules",
          "docstring": "Find modules relevant to the task.",
          "line_range": [
            236,
            248
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_check_potential_duplicates",
          "docstring": "Check if task might create duplicates.",
          "line_range": [
            250,
            253
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_recommend_ai_for_task",
          "docstring": "Recommend which AI to use for the task.",
          "line_range": [
            255,
            264
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_generate_workflow_steps",
          "docstring": "Generate workflow steps for the task.",
          "line_range": [
            266,
            276
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_determine_context_requirements",
          "docstring": "Determine what context is needed for the task.",
          "line_range": [
            278,
            290
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on context.",
          "line_range": [
            292,
            299
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_available_ai_commands",
          "docstring": "Get available AI commands.",
          "line_range": [
            301,
            310
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_identify_high_priority_duplicates",
          "docstring": "Identify high-priority duplicates for refactoring.",
          "line_range": [
            312,
            315
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_generate_refactoring_suggestions",
          "docstring": "Generate refactoring suggestions.",
          "line_range": [
            317,
            323
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_classify_task_type",
          "docstring": "Classify task type for AI delegation.",
          "line_range": [
            325,
            338
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_generate_next_steps",
          "docstring": "Generate next steps based on context.",
          "line_range": [
            340,
            347
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorAIBridge",
          "docstring": "Bridge that allows Cursor AI assistant to use WorkflowOrchestrator\nthrough CLI commands and structured JSON responses.",
          "line_range": [
            23,
            347
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                29,
                32
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "ai_get_context",
              "docstring": "Get AI-optimized context for current development state.",
              "line_range": [
                34,
                67
              ],
              "parameters": [
                "self",
                "query_type",
                "file_path"
              ]
            },
            {
              "name": "ai_analyze_task",
              "docstring": "Analyze a task and provide AI-optimized guidance.",
              "line_range": [
                69,
                93
              ],
              "parameters": [
                "self",
                "task_description"
              ]
            },
            {
              "name": "ai_create_task",
              "docstring": "Create a task through AI interface.",
              "line_range": [
                95,
                114
              ],
              "parameters": [
                "self",
                "title",
                "description",
                "priority"
              ]
            },
            {
              "name": "ai_get_onboarding_guide",
              "docstring": "Get comprehensive AI onboarding guide.",
              "line_range": [
                116,
                145
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "ai_check_duplicates",
              "docstring": "Check for code duplicates with AI-friendly output.",
              "line_range": [
                147,
                171
              ],
              "parameters": [
                "self",
                "threshold"
              ]
            },
            {
              "name": "ai_suggest",
              "docstring": "Get AI suggestions based on context.",
              "line_range": [
                173,
                199
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_estimate_task_complexity",
              "docstring": "Estimate task complexity based on codebase analysis.",
              "line_range": [
                201,
                215
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_suggest_approach",
              "docstring": "Suggest approach based on task and codebase state.",
              "line_range": [
                217,
                234
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_find_relevant_modules",
              "docstring": "Find modules relevant to the task.",
              "line_range": [
                236,
                248
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_check_potential_duplicates",
              "docstring": "Check if task might create duplicates.",
              "line_range": [
                250,
                253
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_recommend_ai_for_task",
              "docstring": "Recommend which AI to use for the task.",
              "line_range": [
                255,
                264
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_generate_workflow_steps",
              "docstring": "Generate workflow steps for the task.",
              "line_range": [
                266,
                276
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_determine_context_requirements",
              "docstring": "Determine what context is needed for the task.",
              "line_range": [
                278,
                290
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on context.",
              "line_range": [
                292,
                299
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_get_available_ai_commands",
              "docstring": "Get available AI commands.",
              "line_range": [
                301,
                310
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_identify_high_priority_duplicates",
              "docstring": "Identify high-priority duplicates for refactoring.",
              "line_range": [
                312,
                315
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_generate_refactoring_suggestions",
              "docstring": "Generate refactoring suggestions.",
              "line_range": [
                317,
                323
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_classify_task_type",
              "docstring": "Classify task type for AI delegation.",
              "line_range": [
                325,
                338
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_generate_next_steps",
              "docstring": "Generate next steps based on context.",
              "line_range": [
                340,
                347
              ],
              "parameters": [
                "self",
                "context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "CursorIntegrationManager",
          "WorkflowOrchestrator",
          "str"
        ],
        "ai_get_context": [
          "cursor_context.get",
          "self._get_workflow_suggestions",
          "str",
          "datetime.utcnow",
          "self._get_available_ai_commands",
          "context.get",
          "len"
        ],
        "ai_analyze_task": [
          "self._generate_workflow_steps",
          "self._check_potential_duplicates",
          "self._suggest_approach",
          "self._determine_context_requirements",
          "str",
          "self._find_relevant_modules",
          "self._estimate_task_complexity",
          "context.get",
          "self._recommend_ai_for_task"
        ],
        "ai_create_task": [
          "str",
          "datetime.utcnow",
          "self.ai_analyze_task"
        ],
        "ai_get_onboarding_guide": [
          "str"
        ],
        "ai_check_duplicates": [
          "self._generate_refactoring_suggestions",
          "str",
          "analysis.get",
          "self._identify_high_priority_duplicates"
        ],
        "ai_suggest": [
          "self._generate_next_steps",
          "self._get_workflow_suggestions",
          "delegation.get",
          "str",
          "self._classify_task_type"
        ],
        "_estimate_task_complexity": [
          "any",
          "task.lower",
          "complexity_keywords.items"
        ],
        "_suggest_approach": [
          "approaches.append",
          "task.lower"
        ],
        "_find_relevant_modules": [
          "task.lower",
          "relevant.append",
          "struct_analysis.get",
          "module.get",
          "any"
        ],
        "_check_potential_duplicates": [],
        "_recommend_ai_for_task": [
          "any",
          "task.lower"
        ],
        "_generate_workflow_steps": [],
        "_determine_context_requirements": [
          "requirements.append",
          "task.lower"
        ],
        "_get_workflow_suggestions": [],
        "_get_available_ai_commands": [],
        "_identify_high_priority_duplicates": [],
        "_generate_refactoring_suggestions": [],
        "_classify_task_type": [
          "any",
          "context.lower"
        ],
        "_generate_next_steps": [],
        "main": [
          "bridge.ai_create_task",
          "argparse.ArgumentParser",
          "CursorAIBridge",
          "print",
          "bridge.ai_check_duplicates",
          "bridge.ai_onboarding_guide",
          "parser.parse_args",
          "json.dumps",
          "bridge.ai_get_context",
          "parser.add_argument",
          "bridge.ai_analyze_task",
          "bridge.ai_suggest"
        ]
      },
      "dependencies": [
        "Any",
        "CursorIntegrationManager",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "WorkflowOrchestrator",
        "ai_self_awareness",
        "argparse",
        "cursor_integration",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": null,
      "artifact_id": "0a25f7c9-a6c4-4772-a41e-48847b996b3d"
    },
    {
      "module_id": "src.llmstruct.ai_self_awareness",
      "path": "src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "module_doc": "AI Self-Awareness Enhancement Module\nProvides comprehensive system introspection and capability discovery for llmstruct AI systems.\nEnhanced with Cursor IDE integration and real-time metrics.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize the capability discovery system with CLI integration.",
          "line_range": [
            101,
            107
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_ensure_directories",
          "docstring": "Ensure required directories exist.",
          "line_range": [
            109,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "discover_all_capabilities",
          "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
          "line_range": [
            113,
            154
          ],
          "parameters": [
            "self",
            "force_refresh"
          ],
          "decorators": []
        },
        {
          "name": "_get_integration_metrics",
          "docstring": "Get metrics about unused function integration success.",
          "line_range": [
            156,
            163
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_enhanced_capabilities_summary",
          "docstring": "Get enhanced capabilities summary including unused function integration.",
          "line_range": [
            165,
            203
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_ai_status",
          "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
          "line_range": [
            205,
            246
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_tools",
          "docstring": "Discover and check health of all available tools.",
          "line_range": [
            248,
            260
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cli_processor",
          "docstring": "Check CLI processor health.",
          "line_range": [
            262,
            297
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_copilot_manager",
          "docstring": "Check Copilot manager health.",
          "line_range": [
            299,
            336
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_context_orchestrator",
          "docstring": "Check context orchestrator health.",
          "line_range": [
            338,
            393
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cache_system",
          "docstring": "Check cache system health.",
          "line_range": [
            395,
            438
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_struct_parser",
          "docstring": "Check struct.json parser health.",
          "line_range": [
            440,
            484
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_docs_system",
          "docstring": "Check docs.json system health.",
          "line_range": [
            486,
            517
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_capabilities",
          "docstring": "Discover available context capabilities.",
          "line_range": [
            519,
            556
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_integration_health",
          "docstring": "Check health of all system integrations.",
          "line_range": [
            558,
            567
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_component_status",
          "docstring": "Check status of a specific component.",
          "line_range": [
            569,
            574
          ],
          "parameters": [
            "self",
            "component_name"
          ],
          "decorators": []
        },
        {
          "name": "_discover_vscode_capabilities",
          "docstring": "Discover VS Code specific capabilities.",
          "line_range": [
            576,
            585
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_cache_hit_rate",
          "docstring": "Calculate cache hit rate using real metrics.",
          "line_range": [
            587,
            589
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_system_load",
          "docstring": "Estimate current system load using real metrics.",
          "line_range": [
            591,
            593
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_cache_valid",
          "docstring": "Check if cached capabilities are still valid.",
          "line_range": [
            595,
            602
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cached_capabilities",
          "docstring": "Load capabilities from cache.",
          "line_range": [
            604,
            618
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cache_capabilities",
          "docstring": "Cache capabilities to disk.",
          "line_range": [
            620,
            630
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "get_capabilities_summary",
          "docstring": "Get a human-readable summary of current capabilities.",
          "line_range": [
            632,
            691
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_project_structure",
          "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
          "line_range": [
            693,
            739
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_directory_structure",
          "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
          "line_range": [
            741,
            760
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_unused_capabilities",
          "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
          "line_range": [
            762,
            819
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_discover_config_capabilities",
          "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
          "line_range": [
            821,
            849
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_scenarios",
          "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
          "line_range": [
            851,
            890
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_command",
          "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
          "line_range": [
            892,
            898
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_config",
          "docstring": "Determine if a config function would be useful for AI configuration awareness.",
          "line_range": [
            900,
            906
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_utility",
          "docstring": "Determine if a utility function would be useful for AI operations.",
          "line_range": [
            908,
            914
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_prioritize_integrations",
          "docstring": "Prioritize which unused functions should be integrated first.",
          "line_range": [
            916,
            932
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_basic_directory_scan",
          "docstring": "Basic directory scan for fallback scenarios.",
          "line_range": [
            934,
            946
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_status_report",
          "docstring": "Generate Cursor-specific status optimized for IDE integration.",
          "line_range": [
            949,
            967
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "optimize_context_for_cursor",
          "docstring": "Provide perfectly sized context for Cursor interactions.",
          "line_range": [
            969,
            1001
          ],
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals from personal bridge.",
          "line_range": [
            1003,
            1038
          ],
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_real_cache_hit_rate",
          "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
          "line_range": [
            1040,
            1066
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_real_system_load",
          "docstring": "Get actual system performance metrics.",
          "line_range": [
            1068,
            1090
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": [
            1092,
            1102
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": [
            1104,
            1114
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_query_type",
          "docstring": "Analyze query to determine optimal context type.",
          "line_range": [
            1116,
            1144
          ],
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": [
            1146,
            1163
          ],
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": [
            1165,
            1177
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_get_overall_health_emoji",
          "docstring": "Get emoji representing overall system health.",
          "line_range": [
            1179,
            1202
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_status_emoji",
          "docstring": "Get emoji for context engine status.",
          "line_range": [
            1204,
            1214
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_ai_integration_emoji",
          "docstring": "Get emoji for AI integration status.",
          "line_range": [
            1216,
            1224
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_goal_alignment_status",
          "docstring": "Get goal alignment status.",
          "line_range": [
            1226,
            1235
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CapabilityStatus",
          "docstring": "Status of system capabilities.",
          "line_range": [
            22,
            27
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextMode",
          "docstring": "Available context modes.",
          "line_range": [
            30,
            35
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ToolHealth",
          "docstring": "Health status of a specific tool.",
          "line_range": [
            39,
            46
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextCapabilities",
          "docstring": "Available context capabilities.",
          "line_range": [
            50,
            57
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "IntegrationHealth",
          "docstring": "Status of system integrations.",
          "line_range": [
            61,
            68
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "VSCodeCapabilities",
          "docstring": "VS Code specific capabilities.",
          "line_range": [
            72,
            79
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilities",
          "docstring": "Complete system capabilities overview.",
          "line_range": [
            83,
            91
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilityDiscovery",
          "docstring": "Discovers and monitors system capabilities in real-time.\nProvides AI with comprehensive understanding of available tools and systems.\nEnhanced with unused function integration for maximum AI self-awareness.",
          "line_range": [
            94,
            1235
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the capability discovery system with CLI integration.",
              "line_range": [
                101,
                107
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_ensure_directories",
              "docstring": "Ensure required directories exist.",
              "line_range": [
                109,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "discover_all_capabilities",
              "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
              "line_range": [
                113,
                154
              ],
              "parameters": [
                "self",
                "force_refresh"
              ]
            },
            {
              "name": "_get_integration_metrics",
              "docstring": "Get metrics about unused function integration success.",
              "line_range": [
                156,
                163
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_enhanced_capabilities_summary",
              "docstring": "Get enhanced capabilities summary including unused function integration.",
              "line_range": [
                165,
                203
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_comprehensive_ai_status",
              "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
              "line_range": [
                205,
                246
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_tools",
              "docstring": "Discover and check health of all available tools.",
              "line_range": [
                248,
                260
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cli_processor",
              "docstring": "Check CLI processor health.",
              "line_range": [
                262,
                297
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_copilot_manager",
              "docstring": "Check Copilot manager health.",
              "line_range": [
                299,
                336
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_context_orchestrator",
              "docstring": "Check context orchestrator health.",
              "line_range": [
                338,
                393
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cache_system",
              "docstring": "Check cache system health.",
              "line_range": [
                395,
                438
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_struct_parser",
              "docstring": "Check struct.json parser health.",
              "line_range": [
                440,
                484
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_docs_system",
              "docstring": "Check docs.json system health.",
              "line_range": [
                486,
                517
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_capabilities",
              "docstring": "Discover available context capabilities.",
              "line_range": [
                519,
                556
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_integration_health",
              "docstring": "Check health of all system integrations.",
              "line_range": [
                558,
                567
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_component_status",
              "docstring": "Check status of a specific component.",
              "line_range": [
                569,
                574
              ],
              "parameters": [
                "self",
                "component_name"
              ]
            },
            {
              "name": "_discover_vscode_capabilities",
              "docstring": "Discover VS Code specific capabilities.",
              "line_range": [
                576,
                585
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_cache_hit_rate",
              "docstring": "Calculate cache hit rate using real metrics.",
              "line_range": [
                587,
                589
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_estimate_system_load",
              "docstring": "Estimate current system load using real metrics.",
              "line_range": [
                591,
                593
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_cache_valid",
              "docstring": "Check if cached capabilities are still valid.",
              "line_range": [
                595,
                602
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cached_capabilities",
              "docstring": "Load capabilities from cache.",
              "line_range": [
                604,
                618
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cache_capabilities",
              "docstring": "Cache capabilities to disk.",
              "line_range": [
                620,
                630
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "get_capabilities_summary",
              "docstring": "Get a human-readable summary of current capabilities.",
              "line_range": [
                632,
                691
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_project_structure",
              "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
              "line_range": [
                693,
                739
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_enhanced_directory_structure",
              "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
              "line_range": [
                741,
                760
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_unused_capabilities",
              "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
              "line_range": [
                762,
                819
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_discover_config_capabilities",
              "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
              "line_range": [
                821,
                849
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_scenarios",
              "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
              "line_range": [
                851,
                890
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_ai_useful_command",
              "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
              "line_range": [
                892,
                898
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_config",
              "docstring": "Determine if a config function would be useful for AI configuration awareness.",
              "line_range": [
                900,
                906
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_utility",
              "docstring": "Determine if a utility function would be useful for AI operations.",
              "line_range": [
                908,
                914
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_prioritize_integrations",
              "docstring": "Prioritize which unused functions should be integrated first.",
              "line_range": [
                916,
                932
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_basic_directory_scan",
              "docstring": "Basic directory scan for fallback scenarios.",
              "line_range": [
                934,
                946
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cursor_status_report",
              "docstring": "Generate Cursor-specific status optimized for IDE integration.",
              "line_range": [
                949,
                967
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "optimize_context_for_cursor",
              "docstring": "Provide perfectly sized context for Cursor interactions.",
              "line_range": [
                969,
                1001
              ],
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals from personal bridge.",
              "line_range": [
                1003,
                1038
              ],
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "_calculate_real_cache_hit_rate",
              "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
              "line_range": [
                1040,
                1066
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_real_system_load",
              "docstring": "Get actual system performance metrics.",
              "line_range": [
                1068,
                1090
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": [
                1092,
                1102
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": [
                1104,
                1114
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_query_type",
              "docstring": "Analyze query to determine optimal context type.",
              "line_range": [
                1116,
                1144
              ],
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": [
                1146,
                1163
              ],
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": [
                1165,
                1177
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_get_overall_health_emoji",
              "docstring": "Get emoji representing overall system health.",
              "line_range": [
                1179,
                1202
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_get_context_status_emoji",
              "docstring": "Get emoji for context engine status.",
              "line_range": [
                1204,
                1214
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_get_ai_integration_emoji",
              "docstring": "Get emoji for AI integration status.",
              "line_range": [
                1216,
                1224
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_goal_alignment_status",
              "docstring": "Get goal alignment status.",
              "line_range": [
                1226,
                1235
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._ensure_directories",
          "create_ai_cli_integration"
        ],
        "_ensure_directories": [],
        "discover_all_capabilities": [
          "self._analyze_project_structure",
          "logger.info",
          "self._calculate_cache_hit_rate",
          "self._discover_context_capabilities",
          "self._cache_capabilities",
          "self._get_integration_metrics",
          "datetime.now",
          "self._load_cached_capabilities",
          "self._check_integration_health",
          "self._discover_vscode_capabilities",
          "self._is_cache_valid",
          "time.time",
          "SystemCapabilities",
          "self._discover_tools",
          "self._estimate_system_load"
        ],
        "_get_integration_metrics": [],
        "get_enhanced_capabilities_summary": [
          "enhanced_info.append",
          "self.get_capabilities_summary",
          "hasattr",
          "str"
        ],
        "get_comprehensive_ai_status": [
          "str",
          "self.get_enhanced_capabilities_summary",
          "get_ai_enhanced_cli_summary"
        ],
        "_discover_tools": [
          "self._check_docs_system",
          "self._check_cli_processor",
          "self._check_copilot_manager",
          "self._check_context_orchestrator",
          "self._check_cache_system",
          "self._check_struct_parser"
        ],
        "_check_cli_processor": [
          "CLIConfig",
          "CommandProcessor",
          "ToolHealth",
          "datetime.now",
          "str",
          "time.time",
          "CLIUtils"
        ],
        "_check_copilot_manager": [
          "hasattr",
          "initialize_copilot",
          "ToolHealth",
          "datetime.now",
          "str",
          "manager.get_context_status",
          "time.time"
        ],
        "_check_context_orchestrator": [
          "hasattr",
          "create_context_orchestrator",
          "ToolHealth",
          "datetime.now",
          "str",
          "get_optimized_context",
          "time.time",
          "logger.warning"
        ],
        "_check_cache_system": [
          "struct_file.exists",
          "ToolHealth",
          "datetime.now",
          "str",
          "cache.cache_json",
          "JSONCache",
          "cache.close",
          "time.time",
          "cache.get_full_json"
        ],
        "_check_struct_parser": [
          "json.load",
          "FileNotFoundError",
          "struct_file.exists",
          "struct_data.get",
          "ToolHealth",
          "datetime.now",
          "str",
          "time.time",
          "missing_keys.append",
          "open"
        ],
        "_check_docs_system": [
          "json.load",
          "docs_file.exists",
          "FileNotFoundError",
          "ToolHealth",
          "datetime.now",
          "str",
          "time.time",
          "open"
        ],
        "_discover_context_capabilities": [
          "config.get",
          "create_context_orchestrator",
          "isinstance",
          "str",
          "logger.error",
          "ContextCapabilities",
          "scenario_mappings.keys",
          "list"
        ],
        "_check_integration_health": [
          "self._check_component_status",
          "IntegrationHealth"
        ],
        "_check_component_status": [
          "hasattr"
        ],
        "_discover_vscode_capabilities": [
          "VSCodeCapabilities"
        ],
        "_calculate_cache_hit_rate": [
          "self._calculate_real_cache_hit_rate"
        ],
        "_estimate_system_load": [
          "self._get_real_system_load"
        ],
        "_is_cache_valid": [
          "time.time"
        ],
        "_load_cached_capabilities": [
          "json.load",
          "logger.error",
          "open"
        ],
        "_cache_capabilities": [
          "asdict",
          "json.dump",
          "logger.error",
          "open"
        ],
        "get_capabilities_summary": [
          "str",
          "self.discover_all_capabilities",
          "len",
          "chr"
        ],
        "_analyze_project_structure": [
          "json.load",
          "self._get_enhanced_directory_structure",
          "self._analyze_unused_capabilities",
          "sum",
          "struct_file.exists",
          "struct_data.get",
          "self._discover_config_capabilities",
          "self._discover_context_scenarios",
          "str",
          "module.get",
          "len",
          "open"
        ],
        "_get_enhanced_directory_structure": [
          "get_directory_structure",
          "self._basic_directory_scan",
          "str"
        ],
        "_analyze_unused_capabilities": [
          "self._is_ai_useful_utility",
          "utils_module.get",
          "self._is_ai_useful_config",
          "self._is_ai_useful_command",
          "struct_data.get",
          "min",
          "cli_module.get",
          "config_module.get",
          "str",
          "f.startswith",
          "self._prioritize_integrations",
          "modules.get",
          "len"
        ],
        "_discover_config_capabilities": [
          "get_queue_config",
          "get_copilot_config",
          "is_auto_update_enabled",
          "str",
          "get_context_config"
        ],
        "_discover_context_scenarios": [
          "str",
          "get_metrics_summary",
          "get_context_for_scenario"
        ],
        "_is_ai_useful_command": [],
        "_is_ai_useful_config": [],
        "_is_ai_useful_utility": [],
        "_prioritize_integrations": [
          "priorities.append"
        ],
        "_basic_directory_scan": [
          "str",
          "item.is_file",
          "logger.error",
          "item.is_dir"
        ],
        "get_cursor_status_report": [
          "self._get_goal_alignment_status",
          "self._load_cursor_config",
          "self._get_context_status_emoji",
          "self.discover_all_capabilities",
          "self._get_ai_integration_emoji",
          "str",
          "self._get_overall_health_emoji"
        ],
        "optimize_context_for_cursor": [
          "self._apply_privacy_filter",
          "cursor_config.get",
          "json.load",
          "self._load_cursor_config",
          "file_path.exists",
          "str",
          "optimal_config.get",
          "logger.error",
          "self._analyze_query_type",
          "open",
          "context_rules.get"
        ],
        "get_goal_aligned_suggestions": [
          "suggestions.extend",
          "technical_context.lower",
          "self._load_personal_bridge",
          "any",
          "personal_bridge.get",
          "logger.error"
        ],
        "_calculate_real_cache_hit_rate": [
          "cache_dir.exists",
          "cache_dir.glob",
          "cache_file.stat",
          "len",
          "logger.error",
          "time.time",
          "list"
        ],
        "_get_real_system_load": [
          "psutil.virtual_memory",
          "min",
          "psutil.disk_usage",
          "psutil.cpu_percent",
          "str",
          "logger.error"
        ],
        "_load_cursor_config": [
          "logger.error",
          "json.load",
          "open",
          "config_path.exists"
        ],
        "_load_personal_bridge": [
          "bridge_path.exists",
          "json.load",
          "logger.error",
          "open"
        ],
        "_analyze_query_type": [
          "query_analysis.get",
          "any"
        ],
        "_apply_privacy_filter": [
          "context_data.items",
          "isinstance",
          "self._filter_sensitive_dict"
        ],
        "_filter_sensitive_dict": [
          "self._filter_sensitive_dict",
          "key.lower",
          "isinstance",
          "data.items",
          "any"
        ],
        "_get_overall_health_emoji": [],
        "_get_context_status_emoji": [
          "len"
        ],
        "_get_ai_integration_emoji": [
          "hasattr"
        ],
        "_get_goal_alignment_status": [
          "self._load_personal_bridge"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "asdict",
        "create_ai_cli_integration",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "get_ai_enhanced_cli_summary",
        "get_auto_update_config",
        "get_context_config",
        "get_context_for_scenario",
        "get_copilot_config",
        "get_directory_structure",
        "get_metrics_summary",
        "get_optimized_context",
        "get_queue_config",
        "initialize_copilot",
        "is_auto_update_enabled",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cache",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "logging",
        "os",
        "pathlib",
        "psutil",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "66992ac8-bcc9-4cf5-80e7-c44c17a3717c"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "module_doc": "CLI utility functions.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize utils with root directory.",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read file content with size limit.",
          "line_range": [
            28,
            50
          ],
          "parameters": [
            "self",
            "file_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "write_file_content",
          "docstring": "Write content to file.",
          "line_range": [
            52,
            70
          ],
          "parameters": [
            "self",
            "file_path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "get_directory_structure",
          "docstring": "Get directory structure using folder generator.",
          "line_range": [
            72,
            115
          ],
          "parameters": [
            "self",
            "path",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON content.",
          "line_range": [
            117,
            123
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "format_json",
          "docstring": "Format data as JSON string.",
          "line_range": [
            125,
            131
          ],
          "parameters": [
            "self",
            "data",
            "indent"
          ],
          "decorators": []
        },
        {
          "name": "generate_unique_id",
          "docstring": "Generate unique ID for commands, queues, etc.",
          "line_range": [
            133,
            137
          ],
          "parameters": [
            "self",
            "prefix"
          ],
          "decorators": []
        },
        {
          "name": "safe_path_join",
          "docstring": "Safely join path parts, preventing directory traversal.",
          "line_range": [
            139,
            149
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_exists",
          "docstring": "Check if file exists.",
          "line_range": [
            151,
            157
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "dir_exists",
          "docstring": "Check if directory exists.",
          "line_range": [
            159,
            165
          ],
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_size",
          "docstring": "Get file size in bytes.",
          "line_range": [
            167,
            173
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_file",
          "docstring": "Create backup of file with timestamp.",
          "line_range": [
            175,
            191
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_backups",
          "docstring": "Clean up old backup files, keeping only the most recent ones.",
          "line_range": [
            193,
            222
          ],
          "parameters": [
            "self",
            "file_path",
            "keep_count"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIUtils",
          "docstring": "Utility functions for CLI operations.",
          "line_range": [
            21,
            222
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize utils with root directory.",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "read_file_content",
              "docstring": "Read file content with size limit.",
              "line_range": [
                28,
                50
              ],
              "parameters": [
                "self",
                "file_path",
                "max_size"
              ]
            },
            {
              "name": "write_file_content",
              "docstring": "Write content to file.",
              "line_range": [
                52,
                70
              ],
              "parameters": [
                "self",
                "file_path",
                "content"
              ]
            },
            {
              "name": "get_directory_structure",
              "docstring": "Get directory structure using folder generator.",
              "line_range": [
                72,
                115
              ],
              "parameters": [
                "self",
                "path",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ]
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON content.",
              "line_range": [
                117,
                123
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "format_json",
              "docstring": "Format data as JSON string.",
              "line_range": [
                125,
                131
              ],
              "parameters": [
                "self",
                "data",
                "indent"
              ]
            },
            {
              "name": "generate_unique_id",
              "docstring": "Generate unique ID for commands, queues, etc.",
              "line_range": [
                133,
                137
              ],
              "parameters": [
                "self",
                "prefix"
              ]
            },
            {
              "name": "safe_path_join",
              "docstring": "Safely join path parts, preventing directory traversal.",
              "line_range": [
                139,
                149
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_exists",
              "docstring": "Check if file exists.",
              "line_range": [
                151,
                157
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "dir_exists",
              "docstring": "Check if directory exists.",
              "line_range": [
                159,
                165
              ],
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "get_file_size",
              "docstring": "Get file size in bytes.",
              "line_range": [
                167,
                173
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "backup_file",
              "docstring": "Create backup of file with timestamp.",
              "line_range": [
                175,
                191
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "cleanup_old_backups",
              "docstring": "Clean up old backup files, keeping only the most recent ones.",
              "line_range": [
                193,
                222
              ],
              "parameters": [
                "self",
                "file_path",
                "keep_count"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "read_file_content": [
          "logging.error",
          "os.stat",
          "logging.warning",
          "f.read",
          "open"
        ],
        "write_file_content": [
          "Path",
          "logging.error",
          "logging.info",
          "f.write",
          "open"
        ],
        "get_directory_structure": [
          "logging.error",
          "os.listdir",
          "get_folder_structure",
          "sorted"
        ],
        "validate_json": [
          "str",
          "json.loads"
        ],
        "format_json": [
          "logging.error",
          "str",
          "json.dumps"
        ],
        "generate_unique_id": [
          "str",
          "int",
          "time.time",
          "uuid.uuid4"
        ],
        "safe_path_join": [
          "ValueError",
          "resolved_path.startswith"
        ],
        "file_exists": [
          "self.safe_path_join"
        ],
        "dir_exists": [
          "self.safe_path_join"
        ],
        "get_file_size": [
          "self.safe_path_join"
        ],
        "backup_file": [
          "dst.write",
          "logging.error",
          "int",
          "src.read",
          "self.safe_path_join",
          "time.time",
          "open"
        ],
        "cleanup_old_backups": [
          "os.remove",
          "backups.sort",
          "logging.error",
          "filename.startswith",
          "os.listdir",
          "int",
          "self.safe_path_join",
          "logging.warning",
          "filename.split",
          "logging.info",
          "backups.append"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "2f4259de-4bec-4c2b-b3ec-51ff9434315b"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "module_doc": "CLI command processing and handlers.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize command processor.",
          "line_range": [
            33,
            72
          ],
          "parameters": [
            "self",
            "root_dir",
            "config",
            "utils"
          ],
          "decorators": []
        },
        {
          "name": "set_cache",
          "docstring": "Set cache instance.",
          "line_range": [
            74,
            76
          ],
          "parameters": [
            "self",
            "cache"
          ],
          "decorators": []
        },
        {
          "name": "set_copilot",
          "docstring": "Set Copilot manager instance.",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "self",
            "copilot_manager"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "Process a command starting with /.",
          "line_range": [
            82,
            98
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "process_prompt",
          "docstring": "Process a regular user prompt (not a command).",
          "line_range": [
            100,
            152
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Show help information.",
          "line_range": [
            154,
            217
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace",
          "docstring": "Handle workspace state and permissions management.",
          "line_range": [
            219,
            334
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_mode",
          "docstring": "Handle context mode operations with workspace integration.",
          "line_range": [
            336,
            437
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_view",
          "docstring": "View file or directory contents.",
          "line_range": [
            439,
            478
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_write",
          "docstring": "Write content to a file.",
          "line_range": [
            480,
            505
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_queue",
          "docstring": "Handle queue operations.",
          "line_range": [
            507,
            549
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_cache",
          "docstring": "Handle cache operations.",
          "line_range": [
            551,
            590
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_copilot",
          "docstring": "Handle Copilot operations.",
          "line_range": [
            592,
            626
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_config",
          "docstring": "Handle configuration operations.",
          "line_range": [
            628,
            660
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Show system status.",
          "line_range": [
            662,
            676
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_backup",
          "docstring": "Create backup of a file.",
          "line_range": [
            678,
            693
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_parse",
          "docstring": "Parse project structure.",
          "line_range": [
            695,
            715
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_audit",
          "docstring": "Handle audit operations.",
          "line_range": [
            717,
            743
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_auto_update",
          "docstring": "Handle auto-update operations.",
          "line_range": [
            745,
            765
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_struct_status",
          "docstring": "Handle struct status operations.",
          "line_range": [
            767,
            791
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context",
          "docstring": "Handle context operations.",
          "line_range": [
            793,
            849
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_session",
          "docstring": "Handle session operations.",
          "line_range": [
            851,
            902
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CommandProcessor",
          "docstring": "Processes CLI commands and user prompts.",
          "line_range": [
            30,
            902
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize command processor.",
              "line_range": [
                33,
                72
              ],
              "parameters": [
                "self",
                "root_dir",
                "config",
                "utils"
              ]
            },
            {
              "name": "set_cache",
              "docstring": "Set cache instance.",
              "line_range": [
                74,
                76
              ],
              "parameters": [
                "self",
                "cache"
              ]
            },
            {
              "name": "set_copilot",
              "docstring": "Set Copilot manager instance.",
              "line_range": [
                78,
                80
              ],
              "parameters": [
                "self",
                "copilot_manager"
              ]
            },
            {
              "name": "process_command",
              "docstring": "Process a command starting with /.",
              "line_range": [
                82,
                98
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "process_prompt",
              "docstring": "Process a regular user prompt (not a command).",
              "line_range": [
                100,
                152
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Show help information.",
              "line_range": [
                154,
                217
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace",
              "docstring": "Handle workspace state and permissions management.",
              "line_range": [
                219,
                334
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_mode",
              "docstring": "Handle context mode operations with workspace integration.",
              "line_range": [
                336,
                437
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_view",
              "docstring": "View file or directory contents.",
              "line_range": [
                439,
                478
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_write",
              "docstring": "Write content to a file.",
              "line_range": [
                480,
                505
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_queue",
              "docstring": "Handle queue operations.",
              "line_range": [
                507,
                549
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_cache",
              "docstring": "Handle cache operations.",
              "line_range": [
                551,
                590
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_copilot",
              "docstring": "Handle Copilot operations.",
              "line_range": [
                592,
                626
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_config",
              "docstring": "Handle configuration operations.",
              "line_range": [
                628,
                660
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Show system status.",
              "line_range": [
                662,
                676
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_backup",
              "docstring": "Create backup of a file.",
              "line_range": [
                678,
                693
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_parse",
              "docstring": "Parse project structure.",
              "line_range": [
                695,
                715
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_audit",
              "docstring": "Handle audit operations.",
              "line_range": [
                717,
                743
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_auto_update",
              "docstring": "Handle auto-update operations.",
              "line_range": [
                745,
                765
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_struct_status",
              "docstring": "Handle struct status operations.",
              "line_range": [
                767,
                791
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context",
              "docstring": "Handle context operations.",
              "line_range": [
                793,
                849
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_session",
              "docstring": "Handle session operations.",
              "line_range": [
                851,
                902
              ],
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "WorkspaceStateManager",
          "print"
        ],
        "set_cache": [],
        "set_copilot": [],
        "process_command": [
          "print",
          "logging.error",
          "command_line.split",
          "command_line.strip",
          "len"
        ],
        "process_prompt": [
          "print",
          "prompt.strip",
          "logging.error",
          "len",
          "get_optimized_context",
          "logging.warning",
          "context_data.get",
          "logging.info",
          "context_info.get",
          "CopilotEvent"
        ],
        "cmd_help": [
          "print"
        ],
        "cmd_workspace": [
          "entry.get",
          "print",
          "result.get",
          "logging.error",
          "permissions.get",
          "override.get",
          "boundaries.get",
          "args.strip",
          "state.get",
          "int",
          "len",
          "action_args.split"
        ],
        "cmd_mode": [
          "print",
          "args.upper",
          "result.get",
          "metrics.get",
          "permissions.get",
          "args.lower",
          "re.findall",
          "args.strip",
          "get_optimized_context",
          "context_data.get",
          "len"
        ],
        "cmd_view": [
          "args.strip",
          "os.listdir",
          "print",
          "sorted"
        ],
        "cmd_write": [
          "print",
          "args.split",
          "content.endswith",
          "len",
          "content.startswith"
        ],
        "cmd_queue": [
          "cmd.get",
          "os.remove",
          "json.load",
          "print",
          "args.strip",
          "enumerate",
          "len",
          "queue_data.get",
          "open"
        ],
        "cmd_cache": [
          "print",
          "os.listdir",
          "stats.get",
          "args.strip",
          "len"
        ],
        "cmd_copilot": [
          "json.load",
          "print",
          "args.strip",
          "json.dumps",
          "open"
        ],
        "cmd_config": [
          "args.strip",
          "print",
          "json.dumps"
        ],
        "cmd_status": [
          "print"
        ],
        "cmd_backup": [
          "args.strip",
          "print"
        ],
        "cmd_parse": [
          "print",
          "generate_json"
        ],
        "cmd_audit": [
          "args.strip",
          "print"
        ],
        "handle_auto_update": [
          "print",
          "generate_json"
        ],
        "handle_struct_status": [
          "json.load",
          "print",
          "struct_data.get",
          "os.stat",
          "datetime.fromtimestamp",
          "len",
          "open"
        ],
        "cmd_context": [
          "print",
          "metrics.get",
          "args.strip",
          "get_optimized_context",
          "context_data.get",
          "len"
        ],
        "cmd_session": [
          "print",
          "datetime.now",
          "args.strip",
          "state.get",
          "len"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CopilotContextManager",
        "CopilotEvent",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "WorkspaceStateManager",
        "cli_config",
        "cli_utils",
        "copilot",
        "create_context_orchestrator",
        "datetime",
        "generate_json",
        "get_optimized_context",
        "get_optimized_context_for_scenario",
        "initialize_copilot",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "sys",
        "trigger_copilot_event",
        "typing",
        "workspace"
      ],
      "hash": null,
      "artifact_id": "16c0b64e-0173-4e71-8477-09edb3fb3f06"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "LLMClient",
        "SystemCapabilityDiscovery",
        "ai_cli_integration",
        "ai_self_awareness",
        "llm_client"
      ],
      "hash": null,
      "artifact_id": "c79cf893-3b5e-4e23-8d6a-79f410352ca8"
    },
    {
      "module_id": "src.llmstruct.modules.cli.handlers_legacy",
      "path": "src/llmstruct/modules/cli/handlers_legacy.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            14,
            149
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive_legacy": [
          "re.match",
          "JSONCache",
          "cache.close",
          "json.dumps",
          "user_input.lower",
          "attach_to_llm_request",
          "input",
          "parse",
          "logging.error",
          "m.group",
          "args_str.strip",
          "read_file_content",
          "logging.warning",
          "get_folder_structure",
          "Path",
          "client.query",
          "user_input.startswith",
          "write_to_file",
          "print",
          "os.listdir",
          "sorted",
          "LLMClient",
          "load_gitignore"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "98b10198-51ff-4385-8016-eea3dbc458f4"
    },
    {
      "module_id": "src.llmstruct.modules.cli.analyze_duplicates",
      "path": "src/llmstruct/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": [
            1,
            76
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "analyze_duplicates": [
          "hasattr",
          "print",
          "duplicates.items",
          "getattr",
          "filtered_duplicates.items",
          "sorted",
          "analysis.get",
          "json.dump",
          "orchestrator.analyze_codebase_for_duplicates",
          "duplication_data.get",
          "r.get",
          "open",
          "enumerate",
          "json.dumps",
          "len",
          "traceback.print_exc",
          "WorkflowOrchestrator",
          "rec.get"
        ]
      },
      "dependencies": [
        "WorkflowOrchestrator",
        "json",
        "llmstruct.workflow_orchestrator",
        "traceback"
      ],
      "hash": null,
      "artifact_id": "c34f64ee-e85a-4d92-a47a-4ebff1f0209c"
    },
    {
      "module_id": "src.llmstruct.modules.cli.copilot",
      "path": "src/llmstruct/modules/cli/copilot.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            5,
            113
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "copilot": [
          "hasattr",
          "manager.unload_context_layer",
          "layers.split",
          "manager.load_context_layer",
          "manager.refresh_all_contexts",
          "manager.export_context",
          "enumerate",
          "manager.get_context_status",
          "logging.info",
          "manager.close",
          "shutil.copy",
          "template_path.exists",
          "logging.error",
          "Path",
          "getattr",
          "smart_suggest",
          "manager.validate_change",
          "config_path.exists",
          "open",
          "initialize_copilot",
          "print",
          "f.write"
        ]
      },
      "dependencies": [
        "Path",
        "initialize_copilot",
        "llmstruct.copilot",
        "logging",
        "pathlib",
        "shutil",
        "smart_suggest"
      ],
      "hash": null,
      "artifact_id": "0abbbe61-1ff3-4597-a7f9-86b01582a487"
    },
    {
      "module_id": "src.llmstruct.modules.cli.handlers",
      "path": "src/llmstruct/modules/cli/handlers.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            14,
            21
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            23,
            32
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive": [
          "interactive_legacy",
          "logging.warning",
          "interactive_modular"
        ],
        "interactive_modular": [
          "hasattr",
          "create_cli_core",
          "logging.info",
          "cli_core.run_interactive_mode"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "create_cli_core",
        "get_folder_structure",
        "interactive_legacy",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.cli_core",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.handlers_legacy",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "20614bd2-3124-423f-9651-d09d51dc60a1"
    },
    {
      "module_id": "src.llmstruct.modules.cli.review",
      "path": "src/llmstruct/modules/cli/review.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "review": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "d8246b38-f27b-40bd-896a-42e63c33f62b"
    },
    {
      "module_id": "src.llmstruct.modules.cli.dogfood",
      "path": "src/llmstruct/modules/cli/dogfood.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "dogfood": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "cbbf9395-8b84-4561-90fa-178aadea702b"
    },
    {
      "module_id": "src.llmstruct.modules.cli.parse",
      "path": "src/llmstruct/modules/cli/parse.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            9,
            60
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse": [
          "Path",
          "config.get",
          "cli_config.get",
          "parsing_config.get",
          "logging.error",
          "load_config",
          "json.dump",
          "cache.cache_json",
          "JSONCache",
          "cache.close",
          "logging.warning",
          "logging.info",
          "generate_json"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "generate_json",
        "json",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "load_config",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "3ccfbed6-0378-4888-9b36-91650c5e44c3"
    },
    {
      "module_id": "src.llmstruct.modules.cli.audit",
      "path": "src/llmstruct/modules/cli/audit.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": [
            4,
            17
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "audit": [
          "Path",
          "hasattr",
          "print",
          "file_path.exists",
          "analyze_duplicates"
        ]
      },
      "dependencies": [
        "Path",
        "analyze_duplicates",
        "llmstruct.cli",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "d43644d7-39be-4f47-8e61-b9fe49b26800"
    },
    {
      "module_id": "src.llmstruct.modules.cli.query",
      "path": "src/llmstruct/modules/cli/query.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            7,
            63
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "query": [
          "Path",
          "hasattr",
          "client.query_with_context",
          "client.query",
          "create_context_orchestrator",
          "logging.error",
          "orchestrator.get_context_for_scenario",
          "json.dump",
          "JSONCache",
          "cache.close",
          "LLMClient",
          "logging.warning",
          "logging.info"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "create_context_orchestrator",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "adc91d1d-2294-490c-bc1f-18a02129194b"
    },
    {
      "module_id": "src.llmstruct.modules.cli.utils",
      "path": "src/llmstruct/modules/cli/utils.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            6,
            20
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            22,
            32
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": [
            45,
            63
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            65,
            72
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "logging.error",
          "gitignore_path.open",
          "gitignore_path.exists",
          "line.startswith",
          "line.strip"
        ],
        "load_config": [
          "Path",
          "config_path.open",
          "logging.error",
          "toml.load",
          "config_path.exists"
        ],
        "read_file_content": [
          "Path",
          "logging.error",
          "f.read",
          "path.is_file",
          "path.open"
        ],
        "write_to_file": [
          "Path",
          "re.sub",
          "file_path.open",
          "logging.error",
          "file_path.exists",
          "str",
          "logging.warning",
          "logging.info",
          "f.write",
          "base_path.mkdir"
        ],
        "parse_files_from_response": [
          "filename.strip",
          "content.strip",
          "re.findall",
          "files.append"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "logging",
        "pathlib",
        "re",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "200d560c-83f1-49eb-9360-b5249dbdd827"
    },
    {
      "module_id": "src.llmstruct.modules.cli.context",
      "path": "src/llmstruct/modules/cli/context.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "context": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "4741b5ab-60ae-40a8-84bf-ee21c98db9e7"
    },
    {
      "module_id": "src.llmstruct.modules.cli.__init__",
      "path": "src/llmstruct/modules/cli/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "bacf59ee-ab47-4ab4-a4b1-43760750c6a3"
    },
    {
      "module_id": "src.llmstruct.modules.commands.queue",
      "path": "src/llmstruct/modules/commands/queue.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": [
            9,
            208
          ],
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "process_cli_queue_enhanced": [
          "time.time",
          "client.query",
          "json.load",
          "print",
          "logging.error",
          "isinstance",
          "write_to_file",
          "options.get",
          "read_file_content",
          "len",
          "enumerate",
          "item.get",
          "load_gitignore",
          "logging.info",
          "attach_to_llm_request",
          "get_folder_structure",
          "open",
          "workflow.get"
        ]
      },
      "dependencies": [
        "attach_to_llm_request",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "ee001e47-963e-47e5-90c9-ed994989503c"
    },
    {
      "module_id": "src.llmstruct.modules.commands.metrics",
      "path": "src/llmstruct/modules/commands/metrics.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "metrics_status",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            1,
            20
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_summary",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0432\u043e\u0434\u043a\u0443 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            22,
            66
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_analytics",
          "docstring": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            68,
            104
          ],
          "parameters": [
            "output_file",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "metrics_report",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0435\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u043e\u0442\u0447\u0435\u0442",
          "line_range": [
            106,
            134
          ],
          "parameters": [
            "sessions",
            "output_file"
          ],
          "decorators": []
        },
        {
          "name": "metrics_track",
          "docstring": "\u0420\u0443\u0447\u043d\u043e\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": [
            136,
            145
          ],
          "parameters": [
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "metrics_tokens",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            147,
            185
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "cmd_metrics",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            187,
            205
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "metrics_status": [
          "get_metrics_tracker",
          "tracker.get_session_summary",
          "print"
        ],
        "metrics_summary": [
          "get_metrics_tracker",
          "max",
          "tracker.get_session_summary",
          "print"
        ],
        "metrics_analytics": [
          "writer.writerow",
          "csv.writer",
          "tracker.get_session_summary",
          "print",
          "get_metrics_tracker",
          "json.dump",
          "tracker.get_analytics_data",
          "time.strftime",
          "enumerate",
          "json.dumps",
          "open"
        ],
        "metrics_report": [
          "print",
          "sum",
          "get_metrics_tracker",
          "min",
          "tracker.get_analytics_data",
          "analytics.get",
          "time.strftime",
          "len",
          "f.write",
          "open"
        ],
        "metrics_track": [
          "track_workflow_event",
          "print"
        ],
        "metrics_tokens": [
          "print",
          "get_metrics_tracker",
          "get_token_summary",
          "interaction.get",
          "enumerate",
          "summary.get"
        ],
        "cmd_metrics": [
          "metrics_status",
          "metrics_summary",
          "print",
          "metrics_track",
          "metrics_report",
          "metrics_tokens",
          "metrics_analytics"
        ]
      },
      "dependencies": [
        "csv",
        "get_metrics_tracker",
        "get_token_summary",
        "json",
        "llmstruct.metrics_tracker",
        "time",
        "track_workflow_event"
      ],
      "hash": null,
      "artifact_id": "45012035-4dd9-419e-954a-c7ef9dc8c2bd"
    },
    {
      "module_id": "src.llmstruct.modules.commands.services",
      "path": "src/llmstruct/modules/commands/services.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "add_api_bot_commands",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f API \u0438 Bot \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438",
          "line_range": [
            10,
            47
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        },
        {
          "name": "cmd_api_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 API \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c",
          "line_range": [
            49,
            111
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_bot_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430\u043c\u0438",
          "line_range": [
            113,
            190
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_services",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 (API + Bots)",
          "line_range": [
            192,
            233
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "add_api_bot_commands": [
          "api_subparsers.add_parser",
          "api_parser.add_subparsers",
          "metrics_parser.add_subparsers",
          "metrics_track.add_argument",
          "bot_subparsers.add_parser",
          "services_parser.add_subparsers",
          "metrics_subparsers.add_parser",
          "metrics_report.add_argument",
          "bot_start.add_argument",
          "api_start.add_argument",
          "bot_parser.add_subparsers",
          "metrics_analytics.add_argument",
          "services_subparsers.add_parser",
          "subparsers.add_parser"
        ],
        "cmd_api_management": [
          "Path",
          "subprocess.Popen",
          "print",
          "requests.get",
          "data.get",
          "pid_file.exists",
          "str",
          "response.json",
          "process.terminate",
          "pid_file.unlink",
          "f.read",
          "psutil.Process",
          "venv_path.exists",
          "requests.post",
          "process.wait",
          "int",
          "f.write",
          "open"
        ],
        "cmd_bot_management": [
          "Path",
          "subprocess.Popen",
          "print",
          "active_bots.append",
          "pid_file.exists",
          "str",
          "os.getenv",
          "process.terminate",
          "pid_file.unlink",
          "f.read",
          "psutil.Process",
          "process.is_running",
          "process.wait",
          "int",
          "f.write",
          "bot_scripts.get",
          "open"
        ],
        "cmd_services": [
          "time.sleep",
          "print",
          "cmd_bot_management",
          "cmd_api_management",
          "type"
        ]
      },
      "dependencies": [
        "Path",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "signal",
        "subprocess",
        "time"
      ],
      "hash": null,
      "artifact_id": "0eda8aa9-eb0e-44f4-a061-5fc34331cf90"
    },
    {
      "module_id": "src.llmstruct.modules.commands.__init__",
      "path": "src/llmstruct/modules/commands/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "794be93c-5070-44d4-bff6-f6c73a871673"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "72aef470-ff4a-4b03-aa7f-e316678a7db1"
    },
    {
      "module_id": "src.llmstruct.api.app",
      "path": "src/llmstruct/api/app.py",
      "category": "core",
      "module_doc": "Main FastAPI application for LLMStruct",
      "functions": [
        {
          "name": "root",
          "docstring": "Root endpoint with API information",
          "line_range": [
            78,
            86
          ],
          "parameters": [],
          "decorators": [
            "app.get('/', tags=['root'])"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "root": [
          "app.get"
        ]
      },
      "dependencies": [
        "CORSMiddleware",
        "Depends",
        "FastAPI",
        "GZipMiddleware",
        "api_key_middleware",
        "chat",
        "config",
        "continue_adapter",
        "fastapi",
        "fastapi.middleware.cors",
        "fastapi.middleware.gzip",
        "logging",
        "middleware.auth",
        "middleware.logging",
        "request_logging_middleware",
        "routes",
        "settings",
        "system",
        "uvicorn"
      ],
      "hash": null,
      "artifact_id": "2762847c-87b0-476c-b991-eb7464d31f97"
    },
    {
      "module_id": "src.llmstruct.api.routes.continue_adapter",
      "path": "src/llmstruct/api/routes/continue_adapter.py",
      "category": "core",
      "module_doc": "Continue API Adapter\n\nTranslates Continue extension requests to LLMStruct chat API format",
      "functions": [
        {
          "name": "continue_chat_completion",
          "docstring": "Continue-compatible chat completion endpoint\nTranslates Continue requests to our LLMStruct format",
          "line_range": [
            59,
            129
          ],
          "parameters": [
            "request",
            "api_key"
          ],
          "decorators": [
            "router.post('/v1/chat/completions')"
          ]
        },
        {
          "name": "continue_models",
          "docstring": "List available models for Continue",
          "line_range": [
            132,
            158
          ],
          "parameters": [
            "api_key"
          ],
          "decorators": [
            "router.get('/v1/models')"
          ]
        },
        {
          "name": "continue_embeddings",
          "docstring": "Embeddings endpoint for Continue (placeholder)",
          "line_range": [
            161,
            193
          ],
          "parameters": [
            "request",
            "api_key"
          ],
          "decorators": [
            "router.post('/v1/embeddings')"
          ]
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            25,
            35
          ],
          "parameters": [
            "self",
            "messages",
            "model",
            "temperature",
            "max_tokens",
            "stream"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            39,
            56
          ],
          "parameters": [
            "self",
            "content",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContinueRequest",
          "docstring": "Continue API request format",
          "line_range": [
            23,
            35
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                25,
                35
              ],
              "parameters": [
                "self",
                "messages",
                "model",
                "temperature",
                "max_tokens",
                "stream"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "ContinueResponse",
          "docstring": "Continue API response format (OpenAI-compatible)",
          "line_range": [
            37,
            56
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                39,
                56
              ],
              "parameters": [
                "self",
                "content",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "int",
          "len",
          "datetime.now",
          "content.split"
        ],
        "continue_chat_completion": [
          "reversed",
          "HTTPException",
          "logger.info",
          "request.json",
          "router.post",
          "datetime.now",
          "msg.get",
          "ContinueResponse",
          "str",
          "llm_service.process_message",
          "logger.error",
          "request_data.get",
          "len",
          "Depends"
        ],
        "continue_models": [
          "int",
          "Depends",
          "datetime.now",
          "router.get"
        ],
        "continue_embeddings": [
          "HTTPException",
          "request.json",
          "input_text.split",
          "router.post",
          "str",
          "logger.error",
          "request_data.get",
          "len",
          "Depends"
        ]
      },
      "dependencies": [
        "APIRouter",
        "Any",
        "ChatMessage",
        "ChatResponse",
        "Depends",
        "Dict",
        "HTTPException",
        "LLMService",
        "List",
        "Optional",
        "Request",
        "datetime",
        "fastapi",
        "get_api_key",
        "logging",
        "middleware.auth",
        "models.requests",
        "models.responses",
        "services.llm_service",
        "typing"
      ],
      "hash": null,
      "artifact_id": "a8e7bbd3-8d38-4949-b89a-9b260a256304"
    },
    {
      "module_id": "src.llmstruct.api.middleware.auth",
      "path": "src/llmstruct/api/middleware/auth.py",
      "category": "core",
      "module_doc": "Authentication middleware for LLMStruct FastAPI",
      "functions": [
        {
          "name": "get_api_key",
          "docstring": "FastAPI dependency for API key authentication",
          "line_range": [
            16,
            48
          ],
          "parameters": [
            "request",
            "credentials"
          ],
          "decorators": []
        },
        {
          "name": "api_key_middleware",
          "docstring": "API key authentication middleware",
          "line_range": [
            50,
            87
          ],
          "parameters": [
            "request",
            "call_next"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_api_key": [
          "Depends",
          "HTTPException"
        ],
        "api_key_middleware": [
          "auth_header.startswith",
          "time.time",
          "call_next",
          "JSONResponse"
        ]
      },
      "dependencies": [
        "Callable",
        "Depends",
        "HTTPAuthorizationCredentials",
        "HTTPBearer",
        "HTTPException",
        "JSONResponse",
        "Optional",
        "Request",
        "config",
        "fastapi",
        "fastapi.security",
        "settings",
        "starlette.responses",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d396d0df-a267-40d3-a136-fffdd18cf6a4"
    },
    {
      "module_id": "src.llmstruct.api.services.llm_service",
      "path": "src/llmstruct/api/services/llm_service.py",
      "category": "core",
      "module_doc": "LLM Service\n\nIntegrates with existing LLM models and context orchestration",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            28
          ],
          "parameters": [
            "self",
            "content",
            "context_info",
            "token_usage"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            33,
            36
          ],
          "parameters": [
            "self",
            "api_key"
          ],
          "decorators": []
        },
        {
          "name": "chat_completion",
          "docstring": "Send chat completion request to Anthropic",
          "line_range": [
            38,
            77
          ],
          "parameters": [
            "self",
            "messages",
            "temperature"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            82,
            85
          ],
          "parameters": [
            "self",
            "api_key"
          ],
          "decorators": []
        },
        {
          "name": "chat_completion",
          "docstring": "Send chat completion request to Grok",
          "line_range": [
            87,
            113
          ],
          "parameters": [
            "self",
            "messages",
            "temperature"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_components",
          "docstring": "Initialize context orchestrator and copilot manager",
          "line_range": [
            126,
            140
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_message",
          "docstring": "Process a user message and return AI response",
          "line_range": [
            143,
            168
          ],
          "parameters": [
            "self",
            "message",
            "session_id",
            "context_mode"
          ],
          "decorators": []
        },
        {
          "name": "_try_llm_providers",
          "docstring": "Try LLM providers in order and return response",
          "line_range": [
            170,
            195
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_get_context",
          "docstring": "Get relevant context for the message",
          "line_range": [
            197,
            229
          ],
          "parameters": [
            "self",
            "message",
            "context_mode"
          ],
          "decorators": []
        },
        {
          "name": "_get_full_context",
          "docstring": "Get full project context",
          "line_range": [
            231,
            243
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_focused_context",
          "docstring": "Get focused context based on message content",
          "line_range": [
            245,
            260
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "_get_minimal_context",
          "docstring": "Get minimal context - basic project info",
          "line_range": [
            262,
            267
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_generate_grok_response",
          "docstring": "Generate response using Grok API",
          "line_range": [
            269,
            287
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_generate_anthropic_response",
          "docstring": "Generate response using Anthropic API",
          "line_range": [
            289,
            307
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_build_system_prompt",
          "docstring": "Build system prompt with project context",
          "line_range": [
            309,
            344
          ],
          "parameters": [
            "self",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_generate_mock_response",
          "docstring": "Generate a mock AI response (placeholder for real LLM)",
          "line_range": [
            346,
            380
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMResponse",
          "docstring": "Response from LLM processing",
          "line_range": [
            21,
            28
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                28
              ],
              "parameters": [
                "self",
                "content",
                "context_info",
                "token_usage"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "AnthropicClient",
          "docstring": "Client for Anthropic Claude API",
          "line_range": [
            30,
            77
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                33,
                36
              ],
              "parameters": [
                "self",
                "api_key"
              ]
            },
            {
              "name": "chat_completion",
              "docstring": "Send chat completion request to Anthropic",
              "line_range": [
                38,
                77
              ],
              "parameters": [
                "self",
                "messages",
                "temperature"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "GrokClient",
          "docstring": "Client for Grok API integration",
          "line_range": [
            79,
            113
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                82,
                85
              ],
              "parameters": [
                "self",
                "api_key"
              ]
            },
            {
              "name": "chat_completion",
              "docstring": "Send chat completion request to Grok",
              "line_range": [
                87,
                113
              ],
              "parameters": [
                "self",
                "messages",
                "temperature"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "LLMService",
          "docstring": "Service for LLM processing with context integration",
          "line_range": [
            115,
            380
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self",
                "base_path"
              ]
            },
            {
              "name": "_initialize_components",
              "docstring": "Initialize context orchestrator and copilot manager",
              "line_range": [
                126,
                140
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_message",
              "docstring": "Process a user message and return AI response",
              "line_range": [
                143,
                168
              ],
              "parameters": [
                "self",
                "message",
                "session_id",
                "context_mode"
              ]
            },
            {
              "name": "_try_llm_providers",
              "docstring": "Try LLM providers in order and return response",
              "line_range": [
                170,
                195
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            },
            {
              "name": "_get_context",
              "docstring": "Get relevant context for the message",
              "line_range": [
                197,
                229
              ],
              "parameters": [
                "self",
                "message",
                "context_mode"
              ]
            },
            {
              "name": "_get_full_context",
              "docstring": "Get full project context",
              "line_range": [
                231,
                243
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_focused_context",
              "docstring": "Get focused context based on message content",
              "line_range": [
                245,
                260
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "_get_minimal_context",
              "docstring": "Get minimal context - basic project info",
              "line_range": [
                262,
                267
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_generate_grok_response",
              "docstring": "Generate response using Grok API",
              "line_range": [
                269,
                287
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            },
            {
              "name": "_generate_anthropic_response",
              "docstring": "Generate response using Anthropic API",
              "line_range": [
                289,
                307
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            },
            {
              "name": "_build_system_prompt",
              "docstring": "Build system prompt with project context",
              "line_range": [
                309,
                344
              ],
              "parameters": [
                "self",
                "context_info"
              ]
            },
            {
              "name": "_generate_mock_response",
              "docstring": "Generate a mock AI response (placeholder for real LLM)",
              "line_range": [
                346,
                380
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "GrokClient",
          "AnthropicClient",
          "Path.cwd",
          "self._initialize_components"
        ],
        "chat_completion": [
          "client.post",
          "ValueError",
          "httpx.AsyncClient",
          "response.json",
          "response.raise_for_status"
        ],
        "_initialize_components": [
          "SmartContextOrchestrator",
          "logger.info",
          "CopilotContextManager",
          "str",
          "logger.error"
        ],
        "process_message": [
          "self._get_context",
          "str",
          "LLMResponse",
          "logger.error",
          "self._try_llm_providers"
        ],
        "_try_llm_providers": [
          "logger.info",
          "self._generate_grok_response",
          "self._generate_mock_response",
          "len",
          "logger.warning",
          "self._generate_anthropic_response"
        ],
        "_get_context": [
          "self._get_full_context",
          "self._get_minimal_context",
          "str",
          "self._get_focused_context",
          "logger.error",
          "context_info.update"
        ],
        "_get_full_context": [
          "json.load",
          "struct_file.exists",
          "struct_data.get",
          "len",
          "list",
          "open"
        ],
        "_get_focused_context": [
          "any",
          "message.lower"
        ],
        "_get_minimal_context": [
          "str",
          "datetime.now"
        ],
        "_generate_grok_response": [
          "len",
          "ValueError",
          "self._build_system_prompt"
        ],
        "_generate_anthropic_response": [
          "len",
          "ValueError",
          "self._build_system_prompt"
        ],
        "_build_system_prompt": [
          "context_info.get"
        ],
        "_generate_mock_response": [
          "message.lower",
          "len",
          "context_info.get"
        ]
      },
      "dependencies": [
        "Any",
        "CopilotContextManager",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "asyncio",
        "context_orchestrator",
        "copilot",
        "datetime",
        "httpx",
        "json",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "81e4d3be-4fd7-45cc-ab6a-0f32de0d0e8d"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            15,
            89
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering.",
          "line_range": [
            92,
            149
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.",
          "line_range": [
            152,
            219
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json_with_output_file",
          "docstring": "",
          "line_range": [
            222,
            247
          ],
          "parameters": [
            "root_dir",
            "output_file",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs",
            "include_ranges",
            "include_hashes",
            "goals"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "Path",
          "set",
          "structure.append",
          "p.endswith",
          "any",
          "abs_dir_path.match",
          "abs_dir_path.joinpath",
          "sorted",
          "str",
          "file_path.match",
          "file_path.relative_to",
          "p.rstrip",
          "abs_dir_path.relative_to",
          "os.walk",
          "uuid.uuid4"
        ],
        "build_toc_and_modules": [
          "Path",
          "set",
          "p.endswith",
          "f.match",
          "analyze_module",
          "str",
          "p.rstrip",
          "modules.append",
          "any",
          "len",
          "toc.append",
          "uuid.uuid4"
        ],
        "generate_json": [
          "Path",
          "set",
          "build_toc_and_modules",
          "sum",
          "str",
          "len",
          "list",
          "get_folder_structure",
          "uuid.uuid4"
        ],
        "generate_json_with_output_file": [
          "json.dump",
          "open",
          "generate_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "70748a88-e16b-40b4-ba37-4007e57380c5"
    },
    {
      "module_id": "src.llmstruct.generators.go_json_generator",
      "path": "src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_go_folder_structure",
          "docstring": "Capture directory and file structure for Go projects with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            15,
            85
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_go_toc_and_modules",
          "docstring": "Build TOC and modules for Go projects with artifact_id and robust filtering.",
          "line_range": [
            88,
            143
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "extract_go_mod_info",
          "docstring": "Extract information from go.mod file.",
          "line_range": [
            146,
            182
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "generate_go_json",
          "docstring": "Generate JSON structure for Go project with artifact_id, summary, and tags.",
          "line_range": [
            185,
            259
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_go_folder_structure": [
          "Path",
          "set",
          "structure.append",
          "p.endswith",
          "sorted",
          "file_path.relative_to",
          "str",
          "file_path.match",
          "p.rstrip",
          "any",
          "os.walk",
          "uuid.uuid4"
        ],
        "build_go_toc_and_modules": [
          "Path",
          "set",
          "p.endswith",
          "f.match",
          "analyze_module",
          "str",
          "p.rstrip",
          "modules.append",
          "module.get",
          "any",
          "len",
          "toc.append",
          "uuid.uuid4"
        ],
        "extract_go_mod_info": [
          "Path",
          "line.split",
          "logging.error",
          "dependencies.append",
          "content.strip",
          "go_mod_path.exists",
          "line.startswith",
          "len",
          "f.read",
          "line.strip",
          "open"
        ],
        "generate_go_json": [
          "Path",
          "set",
          "extract_go_mod_info",
          "sum",
          "build_go_toc_and_modules",
          "get_go_folder_structure",
          "m.get",
          "str",
          "go_mod_info.get",
          "len",
          "list",
          "uuid.uuid4"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.go_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "8cae14af-a260-4835-bdd5-2aff2f24116f"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "c5477996-70b8-4567-822e-86947bc1eae0"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": [
            12,
            40
          ],
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": [
            43,
            61
          ],
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "Path",
          "schema_file.exists",
          "json.load",
          "validate",
          "logging.error",
          "json_file.exists",
          "str",
          "logging.info",
          "open"
        ],
        "validate_directory": [
          "Path",
          "json_file.match",
          "str",
          "any",
          "validate_struct_json"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "2d987c31-c619-4a1f-a2c6-5ab864441cf7"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "9120815b-2ebf-4024-9845-e45f67f193d3"
    },
    {
      "module_id": "src.llmstruct.parsers.universal_converter",
      "path": "src/llmstruct/parsers/universal_converter.py",
      "category": "core",
      "module_doc": "Universal Code Converter - Orchestrates all language parsers\nConverts any codebase to llmstruct JSON format",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for universal converter",
          "line_range": [
            375,
            428
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            55,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            79,
            82
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "detect_language",
          "docstring": "Detect programming language from file extension",
          "line_range": [
            84,
            92
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "detect_project_languages",
          "docstring": "Detect all languages in project and count files",
          "line_range": [
            94,
            109
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "get_project_files",
          "docstring": "Get all relevant files for conversion",
          "line_range": [
            111,
            138
          ],
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_python_project",
          "docstring": "Convert Python project to llmstruct format",
          "line_range": [
            140,
            171
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_go_project",
          "docstring": "Convert Go project to llmstruct format",
          "line_range": [
            173,
            190
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_javascript_project",
          "docstring": "Convert JavaScript project to llmstruct format",
          "line_range": [
            192,
            223
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_project",
          "docstring": "Convert any project to llmstruct format",
          "line_range": [
            225,
            250
          ],
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_multi_language_project",
          "docstring": "Convert multi-language project with separate sections per language",
          "line_range": [
            252,
            282
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_build_project_structure",
          "docstring": "Build standard llmstruct project structure",
          "line_range": [
            284,
            312
          ],
          "parameters": [
            "self",
            "language",
            "project_path",
            "modules",
            "toc"
          ],
          "decorators": []
        },
        {
          "name": "_build_empty_project_structure",
          "docstring": "Build empty structure when conversion fails",
          "line_range": [
            314,
            329
          ],
          "parameters": [
            "self",
            "language",
            "project_path",
            "error"
          ],
          "decorators": []
        },
        {
          "name": "_merge_language_results",
          "docstring": "Merge multiple language results into unified structure",
          "line_range": [
            331,
            372
          ],
          "parameters": [
            "self",
            "project_path",
            "language_results"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Language",
          "docstring": "",
          "line_range": [
            33,
            42
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ConverterConfig",
          "docstring": "Configuration for universal converter",
          "line_range": [
            46,
            62
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                55,
                62
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "UniversalConverter",
          "docstring": "Universal code converter for any programming language",
          "line_range": [
            65,
            372
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                79,
                82
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "detect_language",
              "docstring": "Detect programming language from file extension",
              "line_range": [
                84,
                92
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "detect_project_languages",
              "docstring": "Detect all languages in project and count files",
              "line_range": [
                94,
                109
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "get_project_files",
              "docstring": "Get all relevant files for conversion",
              "line_range": [
                111,
                138
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_python_project",
              "docstring": "Convert Python project to llmstruct format",
              "line_range": [
                140,
                171
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_go_project",
              "docstring": "Convert Go project to llmstruct format",
              "line_range": [
                173,
                190
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_javascript_project",
              "docstring": "Convert JavaScript project to llmstruct format",
              "line_range": [
                192,
                223
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_project",
              "docstring": "Convert any project to llmstruct format",
              "line_range": [
                225,
                250
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_multi_language_project",
              "docstring": "Convert multi-language project with separate sections per language",
              "line_range": [
                252,
                282
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_build_project_structure",
              "docstring": "Build standard llmstruct project structure",
              "line_range": [
                284,
                312
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "modules",
                "toc"
              ]
            },
            {
              "name": "_build_empty_project_structure",
              "docstring": "Build empty structure when conversion fails",
              "line_range": [
                314,
                329
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "error"
              ]
            },
            {
              "name": "_merge_language_results",
              "docstring": "Merge multiple language results into unified structure",
              "line_range": [
                331,
                372
              ],
              "parameters": [
                "self",
                "project_path",
                "language_results"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "JavaScriptParser",
          "GoAnalyzer",
          "ConverterConfig"
        ],
        "detect_language": [
          "Path"
        ],
        "detect_project_languages": [
          "any",
          "self.detect_language",
          "os.walk",
          "languages.get"
        ],
        "get_project_files": [
          "any",
          "self.detect_language",
          "os.walk",
          "files.append"
        ],
        "convert_python_project": [
          "logger.info",
          "logger.warning",
          "analyze_python",
          "module_data.get",
          "modules.append",
          "self.get_project_files",
          "self._build_project_structure",
          "len",
          "toc.append"
        ],
        "convert_go_project": [
          "logger.info",
          "convert_to_llmstruct_format",
          "self._build_empty_project_structure",
          "str",
          "logger.error"
        ],
        "convert_javascript_project": [
          "logger.info",
          "logger.warning",
          "module_data.get",
          "modules.append",
          "self.get_project_files",
          "self._build_project_structure",
          "len",
          "toc.append"
        ],
        "convert_project": [
          "NotImplementedError",
          "self.convert_go_project",
          "self.convert_javascript_project",
          "logger.info",
          "self.convert_python_project",
          "ValueError",
          "max",
          "languages.keys",
          "self.detect_project_languages"
        ],
        "convert_multi_language_project": [
          "self.convert_go_project",
          "self.convert_javascript_project",
          "logger.info",
          "self.convert_python_project",
          "ValueError",
          "self._merge_language_results",
          "logger.error",
          "languages.keys",
          "logger.warning",
          "self.detect_project_languages"
        ],
        "_build_project_structure": [
          "len",
          "m.get",
          "sum",
          "language.title"
        ],
        "_build_empty_project_structure": [],
        "_merge_language_results": [
          "language_results.items",
          "list",
          "result.get",
          "stats.get",
          "all_toc.append",
          "language_results.keys",
          "all_modules.append"
        ],
        "main": [
          "argparse.ArgumentParser",
          "exit",
          "print",
          "ConverterConfig",
          "result.get",
          "UniversalConverter",
          "converter.convert_multi_language_project",
          "converter.convert_project",
          "json.dumps",
          "stats.get",
          "logger.error",
          "parser.parse_args",
          "Language",
          "f.write",
          "parser.add_argument",
          "traceback.print_exc",
          "open"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "GoAnalyzer",
        "JavaScriptParser",
        "List",
        "Optional",
        "Path",
        "Union",
        "analyze_module",
        "argparse",
        "convert_to_llmstruct_format",
        "dataclass",
        "dataclasses",
        "enum",
        "go_analyzer",
        "javascript_parser",
        "json",
        "logging",
        "os",
        "pathlib",
        "python_parser",
        "sys",
        "traceback",
        "typing"
      ],
      "hash": null,
      "artifact_id": "8574ed1b-9368-4956-bdb7-e3c193b9939b"
    },
    {
      "module_id": "src.llmstruct.parsers.go_analyzer",
      "path": "src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "module_doc": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b: go/packages, go/analysis",
      "functions": [
        {
          "name": "convert_to_llmstruct_format",
          "docstring": "\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 llmstruct",
          "line_range": [
            203,
            337
          ],
          "parameters": [
            "analysis",
            "include_ranges",
            "goals"
          ],
          "decorators": []
        },
        {
          "name": "_compute_file_hash",
          "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 SHA-256 \u0445\u044d\u0448 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            339,
            345
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            347,
            402
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_setup_analyzer",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
          "line_range": [
            28,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cleanup",
          "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
          "line_range": [
            68,
            72
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_project",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            74,
            125
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_fallback_analysis",
          "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            127,
            201
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GoAnalyzer",
          "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 Go \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432",
          "line_range": [
            21,
            201
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_setup_analyzer",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
              "line_range": [
                28,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cleanup",
              "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
              "line_range": [
                68,
                72
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_project",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
              "line_range": [
                74,
                125
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_fallback_analysis",
              "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                127,
                201
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "_setup_analyzer": [
          "Path",
          "subprocess.run",
          "analyzer_source.read_text",
          "tempfile.mkdtemp",
          "analyzer_file.write_text",
          "str",
          "logging.warning"
        ],
        "_cleanup": [
          "Path",
          "shutil.rmtree"
        ],
        "analyze_project": [
          "self._fallback_analysis",
          "subprocess.run",
          "self._cleanup",
          "logging.error",
          "json.loads",
          "self._setup_analyzer",
          "logging.warning",
          "logging.info"
        ],
        "_fallback_analysis": [
          "Path",
          "go_mod_path.read_text",
          "set",
          "line.split",
          "file_path.read_text",
          "packages.add",
          "sorted",
          "go_mod_path.exists",
          "content.split",
          "str",
          "len",
          "line.startswith",
          "logging.warning",
          "logging.info",
          "line.strip",
          "list",
          "file_path.relative_to"
        ],
        "convert_to_llmstruct_format": [
          "struct.get",
          "sum",
          "_compute_file_hash",
          "analysis.get",
          "classes.append",
          "fn.get",
          "path.endswith",
          "str",
          "functions.append",
          "file_data.get",
          "iface.get",
          "modules.append",
          "module.get",
          "path.replace",
          "len",
          "toc.append",
          "uuid.uuid4"
        ],
        "_compute_file_hash": [
          "hashlib.sha256",
          "f.read",
          "open"
        ],
        "main": [
          "Path",
          "argparse.ArgumentParser",
          "print",
          "GoAnalyzer",
          "result.get",
          "convert_to_llmstruct_format",
          "stats.get",
          "analyzer.analyze_project",
          "parser.parse_args",
          "json.dumps",
          "sys.exit",
          "len",
          "f.write",
          "parser.add_argument",
          "traceback.print_exc",
          "open"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "subprocess",
        "sys",
        "tempfile",
        "traceback",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "91b0fd73-38fc-4934-8bdf-fedf15df1dcf"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            9,
            13
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": [
            15,
            20
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": [
            22,
            41
          ],
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": [
            43,
            124
          ],
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": [
            8,
            124
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                9,
                13
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": [
                15,
                20
              ],
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": [
                22,
                41
              ],
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": [
                43,
                124
              ],
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "hashlib.sha256",
          "f.read",
          "open"
        ],
        "compute_file_metadata": [
          "sum",
          "os.stat",
          "self.file_hash",
          "open"
        ],
        "parse_module": [
          "esprima.parseModule",
          "self.compute_file_metadata",
          "str",
          "f.read",
          "open"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "337ac45e-7a6b-48c8-8b80-42d6a18fbadf"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": [
            13,
            20
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content.",
          "line_range": [
            72,
            79
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data.",
          "line_range": [
            82,
            154
          ],
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            26,
            29
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": [
            31,
            35
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": [
            37,
            43
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": [
            45,
            50
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": [
            52,
            57
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": [
            59,
            69
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": [
            23,
            69
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                29
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": [
                37,
                43
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": [
                45,
                50
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": [
                52,
                57
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": [
                59,
                69
              ],
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_AsyncFunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "compute_file_hash": [
          "hashlib.sha256",
          "logging.error",
          "f.read",
          "open"
        ],
        "analyze_module": [
          "Path",
          "ast.unparse",
          "ast.parse",
          "list",
          "logging.error",
          "isinstance",
          "sorted",
          "visitor.visit",
          "classes.append",
          "str",
          "infer_category",
          "CallVisitor",
          "functions.append",
          "compute_file_hash",
          "ast.walk",
          "f.read",
          "ast.get_docstring",
          "open"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "80cdd765-c5f5-49f1-b3d6-9e32d8b181d3"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "javascript_parser"
      ],
      "hash": null,
      "artifact_id": "bec13e04-3527-4f00-8a0c-4f5c1c35a1cf"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": [
            6,
            8
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": [
            11,
            13
          ],
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "3ecb7721-c352-44c4-9a3c-ab50e7a29a76"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": [
            6,
            9
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": [
            15,
            17
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": [
            12,
            17
          ],
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": [
                15,
                17
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "utils.helper",
          "print"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": null,
      "artifact_id": "8e51b349-e476-4b39-8b8e-0b2a05c98d5d"
    },
    {
      "module_id": "examples.telegram_bot.test_bot",
      "path": "examples/telegram_bot/test_bot.py",
      "category": "test",
      "module_doc": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430 \u0431\u0435\u0437 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e Telegram",
      "functions": [
        {
          "name": "test_bot_functions",
          "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0431\u043e\u0442\u0430",
          "line_range": [
            15,
            98
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_api_status",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 API",
          "line_range": [
            100,
            119
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "mock_send_message",
          "docstring": "",
          "line_range": [
            83,
            85
          ],
          "parameters": [
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "test_commands_only",
          "docstring": "",
          "line_range": [
            136,
            142
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_bot_functions": [
          "print",
          "bot.execute_command",
          "len",
          "LLMStructTelegramBot",
          "bot.chat_with_llm"
        ],
        "mock_send_message": [
          "len",
          "print"
        ],
        "check_api_status": [
          "client.get",
          "LLMStructTelegramBot",
          "print",
          "httpx.AsyncClient"
        ],
        "test_commands_only": [
          "len",
          "bot.execute_command",
          "LLMStructTelegramBot",
          "print"
        ]
      },
      "dependencies": [
        "LLMStructTelegramBot",
        "asyncio",
        "bot",
        "httpx",
        "os",
        "sys"
      ],
      "hash": null,
      "artifact_id": "b1654cf3-430d-4d6f-a5e4-f52212ce38ac"
    },
    {
      "module_id": "integrations.telegram_bot.test_bot",
      "path": "integrations/telegram_bot/test_bot.py",
      "category": "test",
      "module_doc": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430 \u0431\u0435\u0437 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e Telegram",
      "functions": [
        {
          "name": "test_bot_functions",
          "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0431\u043e\u0442\u0430",
          "line_range": [
            15,
            98
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_api_status",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 API",
          "line_range": [
            100,
            119
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "mock_send_message",
          "docstring": "",
          "line_range": [
            83,
            85
          ],
          "parameters": [
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "test_commands_only",
          "docstring": "",
          "line_range": [
            136,
            142
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_bot_functions": [
          "print",
          "bot.execute_command",
          "len",
          "LLMStructTelegramBot",
          "bot.chat_with_llm"
        ],
        "mock_send_message": [
          "len",
          "print"
        ],
        "check_api_status": [
          "client.get",
          "LLMStructTelegramBot",
          "print",
          "httpx.AsyncClient"
        ],
        "test_commands_only": [
          "len",
          "bot.execute_command",
          "LLMStructTelegramBot",
          "print"
        ]
      },
      "dependencies": [
        "LLMStructTelegramBot",
        "asyncio",
        "bot",
        "httpx",
        "os",
        "sys"
      ],
      "hash": null,
      "artifact_id": "e5c8b801-6270-4721-a0f2-518c9274ae6f"
    },
    {
      "module_id": "integrations.telegram_bot.mp002_progress_bot",
      "path": "integrations/telegram_bot/mp002_progress_bot.py",
      "category": "core",
      "module_doc": "MP-002A Progress Bot - Telegram \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Smart Wrapper \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\n\u042d\u0442\u0430\u043f\u043d\u0430\u044f \u043e\u0442\u0447\u0435\u0442\u043d\u043e\u0441\u0442\u044c, \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430, \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435",
      "functions": [
        {
          "name": "start_mp002_bot",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a MP-002A \u0431\u043e\u0442\u0430",
          "line_range": [
            431,
            452
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            23,
            82
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "init_progress_tracking",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            84,
            109
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_progress",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            111,
            118
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_progress",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            120,
            123
          ],
          "parameters": [
            "self",
            "progress"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
          "line_range": [
            125,
            139
          ],
          "parameters": [
            "self",
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "report_phase_start",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435 \u0444\u0430\u0437\u044b",
          "line_range": [
            141,
            172
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id"
          ],
          "decorators": []
        },
        {
          "name": "report_task_completion",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            174,
            207
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id",
            "task_description",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "request_phase_approval",
          "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441 \u043e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0430\u0437\u044b",
          "line_range": [
            209,
            232
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id"
          ],
          "decorators": []
        },
        {
          "name": "report_issue",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0435",
          "line_range": [
            234,
            264
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id",
            "issue_description"
          ],
          "decorators": []
        },
        {
          "name": "get_overall_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            266,
            307
          ],
          "parameters": [
            "self",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            309,
            326
          ],
          "parameters": [
            "self",
            "update"
          ],
          "decorators": []
        },
        {
          "name": "handle_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            328,
            349
          ],
          "parameters": [
            "self",
            "chat_id",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "send_welcome",
          "docstring": "\u041f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
          "line_range": [
            351,
            367
          ],
          "parameters": [
            "self",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "approve_phase",
          "docstring": "\u041e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u0435 \u0444\u0430\u0437\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c",
          "line_range": [
            369,
            413
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id"
          ],
          "decorators": []
        },
        {
          "name": "handle_feedback",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043a\u0430\u043a feedback",
          "line_range": [
            415,
            427
          ],
          "parameters": [
            "self",
            "chat_id",
            "text"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "MP002ProgressBot",
          "docstring": "Telegram \u0431\u043e\u0442 \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 MP-002A Smart Wrapper",
          "line_range": [
            18,
            427
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                23,
                82
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "init_progress_tracking",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                84,
                109
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_progress",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                111,
                118
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_progress",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                120,
                123
              ],
              "parameters": [
                "self",
                "progress"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
              "line_range": [
                125,
                139
              ],
              "parameters": [
                "self",
                "chat_id",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "report_phase_start",
              "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435 \u0444\u0430\u0437\u044b",
              "line_range": [
                141,
                172
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id"
              ]
            },
            {
              "name": "report_task_completion",
              "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                174,
                207
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id",
                "task_description",
                "details"
              ]
            },
            {
              "name": "request_phase_approval",
              "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441 \u043e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0430\u0437\u044b",
              "line_range": [
                209,
                232
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id"
              ]
            },
            {
              "name": "report_issue",
              "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0435",
              "line_range": [
                234,
                264
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id",
                "issue_description"
              ]
            },
            {
              "name": "get_overall_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                266,
                307
              ],
              "parameters": [
                "self",
                "chat_id"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                309,
                326
              ],
              "parameters": [
                "self",
                "update"
              ]
            },
            {
              "name": "handle_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                328,
                349
              ],
              "parameters": [
                "self",
                "chat_id",
                "command"
              ]
            },
            {
              "name": "send_welcome",
              "docstring": "\u041f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
              "line_range": [
                351,
                367
              ],
              "parameters": [
                "self",
                "chat_id"
              ]
            },
            {
              "name": "approve_phase",
              "docstring": "\u041e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u0435 \u0444\u0430\u0437\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c",
              "line_range": [
                369,
                413
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id"
              ]
            },
            {
              "name": "handle_feedback",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043a\u0430\u043a feedback",
              "line_range": [
                415,
                427
              ],
              "parameters": [
                "self",
                "chat_id",
                "text"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self.init_progress_tracking"
        ],
        "init_progress_tracking": [
          "json.dump",
          "open",
          "datetime.now"
        ],
        "load_progress": [
          "self.load_progress",
          "json.load",
          "self.init_progress_tracking",
          "open"
        ],
        "save_progress": [
          "json.dump",
          "open"
        ],
        "send_message": [
          "client.post",
          "print",
          "httpx.AsyncClient",
          "response.json",
          "str"
        ],
        "report_phase_start": [
          "self.load_progress",
          "self.send_message",
          "self.save_progress",
          "datetime.now",
          "phase_id.upper",
          "enumerate"
        ],
        "report_task_completion": [
          "self.request_phase_approval",
          "self.load_progress",
          "self.send_message",
          "self.save_progress",
          "datetime.now",
          "len"
        ],
        "request_phase_approval": [
          "phase_id.upper",
          "enumerate",
          "self.send_message"
        ],
        "report_issue": [
          "self.save_progress",
          "self.send_message",
          "self.load_progress",
          "datetime.now"
        ],
        "get_overall_status": [
          "self.load_progress",
          "self.send_message",
          "phase_data.get",
          "progress.get",
          "len"
        ],
        "handle_message": [
          "message.get",
          "self.handle_command",
          "text.startswith",
          "self.handle_feedback"
        ],
        "handle_command": [
          "self.continue_work",
          "self.show_phase_details",
          "self.send_message",
          "self.report_user_issues",
          "command.split",
          "self.show_help",
          "len",
          "self.approve_phase",
          "self.send_welcome",
          "self.get_overall_status"
        ],
        "send_welcome": [
          "self.send_message"
        ],
        "approve_phase": [
          "self.load_progress",
          "self.send_message",
          "self.save_progress",
          "datetime.now",
          "self.report_phase_start",
          "phase_id.upper",
          "len",
          "phases_list.index",
          "list"
        ],
        "handle_feedback": [
          "self.load_progress",
          "self.send_message",
          "self.save_progress",
          "datetime.now",
          "progress.get"
        ],
        "start_mp002_bot": [
          "os.getenv",
          "MP002ProgressBot",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "asyncio",
        "datetime",
        "httpx",
        "json",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "4ce3a58e-21db-4bc1-a3d2-95f5d705f829"
    },
    {
      "module_id": "integrations.telegram_bot.simple_bot",
      "path": "integrations/telegram_bot/simple_bot.py",
      "category": "core",
      "module_doc": "\u0423\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f LLMStruct \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\n\u0411\u0435\u0437 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439, \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            360,
            371
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            39,
            45
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            47,
            55
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            57,
            73
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "help_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
          "line_range": [
            75,
            93
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
          "line_range": [
            95,
            154
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "metrics_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics",
          "line_range": [
            156,
            188
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "struct_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /struct",
          "line_range": [
            190,
            223
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "parse_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /parse",
          "line_range": [
            225,
            270
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            272,
            321
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
          "line_range": [
            323,
            358
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "SimpleLLMStructBot",
          "docstring": "\u0423\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f LLMStruct",
          "line_range": [
            36,
            358
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                39,
                45
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                47,
                55
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                57,
                73
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "help_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
              "line_range": [
                75,
                93
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
              "line_range": [
                95,
                154
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "metrics_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics",
              "line_range": [
                156,
                188
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "struct_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /struct",
              "line_range": [
                190,
                223
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "parse_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /parse",
              "line_range": [
                225,
                270
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                272,
                321
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
              "line_range": [
                323,
                358
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.setup_handlers",
          "track_workflow_event",
          "Application.builder"
        ],
        "setup_handlers": [
          "MessageHandler",
          "CommandHandler"
        ],
        "start_command": [
          "track_workflow_event"
        ],
        "help_command": [
          "track_workflow_event"
        ],
        "status_command": [
          "Path",
          "struct_file.stat",
          "tracker.get_session_summary",
          "requests.get",
          "struct_file.exists",
          "get_metrics_tracker",
          "str",
          "time.strftime",
          "track_task_start",
          "track_task_complete",
          "track_workflow_event",
          "int",
          "time.time"
        ],
        "metrics_command": [
          "track_workflow_event",
          "get_metrics_tracker",
          "tracker.get_session_summary"
        ],
        "struct_command": [
          "Path",
          "struct_file.stat",
          "time.ctime",
          "struct_file.exists",
          "track_workflow_event",
          "time.time"
        ],
        "parse_command": [
          "subprocess.run",
          "os.chdir",
          "str",
          "track_task_complete",
          "track_task_start",
          "track_workflow_event",
          "int",
          "time.time"
        ],
        "handle_message": [
          "self.metrics_command",
          "self.struct_command",
          "user_message.split",
          "get_metrics_tracker",
          "user_message.lower",
          "response.split",
          "self.status_command",
          "str",
          "track_task_complete",
          "track_task_start",
          "len",
          "tracker.track_token_usage",
          "track_workflow_event",
          "int",
          "time.time"
        ],
        "run_sync": [
          "BotCommand",
          "loop.run_until_complete",
          "logger.info",
          "get_metrics_tracker",
          "asyncio.set_event_loop",
          "tracker.save_session",
          "str",
          "logger.error",
          "track_workflow_event",
          "asyncio.new_event_loop"
        ],
        "main": [
          "SimpleLLMStructBot",
          "os.getenv",
          "bot.run_sync",
          "print"
        ]
      },
      "dependencies": [
        "Application",
        "BotCommand",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "Optional",
        "Path",
        "Update",
        "asyncio",
        "filters",
        "get_metrics_tracker",
        "json",
        "logging",
        "os",
        "pathlib",
        "requests",
        "src.llmstruct.metrics_tracker",
        "subprocess",
        "sys",
        "telegram",
        "telegram.ext",
        "time",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b0c3d394-792e-47de-b9dc-b49b4cf497be"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            18,
            22
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            24,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            44,
            64
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            66,
            79
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            81,
            94
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            96,
            98
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            17,
            98
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                18,
                22
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                24,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                44,
                64
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                66,
                79
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                81,
                94
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                96,
                98
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "sqlite3.connect",
          "self.create_tables"
        ],
        "create_tables": [],
        "cache_json": [
          "Path",
          "logging.error",
          "content.encode",
          "json_file.exists",
          "hashlib.sha256",
          "str",
          "json.dumps",
          "logging.info",
          "f.read",
          "open"
        ],
        "get_metadata": [
          "cursor.fetchone",
          "json.loads"
        ],
        "get_full_json": [
          "logging.error",
          "cursor.fetchone",
          "json.load",
          "open"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "658e191a-ccb6-4515-b398-7b23633bc8e5"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            17,
            29
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            31,
            72
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "isinstance",
          "filtered.append",
          "data.get",
          "item.get"
        ],
        "select_json": [
          "Path",
          "json.load",
          "logging.error",
          "json_file.exists",
          "path.append",
          "filter_json",
          "f.seek",
          "prefix.startswith",
          "current_item.get",
          "ijson.parse",
          "open",
          "filtered.append"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "a4f67ec9-bc17-4f68-b500-62b953ffead5"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": [
            17,
            35
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            37,
            74
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "struct.get",
          "prompt.lower",
          "module.get",
          "filter_json",
          "any"
        ],
        "attach_to_llm_request": [
          "Path",
          "prompt.lower",
          "select_json",
          "logging.error",
          "cache.get_metadata",
          "cache.cache_json",
          "context_file.exists",
          "filter_json",
          "logging.info",
          "filter_struct",
          "json.dumps",
          "cache.get_full_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "83459274-1656-4f6a-840f-c55c4789811a"
    },
    {
      "module_id": "docs.test_self_run",
      "path": "docs/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": [
            15,
            22
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": [
            24,
            34
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": [
            36,
            48
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": [
            50,
            67
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": [
            69,
            73
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "str",
          "json.dump",
          "select_json",
          "open"
        ],
        "test_cache_json": [
          "json.dump",
          "cache.get_metadata",
          "str",
          "cache.cache_json",
          "JSONCache",
          "cache.close",
          "cache.get_full_json",
          "open"
        ],
        "test_attach_to_llm_request_init_json": [
          "json.dump",
          "str",
          "JSONCache",
          "cache.close",
          "attach_to_llm_request",
          "open"
        ],
        "test_attach_to_llm_request_missing_file": [
          "str",
          "attach_to_llm_request"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "attach_to_llm_request",
        "filter_json",
        "filter_struct",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "pathlib",
        "pytest",
        "select_json"
      ],
      "hash": null,
      "artifact_id": "beeae84f-40d6-43f3-a386-99781d54a265"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            26,
            36
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            38,
            47
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            49,
            58
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": [
            60,
            74
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            76,
            83
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            85,
            195
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            197,
            237
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            239,
            260
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            262,
            264
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            266,
            268
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            270,
            272
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            274,
            334
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "logging.error",
          "gitignore_path.open",
          "gitignore_path.exists",
          "line.startswith",
          "line.strip"
        ],
        "load_config": [
          "Path",
          "logging.error",
          "config_path\u30aa\u30fc\u30d7\u30f3",
          "toml.load",
          "config_path.exists"
        ],
        "read_file_content": [
          "Path",
          "logging.error",
          "f.read",
          "path.is_file",
          "path.open"
        ],
        "write_to_file": [
          "Path",
          "file_path.open",
          "logging.error",
          "file_path.exists",
          "str",
          "logging.warning",
          "logging.info",
          "f.write",
          "base_path.mkdir"
        ],
        "parse_files_from_response": [
          "filename.strip",
          "content.strip",
          "re.findall",
          "files.append"
        ],
        "interactive": [
          "files_to_write.append",
          "JSONCache",
          "cache.close",
          "json.dumps",
          "user_input.lower",
          "attach_to_llm_request",
          "scan_match.group",
          "input",
          "parse",
          "logging.error",
          "re.search",
          "read_file_content",
          "write_match.group",
          "parse_files_from_response",
          "logging.warning",
          "get_folder_structure",
          "Path",
          "client.query",
          "write_to_file",
          "write_dir.startswith",
          "print",
          "os.listdir",
          "sorted",
          "LLMClient",
          "load_gitignore"
        ],
        "parse": [
          "Path",
          "config.get",
          "logging.error",
          "load_config",
          "json.dump",
          "cache.cache_json",
          "JSONCache",
          "cache.close",
          "logging.warning",
          "load_gitignore",
          "logging.info",
          "generate_json"
        ],
        "query": [
          "Path",
          "client.query",
          "logging.error",
          "json.dump",
          "JSONCache",
          "cache.close",
          "LLMClient",
          "logging.info"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "query",
          "argparse.ArgumentParser",
          "dogfood_parser.add_argument",
          "interactive_parser.add_argument",
          "parse",
          "parse_parser.add_argument",
          "asyncio.run",
          "dogfood",
          "parser.add_subparsers",
          "context",
          "review",
          "query_parser.add_argument",
          "parser.parse_args",
          "review_parser.add_argument",
          "context_parser.add_argument",
          "subparsers.add_parser",
          "interactive"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "509552ae-2ae3-43fe-a798-608c6eaa16a4"
    },
    {
      "module_id": "tests.test_self_run",
      "path": "tests/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": [
            14,
            21
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": [
            24,
            34
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": [
            37,
            49
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": [
            52,
            69
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": [
            72,
            76
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "str",
          "json.dump",
          "select_json",
          "open"
        ],
        "test_cache_json": [
          "json.dump",
          "cache.get_metadata",
          "str",
          "cache.cache_json",
          "JSONCache",
          "cache.close",
          "cache.get_full_json",
          "open"
        ],
        "test_attach_to_llm_request_init_json": [
          "json.dump",
          "str",
          "JSONCache",
          "cache.close",
          "attach_to_llm_request",
          "open"
        ],
        "test_attach_to_llm_request_missing_file": [
          "str",
          "attach_to_llm_request"
        ]
      },
      "dependencies": [
        "JSONCache",
        "attach_to_llm_request",
        "filter_json",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "select_json"
      ],
      "hash": null,
      "artifact_id": "44f8cbeb-a1cc-4eb3-a7f4-4d84168fbfce"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "65b9070c-1774-4845-99ca-5580fc69ecff"
    },
    {
      "module_id": "cursor_workflow_integration.scripts.install_ai_integration",
      "path": "cursor_workflow_integration/scripts/install_ai_integration.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor\n\u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u043b\u044e\u0431\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
      "functions": [
        {
          "name": "install_ai_integration",
          "docstring": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u0432 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            12,
            58
          ],
          "parameters": [
            "target_project"
          ],
          "decorators": []
        },
        {
          "name": "adapt_cursorrules",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c .cursorrules \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            60,
            99
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "adapt_auto_init",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c auto_init_ai_system.py \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            101,
            123
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "create_simplified_auto_init",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e auto_init \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0431\u0435\u0437 llmstruct",
          "line_range": [
            125,
            189
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438",
          "line_range": [
            191,
            207
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "install_ai_integration": [
          "Path",
          "print",
          "adapt_auto_init",
          "source_path.exists",
          "adapt_cursorrules",
          "shutil.copy2",
          "target_root.exists",
          "vscode_dir.mkdir"
        ],
        "adapt_cursorrules": [
          "content.replace",
          "print",
          "cursorrules_path.write_text",
          "cursorrules_path.read_text",
          "cursorrules_path.exists",
          "len",
          "list",
          "project_root.rglob"
        ],
        "adapt_auto_init": [
          "content.replace",
          "print",
          "auto_init_path.write_text",
          "create_simplified_auto_init",
          "auto_init_path.read_text",
          "auto_init_path.exists"
        ],
        "create_simplified_auto_init": [],
        "main": [
          "install_ai_integration",
          "len",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "shutil",
        "sys"
      ],
      "hash": null,
      "artifact_id": "cf618c3b-9993-4465-9f8a-fcc70f16ad18"
    },
    {
      "module_id": "cursor_workflow_integration.files.auto_init_ai_system",
      "path": "cursor_workflow_integration/files/auto_init_ai_system.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor\n\u042d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439\nENHANCED: \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 workflow \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439, \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438 \u0438 context tags",
      "functions": [
        {
          "name": "auto_initialize_ai_system",
          "docstring": "\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            26,
            90
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_current_workflow_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 workflow \u0441\u0435\u0441\u0441\u0438\u0438 \u0438 workspace mode",
          "line_range": [
            92,
            128
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_workflow_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 workflow \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            130,
            178
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "switch_workspace_mode",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c workspace mode (\u0434\u043b\u044f CLI integration)",
          "line_range": [
            180,
            196
          ],
          "parameters": [
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            198,
            208
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "search_ai_capabilities",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u0445 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b (Enhanced with caching optimization)",
          "line_range": [
            210,
            271
          ],
          "parameters": [
            "query"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f AI \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435",
          "line_range": [
            273,
            304
          ],
          "parameters": [
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "get_epic_sessions_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u0441\u0435\u0445 \u044d\u043f\u0438\u043a-\u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            306,
            355
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "create_epic_session",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            357,
            378
          ],
          "parameters": [
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "switch_to_session",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            380,
            398
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "get_available_sessions",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            400,
            461
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "session_management_commands",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438",
          "line_range": [
            463,
            489
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "auto_initialize_ai_system": [
          "Path",
          "f.exists",
          "print",
          "logger.info",
          "str",
          "src_path.exists",
          "logger.error",
          "AI_CAPABILITIES.discover_all_capabilities",
          "len",
          "get_current_workflow_context",
          "SystemCapabilityDiscovery"
        ],
        "get_current_workflow_context": [
          "Path",
          "workspace_file.exists",
          "json.load",
          "logger.info",
          "session_file.exists",
          "roadmap_file.exists",
          "roadmap.get",
          "epic_data.get",
          "session.get",
          "logger.warning",
          "workspace.get",
          "open"
        ],
        "get_workflow_status": [
          "Path",
          "auto_initialize_ai_system",
          "json.load",
          "context.get",
          "roadmap_file.exists",
          "e.get",
          "roadmap.get",
          "str",
          "WorkspaceStateManager",
          "logger.error",
          "get_current_workflow_context",
          "len",
          "open"
        ],
        "switch_workspace_mode": [
          "Path",
          "ws.set_mode",
          "logger.info",
          "str",
          "WorkspaceStateManager",
          "logger.error",
          "get_current_workflow_context"
        ],
        "get_ai_status": [
          "auto_initialize_ai_system",
          "get_workflow_status",
          "AI_STATUS.get",
          "AI_CAPABILITIES.get_enhanced_capabilities_summary"
        ],
        "search_ai_capabilities": [
          "Path",
          "struct_file.stat",
          "auto_initialize_ai_system",
          "json.load",
          "logger.info",
          "json.dump",
          "cache_file.exists",
          "data.get",
          "cache_file.stat",
          "logger.error",
          "module.get",
          "func.get",
          "len",
          "results.append",
          "query.lower",
          "open"
        ],
        "get_ai_context": [
          "auto_initialize_ai_system",
          "logger.error",
          "AI_CAPABILITIES.discover_all_capabilities",
          "json.dumps",
          "get_current_workflow_context",
          "len"
        ],
        "get_epic_sessions_status": [
          "Path",
          "json.load",
          "roadmap_file.exists",
          "sessions_file.exists",
          "roadmap.get",
          "status_lines.append",
          "epic_data.get",
          "logger.error",
          "session.get",
          "open"
        ],
        "create_epic_session": [
          "Path",
          "epic_id.split",
          "logger.info",
          "os.system",
          "logger.error"
        ],
        "switch_to_session": [
          "Path",
          "logger.info",
          "os.system",
          "logger.error",
          "get_current_workflow_context"
        ],
        "get_available_sessions": [
          "Path",
          "current_data.get",
          "json.load",
          "roadmap_file.exists",
          "sessions_file.exists",
          "roadmap.get",
          "current_session_file.exists",
          "epic_data.get",
          "logger.error",
          "sessions_list.append",
          "session.get",
          "sessions_data.get",
          "open"
        ],
        "session_management_commands": []
      },
      "dependencies": [
        "Path",
        "SystemCapabilityDiscovery",
        "WorkspaceStateManager",
        "datetime",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.workspace",
        "logging",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "68381d85-c434-46b7-be9c-328149dbf428"
    }
  ]
}