{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Python project analysis for llmstruct",
    "language": "python",
    "version": "1.0.0",
    "authors": [
      {
        "name": "Universal Converter",
        "tool": "llmstruct-universal-converter"
      }
    ],
    "goals": [],
    "stats": {
      "modules_count": 180,
      "functions_count": 973,
      "classes_count": 89,
      "total_lines": 0
    },
    "converter_config": {
      "include_ranges": true,
      "include_hashes": true,
      "include_tests": true
    }
  },
  "toc": [
    {
      "module_id": "test_duplication_analysis",
      "path": "test_duplication_analysis.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test script for analyzing function duplication using struct.json"
    },
    {
      "module_id": "test_cli_integration",
      "path": "test_cli_integration.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test script for CLI integration with new commands"
    },
    {
      "module_id": "test_final_validation",
      "path": "test_final_validation.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "Final validation test for AI self-awareness system.\nTests all components after struct.json and cache"
    },
    {
      "module_id": "test_efficiency",
      "path": "test_efficiency.py",
      "category": "test",
      "functions": 12,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "start_development",
      "path": "start_development.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "LLMStruct Development Startup Script\nConvenient one-command startup for daily development workflow.\n"
    },
    {
      "module_id": "test_cli",
      "path": "test_cli.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "run_ai_diagnostics",
      "path": "run_ai_diagnostics.py",
      "category": "core",
      "functions": 19,
      "classes": 0,
      "summary": "Comprehensive AI Self-Awareness Diagnostics Runner\nEnhanced with Cursor integration testing, multi-A"
    },
    {
      "module_id": "test_ai_cli_integration",
      "path": "test_ai_cli_integration.py",
      "category": "test",
      "functions": 14,
      "classes": 2,
      "summary": "AI CLI Integration Testing Suite\n\nAdvanced testing framework to validate how AI agents can populate "
    },
    {
      "module_id": "collect_json",
      "path": "collect_json.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "test_audit",
      "path": "test_audit.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test script for audit functionality."
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "debug_terminal",
      "path": "debug_terminal.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Debug Terminal Script - Fallback for when terminal output is not visible\nSaves all output to files f"
    },
    {
      "module_id": "test_strict_mode",
      "path": "test_strict_mode.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Тест [strict] режима для экстренной проверки"
    },
    {
      "module_id": "test_debug_analysis",
      "path": "test_debug_analysis.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Quick debug test for duplication analysis"
    },
    {
      "module_id": "final_system_check",
      "path": "final_system_check.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final System Status Check - LLMStruct Modular CLI Integration\nComprehensive validation of all comple"
    },
    {
      "module_id": "monitor_system",
      "path": "monitor_system.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "System Monitor - Continuous logging for debugging terminal issues\nRuns in background and logs system"
    },
    {
      "module_id": "board_cli",
      "path": "board_cli.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "CLI Kanban Board for llmstruct tasks and ideas\n- Reads data/tasks.json and data/ideas.json\n- Shows b"
    },
    {
      "module_id": "test_ai_cli_debug",
      "path": "test_ai_cli_debug.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "Simple test for AI CLI Integration - Debug Version"
    },
    {
      "module_id": "final_system_validation",
      "path": "final_system_validation.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final system validation script for LLMStruct Modular CLI Integration"
    },
    {
      "module_id": "test_enhanced_ai_awareness",
      "path": "test_enhanced_ai_awareness.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test script for AI Self-Awareness Enhancement with Unused Function Integration"
    },
    {
      "module_id": "force_ai_integration",
      "path": "force_ai_integration.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Force AI Integration Script\nInitializes middleware and monitoring to ensure AI uses llmstruct system"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "JSON Schema Validation Script for llmstruct\nValidates all enhanced JSON files against their appropri"
    },
    {
      "module_id": "test_context_orchestration",
      "path": "test_context_orchestration.py",
      "category": "test",
      "functions": 23,
      "classes": 2,
      "summary": "LLM Context Orchestration Testing Suite\n\nComprehensive testing framework for validating context mode"
    },
    {
      "module_id": "test_export",
      "path": "test_export.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "test_modular_cli",
      "path": "test_modular_cli.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "Test script for modular CLI structure"
    },
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "Session Schema Validation Script for llmstruct\nValidates session management JSON files against their"
    },
    {
      "module_id": "test_ai_cli_simple",
      "path": "test_ai_cli_simple.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Simple AI CLI Integration Test\n\nQuick validation of AI agent CLI population capabilities."
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "test_transpiler_demo",
      "path": "test_transpiler_demo.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "Demo script for AI Transpiler\nCreates a small Python project and transpiles it to Go"
    },
    {
      "module_id": "test_cli_demo",
      "path": "test_cli_demo.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Quick CLI test to demonstrate new commands"
    },
    {
      "module_id": "test_ai_bridge",
      "path": "test_ai_bridge.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "Test AI Bridge functionality - bypassing Cursor terminal issues"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project."
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project."
    },
    {
      "module_id": "docs.test_self_run",
      "path": "docs/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": ""
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp.quick_restore",
      "path": "temp/quick_restore.py",
      "category": "core",
      "functions": 7,
      "classes": 0,
      "summary": "Quick AI Context Restoration Script\nRun this after Cursor restart to verify system state and get imm"
    },
    {
      "module_id": ".personal.commercial_planning",
      "path": ".personal/commercial_planning.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "src.llmstruct.workflow_orchestrator",
      "path": "src/llmstruct/workflow_orchestrator.py",
      "category": "core",
      "functions": 27,
      "classes": 5,
      "summary": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture\nExtends CopilotCont"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "CLI configuration management."
    },
    {
      "module_id": "src.llmstruct.ai_self_monitor",
      "path": "src/llmstruct/ai_self_monitor.py",
      "category": "core",
      "functions": 16,
      "classes": 4,
      "summary": "AI Self-Monitoring System\nTracks AI usage patterns and ensures proper llmstruct integration."
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": ""
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "functions": 22,
      "classes": 1,
      "summary": "CLI command processing and handlers."
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "functions": 20,
      "classes": 5,
      "summary": "Smart Context Orchestration for LLMStruct\nOptimizes context loading for different LLM usage scenario"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "src.llmstruct.ai_cli_integration",
      "path": "src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "functions": 14,
      "classes": 1,
      "summary": "AI Self-Awareness CLI Integration Module\nIntegrates unused CLI functions into the AI self-awareness "
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "CLI utility functions."
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "functions": 26,
      "classes": 5,
      "summary": "LLMStruct Copilot Integration Module\nProvides context-aware development assistance with hybrid copil"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "GitHub visualization/graph feature (gh-view-v1)\nExport consolidated tasks/ideas from JSON files to G"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": ""
    },
    {
      "module_id": "src.llmstruct.ai_workflow_middleware",
      "path": "src/llmstruct/ai_workflow_middleware.py",
      "category": "core",
      "functions": 22,
      "classes": 4,
      "summary": "AI Workflow Middleware - Forces AI Integration with LLMStruct\nIntercepts all AI requests and ensures"
    },
    {
      "module_id": "src.llmstruct.ai_self_awareness",
      "path": "src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "functions": 47,
      "classes": 8,
      "summary": "AI Self-Awareness Enhancement Module\nProvides comprehensive system introspection and capability disc"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": ""
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "src.llmstruct.cursor_ai_bridge",
      "path": "src/llmstruct/cursor_ai_bridge.py",
      "category": "core",
      "functions": 21,
      "classes": 1,
      "summary": "Cursor AI Bridge - API Layer for AI Assistant Integration\nProvides CLI and HTTP endpoints so Cursor "
    },
    {
      "module_id": "src.llmstruct.transpiler",
      "path": "src/llmstruct/transpiler.py",
      "category": "core",
      "functions": 10,
      "classes": 3,
      "summary": "AI-Powered Universal Transpiler\nConverts entire codebases from one language to another using LLM ana"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "functions": 18,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface."
    },
    {
      "module_id": "src.llmstruct.cursor_integration",
      "path": "src/llmstruct/cursor_integration.py",
      "category": "core",
      "functions": 22,
      "classes": 6,
      "summary": "Cursor IDE Integration Module\nProvides seamless integration between llmstruct AI capabilities and Cu"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Core CLI functionality and main loop."
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "functions": 20,
      "classes": 1,
      "summary": "Workspace State & Mode Management System\nEnhanced AI-Human Collaboration with Context Boundaries"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON."
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": ""
    },
    {
      "module_id": "src.llmstruct.parsers.universal_converter",
      "path": "src/llmstruct/parsers/universal_converter.py",
      "category": "core",
      "functions": 14,
      "classes": 3,
      "summary": "Universal Code Converter - Orchestrates all language parsers\nConverts any codebase to llmstruct JSON"
    },
    {
      "module_id": "src.llmstruct.parsers.go_analyzer",
      "path": "src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Универсальный Go анализатор для Docker контейнера\nИспользует правильные подходы: go/packages, go/ana"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": ""
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration."
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema."
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data."
    },
    {
      "module_id": "src.llmstruct.generators.go_json_generator",
      "path": "src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.test_cli_integration",
      "path": "temp_workfiles/test_cli_integration.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test script for CLI integration with new commands"
    },
    {
      "module_id": "temp_workfiles.run_duplicate_analysis",
      "path": "temp_workfiles/run_duplicate_analysis.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "Hash-based duplicate file detector for safe cleanup"
    },
    {
      "module_id": "temp_workfiles.test_cli",
      "path": "temp_workfiles/test_cli.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test script for the enhanced CLI functionality."
    },
    {
      "module_id": "temp_workfiles.duplicate_detector",
      "path": "temp_workfiles/duplicate_detector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "Hash-based duplicate file detector for safe cleanup\nIdentifies actual duplicates by content hash, no"
    },
    {
      "module_id": "temp_workfiles.struct_based_cleanup_analyzer_complete",
      "path": "temp_workfiles/struct_based_cleanup_analyzer_complete.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "Struct.json-based File Cleanup Analyzer\nUses the comprehensive struct.json to intelligently categori"
    },
    {
      "module_id": "temp_workfiles.final_system_check",
      "path": "temp_workfiles/final_system_check.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final System Status Check - LLMStruct Modular CLI Integration\nComprehensive validation of all comple"
    },
    {
      "module_id": "temp_workfiles.struct_based_cleanup_analyzer",
      "path": "temp_workfiles/struct_based_cleanup_analyzer.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "Struct.json-based File Cleanup Analyzer\nUses the comprehensive struct.json to intelligently categori"
    },
    {
      "module_id": "temp_workfiles.final_system_validation",
      "path": "temp_workfiles/final_system_validation.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final system validation script for LLMStruct Modular CLI Integration"
    },
    {
      "module_id": "temp_workfiles.test_modular_cli",
      "path": "temp_workfiles/test_modular_cli.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "Test script for modular CLI structure"
    },
    {
      "module_id": "temp_workfiles.test_cli_demo",
      "path": "temp_workfiles/test_cli_demo.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Quick CLI test to demonstrate new commands"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_self_run",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector (1).py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_self_run",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_cli.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files (1).py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_json_selector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli_parser",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli_parser.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cache.py",
      "category": "core",
      "functions": 7,
      "classes": 1,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_deploy_embedded_files",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_deploy_embedded_files.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.extract_artifacts",
      "path": "temp_workfiles/unsorted_mess/22.05.25/extract_artifacts.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.dumper",
      "path": "temp_workfiles/unsorted_mess/dump/dumper.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data."
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_utils",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project."
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ideas_tree",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ideas_tree.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "LLMStruct: A tool for generating JSON-based code structures for LLM integration.\n\nThis package provi"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency1",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency1.py",
      "category": "test",
      "functions": 7,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency.py",
      "category": "test",
      "functions": 6,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.grok",
      "path": "temp_workfiles/unsorted_mess/dump/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___main__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___main__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs (1).py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency (1)",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency (1).py",
      "category": "test",
      "functions": 9,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_engines",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_engines.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_config",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_config.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "Generate JSON for workspace based on user instructions template.\n\nCreates structure:\n- metadata with"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs (1).py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collector",
      "path": "temp_workfiles/unsorted_mess/dump/collector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs (1).py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.refactored_structure",
      "path": "temp_workfiles/unsorted_mess/dump/refactored_structure.py",
      "category": "core",
      "functions": 5,
      "classes": 3,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser (1).py",
      "category": "core",
      "functions": 4,
      "classes": 1,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_templates___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_templates___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration."
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end (1)",
      "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end (1).py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_main",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project."
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.filter_llmstruct_json",
      "path": "temp_workfiles/unsorted_mess/dump/filter_llmstruct_json.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_internal_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_internal_docs.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client (3)",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client (3).py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.tests___init__",
      "path": "temp_workfiles/unsorted_mess/dump/tests___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration."
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.check_docs",
      "path": "temp_workfiles/unsorted_mess/dump/check_docs.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.javascript_parser",
      "path": "temp_workfiles/unsorted_mess/dump/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.self_run",
      "path": "temp_workfiles/unsorted_mess/dump/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator (1).py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end",
      "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/python_parser.py",
      "category": "core",
      "functions": 6,
      "classes": 2,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON."
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli (1).py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency_proxybypass",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency_proxybypass.py",
      "category": "test",
      "functions": 8,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.scripts_setup_github",
      "path": "temp_workfiles/unsorted_mess/dump/scripts_setup_github.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__ (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__ (1).py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.cli",
      "path": "temp_workfiles/unsorted_mess/dump/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_validators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_validators___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema."
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct (1).py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "Generate JSON for workspace based on user instructions template.\n\nCreates structure:\n- metadata with"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_validator",
      "path": "temp_workfiles/unsorted_mess/dump/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.validate_json",
      "path": "temp_workfiles/unsorted_mess/dump/validate_json.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.clean.internal_cleaner",
      "path": "temp_workfiles/unsorted_mess/dump/clean/internal_cleaner.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.dev_utils.test_efficiency",
      "path": "temp_workfiles/dev_utils/test_efficiency.py",
      "category": "test",
      "functions": 12,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "temp_workfiles.dev_utils.test_audit",
      "path": "temp_workfiles/dev_utils/test_audit.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test script for audit functionality."
    },
    {
      "module_id": "bak.20250522_102827.scripts.collector",
      "path": "bak/20250522_102827/scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "bak.20250522_102827.scripts.validate_refs",
      "path": "bak/20250522_102827/scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "bak.20250522_102827.scripts.deploy_embedded_files",
      "path": "bak/20250522_102827/scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "bak.20250522_131121.scripts.collector",
      "path": "bak/20250522_131121/scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "bak.20250522_131121.scripts.validate_refs",
      "path": "bak/20250522_131121/scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "bak.20250522_131121.scripts.deploy_embedded_files",
      "path": "bak/20250522_131121/scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "sorting_workspace.consolidate_changelog",
      "path": "sorting_workspace/consolidate_changelog.py",
      "category": "core",
      "functions": 7,
      "classes": 1,
      "summary": "Changelog Consolidation Tool\nСобирает и подбивает чейнджлоги из разных источников"
    },
    {
      "module_id": "sorting_workspace.validate_project_state",
      "path": "sorting_workspace/validate_project_state.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "Project State Validator & Comparator\nОценивает текущее состояние проекта относительно отсортированны"
    },
    {
      "module_id": "sorting_workspace.sort_data",
      "path": "sorting_workspace/sort_data.py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "LLMStruct Data Sorting and Migration Tool\nАвтоматически сортирует барахло в structured JSON format"
    },
    {
      "module_id": "sorting_workspace.smart_consolidator",
      "path": "sorting_workspace/smart_consolidator.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Smart LLM-assisted consolidation script for inconsistent data dumps\nUses content analysis and patter"
    },
    {
      "module_id": "sorting_workspace.comprehensive_consolidator",
      "path": "sorting_workspace/comprehensive_consolidator.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "Comprehensive Data Consolidator for llmstruct\nProcesses unsorted JSON files and consolidates them in"
    },
    {
      "module_id": "sorting_workspace.debug_sort",
      "path": "sorting_workspace/debug_sort.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Debug version of sorting script to identify issues"
    },
    {
      "module_id": "sorting_workspace.manual_consolidator",
      "path": "sorting_workspace/manual_consolidator.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Manual consolidation script for llmstruct data sorting\nBypasses the automatic detection and directly"
    },
    {
      "module_id": "tests.test_self_run",
      "path": "tests/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration."
    },
    {
      "module_id": "scripts.collect_json",
      "path": "scripts/collect_json.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstr"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Automatic struct.json update script\nThis script automatically parses the project and updates struct."
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub "
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": ""
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "JSON Validation Script\nValidates JSON files against their respective schemas."
    }
  ],
  "modules": [
    {
      "module_id": "test_duplication_analysis",
      "path": "test_duplication_analysis.py",
      "category": "test",
      "module_doc": "Test script for analyzing function duplication using struct.json",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            13,
            111
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "arch_analysis.get",
          "WorkflowOrchestrator",
          "print",
          "enumerate",
          "struct_analysis.get",
          "analysis.get",
          "len",
          "r.get",
          "sorted",
          "orchestrator.analyze_codebase_for_duplicates",
          "duplicates.items",
          "complexity.get",
          "duplication_analysis.get",
          "context.get",
          "orchestrator.get_current_context",
          "stats.get",
          "module_dist.items"
        ]
      },
      "dependencies": [
        "WorkflowOrchestrator",
        "json",
        "llmstruct.workflow_orchestrator",
        "os",
        "sys"
      ],
      "hash": "16ea99ccb454ff32a06a06729c37b4987c735b188891df5671391bb895274cf6"
    },
    {
      "module_id": "test_cli_integration",
      "path": "test_cli_integration.py",
      "category": "test",
      "module_doc": "Test script for CLI integration with new commands",
      "functions": [
        {
          "name": "test_modular_cli_commands",
          "docstring": "Test new CLI commands integration",
          "line_range": [
            13,
            164
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_modular_cli_commands": [
          "int",
          "open",
          "print",
          "subprocess.run",
          "events_data.append",
          "os.makedirs",
          "os.stat",
          "create_cli_core",
          "json.dump",
          "json.load",
          "time.ctime",
          "time.time"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLICore",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "Path",
        "create_cli_core",
        "json",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_core",
        "llmstruct.cli_utils",
        "llmstruct.copilot",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": "cb07cac7298b34e98a1e4eebcfc32c4f1210622faebeb4979f498a8403cc0cfd"
    },
    {
      "module_id": "test_final_validation",
      "path": "test_final_validation.py",
      "category": "test",
      "module_doc": "Final validation test for AI self-awareness system.\nTests all components after struct.json and cache system fixes.",
      "functions": [
        {
          "name": "test_struct_validation",
          "docstring": "Test struct.json validation with correct structure.",
          "line_range": [
            15,
            40
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_cache_system",
          "docstring": "Test cache system with correct JSONCache methods.",
          "line_range": [
            42,
            72
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_ai_awareness_system",
          "docstring": "Test the full AI self-awareness system.",
          "line_range": [
            74,
            116
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_cli_integration",
          "docstring": "Test AI CLI integration.",
          "line_range": [
            118,
            143
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run complete validation test.",
          "line_range": [
            145,
            184
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_struct_validation": [
          "print",
          "list",
          "struct_data.keys",
          "Path",
          "json.load",
          "struct_file.exists",
          "open"
        ],
        "test_cache_system": [
          "JSONCache",
          "print",
          "cache.get_full_json",
          "retrieved.get",
          "cache.cache_json",
          "str",
          "Path",
          "time.time"
        ],
        "test_ai_awareness_system": [
          "print",
          "discovery.get_comprehensive_ai_status",
          "traceback.print_exc",
          "len",
          "SystemCapabilityDiscovery",
          "str",
          "discovery.get_enhanced_capabilities_summary",
          "Path",
          "discovery.discover_all_capabilities"
        ],
        "test_cli_integration": [
          "print",
          "cli_integration.get_integration_summary",
          "create_ai_cli_integration",
          "str",
          "Path",
          "get_ai_enhanced_cli_summary"
        ],
        "main": [
          "test_func",
          "len",
          "results.append",
          "print"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "SystemCapabilityDiscovery",
        "create_ai_cli_integration",
        "get_ai_enhanced_cli_summary",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.ai_self_awareness",
        "llmstruct.cache",
        "pathlib",
        "sys",
        "time",
        "traceback"
      ],
      "hash": "674a1f3f44abb452b39ba0ffa66a0b0119675c0f4ed47ea3c206faebe7b9e039"
    },
    {
      "module_id": "test_efficiency",
      "path": "test_efficiency.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": [
            15,
            19
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_local_address",
          "docstring": "",
          "line_range": [
            22,
            28
          ],
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": [
            31,
            34
          ],
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "check_ollama",
          "docstring": "",
          "line_range": [
            37,
            42
          ],
          "parameters": [
            "api_url"
          ],
          "decorators": []
        },
        {
          "name": "optimize_prompt",
          "docstring": "",
          "line_range": [
            45,
            51
          ],
          "parameters": [
            "struct_data",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": [
            54,
            78
          ],
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "check_llmstruct_cli",
          "docstring": "",
          "line_range": [
            81,
            82
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": [
            85,
            112
          ],
          "parameters": [
            "api_url",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": [
            115,
            122
          ],
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_grok",
          "docstring": "",
          "line_range": [
            125,
            147
          ],
          "parameters": [
            "api_key",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": [
            150,
            152
          ],
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            155,
            215
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "is_local_address": [
          "ipaddress.ip_address",
          "urlparse"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "check_ollama": [
          "api_url.replace",
          "requests.get",
          "response.json",
          "str"
        ],
        "optimize_prompt": [
          "print",
          "len",
          "struct_data.split"
        ],
        "run_llm_request": [
          "get_system_metrics",
          "print",
          "session.post",
          "is_local_address",
          "len",
          "time.perf_counter",
          "requests.Session",
          "response.raise_for_status",
          "response.json",
          "type"
        ],
        "check_llmstruct_cli": [
          "shutil.which"
        ],
        "test_with_llmstruct": [
          "optimize_prompt",
          "f.read",
          "target_path.exists",
          "subprocess.run",
          "run_llm_request",
          "FileNotFoundError",
          "check_llmstruct_cli",
          "json.dump",
          "str",
          "Path",
          "open"
        ],
        "test_without_llmstruct": [
          "optimize_prompt",
          "f.read",
          "run_llm_request",
          "Path",
          "open"
        ],
        "test_with_grok": [
          "optimize_prompt",
          "f.read",
          "open",
          "target_path.exists",
          "json.dump",
          "Path",
          "test_grok",
          "FileNotFoundError"
        ],
        "evaluate_accuracy": [
          "response_text.lower",
          "sum",
          "len"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "evaluate_accuracy",
          "print",
          "test_with_llmstruct",
          "test_without_llmstruct",
          "check_ollama",
          "parser.parse_args",
          "range",
          "setup_proxy",
          "check_llmstruct_cli",
          "str",
          "json.dump",
          "test_with_grok",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "ipaddress",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "shutil",
        "src.llmstruct.grok",
        "subprocess",
        "test_grok",
        "time",
        "urllib.parse",
        "urlparse"
      ],
      "hash": "7b4013d0a2d724e83a08ce04311d7a101a98769aa8e78e15b258bd58b44b55c0"
    },
    {
      "module_id": "start_development",
      "path": "start_development.py",
      "category": "core",
      "module_doc": "LLMStruct Development Startup Script\nConvenient one-command startup for daily development workflow.\nEnhanced with AI Workflow Middleware and Self-Monitoring for seamless llmstruct integration.",
      "functions": [
        {
          "name": "print_header",
          "docstring": "Print startup header.",
          "line_range": [
            17,
            21
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_ai_integration_layer",
          "docstring": "Initialize AI integration layer - this is the NEW seamless integration",
          "line_range": [
            23,
            73
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_environment",
          "docstring": "Check if development environment is properly set up.",
          "line_range": [
            75,
            110
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_workflow_orchestrator",
          "docstring": "Initialize and test WorkflowOrchestrator integration.",
          "line_range": [
            112,
            156
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_cursor_ai_bridge",
          "docstring": "Initialize and test CursorAIBridge integration.",
          "line_range": [
            158,
            198
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "sync_architecture_components",
          "docstring": "Sync with existing llmstruct architecture components and AI integration.",
          "line_range": [
            200,
            240
          ],
          "parameters": [
            "orchestrator",
            "ai_integration"
          ],
          "decorators": []
        },
        {
          "name": "run_system_health_check",
          "docstring": "Run comprehensive system health check.",
          "line_range": [
            242,
            263
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_optimization_suggestions",
          "docstring": "Get AI optimization suggestions with WorkflowOrchestrator integration.",
          "line_range": [
            265,
            320
          ],
          "parameters": [
            "orchestrator"
          ],
          "decorators": []
        },
        {
          "name": "check_git_status",
          "docstring": "Check git repository status.",
          "line_range": [
            322,
            368
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_context",
          "docstring": "Show current project context and priorities.",
          "line_range": [
            370,
            411
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_useful_commands",
          "docstring": "Show useful commands for development.",
          "line_range": [
            413,
            472
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main startup routine with AI Workflow Middleware and WorkflowOrchestrator integration.",
          "line_range": [
            474,
            593
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "print_header": [
          "print"
        ],
        "initialize_ai_integration_layer": [
          "print",
          "middleware.process_ai_request",
          "initialize_ai_middleware",
          "str",
          "Path",
          "record_ai_usage",
          "initialize_ai_monitor"
        ],
        "check_environment": [
          "Path",
          "hasattr",
          "missing_files.append",
          "print"
        ],
        "initialize_workflow_orchestrator": [
          "WorkflowOrchestrator",
          "print",
          "struct_analysis.get",
          "copilot_status.get",
          "len",
          "system_caps.get",
          "dup_analysis.get",
          "context.get",
          "orchestrator.get_current_context",
          "stats.get"
        ],
        "initialize_cursor_ai_bridge": [
          "project_state.get",
          "print",
          "bridge.ai_get_context",
          "len",
          "task_analysis.get",
          "CursorAIBridge",
          "context.get",
          "bridge.ai_analyze_task",
          "ai_rec.get"
        ],
        "sync_architecture_components": [
          "orchestrator.sync_with_existing_architecture",
          "print",
          "middleware.get_middleware_stats",
          "sync_results.items",
          "ai_integration.get"
        ],
        "run_system_health_check": [
          "subprocess.run",
          "print"
        ],
        "get_optimization_suggestions": [
          "line.strip",
          "enumerate",
          "print",
          "subprocess.run",
          "suggestions.append",
          "r.get",
          "orchestrator.analyze_codebase_for_duplicates",
          "duplication_analysis.get"
        ],
        "check_git_status": [
          "len",
          "subprocess.run",
          "changes.split",
          "print"
        ],
        "show_current_context": [
          "vision.get",
          "print",
          "enumerate",
          "bridge_file.exists",
          "init_file.exists",
          "init_data.get",
          "business_obj.get",
          "Path",
          "json.load",
          "bridge_data.get",
          "open"
        ],
        "show_useful_commands": [
          "print"
        ],
        "main": [
          "check_environment",
          "show_useful_commands",
          "print",
          "initialize_workflow_orchestrator",
          "run_system_health_check",
          "get_optimization_suggestions",
          "middleware.get_middleware_stats",
          "sync_architecture_components",
          "initialize_cursor_ai_bridge",
          "show_current_context",
          "monitor.analyze_behavior_trends",
          "check_git_status",
          "ai_integration.get",
          "initialize_ai_integration_layer",
          "print_header"
        ]
      },
      "dependencies": [
        "AIWorkflowMode",
        "CursorAIBridge",
        "Path",
        "WorkflowOrchestrator",
        "initialize_ai_middleware",
        "initialize_ai_monitor",
        "json",
        "llmstruct.ai_self_monitor",
        "llmstruct.ai_workflow_middleware",
        "llmstruct.cursor_ai_bridge",
        "llmstruct.workflow_orchestrator",
        "os",
        "pathlib",
        "record_ai_usage",
        "subprocess",
        "sys"
      ],
      "hash": "da3d9e91130a06f318e0844e82c02d253937154ac42bec34a1da2230c1e4329a"
    },
    {
      "module_id": "test_cli",
      "path": "test_cli.py",
      "category": "test",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    {
      "module_id": "run_ai_diagnostics",
      "path": "run_ai_diagnostics.py",
      "category": "core",
      "module_doc": "Comprehensive AI Self-Awareness Diagnostics Runner\nEnhanced with Cursor integration testing, multi-AI orchestration validation,\npersonal planning bridge testing, and real-time performance metrics.",
      "functions": [
        {
          "name": "print_section",
          "docstring": "Print a formatted section header.",
          "line_range": [
            20,
            23
          ],
          "parameters": [
            "title",
            "emoji"
          ],
          "decorators": []
        },
        {
          "name": "print_subsection",
          "docstring": "Print a formatted subsection header.",
          "line_range": [
            25,
            28
          ],
          "parameters": [
            "title",
            "emoji"
          ],
          "decorators": []
        },
        {
          "name": "test_basic_ai_awareness",
          "docstring": "Test basic AI self-awareness capabilities.",
          "line_range": [
            30,
            51
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_cursor_integration",
          "docstring": "Test Cursor IDE integration capabilities.",
          "line_range": [
            53,
            124
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_real_time_metrics",
          "docstring": "Test real-time metrics calculation.",
          "line_range": [
            126,
            146
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_personal_planning_bridge",
          "docstring": "Test personal planning bridge functionality.",
          "line_range": [
            148,
            196
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_session_management",
          "docstring": "Test session management capabilities.",
          "line_range": [
            198,
            233
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_configuration_loading",
          "docstring": "Test configuration file loading.",
          "line_range": [
            235,
            255
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_performance_benchmark",
          "docstring": "Run performance benchmarks for AI operations.",
          "line_range": [
            257,
            287
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_diagnostic_report",
          "docstring": "Generate a comprehensive diagnostic report.",
          "line_range": [
            289,
            333
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "continuous_monitoring_mode",
          "docstring": "Run continuous monitoring of AI system health.",
          "line_range": [
            335,
            382
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_specific_component",
          "docstring": "Test a specific AI component in detail.",
          "line_range": [
            384,
            423
          ],
          "parameters": [
            "component_name"
          ],
          "decorators": []
        },
        {
          "name": "test_cli_commands",
          "docstring": "Test CLI command processing capabilities.",
          "line_range": [
            425,
            447
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_context_scenarios",
          "docstring": "Test context orchestrator scenarios.",
          "line_range": [
            449,
            466
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_copilot_features",
          "docstring": "Test copilot manager features.",
          "line_range": [
            468,
            485
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_integration_health_check",
          "docstring": "Run comprehensive integration health check.",
          "line_range": [
            487,
            524
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_optimization_suggestions",
          "docstring": "Generate automated optimization suggestions based on diagnostics.",
          "line_range": [
            526,
            597
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_stress_test",
          "docstring": "Run stress test on AI system.",
          "line_range": [
            599,
            651
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run comprehensive AI diagnostics.",
          "line_range": [
            653,
            738
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "print_section": [
          "len",
          "print"
        ],
        "print_subsection": [
          "len",
          "print"
        ],
        "test_basic_ai_awareness": [
          "print",
          "discovery.get_comprehensive_ai_status",
          "len",
          "SystemCapabilityDiscovery",
          "discovery.get_enhanced_capabilities_summary",
          "discovery.discover_all_capabilities",
          "print_section"
        ],
        "test_cursor_integration": [
          "response.get",
          "print_subsection",
          "print",
          "print_section",
          "cursor_integration.get_comprehensive_cursor_response",
          "create_cursor_integration",
          "len",
          "delegation.get",
          "context_data.get"
        ],
        "test_real_time_metrics": [
          "print",
          "discovery._calculate_real_cache_hit_rate",
          "discovery.get_cursor_status_report",
          "SystemCapabilityDiscovery",
          "print_section",
          "discovery._get_real_system_load"
        ],
        "test_personal_planning_bridge": [
          "bridge.get_priority_guidance",
          "print",
          "enumerate",
          "guidance.get",
          "bridge.get_goal_aligned_suggestions",
          "len",
          "PersonalPlanningCursorBridge",
          "print_section",
          "top_feature.get"
        ],
        "test_session_management": [
          "print",
          "session_manager.save_session_context",
          "CursorSessionManager",
          "session_manager.start_session",
          "print_section"
        ],
        "test_configuration_loading": [
          "config_path.exists",
          "print",
          "len",
          "Path",
          "json.load",
          "print_section",
          "open"
        ],
        "run_performance_benchmark": [
          "print",
          "create_cursor_integration",
          "SystemCapabilityDiscovery",
          "discovery.discover_all_capabilities",
          "print_section",
          "time.time"
        ],
        "generate_diagnostic_report": [
          "print",
          "len",
          "time.strftime",
          "SystemCapabilityDiscovery",
          "json.dump",
          "Path",
          "discovery.discover_all_capabilities",
          "print_section",
          "open"
        ],
        "continuous_monitoring_mode": [
          "print",
          "discovery._calculate_real_cache_hit_rate",
          "len",
          "SystemCapabilityDiscovery",
          "time.strftime",
          "time.sleep",
          "discovery.discover_all_capabilities",
          "print_section",
          "discovery._get_real_system_load"
        ],
        "test_specific_component": [
          "test_context_scenarios",
          "print",
          "list",
          "enumerate",
          "test_cli_commands",
          "component_name.upper",
          "len",
          "SystemCapabilityDiscovery",
          "discovery.discover_all_capabilities",
          "test_copilot_features",
          "print_section"
        ],
        "test_cli_commands": [
          "CLIConfig",
          "CommandProcessor",
          "print",
          "CLIUtils"
        ],
        "test_context_scenarios": [
          "create_context_orchestrator",
          "print"
        ],
        "test_copilot_features": [
          "hasattr",
          "feature.replace",
          "print",
          "initialize_copilot"
        ],
        "run_integration_health_check": [
          "response.get",
          "print",
          "cursor_integration.get_comprehensive_cursor_response",
          "create_cursor_integration",
          "print_section"
        ],
        "generate_optimization_suggestions": [
          "enumerate",
          "print",
          "len",
          "suggestions.append",
          "SystemCapabilityDiscovery",
          "discovery.discover_all_capabilities",
          "print_section"
        ],
        "run_stress_test": [
          "print",
          "enumerate",
          "create_cursor_integration",
          "range",
          "SystemCapabilityDiscovery",
          "delegation.get",
          "context_data.get",
          "discovery.discover_all_capabilities",
          "print_section",
          "time.time"
        ],
        "main": [
          "test_specific_component",
          "test_func",
          "run_stress_test",
          "print",
          "run_integration_health_check",
          "len",
          "continuous_monitoring_mode",
          "generate_optimization_suggestions",
          "print_section",
          "time.time"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CursorSessionManager",
        "Path",
        "PersonalPlanningCursorBridge",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "create_cursor_integration",
        "initialize_copilot",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.cursor_integration",
        "os",
        "pathlib",
        "sys",
        "time"
      ],
      "hash": "59644d1ec404ce42fe6b754b03781cfe0649dc8d2c57a88c3f1b654e78f01fd2"
    },
    {
      "module_id": "test_ai_cli_integration",
      "path": "test_ai_cli_integration.py",
      "category": "test",
      "module_doc": "AI CLI Integration Testing Suite\n\nAdvanced testing framework to validate how AI agents can populate and interact\nwith the LLMStruct CLI system across different scenarios and use cases.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main function for AI CLI integration testing.",
          "line_range": [
            373,
            411
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            34,
            37
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "setup_logging",
          "docstring": "Set up logging for AI CLI integration testing.",
          "line_range": [
            39,
            49
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_ai_cli_scenario",
          "docstring": "Test a specific AI CLI integration scenario.",
          "line_range": [
            51,
            101
          ],
          "parameters": [
            "self",
            "scenario",
            "ai_agent"
          ],
          "decorators": []
        },
        {
          "name": "get_scenario_config",
          "docstring": "Get configuration for specific test scenario.",
          "line_range": [
            103,
            142
          ],
          "parameters": [
            "self",
            "scenario"
          ],
          "decorators": []
        },
        {
          "name": "simulate_ai_cli_execution",
          "docstring": "Simulate AI agent executing CLI command with context.",
          "line_range": [
            144,
            165
          ],
          "parameters": [
            "self",
            "command",
            "context_sources",
            "ai_agent"
          ],
          "decorators": []
        },
        {
          "name": "load_simulation_context",
          "docstring": "Load simulated context data for testing.",
          "line_range": [
            167,
            184
          ],
          "parameters": [
            "self",
            "sources"
          ],
          "decorators": []
        },
        {
          "name": "load_json_safely",
          "docstring": "Safely load JSON file for testing.",
          "line_range": [
            186,
            195
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "estimate_context_tokens",
          "docstring": "Estimate token consumption for context data.",
          "line_range": [
            197,
            200
          ],
          "parameters": [
            "self",
            "context_data"
          ],
          "decorators": []
        },
        {
          "name": "calculate_output_quality",
          "docstring": "Calculate output quality score based on various factors.",
          "line_range": [
            202,
            224
          ],
          "parameters": [
            "self",
            "command",
            "context_data",
            "ai_agent"
          ],
          "decorators": []
        },
        {
          "name": "run_comprehensive_ai_cli_tests",
          "docstring": "Run comprehensive AI CLI integration test suite.",
          "line_range": [
            226,
            248
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_ai_cli_report",
          "docstring": "Generate comprehensive AI CLI integration report.",
          "line_range": [
            250,
            326
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "calculate_scenario_complexity",
          "docstring": "Calculate complexity score for scenario.",
          "line_range": [
            328,
            338
          ],
          "parameters": [
            "self",
            "scenario"
          ],
          "decorators": []
        },
        {
          "name": "generate_ai_cli_recommendations",
          "docstring": "Generate recommendations based on AI CLI test results.",
          "line_range": [
            340,
            370
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AICliTestResult",
          "docstring": "Test result for AI CLI integration testing.",
          "line_range": [
            18,
            29
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AICliIntegrationTester",
          "docstring": "Advanced testing class for AI CLI integration capabilities.",
          "line_range": [
            31,
            370
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                34,
                37
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "setup_logging",
              "docstring": "Set up logging for AI CLI integration testing.",
              "line_range": [
                39,
                49
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_ai_cli_scenario",
              "docstring": "Test a specific AI CLI integration scenario.",
              "line_range": [
                51,
                101
              ],
              "parameters": [
                "self",
                "scenario",
                "ai_agent"
              ]
            },
            {
              "name": "get_scenario_config",
              "docstring": "Get configuration for specific test scenario.",
              "line_range": [
                103,
                142
              ],
              "parameters": [
                "self",
                "scenario"
              ]
            },
            {
              "name": "simulate_ai_cli_execution",
              "docstring": "Simulate AI agent executing CLI command with context.",
              "line_range": [
                144,
                165
              ],
              "parameters": [
                "self",
                "command",
                "context_sources",
                "ai_agent"
              ]
            },
            {
              "name": "load_simulation_context",
              "docstring": "Load simulated context data for testing.",
              "line_range": [
                167,
                184
              ],
              "parameters": [
                "self",
                "sources"
              ]
            },
            {
              "name": "load_json_safely",
              "docstring": "Safely load JSON file for testing.",
              "line_range": [
                186,
                195
              ],
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "estimate_context_tokens",
              "docstring": "Estimate token consumption for context data.",
              "line_range": [
                197,
                200
              ],
              "parameters": [
                "self",
                "context_data"
              ]
            },
            {
              "name": "calculate_output_quality",
              "docstring": "Calculate output quality score based on various factors.",
              "line_range": [
                202,
                224
              ],
              "parameters": [
                "self",
                "command",
                "context_data",
                "ai_agent"
              ]
            },
            {
              "name": "run_comprehensive_ai_cli_tests",
              "docstring": "Run comprehensive AI CLI integration test suite.",
              "line_range": [
                226,
                248
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_ai_cli_report",
              "docstring": "Generate comprehensive AI CLI integration report.",
              "line_range": [
                250,
                326
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "calculate_scenario_complexity",
              "docstring": "Calculate complexity score for scenario.",
              "line_range": [
                328,
                338
              ],
              "parameters": [
                "self",
                "scenario"
              ]
            },
            {
              "name": "generate_ai_cli_recommendations",
              "docstring": "Generate recommendations based on AI CLI test results.",
              "line_range": [
                340,
                370
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.setup_logging"
        ],
        "setup_logging": [
          "logging.basicConfig",
          "logging.StreamHandler",
          "logging.FileHandler",
          "logging.getLogger"
        ],
        "test_ai_cli_scenario": [
          "self.simulate_ai_cli_execution",
          "AICliTestResult",
          "ai_agent.replace",
          "self.get_scenario_config",
          "str",
          "execution_result.get",
          "time.time"
        ],
        "get_scenario_config": [
          "scenarios.get"
        ],
        "simulate_ai_cli_execution": [
          "self.calculate_output_quality",
          "asyncio.sleep",
          "self.estimate_context_tokens",
          "self.load_simulation_context"
        ],
        "load_simulation_context": [
          "self.load_json_safely"
        ],
        "load_json_safely": [
          "Path",
          "json.load",
          "path.exists",
          "open"
        ],
        "estimate_context_tokens": [
          "json.dumps",
          "len"
        ],
        "calculate_output_quality": [
          "command.split",
          "min",
          "agent_bonuses.get",
          "len"
        ],
        "run_comprehensive_ai_cli_tests": [
          "self.generate_ai_cli_report",
          "self.test_ai_cli_scenario"
        ],
        "generate_ai_cli_report": [
          "Path",
          "list",
          "self.calculate_scenario_complexity",
          "scenario_results.items",
          "len",
          "agent_analysis.keys",
          "json.dump",
          "self.generate_ai_cli_recommendations",
          "agent_results.items",
          "asdict",
          "sum",
          "open"
        ],
        "calculate_scenario_complexity": [
          "complexity_scores.get"
        ],
        "generate_ai_cli_recommendations": [
          "sum",
          "len",
          "recommendations.append"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "tester.test_ai_cli_scenario",
          "print",
          "tester.run_comprehensive_ai_cli_tests",
          "parser.parse_args",
          "AICliIntegrationTester"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asdict",
        "asyncio",
        "dataclass",
        "dataclasses",
        "json",
        "logging",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": "be54db56dd13f1829ac895615579e1c406e5fc25744f44070f9e8b600fb67e29"
    },
    {
      "module_id": "collect_json",
      "path": "collect_json.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json_files",
          "docstring": "",
          "line_range": [
            5,
            19
          ],
          "parameters": [
            "base_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json_files": [
          "path.open",
          "sorted",
          "json.load",
          "path.relative_to",
          "base_dir.rglob",
          "current.setdefault"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib"
      ],
      "hash": "c8dff991d16ccd9c1a9ee3f83f68adf766195005a3b49ea64a9a99e34902eaa6"
    },
    {
      "module_id": "test_audit",
      "path": "test_audit.py",
      "category": "test",
      "module_doc": "Test script for audit functionality.",
      "functions": [
        {
          "name": "test_audit_status",
          "docstring": "Test audit status directly.",
          "line_range": [
            7,
            49
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_audit_status": [
          "print",
          "list",
          "tasks_file.exists",
          "ideas_data.keys",
          "tasks_data.keys",
          "len",
          "t.get",
          "i.get",
          "ideas_file.exists",
          "Path",
          "json.load",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib"
      ],
      "hash": "8b6349f6348dc17c2c2a03ede44c0f6317af552a1db5501689cf235c00b3bf0e"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            13,
            17
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_text_file",
          "docstring": "Check if file is likely a text file based on extension.",
          "line_range": [
            20,
            31
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": [
            34,
            66
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "gitignore_parser.parse_gitignore",
          "gitignore_path.exists"
        ],
        "is_text_file": [],
        "collect_project": [
          "f.read",
          "root_dir.rglob",
          "logger.warning",
          "load_gitignore",
          "len",
          "gitignore",
          "is_text_file",
          "logger.error",
          "doc_files.items",
          "logger.info",
          "str",
          "file_path.is_file",
          "Path",
          "json.dump",
          "any",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": "f6d7fb537d2ae878884758c22a853439c915eae11cf2f19fd92224e5adda61cd"
    },
    {
      "module_id": "debug_terminal",
      "path": "debug_terminal.py",
      "category": "core",
      "module_doc": "Debug Terminal Script - Fallback for when terminal output is not visible\nSaves all output to files for manual inspection",
      "functions": [
        {
          "name": "run_with_output_capture",
          "docstring": "Run command and capture output to both console and file.",
          "line_range": [
            13,
            78
          ],
          "parameters": [
            "command",
            "description"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run common diagnostic commands with output capture.",
          "line_range": [
            80,
            110
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "run_with_output_capture": [
          "print",
          "subprocess.run",
          "len",
          "f.write",
          "open"
        ],
        "main": [
          "results.append",
          "run_with_output_capture",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": "e9551d20a760ee9b69bf1c62d1d4941c17440f6814b49505b86500c4e48acc4c"
    },
    {
      "module_id": "test_strict_mode",
      "path": "test_strict_mode.py",
      "category": "test",
      "module_doc": "Тест [strict] режима для экстренной проверки",
      "functions": [
        {
          "name": "test_strict_mode",
          "docstring": "",
          "line_range": [
            14,
            76
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_strict_mode": [
          "processor.parse_tags_from_prompt",
          "CommandProcessor",
          "print",
          "processor.validate_strict_mode",
          "config.get",
          "len",
          "processor.cmd_mode",
          "CLIConfig",
          "CLIUtils"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "os",
        "sys"
      ],
      "hash": "1bc396bd2042162a48c2d05a56d42418ebef64a2d0cae646ba0c7e36cdb8f660"
    },
    {
      "module_id": "test_debug_analysis",
      "path": "test_debug_analysis.py",
      "category": "test",
      "module_doc": "Quick debug test for duplication analysis",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            11,
            58
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "WorkflowOrchestrator",
          "orchestrator._get_struct_analysis",
          "print",
          "struct_analysis.get",
          "duplication.get",
          "traceback.print_exc",
          "stats.get",
          "time.time"
        ]
      },
      "dependencies": [
        "WorkflowOrchestrator",
        "llmstruct.workflow_orchestrator",
        "os",
        "sys",
        "time",
        "traceback"
      ],
      "hash": "bc686743764ede79492e13588b0d41fd9dcfbb5fc5beb760587ca17726f7a0a5"
    },
    {
      "module_id": "final_system_check",
      "path": "final_system_check.py",
      "category": "core",
      "module_doc": "Final System Status Check - LLMStruct Modular CLI Integration\nComprehensive validation of all completed components",
      "functions": [
        {
          "name": "check_system_status",
          "docstring": "Comprehensive system status check",
          "line_range": [
            12,
            155
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_system_status": [
          "print",
          "t.get",
          "len",
          "i.get",
          "data.get",
          "json.load",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": "16e3482f7da9388c53726063af559a9e48ad8e5a6c5c49e064129c0e5cf68aa7"
    },
    {
      "module_id": "monitor_system",
      "path": "monitor_system.py",
      "category": "core",
      "module_doc": "System Monitor - Continuous logging for debugging terminal issues\nRuns in background and logs system status to files",
      "functions": [
        {
          "name": "log_system_status",
          "docstring": "Log current system status to file.",
          "line_range": [
            15,
            60
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run continuous monitoring.",
          "line_range": [
            62,
            86
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "log_system_status": [
          "timestamp.isoformat",
          "WorkflowOrchestrator",
          "wo.get_current_context",
          "len",
          "f.write",
          "str",
          "json.dumps",
          "Path",
          "context.get",
          "timestamp.strftime",
          "open"
        ],
        "main": [
          "len",
          "time.sleep",
          "log_system_status",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "WorkflowOrchestrator",
        "datetime",
        "json",
        "llmstruct.workflow_orchestrator",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": "f35beeb4d7f6ff371d989ccb2058b27b1ae53801e295661f046650bcf801f397"
    },
    {
      "module_id": "board_cli",
      "path": "board_cli.py",
      "category": "core",
      "module_doc": "CLI Kanban Board for llmstruct tasks and ideas\n- Reads data/tasks.json and data/ideas.json\n- Shows board in terminal: columns by status, rows by priority\n- Supports filtering, sorting, and shows links between tasks/ideas",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": [
            26,
            28
          ],
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "group_by_status_and_priority",
          "docstring": "",
          "line_range": [
            30,
            36
          ],
          "parameters": [
            "items",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "render_board",
          "docstring": "",
          "line_range": [
            38,
            64
          ],
          "parameters": [
            "board",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            66,
            74
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "json.load",
          "open"
        ],
        "group_by_status_and_priority": [
          "item.get",
          "defaultdict"
        ],
        "render_board": [
          "table.add_column",
          "table.add_row",
          "Table",
          "kind.capitalize",
          "links.extend",
          "console.print",
          "item.get",
          "Panel",
          "links.append"
        ],
        "main": [
          "ideas_data.get",
          "render_board",
          "tasks_data.get",
          "group_by_status_and_priority",
          "console.rule",
          "load_json"
        ]
      },
      "dependencies": [
        "Console",
        "Panel",
        "Path",
        "Table",
        "box",
        "collections",
        "defaultdict",
        "json",
        "os",
        "pathlib",
        "rich",
        "rich.console",
        "rich.panel",
        "rich.table"
      ],
      "hash": "3e733003df9f2e0946abd47f3fb0fa1ff5afb323c8aede68daeb854019e1b81f"
    },
    {
      "module_id": "test_ai_cli_debug",
      "path": "test_ai_cli_debug.py",
      "category": "test",
      "module_doc": "Simple test for AI CLI Integration - Debug Version",
      "functions": [
        {
          "name": "test_basic_functionality",
          "docstring": "Test basic functionality step by step.",
          "line_range": [
            14,
            80
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_ai_self_awareness",
          "docstring": "Test the main AI self-awareness system.",
          "line_range": [
            82,
            116
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_basic_functionality": [
          "integration.get_integration_summary",
          "print",
          "traceback.print_exc",
          "len",
          "integration.integrate_ai_status_command",
          "str",
          "status_result.get",
          "AISelfAwarenessCLIIntegration"
        ],
        "test_ai_self_awareness": [
          "print",
          "traceback.print_exc",
          "len",
          "SystemCapabilityDiscovery",
          "discovery.get_enhanced_capabilities_summary",
          "str",
          "discovery.discover_all_capabilities"
        ]
      },
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "Path",
        "SystemCapabilityDiscovery",
        "os",
        "pathlib",
        "src.llmstruct.ai_cli_integration",
        "src.llmstruct.ai_self_awareness",
        "sys",
        "traceback"
      ],
      "hash": "1f5a3e4b77cf999aaccea3f6fc847c680e513441c425daace4e2f3a35d17808e"
    },
    {
      "module_id": "final_system_validation",
      "path": "final_system_validation.py",
      "category": "core",
      "module_doc": "Final system validation script for LLMStruct Modular CLI Integration",
      "functions": [
        {
          "name": "main",
          "docstring": "Run comprehensive system validation",
          "line_range": [
            13,
            238
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "print",
          "subprocess.run",
          "next",
          "getattr",
          "len",
          "__import__",
          "create_cli_core",
          "task.get",
          "json.load",
          "status.upper",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "create_cli_core",
        "json",
        "llmstruct.cli_core",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": "c3b078025b32ac31fe272f4904b6574157bf71caa271e8788941900ed828fac8"
    },
    {
      "module_id": "test_enhanced_ai_awareness",
      "path": "test_enhanced_ai_awareness.py",
      "category": "test",
      "module_doc": "Test script for AI Self-Awareness Enhancement with Unused Function Integration",
      "functions": [
        {
          "name": "test_enhanced_ai_self_awareness",
          "docstring": "Test the enhanced AI self-awareness system.",
          "line_range": [
            12,
            48
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_enhanced_ai_self_awareness": [
          "print",
          "discovery.get_comprehensive_ai_status",
          "traceback.print_exc",
          "SystemCapabilityDiscovery",
          "integration_metrics.get",
          "discovery.discover_all_capabilities"
        ]
      },
      "dependencies": [
        "SystemCapabilityDiscovery",
        "os",
        "src.llmstruct.ai_self_awareness",
        "sys",
        "traceback"
      ],
      "hash": "b38250f3392e9c60364af43e921ed4f99f4cf87bd25838339acb7ac78cb0237b"
    },
    {
      "module_id": "force_ai_integration",
      "path": "force_ai_integration.py",
      "category": "core",
      "module_doc": "Force AI Integration Script\nInitializes middleware and monitoring to ensure AI uses llmstruct system.",
      "functions": [
        {
          "name": "force_ai_integration",
          "docstring": "Force AI to use llmstruct system.",
          "line_range": [
            18,
            106
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_integration_status",
          "docstring": "Check current AI integration status.",
          "line_range": [
            109,
            138
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "force_ai_integration": [
          "print",
          "middleware.process_ai_request",
          "monitor.get_real_time_guidance",
          "initialize_ai_middleware",
          "config_file.exists",
          "str",
          "json.dump",
          "Path",
          "record_ai_usage",
          "initialize_ai_monitor",
          "open"
        ],
        "check_integration_status": [
          "get_ai_monitor",
          "print",
          "middleware.get_middleware_stats",
          "monitor.analyze_behavior_trends",
          "get_ai_middleware"
        ]
      },
      "dependencies": [
        "AIWorkflowMode",
        "Path",
        "get_ai_middleware",
        "get_ai_monitor",
        "initialize_ai_middleware",
        "initialize_ai_monitor",
        "json",
        "llmstruct.ai_self_monitor",
        "llmstruct.ai_workflow_middleware",
        "pathlib",
        "record_ai_usage",
        "sys"
      ],
      "hash": "783d4261c3f3167843c642d5e2b59e077bddb415dacdbe64a6911560dddf6312"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "module_doc": "JSON Schema Validation Script for llmstruct\nValidates all enhanced JSON files against their appropriate schemas.\nPart of TSK-130 implementation.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            24,
            34
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            56,
            193
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            15,
            21
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "json.load",
          "print",
          "open"
        ],
        "validate_json_against_schema": [
          "validate",
          "print",
          "str"
        ],
        "main": [
          "errors.append",
          "validate_json_against_schema",
          "load_json",
          "print"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": "08ec72522f6c50cd1624a0680fe9edc8006176193c73e0c0b2b83cae8461719a"
    },
    {
      "module_id": "test_context_orchestration",
      "path": "test_context_orchestration.py",
      "category": "test",
      "module_doc": "LLM Context Orchestration Testing Suite\n\nComprehensive testing framework for validating context modes, token budgets,\nand LLM integration capabilities across different scenarios.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main function for CLI testing.",
          "line_range": [
            422,
            461
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_relationship_context_focused",
          "docstring": "",
          "line_range": [
            467,
            480
          ],
          "parameters": [],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            44,
            47
          ],
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "setup_logging",
          "docstring": "Set up logging for test execution.",
          "line_range": [
            49,
            59
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_test_config",
          "docstring": "Load context orchestration configuration.",
          "line_range": [
            61,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_context_mode",
          "docstring": "Test a specific context mode with given scenario.",
          "line_range": [
            84,
            132
          ],
          "parameters": [
            "self",
            "mode",
            "scenario"
          ],
          "decorators": []
        },
        {
          "name": "load_context_for_mode",
          "docstring": "Load context data based on mode and token budget.",
          "line_range": [
            134,
            166
          ],
          "parameters": [
            "self",
            "mode",
            "token_budget"
          ],
          "decorators": []
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            168,
            177
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "load_file_content",
          "docstring": "Load text file content.",
          "line_range": [
            179,
            188
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "load_docs_summary",
          "docstring": "Load documentation summary.",
          "line_range": [
            190,
            193
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_src_summary",
          "docstring": "Load source code summary.",
          "line_range": [
            195,
            198
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_current_context",
          "docstring": "Load current working context.",
          "line_range": [
            200,
            202
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_project_summary",
          "docstring": "Load minimal project summary.",
          "line_range": [
            204,
            206
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_current_task",
          "docstring": "Load current task information.",
          "line_range": [
            208,
            210
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_session_context",
          "docstring": "Load AI session context.",
          "line_range": [
            212,
            214
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "estimate_tokens",
          "docstring": "Estimate token count for context data.",
          "line_range": [
            216,
            226
          ],
          "parameters": [
            "self",
            "context_data"
          ],
          "decorators": []
        },
        {
          "name": "trim_context_to_budget",
          "docstring": "Trim context data to fit within token budget.",
          "line_range": [
            228,
            255
          ],
          "parameters": [
            "self",
            "context_data",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "truncate_content",
          "docstring": "Truncate content to fit token budget.",
          "line_range": [
            257,
            271
          ],
          "parameters": [
            "self",
            "content",
            "token_budget"
          ],
          "decorators": []
        },
        {
          "name": "assess_response_quality",
          "docstring": "Assess the quality of context for LLM response.",
          "line_range": [
            273,
            295
          ],
          "parameters": [
            "self",
            "context_data",
            "scenario"
          ],
          "decorators": []
        },
        {
          "name": "run_comprehensive_test_suite",
          "docstring": "Run the complete test suite for all context modes and scenarios.",
          "line_range": [
            297,
            318
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_test_report",
          "docstring": "Generate comprehensive test report.",
          "line_range": [
            320,
            370
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_recommendations",
          "docstring": "Generate recommendations based on test results.",
          "line_range": [
            372,
            405
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_relationship_context_in_focused",
          "docstring": "Проверяет, что в FOCUSED режиме присутствует relationship_context и он содержит модули и зависимости.",
          "line_range": [
            407,
            419
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextTestResult",
          "docstring": "Test result for context orchestration testing.",
          "line_range": [
            29,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "LLMContextTester",
          "docstring": "Main testing class for LLM context capabilities.",
          "line_range": [
            41,
            419
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                44,
                47
              ],
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "setup_logging",
              "docstring": "Set up logging for test execution.",
              "line_range": [
                49,
                59
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_test_config",
              "docstring": "Load context orchestration configuration.",
              "line_range": [
                61,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_context_mode",
              "docstring": "Test a specific context mode with given scenario.",
              "line_range": [
                84,
                132
              ],
              "parameters": [
                "self",
                "mode",
                "scenario"
              ]
            },
            {
              "name": "load_context_for_mode",
              "docstring": "Load context data based on mode and token budget.",
              "line_range": [
                134,
                166
              ],
              "parameters": [
                "self",
                "mode",
                "token_budget"
              ]
            },
            {
              "name": "load_json_file",
              "docstring": "Load JSON file with error handling.",
              "line_range": [
                168,
                177
              ],
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "load_file_content",
              "docstring": "Load text file content.",
              "line_range": [
                179,
                188
              ],
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "load_docs_summary",
              "docstring": "Load documentation summary.",
              "line_range": [
                190,
                193
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_src_summary",
              "docstring": "Load source code summary.",
              "line_range": [
                195,
                198
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_current_context",
              "docstring": "Load current working context.",
              "line_range": [
                200,
                202
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_project_summary",
              "docstring": "Load minimal project summary.",
              "line_range": [
                204,
                206
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_current_task",
              "docstring": "Load current task information.",
              "line_range": [
                208,
                210
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_session_context",
              "docstring": "Load AI session context.",
              "line_range": [
                212,
                214
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "estimate_tokens",
              "docstring": "Estimate token count for context data.",
              "line_range": [
                216,
                226
              ],
              "parameters": [
                "self",
                "context_data"
              ]
            },
            {
              "name": "trim_context_to_budget",
              "docstring": "Trim context data to fit within token budget.",
              "line_range": [
                228,
                255
              ],
              "parameters": [
                "self",
                "context_data",
                "budget"
              ]
            },
            {
              "name": "truncate_content",
              "docstring": "Truncate content to fit token budget.",
              "line_range": [
                257,
                271
              ],
              "parameters": [
                "self",
                "content",
                "token_budget"
              ]
            },
            {
              "name": "assess_response_quality",
              "docstring": "Assess the quality of context for LLM response.",
              "line_range": [
                273,
                295
              ],
              "parameters": [
                "self",
                "context_data",
                "scenario"
              ]
            },
            {
              "name": "run_comprehensive_test_suite",
              "docstring": "Run the complete test suite for all context modes and scenarios.",
              "line_range": [
                297,
                318
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_test_report",
              "docstring": "Generate comprehensive test report.",
              "line_range": [
                320,
                370
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_recommendations",
              "docstring": "Generate recommendations based on test results.",
              "line_range": [
                372,
                405
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_relationship_context_in_focused",
              "docstring": "Проверяет, что в FOCUSED режиме присутствует relationship_context и он содержит модули и зависимости.",
              "line_range": [
                407,
                419
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self.setup_logging"
        ],
        "setup_logging": [
          "logging.basicConfig",
          "logging.StreamHandler",
          "logging.FileHandler",
          "logging.getLogger"
        ],
        "load_test_config": [
          "json.load",
          "open"
        ],
        "test_context_mode": [
          "context_data.keys",
          "list",
          "mode_config.get",
          "self.load_context_for_mode",
          "config.get",
          "self.assess_response_quality",
          "ContextTestResult",
          "self.load_test_config",
          "self.estimate_tokens",
          "isinstance",
          "str",
          "time.time"
        ],
        "load_context_for_mode": [
          "self.load_json_file",
          "self.load_docs_summary",
          "self.load_current_task",
          "self.load_session_context",
          "self.load_project_summary",
          "self.trim_context_to_budget",
          "self.load_file_content",
          "self.load_src_summary",
          "self.load_current_context"
        ],
        "load_json_file": [
          "Path",
          "json.load",
          "path.exists",
          "open"
        ],
        "load_file_content": [
          "Path",
          "path.exists",
          "f.read",
          "open"
        ],
        "load_docs_summary": [],
        "load_src_summary": [],
        "load_current_context": [],
        "load_project_summary": [],
        "load_current_task": [],
        "load_session_context": [
          "self.load_json_file"
        ],
        "estimate_tokens": [
          "len",
          "json.dumps",
          "isinstance",
          "str"
        ],
        "trim_context_to_budget": [
          "self.estimate_tokens",
          "self.truncate_content"
        ],
        "truncate_content": [
          "len",
          "isinstance"
        ],
        "assess_response_quality": [
          "min",
          "len"
        ],
        "run_comprehensive_test_suite": [
          "self.generate_test_report",
          "self.test_context_mode"
        ],
        "generate_test_report": [
          "mode_results.items",
          "self.generate_recommendations",
          "len",
          "json.dump",
          "Path",
          "asdict",
          "sum",
          "open"
        ],
        "generate_recommendations": [
          "len",
          "sum",
          "mode_success.items",
          "recommendations.append"
        ],
        "test_relationship_context_in_focused": [
          "len",
          "self.load_context_for_mode",
          "print",
          "isinstance"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "LLMContextTester",
          "print",
          "tester.test_context_mode",
          "tester.run_comprehensive_test_suite",
          "parser.parse_args"
        ],
        "test_relationship_context_focused": [
          "print",
          "os.getcwd",
          "len",
          "isinstance",
          "SmartContextOrchestrator",
          "orchestrator.get_context_for_scenario"
        ]
      },
      "dependencies": [
        "Any",
        "CLICommands",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "argparse",
        "asdict",
        "asyncio",
        "dataclass",
        "dataclasses",
        "json",
        "logging",
        "os",
        "pathlib",
        "pytest",
        "src.llmstruct.cli_commands",
        "src.llmstruct.context_orchestrator",
        "time",
        "typing"
      ],
      "hash": "3443453e2e2f51401945637ece9d0a4b316afc584cc0eec8a39936cb1ed6d337"
    },
    {
      "module_id": "test_export",
      "path": "test_export.py",
      "category": "test",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "sys"
      ],
      "hash": "80ef869d790cf9d44eee4637e892bdb0bf80d41fea6788ab1bd9cb70f4c31a40"
    },
    {
      "module_id": "test_modular_cli",
      "path": "test_modular_cli.py",
      "category": "test",
      "module_doc": "Test script for modular CLI structure",
      "functions": [
        {
          "name": "test_modular_cli",
          "docstring": "Test basic modular CLI functionality.",
          "line_range": [
            14,
            63
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_copilot_integration",
          "docstring": "Test Copilot integration.",
          "line_range": [
            65,
            100
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_modular_cli": [
          "CommandProcessor",
          "tempfile.TemporaryDirectory",
          "print",
          "utils.read_file_content",
          "traceback.print_exc",
          "len",
          "CLIUtils",
          "create_cli_core",
          "utils.write_file_content",
          "CLIConfig",
          "config.get_cache_config"
        ],
        "test_copilot_integration": [
          "tempfile.TemporaryDirectory",
          "initialize_copilot",
          "print",
          "CopilotEvent",
          "traceback.print_exc",
          "len",
          "manager.get_context_status",
          "manager.close"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLICore",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "CopilotEvent",
        "Path",
        "create_cli_core",
        "initialize_copilot",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_core",
        "llmstruct.cli_utils",
        "llmstruct.copilot",
        "os",
        "pathlib",
        "sys",
        "tempfile",
        "traceback"
      ],
      "hash": "fca8fcf0c93da190370ff4c5328dc1c04311c0091cb0db3adff8222f83cb4383"
    },
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "module_doc": "Session Schema Validation Script for llmstruct\nValidates session management JSON files against their schemas.\nFocused validation for session system only.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            21,
            31
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": [
            33,
            52
          ],
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            54,
            124
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            13,
            19
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "json.load",
          "print",
          "open"
        ],
        "validate_json_against_schema": [
          "validator.iter_errors",
          "Draft7Validator",
          "print",
          "list",
          "len",
          "str"
        ],
        "main": [
          "errors.append",
          "validate_json_against_schema",
          "load_json",
          "print"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": "924ffd47c5971a755cb58e7ad0b4714fd00f3e4541c6e8a39375e8a3c977fe77"
    },
    {
      "module_id": "test_ai_cli_simple",
      "path": "test_ai_cli_simple.py",
      "category": "test",
      "module_doc": "Simple AI CLI Integration Test\n\nQuick validation of AI agent CLI population capabilities.",
      "functions": [
        {
          "name": "test_ai_cli_integration",
          "docstring": "Simple test for AI CLI integration.",
          "line_range": [
            12,
            107
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_ai_cli_integration": [
          "open",
          "enumerate",
          "print",
          "results.append",
          "len",
          "min",
          "scenario.replace",
          "time.sleep",
          "json.dump",
          "Path",
          "sum",
          "time.time"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "time"
      ],
      "hash": "e605a05aba97fe2fc01e43e9952211c3151c47ebb6d828b728aaff6f6055e6e2"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json_file",
          "docstring": "Load a JSON file and return its contents.",
          "line_range": [
            15,
            25
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_with_struct",
          "docstring": "Verify llm_response.json against struct.json.",
          "line_range": [
            28,
            71
          ],
          "parameters": [
            "response_text",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_without_struct",
          "docstring": "Verify llm_response.json based on LLMstruct principles.",
          "line_range": [
            74,
            108
          ],
          "parameters": [
            "response_text"
          ],
          "decorators": []
        },
        {
          "name": "generate_metrics",
          "docstring": "Generate metrics for the response per EXT-004.",
          "line_range": [
            111,
            141
          ],
          "parameters": [
            "response_data",
            "server_log"
          ],
          "decorators": []
        },
        {
          "name": "update_tasks_json",
          "docstring": "Append a new task to tasks.json.",
          "line_range": [
            144,
            151
          ],
          "parameters": [
            "tasks_file",
            "new_task"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            154,
            225
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json_file": [
          "json.load",
          "logging.error",
          "open"
        ],
        "verify_response_with_struct": [
          "expected_goals.issubset",
          "struct_data.get",
          "set",
          "re.findall",
          "expected_extensions.issubset",
          "expected_files.issubset",
          "e.startswith",
          "logging.info",
          "logging.error"
        ],
        "verify_response_without_struct": [
          "expected_goals.issubset",
          "principle.lower",
          "set",
          "re.findall",
          "response_text.lower",
          "expected_extensions.issubset",
          "expected_files.issubset",
          "logging.info",
          "logging.error"
        ],
        "generate_metrics": [
          "server_log.get",
          "response_text.split",
          "datetime.utcnow",
          "len",
          "re.findall"
        ],
        "update_tasks_json": [
          "tasks.get",
          "load_json_file",
          "json.dump",
          "logging.info",
          "open"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "load_json_file",
          "verify_response_with_struct",
          "verify_response_without_struct",
          "generate_metrics",
          "json.dump",
          "logging.info",
          "update_tasks_json",
          "open"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "argparse",
        "datetime",
        "json",
        "logging",
        "os",
        "re",
        "typing"
      ],
      "hash": "cc9835ed655495604e354911c11b62791d839a9336d76f7df5fa987ba674c57a"
    },
    {
      "module_id": "test_transpiler_demo",
      "path": "test_transpiler_demo.py",
      "category": "test",
      "module_doc": "Demo script for AI Transpiler\nCreates a small Python project and transpiles it to Go",
      "functions": [
        {
          "name": "create_demo_python_project",
          "docstring": "Create a small demo Python project",
          "line_range": [
            19,
            248
          ],
          "parameters": [
            "project_dir"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Demo the AI transpiler",
          "line_range": [
            250,
            330
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "create_demo_python_project": [
          "Path",
          "project_path.mkdir",
          "print",
          "str"
        ],
        "main": [
          "TranspilerConfig",
          "tempfile.TemporaryDirectory",
          "print",
          "list",
          "content.split",
          "output_path.rglob",
          "shutil.copytree",
          "traceback.print_exc",
          "len",
          "sample_file.relative_to",
          "create_demo_python_project",
          "shutil.rmtree",
          "transpiler.transpile_project",
          "AITranspiler",
          "sample_file.read_text",
          "Path"
        ]
      },
      "dependencies": [
        "AITranspiler",
        "Language",
        "Path",
        "TranspilerConfig",
        "llmstruct.parsers.universal_converter",
        "llmstruct.transpiler",
        "os",
        "pathlib",
        "shutil",
        "sys",
        "tempfile",
        "traceback"
      ],
      "hash": "de9283034095787ded25a62d6061cf966748b51e3b4adfd84976288f43793217"
    },
    {
      "module_id": "test_cli_demo",
      "path": "test_cli_demo.py",
      "category": "test",
      "module_doc": "Quick CLI test to demonstrate new commands",
      "functions": [
        {
          "name": "test_interactive_cli",
          "docstring": "Test interactive CLI with new commands",
          "line_range": [
            10,
            69
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_interactive_cli": [
          "subprocess.run",
          "print"
        ]
      },
      "dependencies": [
        "subprocess",
        "sys",
        "time"
      ],
      "hash": "d763421f609cb8cc8edb0c8fa38b361ae6e95b375833371f9b78ac98555279f7"
    },
    {
      "module_id": "test_ai_bridge",
      "path": "test_ai_bridge.py",
      "category": "test",
      "module_doc": "Test AI Bridge functionality - bypassing Cursor terminal issues",
      "functions": [
        {
          "name": "test_ai_bridge",
          "docstring": "Test AI Bridge functionality.",
          "line_range": [
            13,
            100
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_specific_test",
          "docstring": "Run specific AI Bridge command.",
          "line_range": [
            102,
            131
          ],
          "parameters": [
            "command"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_ai_bridge": [
          "guide.get",
          "print",
          "bridge.ai_get_context",
          "traceback.print_exc",
          "duplicates.get",
          "len",
          "suggestions.get",
          "bridge.ai_check_duplicates",
          "dup_summary.get",
          "bridge.ai_get_onboarding_guide",
          "task_analysis.get",
          "ai_guidance.get",
          "bridge.ai_suggest",
          "CursorAIBridge",
          "context.get",
          "bridge.ai_analyze_task"
        ],
        "run_specific_test": [
          "print",
          "bridge.ai_get_context",
          "bridge.ai_check_duplicates",
          "bridge.ai_get_onboarding_guide",
          "json.dumps",
          "bridge.ai_suggest",
          "str",
          "CursorAIBridge",
          "bridge.ai_analyze_task"
        ]
      },
      "dependencies": [
        "CursorAIBridge",
        "Path",
        "json",
        "llmstruct.cursor_ai_bridge",
        "pathlib",
        "sys",
        "traceback"
      ],
      "hash": "3160ea6601edcc6fb68e6fe3c10781ac4cdf61b30c31aed54401240563fd204b"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": [
            6,
            8
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": [
            11,
            13
          ],
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": "70fff4b692f6900035193847d1d43f0c5a32cc21033f9bca1752854d86bad1ed"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": [
            6,
            9
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": [
            15,
            17
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": [
            12,
            17
          ],
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": [
                15,
                17
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "utils.helper",
          "print"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": "510144e1a60708ee61e9b3261f619e416139a7d102c2c038af07810087c672b6"
    },
    {
      "module_id": "docs.test_self_run",
      "path": "docs/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": [
            15,
            22
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": [
            24,
            34
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": [
            36,
            48
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": [
            50,
            67
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": [
            69,
            73
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "str",
          "select_json",
          "json.dump",
          "open"
        ],
        "test_cache_json": [
          "JSONCache",
          "cache.get_full_json",
          "cache.close",
          "cache.cache_json",
          "json.dump",
          "str",
          "cache.get_metadata",
          "open"
        ],
        "test_attach_to_llm_request_init_json": [
          "JSONCache",
          "attach_to_llm_request",
          "cache.close",
          "json.dump",
          "str",
          "open"
        ],
        "test_attach_to_llm_request_missing_file": [
          "attach_to_llm_request",
          "str"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "attach_to_llm_request",
        "filter_json",
        "filter_struct",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "pathlib",
        "pytest",
        "select_json"
      ],
      "hash": "b139aa6febfe24eec888f0597e061092ca4000fdfa3877fa4cc5c23a86c64bdb"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            18,
            22
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            24,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            44,
            64
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            66,
            79
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            81,
            94
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            96,
            98
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            17,
            98
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                18,
                22
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                24,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                44,
                64
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                66,
                79
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                81,
                94
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                96,
                98
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "hashlib.sha256",
          "f.read",
          "json_file.exists",
          "str",
          "json.dumps",
          "Path",
          "content.encode",
          "logging.info",
          "logging.error",
          "open"
        ],
        "get_metadata": [
          "cursor.fetchone",
          "json.loads"
        ],
        "get_full_json": [
          "json.load",
          "cursor.fetchone",
          "logging.error",
          "open"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": "0639e2f3c27b70d02596862e63d49bc84c48ca8d0d0c8778b2d42425598acc1e"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": [
            17,
            35
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            37,
            74
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "prompt.lower",
          "struct.get",
          "filter_json",
          "any",
          "module.get"
        ],
        "attach_to_llm_request": [
          "context_file.exists",
          "prompt.lower",
          "cache.get_full_json",
          "filter_struct",
          "select_json",
          "filter_json",
          "cache.cache_json",
          "json.dumps",
          "Path",
          "logging.info",
          "cache.get_metadata",
          "logging.error"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": "894d0cb3c48c80975d0bd6f3c6920b835e98f4dfe7de68ef5c6e01e1bb300534"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            17,
            29
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            31,
            72
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "item.get",
          "filtered.append",
          "data.get",
          "isinstance"
        ],
        "select_json": [
          "ijson.parse",
          "current_item.get",
          "path.append",
          "f.seek",
          "prefix.startswith",
          "filter_json",
          "filtered.append",
          "json_file.exists",
          "Path",
          "json.load",
          "logging.error",
          "open"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "21ea37c015ac1ab1932e3784ab8cbd041de37be59ba72d3ad9432d5d3391523f"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            26,
            36
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            38,
            47
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            49,
            58
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": [
            60,
            74
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            76,
            83
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            85,
            195
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            197,
            237
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            239,
            260
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            262,
            264
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            266,
            268
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            270,
            272
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            274,
            334
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.strip",
          "gitignore_path.open",
          "gitignore_path.exists",
          "line.startswith",
          "Path",
          "logging.error"
        ],
        "load_config": [
          "config_path.exists",
          "toml.load",
          "config_pathオープン",
          "Path",
          "logging.error"
        ],
        "read_file_content": [
          "f.read",
          "path.open",
          "Path",
          "path.is_file",
          "logging.error"
        ],
        "write_to_file": [
          "logging.error",
          "logging.warning",
          "file_path.open",
          "base_path.mkdir",
          "f.write",
          "str",
          "Path",
          "logging.info",
          "file_path.exists"
        ],
        "parse_files_from_response": [
          "files.append",
          "content.strip",
          "filename.strip",
          "re.findall"
        ],
        "interactive": [
          "input",
          "scan_match.group",
          "user_input.lower",
          "logging.warning",
          "read_file_content",
          "cache.close",
          "files_to_write.append",
          "parse",
          "get_folder_structure",
          "print",
          "write_dir.startswith",
          "load_gitignore",
          "attach_to_llm_request",
          "json.dumps",
          "re.search",
          "logging.error",
          "write_to_file",
          "JSONCache",
          "os.listdir",
          "write_match.group",
          "LLMClient",
          "sorted",
          "client.query",
          "Path",
          "parse_files_from_response"
        ],
        "parse": [
          "generate_json",
          "JSONCache",
          "config.get",
          "load_gitignore",
          "logging.warning",
          "load_config",
          "cache.close",
          "cache.cache_json",
          "json.dump",
          "Path",
          "logging.info",
          "logging.error"
        ],
        "query": [
          "JSONCache",
          "LLMClient",
          "cache.close",
          "client.query",
          "json.dump",
          "Path",
          "logging.info",
          "logging.error"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "argparse.ArgumentParser",
          "parser.add_subparsers",
          "subparsers.add_parser",
          "interactive",
          "review_parser.add_argument",
          "context_parser.add_argument",
          "parser.parse_args",
          "asyncio.run",
          "parse_parser.add_argument",
          "interactive_parser.add_argument",
          "parse",
          "dogfood",
          "query_parser.add_argument",
          "review",
          "context",
          "dogfood_parser.add_argument",
          "query"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": "26cffb7c31d1f379e0dcc75d668fd872ffe10d408cfb92cc81172aeca774fffc"
    },
    {
      "module_id": "temp.quick_restore",
      "path": "temp/quick_restore.py",
      "category": "core",
      "module_doc": "Quick AI Context Restoration Script\nRun this after Cursor restart to verify system state and get immediate context",
      "functions": [
        {
          "name": "print_header",
          "docstring": "",
          "line_range": [
            12,
            14
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_system_files",
          "docstring": "Check if all key files exist.",
          "line_range": [
            16,
            38
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_workflow_orchestrator",
          "docstring": "Test WorkflowOrchestrator import and basic functionality.",
          "line_range": [
            40,
            78
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_status",
          "docstring": "Show current system status summary.",
          "line_range": [
            80,
            87
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_next_steps",
          "docstring": "Show recommended next steps.",
          "line_range": [
            89,
            95
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_restoration_info",
          "docstring": "Show how to restore AI context.",
          "line_range": [
            97,
            103
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main restoration check.",
          "line_range": [
            105,
            128
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "print_header": [
          "print"
        ],
        "check_system_files": [
          "Path",
          "print"
        ],
        "test_workflow_orchestrator": [
          "WorkflowOrchestrator",
          "print",
          "wo.get_current_context",
          "len",
          "context.get",
          "stats.get"
        ],
        "show_current_status": [
          "print"
        ],
        "show_next_steps": [
          "print"
        ],
        "show_restoration_info": [
          "print"
        ],
        "main": [
          "check_system_files",
          "print",
          "show_next_steps",
          "show_current_status",
          "show_restoration_info",
          "test_workflow_orchestrator",
          "print_header"
        ]
      },
      "dependencies": [
        "Path",
        "WorkflowOrchestrator",
        "json",
        "llmstruct.workflow_orchestrator",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": "198942694df80d30c9be8eed1453e202540f1440e291a9b47a4250d550634eab"
    },
    {
      "module_id": ".personal.commercial_planning",
      "path": ".personal/commercial_planning.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    {
      "module_id": "src.llmstruct.workflow_orchestrator",
      "path": "src/llmstruct/workflow_orchestrator.py",
      "category": "core",
      "module_doc": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture\nExtends CopilotContextManager and SmartContextOrchestrator instead of duplicating",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface that integrates with existing llmstruct architecture",
          "line_range": [
            650,
            687
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            62,
            70
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            89,
            101
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            110,
            151
          ],
          "parameters": [
            "self",
            "project_root",
            "debug"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_onboarding_guide",
          "docstring": "Generate comprehensive AI onboarding guide using existing architecture",
          "line_range": [
            153,
            163
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_project_overview_from_struct",
          "docstring": "Get project overview from struct.json analysis",
          "line_range": [
            165,
            183
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_existing_architecture_guide",
          "docstring": "Guide to existing llmstruct architecture",
          "line_range": [
            185,
            207
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_copilot_integration_guide",
          "docstring": "Guide for proper CopilotContextManager usage",
          "line_range": [
            209,
            222
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_orchestration_guide",
          "docstring": "Guide for SmartContextOrchestrator usage",
          "line_range": [
            224,
            239
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_analysis_guide",
          "docstring": "Guide for proper struct.json analysis approach",
          "line_range": [
            241,
            259
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_current_context",
          "docstring": "Get comprehensive current context using existing architecture",
          "line_range": [
            261,
            300
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_analysis",
          "docstring": "Analyze struct.json for current codebase state",
          "line_range": [
            302,
            356
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_architecture_from_struct",
          "docstring": "Analyze architecture patterns from struct.json",
          "line_range": [
            358,
            376
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_function_duplication",
          "docstring": "Analyze function duplication across modules",
          "line_range": [
            378,
            399
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_metrics",
          "docstring": "Calculate complexity metrics from struct.json",
          "line_range": [
            401,
            417
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_score",
          "docstring": "Calculate overall complexity score",
          "line_range": [
            419,
            432
          ],
          "parameters": [
            "self",
            "stats"
          ],
          "decorators": []
        },
        {
          "name": "_get_orchestrator_state",
          "docstring": "Get SmartContextOrchestrator state",
          "line_range": [
            434,
            445
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_codebase_for_duplicates",
          "docstring": "Analyze codebase for duplicate functions using struct.json",
          "line_range": [
            447,
            495
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "sync_with_existing_architecture",
          "docstring": "Sync with existing llmstruct architecture instead of duplicating",
          "line_range": [
            497,
            520
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "create_task",
          "docstring": "Create new task (this is new functionality, not duplication)",
          "line_range": [
            526,
            554
          ],
          "parameters": [
            "self",
            "title",
            "description",
            "priority",
            "tags",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_active_tasks",
          "docstring": "Get all active tasks",
          "line_range": [
            556,
            564
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_json_safe",
          "docstring": "Safe JSON loading with error handling",
          "line_range": [
            566,
            576
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_save_json_safe",
          "docstring": "Safe JSON saving with error handling",
          "line_range": [
            578,
            587
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_get_active_session_context",
          "docstring": "Get current session context",
          "line_range": [
            590,
            594
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_identify_key_components",
          "docstring": "Identify key components from struct analysis",
          "line_range": [
            596,
            607
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_patterns",
          "docstring": "Define workflow patterns that integrate with existing architecture",
          "line_range": [
            609,
            629
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_available_commands",
          "docstring": "Available commands that work with existing architecture",
          "line_range": [
            631,
            647
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskStatus",
          "docstring": "",
          "line_range": [
            29,
            34
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "SessionType",
          "docstring": "",
          "line_range": [
            37,
            42
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "Task",
          "docstring": "Structured task representation",
          "line_range": [
            46,
            70
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                62,
                70
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "Session",
          "docstring": "AI work session with context and goals",
          "line_range": [
            74,
            101
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                89,
                101
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "WorkflowOrchestrator",
          "docstring": "Integration layer that extends existing llmstruct architecture\nUses CopilotContextManager, SmartContextOrchestrator, and struct.json analysis",
          "line_range": [
            104,
            647
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                110,
                151
              ],
              "parameters": [
                "self",
                "project_root",
                "debug"
              ]
            },
            {
              "name": "get_ai_onboarding_guide",
              "docstring": "Generate comprehensive AI onboarding guide using existing architecture",
              "line_range": [
                153,
                163
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_project_overview_from_struct",
              "docstring": "Get project overview from struct.json analysis",
              "line_range": [
                165,
                183
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_existing_architecture_guide",
              "docstring": "Guide to existing llmstruct architecture",
              "line_range": [
                185,
                207
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_copilot_integration_guide",
              "docstring": "Guide for proper CopilotContextManager usage",
              "line_range": [
                209,
                222
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_context_orchestration_guide",
              "docstring": "Guide for SmartContextOrchestrator usage",
              "line_range": [
                224,
                239
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_analysis_guide",
              "docstring": "Guide for proper struct.json analysis approach",
              "line_range": [
                241,
                259
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_current_context",
              "docstring": "Get comprehensive current context using existing architecture",
              "line_range": [
                261,
                300
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_analysis",
              "docstring": "Analyze struct.json for current codebase state",
              "line_range": [
                302,
                356
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_architecture_from_struct",
              "docstring": "Analyze architecture patterns from struct.json",
              "line_range": [
                358,
                376
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_analyze_function_duplication",
              "docstring": "Analyze function duplication across modules",
              "line_range": [
                378,
                399
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_calculate_complexity_metrics",
              "docstring": "Calculate complexity metrics from struct.json",
              "line_range": [
                401,
                417
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_calculate_complexity_score",
              "docstring": "Calculate overall complexity score",
              "line_range": [
                419,
                432
              ],
              "parameters": [
                "self",
                "stats"
              ]
            },
            {
              "name": "_get_orchestrator_state",
              "docstring": "Get SmartContextOrchestrator state",
              "line_range": [
                434,
                445
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_codebase_for_duplicates",
              "docstring": "Analyze codebase for duplicate functions using struct.json",
              "line_range": [
                447,
                495
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "sync_with_existing_architecture",
              "docstring": "Sync with existing llmstruct architecture instead of duplicating",
              "line_range": [
                497,
                520
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "create_task",
              "docstring": "Create new task (this is new functionality, not duplication)",
              "line_range": [
                526,
                554
              ],
              "parameters": [
                "self",
                "title",
                "description",
                "priority",
                "tags",
                "dependencies"
              ]
            },
            {
              "name": "get_active_tasks",
              "docstring": "Get all active tasks",
              "line_range": [
                556,
                564
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_json_safe",
              "docstring": "Safe JSON loading with error handling",
              "line_range": [
                566,
                576
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_save_json_safe",
              "docstring": "Safe JSON saving with error handling",
              "line_range": [
                578,
                587
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            },
            {
              "name": "_get_active_session_context",
              "docstring": "Get current session context",
              "line_range": [
                590,
                594
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_identify_key_components",
              "docstring": "Identify key components from struct analysis",
              "line_range": [
                596,
                607
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_get_workflow_patterns",
              "docstring": "Define workflow patterns that integrate with existing architecture",
              "line_range": [
                609,
                629
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_available_commands",
              "docstring": "Available commands that work with existing architecture",
              "line_range": [
                631,
                647
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "CopilotContextManager",
          "print",
          "UniversalConverter",
          "SystemCapabilityDiscovery",
          "str",
          "Path",
          "CLIConfig",
          "SmartContextOrchestrator",
          "time.time"
        ],
        "get_ai_onboarding_guide": [
          "self._get_context_orchestration_guide",
          "self._get_workflow_patterns",
          "self._get_struct_analysis_guide",
          "self._get_available_commands",
          "self._get_copilot_integration_guide",
          "self._get_existing_architecture_guide",
          "self._get_project_overview_from_struct"
        ],
        "_get_project_overview_from_struct": [
          "logger.warning",
          "self._analyze_architecture_from_struct",
          "struct_data.get",
          "struct_path.exists",
          "len",
          "self._identify_key_components",
          "json.load",
          "open"
        ],
        "_get_existing_architecture_guide": [],
        "_get_copilot_integration_guide": [],
        "_get_context_orchestration_guide": [],
        "_get_struct_analysis_guide": [],
        "get_current_context": [
          "self._get_orchestrator_state",
          "self.get_active_tasks",
          "print",
          "logger.warning",
          "self._get_active_session_context",
          "self._get_struct_analysis",
          "isinstance",
          "str",
          "time.time"
        ],
        "_get_struct_analysis": [
          "time.time",
          "print",
          "self._analyze_architecture_from_struct",
          "struct_data.get",
          "struct_path.exists",
          "len",
          "logger.error",
          "str",
          "json.load",
          "self._analyze_function_duplication",
          "self._calculate_complexity_metrics",
          "open"
        ],
        "_analyze_architecture_from_struct": [
          "directories.keys",
          "list",
          "struct_data.get",
          "len",
          "Path",
          "directories.items"
        ],
        "_analyze_function_duplication": [
          "function_names.items",
          "struct_data.get",
          "module.get",
          "len"
        ],
        "_calculate_complexity_metrics": [
          "self._calculate_complexity_score",
          "struct_data.get",
          "len",
          "stats.get",
          "round",
          "m.get",
          "sum"
        ],
        "_calculate_complexity_score": [
          "stats.get",
          "round"
        ],
        "_get_orchestrator_state": [
          "str"
        ],
        "analyze_codebase_for_duplicates": [
          "print",
          "recommendations.append",
          "struct_analysis.get",
          "duplication.get",
          "len",
          "self._get_struct_analysis",
          "time.time"
        ],
        "sync_with_existing_architecture": [
          "logger.error",
          "json.dump",
          "str",
          "open"
        ],
        "create_task": [
          "self._save_json_safe",
          "logger.info",
          "uuid.uuid4",
          "str",
          "self._load_json_safe",
          "asdict",
          "Task"
        ],
        "get_active_tasks": [
          "t.get",
          "self._load_json_safe"
        ],
        "_load_json_safe": [
          "json.load",
          "logger.error",
          "file_path.exists",
          "open"
        ],
        "_save_json_safe": [
          "logger.error",
          "json.dump",
          "open"
        ],
        "_get_active_session_context": [
          "asdict"
        ],
        "_identify_key_components": [
          "struct_data.get",
          "module.get",
          "key_components.append",
          "len"
        ],
        "_get_workflow_patterns": [],
        "_get_available_commands": [],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "orchestrator.sync_with_existing_architecture",
          "WorkflowOrchestrator",
          "orchestrator.get_ai_onboarding_guide",
          "print",
          "results.items",
          "parser.parse_args",
          "len",
          "orchestrator.analyze_codebase_for_duplicates",
          "json.dumps",
          "context.get",
          "orchestrator.get_current_context"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "SystemCapabilityDiscovery",
        "Union",
        "UniversalConverter",
        "ai_self_awareness",
        "argparse",
        "asdict",
        "cli_config",
        "context_orchestrator",
        "copilot",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "os",
        "parsers.universal_converter",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": "6a74a0602bdd6d8fcf4989c77c784c041b3272e9ad7d14d6e42e701c07d17c40"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "module_doc": "CLI configuration management.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize configuration manager.",
          "line_range": [
            20,
            24
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from llmstruct.toml.",
          "line_range": [
            26,
            34
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "Get cache configuration section.",
          "line_range": [
            36,
            38
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "Get Copilot configuration section.",
          "line_range": [
            40,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "Get queue configuration section.",
          "line_range": [
            44,
            46
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "Get context configuration section.",
          "line_range": [
            48,
            50
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_gitignore_patterns",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            52,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "Get directories to exclude from scanning.",
          "line_range": [
            68,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "Get file patterns to include.",
          "line_range": [
            84,
            89
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "Get file patterns to exclude.",
          "line_range": [
            91,
            96
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "Get maximum file size for processing (in bytes).",
          "line_range": [
            98,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_auto_update_config",
          "docstring": "Get auto-update configuration.",
          "line_range": [
            102,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_auto_update_enabled",
          "docstring": "Check if auto-update is enabled.",
          "line_range": [
            106,
            108
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "Get path to struct.json file.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "Get path to context file.",
          "line_range": [
            114,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "Save current configuration to file.",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_config",
          "docstring": "Update configuration value.",
          "line_range": [
            126,
            131
          ],
          "parameters": [
            "self",
            "section",
            "key",
            "value"
          ],
          "decorators": []
        },
        {
          "name": "reload_config",
          "docstring": "Reload configuration from file.",
          "line_range": [
            133,
            135
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIConfig",
          "docstring": "Manages CLI configuration from llmstruct.toml and other sources.",
          "line_range": [
            17,
            135
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize configuration manager.",
              "line_range": [
                20,
                24
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from llmstruct.toml.",
              "line_range": [
                26,
                34
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cache_config",
              "docstring": "Get cache configuration section.",
              "line_range": [
                36,
                38
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_copilot_config",
              "docstring": "Get Copilot configuration section.",
              "line_range": [
                40,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_queue_config",
              "docstring": "Get queue configuration section.",
              "line_range": [
                44,
                46
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_config",
              "docstring": "Get context configuration section.",
              "line_range": [
                48,
                50
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_gitignore_patterns",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": [
                52,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "Get directories to exclude from scanning.",
              "line_range": [
                68,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_include_patterns",
              "docstring": "Get file patterns to include.",
              "line_range": [
                84,
                89
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "Get file patterns to exclude.",
              "line_range": [
                91,
                96
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_max_file_size",
              "docstring": "Get maximum file size for processing (in bytes).",
              "line_range": [
                98,
                100
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_auto_update_config",
              "docstring": "Get auto-update configuration.",
              "line_range": [
                102,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_auto_update_enabled",
              "docstring": "Check if auto-update is enabled.",
              "line_range": [
                106,
                108
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_struct_file_path",
              "docstring": "Get path to struct.json file.",
              "line_range": [
                110,
                112
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_file_path",
              "docstring": "Get path to context file.",
              "line_range": [
                114,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_config",
              "docstring": "Save current configuration to file.",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_config",
              "docstring": "Update configuration value.",
              "line_range": [
                126,
                131
              ],
              "parameters": [
                "self",
                "section",
                "key",
                "value"
              ]
            },
            {
              "name": "reload_config",
              "docstring": "Reload configuration from file.",
              "line_range": [
                133,
                135
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config"
        ],
        "_load_config": [
          "toml.load",
          "logging.error"
        ],
        "get_cache_config": [],
        "get_copilot_config": [],
        "get_queue_config": [],
        "get_context_config": [],
        "get_gitignore_patterns": [
          "line.strip",
          "gitignore_path.open",
          "gitignore_path.exists",
          "line.startswith",
          "Path",
          "logging.error"
        ],
        "get_exclude_dirs": [
          "list",
          "set",
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_include_patterns": [
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_exclude_patterns": [
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_max_file_size": [],
        "get_auto_update_config": [],
        "is_auto_update_enabled": [
          "self.get_auto_update_config"
        ],
        "get_struct_file_path": [],
        "get_context_file_path": [],
        "save_config": [
          "toml.dump",
          "logging.error"
        ],
        "update_config": [
          "self.save_config"
        ],
        "reload_config": [
          "self._load_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "logging",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": "4e3a5903ff3fcd932118bf5521902da18bc72c67f93835354f70576d1413de49"
    },
    {
      "module_id": "src.llmstruct.ai_self_monitor",
      "path": "src/llmstruct/ai_self_monitor.py",
      "category": "core",
      "module_doc": "AI Self-Monitoring System\nTracks AI usage patterns and ensures proper llmstruct integration.",
      "functions": [
        {
          "name": "initialize_ai_monitor",
          "docstring": "Initialize global AI monitor.",
          "line_range": [
            433,
            437
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_monitor",
          "docstring": "Get current AI monitor instance.",
          "line_range": [
            440,
            442
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "record_ai_usage",
          "docstring": "Global function to record AI usage.",
          "line_range": [
            445,
            456
          ],
          "parameters": [
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            60,
            80
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "record_ai_interaction",
          "docstring": "Record an AI interaction for monitoring.",
          "line_range": [
            82,
            121
          ],
          "parameters": [
            "self",
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_interaction_patterns",
          "docstring": "Analyze patterns in AI interaction.",
          "line_range": [
            123,
            157
          ],
          "parameters": [
            "self",
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_effectiveness_score",
          "docstring": "Calculate effectiveness score for interaction.",
          "line_range": [
            159,
            188
          ],
          "parameters": [
            "self",
            "patterns",
            "tools_used",
            "used_llmstruct"
          ],
          "decorators": []
        },
        {
          "name": "_check_immediate_feedback",
          "docstring": "Check if immediate feedback/correction is needed.",
          "line_range": [
            190,
            209
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_log_immediate_feedback",
          "docstring": "Log immediate feedback message.",
          "line_range": [
            211,
            214
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "analyze_behavior_trends",
          "docstring": "Analyze AI behavior trends over specified period.",
          "line_range": [
            216,
            300
          ],
          "parameters": [
            "self",
            "days"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "Generate specific recommendations for improvement.",
          "line_range": [
            302,
            335
          ],
          "parameters": [
            "self",
            "llmstruct_usage",
            "context_awareness",
            "tool_diversity",
            "effectiveness"
          ],
          "decorators": []
        },
        {
          "name": "get_real_time_guidance",
          "docstring": "Get real-time guidance for current query.",
          "line_range": [
            337,
            365
          ],
          "parameters": [
            "self",
            "current_query"
          ],
          "decorators": []
        },
        {
          "name": "_load_events",
          "docstring": "Load events from disk.",
          "line_range": [
            367,
            379
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_events",
          "docstring": "Save events to disk.",
          "line_range": [
            381,
            388
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_analysis",
          "docstring": "Save behavior analysis to disk.",
          "line_range": [
            390,
            397
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "get_monitoring_report",
          "docstring": "Get comprehensive monitoring report.",
          "line_range": [
            399,
            426
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AIBehaviorPattern",
          "docstring": "AI behavior patterns to monitor.",
          "line_range": [
            18,
            26
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AIUsageEvent",
          "docstring": "Single AI usage event.",
          "line_range": [
            30,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIBehaviorAnalysis",
          "docstring": "Analysis of AI behavior patterns.",
          "line_range": [
            43,
            51
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AISelfMonitor",
          "docstring": "Monitors AI behavior and ensures proper llmstruct integration.\nProvides feedback and corrective guidance.",
          "line_range": [
            54,
            426
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                60,
                80
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "record_ai_interaction",
              "docstring": "Record an AI interaction for monitoring.",
              "line_range": [
                82,
                121
              ],
              "parameters": [
                "self",
                "query",
                "tools_used",
                "used_llmstruct",
                "context_tags",
                "metadata"
              ]
            },
            {
              "name": "_analyze_interaction_patterns",
              "docstring": "Analyze patterns in AI interaction.",
              "line_range": [
                123,
                157
              ],
              "parameters": [
                "self",
                "query",
                "tools_used",
                "used_llmstruct",
                "context_tags"
              ]
            },
            {
              "name": "_calculate_effectiveness_score",
              "docstring": "Calculate effectiveness score for interaction.",
              "line_range": [
                159,
                188
              ],
              "parameters": [
                "self",
                "patterns",
                "tools_used",
                "used_llmstruct"
              ]
            },
            {
              "name": "_check_immediate_feedback",
              "docstring": "Check if immediate feedback/correction is needed.",
              "line_range": [
                190,
                209
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_log_immediate_feedback",
              "docstring": "Log immediate feedback message.",
              "line_range": [
                211,
                214
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "analyze_behavior_trends",
              "docstring": "Analyze AI behavior trends over specified period.",
              "line_range": [
                216,
                300
              ],
              "parameters": [
                "self",
                "days"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "Generate specific recommendations for improvement.",
              "line_range": [
                302,
                335
              ],
              "parameters": [
                "self",
                "llmstruct_usage",
                "context_awareness",
                "tool_diversity",
                "effectiveness"
              ]
            },
            {
              "name": "get_real_time_guidance",
              "docstring": "Get real-time guidance for current query.",
              "line_range": [
                337,
                365
              ],
              "parameters": [
                "self",
                "current_query"
              ]
            },
            {
              "name": "_load_events",
              "docstring": "Load events from disk.",
              "line_range": [
                367,
                379
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_events",
              "docstring": "Save events to disk.",
              "line_range": [
                381,
                388
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_analysis",
              "docstring": "Save behavior analysis to disk.",
              "line_range": [
                390,
                397
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "get_monitoring_report",
              "docstring": "Get comprehensive monitoring report.",
              "line_range": [
                399,
                426
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_events",
          "logger.info"
        ],
        "record_ai_interaction": [
          "self._save_events",
          "AIUsageEvent",
          "len",
          "self._check_immediate_feedback",
          "self._analyze_interaction_patterns",
          "datetime.now",
          "self._calculate_effectiveness_score"
        ],
        "_analyze_interaction_patterns": [
          "any",
          "patterns.append",
          "query.lower"
        ],
        "_calculate_effectiveness_score": [
          "len",
          "set",
          "pattern_scores.get",
          "min"
        ],
        "_check_immediate_feedback": [
          "self._log_immediate_feedback",
          "any"
        ],
        "_log_immediate_feedback": [
          "print",
          "logger.warning"
        ],
        "analyze_behavior_trends": [
          "self._generate_recommendations",
          "timedelta",
          "all_tools.update",
          "AIBehaviorAnalysis",
          "strengths.append",
          "datetime.fromisoformat",
          "len",
          "set",
          "self._save_analysis",
          "datetime.now",
          "improvements.append",
          "any",
          "sum"
        ],
        "_generate_recommendations": [
          "recommendations.extend",
          "recommendations.append"
        ],
        "get_real_time_guidance": [
          "current_query.lower",
          "any",
          "guidance.append"
        ],
        "_load_events": [
          "AIUsageEvent",
          "len",
          "logger.error",
          "logger.info",
          "json.load",
          "open"
        ],
        "_save_events": [
          "asdict",
          "logger.error",
          "json.dump",
          "open"
        ],
        "_save_analysis": [
          "asdict",
          "logger.error",
          "json.dump",
          "open"
        ],
        "get_monitoring_report": [
          "self.analyze_behavior_trends",
          "chr",
          "datetime.now",
          "len"
        ],
        "initialize_ai_monitor": [
          "AISelfMonitor"
        ],
        "get_ai_monitor": [],
        "record_ai_usage": [
          "_monitor_instance.record_ai_interaction"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": "312d43ae77d168866f0ce34f6f89d119d4dc338568049a9611997c4dee8059b4"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": [
            24,
            30
          ],
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            6,
            11
          ],
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": [
            13,
            21
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": [
            5,
            21
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                6,
                11
              ],
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": [
                13,
                21
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "response.raise_for_status",
          "response.json",
          "prompt.split",
          "len"
        ],
        "test_grok": [
          "time.perf_counter",
          "GrokClient",
          "client.generate"
        ]
      },
      "dependencies": [
        "requests",
        "time"
      ],
      "hash": "b6bbedf1c8576d9a3f89f34490ff01f2ff2662991c93033ef3dadb5cd99929d2"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "module_doc": "CLI command processing and handlers.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize command processor.",
          "line_range": [
            33,
            72
          ],
          "parameters": [
            "self",
            "root_dir",
            "config",
            "utils"
          ],
          "decorators": []
        },
        {
          "name": "set_cache",
          "docstring": "Set cache instance.",
          "line_range": [
            74,
            76
          ],
          "parameters": [
            "self",
            "cache"
          ],
          "decorators": []
        },
        {
          "name": "set_copilot",
          "docstring": "Set Copilot manager instance.",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "self",
            "copilot_manager"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "Process a command starting with /.",
          "line_range": [
            82,
            98
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "process_prompt",
          "docstring": "Process a regular user prompt (not a command).",
          "line_range": [
            100,
            152
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Show help information.",
          "line_range": [
            154,
            217
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace",
          "docstring": "Handle workspace state and permissions management.",
          "line_range": [
            219,
            334
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_mode",
          "docstring": "Handle context mode operations with workspace integration.",
          "line_range": [
            336,
            437
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_view",
          "docstring": "View file or directory contents.",
          "line_range": [
            439,
            478
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_write",
          "docstring": "Write content to a file.",
          "line_range": [
            480,
            505
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_queue",
          "docstring": "Handle queue operations.",
          "line_range": [
            507,
            549
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_cache",
          "docstring": "Handle cache operations.",
          "line_range": [
            551,
            590
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_copilot",
          "docstring": "Handle Copilot operations.",
          "line_range": [
            592,
            626
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_config",
          "docstring": "Handle configuration operations.",
          "line_range": [
            628,
            660
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Show system status.",
          "line_range": [
            662,
            676
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_backup",
          "docstring": "Create backup of a file.",
          "line_range": [
            678,
            693
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_parse",
          "docstring": "Parse project structure.",
          "line_range": [
            695,
            715
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_audit",
          "docstring": "Handle audit operations.",
          "line_range": [
            717,
            743
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_auto_update",
          "docstring": "Handle auto-update operations.",
          "line_range": [
            745,
            765
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_struct_status",
          "docstring": "Handle struct status operations.",
          "line_range": [
            767,
            791
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context",
          "docstring": "Handle context operations.",
          "line_range": [
            793,
            849
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_session",
          "docstring": "Handle session operations.",
          "line_range": [
            851,
            902
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CommandProcessor",
          "docstring": "Processes CLI commands and user prompts.",
          "line_range": [
            30,
            902
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize command processor.",
              "line_range": [
                33,
                72
              ],
              "parameters": [
                "self",
                "root_dir",
                "config",
                "utils"
              ]
            },
            {
              "name": "set_cache",
              "docstring": "Set cache instance.",
              "line_range": [
                74,
                76
              ],
              "parameters": [
                "self",
                "cache"
              ]
            },
            {
              "name": "set_copilot",
              "docstring": "Set Copilot manager instance.",
              "line_range": [
                78,
                80
              ],
              "parameters": [
                "self",
                "copilot_manager"
              ]
            },
            {
              "name": "process_command",
              "docstring": "Process a command starting with /.",
              "line_range": [
                82,
                98
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "process_prompt",
              "docstring": "Process a regular user prompt (not a command).",
              "line_range": [
                100,
                152
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Show help information.",
              "line_range": [
                154,
                217
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace",
              "docstring": "Handle workspace state and permissions management.",
              "line_range": [
                219,
                334
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_mode",
              "docstring": "Handle context mode operations with workspace integration.",
              "line_range": [
                336,
                437
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_view",
              "docstring": "View file or directory contents.",
              "line_range": [
                439,
                478
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_write",
              "docstring": "Write content to a file.",
              "line_range": [
                480,
                505
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_queue",
              "docstring": "Handle queue operations.",
              "line_range": [
                507,
                549
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_cache",
              "docstring": "Handle cache operations.",
              "line_range": [
                551,
                590
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_copilot",
              "docstring": "Handle Copilot operations.",
              "line_range": [
                592,
                626
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_config",
              "docstring": "Handle configuration operations.",
              "line_range": [
                628,
                660
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Show system status.",
              "line_range": [
                662,
                676
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_backup",
              "docstring": "Create backup of a file.",
              "line_range": [
                678,
                693
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_parse",
              "docstring": "Parse project structure.",
              "line_range": [
                695,
                715
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_audit",
              "docstring": "Handle audit operations.",
              "line_range": [
                717,
                743
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_auto_update",
              "docstring": "Handle auto-update operations.",
              "line_range": [
                745,
                765
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_struct_status",
              "docstring": "Handle struct status operations.",
              "line_range": [
                767,
                791
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context",
              "docstring": "Handle context operations.",
              "line_range": [
                793,
                849
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_session",
              "docstring": "Handle session operations.",
              "line_range": [
                851,
                902
              ],
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "WorkspaceStateManager",
          "print"
        ],
        "set_cache": [],
        "set_copilot": [],
        "process_command": [
          "print",
          "command_line.split",
          "len",
          "command_line.strip",
          "logging.error"
        ],
        "process_prompt": [
          "prompt.strip",
          "context_info.get",
          "print",
          "CopilotEvent",
          "get_optimized_context",
          "logging.warning",
          "len",
          "logging.info",
          "context_data.get",
          "logging.error"
        ],
        "cmd_help": [
          "print"
        ],
        "cmd_workspace": [
          "args.strip",
          "override.get",
          "int",
          "entry.get",
          "state.get",
          "print",
          "result.get",
          "len",
          "action_args.split",
          "permissions.get",
          "boundaries.get",
          "logging.error"
        ],
        "cmd_mode": [
          "args.strip",
          "args.lower",
          "print",
          "get_optimized_context",
          "args.upper",
          "len",
          "re.findall",
          "metrics.get",
          "permissions.get",
          "result.get",
          "context_data.get"
        ],
        "cmd_view": [
          "args.strip",
          "os.listdir",
          "sorted",
          "print"
        ],
        "cmd_write": [
          "print",
          "len",
          "content.startswith",
          "args.split",
          "content.endswith"
        ],
        "cmd_queue": [
          "args.strip",
          "print",
          "queue_data.get",
          "enumerate",
          "cmd.get",
          "os.remove",
          "len",
          "json.load",
          "open"
        ],
        "cmd_cache": [
          "args.strip",
          "os.listdir",
          "print",
          "len",
          "stats.get"
        ],
        "cmd_copilot": [
          "args.strip",
          "print",
          "json.dumps",
          "json.load",
          "open"
        ],
        "cmd_config": [
          "args.strip",
          "json.dumps",
          "print"
        ],
        "cmd_status": [
          "print"
        ],
        "cmd_backup": [
          "args.strip",
          "print"
        ],
        "cmd_parse": [
          "generate_json",
          "print"
        ],
        "cmd_audit": [
          "args.strip",
          "print"
        ],
        "handle_auto_update": [
          "generate_json",
          "print"
        ],
        "handle_struct_status": [
          "print",
          "struct_data.get",
          "datetime.fromtimestamp",
          "os.stat",
          "len",
          "json.load",
          "open"
        ],
        "cmd_context": [
          "args.strip",
          "print",
          "get_optimized_context",
          "len",
          "metrics.get",
          "context_data.get"
        ],
        "cmd_session": [
          "args.strip",
          "state.get",
          "print",
          "len",
          "datetime.now"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CopilotContextManager",
        "CopilotEvent",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "WorkspaceStateManager",
        "cli_config",
        "cli_utils",
        "copilot",
        "create_context_orchestrator",
        "datetime",
        "generate_json",
        "get_optimized_context",
        "get_optimized_context_for_scenario",
        "initialize_copilot",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "sys",
        "trigger_copilot_event",
        "typing",
        "workspace"
      ],
      "hash": "dd0d9e75fb410d85bfe10f3e554b2fa45c45847ccb317cd54107e4ac6ce33bec"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "module_doc": "Smart Context Orchestration for LLMStruct\nOptimizes context loading for different LLM usage scenarios",
      "functions": [
        {
          "name": "create_context_orchestrator",
          "docstring": "Factory function to create context orchestrator.",
          "line_range": [
            506,
            508
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context for scenario - convenience function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (cli_direct, vscode_copilot, session_work)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            511,
            543
          ],
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            57,
            75
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load context orchestration configuration.",
          "line_range": [
            77,
            119
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_scenario",
          "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            121,
            161
          ],
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "custom_budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_budget_for_scenario",
          "docstring": "Create budget configuration for scenario.",
          "line_range": [
            163,
            172
          ],
          "parameters": [
            "self",
            "scenario_config"
          ],
          "decorators": []
        },
        {
          "name": "_load_full_context",
          "docstring": "Load complete context without token restrictions.",
          "line_range": [
            174,
            187
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_extract_relationship_summary",
          "docstring": "Извлекает краткий граф связей между модулями из struct.json:\n- module_id, path\n- dependencies (только имена модулей)\n- публичные классы/функции",
          "line_range": [
            189,
            216
          ],
          "parameters": [
            "self",
            "max_modules"
          ],
          "decorators": []
        },
        {
          "name": "_load_focused_context",
          "docstring": "Load focused context optimized for VS Code Copilot.\n- Всегда включает summary из init.json (уровень 1)\n- relationship_context (structural) добавляется только если file_path указывает на исходный код или явно structural запрос",
          "line_range": [
            218,
            275
          ],
          "parameters": [
            "self",
            "file_path",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load session-specific context.",
          "line_range": [
            277,
            299
          ],
          "parameters": [
            "self",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_minimal_context",
          "docstring": "Load minimal context for quick operations.",
          "line_range": [
            301,
            319
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_source_with_filtering",
          "docstring": "Load source with optional filtering based on budget.",
          "line_range": [
            321,
            344
          ],
          "parameters": [
            "self",
            "source_name",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_file_context",
          "docstring": "Get context specific to a file.",
          "line_range": [
            346,
            357
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_essential_parts",
          "docstring": "Extract essential parts of data to fit token budget.",
          "line_range": [
            359,
            381
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_filter_for_current_session",
          "docstring": "Filter data to items relevant to current session.",
          "line_range": [
            383,
            422
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_summary",
          "docstring": "Extract summary information from data.",
          "line_range": [
            424,
            443
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_apply_section_filtering",
          "docstring": "Apply section filtering to exclude specified sections.",
          "line_range": [
            445,
            457
          ],
          "parameters": [
            "self",
            "data",
            "exclude_sections"
          ],
          "decorators": []
        },
        {
          "name": "_update_metrics",
          "docstring": "Update performance metrics.",
          "line_range": [
            459,
            477
          ],
          "parameters": [
            "self",
            "scenario",
            "context",
            "load_time"
          ],
          "decorators": []
        },
        {
          "name": "get_metrics_summary",
          "docstring": "Get summary of context loading metrics.",
          "line_range": [
            479,
            494
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_metrics",
          "docstring": "Save metrics to file for analysis.",
          "line_range": [
            496,
            501
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextMode",
          "docstring": "Context loading modes for different scenarios.",
          "line_range": [
            17,
            22
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLevel",
          "docstring": "Progressive context levels with token budgets.",
          "line_range": [
            25,
            30
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextBudget",
          "docstring": "Token budget configuration for context loading.",
          "line_range": [
            34,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextMetrics",
          "docstring": "Metrics for context loading performance.",
          "line_range": [
            43,
            48
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SmartContextOrchestrator",
          "docstring": "Orchestrates context loading based on usage scenario and token budget.\nProvides optimized context for different LLM integration patterns.",
          "line_range": [
            51,
            501
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                57,
                75
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load context orchestration configuration.",
              "line_range": [
                77,
                119
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_scenario",
              "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
              "line_range": [
                121,
                161
              ],
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "custom_budget"
              ]
            },
            {
              "name": "_get_budget_for_scenario",
              "docstring": "Create budget configuration for scenario.",
              "line_range": [
                163,
                172
              ],
              "parameters": [
                "self",
                "scenario_config"
              ]
            },
            {
              "name": "_load_full_context",
              "docstring": "Load complete context without token restrictions.",
              "line_range": [
                174,
                187
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_extract_relationship_summary",
              "docstring": "Извлекает краткий граф связей между модулями из struct.json:\n- module_id, path\n- dependencies (только имена модулей)\n- публичные классы/функции",
              "line_range": [
                189,
                216
              ],
              "parameters": [
                "self",
                "max_modules"
              ]
            },
            {
              "name": "_load_focused_context",
              "docstring": "Load focused context optimized for VS Code Copilot.\n- Всегда включает summary из init.json (уровень 1)\n- relationship_context (structural) добавляется только если file_path указывает на исходный код или явно structural запрос",
              "line_range": [
                218,
                275
              ],
              "parameters": [
                "self",
                "file_path",
                "budget"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load session-specific context.",
              "line_range": [
                277,
                299
              ],
              "parameters": [
                "self",
                "budget"
              ]
            },
            {
              "name": "_load_minimal_context",
              "docstring": "Load minimal context for quick operations.",
              "line_range": [
                301,
                319
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_source_with_filtering",
              "docstring": "Load source with optional filtering based on budget.",
              "line_range": [
                321,
                344
              ],
              "parameters": [
                "self",
                "source_name",
                "budget"
              ]
            },
            {
              "name": "_get_file_context",
              "docstring": "Get context specific to a file.",
              "line_range": [
                346,
                357
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_essential_parts",
              "docstring": "Extract essential parts of data to fit token budget.",
              "line_range": [
                359,
                381
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_filter_for_current_session",
              "docstring": "Filter data to items relevant to current session.",
              "line_range": [
                383,
                422
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_extract_summary",
              "docstring": "Extract summary information from data.",
              "line_range": [
                424,
                443
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_apply_section_filtering",
              "docstring": "Apply section filtering to exclude specified sections.",
              "line_range": [
                445,
                457
              ],
              "parameters": [
                "self",
                "data",
                "exclude_sections"
              ]
            },
            {
              "name": "_update_metrics",
              "docstring": "Update performance metrics.",
              "line_range": [
                459,
                477
              ],
              "parameters": [
                "self",
                "scenario",
                "context",
                "load_time"
              ]
            },
            {
              "name": "get_metrics_summary",
              "docstring": "Get summary of context loading metrics.",
              "line_range": [
                479,
                494
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_metrics",
              "docstring": "Save metrics to file for analysis.",
              "line_range": [
                496,
                501
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config"
        ],
        "_load_config": [
          "json.load",
          "config_path.exists",
          "open"
        ],
        "get_context_for_scenario": [
          "self._update_metrics",
          "self._load_session_context",
          "self._load_minimal_context",
          "self._load_full_context",
          "scenario_config.get",
          "self._load_focused_context",
          "self._get_budget_for_scenario",
          "ContextMode",
          "time.time"
        ],
        "_get_budget_for_scenario": [
          "ContextBudget",
          "budget_config.get",
          "scenario_config.get"
        ],
        "_load_full_context": [
          "json.load",
          "logger.warning",
          "open",
          "full_path.exists"
        ],
        "_extract_relationship_summary": [
          "summary.append",
          "logger.warning",
          "struct.get",
          "struct_path.exists",
          "json.load",
          "m.get",
          "open"
        ],
        "_load_focused_context": [
          "self._extract_summary",
          "init_path.exists",
          "logger.warning",
          "self._extract_relationship_summary",
          "len",
          "self._get_file_context",
          "json.dumps",
          "session_path.exists",
          "json.load",
          "file_path.endswith",
          "open"
        ],
        "_load_session_context": [
          "self._filter_for_current_session",
          "self._load_source_with_filtering"
        ],
        "_load_minimal_context": [
          "source_path.exists",
          "self._extract_summary",
          "logger.warning",
          "json.load",
          "open"
        ],
        "_load_source_with_filtering": [
          "source_path.exists",
          "open",
          "logger.warning",
          "json.load",
          "self._apply_section_filtering"
        ],
        "_get_file_context": [
          "Path"
        ],
        "_extract_essential_parts": [
          "isinstance",
          "task.get"
        ],
        "_filter_for_current_session": [
          "current_session.get",
          "idea.get",
          "data.items",
          "logger.warning",
          "current_session_path.exists",
          "task.get",
          "json.load",
          "open"
        ],
        "_extract_summary": [
          "len",
          "t.get",
          "isinstance"
        ],
        "_apply_section_filtering": [
          "data.items"
        ],
        "_update_metrics": [
          "context.get",
          "len",
          "ContextMetrics"
        ],
        "get_metrics_summary": [
          "sum",
          "len"
        ],
        "save_metrics": [
          "self.get_metrics_summary",
          "json.dump",
          "open"
        ],
        "create_context_orchestrator": [
          "SmartContextOrchestrator"
        ],
        "get_optimized_context": [
          "create_context_orchestrator",
          "ContextBudget",
          "orchestrator.get_context_for_scenario"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Union",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": "c17b350c685348e540bb6f3686f2dcb5cf3da1b90c04e0dadb2a298ac2af82b8"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "LLMClient",
        "SystemCapabilityDiscovery",
        "ai_cli_integration",
        "ai_self_awareness",
        "llm_client"
      ],
      "hash": "2592d45bae33fe6628051f9ae5eb6dd5f13fee9588b428a512203df62a55a122"
    },
    {
      "module_id": "src.llmstruct.ai_cli_integration",
      "path": "src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "module_doc": "AI Self-Awareness CLI Integration Module\nIntegrates unused CLI functions into the AI self-awareness system.",
      "functions": [
        {
          "name": "create_ai_cli_integration",
          "docstring": "Factory function to create AI CLI integration instance.",
          "line_range": [
            304,
            306
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_enhanced_cli_summary",
          "docstring": "Get a formatted summary of AI CLI integration capabilities.",
          "line_range": [
            309,
            346
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI integration system.",
          "line_range": [
            21,
            25
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_discover_available_commands",
          "docstring": "Discover which unused CLI commands are available for integration.",
          "line_range": [
            27,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_status_command",
          "docstring": "Integrate cmd_status for real-time AI system status awareness.",
          "line_range": [
            71,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_audit_command",
          "docstring": "Integrate cmd_audit for system health analysis awareness.",
          "line_range": [
            102,
            131
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_context_command",
          "docstring": "Integrate cmd_context for context mode awareness.",
          "line_range": [
            133,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_queue_command",
          "docstring": "Integrate cmd_queue for workflow queue monitoring.",
          "line_range": [
            164,
            193
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_integration_summary",
          "docstring": "Get summary of CLI command integrations for AI awareness.",
          "line_range": [
            195,
            215
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_ai_enhancement_impact",
          "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
          "line_range": [
            217,
            241
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_status",
          "docstring": "Create fallback status information if cmd_status is not available.",
          "line_range": [
            243,
            256
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_audit",
          "docstring": "Create fallback audit information if cmd_audit is not available.",
          "line_range": [
            258,
            271
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_context",
          "docstring": "Create fallback context information if cmd_context is not available.",
          "line_range": [
            273,
            286
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_queue",
          "docstring": "Create fallback queue information if cmd_queue is not available.",
          "line_range": [
            288,
            301
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AISelfAwarenessCLIIntegration",
          "docstring": "Integrates unused CLI functions to enhance AI self-awareness capabilities.\nTransforms 21 unused CLI commands into useful AI interaction tools.",
          "line_range": [
            15,
            301
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI integration system.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_discover_available_commands",
              "docstring": "Discover which unused CLI commands are available for integration.",
              "line_range": [
                27,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_status_command",
              "docstring": "Integrate cmd_status for real-time AI system status awareness.",
              "line_range": [
                71,
                100
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_audit_command",
              "docstring": "Integrate cmd_audit for system health analysis awareness.",
              "line_range": [
                102,
                131
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_context_command",
              "docstring": "Integrate cmd_context for context mode awareness.",
              "line_range": [
                133,
                162
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_queue_command",
              "docstring": "Integrate cmd_queue for workflow queue monitoring.",
              "line_range": [
                164,
                193
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_integration_summary",
              "docstring": "Get summary of CLI command integrations for AI awareness.",
              "line_range": [
                195,
                215
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_ai_enhancement_impact",
              "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
              "line_range": [
                217,
                241
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_status",
              "docstring": "Create fallback status information if cmd_status is not available.",
              "line_range": [
                243,
                256
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_audit",
              "docstring": "Create fallback audit information if cmd_audit is not available.",
              "line_range": [
                258,
                271
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_context",
              "docstring": "Create fallback context information if cmd_context is not available.",
              "line_range": [
                273,
                286
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_queue",
              "docstring": "Create fallback queue information if cmd_queue is not available.",
              "line_range": [
                288,
                301
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._discover_available_commands"
        ],
        "_discover_available_commands": [
          "unused_command_mapping.items",
          "hasattr",
          "getattr",
          "logger.error"
        ],
        "integrate_ai_status_command": [
          "self._create_fallback_status",
          "cmd_status",
          "str",
          "logger.error"
        ],
        "integrate_ai_audit_command": [
          "cmd_audit",
          "self._create_fallback_audit",
          "str",
          "logger.error"
        ],
        "integrate_ai_context_command": [
          "logger.error",
          "self._create_fallback_context",
          "cmd_context",
          "str"
        ],
        "integrate_ai_queue_command": [
          "self._create_fallback_queue",
          "cmd_queue",
          "str",
          "logger.error"
        ],
        "get_integration_summary": [
          "len",
          "info.get",
          "self._calculate_ai_enhancement_impact",
          "sum",
          "cmd.get"
        ],
        "_calculate_ai_enhancement_impact": [
          "enhanced_categories.append",
          "capability_categories.items",
          "len",
          "info.get",
          "any"
        ],
        "_create_fallback_status": [
          "str"
        ],
        "_create_fallback_audit": [
          "str"
        ],
        "_create_fallback_context": [],
        "_create_fallback_queue": [],
        "create_ai_cli_integration": [
          "AISelfAwarenessCLIIntegration"
        ],
        "get_ai_enhanced_cli_summary": [
          "integration.get_integration_summary",
          "create_ai_cli_integration",
          "integration.integrate_ai_status_command",
          "integration.integrate_ai_context_command",
          "integration.integrate_ai_queue_command",
          "integration.integrate_ai_audit_command"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "cli_commands",
        "json",
        "llmstruct",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "31bb5f483e9f2b68b6a50f6763428111abd2eb8026401104bca1d83a1c6efdf6"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "llmstruct.cli",
        "main"
      ],
      "hash": "de795cd58c2dc4122dd30b382c844a7c67fc36489e443b7d12170fa0e15994dc"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "module_doc": "CLI utility functions.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize utils with root directory.",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read file content with size limit.",
          "line_range": [
            28,
            50
          ],
          "parameters": [
            "self",
            "file_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "write_file_content",
          "docstring": "Write content to file.",
          "line_range": [
            52,
            70
          ],
          "parameters": [
            "self",
            "file_path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "get_directory_structure",
          "docstring": "Get directory structure using folder generator.",
          "line_range": [
            72,
            115
          ],
          "parameters": [
            "self",
            "path",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON content.",
          "line_range": [
            117,
            123
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "format_json",
          "docstring": "Format data as JSON string.",
          "line_range": [
            125,
            131
          ],
          "parameters": [
            "self",
            "data",
            "indent"
          ],
          "decorators": []
        },
        {
          "name": "generate_unique_id",
          "docstring": "Generate unique ID for commands, queues, etc.",
          "line_range": [
            133,
            137
          ],
          "parameters": [
            "self",
            "prefix"
          ],
          "decorators": []
        },
        {
          "name": "safe_path_join",
          "docstring": "Safely join path parts, preventing directory traversal.",
          "line_range": [
            139,
            149
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_exists",
          "docstring": "Check if file exists.",
          "line_range": [
            151,
            157
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "dir_exists",
          "docstring": "Check if directory exists.",
          "line_range": [
            159,
            165
          ],
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_size",
          "docstring": "Get file size in bytes.",
          "line_range": [
            167,
            173
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_file",
          "docstring": "Create backup of file with timestamp.",
          "line_range": [
            175,
            191
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_backups",
          "docstring": "Clean up old backup files, keeping only the most recent ones.",
          "line_range": [
            193,
            222
          ],
          "parameters": [
            "self",
            "file_path",
            "keep_count"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIUtils",
          "docstring": "Utility functions for CLI operations.",
          "line_range": [
            21,
            222
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize utils with root directory.",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "read_file_content",
              "docstring": "Read file content with size limit.",
              "line_range": [
                28,
                50
              ],
              "parameters": [
                "self",
                "file_path",
                "max_size"
              ]
            },
            {
              "name": "write_file_content",
              "docstring": "Write content to file.",
              "line_range": [
                52,
                70
              ],
              "parameters": [
                "self",
                "file_path",
                "content"
              ]
            },
            {
              "name": "get_directory_structure",
              "docstring": "Get directory structure using folder generator.",
              "line_range": [
                72,
                115
              ],
              "parameters": [
                "self",
                "path",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ]
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON content.",
              "line_range": [
                117,
                123
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "format_json",
              "docstring": "Format data as JSON string.",
              "line_range": [
                125,
                131
              ],
              "parameters": [
                "self",
                "data",
                "indent"
              ]
            },
            {
              "name": "generate_unique_id",
              "docstring": "Generate unique ID for commands, queues, etc.",
              "line_range": [
                133,
                137
              ],
              "parameters": [
                "self",
                "prefix"
              ]
            },
            {
              "name": "safe_path_join",
              "docstring": "Safely join path parts, preventing directory traversal.",
              "line_range": [
                139,
                149
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_exists",
              "docstring": "Check if file exists.",
              "line_range": [
                151,
                157
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "dir_exists",
              "docstring": "Check if directory exists.",
              "line_range": [
                159,
                165
              ],
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "get_file_size",
              "docstring": "Get file size in bytes.",
              "line_range": [
                167,
                173
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "backup_file",
              "docstring": "Create backup of file with timestamp.",
              "line_range": [
                175,
                191
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "cleanup_old_backups",
              "docstring": "Clean up old backup files, keeping only the most recent ones.",
              "line_range": [
                193,
                222
              ],
              "parameters": [
                "self",
                "file_path",
                "keep_count"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "read_file_content": [
          "f.read",
          "logging.warning",
          "os.stat",
          "logging.error",
          "open"
        ],
        "write_file_content": [
          "f.write",
          "Path",
          "logging.info",
          "logging.error",
          "open"
        ],
        "get_directory_structure": [
          "sorted",
          "logging.error",
          "get_folder_structure",
          "os.listdir"
        ],
        "validate_json": [
          "str",
          "json.loads"
        ],
        "format_json": [
          "logging.error",
          "json.dumps",
          "str"
        ],
        "generate_unique_id": [
          "int",
          "uuid.uuid4",
          "str",
          "time.time"
        ],
        "safe_path_join": [
          "ValueError",
          "resolved_path.startswith"
        ],
        "file_exists": [
          "self.safe_path_join"
        ],
        "dir_exists": [
          "self.safe_path_join"
        ],
        "get_file_size": [
          "self.safe_path_join"
        ],
        "backup_file": [
          "int",
          "open",
          "dst.write",
          "self.safe_path_join",
          "src.read",
          "logging.error",
          "time.time"
        ],
        "cleanup_old_backups": [
          "int",
          "backups.sort",
          "os.listdir",
          "self.safe_path_join",
          "os.remove",
          "logging.warning",
          "filename.startswith",
          "filename.split",
          "backups.append",
          "logging.info",
          "logging.error"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": "105ac5d21c6d1870ac478aadb62ca79e99a3453df4457642fcda39f575abf367"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "module_doc": "LLMStruct Copilot Integration Module\nProvides context-aware development assistance with hybrid copilot capabilities.",
      "functions": [
        {
          "name": "initialize_copilot",
          "docstring": "Initialize copilot context manager for the project.\n\nArgs:\n    project_root: Project root directory\n\nReturns:\n    Configured CopilotContextManager instance",
          "line_range": [
            649,
            659
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "trigger_copilot_event",
          "docstring": "Trigger a copilot event and get relevant context.\n\nArgs:\n    manager: CopilotContextManager instance\n    event_type: Type of event\n    file_path: Optional file path\n    **kwargs: Additional event metadata\n\nReturns:\n    Dict with event context",
          "line_range": [
            662,
            679
          ],
          "parameters": [
            "manager",
            "event_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "smart_suggest",
          "docstring": "Get smart suggestions based on query and context.\n\nArgs:\n    manager: CopilotContextManager instance\n    query: Query string\n    context: Context type (code, workflow, task, etc.)\n\nReturns:\n    List of suggestions",
          "line_range": [
            682,
            702
          ],
          "parameters": [
            "manager",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context_for_scenario",
          "docstring": "Get optimized context for specific scenario - standalone function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            705,
            728
          ],
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
          "line_range": [
            68,
            90
          ],
          "parameters": [
            "self",
            "project_root",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load copilot configuration from JSON file.",
          "line_range": [
            92,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_layers",
          "docstring": "Initialize context layers from configuration.",
          "line_range": [
            106,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_context_layer",
          "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
          "line_range": [
            118,
            160
          ],
          "parameters": [
            "self",
            "layer_name",
            "force"
          ],
          "decorators": []
        },
        {
          "name": "unload_context_layer",
          "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
          "line_range": [
            162,
            180
          ],
          "parameters": [
            "self",
            "layer_name"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            182,
            225
          ],
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_context",
          "docstring": "Fallback to legacy context loading.",
          "line_range": [
            227,
            235
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_vscode",
          "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
          "line_range": [
            237,
            251
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_event",
          "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
          "line_range": [
            252,
            296
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_event_context",
          "docstring": "Legacy event context loading as fallback.",
          "line_range": [
            298,
            350
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "suggest_completion",
          "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
          "line_range": [
            352,
            397
          ],
          "parameters": [
            "self",
            "current_code",
            "file_path",
            "cursor_position"
          ],
          "decorators": []
        },
        {
          "name": "validate_change",
          "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
          "line_range": [
            399,
            445
          ],
          "parameters": [
            "self",
            "file_path",
            "change_type"
          ],
          "decorators": []
        },
        {
          "name": "_matches_scope",
          "docstring": "Check if file matches scope pattern.",
          "line_range": [
            447,
            452
          ],
          "parameters": [
            "self",
            "file_path",
            "scope"
          ],
          "decorators": []
        },
        {
          "name": "_matches_trigger",
          "docstring": "Check if change type matches trigger.",
          "line_range": [
            454,
            463
          ],
          "parameters": [
            "self",
            "change_type",
            "trigger"
          ],
          "decorators": []
        },
        {
          "name": "_validate_json_schema",
          "docstring": "Validate JSON file against schema.",
          "line_range": [
            465,
            480
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_check_circular_dependencies",
          "docstring": "Check for circular dependencies.",
          "line_range": [
            482,
            507
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_validate_task_references",
          "docstring": "Validate task references in tasks.json.",
          "line_range": [
            509,
            536
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
          "line_range": [
            538,
            568
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "refresh_all_contexts",
          "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
          "line_range": [
            570,
            584
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_status",
          "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
          "line_range": [
            586,
            607
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "export_context",
          "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
          "line_range": [
            609,
            631
          ],
          "parameters": [
            "self",
            "layers",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Clean up resources.",
          "line_range": [
            633,
            643
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextLayer",
          "docstring": "Context layer priorities for copilot integration.",
          "line_range": [
            22,
            28
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AttachMode",
          "docstring": "Context attachment modes.",
          "line_range": [
            31,
            37
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLayerConfig",
          "docstring": "Configuration for a context layer.",
          "line_range": [
            41,
            49
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotEvent",
          "docstring": "Represents a copilot event for context triggering.",
          "line_range": [
            53,
            59
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotContextManager",
          "docstring": "Manages context layers and integration with GitHub Copilot.\nProvides intelligent context loading and workflow assistance.",
          "line_range": [
            62,
            643
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
              "line_range": [
                68,
                90
              ],
              "parameters": [
                "self",
                "project_root",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load copilot configuration from JSON file.",
              "line_range": [
                92,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_initialize_layers",
              "docstring": "Initialize context layers from configuration.",
              "line_range": [
                106,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_context_layer",
              "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
              "line_range": [
                118,
                160
              ],
              "parameters": [
                "self",
                "layer_name",
                "force"
              ]
            },
            {
              "name": "unload_context_layer",
              "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
              "line_range": [
                162,
                180
              ],
              "parameters": [
                "self",
                "layer_name"
              ]
            },
            {
              "name": "get_optimized_context",
              "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
              "line_range": [
                182,
                225
              ],
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "max_tokens"
              ]
            },
            {
              "name": "_get_legacy_context",
              "docstring": "Fallback to legacy context loading.",
              "line_range": [
                227,
                235
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_vscode",
              "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
              "line_range": [
                237,
                251
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_context_for_event",
              "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
              "line_range": [
                252,
                296
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_get_legacy_event_context",
              "docstring": "Legacy event context loading as fallback.",
              "line_range": [
                298,
                350
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "suggest_completion",
              "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
              "line_range": [
                352,
                397
              ],
              "parameters": [
                "self",
                "current_code",
                "file_path",
                "cursor_position"
              ]
            },
            {
              "name": "validate_change",
              "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
              "line_range": [
                399,
                445
              ],
              "parameters": [
                "self",
                "file_path",
                "change_type"
              ]
            },
            {
              "name": "_matches_scope",
              "docstring": "Check if file matches scope pattern.",
              "line_range": [
                447,
                452
              ],
              "parameters": [
                "self",
                "file_path",
                "scope"
              ]
            },
            {
              "name": "_matches_trigger",
              "docstring": "Check if change type matches trigger.",
              "line_range": [
                454,
                463
              ],
              "parameters": [
                "self",
                "change_type",
                "trigger"
              ]
            },
            {
              "name": "_validate_json_schema",
              "docstring": "Validate JSON file against schema.",
              "line_range": [
                465,
                480
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_check_circular_dependencies",
              "docstring": "Check for circular dependencies.",
              "line_range": [
                482,
                507
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_validate_task_references",
              "docstring": "Validate task references in tasks.json.",
              "line_range": [
                509,
                536
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
              "line_range": [
                538,
                568
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "refresh_all_contexts",
              "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
              "line_range": [
                570,
                584
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_status",
              "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
              "line_range": [
                586,
                607
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "export_context",
              "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
              "line_range": [
                609,
                631
              ],
              "parameters": [
                "self",
                "layers",
                "format"
              ]
            },
            {
              "name": "close",
              "docstring": "Clean up resources.",
              "line_range": [
                633,
                643
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "JSONCache",
          "self._initialize_layers",
          "os.getcwd",
          "self._load_config",
          "create_context_orchestrator",
          "str",
          "Path"
        ],
        "_load_config": [
          "logger.warning",
          "logger.error",
          "logger.info",
          "Path",
          "json.load",
          "open"
        ],
        "_initialize_layers": [
          "layer_config.get",
          "ContextLayerConfig",
          "layers_config.items"
        ],
        "load_context_layer": [
          "source_path.exists",
          "time.time",
          "logger.warning",
          "logger.error",
          "logger.info",
          "logger.debug",
          "json.load",
          "open"
        ],
        "unload_context_layer": [
          "logger.info"
        ],
        "get_optimized_context": [
          "self._get_legacy_context",
          "scenario_mapping.get",
          "logger.error"
        ],
        "_get_legacy_context": [
          "self.load_context_layer"
        ],
        "get_context_for_vscode": [
          "self.get_optimized_context"
        ],
        "get_context_for_event": [
          "self.get_optimized_context",
          "scenario_mapping.get",
          "self._get_legacy_event_context",
          "logger.error"
        ],
        "_get_legacy_event_context": [
          "source_path.exists",
          "triggers.get",
          "file_triggers.get",
          "self.load_context_layer",
          "logger.error",
          "json.load",
          "workflow_triggers.get",
          "code_triggers.get",
          "open"
        ],
        "suggest_completion": [
          "current_module.get",
          "struct_context.get",
          "self.load_context_layer",
          "suggestions.append",
          "func.get",
          "str",
          "Path",
          "module.get"
        ],
        "validate_change": [
          "self._validate_task_references",
          "self._validate_json_schema",
          "rule.get",
          "self._matches_trigger",
          "self._matches_scope",
          "len",
          "self._check_circular_dependencies",
          "safety_features.get",
          "result.get"
        ],
        "_matches_scope": [
          "Path",
          "fnmatch",
          "str"
        ],
        "_matches_trigger": [
          "trigger_map.get"
        ],
        "_validate_json_schema": [
          "json.load",
          "file_path.endswith",
          "open"
        ],
        "_check_circular_dependencies": [
          "struct_data.get",
          "self.load_context_layer",
          "len",
          "str",
          "Path",
          "module.get"
        ],
        "_validate_task_references": [
          "task_ids.add",
          "tasks_data.get",
          "set",
          "task.get",
          "json.load",
          "file_path.endswith",
          "open"
        ],
        "get_workflow_suggestions": [
          "suggestions.extend",
          "command.lower",
          "suggestions.append",
          "self.load_context_layer",
          "workflow.get",
          "workflows.items"
        ],
        "refresh_all_contexts": [
          "self.load_context_layer",
          "list",
          "logger.info"
        ],
        "get_context_status": [
          "list"
        ],
        "export_context": [
          "json.dumps",
          "list",
          "str"
        ],
        "close": [
          "logger.info",
          "hasattr"
        ],
        "initialize_copilot": [
          "CopilotContextManager"
        ],
        "trigger_copilot_event": [
          "manager.get_context_for_event",
          "CopilotEvent"
        ],
        "smart_suggest": [
          "manager.get_workflow_suggestions"
        ],
        "get_optimized_context_for_scenario": [
          "manager.close",
          "manager.get_optimized_context",
          "locals",
          "initialize_copilot"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "Union",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "fnmatch",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": "30fd8d33334ad30d2d2784dd2ae9d1fd50ab982076f550ab8d7e9a2258b2c310"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "module_doc": "GitHub visualization/graph feature (gh-view-v1)\nExport consolidated tasks/ideas from JSON files to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for GitHub Projects export",
          "line_range": [
            177,
            208
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize exporter with configuration",
          "line_range": [
            19,
            25
          ],
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from TOML file",
          "line_range": [
            27,
            35
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_mapping",
          "docstring": "Load existing ID mapping between local and GitHub",
          "line_range": [
            37,
            45
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_mapping",
          "docstring": "Save ID mapping to file",
          "line_range": [
            47,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_run_gh_command",
          "docstring": "Run GitHub CLI command and return success status and output",
          "line_range": [
            55,
            68
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "load_official_data",
          "docstring": "Load tasks and ideas from official JSON files",
          "line_range": [
            70,
            98
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "format_task_for_github",
          "docstring": "Format task data for GitHub Project card",
          "line_range": [
            100,
            137
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "format_idea_for_github",
          "docstring": "Format idea data for GitHub Project card",
          "line_range": [
            139,
            174
          ],
          "parameters": [
            "self",
            "idea"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExporter",
          "docstring": "Export tasks and ideas to GitHub Projects as cards",
          "line_range": [
            16,
            174
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize exporter with configuration",
              "line_range": [
                19,
                25
              ],
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from TOML file",
              "line_range": [
                27,
                35
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_mapping",
              "docstring": "Load existing ID mapping between local and GitHub",
              "line_range": [
                37,
                45
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_mapping",
              "docstring": "Save ID mapping to file",
              "line_range": [
                47,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_run_gh_command",
              "docstring": "Run GitHub CLI command and return success status and output",
              "line_range": [
                55,
                68
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "load_official_data",
              "docstring": "Load tasks and ideas from official JSON files",
              "line_range": [
                70,
                98
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "format_task_for_github",
              "docstring": "Format task data for GitHub Project card",
              "line_range": [
                100,
                137
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "format_idea_for_github",
              "docstring": "Format idea data for GitHub Project card",
              "line_range": [
                139,
                174
              ],
              "parameters": [
                "self",
                "idea"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config",
          "self._load_mapping"
        ],
        "_load_config": [
          "toml.load",
          "config.get",
          "print",
          "open"
        ],
        "_load_mapping": [
          "json.load",
          "open"
        ],
        "_save_mapping": [
          "print",
          "json.dump",
          "open"
        ],
        "_run_gh_command": [
          "subprocess.run"
        ],
        "load_official_data": [
          "ideas_data.get",
          "print",
          "tasks_data.get",
          "tasks_file.exists",
          "len",
          "ideas_file.exists",
          "json.load",
          "open"
        ],
        "format_task_for_github": [
          "body_parts.append",
          "status_map.get",
          "task.get"
        ],
        "format_idea_for_github": [
          "body_parts.append",
          "status_map.get",
          "idea.get"
        ],
        "main": [
          "print",
          "GitHubProjectsExporter",
          "len",
          "exporter.format_idea_for_github",
          "exporter.format_task_for_github",
          "sys.exit",
          "exporter.load_official_data"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "pathlib",
        "subprocess",
        "sys",
        "toml",
        "typing"
      ],
      "hash": "42f9d108f2c0b84536bc1f84861fe336c6c5383ee231ea92edf91eabed74b28c"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": [
            38,
            86
          ],
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": [
            88,
            115
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": [
            117,
            141
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": [
            143,
            156
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": [
            158,
            172
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": [
            27,
            172
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": [
                38,
                86
              ],
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": [
                88,
                115
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": [
                117,
                141
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": [
                143,
                156
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": [
                158,
                172
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "int",
          "os.getenv",
          "logging.info"
        ],
        "query": [
          "self._query_anthropic",
          "logging.warning",
          "range",
          "asyncio.sleep",
          "json.dumps",
          "self._query_grok",
          "Path",
          "json.load",
          "self._query_hybrid",
          "logging.info",
          "logging.error",
          "self._query_ollama"
        ],
        "_query_grok": [
          "aiohttp.ClientSession",
          "response.json",
          "session.post",
          "logging.info",
          "result.get",
          "logging.error"
        ],
        "_query_anthropic": [
          "aiohttp.ClientSession",
          "response.json",
          "session.post",
          "logging.info",
          "result.get",
          "logging.error"
        ],
        "_query_ollama": [
          "logging.debug",
          "aiohttp.ClientSession",
          "response.json",
          "session.post",
          "logging.info",
          "result.get",
          "logging.error"
        ],
        "_query_hybrid": [
          "self._query_anthropic",
          "asyncio.gather",
          "len",
          "isinstance",
          "self._query_grok",
          "logging.info",
          "self._query_ollama"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": "c477d5e96f165fa96546ff8e2673db785cee146f6fffd0f424d21072431133ba"
    },
    {
      "module_id": "src.llmstruct.ai_workflow_middleware",
      "path": "src/llmstruct/ai_workflow_middleware.py",
      "category": "core",
      "module_doc": "AI Workflow Middleware - Forces AI Integration with LLMStruct\nIntercepts all AI requests and ensures they go through our orchestration system.",
      "functions": [
        {
          "name": "initialize_ai_middleware",
          "docstring": "Initialize global AI middleware.",
          "line_range": [
            392,
            396
          ],
          "parameters": [
            "project_root",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_middleware",
          "docstring": "Get current AI middleware instance.",
          "line_range": [
            399,
            401
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "process_ai_query",
          "docstring": "Global function to process AI queries through middleware.",
          "line_range": [
            404,
            409
          ],
          "parameters": [
            "query",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "ensure_llmstruct_integration",
          "docstring": "Decorator that ensures function uses llmstruct system.",
          "line_range": [
            413,
            430
          ],
          "parameters": [
            "func"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            55,
            74
          ],
          "parameters": [
            "self",
            "project_root",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "_load_middleware_config",
          "docstring": "Load middleware configuration.",
          "line_range": [
            76,
            101
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_ai_request",
          "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration",
          "line_range": [
            103,
            135
          ],
          "parameters": [
            "self",
            "raw_query",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_parse_ai_request",
          "docstring": "Parse raw query into structured AI request.",
          "line_range": [
            137,
            160
          ],
          "parameters": [
            "self",
            "raw_query"
          ],
          "decorators": []
        },
        {
          "name": "_should_use_llmstruct",
          "docstring": "Determine if request should use llmstruct system.",
          "line_range": [
            162,
            186
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_process_with_llmstruct",
          "docstring": "Process request through full llmstruct system.",
          "line_range": [
            188,
            219
          ],
          "parameters": [
            "self",
            "request",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_process_bypass",
          "docstring": "Process request without llmstruct system.",
          "line_range": [
            221,
            236
          ],
          "parameters": [
            "self",
            "request",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_optimize_context",
          "docstring": "Optimize context using orchestrator.",
          "line_range": [
            238,
            261
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_ai_delegation",
          "docstring": "Analyze which AI should handle this request.",
          "line_range": [
            263,
            280
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_context",
          "docstring": "Get enhanced context with project awareness.",
          "line_range": [
            282,
            295
          ],
          "parameters": [
            "self",
            "request",
            "context_result"
          ],
          "decorators": []
        },
        {
          "name": "_get_capability_summary",
          "docstring": "Get current system capabilities.",
          "line_range": [
            297,
            310
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_generate_usage_guidance",
          "docstring": "Generate guidance for AI on how to use llmstruct system.",
          "line_range": [
            312,
            331
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_map_tags_to_scenario",
          "docstring": "Map context tags to orchestrator scenarios.",
          "line_range": [
            333,
            347
          ],
          "parameters": [
            "self",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "_default_ai_processing",
          "docstring": "Default AI processing when no custom handler provided.",
          "line_range": [
            349,
            364
          ],
          "parameters": [
            "self",
            "request",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_middleware_stats",
          "docstring": "Get middleware usage statistics.",
          "line_range": [
            366,
            375
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "force_llmstruct_mode",
          "docstring": "Force all future requests to use llmstruct system.",
          "line_range": [
            377,
            380
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enable_guidance_mode",
          "docstring": "Enable guided mode with llmstruct suggestions.",
          "line_range": [
            382,
            385
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "wrapper",
          "docstring": "",
          "line_range": [
            415,
            428
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AIWorkflowMode",
          "docstring": "AI workflow enforcement modes.",
          "line_range": [
            21,
            26
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AIRequest",
          "docstring": "Standardized AI request structure.",
          "line_range": [
            30,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIResponse",
          "docstring": "Standardized AI response structure.",
          "line_range": [
            40,
            46
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIWorkflowMiddleware",
          "docstring": "Middleware that ensures ALL AI interactions go through LLMStruct system.\nThis solves the problem of AI not using its own infrastructure.",
          "line_range": [
            49,
            385
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                55,
                74
              ],
              "parameters": [
                "self",
                "project_root",
                "mode"
              ]
            },
            {
              "name": "_load_middleware_config",
              "docstring": "Load middleware configuration.",
              "line_range": [
                76,
                101
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_ai_request",
              "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration",
              "line_range": [
                103,
                135
              ],
              "parameters": [
                "self",
                "raw_query",
                "ai_handler"
              ]
            },
            {
              "name": "_parse_ai_request",
              "docstring": "Parse raw query into structured AI request.",
              "line_range": [
                137,
                160
              ],
              "parameters": [
                "self",
                "raw_query"
              ]
            },
            {
              "name": "_should_use_llmstruct",
              "docstring": "Determine if request should use llmstruct system.",
              "line_range": [
                162,
                186
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_process_with_llmstruct",
              "docstring": "Process request through full llmstruct system.",
              "line_range": [
                188,
                219
              ],
              "parameters": [
                "self",
                "request",
                "ai_handler"
              ]
            },
            {
              "name": "_process_bypass",
              "docstring": "Process request without llmstruct system.",
              "line_range": [
                221,
                236
              ],
              "parameters": [
                "self",
                "request",
                "ai_handler"
              ]
            },
            {
              "name": "_optimize_context",
              "docstring": "Optimize context using orchestrator.",
              "line_range": [
                238,
                261
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_analyze_ai_delegation",
              "docstring": "Analyze which AI should handle this request.",
              "line_range": [
                263,
                280
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_get_enhanced_context",
              "docstring": "Get enhanced context with project awareness.",
              "line_range": [
                282,
                295
              ],
              "parameters": [
                "self",
                "request",
                "context_result"
              ]
            },
            {
              "name": "_get_capability_summary",
              "docstring": "Get current system capabilities.",
              "line_range": [
                297,
                310
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_generate_usage_guidance",
              "docstring": "Generate guidance for AI on how to use llmstruct system.",
              "line_range": [
                312,
                331
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_map_tags_to_scenario",
              "docstring": "Map context tags to orchestrator scenarios.",
              "line_range": [
                333,
                347
              ],
              "parameters": [
                "self",
                "tags"
              ]
            },
            {
              "name": "_default_ai_processing",
              "docstring": "Default AI processing when no custom handler provided.",
              "line_range": [
                349,
                364
              ],
              "parameters": [
                "self",
                "request",
                "context"
              ]
            },
            {
              "name": "get_middleware_stats",
              "docstring": "Get middleware usage statistics.",
              "line_range": [
                366,
                375
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "force_llmstruct_mode",
              "docstring": "Force all future requests to use llmstruct system.",
              "line_range": [
                377,
                380
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enable_guidance_mode",
              "docstring": "Enable guided mode with llmstruct suggestions.",
              "line_range": [
                382,
                385
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_middleware_config",
          "logger.info",
          "create_context_orchestrator",
          "SystemCapabilityDiscovery",
          "str",
          "Path",
          "CursorAIBridge"
        ],
        "_load_middleware_config": [
          "json.load",
          "config_path.exists",
          "open"
        ],
        "process_ai_request": [
          "self._process_bypass",
          "self._process_with_llmstruct",
          "AIResponse",
          "logger.error",
          "self._parse_ai_request",
          "str",
          "self._should_use_llmstruct",
          "time.time"
        ],
        "_parse_ai_request": [
          "AIRequest",
          "context_tags.extend",
          "re.findall",
          "re.sub",
          "time.time"
        ],
        "_should_use_llmstruct": [],
        "_process_with_llmstruct": [
          "ai_handler",
          "self._get_enhanced_context",
          "enhanced_context.get",
          "self._default_ai_processing",
          "AIResponse",
          "self._analyze_ai_delegation",
          "self._optimize_context",
          "time.time"
        ],
        "_process_bypass": [
          "ai_handler",
          "AIResponse"
        ],
        "_optimize_context": [
          "self._map_tags_to_scenario",
          "len",
          "logger.error",
          "str",
          "context.get"
        ],
        "_analyze_ai_delegation": [
          "delegation.get",
          "str",
          "logger.error"
        ],
        "_get_enhanced_context": [
          "self._get_capability_summary",
          "self._generate_usage_guidance"
        ],
        "_get_capability_summary": [
          "str"
        ],
        "_generate_usage_guidance": [
          "guidance.append"
        ],
        "_map_tags_to_scenario": [],
        "_default_ai_processing": [],
        "get_middleware_stats": [],
        "force_llmstruct_mode": [
          "logger.info"
        ],
        "enable_guidance_mode": [
          "logger.info"
        ],
        "initialize_ai_middleware": [
          "AIWorkflowMiddleware"
        ],
        "get_ai_middleware": [],
        "process_ai_query": [
          "_middleware_instance.process_ai_request",
          "RuntimeError"
        ],
        "ensure_llmstruct_integration": [],
        "wrapper": [
          "func",
          "logger.warning",
          "kwargs.get",
          "str",
          "get_ai_middleware",
          "middleware.process_ai_request"
        ]
      },
      "dependencies": [
        "Any",
        "Callable",
        "CursorAIBridge",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.context_orchestrator",
        "llmstruct.cursor_ai_bridge",
        "logging",
        "pathlib",
        "re",
        "time",
        "typing"
      ],
      "hash": "3bac6f6cf22197c5b08b98b82140d648f4b441b3e0b9efaf9a9e7de82aaab05a"
    },
    {
      "module_id": "src.llmstruct.ai_self_awareness",
      "path": "src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "module_doc": "AI Self-Awareness Enhancement Module\nProvides comprehensive system introspection and capability discovery for llmstruct AI systems.\nEnhanced with Cursor IDE integration and real-time metrics.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize the capability discovery system with CLI integration.",
          "line_range": [
            101,
            107
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_ensure_directories",
          "docstring": "Ensure required directories exist.",
          "line_range": [
            109,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "discover_all_capabilities",
          "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
          "line_range": [
            113,
            154
          ],
          "parameters": [
            "self",
            "force_refresh"
          ],
          "decorators": []
        },
        {
          "name": "_get_integration_metrics",
          "docstring": "Get metrics about unused function integration success.",
          "line_range": [
            156,
            163
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_enhanced_capabilities_summary",
          "docstring": "Get enhanced capabilities summary including unused function integration.",
          "line_range": [
            165,
            203
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_ai_status",
          "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
          "line_range": [
            205,
            246
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_tools",
          "docstring": "Discover and check health of all available tools.",
          "line_range": [
            248,
            260
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cli_processor",
          "docstring": "Check CLI processor health.",
          "line_range": [
            262,
            297
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_copilot_manager",
          "docstring": "Check Copilot manager health.",
          "line_range": [
            299,
            336
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_context_orchestrator",
          "docstring": "Check context orchestrator health.",
          "line_range": [
            338,
            393
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cache_system",
          "docstring": "Check cache system health.",
          "line_range": [
            395,
            438
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_struct_parser",
          "docstring": "Check struct.json parser health.",
          "line_range": [
            440,
            484
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_docs_system",
          "docstring": "Check docs.json system health.",
          "line_range": [
            486,
            517
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_capabilities",
          "docstring": "Discover available context capabilities.",
          "line_range": [
            519,
            556
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_integration_health",
          "docstring": "Check health of all system integrations.",
          "line_range": [
            558,
            567
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_component_status",
          "docstring": "Check status of a specific component.",
          "line_range": [
            569,
            574
          ],
          "parameters": [
            "self",
            "component_name"
          ],
          "decorators": []
        },
        {
          "name": "_discover_vscode_capabilities",
          "docstring": "Discover VS Code specific capabilities.",
          "line_range": [
            576,
            585
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_cache_hit_rate",
          "docstring": "Calculate cache hit rate using real metrics.",
          "line_range": [
            587,
            589
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_system_load",
          "docstring": "Estimate current system load using real metrics.",
          "line_range": [
            591,
            593
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_cache_valid",
          "docstring": "Check if cached capabilities are still valid.",
          "line_range": [
            595,
            602
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cached_capabilities",
          "docstring": "Load capabilities from cache.",
          "line_range": [
            604,
            618
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cache_capabilities",
          "docstring": "Cache capabilities to disk.",
          "line_range": [
            620,
            630
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "get_capabilities_summary",
          "docstring": "Get a human-readable summary of current capabilities.",
          "line_range": [
            632,
            691
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_project_structure",
          "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
          "line_range": [
            693,
            739
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_directory_structure",
          "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
          "line_range": [
            741,
            760
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_unused_capabilities",
          "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
          "line_range": [
            762,
            819
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_discover_config_capabilities",
          "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
          "line_range": [
            821,
            849
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_scenarios",
          "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
          "line_range": [
            851,
            890
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_command",
          "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
          "line_range": [
            892,
            898
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_config",
          "docstring": "Determine if a config function would be useful for AI configuration awareness.",
          "line_range": [
            900,
            906
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_utility",
          "docstring": "Determine if a utility function would be useful for AI operations.",
          "line_range": [
            908,
            914
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_prioritize_integrations",
          "docstring": "Prioritize which unused functions should be integrated first.",
          "line_range": [
            916,
            932
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_basic_directory_scan",
          "docstring": "Basic directory scan for fallback scenarios.",
          "line_range": [
            934,
            946
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_status_report",
          "docstring": "Generate Cursor-specific status optimized for IDE integration.",
          "line_range": [
            949,
            967
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "optimize_context_for_cursor",
          "docstring": "Provide perfectly sized context for Cursor interactions.",
          "line_range": [
            969,
            1001
          ],
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals from personal bridge.",
          "line_range": [
            1003,
            1038
          ],
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_real_cache_hit_rate",
          "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
          "line_range": [
            1040,
            1066
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_real_system_load",
          "docstring": "Get actual system performance metrics.",
          "line_range": [
            1068,
            1090
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": [
            1092,
            1102
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": [
            1104,
            1114
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_query_type",
          "docstring": "Analyze query to determine optimal context type.",
          "line_range": [
            1116,
            1144
          ],
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": [
            1146,
            1163
          ],
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": [
            1165,
            1177
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_get_overall_health_emoji",
          "docstring": "Get emoji representing overall system health.",
          "line_range": [
            1179,
            1202
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_status_emoji",
          "docstring": "Get emoji for context engine status.",
          "line_range": [
            1204,
            1214
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_ai_integration_emoji",
          "docstring": "Get emoji for AI integration status.",
          "line_range": [
            1216,
            1224
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_goal_alignment_status",
          "docstring": "Get goal alignment status.",
          "line_range": [
            1226,
            1235
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CapabilityStatus",
          "docstring": "Status of system capabilities.",
          "line_range": [
            22,
            27
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextMode",
          "docstring": "Available context modes.",
          "line_range": [
            30,
            35
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ToolHealth",
          "docstring": "Health status of a specific tool.",
          "line_range": [
            39,
            46
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextCapabilities",
          "docstring": "Available context capabilities.",
          "line_range": [
            50,
            57
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "IntegrationHealth",
          "docstring": "Status of system integrations.",
          "line_range": [
            61,
            68
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "VSCodeCapabilities",
          "docstring": "VS Code specific capabilities.",
          "line_range": [
            72,
            79
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilities",
          "docstring": "Complete system capabilities overview.",
          "line_range": [
            83,
            91
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilityDiscovery",
          "docstring": "Discovers and monitors system capabilities in real-time.\nProvides AI with comprehensive understanding of available tools and systems.\nEnhanced with unused function integration for maximum AI self-awareness.",
          "line_range": [
            94,
            1235
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the capability discovery system with CLI integration.",
              "line_range": [
                101,
                107
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_ensure_directories",
              "docstring": "Ensure required directories exist.",
              "line_range": [
                109,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "discover_all_capabilities",
              "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
              "line_range": [
                113,
                154
              ],
              "parameters": [
                "self",
                "force_refresh"
              ]
            },
            {
              "name": "_get_integration_metrics",
              "docstring": "Get metrics about unused function integration success.",
              "line_range": [
                156,
                163
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_enhanced_capabilities_summary",
              "docstring": "Get enhanced capabilities summary including unused function integration.",
              "line_range": [
                165,
                203
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_comprehensive_ai_status",
              "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
              "line_range": [
                205,
                246
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_tools",
              "docstring": "Discover and check health of all available tools.",
              "line_range": [
                248,
                260
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cli_processor",
              "docstring": "Check CLI processor health.",
              "line_range": [
                262,
                297
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_copilot_manager",
              "docstring": "Check Copilot manager health.",
              "line_range": [
                299,
                336
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_context_orchestrator",
              "docstring": "Check context orchestrator health.",
              "line_range": [
                338,
                393
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cache_system",
              "docstring": "Check cache system health.",
              "line_range": [
                395,
                438
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_struct_parser",
              "docstring": "Check struct.json parser health.",
              "line_range": [
                440,
                484
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_docs_system",
              "docstring": "Check docs.json system health.",
              "line_range": [
                486,
                517
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_capabilities",
              "docstring": "Discover available context capabilities.",
              "line_range": [
                519,
                556
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_integration_health",
              "docstring": "Check health of all system integrations.",
              "line_range": [
                558,
                567
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_component_status",
              "docstring": "Check status of a specific component.",
              "line_range": [
                569,
                574
              ],
              "parameters": [
                "self",
                "component_name"
              ]
            },
            {
              "name": "_discover_vscode_capabilities",
              "docstring": "Discover VS Code specific capabilities.",
              "line_range": [
                576,
                585
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_cache_hit_rate",
              "docstring": "Calculate cache hit rate using real metrics.",
              "line_range": [
                587,
                589
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_estimate_system_load",
              "docstring": "Estimate current system load using real metrics.",
              "line_range": [
                591,
                593
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_cache_valid",
              "docstring": "Check if cached capabilities are still valid.",
              "line_range": [
                595,
                602
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cached_capabilities",
              "docstring": "Load capabilities from cache.",
              "line_range": [
                604,
                618
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cache_capabilities",
              "docstring": "Cache capabilities to disk.",
              "line_range": [
                620,
                630
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "get_capabilities_summary",
              "docstring": "Get a human-readable summary of current capabilities.",
              "line_range": [
                632,
                691
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_project_structure",
              "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
              "line_range": [
                693,
                739
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_enhanced_directory_structure",
              "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
              "line_range": [
                741,
                760
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_unused_capabilities",
              "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
              "line_range": [
                762,
                819
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_discover_config_capabilities",
              "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
              "line_range": [
                821,
                849
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_scenarios",
              "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
              "line_range": [
                851,
                890
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_ai_useful_command",
              "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
              "line_range": [
                892,
                898
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_config",
              "docstring": "Determine if a config function would be useful for AI configuration awareness.",
              "line_range": [
                900,
                906
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_utility",
              "docstring": "Determine if a utility function would be useful for AI operations.",
              "line_range": [
                908,
                914
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_prioritize_integrations",
              "docstring": "Prioritize which unused functions should be integrated first.",
              "line_range": [
                916,
                932
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_basic_directory_scan",
              "docstring": "Basic directory scan for fallback scenarios.",
              "line_range": [
                934,
                946
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cursor_status_report",
              "docstring": "Generate Cursor-specific status optimized for IDE integration.",
              "line_range": [
                949,
                967
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "optimize_context_for_cursor",
              "docstring": "Provide perfectly sized context for Cursor interactions.",
              "line_range": [
                969,
                1001
              ],
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals from personal bridge.",
              "line_range": [
                1003,
                1038
              ],
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "_calculate_real_cache_hit_rate",
              "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
              "line_range": [
                1040,
                1066
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_real_system_load",
              "docstring": "Get actual system performance metrics.",
              "line_range": [
                1068,
                1090
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": [
                1092,
                1102
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": [
                1104,
                1114
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_query_type",
              "docstring": "Analyze query to determine optimal context type.",
              "line_range": [
                1116,
                1144
              ],
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": [
                1146,
                1163
              ],
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": [
                1165,
                1177
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_get_overall_health_emoji",
              "docstring": "Get emoji representing overall system health.",
              "line_range": [
                1179,
                1202
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_get_context_status_emoji",
              "docstring": "Get emoji for context engine status.",
              "line_range": [
                1204,
                1214
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_get_ai_integration_emoji",
              "docstring": "Get emoji for AI integration status.",
              "line_range": [
                1216,
                1224
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_goal_alignment_status",
              "docstring": "Get goal alignment status.",
              "line_range": [
                1226,
                1235
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "create_ai_cli_integration",
          "self._ensure_directories"
        ],
        "_ensure_directories": [],
        "discover_all_capabilities": [
          "self._is_cache_valid",
          "self._check_integration_health",
          "self._discover_context_capabilities",
          "self._calculate_cache_hit_rate",
          "self._estimate_system_load",
          "self._get_integration_metrics",
          "self._discover_vscode_capabilities",
          "logger.info",
          "SystemCapabilities",
          "self._load_cached_capabilities",
          "datetime.now",
          "self._analyze_project_structure",
          "self._discover_tools",
          "self._cache_capabilities",
          "time.time"
        ],
        "_get_integration_metrics": [],
        "get_enhanced_capabilities_summary": [
          "hasattr",
          "enhanced_info.append",
          "self.get_capabilities_summary",
          "str"
        ],
        "get_comprehensive_ai_status": [
          "self.get_enhanced_capabilities_summary",
          "str",
          "get_ai_enhanced_cli_summary"
        ],
        "_discover_tools": [
          "self._check_cli_processor",
          "self._check_struct_parser",
          "self._check_cache_system",
          "self._check_context_orchestrator",
          "self._check_copilot_manager",
          "self._check_docs_system"
        ],
        "_check_cli_processor": [
          "ToolHealth",
          "CommandProcessor",
          "time.time",
          "str",
          "datetime.now",
          "CLIConfig",
          "CLIUtils"
        ],
        "_check_copilot_manager": [
          "ToolHealth",
          "initialize_copilot",
          "hasattr",
          "manager.get_context_status",
          "str",
          "datetime.now",
          "time.time"
        ],
        "_check_context_orchestrator": [
          "ToolHealth",
          "logger.warning",
          "get_optimized_context",
          "hasattr",
          "str",
          "datetime.now",
          "create_context_orchestrator",
          "time.time"
        ],
        "_check_cache_system": [
          "ToolHealth",
          "JSONCache",
          "cache.get_full_json",
          "cache.close",
          "cache.cache_json",
          "str",
          "datetime.now",
          "struct_file.exists",
          "time.time"
        ],
        "_check_struct_parser": [
          "ToolHealth",
          "time.time",
          "struct_data.get",
          "FileNotFoundError",
          "datetime.now",
          "str",
          "json.load",
          "struct_file.exists",
          "missing_keys.append",
          "open"
        ],
        "_check_docs_system": [
          "ToolHealth",
          "open",
          "time.time",
          "datetime.now",
          "str",
          "json.load",
          "docs_file.exists",
          "FileNotFoundError"
        ],
        "_discover_context_capabilities": [
          "ContextCapabilities",
          "list",
          "config.get",
          "scenario_mappings.keys",
          "logger.error",
          "isinstance",
          "str",
          "create_context_orchestrator"
        ],
        "_check_integration_health": [
          "self._check_component_status",
          "IntegrationHealth"
        ],
        "_check_component_status": [
          "hasattr"
        ],
        "_discover_vscode_capabilities": [
          "VSCodeCapabilities"
        ],
        "_calculate_cache_hit_rate": [
          "self._calculate_real_cache_hit_rate"
        ],
        "_estimate_system_load": [
          "self._get_real_system_load"
        ],
        "_is_cache_valid": [
          "time.time"
        ],
        "_load_cached_capabilities": [
          "json.load",
          "logger.error",
          "open"
        ],
        "_cache_capabilities": [
          "asdict",
          "logger.error",
          "json.dump",
          "open"
        ],
        "get_capabilities_summary": [
          "str",
          "chr",
          "len",
          "self.discover_all_capabilities"
        ],
        "_analyze_project_structure": [
          "self._discover_config_capabilities",
          "struct_data.get",
          "len",
          "self._analyze_unused_capabilities",
          "self._get_enhanced_directory_structure",
          "self._discover_context_scenarios",
          "str",
          "json.load",
          "struct_file.exists",
          "sum",
          "module.get",
          "open"
        ],
        "_get_enhanced_directory_structure": [
          "get_directory_structure",
          "self._basic_directory_scan",
          "str"
        ],
        "_analyze_unused_capabilities": [
          "cli_module.get",
          "config_module.get",
          "self._prioritize_integrations",
          "struct_data.get",
          "self._is_ai_useful_command",
          "self._is_ai_useful_config",
          "utils_module.get",
          "len",
          "min",
          "self._is_ai_useful_utility",
          "modules.get",
          "str",
          "f.startswith"
        ],
        "_discover_config_capabilities": [
          "get_queue_config",
          "is_auto_update_enabled",
          "get_copilot_config",
          "str",
          "get_context_config"
        ],
        "_discover_context_scenarios": [
          "get_context_for_scenario",
          "get_metrics_summary",
          "str"
        ],
        "_is_ai_useful_command": [],
        "_is_ai_useful_config": [],
        "_is_ai_useful_utility": [],
        "_prioritize_integrations": [
          "priorities.append"
        ],
        "_basic_directory_scan": [
          "item.is_file",
          "str",
          "item.is_dir",
          "logger.error"
        ],
        "get_cursor_status_report": [
          "self._get_overall_health_emoji",
          "self._get_ai_integration_emoji",
          "self._load_cursor_config",
          "self._get_context_status_emoji",
          "self.discover_all_capabilities",
          "self._get_goal_alignment_status",
          "str"
        ],
        "optimize_context_for_cursor": [
          "optimal_config.get",
          "self._load_cursor_config",
          "logger.error",
          "cursor_config.get",
          "context_rules.get",
          "self._apply_privacy_filter",
          "str",
          "json.load",
          "self._analyze_query_type",
          "file_path.exists",
          "open"
        ],
        "get_goal_aligned_suggestions": [
          "suggestions.extend",
          "technical_context.lower",
          "logger.error",
          "personal_bridge.get",
          "self._load_personal_bridge",
          "any"
        ],
        "_calculate_real_cache_hit_rate": [
          "cache_dir.glob",
          "list",
          "cache_file.stat",
          "len",
          "logger.error",
          "cache_dir.exists",
          "time.time"
        ],
        "_get_real_system_load": [
          "psutil.virtual_memory",
          "min",
          "logger.error",
          "psutil.cpu_percent",
          "str",
          "psutil.disk_usage"
        ],
        "_load_cursor_config": [
          "json.load",
          "config_path.exists",
          "logger.error",
          "open"
        ],
        "_load_personal_bridge": [
          "json.load",
          "logger.error",
          "bridge_path.exists",
          "open"
        ],
        "_analyze_query_type": [
          "query_analysis.get",
          "any"
        ],
        "_apply_privacy_filter": [
          "context_data.items",
          "isinstance",
          "self._filter_sensitive_dict"
        ],
        "_filter_sensitive_dict": [
          "data.items",
          "isinstance",
          "key.lower",
          "any",
          "self._filter_sensitive_dict"
        ],
        "_get_overall_health_emoji": [],
        "_get_context_status_emoji": [
          "len"
        ],
        "_get_ai_integration_emoji": [
          "hasattr"
        ],
        "_get_goal_alignment_status": [
          "self._load_personal_bridge"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "asdict",
        "create_ai_cli_integration",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "get_ai_enhanced_cli_summary",
        "get_auto_update_config",
        "get_context_config",
        "get_context_for_scenario",
        "get_copilot_config",
        "get_directory_structure",
        "get_metrics_summary",
        "get_optimized_context",
        "get_queue_config",
        "initialize_copilot",
        "is_auto_update_enabled",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cache",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "logging",
        "os",
        "pathlib",
        "psutil",
        "time",
        "typing"
      ],
      "hash": "de0fc0c3829c83dfc026c1ecda0c1cc56753e17c115c751b2f45263e5cf6c097"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            21,
            25
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            27,
            49
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            51,
            90
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            92,
            108
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            110,
            126
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            128,
            130
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            20,
            130
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                27,
                49
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                51,
                90
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                92,
                108
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                110,
                126
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                128,
                130
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "hashlib.sha256",
          "f.read",
          "json_file.exists",
          "str",
          "json.dumps",
          "Path",
          "content.encode",
          "logging.info",
          "logging.error",
          "open"
        ],
        "get_metadata": [
          "cursor.fetchone",
          "json.loads"
        ],
        "get_full_json": [
          "json.load",
          "cursor.fetchone",
          "logging.error",
          "open"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": "d4439792ecb8b18d2fb3eac280ee2e7e338722a019a5fbbceee3128a9985ef09"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
          "line_range": [
            20,
            71
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            74,
            114
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "prompt.lower",
          "struct.get",
          "filter_json",
          "isinstance",
          "str",
          "item.get",
          "any",
          "module.get"
        ],
        "attach_to_llm_request": [
          "context_file.exists",
          "prompt.lower",
          "cache.get_full_json",
          "filter_struct",
          "select_json",
          "filter_json",
          "cache.cache_json",
          "json.dumps",
          "Path",
          "logging.info",
          "cache.get_metadata",
          "logging.error"
        ]
      },
      "dependencies": [
        "Any",
        "JSONCache",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": "f9cee229500252c3716ea8ed897cff7cc40e9af1f650b56b75960cf8660cb638"
    },
    {
      "module_id": "src.llmstruct.cursor_ai_bridge",
      "path": "src/llmstruct/cursor_ai_bridge.py",
      "category": "core",
      "module_doc": "Cursor AI Bridge - API Layer for AI Assistant Integration\nProvides CLI and HTTP endpoints so Cursor AI can use WorkflowOrchestrator",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for Cursor AI Bridge.",
          "line_range": [
            350,
            401
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            29,
            32
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "ai_get_context",
          "docstring": "Get AI-optimized context for current development state.",
          "line_range": [
            34,
            67
          ],
          "parameters": [
            "self",
            "query_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "ai_analyze_task",
          "docstring": "Analyze a task and provide AI-optimized guidance.",
          "line_range": [
            69,
            93
          ],
          "parameters": [
            "self",
            "task_description"
          ],
          "decorators": []
        },
        {
          "name": "ai_create_task",
          "docstring": "Create a task through AI interface.",
          "line_range": [
            95,
            114
          ],
          "parameters": [
            "self",
            "title",
            "description",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "ai_get_onboarding_guide",
          "docstring": "Get comprehensive AI onboarding guide.",
          "line_range": [
            116,
            145
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "ai_check_duplicates",
          "docstring": "Check for code duplicates with AI-friendly output.",
          "line_range": [
            147,
            171
          ],
          "parameters": [
            "self",
            "threshold"
          ],
          "decorators": []
        },
        {
          "name": "ai_suggest",
          "docstring": "Get AI suggestions based on context.",
          "line_range": [
            173,
            199
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_task_complexity",
          "docstring": "Estimate task complexity based on codebase analysis.",
          "line_range": [
            201,
            215
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_suggest_approach",
          "docstring": "Suggest approach based on task and codebase state.",
          "line_range": [
            217,
            234
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_find_relevant_modules",
          "docstring": "Find modules relevant to the task.",
          "line_range": [
            236,
            248
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_check_potential_duplicates",
          "docstring": "Check if task might create duplicates.",
          "line_range": [
            250,
            253
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_recommend_ai_for_task",
          "docstring": "Recommend which AI to use for the task.",
          "line_range": [
            255,
            264
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_generate_workflow_steps",
          "docstring": "Generate workflow steps for the task.",
          "line_range": [
            266,
            276
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_determine_context_requirements",
          "docstring": "Determine what context is needed for the task.",
          "line_range": [
            278,
            290
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on context.",
          "line_range": [
            292,
            299
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_available_ai_commands",
          "docstring": "Get available AI commands.",
          "line_range": [
            301,
            310
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_identify_high_priority_duplicates",
          "docstring": "Identify high-priority duplicates for refactoring.",
          "line_range": [
            312,
            315
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_generate_refactoring_suggestions",
          "docstring": "Generate refactoring suggestions.",
          "line_range": [
            317,
            323
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_classify_task_type",
          "docstring": "Classify task type for AI delegation.",
          "line_range": [
            325,
            338
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_generate_next_steps",
          "docstring": "Generate next steps based on context.",
          "line_range": [
            340,
            347
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorAIBridge",
          "docstring": "Bridge that allows Cursor AI assistant to use WorkflowOrchestrator\nthrough CLI commands and structured JSON responses.",
          "line_range": [
            23,
            347
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                29,
                32
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "ai_get_context",
              "docstring": "Get AI-optimized context for current development state.",
              "line_range": [
                34,
                67
              ],
              "parameters": [
                "self",
                "query_type",
                "file_path"
              ]
            },
            {
              "name": "ai_analyze_task",
              "docstring": "Analyze a task and provide AI-optimized guidance.",
              "line_range": [
                69,
                93
              ],
              "parameters": [
                "self",
                "task_description"
              ]
            },
            {
              "name": "ai_create_task",
              "docstring": "Create a task through AI interface.",
              "line_range": [
                95,
                114
              ],
              "parameters": [
                "self",
                "title",
                "description",
                "priority"
              ]
            },
            {
              "name": "ai_get_onboarding_guide",
              "docstring": "Get comprehensive AI onboarding guide.",
              "line_range": [
                116,
                145
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "ai_check_duplicates",
              "docstring": "Check for code duplicates with AI-friendly output.",
              "line_range": [
                147,
                171
              ],
              "parameters": [
                "self",
                "threshold"
              ]
            },
            {
              "name": "ai_suggest",
              "docstring": "Get AI suggestions based on context.",
              "line_range": [
                173,
                199
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_estimate_task_complexity",
              "docstring": "Estimate task complexity based on codebase analysis.",
              "line_range": [
                201,
                215
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_suggest_approach",
              "docstring": "Suggest approach based on task and codebase state.",
              "line_range": [
                217,
                234
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_find_relevant_modules",
              "docstring": "Find modules relevant to the task.",
              "line_range": [
                236,
                248
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_check_potential_duplicates",
              "docstring": "Check if task might create duplicates.",
              "line_range": [
                250,
                253
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_recommend_ai_for_task",
              "docstring": "Recommend which AI to use for the task.",
              "line_range": [
                255,
                264
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_generate_workflow_steps",
              "docstring": "Generate workflow steps for the task.",
              "line_range": [
                266,
                276
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_determine_context_requirements",
              "docstring": "Determine what context is needed for the task.",
              "line_range": [
                278,
                290
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on context.",
              "line_range": [
                292,
                299
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_get_available_ai_commands",
              "docstring": "Get available AI commands.",
              "line_range": [
                301,
                310
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_identify_high_priority_duplicates",
              "docstring": "Identify high-priority duplicates for refactoring.",
              "line_range": [
                312,
                315
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_generate_refactoring_suggestions",
              "docstring": "Generate refactoring suggestions.",
              "line_range": [
                317,
                323
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_classify_task_type",
              "docstring": "Classify task type for AI delegation.",
              "line_range": [
                325,
                338
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_generate_next_steps",
              "docstring": "Generate next steps based on context.",
              "line_range": [
                340,
                347
              ],
              "parameters": [
                "self",
                "context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "CursorIntegrationManager",
          "WorkflowOrchestrator",
          "str"
        ],
        "ai_get_context": [
          "cursor_context.get",
          "len",
          "datetime.utcnow",
          "self._get_workflow_suggestions",
          "self._get_available_ai_commands",
          "str",
          "context.get"
        ],
        "ai_analyze_task": [
          "self._suggest_approach",
          "self._recommend_ai_for_task",
          "self._estimate_task_complexity",
          "self._check_potential_duplicates",
          "self._determine_context_requirements",
          "str",
          "context.get",
          "self._generate_workflow_steps",
          "self._find_relevant_modules"
        ],
        "ai_create_task": [
          "str",
          "datetime.utcnow",
          "self.ai_analyze_task"
        ],
        "ai_get_onboarding_guide": [
          "str"
        ],
        "ai_check_duplicates": [
          "self._identify_high_priority_duplicates",
          "analysis.get",
          "self._generate_refactoring_suggestions",
          "str"
        ],
        "ai_suggest": [
          "delegation.get",
          "self._get_workflow_suggestions",
          "self._generate_next_steps",
          "str",
          "self._classify_task_type"
        ],
        "_estimate_task_complexity": [
          "complexity_keywords.items",
          "any",
          "task.lower"
        ],
        "_suggest_approach": [
          "approaches.append",
          "task.lower"
        ],
        "_find_relevant_modules": [
          "struct_analysis.get",
          "relevant.append",
          "any",
          "module.get",
          "task.lower"
        ],
        "_check_potential_duplicates": [],
        "_recommend_ai_for_task": [
          "any",
          "task.lower"
        ],
        "_generate_workflow_steps": [],
        "_determine_context_requirements": [
          "requirements.append",
          "task.lower"
        ],
        "_get_workflow_suggestions": [],
        "_get_available_ai_commands": [],
        "_identify_high_priority_duplicates": [],
        "_generate_refactoring_suggestions": [],
        "_classify_task_type": [
          "context.lower",
          "any"
        ],
        "_generate_next_steps": [],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "bridge.ai_create_task",
          "print",
          "bridge.ai_get_context",
          "bridge.ai_onboarding_guide",
          "parser.parse_args",
          "bridge.ai_check_duplicates",
          "json.dumps",
          "bridge.ai_suggest",
          "CursorAIBridge",
          "bridge.ai_analyze_task"
        ]
      },
      "dependencies": [
        "Any",
        "CursorIntegrationManager",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "WorkflowOrchestrator",
        "ai_self_awareness",
        "argparse",
        "cursor_integration",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": "b2a2b9e1cf581e85e4467559c56258f4a0d6a5003c11ca4143773a732cb33468"
    },
    {
      "module_id": "src.llmstruct.transpiler",
      "path": "src/llmstruct/transpiler.py",
      "category": "core",
      "module_doc": "AI-Powered Universal Transpiler\nConverts entire codebases from one language to another using LLM analysis",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for AI transpiler",
          "line_range": [
            475,
            527
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            142,
            149
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "analyze_source_project",
          "docstring": "Analyze source project structure",
          "line_range": [
            151,
            155
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "create_target_project_structure",
          "docstring": "Create target project directory structure",
          "line_range": [
            157,
            221
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_generate_structure_info",
          "docstring": "Generate structure information for README",
          "line_range": [
            223,
            253
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "transpile_module",
          "docstring": "Transpile a single module using AI",
          "line_range": [
            255,
            318
          ],
          "parameters": [
            "self",
            "module",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_format_functions",
          "docstring": "Format functions for prompt",
          "line_range": [
            320,
            333
          ],
          "parameters": [
            "self",
            "functions"
          ],
          "decorators": []
        },
        {
          "name": "_format_classes",
          "docstring": "Format classes for prompt",
          "line_range": [
            335,
            348
          ],
          "parameters": [
            "self",
            "classes"
          ],
          "decorators": []
        },
        {
          "name": "determine_target_path",
          "docstring": "Determine target file path for transpiled module",
          "line_range": [
            350,
            388
          ],
          "parameters": [
            "self",
            "module"
          ],
          "decorators": []
        },
        {
          "name": "transpile_project",
          "docstring": "Transpile entire project",
          "line_range": [
            390,
            472
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TranspilerConfig",
          "docstring": "Configuration for AI transpiler",
          "line_range": [
            24,
            35
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "LanguageTemplates",
          "docstring": "Templates and patterns for different target languages",
          "line_range": [
            38,
            136
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AITranspiler",
          "docstring": "AI-powered code transpiler",
          "line_range": [
            139,
            472
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                142,
                149
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "analyze_source_project",
              "docstring": "Analyze source project structure",
              "line_range": [
                151,
                155
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "create_target_project_structure",
              "docstring": "Create target project directory structure",
              "line_range": [
                157,
                221
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_generate_structure_info",
              "docstring": "Generate structure information for README",
              "line_range": [
                223,
                253
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "transpile_module",
              "docstring": "Transpile a single module using AI",
              "line_range": [
                255,
                318
              ],
              "parameters": [
                "self",
                "module",
                "context"
              ]
            },
            {
              "name": "_format_functions",
              "docstring": "Format functions for prompt",
              "line_range": [
                320,
                333
              ],
              "parameters": [
                "self",
                "functions"
              ]
            },
            {
              "name": "_format_classes",
              "docstring": "Format classes for prompt",
              "line_range": [
                335,
                348
              ],
              "parameters": [
                "self",
                "classes"
              ]
            },
            {
              "name": "determine_target_path",
              "docstring": "Determine target file path for transpiled module",
              "line_range": [
                350,
                388
              ],
              "parameters": [
                "self",
                "module"
              ]
            },
            {
              "name": "transpile_project",
              "docstring": "Transpile entire project",
              "line_range": [
                390,
                472
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "ConverterConfig",
          "LLMClient",
          "UniversalConverter"
        ],
        "analyze_source_project": [
          "logger.info"
        ],
        "create_target_project_structure": [
          "logger.warning",
          "output_path.mkdir",
          "src_dir.mkdir",
          "shutil.rmtree",
          "Path",
          "output_path.exists",
          "self._generate_structure_info"
        ],
        "_generate_structure_info": [
          "analysis.get",
          "len",
          "categories.items",
          "stats.get",
          "module.get",
          "category.title"
        ],
        "transpile_module": [
          "target_lang.lower",
          "target_lang.upper",
          "self._format_classes",
          "len",
          "ctx_module.get",
          "logger.error",
          "self._format_functions",
          "str",
          "response.strip",
          "module.get"
        ],
        "_format_functions": [
          "func.get",
          "len"
        ],
        "_format_classes": [
          "len",
          "cls.get"
        ],
        "determine_target_path": [
          "Path",
          "len",
          "module.get",
          "module_id.split"
        ],
        "transpile_project": [
          "full_target_path.write_text",
          "self.transpile_module",
          "report_path.write_text",
          "analysis.get",
          "len",
          "range",
          "logger.info",
          "self.determine_target_path",
          "transpiled_files.append",
          "logger.error",
          "str",
          "json.dumps",
          "Path",
          "errors.append",
          "self.create_target_project_structure",
          "self.analyze_source_project"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "TranspilerConfig",
          "Language",
          "print",
          "exit",
          "traceback.print_exc",
          "parser.parse_args",
          "len",
          "logger.error",
          "transpiler.transpile_project",
          "AITranspiler"
        ]
      },
      "dependencies": [
        "Any",
        "ConverterConfig",
        "Dict",
        "Enum",
        "LLMClient",
        "Language",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "UniversalConverter",
        "argparse",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "llm_client",
        "logging",
        "os",
        "parsers.universal_converter",
        "pathlib",
        "shutil",
        "traceback",
        "typing"
      ],
      "hash": "5e9ee72b1514522197462f0369930005bfc88b8d4280c814f8e296668b4e7c38"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            20,
            46
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            49,
            116
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "item.get",
          "filtered.append",
          "data.get",
          "isinstance"
        ],
        "select_json": [
          "ijson.parse",
          "current_item.get",
          "path.append",
          "f.seek",
          "prefix.startswith",
          "filter_json",
          "filtered.append",
          "json_file.exists",
          "Path",
          "json.load",
          "logging.error",
          "open"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "8d3216b4eff05bdde8725caedab745c57ef0c2d52cd84b07f7cabc7b15256d2c"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            43,
            57
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            60,
            69
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            72,
            81
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": [
            84,
            104
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            107,
            114
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            117,
            127
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            130,
            144
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            147,
            503
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": [
            506,
            705
          ],
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            708,
            759
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            762,
            818
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            821,
            823
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            826,
            828
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            831,
            833
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            836,
            954
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": [
            957,
            975
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": [
            978,
            1081
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            1084,
            1314
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.strip",
          "gitignore_path.open",
          "gitignore_path.exists",
          "line.startswith",
          "Path",
          "logging.error"
        ],
        "load_config": [
          "config_path.exists",
          "toml.load",
          "config_path.open",
          "Path",
          "logging.error"
        ],
        "read_file_content": [
          "f.read",
          "path.open",
          "Path",
          "path.is_file",
          "logging.error"
        ],
        "write_to_file": [
          "logging.error",
          "logging.warning",
          "file_path.open",
          "base_path.mkdir",
          "re.sub",
          "f.write",
          "str",
          "Path",
          "logging.info",
          "file_path.exists"
        ],
        "parse_files_from_response": [
          "files.append",
          "content.strip",
          "filename.strip",
          "re.findall"
        ],
        "interactive": [
          "interactive_modular",
          "interactive_legacy",
          "logging.warning"
        ],
        "interactive_modular": [
          "logging.info",
          "hasattr",
          "create_cli_core",
          "cli_core.run_interactive_mode"
        ],
        "interactive_legacy": [
          "input",
          "user_input.lower",
          "logging.warning",
          "read_file_content",
          "re.match",
          "subprocess.run",
          "cache.close",
          "parse",
          "json.dump",
          "get_folder_structure",
          "print",
          "struct_data.get",
          "load_gitignore",
          "attach_to_llm_request",
          "json.dumps",
          "isinstance",
          "args_str.strip",
          "logging.error",
          "write_to_file",
          "open",
          "time.time",
          "JSONCache",
          "os.listdir",
          "user_input.startswith",
          "events_data.append",
          "len",
          "os.makedirs",
          "m.group",
          "workflow.get",
          "time.ctime",
          "int",
          "LLMClient",
          "cache.get_stats",
          "cache.clear",
          "process_cli_queue_enhanced",
          "os.stat",
          "sorted",
          "client.query",
          "Path",
          "json.load",
          "cache.list_keys"
        ],
        "process_cli_queue_enhanced": [
          "time.time",
          "print",
          "enumerate",
          "write_to_file",
          "read_file_content",
          "load_gitignore",
          "attach_to_llm_request",
          "len",
          "client.query",
          "options.get",
          "isinstance",
          "workflow.get",
          "json.load",
          "item.get",
          "logging.info",
          "get_folder_structure",
          "logging.error",
          "open"
        ],
        "parse": [
          "generate_json",
          "JSONCache",
          "parsing_config.get",
          "config.get",
          "logging.warning",
          "load_gitignore",
          "cli_config.get",
          "load_config",
          "cache.close",
          "cache.cache_json",
          "json.dump",
          "Path",
          "logging.info",
          "logging.error"
        ],
        "query": [
          "JSONCache",
          "orchestrator.get_context_for_scenario",
          "LLMClient",
          "logging.warning",
          "cache.close",
          "client.query",
          "hasattr",
          "create_context_orchestrator",
          "json.dump",
          "client.query_with_context",
          "Path",
          "logging.info",
          "logging.error"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "copilot": [
          "smart_suggest",
          "initialize_copilot",
          "manager.refresh_all_contexts",
          "template_path.exists",
          "manager.load_context_layer",
          "logging.info",
          "config_path.exists",
          "print",
          "getattr",
          "hasattr",
          "layers.split",
          "manager.validate_change",
          "logging.error",
          "open",
          "shutil.copy",
          "manager.export_context",
          "manager.get_context_status",
          "f.write",
          "manager.unload_context_layer",
          "enumerate",
          "Path",
          "manager.close"
        ],
        "audit": [
          "print",
          "analyze_duplicates",
          "hasattr",
          "Path",
          "file_path.exists"
        ],
        "analyze_duplicates": [
          "WorkflowOrchestrator",
          "print",
          "enumerate",
          "filtered_duplicates.items",
          "analysis.get",
          "traceback.print_exc",
          "getattr",
          "len",
          "r.get",
          "hasattr",
          "orchestrator.analyze_codebase_for_duplicates",
          "duplicates.items",
          "sorted",
          "json.dumps",
          "rec.get",
          "json.dump",
          "duplication_data.get",
          "open"
        ],
        "main": [
          "interactive",
          "parse",
          "audit",
          "argparse.ArgumentParser",
          "parser.add_subparsers",
          "copilot",
          "analyze_duplicates",
          "dogfood",
          "dogfood_parser.add_argument",
          "query",
          "duplicates_parser.add_argument",
          "context_parser.add_argument",
          "parser.parse_args",
          "asyncio.run",
          "parse_parser.add_argument",
          "interactive_parser.add_argument",
          "review",
          "query_parser.add_argument",
          "context",
          "subparsers.add_parser",
          "copilot_parser.add_argument",
          "review_parser.add_argument",
          "audit_parser.add_argument"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "WorkflowOrchestrator",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "cli_core",
        "context_orchestrator",
        "copilot",
        "create_cli_core",
        "create_context_orchestrator",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "shutil",
        "smart_suggest",
        "subprocess",
        "sys",
        "time",
        "toml",
        "traceback",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": "3c17b835b8461314aacbb27439fa1f5848af9e58612f45df4a50c9562c2939cb"
    },
    {
      "module_id": "src.llmstruct.cursor_integration",
      "path": "src/llmstruct/cursor_integration.py",
      "category": "core",
      "module_doc": "Cursor IDE Integration Module\nProvides seamless integration between llmstruct AI capabilities and Cursor IDE.",
      "functions": [
        {
          "name": "create_cursor_integration",
          "docstring": "Create a Cursor integration manager for the project.",
          "line_range": [
            435,
            437
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            31,
            35
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_optimized_context",
          "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
          "line_range": [
            37,
            71
          ],
          "parameters": [
            "self",
            "query_type",
            "file_context"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": [
            73,
            83
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": [
            85,
            101
          ],
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": [
            103,
            115
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            121,
            124
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "delegate_to_optimal_ai",
          "docstring": "Route tasks to best AI model based on preferences.",
          "line_range": [
            126,
            160
          ],
          "parameters": [
            "self",
            "task_type",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_delegation_confidence",
          "docstring": "Calculate confidence in AI delegation decision.",
          "line_range": [
            162,
            175
          ],
          "parameters": [
            "self",
            "task_type",
            "selected_ai"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor configuration.",
          "line_range": [
            177,
            187
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            193,
            195
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals.",
          "line_range": [
            197,
            242
          ],
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "get_priority_guidance",
          "docstring": "Provide priority guidance based on business objectives.",
          "line_range": [
            244,
            270
          ],
          "parameters": [
            "self",
            "feature_options"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_feature_score",
          "docstring": "Calculate priority score for a feature.",
          "line_range": [
            272,
            292
          ],
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_get_scoring_reasoning",
          "docstring": "Get reasoning for feature scoring.",
          "line_range": [
            294,
            307
          ],
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": [
            309,
            319
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            325,
            328
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "Start a new Cursor session.",
          "line_range": [
            330,
            349
          ],
          "parameters": [
            "self",
            "session_id",
            "user_preferences"
          ],
          "decorators": []
        },
        {
          "name": "save_session_context",
          "docstring": "Save important context for next session.",
          "line_range": [
            351,
            377
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load context from previous sessions.",
          "line_range": [
            379,
            388
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            394,
            400
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_cursor_response",
          "docstring": "Get comprehensive response optimized for Cursor.",
          "line_range": [
            402,
            431
          ],
          "parameters": [
            "self",
            "query",
            "file_context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorSession",
          "docstring": "Represents a Cursor IDE session with context and preferences.",
          "line_range": [
            19,
            25
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CursorContextManager",
          "docstring": "Manages context optimization specifically for Cursor interactions.",
          "line_range": [
            28,
            115
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_cursor_optimized_context",
              "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
              "line_range": [
                37,
                71
              ],
              "parameters": [
                "self",
                "query_type",
                "file_context"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": [
                73,
                83
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": [
                85,
                101
              ],
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": [
                103,
                115
              ],
              "parameters": [
                "self",
                "data"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorMultiAIOrchestrator",
          "docstring": "Coordinates different AI models through Cursor interface.",
          "line_range": [
            118,
            187
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                121,
                124
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "delegate_to_optimal_ai",
              "docstring": "Route tasks to best AI model based on preferences.",
              "line_range": [
                126,
                160
              ],
              "parameters": [
                "self",
                "task_type",
                "context"
              ]
            },
            {
              "name": "_calculate_delegation_confidence",
              "docstring": "Calculate confidence in AI delegation decision.",
              "line_range": [
                162,
                175
              ],
              "parameters": [
                "self",
                "task_type",
                "selected_ai"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor configuration.",
              "line_range": [
                177,
                187
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "PersonalPlanningCursorBridge",
          "docstring": "Bridge between personal planning and Cursor without exposing sensitive data.",
          "line_range": [
            190,
            319
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                193,
                195
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals.",
              "line_range": [
                197,
                242
              ],
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "get_priority_guidance",
              "docstring": "Provide priority guidance based on business objectives.",
              "line_range": [
                244,
                270
              ],
              "parameters": [
                "self",
                "feature_options"
              ]
            },
            {
              "name": "_calculate_feature_score",
              "docstring": "Calculate priority score for a feature.",
              "line_range": [
                272,
                292
              ],
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_get_scoring_reasoning",
              "docstring": "Get reasoning for feature scoring.",
              "line_range": [
                294,
                307
              ],
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": [
                309,
                319
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorSessionManager",
          "docstring": "Maintains context across Cursor sessions for better continuity.",
          "line_range": [
            322,
            388
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                325,
                328
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "start_session",
              "docstring": "Start a new Cursor session.",
              "line_range": [
                330,
                349
              ],
              "parameters": [
                "self",
                "session_id",
                "user_preferences"
              ]
            },
            {
              "name": "save_session_context",
              "docstring": "Save important context for next session.",
              "line_range": [
                351,
                377
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load context from previous sessions.",
              "line_range": [
                379,
                388
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorIntegrationManager",
          "docstring": "Main integration manager that coordinates all Cursor-specific features.",
          "line_range": [
            391,
            431
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                394,
                400
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_comprehensive_cursor_response",
              "docstring": "Get comprehensive response optimized for Cursor.",
              "line_range": [
                402,
                431
              ],
              "parameters": [
                "self",
                "query",
                "file_context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "PersonalPlanningCursorBridge",
          "CursorContextManager",
          "SystemCapabilityDiscovery",
          "CursorSessionManager",
          "CursorMultiAIOrchestrator"
        ],
        "get_cursor_optimized_context": [
          "optimal_config.get",
          "logger.error",
          "context_rules.get",
          "self._apply_privacy_filter",
          "str",
          "json.load",
          "file_path.exists",
          "open"
        ],
        "_load_cursor_config": [
          "config_path.exists",
          "logger.error",
          "Path",
          "json.load",
          "open"
        ],
        "_apply_privacy_filter": [
          "context_data.items",
          "isinstance",
          "self._filter_sensitive_dict"
        ],
        "_filter_sensitive_dict": [
          "data.items",
          "isinstance",
          "key.lower",
          "any",
          "self._filter_sensitive_dict"
        ],
        "delegate_to_optimal_ai": [
          "self._calculate_delegation_confidence",
          "logger.error",
          "str",
          "Path",
          "delegation_rules.get"
        ],
        "_calculate_delegation_confidence": [
          "delegation_rules.get"
        ],
        "get_goal_aligned_suggestions": [
          "suggestions.extend",
          "any",
          "technical_context.lower",
          "logger.error"
        ],
        "get_priority_guidance": [
          "scored_features.sort",
          "self._calculate_feature_score",
          "decision_guidance.get",
          "scored_features.append",
          "logger.error",
          "str",
          "self._get_scoring_reasoning"
        ],
        "_calculate_feature_score": [
          "prioritization.get",
          "feature.lower",
          "float",
          "any"
        ],
        "_get_scoring_reasoning": [
          "feature.lower",
          "reasons.append",
          "any"
        ],
        "_load_personal_bridge": [
          "json.load",
          "logger.error",
          "bridge_path.exists",
          "open"
        ],
        "start_session": [
          "previous_context.get",
          "logger.error",
          "self._load_session_context",
          "CursorSession"
        ],
        "save_session_context": [
          "session_data.get",
          "logger.error",
          "json.dump",
          "str",
          "Path",
          "open"
        ],
        "_load_session_context": [
          "json.load",
          "logger.error",
          "open"
        ],
        "get_comprehensive_cursor_response": [
          "str",
          "logger.error"
        ],
        "create_cursor_integration": [
          "CursorIntegrationManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.context_orchestrator",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "9dc4a1f079ae81fc45f0e314da75a46b3a6f08b14e47b41542f341da097392d3"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "module_doc": "Core CLI functionality and main loop.",
      "functions": [
        {
          "name": "create_cli_core",
          "docstring": "Factory function to create CLI core instance.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI core with root directory.",
          "line_range": [
            28,
            35
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_cache",
          "docstring": "Initialize cache if enabled in config.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_copilot",
          "docstring": "Initialize Copilot integration if enabled.",
          "line_range": [
            55,
            63
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive_mode",
          "docstring": "Run the interactive CLI mode.",
          "line_range": [
            65,
            97
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "Clean up resources.",
          "line_range": [
            99,
            107
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLICore",
          "docstring": "Core CLI class handling main loop and coordination.",
          "line_range": [
            25,
            107
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI core with root directory.",
              "line_range": [
                28,
                35
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "setup_cache",
              "docstring": "Initialize cache if enabled in config.",
              "line_range": [
                37,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_copilot",
              "docstring": "Initialize Copilot integration if enabled.",
              "line_range": [
                55,
                63
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_interactive_mode",
              "docstring": "Run the interactive CLI mode.",
              "line_range": [
                65,
                97
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources.",
              "line_range": [
                99,
                107
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CLIConfig",
          "CommandProcessor",
          "CLIUtils"
        ],
        "setup_cache": [
          "cache_path.mkdir",
          "JSONCache",
          "logging.warning",
          "str",
          "cache_config.get",
          "Path",
          "logging.info"
        ],
        "setup_copilot": [
          "logging.info",
          "logging.warning",
          "initialize_copilot",
          "copilot_config.get"
        ],
        "run_interactive_mode": [
          "input",
          "self.setup_copilot",
          "print",
          "user_input.lower",
          "user_input.startswith",
          "self.setup_cache",
          "self.cleanup",
          "logging.error"
        ],
        "cleanup": [
          "logging.info"
        ],
        "create_cli_core": [
          "CLICore"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "JSONCache",
        "Optional",
        "Path",
        "cli_commands",
        "cli_config",
        "cli_utils",
        "copilot",
        "initialize_copilot",
        "llmstruct.cache",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "57a534c55c12bacfaf26ed4b4124fe97a3c2559253b5a62346e9c9f0368e5132"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "module_doc": "Workspace State & Mode Management System\nEnhanced AI-Human Collaboration with Context Boundaries",
      "functions": [
        {
          "name": "create_workspace_manager",
          "docstring": "Factory function to create workspace manager",
          "line_range": [
            461,
            463
          ],
          "parameters": [
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_or_create_state",
          "docstring": "Load existing workspace state or create default",
          "line_range": [
            38,
            75
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_permission_templates",
          "docstring": "Load permission templates for different modes",
          "line_range": [
            77,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "set_mode",
          "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
          "line_range": [
            130,
            176
          ],
          "parameters": [
            "self",
            "modes",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_parse_modes_from_string",
          "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
          "line_range": [
            178,
            182
          ],
          "parameters": [
            "self",
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "_combine_mode_permissions",
          "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
          "line_range": [
            184,
            216
          ],
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "_get_mode_combination_name",
          "docstring": "Get descriptive name for mode combination",
          "line_range": [
            218,
            232
          ],
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "get_current_state",
          "docstring": "Get current workspace state",
          "line_range": [
            234,
            236
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "check_permission",
          "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
          "line_range": [
            238,
            302
          ],
          "parameters": [
            "self",
            "operation",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "_get_required_capability",
          "docstring": "Map operations to required capabilities",
          "line_range": [
            304,
            320
          ],
          "parameters": [
            "self",
            "operation"
          ],
          "decorators": []
        },
        {
          "name": "_is_restricted_target",
          "docstring": "Check if target matches any file restrictions",
          "line_range": [
            322,
            334
          ],
          "parameters": [
            "self",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "set_emergency_override",
          "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
          "line_range": [
            336,
            365
          ],
          "parameters": [
            "self",
            "level",
            "reason",
            "duration_minutes"
          ],
          "decorators": []
        },
        {
          "name": "_check_emergency_override",
          "docstring": "Check if emergency override is active and not expired",
          "line_range": [
            367,
            381
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_strict_mode",
          "docstring": "Integration with existing strict mode system",
          "line_range": [
            383,
            387
          ],
          "parameters": [
            "self",
            "strict_tags"
          ],
          "decorators": []
        },
        {
          "name": "add_decision_workflow",
          "docstring": "Add decision to workflow tracking (for [decide] mode)",
          "line_range": [
            389,
            396
          ],
          "parameters": [
            "self",
            "decision_id",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "get_workspace_status",
          "docstring": "Get comprehensive workspace status for debugging and display",
          "line_range": [
            398,
            420
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_override_time_remaining",
          "docstring": "Get formatted time remaining for emergency override",
          "line_range": [
            422,
            437
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_state",
          "docstring": "Save current state to file",
          "line_range": [
            439,
            442
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_mode_status",
          "docstring": "Get formatted status string for CLI display",
          "line_range": [
            444,
            458
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WorkspaceStateManager",
          "docstring": "Core workspace state management with mode-based permissions and context boundaries.\n\nFeatures:\n- Multi-dimensional mode system ([code][debug], [discuss][meta])\n- Hybrid permission system (capabilities + file restrictions)\n- Smart mode combinations with context awareness\n- Emergency override protocols with time-boxing\n- Integration with existing strict mode system",
          "line_range": [
            16,
            458
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "workspace_dir"
              ]
            },
            {
              "name": "_load_or_create_state",
              "docstring": "Load existing workspace state or create default",
              "line_range": [
                38,
                75
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_permission_templates",
              "docstring": "Load permission templates for different modes",
              "line_range": [
                77,
                128
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "set_mode",
              "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
              "line_range": [
                130,
                176
              ],
              "parameters": [
                "self",
                "modes",
                "session_id"
              ]
            },
            {
              "name": "_parse_modes_from_string",
              "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
              "line_range": [
                178,
                182
              ],
              "parameters": [
                "self",
                "mode_string"
              ]
            },
            {
              "name": "_combine_mode_permissions",
              "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
              "line_range": [
                184,
                216
              ],
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "_get_mode_combination_name",
              "docstring": "Get descriptive name for mode combination",
              "line_range": [
                218,
                232
              ],
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "get_current_state",
              "docstring": "Get current workspace state",
              "line_range": [
                234,
                236
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "check_permission",
              "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
              "line_range": [
                238,
                302
              ],
              "parameters": [
                "self",
                "operation",
                "target"
              ]
            },
            {
              "name": "_get_required_capability",
              "docstring": "Map operations to required capabilities",
              "line_range": [
                304,
                320
              ],
              "parameters": [
                "self",
                "operation"
              ]
            },
            {
              "name": "_is_restricted_target",
              "docstring": "Check if target matches any file restrictions",
              "line_range": [
                322,
                334
              ],
              "parameters": [
                "self",
                "target"
              ]
            },
            {
              "name": "set_emergency_override",
              "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
              "line_range": [
                336,
                365
              ],
              "parameters": [
                "self",
                "level",
                "reason",
                "duration_minutes"
              ]
            },
            {
              "name": "_check_emergency_override",
              "docstring": "Check if emergency override is active and not expired",
              "line_range": [
                367,
                381
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_strict_mode",
              "docstring": "Integration with existing strict mode system",
              "line_range": [
                383,
                387
              ],
              "parameters": [
                "self",
                "strict_tags"
              ]
            },
            {
              "name": "add_decision_workflow",
              "docstring": "Add decision to workflow tracking (for [decide] mode)",
              "line_range": [
                389,
                396
              ],
              "parameters": [
                "self",
                "decision_id",
                "decision_data"
              ]
            },
            {
              "name": "get_workspace_status",
              "docstring": "Get comprehensive workspace status for debugging and display",
              "line_range": [
                398,
                420
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_override_time_remaining",
              "docstring": "Get formatted time remaining for emergency override",
              "line_range": [
                422,
                437
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_state",
              "docstring": "Save current state to file",
              "line_range": [
                439,
                442
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_mode_status",
              "docstring": "Get formatted status string for CLI display",
              "line_range": [
                444,
                458
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_permission_templates",
          "self._load_or_create_state"
        ],
        "_load_or_create_state": [
          "json.load",
          "self._save_state",
          "datetime.now",
          "open"
        ],
        "_load_permission_templates": [],
        "set_mode": [
          "self._parse_modes_from_string",
          "self._get_mode_combination_name",
          "len",
          "self._combine_mode_permissions",
          "combined_permissions.get",
          "datetime.now",
          "isinstance",
          "self._save_state"
        ],
        "_parse_modes_from_string": [
          "re.findall"
        ],
        "_combine_mode_permissions": [
          "template.get",
          "list",
          "set",
          "sorted",
          "logger.info"
        ],
        "_get_mode_combination_name": [
          "sorted",
          "combination_names.get"
        ],
        "get_current_state": [],
        "check_permission": [
          "self._check_emergency_override",
          "self._is_restricted_target",
          "permissions.get",
          "self._get_required_capability"
        ],
        "_get_required_capability": [
          "operation.startswith",
          "capability_map.items"
        ],
        "_is_restricted_target": [
          "restriction.startswith",
          "target.startswith",
          "fnmatch.fnmatch"
        ],
        "set_emergency_override": [
          "self._save_state",
          "timedelta",
          "expires_at.isoformat",
          "datetime.now"
        ],
        "_check_emergency_override": [
          "override.get",
          "datetime.fromisoformat",
          "datetime.now",
          "self._save_state"
        ],
        "integrate_strict_mode": [
          "self._save_state",
          "datetime.now"
        ],
        "add_decision_workflow": [
          "self._save_state",
          "datetime.now"
        ],
        "get_workspace_status": [
          "override.get",
          "self._get_override_time_remaining",
          "self._get_mode_combination_name",
          "len"
        ],
        "_get_override_time_remaining": [
          "override.get",
          "int",
          "datetime.fromisoformat",
          "datetime.now",
          "remaining.total_seconds"
        ],
        "_save_state": [
          "json.dump",
          "open"
        ],
        "get_mode_status": [
          "override.get",
          "self._get_mode_combination_name"
        ],
        "create_workspace_manager": [
          "WorkspaceStateManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "Union",
        "datetime",
        "fnmatch",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "timedelta",
        "timezone",
        "typing"
      ],
      "hash": "781995ee11b41c001f3ce9ac5be89cd99963beb044d8020550f54edb7993eee5"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "javascript_parser"
      ],
      "hash": "2f1fce5cf3e867869608b18a8ab1197f8a32add4fd35d4de75f891a9dad04b63"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            9,
            13
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": [
            15,
            20
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": [
            22,
            41
          ],
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": [
            43,
            124
          ],
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": [
            8,
            124
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                9,
                13
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": [
                15,
                20
              ],
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": [
                22,
                41
              ],
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": [
                43,
                124
              ],
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "hashlib.sha256",
          "f.read",
          "open"
        ],
        "compute_file_metadata": [
          "self.file_hash",
          "sum",
          "os.stat",
          "open"
        ],
        "parse_module": [
          "f.read",
          "self.compute_file_metadata",
          "esprima.parseModule",
          "str",
          "open"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": "d2af10a2c30b638a634dd0317c81a179888dee011e0b7a0f62166dce468373c4"
    },
    {
      "module_id": "src.llmstruct.parsers.universal_converter",
      "path": "src/llmstruct/parsers/universal_converter.py",
      "category": "core",
      "module_doc": "Universal Code Converter - Orchestrates all language parsers\nConverts any codebase to llmstruct JSON format",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for universal converter",
          "line_range": [
            375,
            428
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            55,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            79,
            82
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "detect_language",
          "docstring": "Detect programming language from file extension",
          "line_range": [
            84,
            92
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "detect_project_languages",
          "docstring": "Detect all languages in project and count files",
          "line_range": [
            94,
            109
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "get_project_files",
          "docstring": "Get all relevant files for conversion",
          "line_range": [
            111,
            138
          ],
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_python_project",
          "docstring": "Convert Python project to llmstruct format",
          "line_range": [
            140,
            171
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_go_project",
          "docstring": "Convert Go project to llmstruct format",
          "line_range": [
            173,
            190
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_javascript_project",
          "docstring": "Convert JavaScript project to llmstruct format",
          "line_range": [
            192,
            223
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_project",
          "docstring": "Convert any project to llmstruct format",
          "line_range": [
            225,
            250
          ],
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_multi_language_project",
          "docstring": "Convert multi-language project with separate sections per language",
          "line_range": [
            252,
            282
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_build_project_structure",
          "docstring": "Build standard llmstruct project structure",
          "line_range": [
            284,
            312
          ],
          "parameters": [
            "self",
            "language",
            "project_path",
            "modules",
            "toc"
          ],
          "decorators": []
        },
        {
          "name": "_build_empty_project_structure",
          "docstring": "Build empty structure when conversion fails",
          "line_range": [
            314,
            329
          ],
          "parameters": [
            "self",
            "language",
            "project_path",
            "error"
          ],
          "decorators": []
        },
        {
          "name": "_merge_language_results",
          "docstring": "Merge multiple language results into unified structure",
          "line_range": [
            331,
            372
          ],
          "parameters": [
            "self",
            "project_path",
            "language_results"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Language",
          "docstring": "",
          "line_range": [
            33,
            42
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ConverterConfig",
          "docstring": "Configuration for universal converter",
          "line_range": [
            46,
            62
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                55,
                62
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "UniversalConverter",
          "docstring": "Universal code converter for any programming language",
          "line_range": [
            65,
            372
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                79,
                82
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "detect_language",
              "docstring": "Detect programming language from file extension",
              "line_range": [
                84,
                92
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "detect_project_languages",
              "docstring": "Detect all languages in project and count files",
              "line_range": [
                94,
                109
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "get_project_files",
              "docstring": "Get all relevant files for conversion",
              "line_range": [
                111,
                138
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_python_project",
              "docstring": "Convert Python project to llmstruct format",
              "line_range": [
                140,
                171
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_go_project",
              "docstring": "Convert Go project to llmstruct format",
              "line_range": [
                173,
                190
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_javascript_project",
              "docstring": "Convert JavaScript project to llmstruct format",
              "line_range": [
                192,
                223
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_project",
              "docstring": "Convert any project to llmstruct format",
              "line_range": [
                225,
                250
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_multi_language_project",
              "docstring": "Convert multi-language project with separate sections per language",
              "line_range": [
                252,
                282
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_build_project_structure",
              "docstring": "Build standard llmstruct project structure",
              "line_range": [
                284,
                312
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "modules",
                "toc"
              ]
            },
            {
              "name": "_build_empty_project_structure",
              "docstring": "Build empty structure when conversion fails",
              "line_range": [
                314,
                329
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "error"
              ]
            },
            {
              "name": "_merge_language_results",
              "docstring": "Merge multiple language results into unified structure",
              "line_range": [
                331,
                372
              ],
              "parameters": [
                "self",
                "project_path",
                "language_results"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "JavaScriptParser",
          "ConverterConfig",
          "GoAnalyzer"
        ],
        "detect_language": [
          "Path"
        ],
        "detect_project_languages": [
          "languages.get",
          "any",
          "self.detect_language",
          "os.walk"
        ],
        "get_project_files": [
          "files.append",
          "any",
          "self.detect_language",
          "os.walk"
        ],
        "convert_python_project": [
          "module_data.get",
          "modules.append",
          "self._build_project_structure",
          "logger.warning",
          "toc.append",
          "len",
          "self.get_project_files",
          "logger.info",
          "analyze_python"
        ],
        "convert_go_project": [
          "convert_to_llmstruct_format",
          "logger.error",
          "logger.info",
          "str",
          "self._build_empty_project_structure"
        ],
        "convert_javascript_project": [
          "module_data.get",
          "modules.append",
          "self._build_project_structure",
          "logger.warning",
          "toc.append",
          "len",
          "self.get_project_files",
          "logger.info"
        ],
        "convert_project": [
          "self.detect_project_languages",
          "self.convert_javascript_project",
          "languages.keys",
          "NotImplementedError",
          "max",
          "self.convert_go_project",
          "logger.info",
          "self.convert_python_project",
          "ValueError"
        ],
        "convert_multi_language_project": [
          "self.detect_project_languages",
          "self.convert_javascript_project",
          "self._merge_language_results",
          "languages.keys",
          "logger.warning",
          "self.convert_go_project",
          "logger.error",
          "logger.info",
          "self.convert_python_project",
          "ValueError"
        ],
        "_build_project_structure": [
          "language.title",
          "m.get",
          "sum",
          "len"
        ],
        "_build_empty_project_structure": [],
        "_merge_language_results": [
          "all_toc.append",
          "list",
          "all_modules.append",
          "language_results.items",
          "language_results.keys",
          "result.get",
          "stats.get"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "converter.convert_project",
          "Language",
          "print",
          "UniversalConverter",
          "exit",
          "ConverterConfig",
          "traceback.print_exc",
          "parser.parse_args",
          "logger.error",
          "f.write",
          "json.dumps",
          "converter.convert_multi_language_project",
          "result.get",
          "stats.get",
          "open"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "GoAnalyzer",
        "JavaScriptParser",
        "List",
        "Optional",
        "Path",
        "Union",
        "analyze_module",
        "argparse",
        "convert_to_llmstruct_format",
        "dataclass",
        "dataclasses",
        "enum",
        "go_analyzer",
        "javascript_parser",
        "json",
        "logging",
        "os",
        "pathlib",
        "python_parser",
        "sys",
        "traceback",
        "typing"
      ],
      "hash": "e696f22d510dfa07afbd538e69c6d7ac3c8dd4e742905cfe256be1005e0c2b95"
    },
    {
      "module_id": "src.llmstruct.parsers.go_analyzer",
      "path": "src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "module_doc": "Универсальный Go анализатор для Docker контейнера\nИспользует правильные подходы: go/packages, go/analysis",
      "functions": [
        {
          "name": "convert_to_llmstruct_format",
          "docstring": "Конвертирует результат анализа в формат llmstruct",
          "line_range": [
            203,
            337
          ],
          "parameters": [
            "analysis",
            "include_ranges",
            "goals"
          ],
          "decorators": []
        },
        {
          "name": "_compute_file_hash",
          "docstring": "Вычисляет SHA-256 хэш файла",
          "line_range": [
            339,
            345
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            347,
            402
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_setup_analyzer",
          "docstring": "Настраивает временную среду для анализатора",
          "line_range": [
            28,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cleanup",
          "docstring": "Очищает временные файлы",
          "line_range": [
            68,
            72
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_project",
          "docstring": "Анализирует Go проект",
          "line_range": [
            74,
            125
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_fallback_analysis",
          "docstring": "Fallback анализ через простой парсинг файлов",
          "line_range": [
            127,
            201
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GoAnalyzer",
          "docstring": "Универсальный анализатор Go проектов",
          "line_range": [
            21,
            201
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_setup_analyzer",
              "docstring": "Настраивает временную среду для анализатора",
              "line_range": [
                28,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cleanup",
              "docstring": "Очищает временные файлы",
              "line_range": [
                68,
                72
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_project",
              "docstring": "Анализирует Go проект",
              "line_range": [
                74,
                125
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_fallback_analysis",
              "docstring": "Fallback анализ через простой парсинг файлов",
              "line_range": [
                127,
                201
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "_setup_analyzer": [
          "subprocess.run",
          "logging.warning",
          "analyzer_file.write_text",
          "analyzer_source.read_text",
          "tempfile.mkdtemp",
          "str",
          "Path"
        ],
        "_cleanup": [
          "Path",
          "shutil.rmtree"
        ],
        "analyze_project": [
          "self._cleanup",
          "json.loads",
          "self._setup_analyzer",
          "logging.warning",
          "subprocess.run",
          "self._fallback_analysis",
          "logging.info",
          "logging.error"
        ],
        "_fallback_analysis": [
          "line.strip",
          "file_path.relative_to",
          "go_mod_path.read_text",
          "packages.add",
          "list",
          "content.split",
          "logging.warning",
          "set",
          "len",
          "sorted",
          "line.startswith",
          "str",
          "file_path.read_text",
          "Path",
          "go_mod_path.exists",
          "logging.info",
          "line.split"
        ],
        "convert_to_llmstruct_format": [
          "_compute_file_hash",
          "modules.append",
          "functions.append",
          "analysis.get",
          "struct.get",
          "iface.get",
          "toc.append",
          "len",
          "classes.append",
          "path.endswith",
          "module.get",
          "str",
          "uuid.uuid4",
          "file_data.get",
          "path.replace",
          "sum",
          "fn.get"
        ],
        "_compute_file_hash": [
          "hashlib.sha256",
          "f.read",
          "open"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "analyzer.analyze_project",
          "result.get",
          "print",
          "convert_to_llmstruct_format",
          "traceback.print_exc",
          "parser.parse_args",
          "len",
          "f.write",
          "json.dumps",
          "Path",
          "sys.exit",
          "stats.get",
          "GoAnalyzer",
          "open"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "subprocess",
        "sys",
        "tempfile",
        "traceback",
        "typing",
        "uuid"
      ],
      "hash": "621e1d82791d814534c044dc8ba1d1c79b1852a614255e313f5ff697c934f210"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": [
            13,
            20
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content.",
          "line_range": [
            72,
            79
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data.",
          "line_range": [
            82,
            154
          ],
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            26,
            29
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": [
            31,
            35
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": [
            37,
            43
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": [
            45,
            50
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": [
            52,
            57
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": [
            59,
            69
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": [
            23,
            69
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                29
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": [
                37,
                43
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": [
                45,
                50
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": [
                52,
                57
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": [
                59,
                69
              ],
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_AsyncFunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "compute_file_hash": [
          "hashlib.sha256",
          "f.read",
          "logging.error",
          "open"
        ],
        "analyze_module": [
          "f.read",
          "Path",
          "list",
          "compute_file_hash",
          "functions.append",
          "ast.walk",
          "ast.parse",
          "visitor.visit",
          "sorted",
          "classes.append",
          "str",
          "isinstance",
          "CallVisitor",
          "ast.unparse",
          "infer_category",
          "ast.get_docstring",
          "logging.error",
          "open"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": "555ac7004c99ba854fc4fc4688b583331229077e51dfa999d7aae2cd9f7c21dd"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "2421ea45b39e72f090ee252149c45385f679971e48ca50f0883e313c3db9fa6d"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": "f0ee4f577643fd8bc74b46fd7debd96cc15683b5a7ad0018bb0788523f4b8d34"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": [
            12,
            40
          ],
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": [
            43,
            61
          ],
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "schema_file.exists",
          "json_file.exists",
          "str",
          "Path",
          "json.load",
          "logging.info",
          "validate",
          "logging.error",
          "open"
        ],
        "validate_directory": [
          "json_file.match",
          "str",
          "validate_struct_json",
          "Path",
          "any"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": "cc5c6b4f74409f89459ec86a9d59d83cd92c691e95ab4e670e6b8ac8c979a232"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            15,
            88
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering.",
          "line_range": [
            91,
            148
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.",
          "line_range": [
            151,
            218
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "structure.append",
          "file_path.match",
          "file_path.relative_to",
          "p.endswith",
          "set",
          "os.walk",
          "sorted",
          "str",
          "uuid.uuid4",
          "Path",
          "p.rstrip",
          "any"
        ],
        "build_toc_and_modules": [
          "modules.append",
          "p.endswith",
          "toc.append",
          "set",
          "f.match",
          "len",
          "str",
          "uuid.uuid4",
          "Path",
          "p.rstrip",
          "any",
          "analyze_module"
        ],
        "generate_json": [
          "list",
          "set",
          "len",
          "str",
          "uuid.uuid4",
          "Path",
          "get_folder_structure",
          "sum",
          "build_toc_and_modules"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": "0c25e4343395d66633a587d438296eac1210eac4a11f5a9f167a742396af7554"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "json_generator"
      ],
      "hash": "6510b9d89fa5bff008cf7b1ee6f50343f96b76737b5842a930c06888c5cbba6c"
    },
    {
      "module_id": "src.llmstruct.generators.go_json_generator",
      "path": "src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_go_folder_structure",
          "docstring": "Capture directory and file structure for Go projects with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            15,
            85
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_go_toc_and_modules",
          "docstring": "Build TOC and modules for Go projects with artifact_id and robust filtering.",
          "line_range": [
            88,
            143
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "extract_go_mod_info",
          "docstring": "Extract information from go.mod file.",
          "line_range": [
            146,
            182
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "generate_go_json",
          "docstring": "Generate JSON structure for Go project with artifact_id, summary, and tags.",
          "line_range": [
            185,
            259
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_go_folder_structure": [
          "structure.append",
          "file_path.match",
          "file_path.relative_to",
          "p.endswith",
          "set",
          "os.walk",
          "sorted",
          "str",
          "uuid.uuid4",
          "Path",
          "p.rstrip",
          "any"
        ],
        "build_go_toc_and_modules": [
          "modules.append",
          "p.endswith",
          "toc.append",
          "set",
          "f.match",
          "len",
          "module.get",
          "str",
          "uuid.uuid4",
          "Path",
          "p.rstrip",
          "any",
          "analyze_module"
        ],
        "extract_go_mod_info": [
          "line.strip",
          "content.strip",
          "f.read",
          "len",
          "dependencies.append",
          "line.startswith",
          "Path",
          "go_mod_path.exists",
          "line.split",
          "logging.error",
          "open"
        ],
        "generate_go_json": [
          "list",
          "go_mod_info.get",
          "len",
          "set",
          "build_go_toc_and_modules",
          "extract_go_mod_info",
          "str",
          "Path",
          "uuid.uuid4",
          "m.get",
          "sum",
          "get_go_folder_structure"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.go_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": "2e11ebd0b1baad6e008b5c7c7dcff832215263638561a7d78670b0cb647d4bf1"
    },
    {
      "module_id": "temp_workfiles.test_cli_integration",
      "path": "temp_workfiles/test_cli_integration.py",
      "category": "test",
      "module_doc": "Test script for CLI integration with new commands",
      "functions": [
        {
          "name": "test_modular_cli_commands",
          "docstring": "Test new CLI commands integration",
          "line_range": [
            13,
            164
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_modular_cli_commands": [
          "int",
          "open",
          "print",
          "subprocess.run",
          "events_data.append",
          "os.makedirs",
          "os.stat",
          "create_cli_core",
          "json.dump",
          "json.load",
          "time.ctime",
          "time.time"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLICore",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "Path",
        "create_cli_core",
        "json",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_core",
        "llmstruct.cli_utils",
        "llmstruct.copilot",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": "cb07cac7298b34e98a1e4eebcfc32c4f1210622faebeb4979f498a8403cc0cfd"
    },
    {
      "module_id": "temp_workfiles.run_duplicate_analysis",
      "path": "temp_workfiles/run_duplicate_analysis.py",
      "category": "core",
      "module_doc": "Hash-based duplicate file detector for safe cleanup",
      "functions": [
        {
          "name": "get_file_hash",
          "docstring": "Calculate MD5 hash of a file",
          "line_range": [
            10,
            20
          ],
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "find_duplicates",
          "docstring": "Find duplicate files by hash",
          "line_range": [
            22,
            54
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            56,
            98
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_file_hash": [
          "iter",
          "f.read",
          "print",
          "hashlib.md5",
          "hash_md5.update",
          "hash_md5.hexdigest",
          "open"
        ],
        "find_duplicates": [
          "file.endswith",
          "print",
          "os.walk",
          "get_file_hash",
          "file.startswith"
        ],
        "main": [
          "duplicate_groups.values",
          "find_duplicates",
          "print",
          "enumerate",
          "len",
          "json.dump",
          "duplicate_groups.items",
          "sum",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "hashlib",
        "json",
        "os",
        "pathlib"
      ],
      "hash": "ea42ce1398822af66b340c22cb3e12ed92b76600a7945342effe7ff597674125"
    },
    {
      "module_id": "temp_workfiles.test_cli",
      "path": "temp_workfiles/test_cli.py",
      "category": "test",
      "module_doc": "Test script for the enhanced CLI functionality.",
      "functions": [
        {
          "name": "test_cli_commands",
          "docstring": "Test the CLI with various commands.",
          "line_range": [
            10,
            46
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_cli_commands": [
          "subprocess.Popen",
          "process.kill",
          "process.communicate",
          "print"
        ]
      },
      "dependencies": [
        "asyncio",
        "os",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": "484451bc2195f19b987a13688fd3e5b41a1d5e82ac3ee8a1ef537a48a48003c0"
    },
    {
      "module_id": "temp_workfiles.duplicate_detector",
      "path": "temp_workfiles/duplicate_detector.py",
      "category": "core",
      "module_doc": "Hash-based duplicate file detector for safe cleanup\nIdentifies actual duplicates by content hash, not just similar names",
      "functions": [
        {
          "name": "calculate_file_hash",
          "docstring": "Calculate SHA256 hash of file content",
          "line_range": [
            13,
            24
          ],
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "find_duplicates",
          "docstring": "Find duplicate files by hash",
          "line_range": [
            26,
            46
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze duplicate groups and suggest cleanup",
          "line_range": [
            48,
            87
          ],
          "parameters": [
            "duplicates"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main duplicate detection and analysis",
          "line_range": [
            89,
            147
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "calculate_file_hash": [
          "hashlib.sha256",
          "file_hash.update",
          "f.read",
          "file_hash.hexdigest",
          "open"
        ],
        "find_duplicates": [
          "calculate_file_hash",
          "defaultdict",
          "filepath.is_file",
          "file_hash.startswith",
          "len",
          "os.walk",
          "hash_to_files.items",
          "str",
          "Path"
        ],
        "analyze_duplicates": [
          "len",
          "duplicates.items",
          "sorted",
          "pref",
          "any",
          "sum",
          "duplicates.values"
        ],
        "main": [
          "find_duplicates",
          "print",
          "enumerate",
          "analyze_duplicates",
          "json.dump",
          "all_groups.extend",
          "all_groups.sort",
          "sum",
          "all_results.values",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "collections",
        "defaultdict",
        "hashlib",
        "json",
        "os",
        "pathlib"
      ],
      "hash": "5291d1fe8b46b2ddf3bb4c5d606cebdf380bd6cd0a4b125027974679b24fd960"
    },
    {
      "module_id": "temp_workfiles.struct_based_cleanup_analyzer_complete",
      "path": "temp_workfiles/struct_based_cleanup_analyzer_complete.py",
      "category": "core",
      "module_doc": "Struct.json-based File Cleanup Analyzer\nUses the comprehensive struct.json to intelligently categorize files for cleanup",
      "functions": [
        {
          "name": "load_struct_json",
          "docstring": "Load and parse struct.json",
          "line_range": [
            12,
            20
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "analyze_root_files",
          "docstring": "Analyze files in project root",
          "line_range": [
            22,
            55
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_cleanup_recommendations",
          "docstring": "Generate cleanup recommendations based on analysis",
          "line_range": [
            57,
            117
          ],
          "parameters": [
            "root_files"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            119,
            187
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_struct_json": [
          "print",
          "struct_path.exists",
          "Path",
          "json.load",
          "open"
        ],
        "analyze_root_files": [
          "item.is_file",
          "item.stat",
          "root_files.append",
          "root_path.iterdir",
          "str",
          "Path"
        ],
        "generate_cleanup_recommendations": [
          "name.endswith"
        ],
        "main": [
          "generate_cleanup_recommendations",
          "print",
          "struct_data.get",
          "defaultdict",
          "recommendations.items",
          "load_struct_json",
          "len",
          "category.upper",
          "action.replace",
          "categories.items",
          "json.dump",
          "analyze_root_files",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "collections",
        "defaultdict",
        "json",
        "os",
        "pathlib"
      ],
      "hash": "76da18a5077e4d19ff1f6f6ab7c12b5f3e5e9f5e5dc7c6f2143c2f238856a339"
    },
    {
      "module_id": "temp_workfiles.final_system_check",
      "path": "temp_workfiles/final_system_check.py",
      "category": "core",
      "module_doc": "Final System Status Check - LLMStruct Modular CLI Integration\nComprehensive validation of all completed components",
      "functions": [
        {
          "name": "check_system_status",
          "docstring": "Comprehensive system status check",
          "line_range": [
            12,
            155
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_system_status": [
          "print",
          "t.get",
          "len",
          "i.get",
          "data.get",
          "json.load",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": "16e3482f7da9388c53726063af559a9e48ad8e5a6c5c49e064129c0e5cf68aa7"
    },
    {
      "module_id": "temp_workfiles.struct_based_cleanup_analyzer",
      "path": "temp_workfiles/struct_based_cleanup_analyzer.py",
      "category": "core",
      "module_doc": "Struct.json-based File Cleanup Analyzer\nUses the comprehensive struct.json to intelligently categorize files for cleanup",
      "functions": [
        {
          "name": "load_struct_json",
          "docstring": "Load and parse struct.json",
          "line_range": [
            12,
            20
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "analyze_project_structure",
          "docstring": "Analyze struct.json to understand project organization",
          "line_range": [
            22,
            112
          ],
          "parameters": [
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_root_files",
          "docstring": "Analyze files in project root",
          "line_range": [
            114,
            147
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_cleanup_recommendations",
          "docstring": "Generate cleanup recommendations based on analysis",
          "line_range": [
            149,
            209
          ],
          "parameters": [
            "analysis",
            "root_files"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            211,
            265
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_struct_json": [
          "print",
          "struct_path.exists",
          "Path",
          "json.load",
          "open"
        ],
        "analyze_project_structure": [
          "print",
          "struct_data.get",
          "file_path.lower",
          "file_path.endswith",
          "module.get"
        ],
        "analyze_root_files": [
          "item.is_file",
          "item.stat",
          "root_files.append",
          "root_path.iterdir",
          "str",
          "Path"
        ],
        "generate_cleanup_recommendations": [
          "name.endswith"
        ],
        "main": [
          "generate_cleanup_recommendations",
          "print",
          "struct_data.get",
          "recommendations.items",
          "load_struct_json",
          "len",
          "action.replace",
          "json.dump",
          "analyze_root_files",
          "analyze_project_structure",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "collections",
        "defaultdict",
        "json",
        "os",
        "pathlib"
      ],
      "hash": "65968275ff440495870ce468717c949c6496255b6e6fad7c767903eab74147fe"
    },
    {
      "module_id": "temp_workfiles.final_system_validation",
      "path": "temp_workfiles/final_system_validation.py",
      "category": "core",
      "module_doc": "Final system validation script for LLMStruct Modular CLI Integration",
      "functions": [
        {
          "name": "main",
          "docstring": "Run comprehensive system validation",
          "line_range": [
            13,
            238
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "print",
          "subprocess.run",
          "next",
          "getattr",
          "len",
          "__import__",
          "create_cli_core",
          "task.get",
          "json.load",
          "status.upper",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "create_cli_core",
        "json",
        "llmstruct.cli_core",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": "c3b078025b32ac31fe272f4904b6574157bf71caa271e8788941900ed828fac8"
    },
    {
      "module_id": "temp_workfiles.test_modular_cli",
      "path": "temp_workfiles/test_modular_cli.py",
      "category": "test",
      "module_doc": "Test script for modular CLI structure",
      "functions": [
        {
          "name": "test_modular_cli",
          "docstring": "Test basic modular CLI functionality.",
          "line_range": [
            14,
            63
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_copilot_integration",
          "docstring": "Test Copilot integration.",
          "line_range": [
            65,
            100
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_modular_cli": [
          "CommandProcessor",
          "tempfile.TemporaryDirectory",
          "print",
          "utils.read_file_content",
          "traceback.print_exc",
          "len",
          "CLIUtils",
          "create_cli_core",
          "utils.write_file_content",
          "CLIConfig",
          "config.get_cache_config"
        ],
        "test_copilot_integration": [
          "tempfile.TemporaryDirectory",
          "initialize_copilot",
          "print",
          "CopilotEvent",
          "traceback.print_exc",
          "len",
          "manager.get_context_status",
          "manager.close"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLICore",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "CopilotEvent",
        "Path",
        "create_cli_core",
        "initialize_copilot",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_core",
        "llmstruct.cli_utils",
        "llmstruct.copilot",
        "os",
        "pathlib",
        "sys",
        "tempfile",
        "traceback"
      ],
      "hash": "fca8fcf0c93da190370ff4c5328dc1c04311c0091cb0db3adff8222f83cb4383"
    },
    {
      "module_id": "temp_workfiles.test_cli_demo",
      "path": "temp_workfiles/test_cli_demo.py",
      "category": "test",
      "module_doc": "Quick CLI test to demonstrate new commands",
      "functions": [
        {
          "name": "test_interactive_cli",
          "docstring": "Test interactive CLI with new commands",
          "line_range": [
            10,
            69
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_interactive_cli": [
          "subprocess.run",
          "print"
        ]
      },
      "dependencies": [
        "subprocess",
        "sys",
        "time"
      ],
      "hash": "d763421f609cb8cc8edb0c8fa38b361ae6e95b375833371f9b78ac98555279f7"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_self_run",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": [
            17,
            35
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            37,
            74
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "prompt.lower",
          "struct.get",
          "filter_json",
          "any",
          "module.get"
        ],
        "attach_to_llm_request": [
          "context_file.exists",
          "prompt.lower",
          "cache.get_full_json",
          "filter_struct",
          "select_json",
          "filter_json",
          "cache.cache_json",
          "json.dumps",
          "Path",
          "logging.info",
          "cache.get_metadata",
          "logging.error"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": "894d0cb3c48c80975d0bd6f3c6920b835e98f4dfe7de68ef5c6e01e1bb300534"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": [
            10,
            26
          ],
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": [
            28,
            34
          ],
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": [
            36,
            84
          ],
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            86,
            87
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "filtered.append",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "apply_filters",
          "files.append",
          "root_dir.rglob",
          "path.relative_to",
          "str",
          "path.is_file"
        ],
        "generate_struct": [
          "collect_files",
          "output_path.open",
          "len",
          "json.load",
          "logger.info",
          "uuid.uuid4",
          "str",
          "Path",
          "output_path.exists",
          "json.dump",
          "existing.get"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": "b848962d4bc687f0d520198a4bd5bca9301b685f8d9c1fae81c1ffba35ae31be"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_self_run",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": [
            15,
            22
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": [
            24,
            34
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": [
            36,
            48
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": [
            50,
            67
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": [
            69,
            73
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "str",
          "select_json",
          "json.dump",
          "open"
        ],
        "test_cache_json": [
          "JSONCache",
          "cache.get_full_json",
          "cache.close",
          "cache.cache_json",
          "json.dump",
          "str",
          "cache.get_metadata",
          "open"
        ],
        "test_attach_to_llm_request_init_json": [
          "JSONCache",
          "attach_to_llm_request",
          "cache.close",
          "json.dump",
          "str",
          "open"
        ],
        "test_attach_to_llm_request_missing_file": [
          "attach_to_llm_request",
          "str"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "attach_to_llm_request",
        "filter_json",
        "filter_struct",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "pathlib",
        "pytest",
        "select_json"
      ],
      "hash": "b139aa6febfe24eec888f0597e061092ca4000fdfa3877fa4cc5c23a86c64bdb"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_cli.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "setup_files",
          "docstring": "Set up test files.",
          "line_range": [
            9,
            33
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "test_interactive_with_cli_json",
          "docstring": "Test interactive mode with cli.json.",
          "line_range": [
            36,
            50
          ],
          "parameters": [
            "setup_files",
            "monkeypatch"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "setup_files": [
          "json.dumps"
        ],
        "test_interactive_with_cli_json": [
          "AsyncMock",
          "monkeypatch.setattr",
          "interactive",
          "inputs.pop",
          "str",
          "type",
          "patch.object"
        ]
      },
      "dependencies": [
        "AsyncMock",
        "LLMClient",
        "Path",
        "context",
        "dogfood",
        "interactive",
        "json",
        "llmstruct",
        "llmstruct.cli",
        "patch",
        "pathlib",
        "pytest",
        "read_file_content",
        "review",
        "unittest.mock"
      ],
      "hash": "a540920dadfaa41dc121f6409beb24d8e12019586e0375f5c507f52088cf2a2f"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": [
            909,
            915
          ],
          "parameters": [
            "data",
            "schema"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": [
            917,
            923
          ],
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": [
            925,
            951
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            953,
            954
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "validate",
          "logger.warning"
        ],
        "backup_files": [
          "logger.info",
          "shutil.copytree",
          "datetime.now",
          "target_dir.exists"
        ],
        "deploy_embedded_files": [
          "backup_files",
          "EMBEDDED_FILES.get",
          "target_path.exists",
          "logger.error",
          "logger.info",
          "f.write",
          "json.dump",
          "Path",
          "target_path.open",
          "EMBEDDED_FILES.items",
          "validate_json"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": "ba3f6b3914a33f64e59ce6bc3950ae9dfee890484921bcbf647efece1ccdfa07"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_json_selector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            17,
            29
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            31,
            72
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "item.get",
          "filtered.append",
          "data.get",
          "isinstance"
        ],
        "select_json": [
          "ijson.parse",
          "current_item.get",
          "path.append",
          "f.seek",
          "prefix.startswith",
          "filter_json",
          "filtered.append",
          "json_file.exists",
          "Path",
          "json.load",
          "logging.error",
          "open"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "21ea37c015ac1ab1932e3784ab8cbd041de37be59ba72d3ad9432d5d3391523f"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "generate_project_json",
          "docstring": "Generate project JSON with schema validation.",
          "line_range": [
            8,
            52
          ],
          "parameters": [
            "root_dir",
            "output_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "generate_project_json": [
          "cli_path.open",
          "cli_path.exists",
          "uuid.uuid4",
          "str",
          "Path",
          "json.load",
          "json.dump",
          "logging.info",
          "validate",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "validate"
      ],
      "hash": "ddd8a063e4333acff8f914cf9f1f224b38c3545a12d93238eea5f3982749de67"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": [
            8,
            39
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            41,
            42
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "source_file.exists",
          "enumerate",
          "idea.get",
          "target_file.exists",
          "logger.warning",
          "logger.error",
          "broken_links.append",
          "logger.info",
          "json.dump",
          "Path",
          "json.load"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": "a35ce62eeb2d82b574035bde734efad10a2e709eaa8145787c2f63e8b0ff787c"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            18,
            22
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            24,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            44,
            64
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            66,
            79
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            81,
            94
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            96,
            98
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            17,
            98
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                18,
                22
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                24,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                44,
                64
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                66,
                79
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                81,
                94
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                96,
                98
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "hashlib.sha256",
          "f.read",
          "json_file.exists",
          "str",
          "json.dumps",
          "Path",
          "content.encode",
          "logging.info",
          "logging.error",
          "open"
        ],
        "get_metadata": [
          "cursor.fetchone",
          "json.loads"
        ],
        "get_full_json": [
          "json.load",
          "cursor.fetchone",
          "logging.error",
          "open"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": "0639e2f3c27b70d02596862e63d49bc84c48ca8d0d0c8778b2d42425598acc1e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli_parser",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "parse_argparse",
          "docstring": "Parse argparse setup in cli.py to extract commands and arguments.",
          "line_range": [
            8,
            53
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "generate_cli_json",
          "docstring": "Generate cli.json from cli.py.",
          "line_range": [
            55,
            72
          ],
          "parameters": [
            "cli_path",
            "output_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_argparse": [
          "arg_name.startswith",
          "f.read",
          "ast.walk",
          "ast.parse",
          "next",
          "commands.append",
          "isinstance",
          "arg_name.lstrip",
          "cmd_args.append",
          "any",
          "open"
        ],
        "generate_cli_json": [
          "parse_argparse",
          "uuid.uuid4",
          "str",
          "json.dump",
          "json.load",
          "validate",
          "open"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "ast",
        "json",
        "jsonschema",
        "pathlib",
        "typing",
        "uuid",
        "validate"
      ],
      "hash": "bd7f16cae40cceb896189d1ced8e889e34c6024ea03687361d296ab051359081"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": [
            10,
            26
          ],
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": [
            28,
            34
          ],
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": [
            36,
            79
          ],
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            81,
            82
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "filtered.append",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "apply_filters",
          "files.append",
          "root_dir.rglob",
          "path.relative_to",
          "str",
          "path.is_file"
        ],
        "generate_struct": [
          "collect_files",
          "output_path.open",
          "len",
          "json.load",
          "logger.info",
          "uuid.uuid4",
          "str",
          "Path",
          "output_path.exists",
          "json.dump",
          "existing.get"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": "a5013206ab9b88c686ea9065ae75aafdfc6b3775ef97675df0ca5ef85d9c5232"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            61,
            76
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            6,
            9
          ],
          "parameters": [
            "self",
            "cache_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "load_cache",
          "docstring": "",
          "line_range": [
            11,
            24
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_cache",
          "docstring": "",
          "line_range": [
            26,
            28
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_cache",
          "docstring": "",
          "line_range": [
            30,
            49
          ],
          "parameters": [
            "self",
            "task_id",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_context",
          "docstring": "",
          "line_range": [
            51,
            52
          ],
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        },
        {
          "name": "clear_cache",
          "docstring": "",
          "line_range": [
            54,
            59
          ],
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ChatCache",
          "docstring": "",
          "line_range": [
            5,
            59
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                6,
                9
              ],
              "parameters": [
                "self",
                "cache_path",
                "max_size"
              ]
            },
            {
              "name": "load_cache",
              "docstring": "",
              "line_range": [
                11,
                24
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_cache",
              "docstring": "",
              "line_range": [
                26,
                28
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_cache",
              "docstring": "",
              "line_range": [
                30,
                49
              ],
              "parameters": [
                "self",
                "task_id",
                "message"
              ]
            },
            {
              "name": "get_context",
              "docstring": "",
              "line_range": [
                51,
                52
              ],
              "parameters": [
                "self",
                "task_id"
              ]
            },
            {
              "name": "clear_cache",
              "docstring": "",
              "line_range": [
                54,
                59
              ],
              "parameters": [
                "self",
                "task_id"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.load_cache"
        ],
        "load_cache": [
          "json.load",
          "open"
        ],
        "save_cache": [
          "json.dump",
          "open"
        ],
        "update_cache": [
          "len",
          "self.save_cache",
          "datetime.utcnow"
        ],
        "get_context": [],
        "clear_cache": [
          "self.save_cache"
        ],
        "main": [
          "print",
          "json.dumps",
          "cache.update_cache",
          "ChatCache",
          "cache.get_context"
        ]
      },
      "dependencies": [
        "datetime",
        "json",
        "os"
      ],
      "hash": "199c3bd4f6b85827ac3d18b0415b15290fa720ba77e20a41c49788158b9946a7"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": [
            8,
            43
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            45,
            46
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "source_file.exists",
          "enumerate",
          "idea.get",
          "target_file.exists",
          "logger.warning",
          "logger.error",
          "broken_links.append",
          "logger.info",
          "json.dump",
          "Path",
          "json.load"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": "2977e50979e1eaf1c58adc781db0ed315e756dd1498980bbaa824b53bd70a0ef"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_deploy_embedded_files",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_deploy_embedded_files.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "setup_dirs",
          "docstring": "",
          "line_range": [
            7,
            19
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "test_deploy_embedded_files",
          "docstring": "",
          "line_range": [
            21,
            46
          ],
          "parameters": [
            "setup_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "setup_dirs": [
          "docs_dir.mkdir",
          "json.dumps",
          "data_dir.mkdir",
          "schemas_dir.mkdir"
        ],
        "test_deploy_embedded_files": [
          "list",
          "backup_root.glob",
          "len",
          "deploy_embedded_files",
          "json.load"
        ]
      },
      "dependencies": [
        "Path",
        "deploy_embedded_files",
        "json",
        "pathlib",
        "pytest",
        "scripts.deploy_embedded_files"
      ],
      "hash": "213ecc3133a18d992477d96d8544e3cd7082b870f5dd1134997343d7eda23220"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_cli_json",
          "docstring": "Load cli.json for command metadata.",
          "line_range": [
            19,
            25
          ],
          "parameters": [
            "cli_json_path"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, using cli.json for command metadata.",
          "line_range": [
            29,
            82
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_cli_json": [
          "Path",
          "cli_json_path.exists",
          "json.load",
          "cli_json_path.open"
        ],
        "interactive": [
          "input",
          "load_cli_json",
          "user_input.lower",
          "logging.warning",
          "cache.close",
          "parse",
          "prompt.lower",
          "print",
          "attach_to_llm_request",
          "logging.error",
          "write_to_file",
          "cmd.get",
          "JSONCache",
          "cli_json.get",
          "any",
          "t.format",
          "LLMClient",
          "client.query",
          "Path",
          "parse_files_from_response"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": "cb3d878f3561aaa607aaa62733307187e2829b64270fb1fe70cf5a27ba522b06"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": [
            813,
            819
          ],
          "parameters": [
            "data",
            "schema"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": [
            821,
            827
          ],
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": [
            829,
            853
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            855,
            856
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "validate",
          "logger.warning"
        ],
        "backup_files": [
          "logger.info",
          "shutil.copytree",
          "datetime.now",
          "target_dir.exists"
        ],
        "deploy_embedded_files": [
          "backup_files",
          "EMBEDDED_FILES.get",
          "target_path.exists",
          "logger.error",
          "logger.info",
          "f.write",
          "json.dump",
          "Path",
          "target_path.open",
          "EMBEDDED_FILES.items",
          "validate_json"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": "336c3736a99e41e041b2506d862fb6d40922619808520b37eaf10650221d109e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            26,
            36
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            38,
            47
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            49,
            58
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": [
            60,
            74
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            76,
            83
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            85,
            195
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            197,
            237
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            239,
            260
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            262,
            264
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            266,
            268
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            270,
            272
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            274,
            334
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.strip",
          "gitignore_path.open",
          "gitignore_path.exists",
          "line.startswith",
          "Path",
          "logging.error"
        ],
        "load_config": [
          "config_path.exists",
          "toml.load",
          "config_pathオープン",
          "Path",
          "logging.error"
        ],
        "read_file_content": [
          "f.read",
          "path.open",
          "Path",
          "path.is_file",
          "logging.error"
        ],
        "write_to_file": [
          "logging.error",
          "logging.warning",
          "file_path.open",
          "base_path.mkdir",
          "f.write",
          "str",
          "Path",
          "logging.info",
          "file_path.exists"
        ],
        "parse_files_from_response": [
          "files.append",
          "content.strip",
          "filename.strip",
          "re.findall"
        ],
        "interactive": [
          "input",
          "scan_match.group",
          "user_input.lower",
          "logging.warning",
          "read_file_content",
          "cache.close",
          "files_to_write.append",
          "parse",
          "get_folder_structure",
          "print",
          "write_dir.startswith",
          "load_gitignore",
          "attach_to_llm_request",
          "json.dumps",
          "re.search",
          "logging.error",
          "write_to_file",
          "JSONCache",
          "os.listdir",
          "write_match.group",
          "LLMClient",
          "sorted",
          "client.query",
          "Path",
          "parse_files_from_response"
        ],
        "parse": [
          "generate_json",
          "JSONCache",
          "config.get",
          "load_gitignore",
          "logging.warning",
          "load_config",
          "cache.close",
          "cache.cache_json",
          "json.dump",
          "Path",
          "logging.info",
          "logging.error"
        ],
        "query": [
          "JSONCache",
          "LLMClient",
          "cache.close",
          "client.query",
          "json.dump",
          "Path",
          "logging.info",
          "logging.error"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "argparse.ArgumentParser",
          "parser.add_subparsers",
          "subparsers.add_parser",
          "interactive",
          "review_parser.add_argument",
          "context_parser.add_argument",
          "parser.parse_args",
          "asyncio.run",
          "parse_parser.add_argument",
          "interactive_parser.add_argument",
          "parse",
          "dogfood",
          "query_parser.add_argument",
          "review",
          "context",
          "dogfood_parser.add_argument",
          "query"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": "26cffb7c31d1f379e0dcc75d668fd872ffe10d408cfb92cc81172aeca774fffc"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.extract_artifacts",
      "path": "temp_workfiles/unsorted_mess/22.05.25/extract_artifacts.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "parse_args",
          "docstring": "",
          "line_range": [
            9,
            14
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_artifacts_index",
          "docstring": "",
          "line_range": [
            16,
            29
          ],
          "parameters": [
            "index_path"
          ],
          "decorators": []
        },
        {
          "name": "save_artifacts_index",
          "docstring": "",
          "line_range": [
            31,
            33
          ],
          "parameters": [
            "index",
            "index_path"
          ],
          "decorators": []
        },
        {
          "name": "calculate_sha256",
          "docstring": "",
          "line_range": [
            35,
            36
          ],
          "parameters": [
            "content"
          ],
          "decorators": []
        },
        {
          "name": "extract_artifacts",
          "docstring": "",
          "line_range": [
            38,
            91
          ],
          "parameters": [
            "html_file",
            "output_dir",
            "index_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            93,
            102
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_args": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "parser.parse_args"
        ],
        "load_artifacts_index": [
          "json.load",
          "open"
        ],
        "save_artifacts_index": [
          "json.dump",
          "open"
        ],
        "calculate_sha256": [
          "hashlib.sha256",
          "content.encode"
        ],
        "extract_artifacts": [
          "f.read",
          "BeautifulSoup",
          "print",
          "calculate_sha256",
          "title.endswith",
          "load_artifacts_index",
          "os.makedirs",
          "datetime.utcnow",
          "artifact.get",
          "save_artifacts_index",
          "content_type.split",
          "f.write",
          "soup.find_all",
          "extracted.append",
          "open"
        ],
        "main": [
          "extract_artifacts",
          "parse_args",
          "print"
        ]
      },
      "dependencies": [
        "BeautifulSoup",
        "argparse",
        "bs4",
        "datetime",
        "hashlib",
        "json",
        "os",
        "uuid"
      ],
      "hash": "34d941a177c58de7ed26f13f3fe84c15ba4338f309b5499ea2ab1bc4ebc604cb"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.dumper",
      "path": "temp_workfiles/unsorted_mess/dump/dumper.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "json_hash",
          "docstring": "",
          "line_range": [
            9,
            12
          ],
          "parameters": [
            "obj"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "json_hash": [
          "hashlib.md5",
          "dumped.encode",
          "json.dumps"
        ]
      },
      "dependencies": [
        "glob",
        "hashlib",
        "json",
        "os"
      ],
      "hash": "1fdd4b7f9a65424f3ca09f91b7a9894de51a7764d2f8660e7d153fd88409f00a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators___init__.py",
      "category": "core",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JSONGenerator",
        "json_generator"
      ],
      "hash": "85c28cb01eb4bc0c677187d775eed1758c12c323e59687d471cf981b8a397a32"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_utils",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": [
            5,
            7
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": [
            9,
            11
          ],
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": "abeddf2414099d185cd40335f73c7bc4e328a1ca766e01f9c4ff9c5e6a6700ce"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ideas_tree",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ideas_tree.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": "eba1d8ba4d3a4798a2c14246c2d9f5062bb10e61dd494d8386c0208c7a4446f2"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__.py",
      "category": "core",
      "module_doc": "LLMStruct: A tool for generating JSON-based code structures for LLM integration.\n\nThis package provides modular parsers, generators, and validators to create and validate\nJSON representations of code projects, supporting automation and context-aware LLM assistance.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "7a4cd108c08baad5ab603d7aa70834dce9ef27dad20e0a728b59b269676bc902"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency1",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency1.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": [
            10,
            14
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": [
            16,
            25
          ],
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": [
            27,
            42
          ],
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": [
            44,
            51
          ],
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": [
            53,
            59
          ],
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": [
            61,
            63
          ],
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            65,
            87
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "run_llm_request": [
          "get_system_metrics",
          "session.post",
          "len",
          "time.perf_counter",
          "requests.Session",
          "response.json"
        ],
        "test_with_llmstruct": [
          "f.read",
          "subprocess.run",
          "struct_path.exists",
          "run_llm_request",
          "str",
          "Path",
          "open"
        ],
        "test_without_llmstruct": [
          "Path",
          "run_llm_request",
          "f.read",
          "open"
        ],
        "evaluate_accuracy": [
          "response_text.lower",
          "sum",
          "len"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "evaluate_accuracy",
          "print",
          "test_with_llmstruct",
          "test_without_llmstruct",
          "parser.parse_args",
          "range",
          "setup_proxy",
          "json.dump",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "subprocess",
        "time"
      ],
      "hash": "8ee68512d8305219ff9977460f9d438ab94a010ad4cf1e92564fe8e376667e83"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": [
            8,
            12
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": [
            14,
            26
          ],
          "parameters": [
            "api_url",
            "payload"
          ],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": [
            28,
            35
          ],
          "parameters": [
            "api_url",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": [
            37,
            43
          ],
          "parameters": [
            "api_url",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": [
            45,
            47
          ],
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            49,
            66
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "run_llm_request": [
          "get_system_metrics",
          "len",
          "time.perf_counter",
          "requests.post",
          "response.json"
        ],
        "test_with_llmstruct": [
          "f.read",
          "subprocess.run",
          "struct_path.exists",
          "run_llm_request",
          "str",
          "Path",
          "open"
        ],
        "test_without_llmstruct": [
          "Path",
          "run_llm_request",
          "f.read",
          "open"
        ],
        "evaluate_accuracy": [
          "response_text.lower",
          "sum",
          "len"
        ],
        "main": [
          "evaluate_accuracy",
          "print",
          "test_with_llmstruct",
          "test_without_llmstruct",
          "range",
          "json.dump",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "psutil",
        "requests",
        "subprocess",
        "time"
      ],
      "hash": "643ac7a64ecc90a970456e558bc359380dd234b3ff73f9840acbc2f943e53944"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.grok",
      "path": "temp_workfiles/unsorted_mess/dump/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": [
            22,
            28
          ],
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            5,
            10
          ],
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": [
            12,
            20
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": [
            4,
            20
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                5,
                10
              ],
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": [
                12,
                20
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "response.raise_for_status",
          "response.json",
          "prompt.split",
          "len"
        ],
        "test_grok": [
          "time.perf_counter",
          "GrokClient",
          "client.generate"
        ]
      },
      "dependencies": [
        "os",
        "requests"
      ],
      "hash": "5ccc930d08a7a02950b8ea9a5f4adb15f6c6e29ca9b58a9830a3da72a77b2a3c"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___main__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___main__.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "cli",
        "main"
      ],
      "hash": "d20de29275ce4bd81951ca4bfedae001cb822676592a376c4ffc6deb558e55be"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": "1074e7bf11e1c41bb9d00c7b85c8667477225258a2465cb305f3fe060e77d049"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency (1)",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency (1).py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": [
            12,
            16
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": [
            18,
            21
          ],
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": [
            23,
            38
          ],
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "check_llmstruct_cli",
          "docstring": "",
          "line_range": [
            40,
            41
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": [
            43,
            69
          ],
          "parameters": [
            "api_url",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": [
            71,
            77
          ],
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_grok",
          "docstring": "",
          "line_range": [
            79,
            100
          ],
          "parameters": [
            "api_key",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": [
            102,
            104
          ],
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            106,
            151
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "run_llm_request": [
          "get_system_metrics",
          "session.post",
          "len",
          "time.perf_counter",
          "requests.Session",
          "response.json"
        ],
        "check_llmstruct_cli": [
          "shutil.which"
        ],
        "test_with_llmstruct": [
          "f.read",
          "target_path.exists",
          "subprocess.run",
          "run_llm_request",
          "FileNotFoundError",
          "check_llmstruct_cli",
          "json.dump",
          "str",
          "Path",
          "open"
        ],
        "test_without_llmstruct": [
          "Path",
          "run_llm_request",
          "f.read",
          "open"
        ],
        "test_with_grok": [
          "f.read",
          "open",
          "target_path.exists",
          "json.dump",
          "Path",
          "test_grok",
          "FileNotFoundError"
        ],
        "evaluate_accuracy": [
          "response_text.lower",
          "sum",
          "len"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "evaluate_accuracy",
          "print",
          "test_with_llmstruct",
          "test_without_llmstruct",
          "parser.parse_args",
          "range",
          "setup_proxy",
          "check_llmstruct_cli",
          "str",
          "json.dump",
          "test_with_grok",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "shutil",
        "src.llmstruct.grok",
        "subprocess",
        "test_grok",
        "time"
      ],
      "hash": "d1a2b90382e131c55876c1817b2bd69d8f486e69690bd32e96cb5191c889fec7"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            13,
            50
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering.",
          "line_range": [
            52,
            83
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.",
          "line_range": [
            85,
            126
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "structure.append",
          "file_path.match",
          "file_path.relative_to",
          "p.endswith",
          "set",
          "os.walk",
          "sorted",
          "str",
          "uuid.uuid4",
          "Path",
          "p.rstrip",
          "any"
        ],
        "build_toc_and_modules": [
          "modules.append",
          "p.endswith",
          "toc.append",
          "set",
          "f.match",
          "len",
          "str",
          "uuid.uuid4",
          "Path",
          "p.rstrip",
          "any",
          "analyze_module"
        ],
        "generate_json": [
          "list",
          "set",
          "len",
          "str",
          "uuid.uuid4",
          "Path",
          "get_folder_structure",
          "sum",
          "build_toc_and_modules"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": "7e884f61a20c4ef1a595931e1cd661ba44cef5fc9a4808fb674b918d24cbf5ff"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_engines",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_engines.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "call_llm",
          "docstring": "Call the specified LLM backend with the given prompt.",
          "line_range": [
            8,
            22
          ],
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_ollama",
          "docstring": "Call Ollama with the specified prompt.",
          "line_range": [
            24,
            32
          ],
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_openai",
          "docstring": "Call OpenAI API with the specified prompt.",
          "line_range": [
            34,
            44
          ],
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_anthropic",
          "docstring": "Call Anthropic API with the specified prompt.",
          "line_range": [
            46,
            57
          ],
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_grok",
          "docstring": "Call xAI Grok API with the specified prompt.",
          "line_range": [
            59,
            79
          ],
          "parameters": [
            "prompt"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "call_llm": [
          "call_anthropic",
          "call_grok",
          "RuntimeError",
          "str",
          "call_ollama",
          "ValueError",
          "call_openai"
        ],
        "call_ollama": [
          "subprocess.run"
        ],
        "call_openai": [
          "os.getenv",
          "ValueError",
          "openai.OpenAI"
        ],
        "call_anthropic": [
          "anthropic.Anthropic",
          "os.getenv",
          "ValueError"
        ],
        "call_grok": [
          "os.getenv",
          "response.raise_for_status",
          "requests.post",
          "response.json",
          "ValueError"
        ]
      },
      "dependencies": [
        "LLM_BACKEND",
        "MODEL_NAME",
        "anthropic",
        "json",
        "llm_client.config",
        "openai",
        "os",
        "requests",
        "subprocess"
      ],
      "hash": "6332c29a8126c83ca892f2fe37bc644faa8146c95a866bdc3d914d8c69a36d7f"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_config",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_config.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "os"
      ],
      "hash": "8039352fe401728b66271974e7170bbc9fc1f6423971b2f9a693d3025ba4cf77"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "file_hash",
          "docstring": "Compute SHA-256 hash of file contents.",
          "line_range": [
            9,
            16
          ],
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "extract_comments",
          "docstring": "Extract single-line and multi-line comments using tokenize.",
          "line_range": [
            18,
            33
          ],
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "Compute file size, last modified time, line count, and optional hash.",
          "line_range": [
            35,
            51
          ],
          "parameters": [
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path and dependencies.",
          "line_range": [
            53,
            64
          ],
          "parameters": [
            "path",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_signature",
          "docstring": "Generate function signature.",
          "line_range": [
            66,
            69
          ],
          "parameters": [
            "func_node"
          ],
          "decorators": []
        },
        {
          "name": "extract_dependencies",
          "docstring": "Extract module-level imports.",
          "line_range": [
            96,
            105
          ],
          "parameters": [
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module in a single pass.",
          "line_range": [
            107,
            211
          ],
          "parameters": [
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            73,
            75
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": [
            77,
            84
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "",
          "line_range": [
            86,
            89
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "",
          "line_range": [
            91,
            94
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "Extract function calls and module dependencies.",
          "line_range": [
            71,
            94
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                73,
                75
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": [
                77,
                84
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "",
              "line_range": [
                86,
                89
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "",
              "line_range": [
                91,
                94
              ],
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "file_hash": [
          "hashlib.sha256",
          "f.read",
          "logging.error",
          "open"
        ],
        "extract_comments": [
          "comments.append",
          "tokenize.tokenize",
          "logging.error",
          "open"
        ],
        "compute_file_metadata": [
          "file_hash",
          "os.stat",
          "sum",
          "logging.error",
          "open"
        ],
        "infer_category": [
          "path.lower",
          "any"
        ],
        "get_signature": [],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "extract_dependencies": [
          "ast.walk",
          "set",
          "dependencies.add",
          "sorted",
          "isinstance",
          "dependencies.update"
        ],
        "analyze_module": [
          "hashlib.sha256",
          "f.read",
          "classes.append",
          "str",
          "visitor.visit",
          "infer_category",
          "getattr",
          "isinstance",
          "compute_file_metadata",
          "logging.error",
          "open",
          "functions.append",
          "get_signature",
          "methods.append",
          "source.splitlines",
          "CallVisitor",
          "extract_dependencies",
          "ast.parse",
          "sorted",
          "extract_comments",
          "ast.get_docstring"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "tokenize",
        "typing"
      ],
      "hash": "64414a61354180cdf7bc870ad863a721a41dfad1ce0e4b407086bc4e4614956d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure, respecting .gitignore and patterns.",
          "line_range": [
            20,
            65
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with robust .gitignore filtering using pathlib.",
          "line_range": [
            67,
            136
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": [
            138,
            164
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "dirnames.clear",
          "structure.append",
          "fnmatch.fnmatch",
          "rel_dir.split",
          "os.walk",
          "sorted",
          "str",
          "file_path.relative_to",
          "Path",
          "exclude_patterns.extend",
          "logging.debug",
          "any",
          "dir_path.relative_to"
        ],
        "build_toc_and_modules": [
          "modules.append",
          "fnmatch.fnmatch",
          "rel_dir.split",
          "sum",
          "logging.info",
          "toc.append",
          "len",
          "os.walk",
          "str",
          "file_path.relative_to",
          "Path",
          "exclude_patterns.extend",
          "logging.debug",
          "any",
          "dir_path.relative_to",
          "analyze_module"
        ],
        "generate_json": [
          "get_folder_structure",
          "len",
          "build_toc_and_modules"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Tuple",
        "analyze_module",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing"
      ],
      "hash": "8dd361cd3055446ae6ff3bad8764ce005b819f53176970c8ccd9bb48edc738cd"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct.py",
      "category": "core",
      "module_doc": "Generate JSON for workspace based on user instructions template.\n\nCreates structure:\n- metadata with description, instructions, and version\n- toc with module summaries and categories\n- modules with detailed function/class info, comments, call graphs, and categories",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore, logging loaded patterns.",
          "line_range": [
            48,
            62
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_goals",
          "docstring": "Load goals from semicolon-separated string, file, or interactive editor.",
          "line_range": [
            64,
            108
          ],
          "parameters": [
            "goals_input"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "Compute SHA-256 hash of file contents.",
          "line_range": [
            110,
            117
          ],
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "extract_comments",
          "docstring": "Extract single-line and multi-line comments using tokenize.",
          "line_range": [
            119,
            134
          ],
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "Compute file size, last modified time, line count, and optional hash.",
          "line_range": [
            136,
            152
          ],
          "parameters": [
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path and dependencies.",
          "line_range": [
            154,
            165
          ],
          "parameters": [
            "path",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_signature",
          "docstring": "Generate function signature.",
          "line_range": [
            167,
            170
          ],
          "parameters": [
            "func_node"
          ],
          "decorators": []
        },
        {
          "name": "extract_dependencies",
          "docstring": "Extract module-level imports.",
          "line_range": [
            197,
            206
          ],
          "parameters": [
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module in a single pass.",
          "line_range": [
            208,
            312
          ],
          "parameters": [
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with robust .gitignore filtering using pathlib.",
          "line_range": [
            314,
            382
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": [
            384,
            406
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes",
            "goals_input"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            408,
            441
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            174,
            176
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": [
            178,
            185
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "",
          "line_range": [
            187,
            190
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "",
          "line_range": [
            192,
            195
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "Extract function calls and module dependencies.",
          "line_range": [
            172,
            195
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                174,
                176
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": [
                178,
                185
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "",
              "line_range": [
                187,
                190
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "",
              "line_range": [
                192,
                195
              ],
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "load_gitignore": [
          "line.strip",
          "logging.warning",
          "len",
          "line.startswith",
          "logging.info",
          "logging.error",
          "open"
        ],
        "load_goals": [
          "line.strip",
          "temp.write",
          "subprocess.run",
          "len",
          "g.strip",
          "goals_input.split",
          "line.startswith",
          "tempfile.NamedTemporaryFile",
          "temp.flush",
          "os.unlink",
          "logging.info",
          "logging.error",
          "open"
        ],
        "file_hash": [
          "hashlib.sha256",
          "f.read",
          "logging.error",
          "open"
        ],
        "extract_comments": [
          "comments.append",
          "tokenize.tokenize",
          "logging.error",
          "open"
        ],
        "compute_file_metadata": [
          "file_hash",
          "os.stat",
          "sum",
          "logging.error",
          "open"
        ],
        "infer_category": [
          "path.lower",
          "any"
        ],
        "get_signature": [],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "extract_dependencies": [
          "ast.walk",
          "set",
          "dependencies.add",
          "sorted",
          "isinstance",
          "dependencies.update"
        ],
        "analyze_module": [
          "hashlib.sha256",
          "f.read",
          "classes.append",
          "str",
          "visitor.visit",
          "infer_category",
          "getattr",
          "isinstance",
          "compute_file_metadata",
          "logging.error",
          "open",
          "functions.append",
          "get_signature",
          "methods.append",
          "source.splitlines",
          "CallVisitor",
          "extract_dependencies",
          "ast.parse",
          "sorted",
          "extract_comments",
          "ast.get_docstring"
        ],
        "build_toc_and_modules": [
          "modules.append",
          "fnmatch.fnmatch",
          "rel_dir.split",
          "sum",
          "logging.info",
          "load_gitignore",
          "toc.append",
          "len",
          "os.walk",
          "dir_path.relative_to",
          "str",
          "file_path.relative_to",
          "Path",
          "logging.debug",
          "any",
          "exclude_patterns.extend",
          "analyze_module"
        ],
        "generate_json": [
          "load_goals",
          "len",
          "build_toc_and_modules"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "generate_json",
          "logging.warning",
          "language_patterns.get",
          "parser.parse_args",
          "include_patterns.extend",
          "json.dump",
          "logging.info",
          "logging.error",
          "open"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ast",
        "datetime",
        "fnmatch",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "tempfile",
        "tokenize",
        "typing"
      ],
      "hash": "c684eccee9a5725ed2f3624b407328c9bf95d3b9fe2c81dd11ac442eb9320004"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "compute_hash",
          "docstring": "Compute SHA-256 hash of content.",
          "line_range": [
            17,
            19
          ],
          "parameters": [
            "content"
          ],
          "decorators": []
        },
        {
          "name": "load_struct_json",
          "docstring": "Load struct.json for metadata.",
          "line_range": [
            21,
            27
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_llmstruct_toml",
          "docstring": "Load llmstruct.toml for configuration.",
          "line_range": [
            29,
            35
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_docs",
          "docstring": "Generate all documentation files with idempotency.",
          "line_range": [
            37,
            626
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "compute_hash": [
          "hashlib.sha256",
          "content.encode"
        ],
        "load_struct_json": [
          "Path",
          "json.load",
          "struct_path.exists",
          "open"
        ],
        "load_llmstruct_toml": [
          "Path",
          "toml.load",
          "toml_path.exists",
          "open"
        ],
        "generate_docs": [
          "f.read",
          "toml_data.get",
          "compute_hash",
          "str",
          "chr",
          "struct_data.get",
          "load_struct_json",
          "datetime.utcnow",
          "json.dumps",
          "open",
          "logger.info",
          "f.write",
          "project_name.lower",
          "any",
          "doc_files.items",
          "metadata.get",
          "load_llmstruct_toml",
          "Path",
          "file_path.exists"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "toml"
      ],
      "hash": "a042662093ed4e29ac059126f2e8ed9fac4f3c63bcc17f657e5eb5643d5ca453"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": "1074e7bf11e1c41bb9d00c7b85c8667477225258a2465cb305f3fe060e77d049"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collector",
      "path": "temp_workfiles/unsorted_mess/dump/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            5,
            9
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": [
            11,
            25
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "gitignore_parser.parse_gitignore",
          "gitignore_path.exists"
        ],
        "collect_project": [
          "f.read",
          "root_dir.rglob",
          "load_gitignore",
          "gitignore",
          "doc_files.items",
          "str",
          "file_path.is_file",
          "Path",
          "json.dump",
          "any",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "pathlib"
      ],
      "hash": "08a1889cebe8f7ef48428a6d74b5c24e9934ba943e52eec80b98f7ddc5b27f4e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load patterns from .gitignore.",
          "line_range": [
            6,
            16
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "should_ignore",
          "docstring": "Check if path should be ignored based on directories or .gitignore.",
          "line_range": [
            18,
            32
          ],
          "parameters": [
            "path",
            "root_dir",
            "ignore_dirs",
            "gitignore_patterns"
          ],
          "decorators": []
        },
        {
          "name": "collect_docs",
          "docstring": "Collect all documentation files into a JSON file.",
          "line_range": [
            34,
            65
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.strip",
          "gitignore_path.exists",
          "patterns.append",
          "line.startswith",
          "open"
        ],
        "should_ignore": [
          "path.relative_to",
          "fnmatch",
          "str",
          "rel_path.startswith"
        ],
        "collect_docs": [
          "f.read",
          "print",
          "root_dir.rglob",
          "load_gitignore",
          "should_ignore",
          "path.relative_to",
          "str",
          "json.dump",
          "Path",
          "path.is_file",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "os",
        "pathlib"
      ],
      "hash": "544045bbc298375dd9da40817407358945a91c66a9e83145b9575efe43155f29"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "collect_docs",
          "docstring": "Collect all documentation files into a single text file.",
          "line_range": [
            4,
            52
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "collect_docs": [
          "f.read",
          "print",
          "collected.append",
          "dir_path.rglob",
          "dir_path.exists",
          "f.write",
          "Path",
          "file_path.is_file",
          "file_path.exists",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": "d3bf2ae6eea9fc46bc5e68a3354c0f9f654fb78dce3c4f64648f055986c19600"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.refactored_structure",
      "path": "temp_workfiles/unsorted_mess/dump/refactored_structure.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            20,
            30
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "",
          "line_range": [
            33,
            36
          ],
          "parameters": [
            "json_path",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": [
            9,
            11
          ],
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": [
            15,
            17
          ],
          "parameters": [
            "self",
            "modules",
            "metadata"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "PythonParser",
          "docstring": "",
          "line_range": [
            2,
            5
          ],
          "methods": [
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": [
                3,
                5
              ],
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": [
            8,
            11
          ],
          "methods": [
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": [
                9,
                11
              ],
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "JSONGenerator",
          "docstring": "",
          "line_range": [
            14,
            17
          ],
          "methods": [
            {
              "name": "generate",
              "docstring": "",
              "line_range": [
                15,
                17
              ],
              "parameters": [
                "self",
                "modules",
                "metadata"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "parse_module": [],
        "generate": [],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "JavaScriptParser",
          "parser.parse_module",
          "parser.parse_args",
          "JSONGenerator",
          "generator.generate",
          "PythonParser",
          "json.dump",
          "open"
        ],
        "attach_to_llm_request": [
          "json.load",
          "json.dumps",
          "open"
        ]
      },
      "dependencies": [],
      "hash": "0442a6d8e7644a55f2e622bea25560760098d3c0184cbb4a540364b44f99c3a7"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path.",
          "line_range": [
            11,
            22
          ],
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module to extract functions, classes, and call graph.",
          "line_range": [
            38,
            123
          ],
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            26,
            28
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": [
            30,
            36
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function and module calls.",
          "line_range": [
            24,
            36
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                28
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": [
                30,
                36
              ],
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "path.lower"
        ],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "analyze_module": [
          "hashlib.sha256",
          "f.read",
          "ast.walk",
          "code.splitlines",
          "dependencies.add",
          "classes.append",
          "str",
          "visitor.visit",
          "infer_category",
          "isinstance",
          "logging.error",
          "open",
          "functions.append",
          "datetime.fromtimestamp",
          "len",
          "methods.append",
          "CallVisitor",
          "relative_path.encode",
          "ast.parse",
          "os.stat",
          "set",
          "sorted",
          "Path",
          "ast.unparse",
          "dependencies.update",
          "ast.get_docstring",
          "code.encode"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "ast",
        "datetime",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": "c0ab3443a33551c1ddfc7ce19a8dbb5768c8e46527569f6f55e612beb47148a6"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_templates___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_templates___init__.py",
      "category": "core",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "2e4f47b42d3867bec6d74f86f2d7fd21d89de1f941f55af0d9b257b0972add67"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end (1)",
      "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end (1).py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_end_to_end",
          "docstring": "",
          "line_range": [
            7,
            68
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_end_to_end": [
          "main",
          "main_py.write_text",
          "tasks_json.write_text",
          "validate_struct_json",
          "next",
          "len",
          "utils_py.write_text",
          "str",
          "output_json.exists",
          "json.load",
          "any",
          "project_dir.mkdir",
          "open"
        ]
      },
      "dependencies": [
        "json",
        "llmstruct.cli",
        "llmstruct.validators.json_validator",
        "main",
        "os",
        "pytest",
        "sys",
        "validate_struct_json"
      ],
      "hash": "24553d26ed0bbc370ec1836d7b8dcb41f7f9c353960fea022160fab29d33a176"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_content_hash",
          "docstring": "Calculate hash of content for idempotency.",
          "line_range": [
            5,
            7
          ],
          "parameters": [
            "content"
          ],
          "decorators": []
        },
        {
          "name": "create_file",
          "docstring": "Create or update file if content changed.",
          "line_range": [
            9,
            24
          ],
          "parameters": [
            "path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "generate_docs_tree",
          "docstring": "Generate Diátaxis-compliant documentation for llmstruct.",
          "line_range": [
            26,
            410
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "print_docs_tree",
          "docstring": "Print documentation tree.",
          "line_range": [
            412,
            421
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_content_hash": [
          "hashlib.sha256",
          "content.encode"
        ],
        "create_file": [
          "content.strip",
          "f.read",
          "print",
          "get_content_hash",
          "f.write",
          "path.exists",
          "open"
        ],
        "generate_docs_tree": [
          "Path",
          "create_file"
        ],
        "print_docs_tree": [
          "root.replace",
          "root.startswith",
          "print",
          "os.walk"
        ]
      },
      "dependencies": [
        "Path",
        "hashlib",
        "os",
        "pathlib"
      ],
      "hash": "e8255112b3a3b0bc96ea1608fea08491b70a396bd2c0c507af9539b02e10859d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_main",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": [
            5,
            8
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": [
            12,
            14
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": [
            10,
            14
          ],
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": [
                12,
                14
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "utils.helper",
          "print"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": "fab60f7032e1e05acd0ad22fa6c62e9807380837f7dcdb9281ec4363af517d23"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.filter_llmstruct_json",
      "path": "temp_workfiles/unsorted_mess/dump/filter_llmstruct_json.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load .gitignore patterns.",
          "line_range": [
            7,
            16
          ],
          "parameters": [
            "gitignore_path"
          ],
          "decorators": []
        },
        {
          "name": "filter_json",
          "docstring": "Filter struct.json to exclude .gitignore paths and optionally tests.",
          "line_range": [
            18,
            52
          ],
          "parameters": [
            "data",
            "gitignore_patterns",
            "include_tests"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            54,
            79
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.strip",
          "line.startswith",
          "patterns.append",
          "open"
        ],
        "filter_json": [
          "fnmatch.fnmatch",
          "len",
          "data.get",
          "any",
          "module.get"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "load_gitignore",
          "parser.parse_args",
          "filter_json",
          "json.dump",
          "str",
          "logging.basicConfig",
          "json.load",
          "logging.info",
          "logging.error",
          "open"
        ]
      },
      "dependencies": [
        "argparse",
        "fnmatch",
        "json",
        "logging",
        "os"
      ],
      "hash": "624fb8445e89313620389c69ead5749c0a27b6a853c362cb459d761a766ea86b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_internal_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_internal_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": "54ceb0dc82fd567ecc622f6d080cd832464b135b7554fe7ecf69fe888469e6c1"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": [
            30,
            36
          ],
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": [
            38,
            86
          ],
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": [
            88,
            111
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": [
            113,
            137
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": [
            139,
            156
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": [
            158,
            168
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": [
            29,
            168
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": [
                30,
                36
              ],
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": [
                38,
                86
              ],
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": [
                88,
                111
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": [
                113,
                137
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": [
                139,
                156
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": [
                158,
                168
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "int",
          "os.getenv",
          "logging.info"
        ],
        "query": [
          "self._query_anthropic",
          "logging.warning",
          "range",
          "asyncio.sleep",
          "json.dumps",
          "self._query_grok",
          "Path",
          "json.load",
          "self._query_hybrid",
          "logging.info",
          "logging.error",
          "self._query_ollama"
        ],
        "_query_grok": [
          "aiohttp.ClientSession",
          "response.json",
          "session.post",
          "logging.info",
          "result.get",
          "logging.error"
        ],
        "_query_anthropic": [
          "aiohttp.ClientSession",
          "response.json",
          "session.post",
          "logging.info",
          "result.get",
          "logging.error"
        ],
        "_query_ollama": [
          "logging.debug",
          "aiohttp.ClientSession",
          "response.json",
          "session.post",
          "logging.info",
          "result.get",
          "logging.error"
        ],
        "_query_hybrid": [
          "self._query_anthropic",
          "asyncio.gather",
          "len",
          "isinstance",
          "self._query_grok",
          "logging.info",
          "self._query_ollama"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "requests",
        "typing",
        "urljoin",
        "urllib.parse"
      ],
      "hash": "e72334b04520134cdd3361b207dee9ab3200ccb599568d9178e1c55caa1d1c75"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client (3)",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client (3).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": [
            25,
            30
          ],
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": [
            32,
            80
          ],
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": [
            82,
            105
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": [
            107,
            131
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": [
            133,
            149
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": [
            151,
            161
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": [
            24,
            161
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": [
                25,
                30
              ],
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": [
                32,
                80
              ],
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": [
                82,
                105
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": [
                107,
                131
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": [
                133,
                149
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": [
                151,
                161
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "int",
          "os.getenv"
        ],
        "query": [
          "self._query_anthropic",
          "logging.warning",
          "range",
          "asyncio.sleep",
          "json.dumps",
          "self._query_grok",
          "Path",
          "json.load",
          "self._query_hybrid",
          "logging.info",
          "logging.error",
          "self._query_ollama"
        ],
        "_query_grok": [
          "aiohttp.ClientSession",
          "response.json",
          "session.post",
          "logging.info",
          "result.get",
          "logging.error"
        ],
        "_query_anthropic": [
          "aiohttp.ClientSession",
          "response.json",
          "session.post",
          "logging.info",
          "result.get",
          "logging.error"
        ],
        "_query_ollama": [
          "aiohttp.ClientSession",
          "response.json",
          "session.post",
          "urljoin",
          "logging.info",
          "result.get",
          "logging.error"
        ],
        "_query_hybrid": [
          "self._query_anthropic",
          "asyncio.gather",
          "len",
          "isinstance",
          "self._query_grok",
          "logging.info",
          "self._query_ollama"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "requests",
        "typing",
        "urljoin",
        "urllib.parse"
      ],
      "hash": "c9345a867db01b5e49482990bd3ad1945e0d9ee72ef0ebc70959b4ad031d4a83"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.tests___init__",
      "path": "temp_workfiles/unsorted_mess/dump/tests___init__.py",
      "category": "core",
      "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "3675d6409c7b426c52e2404da2491a2c9243eaa4a65d877a7349c268d55b1842"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.check_docs",
      "path": "temp_workfiles/unsorted_mess/dump/check_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_struct",
          "docstring": "Load struct.json.",
          "line_range": [
            5,
            8
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_docs",
          "docstring": "Check docs/ against struct.json and dialogue state.",
          "line_range": [
            10,
            42
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run doc check and print report.",
          "line_range": [
            44,
            52
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_struct": [
          "json.load",
          "open"
        ],
        "check_docs": [
          "f.read",
          "load_struct",
          "struct.get",
          "content.lower",
          "os.walk",
          "issues.append",
          "Path",
          "open"
        ],
        "main": [
          "check_docs",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib"
      ],
      "hash": "94bbce8d41be0dde2df6722554db4525b64ba266eef3e9a7c4e1b9c157b58861"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.javascript_parser",
      "path": "temp_workfiles/unsorted_mess/dump/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            8,
            12
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": [
            14,
            19
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": [
            21,
            35
          ],
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": [
            37,
            89
          ],
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": [
            61,
            63
          ],
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": [
            7,
            89
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                8,
                12
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": [
                14,
                19
              ],
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": [
                21,
                35
              ],
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": [
                37,
                89
              ],
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "hashlib.sha256",
          "f.read",
          "open"
        ],
        "compute_file_metadata": [
          "self.file_hash",
          "sum",
          "os.stat",
          "open"
        ],
        "parse_module": [
          "f.read",
          "self.compute_file_metadata",
          "esprima.parseModule",
          "str",
          "open"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": "6a036a610c79e41888a614ff882d1ad721e137075f2580972ef883a27f3d453c"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.self_run",
      "path": "temp_workfiles/unsorted_mess/dump/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json based on prompt keywords.",
          "line_range": [
            16,
            25
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered struct.json to LLM prompt.",
          "line_range": [
            27,
            51
          ],
          "parameters": [
            "context_path",
            "prompt"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "struct.get",
          "any",
          "prompt.lower",
          "module.get"
        ],
        "attach_to_llm_request": [
          "context_file.exists",
          "prompt.lower",
          "filter_struct",
          "filter_json",
          "json.dumps",
          "Path",
          "json.load",
          "logging.error",
          "open"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "af8535d837b1269ec9ff1b3b271f55199ad073d5e517e618f506407376756553"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure, respecting .gitignore and patterns.",
          "line_range": [
            12,
            32
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with robust .gitignore filtering using pathlib.",
          "line_range": [
            34,
            53
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": [
            55,
            93
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "structure.append",
          "file_path.match",
          "os.walk",
          "sorted",
          "str",
          "file_path.relative_to",
          "Path",
          "any"
        ],
        "build_toc_and_modules": [
          "modules.append",
          "python_parser.analyze_module",
          "toc.append",
          "len",
          "f.match",
          "str",
          "Path",
          "any"
        ],
        "generate_json": [
          "list",
          "set",
          "len",
          "get_folder_structure",
          "Path",
          "sum",
          "build_toc_and_modules"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers",
        "pathlib",
        "python_parser",
        "typing"
      ],
      "hash": "9f371070eaa9ab67cb856f703de10dcd04e2b37f7339e4a862c536e172f833af"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end",
      "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_end_to_end",
          "docstring": "",
          "line_range": [
            7,
            35
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_end_to_end": [
          "main",
          "main_py.write_text",
          "validate_struct_json",
          "output_json.exists",
          "str",
          "json.load",
          "project_dir.mkdir",
          "open"
        ]
      },
      "dependencies": [
        "json",
        "llmstruct.cli",
        "llmstruct.validators.json_validator",
        "main",
        "os",
        "pytest",
        "sys",
        "validate_struct_json"
      ],
      "hash": "806f59484282d9ae6bf9147649718dba0e8ad0257a82143fb1529b321b96d9e9"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            8,
            9
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": [
            11,
            17
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            20,
            24
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": [
            26,
            31
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": [
            33,
            47
          ],
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": [
            49,
            132
          ],
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "",
          "line_range": [
            7,
            17
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                8,
                9
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": [
                11,
                17
              ],
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        },
        {
          "name": "PythonParser",
          "docstring": "",
          "line_range": [
            19,
            132
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                20,
                24
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": [
                26,
                31
              ],
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": [
                33,
                47
              ],
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": [
                49,
                132
              ],
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "file_hash": [
          "hashlib.sha256",
          "f.read",
          "open"
        ],
        "compute_file_metadata": [
          "self.file_hash",
          "sum",
          "os.stat",
          "open"
        ],
        "parse_module": [
          "f.read",
          "self.compute_file_metadata",
          "ast.walk",
          "dependencies.append",
          "classes.append",
          "str",
          "visitor.visit",
          "isinstance",
          "call.split",
          "open",
          "functions.append",
          "methods.append",
          "CallVisitor",
          "dependencies.extend",
          "list",
          "ast.parse",
          "set",
          "sorted",
          "ast.get_docstring"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "ast",
        "datetime",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": "a0ea16a3ad6d7a1b62a142bd1e81fa4c110dc895778dfc47776f47788ecc459f"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers___init__.py",
      "category": "core",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "PythonParser",
        "javascript_parser",
        "python_parser"
      ],
      "hash": "04af4d5ffe5294bc00ed6f88b5f2f9ae9e63240769974e608a61bd9b0a11878e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            12,
            22
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_goals",
          "docstring": "Load project goals from pyproject.toml or default.",
          "line_range": [
            24,
            41
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            43,
            74
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.strip",
          "gitignore_path.open",
          "gitignore_path.exists",
          "line.startswith",
          "Path",
          "logging.error"
        ],
        "load_goals": [
          "toml.load",
          "config.get",
          "pyproject_path.open",
          "pyproject_path.exists",
          "Path",
          "logging.error"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "generate_json",
          "load_gitignore",
          "parser.parse_args",
          "json.dump",
          "logging.info",
          "load_goals",
          "logging.error",
          "open"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "argparse",
        "generate_json",
        "generators.json_generator",
        "json",
        "logging",
        "os",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": "f7e56301b411c981777ab2fc57294c582e0ec962ec7ee9f2a5456987077c1f04"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency_proxybypass",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency_proxybypass.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "is_local_address",
          "docstring": "",
          "line_range": [
            12,
            19
          ],
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": [
            21,
            25
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": [
            27,
            36
          ],
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": [
            38,
            55
          ],
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": [
            57,
            64
          ],
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": [
            66,
            72
          ],
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": [
            74,
            76
          ],
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            78,
            100
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "is_local_address": [
          "ipaddress.ip_address",
          "urlparse"
        ],
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "run_llm_request": [
          "get_system_metrics",
          "session.post",
          "is_local_address",
          "len",
          "time.perf_counter",
          "requests.Session",
          "response.json"
        ],
        "test_with_llmstruct": [
          "f.read",
          "subprocess.run",
          "struct_path.exists",
          "run_llm_request",
          "str",
          "Path",
          "open"
        ],
        "test_without_llmstruct": [
          "Path",
          "run_llm_request",
          "f.read",
          "open"
        ],
        "evaluate_accuracy": [
          "response_text.lower",
          "sum",
          "len"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "evaluate_accuracy",
          "print",
          "test_with_llmstruct",
          "test_without_llmstruct",
          "parser.parse_args",
          "range",
          "setup_proxy",
          "json.dump",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "ipaddress",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "subprocess",
        "time",
        "urllib.parse",
        "urlparse"
      ],
      "hash": "82f3be0fa8d454046398640df82abc2c23b1f21606cacc8568a09a9d3a64cae1"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.scripts_setup_github",
      "path": "temp_workfiles/unsorted_mess/dump/scripts_setup_github.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": [
            7,
            9
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "create_issue",
          "docstring": "",
          "line_range": [
            11,
            19
          ],
          "parameters": [
            "repo",
            "token",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "setup_ci_cd",
          "docstring": "",
          "line_range": [
            21,
            40
          ],
          "parameters": [
            "repo_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_templates",
          "docstring": "",
          "line_range": [
            42,
            64
          ],
          "parameters": [
            "repo_dir"
          ],
          "decorators": []
        },
        {
          "name": "update_readme",
          "docstring": "",
          "line_range": [
            66,
            78
          ],
          "parameters": [
            "repo_dir",
            "user_guide_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            80,
            106
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "json.load",
          "open"
        ],
        "create_issue": [
          "requests.post",
          "response.json",
          "task.get"
        ],
        "setup_ci_cd": [
          "Path",
          "workflow_dir.mkdir",
          "ci_yml.write_text"
        ],
        "setup_templates": [
          "Path",
          "pr_template.write_text",
          "template_dir.mkdir",
          "issue_template.write_text"
        ],
        "update_readme": [
          "Path",
          "readme.write_text"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "update_readme",
          "print",
          "issue.get",
          "setup_ci_cd",
          "parser.parse_args",
          "task.get",
          "create_issue",
          "load_json",
          "setup_templates"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "os",
        "pathlib",
        "requests"
      ],
      "hash": "98626533435f0a01a61483851be1b02b9bcb0d7b4d9753dd64331ec551bc9bb1"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__ (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__ (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "2e73db9191095d6794cba3b47e26e821278e1ad004e3d56848c2b31583ac28b6"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.cli",
      "path": "temp_workfiles/unsorted_mess/dump/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            25,
            35
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            37,
            46
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            48,
            57
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": [
            59,
            73
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            75,
            82
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            84,
            195
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            197,
            232
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            234,
            252
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            254,
            256
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            258,
            260
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            262,
            264
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            266,
            329
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.strip",
          "gitignore_path.open",
          "gitignore_path.exists",
          "line.startswith",
          "Path",
          "logging.error"
        ],
        "load_config": [
          "config_path.exists",
          "toml.load",
          "config_path.open",
          "Path",
          "logging.error"
        ],
        "read_file_content": [
          "f.read",
          "path.open",
          "Path",
          "path.is_file",
          "logging.error"
        ],
        "write_to_file": [
          "logging.error",
          "logging.warning",
          "file_path.open",
          "base_path.mkdir",
          "f.write",
          "str",
          "Path",
          "logging.info",
          "file_path.exists"
        ],
        "parse_files_from_response": [
          "files.append",
          "content.strip",
          "filename.strip",
          "re.findall"
        ],
        "interactive": [
          "input",
          "scan_match.group",
          "user_input.lower",
          "logging.warning",
          "read_file_content",
          "files_to_write.append",
          "parse",
          "get_folder_structure",
          "print",
          "write_dir.startswith",
          "load_gitignore",
          "attach_to_llm_request",
          "json.dumps",
          "re.search",
          "logging.error",
          "write_to_file",
          "os.listdir",
          "write_match.group",
          "LLMClient",
          "sorted",
          "client.query",
          "Path",
          "parse_files_from_response"
        ],
        "parse": [
          "generate_json",
          "config.get",
          "load_gitignore",
          "logging.warning",
          "load_config",
          "json.dump",
          "Path",
          "logging.info",
          "logging.error"
        ],
        "query": [
          "LLMClient",
          "client.query",
          "json.dump",
          "Path",
          "logging.info",
          "logging.error"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "argparse.ArgumentParser",
          "parser.add_subparsers",
          "subparsers.add_parser",
          "interactive",
          "review_parser.add_argument",
          "context_parser.add_argument",
          "parser.parse_args",
          "asyncio.run",
          "parse_parser.add_argument",
          "interactive_parser.add_argument",
          "parse",
          "dogfood",
          "query_parser.add_argument",
          "review",
          "context",
          "dogfood_parser.add_argument",
          "query"
        ]
      },
      "dependencies": [
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": "a7ac7573d9aa554ea047c752c8191ecfed78590517fc8589e44046a759d05e4d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_validators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_validators___init__.py",
      "category": "core",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": "f4790ac68ca453d97ae9dcd14f422afbbd0da889e5924e6626392817449c7fb3"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct (1).py",
      "category": "core",
      "module_doc": "Generate JSON for workspace based on user instructions template.\n\nCreates structure:\n- metadata with description, instructions, and version\n- toc with module summaries and categories\n- modules with detailed function/class info, comments, call graphs, and categories",
      "functions": [
        {
          "name": "load_goals",
          "docstring": "Load goals from file or interactive editor.",
          "line_range": [
            47,
            73
          ],
          "parameters": [
            "goals_file"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "Compute SHA-256 hash of file contents.",
          "line_range": [
            75,
            82
          ],
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "extract_comments",
          "docstring": "Extract single-line and multi-line comments using tokenize.",
          "line_range": [
            84,
            99
          ],
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "Compute file size, last modified time, line count, and optional hash.",
          "line_range": [
            101,
            117
          ],
          "parameters": [
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path and dependencies.",
          "line_range": [
            119,
            130
          ],
          "parameters": [
            "path",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_signature",
          "docstring": "Generate function signature.",
          "line_range": [
            132,
            135
          ],
          "parameters": [
            "func_node"
          ],
          "decorators": []
        },
        {
          "name": "extract_dependencies",
          "docstring": "Extract module-level imports.",
          "line_range": [
            162,
            171
          ],
          "parameters": [
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module in a single pass.",
          "line_range": [
            173,
            277
          ],
          "parameters": [
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with filtering.",
          "line_range": [
            279,
            321
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": [
            323,
            345
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes",
            "goals_file"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            347,
            366
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            139,
            141
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": [
            143,
            150
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "",
          "line_range": [
            152,
            155
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "",
          "line_range": [
            157,
            160
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "Extract function calls and module dependencies.",
          "line_range": [
            137,
            160
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                139,
                141
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": [
                143,
                150
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "",
              "line_range": [
                152,
                155
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "",
              "line_range": [
                157,
                160
              ],
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "load_goals": [
          "line.strip",
          "temp.write",
          "subprocess.run",
          "tempfile.NamedTemporaryFile",
          "line.startswith",
          "temp.flush",
          "os.unlink",
          "logging.error",
          "open"
        ],
        "file_hash": [
          "hashlib.sha256",
          "f.read",
          "logging.error",
          "open"
        ],
        "extract_comments": [
          "comments.append",
          "tokenize.tokenize",
          "logging.error",
          "open"
        ],
        "compute_file_metadata": [
          "file_hash",
          "os.stat",
          "sum",
          "logging.error",
          "open"
        ],
        "infer_category": [
          "path.lower",
          "any"
        ],
        "get_signature": [],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "extract_dependencies": [
          "ast.walk",
          "set",
          "dependencies.add",
          "sorted",
          "isinstance",
          "dependencies.update"
        ],
        "analyze_module": [
          "hashlib.sha256",
          "f.read",
          "classes.append",
          "str",
          "visitor.visit",
          "infer_category",
          "getattr",
          "isinstance",
          "compute_file_metadata",
          "logging.error",
          "open",
          "functions.append",
          "get_signature",
          "methods.append",
          "source.splitlines",
          "CallVisitor",
          "extract_dependencies",
          "ast.parse",
          "sorted",
          "extract_comments",
          "ast.get_docstring"
        ],
        "build_toc_and_modules": [
          "modules.append",
          "dirpath.split",
          "fnmatch.fnmatch",
          "sum",
          "load_gitignore",
          "toc.append",
          "len",
          "os.walk",
          "any",
          "exclude_patterns.extend",
          "analyze_module"
        ],
        "generate_json": [
          "load_goals",
          "len",
          "build_toc_and_modules"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "generate_json",
          "parser.parse_args",
          "json.dump",
          "logging.info",
          "logging.error",
          "open"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "argparse",
        "ast",
        "datetime",
        "fnmatch",
        "hashlib",
        "json",
        "logging",
        "os",
        "subprocess",
        "tempfile",
        "tokenize",
        "typing"
      ],
      "hash": "52a992dd469cf3ffacf62dabecbce612f6aa3e496001560d16cebea9421e3aa7"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_validator",
      "path": "temp_workfiles/unsorted_mess/dump/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": [
            9,
            37
          ],
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": [
            39,
            50
          ],
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "schema_file.exists",
          "json_file.exists",
          "str",
          "Path",
          "json.load",
          "logging.info",
          "validate",
          "logging.error",
          "open"
        ],
        "validate_directory": [
          "json_file.match",
          "str",
          "validate_struct_json",
          "Path",
          "any"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": "ac8e88bc69ac1ec4530efba29926c03200a92d54fbc2b03ce8d770796af8aac5"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.validate_json",
      "path": "temp_workfiles/unsorted_mess/dump/validate_json.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "",
          "line_range": [
            4,
            18
          ],
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "print",
          "str",
          "json.load",
          "validate",
          "open"
        ]
      },
      "dependencies": [
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": "7c6ebc298d9f78346aefbad1665adcc1bfe6e2b9aa097ede02e9ce6c0ef1af9d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore, logging loaded patterns.",
          "line_range": [
            21,
            35
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_goals",
          "docstring": "Load goals from semicolon-separated string, file, or interactive editor.",
          "line_range": [
            37,
            77
          ],
          "parameters": [
            "goals_input"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            79,
            120
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.strip",
          "logging.warning",
          "len",
          "line.startswith",
          "logging.info",
          "logging.error",
          "open"
        ],
        "load_goals": [
          "line.strip",
          "temp.write",
          "subprocess.run",
          "len",
          "g.strip",
          "goals_input.split",
          "line.startswith",
          "tempfile.NamedTemporaryFile",
          "temp.flush",
          "os.unlink",
          "logging.info",
          "logging.error",
          "open"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "generate_json",
          "logging.warning",
          "load_gitignore",
          "language_patterns.get",
          "parser.parse_args",
          "include_patterns.extend",
          "json.dump",
          "logging.info",
          "load_goals",
          "logging.error",
          "open"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "argparse",
        "generate_json",
        "generators.json_generator",
        "logging",
        "os",
        "subprocess",
        "tempfile",
        "typing"
      ],
      "hash": "6391a65985128992adcf79f484c9733fdb1f8c9858c5f2ab4c39a6b8a92d3e38"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.clean.internal_cleaner",
      "path": "temp_workfiles/unsorted_mess/dump/clean/internal_cleaner.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "normalize",
          "docstring": "",
          "line_range": [
            10,
            19
          ],
          "parameters": [
            "record"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "normalize": [
          "content.strip",
          "id.strip",
          "record.get",
          "isinstance",
          "str"
        ]
      },
      "dependencies": [
        "collections",
        "defaultdict",
        "glob",
        "json",
        "os"
      ],
      "hash": "d910f4c2ef5c759d4291fe230633952631b4e02cf8e12c8393e0e5d7a70f1dc2"
    },
    {
      "module_id": "temp_workfiles.dev_utils.test_efficiency",
      "path": "temp_workfiles/dev_utils/test_efficiency.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": [
            15,
            19
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_local_address",
          "docstring": "",
          "line_range": [
            22,
            28
          ],
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": [
            31,
            34
          ],
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "check_ollama",
          "docstring": "",
          "line_range": [
            37,
            42
          ],
          "parameters": [
            "api_url"
          ],
          "decorators": []
        },
        {
          "name": "optimize_prompt",
          "docstring": "",
          "line_range": [
            45,
            51
          ],
          "parameters": [
            "struct_data",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": [
            54,
            78
          ],
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "check_llmstruct_cli",
          "docstring": "",
          "line_range": [
            81,
            82
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": [
            85,
            112
          ],
          "parameters": [
            "api_url",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": [
            115,
            122
          ],
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_grok",
          "docstring": "",
          "line_range": [
            125,
            147
          ],
          "parameters": [
            "api_key",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": [
            150,
            152
          ],
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            155,
            215
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "is_local_address": [
          "ipaddress.ip_address",
          "urlparse"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "check_ollama": [
          "api_url.replace",
          "requests.get",
          "response.json",
          "str"
        ],
        "optimize_prompt": [
          "print",
          "len",
          "struct_data.split"
        ],
        "run_llm_request": [
          "get_system_metrics",
          "print",
          "session.post",
          "is_local_address",
          "len",
          "time.perf_counter",
          "requests.Session",
          "response.raise_for_status",
          "response.json",
          "type"
        ],
        "check_llmstruct_cli": [
          "shutil.which"
        ],
        "test_with_llmstruct": [
          "optimize_prompt",
          "f.read",
          "target_path.exists",
          "subprocess.run",
          "run_llm_request",
          "FileNotFoundError",
          "check_llmstruct_cli",
          "json.dump",
          "str",
          "Path",
          "open"
        ],
        "test_without_llmstruct": [
          "optimize_prompt",
          "f.read",
          "run_llm_request",
          "Path",
          "open"
        ],
        "test_with_grok": [
          "optimize_prompt",
          "f.read",
          "open",
          "target_path.exists",
          "json.dump",
          "Path",
          "test_grok",
          "FileNotFoundError"
        ],
        "evaluate_accuracy": [
          "response_text.lower",
          "sum",
          "len"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "evaluate_accuracy",
          "print",
          "test_with_llmstruct",
          "test_without_llmstruct",
          "check_ollama",
          "parser.parse_args",
          "range",
          "setup_proxy",
          "check_llmstruct_cli",
          "str",
          "json.dump",
          "test_with_grok",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "ipaddress",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "shutil",
        "src.llmstruct.grok",
        "subprocess",
        "test_grok",
        "time",
        "urllib.parse",
        "urlparse"
      ],
      "hash": "7b4013d0a2d724e83a08ce04311d7a101a98769aa8e78e15b258bd58b44b55c0"
    },
    {
      "module_id": "temp_workfiles.dev_utils.test_audit",
      "path": "temp_workfiles/dev_utils/test_audit.py",
      "category": "test",
      "module_doc": "Test script for audit functionality.",
      "functions": [
        {
          "name": "test_audit_status",
          "docstring": "Test audit status directly.",
          "line_range": [
            7,
            49
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_audit_status": [
          "print",
          "list",
          "tasks_file.exists",
          "ideas_data.keys",
          "tasks_data.keys",
          "len",
          "t.get",
          "i.get",
          "ideas_file.exists",
          "Path",
          "json.load",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib"
      ],
      "hash": "8b6349f6348dc17c2c2a03ede44c0f6317af552a1db5501689cf235c00b3bf0e"
    },
    {
      "module_id": "bak.20250522_102827.scripts.collector",
      "path": "bak/20250522_102827/scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": [
            10,
            26
          ],
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": [
            28,
            34
          ],
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": [
            36,
            79
          ],
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            81,
            82
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "filtered.append",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "apply_filters",
          "files.append",
          "root_dir.rglob",
          "path.relative_to",
          "str",
          "path.is_file"
        ],
        "generate_struct": [
          "collect_files",
          "output_path.open",
          "len",
          "json.load",
          "logger.info",
          "uuid.uuid4",
          "str",
          "Path",
          "output_path.exists",
          "json.dump",
          "existing.get"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": "99c1374f658a9da37264f6dc659460b0d7632ff442a884de38895df6fdf47f36"
    },
    {
      "module_id": "bak.20250522_102827.scripts.validate_refs",
      "path": "bak/20250522_102827/scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": [
            8,
            39
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            41,
            42
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "source_file.exists",
          "enumerate",
          "idea.get",
          "target_file.exists",
          "logger.warning",
          "logger.error",
          "broken_links.append",
          "logger.info",
          "json.dump",
          "Path",
          "json.load"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": "311adc2adc3ed9a5df6938f8cf13b1806532984be5b722c1a6d5fcad6a771f0d"
    },
    {
      "module_id": "bak.20250522_102827.scripts.deploy_embedded_files",
      "path": "bak/20250522_102827/scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": [
            922,
            928
          ],
          "parameters": [
            "data",
            "schema"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": [
            930,
            936
          ],
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": [
            938,
            964
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            966,
            967
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "validate",
          "logger.warning"
        ],
        "backup_files": [
          "logger.info",
          "shutil.copytree",
          "datetime.now",
          "target_dir.exists"
        ],
        "deploy_embedded_files": [
          "backup_files",
          "EMBEDDED_FILES.get",
          "target_path.exists",
          "logger.error",
          "logger.info",
          "f.write",
          "json.dump",
          "Path",
          "target_path.open",
          "EMBEDDED_FILES.items",
          "validate_json"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": "087ac73ccc1591cb097c8c139a51ec83e64ec4e96888049350b8791388dfc3a9"
    },
    {
      "module_id": "bak.20250522_131121.scripts.collector",
      "path": "bak/20250522_131121/scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": [
            10,
            26
          ],
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": [
            28,
            34
          ],
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": [
            36,
            79
          ],
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            81,
            82
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "filtered.append",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "apply_filters",
          "files.append",
          "root_dir.rglob",
          "path.relative_to",
          "str",
          "path.is_file"
        ],
        "generate_struct": [
          "collect_files",
          "output_path.open",
          "len",
          "json.load",
          "logger.info",
          "uuid.uuid4",
          "str",
          "Path",
          "output_path.exists",
          "json.dump",
          "existing.get"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": "99c1374f658a9da37264f6dc659460b0d7632ff442a884de38895df6fdf47f36"
    },
    {
      "module_id": "bak.20250522_131121.scripts.validate_refs",
      "path": "bak/20250522_131121/scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": [
            8,
            39
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            41,
            42
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "source_file.exists",
          "enumerate",
          "idea.get",
          "target_file.exists",
          "logger.warning",
          "logger.error",
          "broken_links.append",
          "logger.info",
          "json.dump",
          "Path",
          "json.load"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": "311adc2adc3ed9a5df6938f8cf13b1806532984be5b722c1a6d5fcad6a771f0d"
    },
    {
      "module_id": "bak.20250522_131121.scripts.deploy_embedded_files",
      "path": "bak/20250522_131121/scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": [
            929,
            939
          ],
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": [
            941,
            947
          ],
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": [
            949,
            1003
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            1005,
            1006
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "RefResolver",
          "validate",
          "logger.error",
          "logger.warning"
        ],
        "backup_files": [
          "logger.info",
          "shutil.copytree",
          "datetime.now",
          "target_dir.exists"
        ],
        "deploy_embedded_files": [
          "backup_files",
          "EMBEDDED_FILES.get",
          "logger.warning",
          "target_path.exists",
          "Path.cwd",
          "logger.error",
          "logger.info",
          "f.write",
          "json.dump",
          "Path",
          "target_path.open",
          "validate_json"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": "d791b5c8000333aca515e37e72fb4e2443444f88163ea4975c81ee3230374cb8"
    },
    {
      "module_id": "sorting_workspace.consolidate_changelog",
      "path": "sorting_workspace/consolidate_changelog.py",
      "category": "core",
      "module_doc": "Changelog Consolidation Tool\nСобирает и подбивает чейнджлоги из разных источников",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            14,
            16
          ],
          "parameters": [
            "self",
            "workspace_path"
          ],
          "decorators": []
        },
        {
          "name": "extract_changelog_from_file",
          "docstring": "Извлекает чейнджлог из файла",
          "line_range": [
            18,
            46
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "parse_markdown_changelog",
          "docstring": "Парсит markdown чейнджлог",
          "line_range": [
            48,
            69
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "scan_workspace",
          "docstring": "Сканирует workspace на предмет чейнджлогов",
          "line_range": [
            71,
            92
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "deduplicate_entries",
          "docstring": "Удаляет дубликаты записей",
          "line_range": [
            94,
            108
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_consolidated_changelog",
          "docstring": "Генерирует сводный чейнджлог",
          "line_range": [
            110,
            147
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_project_evolution",
          "docstring": "Анализирует эволюцию проекта по чейнджлогам",
          "line_range": [
            149,
            180
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ChangelogConsolidator",
          "docstring": "",
          "line_range": [
            13,
            180
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                14,
                16
              ],
              "parameters": [
                "self",
                "workspace_path"
              ]
            },
            {
              "name": "extract_changelog_from_file",
              "docstring": "Извлекает чейнджлог из файла",
              "line_range": [
                18,
                46
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "parse_markdown_changelog",
              "docstring": "Парсит markdown чейнджлог",
              "line_range": [
                48,
                69
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "scan_workspace",
              "docstring": "Сканирует workspace на предмет чейнджлогов",
              "line_range": [
                71,
                92
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "deduplicate_entries",
              "docstring": "Удаляет дубликаты записей",
              "line_range": [
                94,
                108
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_consolidated_changelog",
              "docstring": "Генерирует сводный чейнджлог",
              "line_range": [
                110,
                147
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_project_evolution",
              "docstring": "Анализирует эволюцию проекта по чейнджлогам",
              "line_range": [
                149,
                180
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "extract_changelog_from_file": [
          "self.parse_markdown_changelog",
          "print",
          "data.items",
          "changelog_entries.extend",
          "isinstance",
          "json.load",
          "file_path.read_text",
          "open"
        ],
        "parse_markdown_changelog": [
          "re.split",
          "len",
          "entries.append",
          "range"
        ],
        "scan_workspace": [
          "file_path.is_file",
          "print",
          "str",
          "file_path.relative_to",
          "self.extract_changelog_from_file"
        ],
        "deduplicate_entries": [
          "entry.get",
          "unique_entries.append",
          "print",
          "seen.add",
          "set",
          "len"
        ],
        "generate_consolidated_changelog": [
          "entry.get",
          "e.get",
          "max",
          "len",
          "set",
          "sorted",
          "min",
          "datetime.now",
          "x.get"
        ],
        "analyze_project_evolution": [
          "entry.get",
          "e.get",
          "max",
          "min",
          "set",
          "len",
          "monthly_activity.get",
          "datetime.now",
          "monthly_activity.keys"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Path",
        "datetime",
        "json",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": "fcb0ab8fcfbb73d7cc0496a20459e7abd744ccd7459ebe4bb920a31162e9d1be"
    },
    {
      "module_id": "sorting_workspace.validate_project_state",
      "path": "sorting_workspace/validate_project_state.py",
      "category": "core",
      "module_doc": "Project State Validator & Comparator\nОценивает текущее состояние проекта относительно отсортированных данных",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            13,
            16
          ],
          "parameters": [
            "self",
            "workspace_path"
          ],
          "decorators": []
        },
        {
          "name": "load_current_state",
          "docstring": "Загружает текущее состояние проекта",
          "line_range": [
            18,
            27
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_sorted_data",
          "docstring": "Загружает отсортированные данные",
          "line_range": [
            29,
            52
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_json_safe",
          "docstring": "Безопасно загружает JSON",
          "line_range": [
            54,
            62
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "extract_ids",
          "docstring": "Извлекает все ID из данных",
          "line_range": [
            64,
            79
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "compare_data_sets",
          "docstring": "Сравнивает текущие данные с отсортированными",
          "line_range": [
            81,
            119
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_data_freshness",
          "docstring": "Анализирует актуальность данных",
          "line_range": [
            121,
            168
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_validation_report",
          "docstring": "Генерирует отчёт валидации",
          "line_range": [
            170,
            271
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "suggest_merge_commands",
          "docstring": "Предлагает команды для слияния данных",
          "line_range": [
            273,
            284
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ProjectStateValidator",
          "docstring": "",
          "line_range": [
            12,
            284
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                13,
                16
              ],
              "parameters": [
                "self",
                "workspace_path"
              ]
            },
            {
              "name": "load_current_state",
              "docstring": "Загружает текущее состояние проекта",
              "line_range": [
                18,
                27
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_sorted_data",
              "docstring": "Загружает отсортированные данные",
              "line_range": [
                29,
                52
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_json_safe",
              "docstring": "Безопасно загружает JSON",
              "line_range": [
                54,
                62
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "extract_ids",
              "docstring": "Извлекает все ID из данных",
              "line_range": [
                64,
                79
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "compare_data_sets",
              "docstring": "Сравнивает текущие данные с отсортированными",
              "line_range": [
                81,
                119
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_data_freshness",
              "docstring": "Анализирует актуальность данных",
              "line_range": [
                121,
                168
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_validation_report",
              "docstring": "Генерирует отчёт валидации",
              "line_range": [
                170,
                271
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "suggest_merge_commands",
              "docstring": "Предлагает команды для слияния данных",
              "line_range": [
                273,
                284
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self.load_current_state",
          "self.load_sorted_data"
        ],
        "load_current_state": [
          "self.load_json_safe"
        ],
        "load_sorted_data": [
          "self.load_json_safe",
          "processing_dir.exists",
          "processing_dir.glob"
        ],
        "load_json_safe": [
          "json.load",
          "print",
          "file_path.exists",
          "open"
        ],
        "extract_ids": [
          "self.extract_ids",
          "data.items",
          "set",
          "ids.update",
          "ids.add",
          "isinstance",
          "any"
        ],
        "compare_data_sets": [
          "self.extract_ids",
          "list",
          "set",
          "all_current_ids.update",
          "ids.update"
        ],
        "analyze_data_freshness": [
          "self.extract_ids",
          "created_str.replace",
          "datetime.fromisoformat",
          "len",
          "datetime.now",
          "item.get"
        ],
        "generate_validation_report": [
          "data_type.title",
          "list",
          "sum",
          "len",
          "set",
          "self.compare_data_sets",
          "datetime.now",
          "self.analyze_data_freshness"
        ],
        "suggest_merge_commands": [
          "commands.append",
          "self.compare_data_sets"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Path",
        "Set",
        "datetime",
        "json",
        "pathlib",
        "typing"
      ],
      "hash": "e4da299c494d93fa3282a0dfcb4b6a203773e145d42d88173e6fb3517d6ef263"
    },
    {
      "module_id": "sorting_workspace.sort_data",
      "path": "sorting_workspace/sort_data.py",
      "category": "core",
      "module_doc": "LLMStruct Data Sorting and Migration Tool\nАвтоматически сортирует барахло в structured JSON format",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            17,
            33
          ],
          "parameters": [
            "self",
            "workspace_path"
          ],
          "decorators": []
        },
        {
          "name": "load_template",
          "docstring": "Загружает шаблон JSON",
          "line_range": [
            35,
            39
          ],
          "parameters": [
            "self",
            "template_name"
          ],
          "decorators": []
        },
        {
          "name": "generate_artifact_id",
          "docstring": "Генерирует уникальный artifact_id",
          "line_range": [
            41,
            43
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "detect_content_type",
          "docstring": "Определяет тип контента файла",
          "line_range": [
            45,
            59
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "extract_metadata",
          "docstring": "Извлекает метаданные из файла",
          "line_range": [
            61,
            70
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "is_outdated",
          "docstring": "Проверяет, устарел ли файл",
          "line_range": [
            72,
            77
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "migrate_file",
          "docstring": "Мигрирует файл в структурированный JSON",
          "line_range": [
            79,
            121
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "populate_task_template",
          "docstring": "Заполняет шаблон задачи",
          "line_range": [
            123,
            145
          ],
          "parameters": [
            "self",
            "template",
            "content",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "populate_idea_template",
          "docstring": "Заполняет шаблон идеи",
          "line_range": [
            147,
            159
          ],
          "parameters": [
            "self",
            "template",
            "content",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "populate_artifact_template",
          "docstring": "Заполняет шаблон артефакта",
          "line_range": [
            161,
            165
          ],
          "parameters": [
            "self",
            "template",
            "content",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "populate_insight_template",
          "docstring": "Заполняет шаблон инсайта",
          "line_range": [
            167,
            172
          ],
          "parameters": [
            "self",
            "template",
            "content",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "archive_file",
          "docstring": "Архивирует файл без обработки",
          "line_range": [
            174,
            178
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "deprecate_file",
          "docstring": "Помечает файл как устаревший",
          "line_range": [
            180,
            184
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "scan_and_sort",
          "docstring": "Основная функция сканирования и сортировки",
          "line_range": [
            186,
            209
          ],
          "parameters": [
            "self",
            "unsorted_path"
          ],
          "decorators": []
        },
        {
          "name": "generate_report",
          "docstring": "Генерирует отчёт о сортировке",
          "line_range": [
            211,
            234
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMStructSorter",
          "docstring": "",
          "line_range": [
            16,
            234
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                17,
                33
              ],
              "parameters": [
                "self",
                "workspace_path"
              ]
            },
            {
              "name": "load_template",
              "docstring": "Загружает шаблон JSON",
              "line_range": [
                35,
                39
              ],
              "parameters": [
                "self",
                "template_name"
              ]
            },
            {
              "name": "generate_artifact_id",
              "docstring": "Генерирует уникальный artifact_id",
              "line_range": [
                41,
                43
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "detect_content_type",
              "docstring": "Определяет тип контента файла",
              "line_range": [
                45,
                59
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "extract_metadata",
              "docstring": "Извлекает метаданные из файла",
              "line_range": [
                61,
                70
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "is_outdated",
              "docstring": "Проверяет, устарел ли файл",
              "line_range": [
                72,
                77
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "migrate_file",
              "docstring": "Мигрирует файл в структурированный JSON",
              "line_range": [
                79,
                121
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "populate_task_template",
              "docstring": "Заполняет шаблон задачи",
              "line_range": [
                123,
                145
              ],
              "parameters": [
                "self",
                "template",
                "content",
                "metadata"
              ]
            },
            {
              "name": "populate_idea_template",
              "docstring": "Заполняет шаблон идеи",
              "line_range": [
                147,
                159
              ],
              "parameters": [
                "self",
                "template",
                "content",
                "metadata"
              ]
            },
            {
              "name": "populate_artifact_template",
              "docstring": "Заполняет шаблон артефакта",
              "line_range": [
                161,
                165
              ],
              "parameters": [
                "self",
                "template",
                "content",
                "metadata"
              ]
            },
            {
              "name": "populate_insight_template",
              "docstring": "Заполняет шаблон инсайта",
              "line_range": [
                167,
                172
              ],
              "parameters": [
                "self",
                "template",
                "content",
                "metadata"
              ]
            },
            {
              "name": "archive_file",
              "docstring": "Архивирует файл без обработки",
              "line_range": [
                174,
                178
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "deprecate_file",
              "docstring": "Помечает файл как устаревший",
              "line_range": [
                180,
                184
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "scan_and_sort",
              "docstring": "Основная функция сканирования и сортировки",
              "line_range": [
                186,
                209
              ],
              "parameters": [
                "self",
                "unsorted_path"
              ]
            },
            {
              "name": "generate_report",
              "docstring": "Генерирует отчёт о сортировке",
              "line_range": [
                211,
                234
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "load_template": [
          "json.load",
          "open"
        ],
        "generate_artifact_id": [
          "uuid.uuid4",
          "str"
        ],
        "detect_content_type": [
          "re.search",
          "file_path.read_text"
        ],
        "extract_metadata": [
          "file_path.relative_to",
          "datetime.fromtimestamp",
          "file_path.stat",
          "str"
        ],
        "is_outdated": [
          "datetime.now",
          "file_path.stat"
        ],
        "migrate_file": [
          "self.archive_file",
          "self.populate_insight_template",
          "self.populate_task_template",
          "self.generate_artifact_id",
          "self.load_template",
          "self.populate_idea_template",
          "datetime.now",
          "self.extract_metadata",
          "json.dump",
          "self.populate_artifact_template",
          "file_path.read_text",
          "self.detect_content_type",
          "open"
        ],
        "populate_task_template": [
          "content.split",
          "content.lower",
          "len",
          "re.sub",
          "tsk_match.group",
          "re.search"
        ],
        "populate_idea_template": [
          "ins_match.group",
          "content.split",
          "len",
          "re.sub",
          "re.search"
        ],
        "populate_artifact_template": [
          "len"
        ],
        "populate_insight_template": [
          "content.split",
          "len"
        ],
        "archive_file": [
          "shutil.copy2"
        ],
        "deprecate_file": [
          "shutil.copy2"
        ],
        "scan_and_sort": [
          "unsorted_dir.rglob",
          "print",
          "self.deprecate_file",
          "self.is_outdated",
          "Path",
          "unsorted_dir.exists",
          "file_path.is_file",
          "self.migrate_file"
        ],
        "generate_report": [
          "len",
          "datetime.now"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "re",
        "shutil",
        "typing",
        "uuid"
      ],
      "hash": "a8a849ab68e053a15bdd19b454b8e6fecd64e8dbb65c58971ab259ae146e883f"
    },
    {
      "module_id": "sorting_workspace.smart_consolidator",
      "path": "sorting_workspace/smart_consolidator.py",
      "category": "core",
      "module_doc": "Smart LLM-assisted consolidation script for inconsistent data dumps\nUses content analysis and pattern matching to handle messy, inconsistent data",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            524,
            532
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            17,
            37
          ],
          "parameters": [
            "self",
            "workspace_path",
            "unsorted_path"
          ],
          "decorators": []
        },
        {
          "name": "log_analysis",
          "docstring": "Log analysis steps for debugging",
          "line_range": [
            39,
            47
          ],
          "parameters": [
            "self",
            "message",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "safe_read_file",
          "docstring": "Safely read a file, handling various encodings and formats",
          "line_range": [
            49,
            83
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_content_intelligence",
          "docstring": "Intelligently analyze content to determine type and extract data",
          "line_range": [
            85,
            198
          ],
          "parameters": [
            "self",
            "content",
            "parsed_json",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "extract_and_normalize_items",
          "docstring": "Extract and normalize items from parsed JSON",
          "line_range": [
            200,
            264
          ],
          "parameters": [
            "self",
            "parsed_json",
            "analysis",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "process_single_file",
          "docstring": "Process a single file with full analysis",
          "line_range": [
            266,
            318
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "smart_consolidation",
          "docstring": "Run smart consolidation across all files",
          "line_range": [
            320,
            380
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_consolidated_data",
          "docstring": "Save consolidated data to structured files",
          "line_range": [
            382,
            474
          ],
          "parameters": [
            "self",
            "tasks",
            "ideas",
            "artifacts"
          ],
          "decorators": []
        },
        {
          "name": "generate_smart_report",
          "docstring": "Generate detailed smart consolidation report",
          "line_range": [
            476,
            522
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "SmartConsolidator",
          "docstring": "",
          "line_range": [
            16,
            522
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                17,
                37
              ],
              "parameters": [
                "self",
                "workspace_path",
                "unsorted_path"
              ]
            },
            {
              "name": "log_analysis",
              "docstring": "Log analysis steps for debugging",
              "line_range": [
                39,
                47
              ],
              "parameters": [
                "self",
                "message",
                "file_path"
              ]
            },
            {
              "name": "safe_read_file",
              "docstring": "Safely read a file, handling various encodings and formats",
              "line_range": [
                49,
                83
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "analyze_content_intelligence",
              "docstring": "Intelligently analyze content to determine type and extract data",
              "line_range": [
                85,
                198
              ],
              "parameters": [
                "self",
                "content",
                "parsed_json",
                "file_path"
              ]
            },
            {
              "name": "extract_and_normalize_items",
              "docstring": "Extract and normalize items from parsed JSON",
              "line_range": [
                200,
                264
              ],
              "parameters": [
                "self",
                "parsed_json",
                "analysis",
                "file_path"
              ]
            },
            {
              "name": "process_single_file",
              "docstring": "Process a single file with full analysis",
              "line_range": [
                266,
                318
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "smart_consolidation",
              "docstring": "Run smart consolidation across all files",
              "line_range": [
                320,
                380
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_consolidated_data",
              "docstring": "Save consolidated data to structured files",
              "line_range": [
                382,
                474
              ],
              "parameters": [
                "self",
                "tasks",
                "ideas",
                "artifacts"
              ]
            },
            {
              "name": "generate_smart_report",
              "docstring": "Generate detailed smart consolidation report",
              "line_range": [
                476,
                522
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "dir_path.mkdir"
        ],
        "log_analysis": [
          "print",
          "datetime.now",
          "str"
        ],
        "safe_read_file": [
          "f.read",
          "json.loads",
          "content.startswith",
          "re.sub",
          "open"
        ],
        "analyze_content_intelligence": [
          "idea.get",
          "parsed_json.get",
          "max",
          "content.lower",
          "min",
          "isinstance",
          "str",
          "task.get",
          "re.search",
          "sum"
        ],
        "extract_and_normalize_items": [
          "idea.get",
          "parsed_json.get",
          "idea.items",
          "self.log_analysis",
          "items.append",
          "task.items",
          "key.startswith",
          "task.get",
          "file_path.relative_to",
          "isinstance",
          "str",
          "datetime.now"
        ],
        "process_single_file": [
          "self.log_analysis",
          "self.safe_read_file",
          "len",
          "self.extract_and_normalize_items",
          "shutil.copy2",
          "self.analyze_content_intelligence"
        ],
        "smart_consolidation": [
          "consolidated_artifacts.append",
          "str",
          "json.dump",
          "self.log_analysis",
          "os.walk",
          "consolidated_tasks.extend",
          "uuid.uuid4",
          "open",
          "all_files.append",
          "consolidated_ideas.extend",
          "len",
          "file_path.relative_to",
          "file.startswith",
          "file_path.is_file",
          "self.save_consolidated_data",
          "self.generate_smart_report",
          "self.process_single_file",
          "datetime.now",
          "Path",
          "processing_results.append"
        ],
        "save_consolidated_data": [
          "list",
          "idea.get",
          "self.log_analysis",
          "len",
          "unique_tasks.values",
          "datetime.now",
          "task.get",
          "str",
          "json.dump",
          "unique_ideas.values",
          "open"
        ],
        "generate_smart_report": [
          "self.log_analysis",
          "f.write",
          "datetime.now",
          "open"
        ],
        "main": [
          "consolidator.smart_consolidation",
          "SmartConsolidator",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "os",
        "pathlib",
        "re",
        "shutil",
        "typing",
        "uuid"
      ],
      "hash": "5deb8a52b73fbd7001469065297cb80c7fd8332c605d3d13dc8580821c3711f8"
    },
    {
      "module_id": "sorting_workspace.comprehensive_consolidator",
      "path": "sorting_workspace/comprehensive_consolidator.py",
      "category": "core",
      "module_doc": "Comprehensive Data Consolidator for llmstruct\nProcesses unsorted JSON files and consolidates them into the main data structure.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            36
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "load_existing_data",
          "docstring": "Load existing tasks and ideas to avoid duplicates.",
          "line_range": [
            38,
            56
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "find_json_files",
          "docstring": "Find all tasks and ideas JSON files.",
          "line_range": [
            58,
            67
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "normalize_task",
          "docstring": "Normalize task format to match main tasks.json structure.",
          "line_range": [
            69,
            97
          ],
          "parameters": [
            "self",
            "task",
            "source_file"
          ],
          "decorators": []
        },
        {
          "name": "normalize_idea",
          "docstring": "Normalize idea format to match main ideas.json structure.",
          "line_range": [
            99,
            143
          ],
          "parameters": [
            "self",
            "idea",
            "source_file"
          ],
          "decorators": []
        },
        {
          "name": "_normalize_status",
          "docstring": "Normalize task status values.",
          "line_range": [
            145,
            155
          ],
          "parameters": [
            "self",
            "status"
          ],
          "decorators": []
        },
        {
          "name": "_normalize_idea_status",
          "docstring": "Normalize idea status values.",
          "line_range": [
            157,
            165
          ],
          "parameters": [
            "self",
            "status"
          ],
          "decorators": []
        },
        {
          "name": "_infer_category",
          "docstring": "Infer category from idea content.",
          "line_range": [
            167,
            185
          ],
          "parameters": [
            "self",
            "idea"
          ],
          "decorators": []
        },
        {
          "name": "process_file",
          "docstring": "Process a single JSON file and extract tasks/ideas.",
          "line_range": [
            187,
            231
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "merge_into_main_files",
          "docstring": "Merge new tasks and ideas into main files.",
          "line_range": [
            233,
            269
          ],
          "parameters": [
            "self",
            "new_tasks",
            "new_ideas"
          ],
          "decorators": []
        },
        {
          "name": "create_consolidation_report",
          "docstring": "Create a detailed consolidation report.",
          "line_range": [
            271,
            305
          ],
          "parameters": [
            "self",
            "new_tasks",
            "new_ideas"
          ],
          "decorators": []
        },
        {
          "name": "print_summary",
          "docstring": "Print consolidation summary.",
          "line_range": [
            307,
            322
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_consolidation",
          "docstring": "Run the complete consolidation process.",
          "line_range": [
            324,
            359
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMStructConsolidator",
          "docstring": "",
          "line_range": [
            15,
            359
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                36
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "load_existing_data",
              "docstring": "Load existing tasks and ideas to avoid duplicates.",
              "line_range": [
                38,
                56
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "find_json_files",
              "docstring": "Find all tasks and ideas JSON files.",
              "line_range": [
                58,
                67
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "normalize_task",
              "docstring": "Normalize task format to match main tasks.json structure.",
              "line_range": [
                69,
                97
              ],
              "parameters": [
                "self",
                "task",
                "source_file"
              ]
            },
            {
              "name": "normalize_idea",
              "docstring": "Normalize idea format to match main ideas.json structure.",
              "line_range": [
                99,
                143
              ],
              "parameters": [
                "self",
                "idea",
                "source_file"
              ]
            },
            {
              "name": "_normalize_status",
              "docstring": "Normalize task status values.",
              "line_range": [
                145,
                155
              ],
              "parameters": [
                "self",
                "status"
              ]
            },
            {
              "name": "_normalize_idea_status",
              "docstring": "Normalize idea status values.",
              "line_range": [
                157,
                165
              ],
              "parameters": [
                "self",
                "status"
              ]
            },
            {
              "name": "_infer_category",
              "docstring": "Infer category from idea content.",
              "line_range": [
                167,
                185
              ],
              "parameters": [
                "self",
                "idea"
              ]
            },
            {
              "name": "process_file",
              "docstring": "Process a single JSON file and extract tasks/ideas.",
              "line_range": [
                187,
                231
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "merge_into_main_files",
              "docstring": "Merge new tasks and ideas into main files.",
              "line_range": [
                233,
                269
              ],
              "parameters": [
                "self",
                "new_tasks",
                "new_ideas"
              ]
            },
            {
              "name": "create_consolidation_report",
              "docstring": "Create a detailed consolidation report.",
              "line_range": [
                271,
                305
              ],
              "parameters": [
                "self",
                "new_tasks",
                "new_ideas"
              ]
            },
            {
              "name": "print_summary",
              "docstring": "Print consolidation summary.",
              "line_range": [
                307,
                322
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_consolidation",
              "docstring": "Run the complete consolidation process.",
              "line_range": [
                324,
                359
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "set"
        ],
        "load_existing_data": [
          "ideas_data.get",
          "print",
          "tasks_data.get",
          "len",
          "json.load",
          "open"
        ],
        "find_json_files": [
          "files.extend",
          "print",
          "len"
        ],
        "normalize_task": [
          "datetime.now",
          "self._normalize_status",
          "task.get"
        ],
        "normalize_idea": [
          "self._infer_category",
          "self._normalize_idea_status",
          "datetime.now",
          "idea.get"
        ],
        "_normalize_status": [
          "status.lower",
          "status_map.get"
        ],
        "_normalize_idea_status": [
          "status.lower",
          "status_map.get"
        ],
        "_infer_category": [
          "any",
          "idea.get"
        ],
        "process_file": [
          "self.normalize_idea",
          "print",
          "str",
          "ideas.append",
          "json.load",
          "tasks.append",
          "self.normalize_task",
          "open"
        ],
        "merge_into_main_files": [
          "print",
          "len",
          "json.dump",
          "datetime.now",
          "json.load",
          "open"
        ],
        "create_consolidation_report": [
          "print",
          "max",
          "len",
          "uuid.uuid4",
          "datetime.now",
          "str",
          "json.dump",
          "open"
        ],
        "print_summary": [
          "len",
          "print"
        ],
        "run_consolidation": [
          "all_ideas.extend",
          "self.process_file",
          "print",
          "self.load_existing_data",
          "self.create_consolidation_report",
          "self.find_json_files",
          "all_tasks.extend",
          "len",
          "self.print_summary",
          "self.merge_into_main_files"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Set",
        "datetime",
        "glob",
        "json",
        "os",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": "bba5a2019ea2eb36d5ae52b37e58c798d638b90297025f99838bf7ec7b30dda5"
    },
    {
      "module_id": "sorting_workspace.debug_sort",
      "path": "sorting_workspace/debug_sort.py",
      "category": "core",
      "module_doc": "Debug version of sorting script to identify issues",
      "functions": [
        {
          "name": "debug_file",
          "docstring": "Debug a single file",
          "line_range": [
            11,
            54
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            56,
            62
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "debug_file": [
          "print",
          "detected_types.append",
          "content.lower",
          "len",
          "patterns.items",
          "file_path.read_text",
          "re.search",
          "file_path.is_file",
          "file_path.exists"
        ],
        "main": [
          "print",
          "debug_file",
          "len",
          "Path",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "re",
        "sys"
      ],
      "hash": "079f0148b25a63cc9a866e979dcba20a105351f3f99c047bca4798ff6d316b78"
    },
    {
      "module_id": "sorting_workspace.manual_consolidator",
      "path": "sorting_workspace/manual_consolidator.py",
      "category": "core",
      "module_doc": "Manual consolidation script for llmstruct data sorting\nBypasses the automatic detection and directly processes known file types",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            296,
            301
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            15,
            32
          ],
          "parameters": [
            "self",
            "workspace_path",
            "unsorted_path"
          ],
          "decorators": []
        },
        {
          "name": "consolidate_tasks",
          "docstring": "Consolidate all task files",
          "line_range": [
            34,
            90
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "consolidate_ideas",
          "docstring": "Consolidate all idea files",
          "line_range": [
            92,
            148
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_artifacts",
          "docstring": "Process configuration and artifact files",
          "line_range": [
            150,
            215
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "archive_remaining_files",
          "docstring": "Archive remaining files that don't fit standard categories",
          "line_range": [
            217,
            241
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_consolidation_report",
          "docstring": "Generate consolidation report",
          "line_range": [
            243,
            277
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_consolidation",
          "docstring": "Run the complete consolidation process",
          "line_range": [
            279,
            294
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ManualConsolidator",
          "docstring": "",
          "line_range": [
            14,
            294
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                15,
                32
              ],
              "parameters": [
                "self",
                "workspace_path",
                "unsorted_path"
              ]
            },
            {
              "name": "consolidate_tasks",
              "docstring": "Consolidate all task files",
              "line_range": [
                34,
                90
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "consolidate_ideas",
              "docstring": "Consolidate all idea files",
              "line_range": [
                92,
                148
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_artifacts",
              "docstring": "Process configuration and artifact files",
              "line_range": [
                150,
                215
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "archive_remaining_files",
              "docstring": "Archive remaining files that don't fit standard categories",
              "line_range": [
                217,
                241
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_consolidation_report",
              "docstring": "Generate consolidation report",
              "line_range": [
                243,
                277
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_consolidation",
              "docstring": "Run the complete consolidation process",
              "line_range": [
                279,
                294
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "dir_path.mkdir"
        ],
        "consolidate_tasks": [
          "task_file.relative_to",
          "list",
          "print",
          "all_tasks.append",
          "len",
          "data.get",
          "isinstance",
          "str",
          "datetime.now",
          "json.load",
          "uuid.uuid4",
          "json.dump",
          "shutil.copy2",
          "open"
        ],
        "consolidate_ideas": [
          "list",
          "print",
          "len",
          "data.get",
          "isinstance",
          "str",
          "datetime.now",
          "json.load",
          "all_ideas.append",
          "uuid.uuid4",
          "idea_file.relative_to",
          "json.dump",
          "shutil.copy2",
          "open"
        ],
        "process_artifacts": [
          "all_artifacts.append",
          "file_path.relative_to",
          "f.read",
          "list",
          "print",
          "len",
          "str",
          "uuid.uuid4",
          "file_path.stat",
          "datetime.now",
          "json.dump",
          "shutil.copy2",
          "open"
        ],
        "archive_remaining_files": [
          "list",
          "print",
          "f.is_file",
          "file_path.relative_to",
          "shutil.copy2"
        ],
        "generate_consolidation_report": [
          "len",
          "f.write",
          "datetime.now",
          "open"
        ],
        "run_consolidation": [
          "self.consolidate_ideas",
          "print",
          "self.generate_consolidation_report",
          "self.archive_remaining_files",
          "self.process_artifacts",
          "self.consolidate_tasks"
        ],
        "main": [
          "consolidator.run_consolidation",
          "ManualConsolidator"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "datetime",
        "json",
        "pathlib",
        "shutil",
        "typing",
        "uuid"
      ],
      "hash": "c8c2e407a20fb6d2d66ad2f81f734417a5203f4e4280aedb3a72b3506712ac7b"
    },
    {
      "module_id": "tests.test_self_run",
      "path": "tests/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": [
            14,
            21
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": [
            24,
            34
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": [
            37,
            49
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": [
            52,
            69
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": [
            72,
            76
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "str",
          "select_json",
          "json.dump",
          "open"
        ],
        "test_cache_json": [
          "JSONCache",
          "cache.get_full_json",
          "cache.close",
          "cache.cache_json",
          "json.dump",
          "str",
          "cache.get_metadata",
          "open"
        ],
        "test_attach_to_llm_request_init_json": [
          "JSONCache",
          "attach_to_llm_request",
          "cache.close",
          "json.dump",
          "str",
          "open"
        ],
        "test_attach_to_llm_request_missing_file": [
          "attach_to_llm_request",
          "str"
        ]
      },
      "dependencies": [
        "JSONCache",
        "attach_to_llm_request",
        "filter_json",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "select_json"
      ],
      "hash": "8395c3be6bcbf0832721699e4612a552994c9e48b3190c26c20184a7205dd76e"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "6c8a89ead1428796572a096daee1e9d2f972387a1556136e12c69e87350564d8"
    },
    {
      "module_id": "scripts.collect_json",
      "path": "scripts/collect_json.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json_files",
          "docstring": "",
          "line_range": [
            5,
            19
          ],
          "parameters": [
            "base_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json_files": [
          "path.open",
          "sorted",
          "json.load",
          "path.relative_to",
          "base_dir.rglob",
          "current.setdefault"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib"
      ],
      "hash": "c8dff991d16ccd9c1a9ee3f83f68adf766195005a3b49ea64a9a99e34902eaa6"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": [
            13,
            29
          ],
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": [
            32,
            38
          ],
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": [
            41,
            88
          ],
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            91,
            92
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "filtered.append",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "apply_filters",
          "files.append",
          "root_dir.rglob",
          "path.relative_to",
          "str",
          "path.is_file"
        ],
        "generate_struct": [
          "collect_files",
          "output_path.open",
          "len",
          "json.load",
          "logger.info",
          "uuid.uuid4",
          "str",
          "Path",
          "output_path.exists",
          "json.dump",
          "existing.get"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": "251462380e2e135880f652ce7d9e6a1483d18a1202c336f76ac3f43536505049"
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "module_doc": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct.\nPart of the comprehensive session management system.",
      "functions": [
        {
          "name": "get_current_branch",
          "docstring": "Get current git branch.",
          "line_range": [
            24,
            31
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "save_json_file",
          "docstring": "Save JSON file with error handling.",
          "line_range": [
            42,
            51
          ],
          "parameters": [
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_current_timestamp",
          "docstring": "Get current timestamp in ISO format.",
          "line_range": [
            53,
            55
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log_event",
          "docstring": "Log an event to worklog.json.",
          "line_range": [
            57,
            88
          ],
          "parameters": [
            "event_message",
            "author"
          ],
          "decorators": []
        },
        {
          "name": "switch_session",
          "docstring": "Switch to a different session or create new one.",
          "line_range": [
            90,
            141
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "list_sessions",
          "docstring": "List all available sessions.",
          "line_range": [
            143,
            166
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_session",
          "docstring": "Show current session details.",
          "line_range": [
            168,
            183
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_worklog",
          "docstring": "Show recent worklog entries.",
          "line_range": [
            185,
            203
          ],
          "parameters": [
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main CLI interface.",
          "line_range": [
            205,
            244
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            16,
            22
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "get_current_branch": [
          "subprocess.run"
        ],
        "load_json_file": [
          "json.load",
          "print",
          "open"
        ],
        "save_json_file": [
          "print",
          "os.makedirs",
          "json.dump",
          "open"
        ],
        "get_current_timestamp": [
          "datetime.now"
        ],
        "log_event": [
          "current_session.get",
          "print",
          "get_current_timestamp",
          "load_json_file",
          "save_json_file",
          "get_current_branch"
        ],
        "switch_session": [
          "print",
          "get_current_timestamp",
          "log_event",
          "load_json_file",
          "save_json_file",
          "get_current_branch"
        ],
        "list_sessions": [
          "load_json_file",
          "current_session.get",
          "print"
        ],
        "show_current_session": [
          "load_json_file",
          "current_session.get",
          "print"
        ],
        "show_worklog": [
          "reversed",
          "load_json_file",
          "print",
          "len"
        ],
        "main": [
          "int",
          "show_current_session",
          "print",
          "log_event",
          "show_worklog",
          "len",
          "list_sessions",
          "switch_session"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": "23aca9a658e60715b7fa3e4a009c3de7baebdd1eca3acae17d87938ae622cc41"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.",
      "functions": [
        {
          "name": "detect_project_changes",
          "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.",
          "line_range": [
            44,
            81
          ],
          "parameters": [
            "root_dir",
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_struct_json",
          "docstring": "Create a backup of existing struct.json.",
          "line_range": [
            84,
            97
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_struct_json",
          "docstring": "Validate generated struct.json for basic structure.",
          "line_range": [
            100,
            128
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "update_struct_json",
          "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful",
          "line_range": [
            131,
            225
          ],
          "parameters": [
            "root_dir",
            "struct_path",
            "force",
            "config_override"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for auto-update script.",
          "line_range": [
            228,
            286
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "",
          "line_range": [
            24,
            25
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            26,
            27
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_config": [],
        "load_gitignore": [],
        "generate_json": [
          "ImportError"
        ],
        "detect_project_changes": [
          "logger.warning",
          "subprocess.run",
          "logger.info",
          "file_path.stat",
          "Path"
        ],
        "backup_struct_json": [
          "subprocess.run",
          "logger.error",
          "logger.info",
          "datetime.now",
          "Path"
        ],
        "validate_struct_json": [
          "logger.info",
          "json.load",
          "logger.error",
          "open"
        ],
        "update_struct_json": [
          "config.update",
          "generate_json",
          "os.getcwd",
          "config.get",
          "load_gitignore",
          "subprocess.run",
          "load_config",
          "detect_project_changes",
          "logger.info",
          "cli_config.get",
          "logger.error",
          "json.dump",
          "validate_struct_json",
          "backup_struct_json",
          "open"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "print",
          "os.getcwd",
          "parser.parse_args",
          "detect_project_changes",
          "logging.getLogger",
          "update_struct_json",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "generate_json",
        "json",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": "505bdb6b282e7e9befc6df4165834fa7481335c96bbb88b04501996e15e173c2"
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            183,
            266
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            23,
            26
          ],
          "parameters": [
            "self",
            "config_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "check_github_cli",
          "docstring": "Check if GitHub CLI is installed and authenticated",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "list_projects",
          "docstring": "List available GitHub Projects (via gh-projects extension)",
          "line_range": [
            38,
            55
          ],
          "parameters": [
            "self",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "create_project_item",
          "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: заменить на GraphQL API или собственную реализацию в будущем",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "project_number",
            "title",
            "body",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_tasks_to_project",
          "docstring": "Export tasks to GitHub Project",
          "line_range": [
            84,
            123
          ],
          "parameters": [
            "self",
            "tasks",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_ideas_to_project",
          "docstring": "Export ideas to GitHub Project",
          "line_range": [
            125,
            164
          ],
          "parameters": [
            "self",
            "ideas",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "filter_data",
          "docstring": "Filter data by status and priority",
          "line_range": [
            166,
            180
          ],
          "parameters": [
            "self",
            "data",
            "status_filter",
            "priority_filter"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExportScript",
          "docstring": "Extended exporter with command-line interface and GitHub CLI integration",
          "line_range": [
            20,
            180
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                23,
                26
              ],
              "parameters": [
                "self",
                "config_path",
                "dry_run"
              ]
            },
            {
              "name": "check_github_cli",
              "docstring": "Check if GitHub CLI is installed and authenticated",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "list_projects",
              "docstring": "List available GitHub Projects (via gh-projects extension)",
              "line_range": [
                38,
                55
              ],
              "parameters": [
                "self",
                "owner",
                "repo"
              ]
            },
            {
              "name": "create_project_item",
              "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: заменить на GraphQL API или собственную реализацию в будущем",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "project_number",
                "title",
                "body",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_tasks_to_project",
              "docstring": "Export tasks to GitHub Project",
              "line_range": [
                84,
                123
              ],
              "parameters": [
                "self",
                "tasks",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_ideas_to_project",
              "docstring": "Export ideas to GitHub Project",
              "line_range": [
                125,
                164
              ],
              "parameters": [
                "self",
                "ideas",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "filter_data",
              "docstring": "Filter data by status and priority",
              "line_range": [
                166,
                180
              ],
              "parameters": [
                "self",
                "data",
                "status_filter",
                "priority_filter"
              ]
            }
          ],
          "bases": [
            "GitHubProjectsExporter"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "super"
        ],
        "check_github_cli": [
          "print",
          "self._run_gh_command"
        ],
        "list_projects": [
          "isinstance",
          "print",
          "self._run_gh_command",
          "json.loads"
        ],
        "create_project_item": [
          "output.strip",
          "print",
          "self._run_gh_command",
          "str"
        ],
        "export_tasks_to_project": [
          "print",
          "self.create_project_item",
          "len",
          "self.format_task_for_github",
          "task.get"
        ],
        "export_ideas_to_project": [
          "print",
          "idea.get",
          "self.create_project_item",
          "len",
          "self.format_idea_for_github"
        ],
        "filter_data": [
          "item.get"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "exporter._save_mapping",
          "print",
          "parser.parse_args",
          "GitHubProjectsExportScript",
          "exporter.export_tasks_to_project",
          "exporter.check_github_cli",
          "sys.exit",
          "exporter.export_ideas_to_project",
          "exporter.filter_data",
          "exporter.load_official_data"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "GitHubProjectsExporter",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "datetime",
        "json",
        "llmstruct.gh_view",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": "b6b4f700d8fed14e918455d59e88d15bc3259556aad468ee3c3ea4816d710f2a"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": [
            11,
            43
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            46,
            47
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "source_file.exists",
          "enumerate",
          "idea.get",
          "target_file.exists",
          "logger.warning",
          "logger.error",
          "broken_links.append",
          "logger.info",
          "json.dump",
          "Path",
          "json.load"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": "6c57e53f4e4e0afdb8e8c78f1e6d38f284721f6729a7197ff483ed29f5363607"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": [
            931,
            941
          ],
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": [
            944,
            950
          ],
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": [
            953,
            1007
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            1010,
            1011
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "RefResolver",
          "validate",
          "logger.error",
          "logger.warning"
        ],
        "backup_files": [
          "logger.info",
          "shutil.copytree",
          "datetime.now",
          "target_dir.exists"
        ],
        "deploy_embedded_files": [
          "backup_files",
          "EMBEDDED_FILES.get",
          "logger.warning",
          "target_path.exists",
          "Path.cwd",
          "logger.error",
          "logger.info",
          "f.write",
          "json.dump",
          "Path",
          "target_path.open",
          "validate_json"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": "965c984b688301f0d0c65fc65cc8c95a878218aec94afab5dca3b3c7f65cea19"
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "module_doc": "JSON Validation Script\nValidates JSON files against their respective schemas.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            13,
            23
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate a JSON file against a schema.",
          "line_range": [
            26,
            49
          ],
          "parameters": [
            "file_path",
            "schema_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "json.load",
          "print",
          "open"
        ],
        "validate_json": [
          "Draft7Validator",
          "print",
          "str",
          "Path",
          "load_json",
          "validator.validate"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "pathlib",
        "sys",
        "validate"
      ],
      "hash": "0d360b788079e8804f864e0cef5eb33006fb4dbae00eaaea95ef0d692e79640d"
    }
  ]
}