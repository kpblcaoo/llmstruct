{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-05-26T09:21:20.012611Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": {
      "goals": [
        "Create universal JSON format for codebase structure (modules, functions, classes, calls, metadata)",
        "Ensure extensibility for new languages and entity types",
        "Develop modular, plugin-based parsers for new languages",
        "Maintain an open, RFC-style documented format",
        "Integrate with LLMs by generating and attaching JSON structure to queries"
      ]
    },
    "stats": {
      "modules_count": 117,
      "functions_count": 508,
      "classes_count": 35,
      "call_edges_count": 2016
    },
    "artifact_id": "b945b645-74dd-4871-9654-878a83838b06",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "280851f0-ed9e-4789-920b-b38faf4469c5",
        "metadata": {}
      },
      {
        "path": ".github",
        "type": "directory",
        "artifact_id": "ba1f2c2a-9b38-49d7-896e-41cf67225cd8",
        "metadata": {}
      },
      {
        "path": ".github/workflows",
        "type": "directory",
        "artifact_id": "cd2af485-2e93-4f4b-820e-02c6540798e0",
        "metadata": {}
      },
      {
        "path": ".llmstruct_cache",
        "type": "directory",
        "artifact_id": "35283246-6668-4943-901e-e6c09be156b6",
        "metadata": {}
      },
      {
        "path": "bak",
        "type": "directory",
        "artifact_id": "b2c62890-b396-43a0-a5af-cb9358068132",
        "metadata": {}
      },
      {
        "path": "board_cli.py",
        "type": "file",
        "artifact_id": "6d2b49ad-8ba5-453d-9bf9-53bb3d6fee30",
        "metadata": {}
      },
      {
        "path": "collector.py",
        "type": "file",
        "artifact_id": "36dee674-2595-4e5a-9600-ca88ded6238e",
        "metadata": {}
      },
      {
        "path": "data",
        "type": "directory",
        "artifact_id": "05407c88-0ff9-469d-aead-b1e3107d5606",
        "metadata": {}
      },
      {
        "path": "data/artifacts",
        "type": "directory",
        "artifact_id": "930b2f30-e7f5-4ae2-ad66-50bcdb6cb923",
        "metadata": {}
      },
      {
        "path": "data/copilot",
        "type": "directory",
        "artifact_id": "8d8568f8-a032-492f-a911-8275a3e0c19e",
        "metadata": {}
      },
      {
        "path": "data/sessions",
        "type": "directory",
        "artifact_id": "21e00d26-5969-48f1-9b86-ea24a89ba000",
        "metadata": {}
      },
      {
        "path": "docs",
        "type": "directory",
        "artifact_id": "f76b7c9d-1d45-4947-b7d4-3baab56b3bbb",
        "metadata": {}
      },
      {
        "path": "docs/ai-session-monitor",
        "type": "directory",
        "artifact_id": "ad5441d7-8f11-459e-b226-f733f73c0cf4",
        "metadata": {}
      },
      {
        "path": "docs/cache.py",
        "type": "file",
        "artifact_id": "f2614e31-2e71-42a5-9c55-b9f8fdfd4268",
        "metadata": {}
      },
      {
        "path": "docs/cli.py",
        "type": "file",
        "artifact_id": "add3b71e-6f02-4757-9d6d-b8e43eec5f80",
        "metadata": {}
      },
      {
        "path": "docs/examples",
        "type": "directory",
        "artifact_id": "ee4f6836-b776-426a-8b49-b5ecfcae0b21",
        "metadata": {}
      },
      {
        "path": "docs/internal",
        "type": "directory",
        "artifact_id": "07167aa6-5616-41d2-97f6-49f74d04f0eb",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru",
        "type": "directory",
        "artifact_id": "c7be47ed-0665-4606-a35e-ed19258f3179",
        "metadata": {}
      },
      {
        "path": "docs/json_selector.py",
        "type": "file",
        "artifact_id": "ebf69ab8-2b98-4a1a-8b10-fbad54839941",
        "metadata": {}
      },
      {
        "path": "docs/ru",
        "type": "directory",
        "artifact_id": "b67298e9-b33f-4932-afff-3b1a8ef80d58",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples",
        "type": "directory",
        "artifact_id": "f96c33bc-944b-4105-820c-b10af3df2f83",
        "metadata": {}
      },
      {
        "path": "docs/self_run.py",
        "type": "file",
        "artifact_id": "8f76a6e9-0674-4621-aad9-b9c5246c4f7b",
        "metadata": {}
      },
      {
        "path": "docs/test_self_run.py",
        "type": "file",
        "artifact_id": "79641cf8-f294-4eb9-a536-4b50394d8217",
        "metadata": {}
      },
      {
        "path": "examples",
        "type": "directory",
        "artifact_id": "88f6e0d9-b53c-4708-8c25-b1d0f72b5465",
        "metadata": {}
      },
      {
        "path": "examples/python_project_main.py",
        "type": "file",
        "artifact_id": "e0d3012b-2957-4a0a-91b4-962fbbda83e5",
        "metadata": {}
      },
      {
        "path": "examples/python_project_utils.py",
        "type": "file",
        "artifact_id": "1a067ba3-de7d-485e-a01f-41e13e52a1be",
        "metadata": {}
      },
      {
        "path": "internal",
        "type": "directory",
        "artifact_id": "59cd96cb-580f-458b-be54-49ae7f620339",
        "metadata": {}
      },
      {
        "path": "schema",
        "type": "directory",
        "artifact_id": "4c8280ce-4075-49fd-b323-f8082b801daf",
        "metadata": {}
      },
      {
        "path": "schema/common",
        "type": "directory",
        "artifact_id": "319421ec-c7a0-4688-a511-a80a46616f00",
        "metadata": {}
      },
      {
        "path": "schema/plugins",
        "type": "directory",
        "artifact_id": "e8c54571-82d0-4510-b3c0-3e4459961af9",
        "metadata": {}
      },
      {
        "path": "scripts",
        "type": "directory",
        "artifact_id": "1f0d2920-946a-431d-8624-3ee55da6d778",
        "metadata": {}
      },
      {
        "path": "scripts/auto_update_struct.py",
        "type": "file",
        "artifact_id": "1b937090-8613-47a9-a872-d65bf5346751",
        "metadata": {}
      },
      {
        "path": "scripts/collector.py",
        "type": "file",
        "artifact_id": "f158820d-1af0-4481-bc1a-73679ffe672e",
        "metadata": {}
      },
      {
        "path": "scripts/deploy_embedded_files.py",
        "type": "file",
        "artifact_id": "323b5597-6be7-4e42-843f-1fd3ff303953",
        "metadata": {}
      },
      {
        "path": "scripts/export_to_github_projects.py",
        "type": "file",
        "artifact_id": "9b18f2a0-83d4-4b0e-a7ba-2641c4483b4a",
        "metadata": {}
      },
      {
        "path": "scripts/validate_refs.py",
        "type": "file",
        "artifact_id": "3def44e7-23d6-4ff3-80d8-b0bcc32aa31e",
        "metadata": {}
      },
      {
        "path": "sorting_workspace",
        "type": "directory",
        "artifact_id": "f9fcb401-93c9-47b8-9693-30a60980f7e1",
        "metadata": {}
      },
      {
        "path": "src",
        "type": "directory",
        "artifact_id": "89f26a39-dbce-4134-b3a9-00229ffa8c4c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct",
        "type": "directory",
        "artifact_id": "1e107266-8d3f-46be-81c7-eda0383f62d9",
        "metadata": {}
      },
      {
        "path": "src/llmstruct.egg-info",
        "type": "directory",
        "artifact_id": "6074f364-2065-499a-afa2-de44ec73564e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__init__.py",
        "type": "file",
        "artifact_id": "1799c329-3121-46c1-af0c-22cee9000e5f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__main__.py",
        "type": "file",
        "artifact_id": "6d61072e-ad49-4e50-921b-559f5e5da8aa",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cache.py",
        "type": "file",
        "artifact_id": "4182df74-45e6-4b26-a4f8-f451852bb26a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli.py",
        "type": "file",
        "artifact_id": "a0e13e50-a6e0-49f8-a67e-393677a5fd2e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_commands.py",
        "type": "file",
        "artifact_id": "5659ab7a-d845-4bfc-bc2e-2a64ba04aff2",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_config.py",
        "type": "file",
        "artifact_id": "9b2c1f5b-1c33-4e8d-9f6e-9d901e8dba78",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_core.py",
        "type": "file",
        "artifact_id": "af351688-8b5b-41c5-be6f-b29ed7e36262",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_utils.py",
        "type": "file",
        "artifact_id": "7fb6e95a-44eb-42c3-958c-18d2f7eca5b3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/copilot.py",
        "type": "file",
        "artifact_id": "90c862ee-a3c4-45b8-9811-9e2a7be08b5e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators",
        "type": "directory",
        "artifact_id": "75542ab0-474c-47b1-b3af-b1e89aac43ff",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/__init__.py",
        "type": "file",
        "artifact_id": "8469dd9b-51d0-4b24-a300-45e626b7183d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/json_generator.py",
        "type": "file",
        "artifact_id": "05cd0f5d-2b02-429f-a5f0-aeb3da8bf607",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/gh_view.py",
        "type": "file",
        "artifact_id": "e20debb1-7e56-4b7b-ba22-ffbe1a96b4f7",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/grok.py",
        "type": "file",
        "artifact_id": "a61d1279-85c7-40b9-8796-1d013cf3dacd",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/json_selector.py",
        "type": "file",
        "artifact_id": "3f06c5c5-bc55-405f-a550-6f37f2d33c9d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/llm_client.py",
        "type": "file",
        "artifact_id": "174bbe43-8d1c-4cc6-a54c-28257d15296f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers",
        "type": "directory",
        "artifact_id": "1dc73c98-5e9b-4c36-9413-75f73cf06519",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/__init__.py",
        "type": "file",
        "artifact_id": "1e342053-b62f-4bba-a857-027fdb5dc878",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/javascript_parser.py",
        "type": "file",
        "artifact_id": "c501354e-a906-468b-b4e5-c22b61c4ed86",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/python_parser.py",
        "type": "file",
        "artifact_id": "a5320529-8256-49a7-ac8e-1572b3044612",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/self_run.py",
        "type": "file",
        "artifact_id": "387abbcf-9ae6-4fcc-8731-f89d1f1cb082",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates",
        "type": "directory",
        "artifact_id": "4d478c84-53e9-4c4e-8391-8c0cabf93aa9",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates/__init__.py",
        "type": "file",
        "artifact_id": "fbfc95e2-4a65-4705-9d9f-2a9ac32c3c2c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators",
        "type": "directory",
        "artifact_id": "bb3292f8-32ef-449c-aa56-2978c6ee8cfc",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/__init__.py",
        "type": "file",
        "artifact_id": "1d423d05-b6e7-47fe-835a-403cac63528e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/json_validator.py",
        "type": "file",
        "artifact_id": "68a6b35e-aac0-476b-b0ee-b672767ecd57",
        "metadata": {}
      },
      {
        "path": "temp_workfiles",
        "type": "directory",
        "artifact_id": "0fb30968-ff8a-4aeb-8191-3830e01da192",
        "metadata": {}
      },
      {
        "path": "test_audit.py",
        "type": "file",
        "artifact_id": "e2daa6ae-588b-4288-b15c-84ab95bbec86",
        "metadata": {}
      },
      {
        "path": "test_efficiency.py",
        "type": "file",
        "artifact_id": "00cda474-309a-4042-b849-4b3efc5802ff",
        "metadata": {}
      },
      {
        "path": "tests",
        "type": "directory",
        "artifact_id": "e4dfbdec-0620-4107-ba75-166116e5cdf0",
        "metadata": {}
      },
      {
        "path": "tests/__init__.py",
        "type": "file",
        "artifact_id": "89e4b430-b712-44ea-ada8-a5e0072083a2",
        "metadata": {}
      },
      {
        "path": "tests/test_self_run.py",
        "type": "file",
        "artifact_id": "ffa56f7a-937b-4790-92cf-5891905de642",
        "metadata": {}
      },
      {
        "path": "tmp",
        "type": "directory",
        "artifact_id": "3d17cb73-4d85-40ef-a570-2dc40c1ab5dc",
        "metadata": {}
      },
      {
        "path": "validate_schemas.py",
        "type": "file",
        "artifact_id": "10d1fd82-346c-4532-95c2-dad87338aa84",
        "metadata": {}
      },
      {
        "path": "verify_llm_response.py",
        "type": "file",
        "artifact_id": "d097484a-4edd-42c7-a806-32a5bf626cff",
        "metadata": {}
      },
      {
        "path": "workflow_archive",
        "type": "directory",
        "artifact_id": "7f453a63-268f-479c-ae84-438f8d4e4973",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "test_efficiency",
      "path": "test_efficiency.py",
      "category": "test",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "0d0502a9-212c-4fb6-9ea4-18700ab9dd9c"
    },
    {
      "module_id": "test_audit",
      "path": "test_audit.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test script for audit functionality.",
      "artifact_id": "3f708721-ac90-4ace-b7af-ff0a072a35b2"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "9002de1b-4185-48f0-8b1c-7efd966020fb"
    },
    {
      "module_id": "board_cli",
      "path": "board_cli.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "CLI Kanban Board for llmstruct tasks and ideas",
      "artifact_id": "8cbba1b8-2013-43f9-83dd-2ce1d91b69f5"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "JSON Schema Validation Script for llmstruct",
      "artifact_id": "5a7f5722-520d-49cb-8e82-79e1e8a40242"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "6096fb32-154f-4f2f-aeb1-5d6e5ae03364"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project.",
      "artifact_id": "7f203e38-e201-4606-b488-bb271b79ee72"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project.",
      "artifact_id": "fb66ff06-5649-40dc-9a57-0d6a9962208a"
    },
    {
      "module_id": "docs.test_self_run",
      "path": "docs/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "eaad9add-4570-43d4-ab69-a6324a697d0e"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "49164f17-ddf1-425f-97bb-8ca76d977131"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "cfae80a7-26bc-4f00-9ef1-071f8c51e962"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "3937f1ec-93d1-4535-ae58-b219c1fc5e80"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "8727da12-58c8-44ea-a9dc-2c9daefd2d42"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "CLI configuration management.",
      "artifact_id": "45fe322f-5c51-44a3-a9af-5cb98af0030a"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "1fe7ebcd-99fe-4087-a123-9db38bedeecc"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "functions": 28,
      "classes": 1,
      "summary": "CLI command processing and handlers.",
      "artifact_id": "f004f993-3fc5-49df-9f91-534acce6943b"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "739d33fd-1813-4482-9eaa-efd8bde060ba"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "d262cf78-1df0-4114-94c9-78a0f041c070"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "CLI utility functions.",
      "artifact_id": "d76cb835-3479-403c-9430-0ed7068eec7a"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "functions": 21,
      "classes": 5,
      "summary": "LLMStruct Copilot Integration Module",
      "artifact_id": "aa0fa742-3697-4f8c-9c6a-c517d5e3e023"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "GitHub visualization/graph feature (gh-view-v1)",
      "artifact_id": "68fa6678-272c-495b-9524-93fea923a6f8"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "1d29863e-fdc1-4598-a3dd-8a614c64289e"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "46e6c9c5-9cbb-41b5-8fd8-53d1e48a3b2f"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "7011c8c0-6654-4f58-b3a4-c5239a2bfec0"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "bd7c4835-3932-487e-a0cf-bd5611e07cca"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "functions": 17,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "artifact_id": "29f07086-b216-45f8-8a84-b4721e1920a1"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Core CLI functionality and main loop.",
      "artifact_id": "9282f0f6-8025-4299-a974-c4ed2553157e"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "906fd43b-8579-43db-aff8-3844a2e7acca"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "781d5adf-5733-4293-b553-c4c0bec92d30"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "",
      "artifact_id": "8ec50837-3df5-48f5-a8a3-888f647a047c"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "02ad89c5-ef6f-4f2c-88c2-cf05442de54e"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "8ddd74db-d478-471a-afd3-b8dbfed0e6e8"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "ab796875-8e27-4534-a97b-2530976e89b5"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "3b3fcc68-9cde-48ce-82a6-8cec2e79de28"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "bf047ece-281c-4da1-b57f-3e6d9f6b8c74"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_self_run",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "fb243a93-a50d-4443-89f6-964cbac9c7b0"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector (1).py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "e41181dc-479e-41b1-837a-bc0f33686eb1"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_self_run",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "cfbd82e0-65f2-43c4-95db-082cabbd1ad7"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_cli.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "0b5c6d66-822f-4d44-bb91-c0611b6e19ce"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files (1).py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "3aed9466-e759-407a-bb75-126b80336b63"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_json_selector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "463f43d4-d8a7-4e4c-806f-8b4d1a76fcb9"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "45006555-da9c-4e4b-96dc-c15de8b5f04c"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "db8bac6f-bc06-4cd2-8c08-597f848e5561"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "8023bc0c-e7de-4277-9d7d-b67e9241eed7"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli_parser",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli_parser.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "fc52c209-438c-4ef5-a6c7-c1b28a5b28f9"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "ad13d798-530e-43b4-8900-36ae94b15907"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cache.py",
      "category": "core",
      "functions": 7,
      "classes": 1,
      "summary": "",
      "artifact_id": "a31141a9-500c-490f-8c45-402575eac6ac"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "1640715f-bdab-4e87-875e-e7725f9936bb"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_deploy_embedded_files",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_deploy_embedded_files.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "ea48d8be-1d48-4bd9-a8d9-ebf271da93cf"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "cf19c918-4deb-443d-a771-143fa74a5332"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "0da1bba2-098b-4b74-b2a4-65ca9e8d517b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "11865559-b879-4b58-884b-da7bbb5e1345"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.extract_artifacts",
      "path": "temp_workfiles/unsorted_mess/22.05.25/extract_artifacts.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "39b04e5a-8941-480b-ad59-21bbd1e49ea0"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.dumper",
      "path": "temp_workfiles/unsorted_mess/dump/dumper.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "4356220f-d15b-4024-89e1-3c5155018465"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "d739fd12-2b15-45ea-a791-ecdd4f88988f"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_utils",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project.",
      "artifact_id": "ce37c74b-4cc2-47d2-9908-216173cd86ff"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ideas_tree",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ideas_tree.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "c61679f5-4ba7-432c-bcd4-a3ea78aa188c"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "LLMStruct: A tool for generating JSON-based code structures for LLM integration.",
      "artifact_id": "f7d7ac28-a516-4b5a-a925-24046a8c9d1e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency1",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency1.py",
      "category": "test",
      "functions": 7,
      "classes": 0,
      "summary": "",
      "artifact_id": "e4bb3665-8a8b-4508-9c14-bceae3ebdafc"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency.py",
      "category": "test",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "368cd758-26a5-4c73-862e-be08b75cc76d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.grok",
      "path": "temp_workfiles/unsorted_mess/dump/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "7499b50a-a1c1-4d04-a70e-f86a1ea4f452"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___main__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___main__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "88b8391d-9f70-41fa-92c1-67eff050402e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs (1).py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "3885833b-647c-40d4-91d8-9f2eac732fc4"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency (1)",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency (1).py",
      "category": "test",
      "functions": 9,
      "classes": 0,
      "summary": "",
      "artifact_id": "eed8b1ea-c26c-472c-a66e-ea3b07f163df"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "a57ee9ab-6811-4f63-9375-bb42e4fc67f0"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_engines",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_engines.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "4eb85dd7-72bd-4123-90fb-b906d78d81ed"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_config",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_config.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "4c40f929-5d72-4279-a7b6-ee24b947f940"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "",
      "artifact_id": "8c396a77-04a5-4631-a1e3-ed123380a5ef"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "eb55d813-d835-4db5-a853-6d249355b1be"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "Generate JSON for workspace based on user instructions template.",
      "artifact_id": "b8e15286-0734-4bd3-a429-1af2712f0039"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs (1).py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "a33b89ec-cea3-4ba4-b6ba-49dc758e0b9a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "38f1b01e-c992-4211-8591-b2a0ea15f28a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collector",
      "path": "temp_workfiles/unsorted_mess/dump/collector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "80cfdc16-0447-4038-83c1-95f39430cd51"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs (1).py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "eacb725b-7b0c-4d7c-b9dc-bbfcc6f8358d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "55c3b74b-4423-4b88-8dbf-da67f9bfb694"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.refactored_structure",
      "path": "temp_workfiles/unsorted_mess/dump/refactored_structure.py",
      "category": "core",
      "functions": 5,
      "classes": 3,
      "summary": "",
      "artifact_id": "22e1096a-1221-4ef2-b534-e1f545187d9c"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser (1).py",
      "category": "core",
      "functions": 4,
      "classes": 1,
      "summary": "",
      "artifact_id": "8c4ccc70-d5a4-453a-87fb-735c1b6b8e2a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_templates___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_templates___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "aff39fc7-d035-452c-a17a-e14acd717b9f"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end (1)",
      "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end (1).py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "b84c7e29-105b-4571-99fd-6b9507d94762"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "94ea5d03-2577-4cce-ac4b-eb1186e0eb25"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_main",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project.",
      "artifact_id": "6916c739-512f-4888-b02b-4cfce955d2f5"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.filter_llmstruct_json",
      "path": "temp_workfiles/unsorted_mess/dump/filter_llmstruct_json.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "d1ab4d31-373a-4475-83b0-00e37b6ee250"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_internal_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_internal_docs.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "605c5058-457e-41dd-a8c3-8787403134e2"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "e073c6ad-7d75-4da4-99e0-0487828beb8d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client (3)",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client (3).py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "d5a97ba2-8152-4820-a773-a68f0e100afc"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.tests___init__",
      "path": "temp_workfiles/unsorted_mess/dump/tests___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "artifact_id": "c42f262b-baec-4aae-8dc4-5ae22b16d4dc"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.check_docs",
      "path": "temp_workfiles/unsorted_mess/dump/check_docs.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "ed49ad50-911e-4d2a-9ccf-eca6bf779719"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.javascript_parser",
      "path": "temp_workfiles/unsorted_mess/dump/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "74688155-88fd-495c-9e79-958993202f77"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.self_run",
      "path": "temp_workfiles/unsorted_mess/dump/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "31f0e1c4-f720-45b7-abeb-6fe1d4c7aad4"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator (1).py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "e5494669-cc6c-466f-a8e8-ae71664db3d9"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end",
      "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "8343db60-3d25-4e49-8251-51b9bcc83113"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/python_parser.py",
      "category": "core",
      "functions": 6,
      "classes": 2,
      "summary": "",
      "artifact_id": "585cedda-f627-490e-947f-9f4ab0fe2f2e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "a5493337-dd93-4694-ba07-3fc92b181063"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli (1).py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "316cb3ac-758e-40b0-ac39-ebf66584ffdf"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency_proxybypass",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency_proxybypass.py",
      "category": "test",
      "functions": 8,
      "classes": 0,
      "summary": "",
      "artifact_id": "237d460d-eb5e-4782-9663-f30b55f6fa9c"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.scripts_setup_github",
      "path": "temp_workfiles/unsorted_mess/dump/scripts_setup_github.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "8c8c6ab3-4b29-46cc-bd2f-9ae5bf362250"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__ (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__ (1).py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "24817eb6-1ee0-4b49-be50-0c8be55a5c53"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.cli",
      "path": "temp_workfiles/unsorted_mess/dump/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "25f86aae-a870-4ef8-9341-556698f26e36"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_validators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_validators___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "94c03b94-ddd4-461b-9abd-c02ce0f78758"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct (1).py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "Generate JSON for workspace based on user instructions template.",
      "artifact_id": "3b4dd411-c4ef-4e37-b59e-aa58527d4321"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_validator",
      "path": "temp_workfiles/unsorted_mess/dump/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "43f855f8-8d05-444a-a6c4-541aecebf58d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.validate_json",
      "path": "temp_workfiles/unsorted_mess/dump/validate_json.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "00608d1c-40c9-4d6a-9bbc-c9fbb56d34d8"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "e41cb8a7-d9c7-42e0-b896-0d3ced8fa949"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.clean.internal_cleaner",
      "path": "temp_workfiles/unsorted_mess/dump/clean/internal_cleaner.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "cf9912c2-0b83-4aad-8f89-f1002de8a773"
    },
    {
      "module_id": "bak.20250522_102827.scripts.collector",
      "path": "bak/20250522_102827/scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "df6e54d6-536e-4314-957d-5e4bb4eac2c0"
    },
    {
      "module_id": "bak.20250522_102827.scripts.validate_refs",
      "path": "bak/20250522_102827/scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "76f4f298-f3ea-4109-87bd-221298212b07"
    },
    {
      "module_id": "bak.20250522_102827.scripts.deploy_embedded_files",
      "path": "bak/20250522_102827/scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "06b80297-d006-4f28-8602-af34e64956d5"
    },
    {
      "module_id": "bak.20250522_131121.scripts.collector",
      "path": "bak/20250522_131121/scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "d560360c-09bf-4d7c-83af-24406f75480e"
    },
    {
      "module_id": "bak.20250522_131121.scripts.validate_refs",
      "path": "bak/20250522_131121/scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "58e594ee-1184-4bc1-98af-fb224836cf2f"
    },
    {
      "module_id": "bak.20250522_131121.scripts.deploy_embedded_files",
      "path": "bak/20250522_131121/scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "2151ec2f-3fc6-46c7-9fe7-e5aa9745f82a"
    },
    {
      "module_id": "tests.test_self_run",
      "path": "tests/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "370b25bb-db7e-4561-9516-4f3e5f9c5735"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "artifact_id": "087d3cab-8956-4141-9327-ab576c2a5842"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "82fcacc4-de06-444e-a76c-1663dc95f98f"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Automatic struct.json update script",
      "artifact_id": "6a515e9f-9afc-443a-89b2-e4d0a527fd5b"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Export script for GitHub Projects integration",
      "artifact_id": "d8c86c27-d66f-4e95-8283-a68373b92ca3"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "3c753e77-d164-43fb-9f0f-329177608711"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "e920fadd-6e8b-44ff-8978-9d24f664d000"
    }
  ],
  "modules": [
    {
      "module_id": "test_efficiency",
      "path": "test_efficiency.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_local_address",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "check_ollama",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url"
          ],
          "decorators": []
        },
        {
          "name": "optimize_prompt",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "struct_data",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "check_llmstruct_cli",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_grok",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_key",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.cpu_percent",
          "psutil.virtual_memory"
        ],
        "is_local_address": [
          "ipaddress.ip_address",
          "urlparse"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "check_ollama": [
          "api_url.replace",
          "requests.get",
          "response.json",
          "str"
        ],
        "optimize_prompt": [
          "struct_data.split",
          "len",
          "print"
        ],
        "run_llm_request": [
          "requests.Session",
          "print",
          "type",
          "response.json",
          "len",
          "get_system_metrics",
          "time.perf_counter",
          "is_local_address",
          "session.post",
          "response.raise_for_status"
        ],
        "check_llmstruct_cli": [
          "shutil.which"
        ],
        "test_with_llmstruct": [
          "check_llmstruct_cli",
          "run_llm_request",
          "open",
          "str",
          "optimize_prompt",
          "FileNotFoundError",
          "Path",
          "json.dump",
          "f.read",
          "target_path.exists",
          "subprocess.run"
        ],
        "test_without_llmstruct": [
          "run_llm_request",
          "open",
          "optimize_prompt",
          "Path",
          "f.read"
        ],
        "test_with_grok": [
          "open",
          "test_grok",
          "optimize_prompt",
          "FileNotFoundError",
          "Path",
          "json.dump",
          "target_path.exists",
          "f.read"
        ],
        "evaluate_accuracy": [
          "response_text.lower",
          "sum",
          "len"
        ],
        "main": [
          "check_llmstruct_cli",
          "evaluate_accuracy",
          "test_without_llmstruct",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "open",
          "test_with_grok",
          "print",
          "check_ollama",
          "test_with_llmstruct",
          "setup_proxy",
          "json.dump",
          "parser.add_argument",
          "range",
          "str"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "ipaddress",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "shutil",
        "src.llmstruct.grok",
        "subprocess",
        "test_grok",
        "time",
        "urllib.parse",
        "urlparse"
      ],
      "hash": null,
      "artifact_id": "0d0502a9-212c-4fb6-9ea4-18700ab9dd9c"
    },
    {
      "module_id": "test_audit",
      "path": "test_audit.py",
      "category": "test",
      "module_doc": "Test script for audit functionality.",
      "functions": [
        {
          "name": "test_audit_status",
          "docstring": "Test audit status directly.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_audit_status": [
          "open",
          "tasks_data.keys",
          "list",
          "print",
          "i.get",
          "Path",
          "len",
          "ideas_file.exists",
          "tasks_file.exists",
          "ideas_data.keys",
          "t.get",
          "json.load"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "3f708721-ac90-4ace-b7af-ff0a072a35b2"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_text_file",
          "docstring": "Check if file is likely a text file based on extension.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_path.exists",
          "Path",
          "gitignore_parser.parse_gitignore"
        ],
        "is_text_file": [],
        "collect_project": [
          "open",
          "logger.info",
          "f.read",
          "logger.error",
          "file_path.is_file",
          "gitignore",
          "logger.warning",
          "root_dir.rglob",
          "Path",
          "is_text_file",
          "json.dump",
          "any",
          "doc_files.items",
          "len",
          "load_gitignore",
          "str"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "9002de1b-4185-48f0-8b1c-7efd966020fb"
    },
    {
      "module_id": "board_cli",
      "path": "board_cli.py",
      "category": "core",
      "module_doc": "CLI Kanban Board for llmstruct tasks and ideas\n- Reads data/tasks.json and data/ideas.json\n- Shows board in terminal: columns by status, rows by priority\n- Supports filtering, sorting, and shows links between tasks/ideas",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "group_by_status_and_priority",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "items",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "render_board",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "board",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "open",
          "json.load"
        ],
        "group_by_status_and_priority": [
          "defaultdict",
          "item.get"
        ],
        "render_board": [
          "Table",
          "console.print",
          "table.add_row",
          "table.add_column",
          "item.get",
          "links.append",
          "links.extend",
          "kind.capitalize",
          "Panel"
        ],
        "main": [
          "ideas_data.get",
          "console.rule",
          "group_by_status_and_priority",
          "load_json",
          "render_board",
          "tasks_data.get"
        ]
      },
      "dependencies": [
        "Console",
        "Panel",
        "Path",
        "Table",
        "box",
        "collections",
        "defaultdict",
        "json",
        "os",
        "pathlib",
        "rich",
        "rich.console",
        "rich.panel",
        "rich.table"
      ],
      "hash": null,
      "artifact_id": "8cbba1b8-2013-43f9-83dd-2ce1d91b69f5"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "module_doc": "JSON Schema Validation Script for llmstruct\nValidates all enhanced JSON files against their appropriate schemas.\nPart of TSK-130 implementation.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": null,
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "print",
          "open",
          "json.load"
        ],
        "validate_json_against_schema": [
          "print",
          "validate",
          "str"
        ],
        "main": [
          "errors.append",
          "print",
          "load_json",
          "validate_json_against_schema"
        ]
      },
      "dependencies": [
        "ValidationError",
        "draft7_format_checker",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "5a7f5722-520d-49cb-8e82-79e1e8a40242"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json_file",
          "docstring": "Load a JSON file and return its contents.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_with_struct",
          "docstring": "Verify llm_response.json against struct.json.",
          "line_range": null,
          "parameters": [
            "response_text",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_without_struct",
          "docstring": "Verify llm_response.json based on LLMstruct principles.",
          "line_range": null,
          "parameters": [
            "response_text"
          ],
          "decorators": []
        },
        {
          "name": "generate_metrics",
          "docstring": "Generate metrics for the response per EXT-004.",
          "line_range": null,
          "parameters": [
            "response_data",
            "server_log"
          ],
          "decorators": []
        },
        {
          "name": "update_tasks_json",
          "docstring": "Append a new task to tasks.json.",
          "line_range": null,
          "parameters": [
            "tasks_file",
            "new_task"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json_file": [
          "json.load",
          "open",
          "logging.error"
        ],
        "verify_response_with_struct": [
          "re.findall",
          "expected_extensions.issubset",
          "expected_files.issubset",
          "expected_goals.issubset",
          "logging.info",
          "set",
          "struct_data.get",
          "e.startswith",
          "logging.error"
        ],
        "verify_response_without_struct": [
          "logging.info",
          "re.findall",
          "expected_files.issubset",
          "expected_goals.issubset",
          "response_text.lower",
          "set",
          "expected_extensions.issubset",
          "principle.lower",
          "logging.error"
        ],
        "generate_metrics": [
          "re.findall",
          "response_text.split",
          "server_log.get",
          "len",
          "datetime.utcnow"
        ],
        "update_tasks_json": [
          "open",
          "json.dump",
          "tasks.get",
          "logging.info",
          "load_json_file"
        ],
        "main": [
          "verify_response_without_struct",
          "generate_metrics",
          "update_tasks_json",
          "open",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "json.dump",
          "verify_response_with_struct",
          "parser.add_argument",
          "logging.info",
          "load_json_file"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "argparse",
        "datetime",
        "json",
        "logging",
        "os",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "6096fb32-154f-4f2f-aeb1-5d6e5ae03364"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": null,
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "7f203e38-e201-4606-b488-bb271b79ee72"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": null,
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "print",
          "utils.helper"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": null,
      "artifact_id": "fb66ff06-5649-40dc-9a57-0d6a9962208a"
    },
    {
      "module_id": "docs.test_self_run",
      "path": "docs/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "select_json",
          "open",
          "json.dump",
          "str"
        ],
        "test_cache_json": [
          "cache.get_metadata",
          "open",
          "json.dump",
          "cache.cache_json",
          "cache.get_full_json",
          "cache.close",
          "str",
          "JSONCache"
        ],
        "test_attach_to_llm_request_init_json": [
          "open",
          "json.dump",
          "cache.close",
          "attach_to_llm_request",
          "str",
          "JSONCache"
        ],
        "test_attach_to_llm_request_missing_file": [
          "attach_to_llm_request",
          "str"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "attach_to_llm_request",
        "filter_json",
        "filter_struct",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "pathlib",
        "pytest",
        "select_json"
      ],
      "hash": null,
      "artifact_id": "eaad9add-4570-43d4-ab69-a6324a697d0e"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": null,
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": null,
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "open",
          "content.encode",
          "str",
          "json_file.exists",
          "hashlib.sha256",
          "Path",
          "json.dumps",
          "logging.info",
          "f.read",
          "logging.error"
        ],
        "get_metadata": [
          "cursor.fetchone",
          "json.loads"
        ],
        "get_full_json": [
          "logging.error",
          "open",
          "cursor.fetchone",
          "json.load"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "49164f17-ddf1-425f-97bb-8ca76d977131"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "struct.get",
          "module.get",
          "filter_json",
          "any",
          "prompt.lower"
        ],
        "attach_to_llm_request": [
          "context_file.exists",
          "cache.get_metadata",
          "filter_struct",
          "select_json",
          "Path",
          "cache.get_full_json",
          "filter_json",
          "cache.cache_json",
          "json.dumps",
          "logging.info",
          "logging.error",
          "prompt.lower"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "cfae80a7-26bc-4f00-9ef1-071f8c51e962"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": null,
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": null,
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "isinstance",
          "filtered.append",
          "item.get",
          "data.get"
        ],
        "select_json": [
          "json.load",
          "open",
          "path.append",
          "json_file.exists",
          "ijson.parse",
          "Path",
          "current_item.get",
          "filter_json",
          "f.seek",
          "prefix.startswith",
          "filtered.append",
          "logging.error"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "3937f1ec-93d1-4535-ae58-b219c1fc5e80"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.startswith",
          "Path",
          "line.strip",
          "gitignore_path.open",
          "gitignore_path.exists",
          "logging.error"
        ],
        "load_config": [
          "toml.load",
          "config_path\u30aa\u30fc\u30d7\u30f3",
          "Path",
          "config_path.exists",
          "logging.error"
        ],
        "read_file_content": [
          "path.is_file",
          "path.open",
          "Path",
          "f.read",
          "logging.error"
        ],
        "write_to_file": [
          "f.write",
          "logging.warning",
          "file_path.exists",
          "Path",
          "logging.info",
          "file_path.open",
          "base_path.mkdir",
          "str",
          "logging.error"
        ],
        "parse_files_from_response": [
          "files.append",
          "re.findall",
          "content.strip",
          "filename.strip"
        ],
        "interactive": [
          "print",
          "user_input.lower",
          "re.search",
          "json.dumps",
          "client.query",
          "write_dir.startswith",
          "attach_to_llm_request",
          "files_to_write.append",
          "write_to_file",
          "input",
          "logging.error",
          "Path",
          "cache.close",
          "LLMClient",
          "write_match.group",
          "load_gitignore",
          "JSONCache",
          "logging.warning",
          "sorted",
          "get_folder_structure",
          "parse_files_from_response",
          "scan_match.group",
          "read_file_content",
          "parse",
          "os.listdir"
        ],
        "parse": [
          "logging.warning",
          "load_config",
          "logging.error",
          "Path",
          "json.dump",
          "cache.cache_json",
          "cache.close",
          "logging.info",
          "load_gitignore",
          "generate_json",
          "JSONCache",
          "config.get"
        ],
        "query": [
          "Path",
          "client.query",
          "json.dump",
          "LLMClient",
          "cache.close",
          "logging.info",
          "logging.error",
          "JSONCache"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "review_parser.add_argument",
          "query_parser.add_argument",
          "asyncio.run",
          "subparsers.add_parser",
          "argparse.ArgumentParser",
          "context_parser.add_argument",
          "parser.parse_args",
          "parse",
          "query",
          "context",
          "parse_parser.add_argument",
          "parser.add_subparsers",
          "interactive",
          "review",
          "dogfood",
          "dogfood_parser.add_argument",
          "interactive_parser.add_argument"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "8727da12-58c8-44ea-a9dc-2c9daefd2d42"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "module_doc": "CLI configuration management.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize configuration manager.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from llmstruct.toml.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "Get cache configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "Get Copilot configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "Get queue configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "Get context configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_gitignore_patterns",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "Get directories to exclude from scanning.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "Get file patterns to include.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "Get file patterns to exclude.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "Get maximum file size for processing (in bytes).",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_auto_update_config",
          "docstring": "Get auto-update configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_auto_update_enabled",
          "docstring": "Check if auto-update is enabled.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "Get path to struct.json file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "Get path to context file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "Save current configuration to file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_config",
          "docstring": "Update configuration value.",
          "line_range": null,
          "parameters": [
            "self",
            "section",
            "key",
            "value"
          ],
          "decorators": []
        },
        {
          "name": "reload_config",
          "docstring": "Reload configuration from file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIConfig",
          "docstring": "Manages CLI configuration from llmstruct.toml and other sources.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize configuration manager.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from llmstruct.toml.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cache_config",
              "docstring": "Get cache configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_copilot_config",
              "docstring": "Get Copilot configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_queue_config",
              "docstring": "Get queue configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_config",
              "docstring": "Get context configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_gitignore_patterns",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "Get directories to exclude from scanning.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_include_patterns",
              "docstring": "Get file patterns to include.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "Get file patterns to exclude.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_max_file_size",
              "docstring": "Get maximum file size for processing (in bytes).",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_auto_update_config",
              "docstring": "Get auto-update configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_auto_update_enabled",
              "docstring": "Check if auto-update is enabled.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_struct_file_path",
              "docstring": "Get path to struct.json file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_file_path",
              "docstring": "Get path to context file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_config",
              "docstring": "Save current configuration to file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_config",
              "docstring": "Update configuration value.",
              "line_range": null,
              "parameters": [
                "self",
                "section",
                "key",
                "value"
              ]
            },
            {
              "name": "reload_config",
              "docstring": "Reload configuration from file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path"
        ],
        "_load_config": [
          "toml.load",
          "logging.error"
        ],
        "get_cache_config": [],
        "get_copilot_config": [],
        "get_queue_config": [],
        "get_context_config": [],
        "get_gitignore_patterns": [
          "line.startswith",
          "Path",
          "line.strip",
          "gitignore_path.open",
          "gitignore_path.exists",
          "logging.error"
        ],
        "get_exclude_dirs": [
          "set",
          "cli_config.get",
          "parsing_config.get",
          "list"
        ],
        "get_include_patterns": [
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_exclude_patterns": [
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_max_file_size": [],
        "get_auto_update_config": [],
        "is_auto_update_enabled": [
          "self.get_auto_update_config"
        ],
        "get_struct_file_path": [],
        "get_context_file_path": [],
        "save_config": [
          "toml.dump",
          "logging.error"
        ],
        "update_config": [
          "self.save_config"
        ],
        "reload_config": [
          "self._load_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "logging",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "45fe322f-5c51-44a3-a9af-5cb98af0030a"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "prompt.split",
          "response.json",
          "response.raise_for_status",
          "len"
        ],
        "test_grok": [
          "client.generate",
          "GrokClient",
          "time.perf_counter"
        ]
      },
      "dependencies": [
        "requests",
        "time"
      ],
      "hash": null,
      "artifact_id": "1fe7ebcd-99fe-4087-a123-9db38bedeecc"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "module_doc": "CLI command processing and handlers.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize command processor.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir",
            "config",
            "utils"
          ],
          "decorators": []
        },
        {
          "name": "set_cache",
          "docstring": "Set cache instance.",
          "line_range": null,
          "parameters": [
            "self",
            "cache"
          ],
          "decorators": []
        },
        {
          "name": "set_copilot",
          "docstring": "Set Copilot manager instance.",
          "line_range": null,
          "parameters": [
            "self",
            "copilot_manager"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "Process a command starting with /.",
          "line_range": null,
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "process_prompt",
          "docstring": "Process a regular user prompt (not a command).",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Show help information.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_view",
          "docstring": "View file or directory contents.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_write",
          "docstring": "Write content to file.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_queue",
          "docstring": "Handle queue operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_cache",
          "docstring": "Handle cache operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_copilot",
          "docstring": "Handle Copilot operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_config",
          "docstring": "View or modify configuration.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Show system status.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_backup",
          "docstring": "Create backup of file.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_parse",
          "docstring": "Parse project structure.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_audit",
          "docstring": "Audit and recover missing tasks/ideas from source files.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_audit_scan_sources",
          "docstring": "Scan dump directory for recoverable content.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_audit_recover_placeholders",
          "docstring": "Recover placeholder entries from source files.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_audit_show_status",
          "docstring": "Show current placeholder status.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_recover_from_sources",
          "docstring": "Attempt to recover content from source files.",
          "line_range": null,
          "parameters": [
            "self",
            "task_placeholders",
            "idea_placeholders"
          ],
          "decorators": []
        },
        {
          "name": "_process_queue",
          "docstring": "Process command queue.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_show_queue_status",
          "docstring": "Show queue status.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_clear_queue",
          "docstring": "Clear command queue.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_list_queue",
          "docstring": "List queue items.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_trigger_auto_update",
          "docstring": "Trigger auto-update of struct.json.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "handle_auto_update",
          "docstring": "Handle auto-update struct.json command.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_struct_status",
          "docstring": "Show struct.json status and last update info.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_workflow_trigger",
          "docstring": "Trigger workflow events that may require struct.json update.",
          "line_range": null,
          "parameters": [
            "self",
            "event_type",
            "context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CommandProcessor",
          "docstring": "Processes CLI commands and user prompts.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize command processor.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir",
                "config",
                "utils"
              ]
            },
            {
              "name": "set_cache",
              "docstring": "Set cache instance.",
              "line_range": null,
              "parameters": [
                "self",
                "cache"
              ]
            },
            {
              "name": "set_copilot",
              "docstring": "Set Copilot manager instance.",
              "line_range": null,
              "parameters": [
                "self",
                "copilot_manager"
              ]
            },
            {
              "name": "process_command",
              "docstring": "Process a command starting with /.",
              "line_range": null,
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "process_prompt",
              "docstring": "Process a regular user prompt (not a command).",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Show help information.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_view",
              "docstring": "View file or directory contents.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_write",
              "docstring": "Write content to file.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_queue",
              "docstring": "Handle queue operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_cache",
              "docstring": "Handle cache operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_copilot",
              "docstring": "Handle Copilot operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_config",
              "docstring": "View or modify configuration.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Show system status.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_backup",
              "docstring": "Create backup of file.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_parse",
              "docstring": "Parse project structure.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_audit",
              "docstring": "Audit and recover missing tasks/ideas from source files.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_audit_scan_sources",
              "docstring": "Scan dump directory for recoverable content.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_audit_recover_placeholders",
              "docstring": "Recover placeholder entries from source files.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_audit_show_status",
              "docstring": "Show current placeholder status.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_recover_from_sources",
              "docstring": "Attempt to recover content from source files.",
              "line_range": null,
              "parameters": [
                "self",
                "task_placeholders",
                "idea_placeholders"
              ]
            },
            {
              "name": "_process_queue",
              "docstring": "Process command queue.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_show_queue_status",
              "docstring": "Show queue status.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_clear_queue",
              "docstring": "Clear command queue.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_list_queue",
              "docstring": "List queue items.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_trigger_auto_update",
              "docstring": "Trigger auto-update of struct.json.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "handle_auto_update",
              "docstring": "Handle auto-update struct.json command.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_struct_status",
              "docstring": "Show struct.json status and last update info.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_workflow_trigger",
              "docstring": "Trigger workflow events that may require struct.json update.",
              "line_range": null,
              "parameters": [
                "self",
                "event_type",
                "context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "set_cache": [],
        "set_copilot": [],
        "process_command": [
          "print",
          "command_line.split",
          "len",
          "command_line.strip",
          "logging.error"
        ],
        "process_prompt": [
          "CopilotEvent",
          "prompt.strip",
          "print",
          "logging.error"
        ],
        "cmd_help": [
          "print"
        ],
        "cmd_view": [
          "print",
          "args.strip"
        ],
        "cmd_write": [
          "match.groups",
          "print",
          "content.startswith",
          "content.endswith",
          "self._trigger_auto_update",
          "content.strip",
          "re.match"
        ],
        "cmd_queue": [
          "print",
          "args.strip",
          "self._clear_queue",
          "self._process_queue",
          "self._show_queue_status",
          "self._list_queue"
        ],
        "cmd_cache": [
          "print",
          "args.strip",
          "len"
        ],
        "cmd_copilot": [
          "CopilotEvent",
          "print",
          "args.strip"
        ],
        "cmd_config": [
          "section.title",
          "print",
          "args.strip"
        ],
        "cmd_status": [
          "print"
        ],
        "cmd_backup": [
          "print",
          "args.strip"
        ],
        "cmd_parse": [
          "print",
          "generate_json",
          "logging.error"
        ],
        "cmd_audit": [
          "self._audit_recover_placeholders",
          "print",
          "args.strip",
          "self._audit_show_status",
          "self._audit_scan_sources",
          "logging.error"
        ],
        "_audit_scan_sources": [
          "open",
          "print",
          "Path",
          "len",
          "isinstance",
          "dump_dir.exists",
          "list",
          "dump_dir.glob",
          "json.load"
        ],
        "_audit_recover_placeholders": [
          "open",
          "int",
          "datetime.now",
          "str",
          "print",
          "self._recover_from_sources",
          "Path",
          "len",
          "json.dump",
          "ideas_file.exists",
          "tasks_file.exists",
          "i.get",
          "t.get",
          "json.load"
        ],
        "_audit_show_status": [
          "open",
          "print",
          "Path",
          "len",
          "ideas_file.exists",
          "tasks_file.exists",
          "i.get",
          "t.get",
          "json.load"
        ],
        "_recover_from_sources": [
          "open",
          "idea.get",
          "enumerate",
          "print",
          "ideas_updated.append",
          "Path",
          "len",
          "isinstance",
          "dump_dir.exists",
          "task.get",
          "dump_dir.glob",
          "json.dump",
          "tasks_updated.append",
          "json.load"
        ],
        "_process_queue": [
          "queue_data.get",
          "print",
          "Path",
          "item.get",
          "logging.error",
          "queue_file.open",
          "queue_file.exists",
          "json.load"
        ],
        "_show_queue_status": [
          "queue_data.get",
          "print",
          "Path",
          "item.get",
          "len",
          "sum",
          "queue_file.open",
          "queue_file.exists",
          "json.load"
        ],
        "_clear_queue": [
          "print",
          "Path",
          "json.dump",
          "queue_file.open",
          "queue_file.exists",
          "json.load"
        ],
        "_list_queue": [
          "queue_data.get",
          "enumerate",
          "print",
          "Path",
          "item.get",
          "queue_file.open",
          "queue_file.exists",
          "json.load"
        ],
        "_trigger_auto_update": [
          "self.handle_auto_update",
          "logging.error"
        ],
        "handle_auto_update": [
          "str",
          "print",
          "Path",
          "script_path.exists",
          "subprocess.run"
        ],
        "handle_struct_status": [
          "print",
          "os.stat",
          "struct_path.exists",
          "Path",
          "datetime.fromtimestamp"
        ],
        "handle_workflow_trigger": [
          "initialize_copilot",
          "copilot.close",
          "trigger_copilot_event",
          "len",
          "self.handle_auto_update",
          "str"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CopilotContextManager",
        "CopilotEvent",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "cli_config",
        "cli_utils",
        "copilot",
        "datetime",
        "generate_json",
        "initialize_copilot",
        "json",
        "llmstruct.cache",
        "llmstruct.copilot",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "sys",
        "trigger_copilot_event",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f004f993-3fc5-49df-9f91-534acce6943b"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "LLMClient",
        "llm_client"
      ],
      "hash": null,
      "artifact_id": "739d33fd-1813-4482-9eaa-efd8bde060ba"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "llmstruct.cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "d262cf78-1df0-4114-94c9-78a0f041c070"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "module_doc": "CLI utility functions.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize utils with root directory.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read file content with size limit.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "write_file_content",
          "docstring": "Write content to file.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "get_directory_structure",
          "docstring": "Get directory structure using folder generator.",
          "line_range": null,
          "parameters": [
            "self",
            "path",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON content.",
          "line_range": null,
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "format_json",
          "docstring": "Format data as JSON string.",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "indent"
          ],
          "decorators": []
        },
        {
          "name": "generate_unique_id",
          "docstring": "Generate unique ID for commands, queues, etc.",
          "line_range": null,
          "parameters": [
            "self",
            "prefix"
          ],
          "decorators": []
        },
        {
          "name": "safe_path_join",
          "docstring": "Safely join path parts, preventing directory traversal.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_exists",
          "docstring": "Check if file exists.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "dir_exists",
          "docstring": "Check if directory exists.",
          "line_range": null,
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_size",
          "docstring": "Get file size in bytes.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_file",
          "docstring": "Create backup of file with timestamp.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_backups",
          "docstring": "Clean up old backup files, keeping only the most recent ones.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "keep_count"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIUtils",
          "docstring": "Utility functions for CLI operations.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize utils with root directory.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "read_file_content",
              "docstring": "Read file content with size limit.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "max_size"
              ]
            },
            {
              "name": "write_file_content",
              "docstring": "Write content to file.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "content"
              ]
            },
            {
              "name": "get_directory_structure",
              "docstring": "Get directory structure using folder generator.",
              "line_range": null,
              "parameters": [
                "self",
                "path",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ]
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON content.",
              "line_range": null,
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "format_json",
              "docstring": "Format data as JSON string.",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "indent"
              ]
            },
            {
              "name": "generate_unique_id",
              "docstring": "Generate unique ID for commands, queues, etc.",
              "line_range": null,
              "parameters": [
                "self",
                "prefix"
              ]
            },
            {
              "name": "safe_path_join",
              "docstring": "Safely join path parts, preventing directory traversal.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_exists",
              "docstring": "Check if file exists.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "dir_exists",
              "docstring": "Check if directory exists.",
              "line_range": null,
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "get_file_size",
              "docstring": "Get file size in bytes.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "backup_file",
              "docstring": "Create backup of file with timestamp.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "cleanup_old_backups",
              "docstring": "Clean up old backup files, keeping only the most recent ones.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "keep_count"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "read_file_content": [
          "logging.warning",
          "open",
          "os.stat",
          "f.read",
          "logging.error"
        ],
        "write_file_content": [
          "f.write",
          "open",
          "Path",
          "logging.info",
          "logging.error"
        ],
        "get_directory_structure": [
          "logging.error",
          "os.listdir",
          "sorted",
          "get_folder_structure"
        ],
        "validate_json": [
          "json.loads",
          "str"
        ],
        "format_json": [
          "json.dumps",
          "str",
          "logging.error"
        ],
        "generate_unique_id": [
          "time.time",
          "int",
          "str",
          "uuid.uuid4"
        ],
        "safe_path_join": [
          "resolved_path.startswith",
          "ValueError"
        ],
        "file_exists": [
          "self.safe_path_join"
        ],
        "dir_exists": [
          "self.safe_path_join"
        ],
        "get_file_size": [
          "self.safe_path_join"
        ],
        "backup_file": [
          "open",
          "int",
          "time.time",
          "dst.write",
          "self.safe_path_join",
          "src.read",
          "logging.error"
        ],
        "cleanup_old_backups": [
          "logging.warning",
          "int",
          "backups.append",
          "backups.sort",
          "os.remove",
          "filename.split",
          "filename.startswith",
          "self.safe_path_join",
          "logging.info",
          "logging.error",
          "os.listdir"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "d76cb835-3479-403c-9430-0ed7068eec7a"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "module_doc": "LLMStruct Copilot Integration Module\nProvides context-aware development assistance with hybrid copilot capabilities.",
      "functions": [
        {
          "name": "initialize_copilot",
          "docstring": "Initialize copilot context manager for the project.\n\nArgs:\n    project_root: Project root directory\n\nReturns:\n    Configured CopilotContextManager instance",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "trigger_copilot_event",
          "docstring": "Trigger a copilot event and get relevant context.\n\nArgs:\n    manager: CopilotContextManager instance\n    event_type: Type of event\n    file_path: Optional file path\n    **kwargs: Additional event metadata\n\nReturns:\n    Dict with event context",
          "line_range": null,
          "parameters": [
            "manager",
            "event_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "smart_suggest",
          "docstring": "Get smart suggestions based on query and context.\n\nArgs:\n    manager: CopilotContextManager instance\n    query: Query string\n    context: Context type (code, workflow, task, etc.)\n\nReturns:\n    List of suggestions",
          "line_range": null,
          "parameters": [
            "manager",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
          "line_range": null,
          "parameters": [
            "self",
            "project_root",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load copilot configuration from JSON file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_layers",
          "docstring": "Initialize context layers from configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_context_layer",
          "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
          "line_range": null,
          "parameters": [
            "self",
            "layer_name",
            "force"
          ],
          "decorators": []
        },
        {
          "name": "unload_context_layer",
          "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
          "line_range": null,
          "parameters": [
            "self",
            "layer_name"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_event",
          "docstring": "Get relevant context for a copilot event.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
          "line_range": null,
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "suggest_completion",
          "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
          "line_range": null,
          "parameters": [
            "self",
            "current_code",
            "file_path",
            "cursor_position"
          ],
          "decorators": []
        },
        {
          "name": "validate_change",
          "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "change_type"
          ],
          "decorators": []
        },
        {
          "name": "_matches_scope",
          "docstring": "Check if file matches scope pattern.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "scope"
          ],
          "decorators": []
        },
        {
          "name": "_matches_trigger",
          "docstring": "Check if change type matches trigger.",
          "line_range": null,
          "parameters": [
            "self",
            "change_type",
            "trigger"
          ],
          "decorators": []
        },
        {
          "name": "_validate_json_schema",
          "docstring": "Validate JSON file against schema.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_check_circular_dependencies",
          "docstring": "Check for circular dependencies.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_validate_task_references",
          "docstring": "Validate task references in tasks.json.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
          "line_range": null,
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "refresh_all_contexts",
          "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_status",
          "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "export_context",
          "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
          "line_range": null,
          "parameters": [
            "self",
            "layers",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Clean up resources.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextLayer",
          "docstring": "Context layer priorities for copilot integration.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AttachMode",
          "docstring": "Context attachment modes.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLayerConfig",
          "docstring": "Configuration for a context layer.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotEvent",
          "docstring": "Represents a copilot event for context triggering.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotContextManager",
          "docstring": "Manages context layers and integration with GitHub Copilot.\nProvides intelligent context loading and workflow assistance.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
              "line_range": null,
              "parameters": [
                "self",
                "project_root",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load copilot configuration from JSON file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_initialize_layers",
              "docstring": "Initialize context layers from configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_context_layer",
              "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
              "line_range": null,
              "parameters": [
                "self",
                "layer_name",
                "force"
              ]
            },
            {
              "name": "unload_context_layer",
              "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
              "line_range": null,
              "parameters": [
                "self",
                "layer_name"
              ]
            },
            {
              "name": "get_context_for_event",
              "docstring": "Get relevant context for a copilot event.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
              "line_range": null,
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "suggest_completion",
              "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
              "line_range": null,
              "parameters": [
                "self",
                "current_code",
                "file_path",
                "cursor_position"
              ]
            },
            {
              "name": "validate_change",
              "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "change_type"
              ]
            },
            {
              "name": "_matches_scope",
              "docstring": "Check if file matches scope pattern.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "scope"
              ]
            },
            {
              "name": "_matches_trigger",
              "docstring": "Check if change type matches trigger.",
              "line_range": null,
              "parameters": [
                "self",
                "change_type",
                "trigger"
              ]
            },
            {
              "name": "_validate_json_schema",
              "docstring": "Validate JSON file against schema.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_check_circular_dependencies",
              "docstring": "Check for circular dependencies.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_validate_task_references",
              "docstring": "Validate task references in tasks.json.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
              "line_range": null,
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "refresh_all_contexts",
              "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_status",
              "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "export_context",
              "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
              "line_range": null,
              "parameters": [
                "self",
                "layers",
                "format"
              ]
            },
            {
              "name": "close",
              "docstring": "Clean up resources.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._initialize_layers",
          "os.getcwd",
          "self._load_config",
          "Path",
          "JSONCache"
        ],
        "_load_config": [
          "open",
          "logger.error",
          "logger.warning",
          "Path",
          "logger.info",
          "json.load"
        ],
        "_initialize_layers": [
          "ContextLayerConfig",
          "layer_config.get",
          "layers_config.items"
        ],
        "load_context_layer": [
          "open",
          "source_path.exists",
          "logger.error",
          "time.time",
          "logger.warning",
          "logger.debug",
          "logger.info",
          "json.load"
        ],
        "unload_context_layer": [
          "logger.info"
        ],
        "get_context_for_event": [
          "self.load_context_layer",
          "json.load",
          "open",
          "code_triggers.get",
          "logger.error",
          "triggers.get",
          "workflow_triggers.get",
          "file_triggers.get",
          "source_path.exists"
        ],
        "suggest_completion": [
          "self.load_context_layer",
          "struct_context.get",
          "current_module.get",
          "module.get",
          "Path",
          "func.get",
          "suggestions.append",
          "str"
        ],
        "validate_change": [
          "self._matches_scope",
          "self._check_circular_dependencies",
          "safety_features.get",
          "self._validate_task_references",
          "self._validate_json_schema",
          "self._matches_trigger",
          "len",
          "rule.get",
          "result.get"
        ],
        "_matches_scope": [
          "fnmatch",
          "Path",
          "str"
        ],
        "_matches_trigger": [
          "trigger_map.get"
        ],
        "_validate_json_schema": [
          "open",
          "file_path.endswith",
          "json.load"
        ],
        "_check_circular_dependencies": [
          "self.load_context_layer",
          "module.get",
          "Path",
          "len",
          "struct_data.get",
          "str"
        ],
        "_validate_task_references": [
          "open",
          "file_path.endswith",
          "tasks_data.get",
          "task.get",
          "task_ids.add",
          "set",
          "json.load"
        ],
        "get_workflow_suggestions": [
          "self.load_context_layer",
          "workflow.get",
          "suggestions.extend",
          "suggestions.append",
          "command.lower",
          "workflows.items"
        ],
        "refresh_all_contexts": [
          "self.load_context_layer",
          "logger.info",
          "list"
        ],
        "get_context_status": [
          "list"
        ],
        "export_context": [
          "json.dumps",
          "str",
          "list"
        ],
        "close": [
          "logger.info"
        ],
        "initialize_copilot": [
          "CopilotContextManager"
        ],
        "trigger_copilot_event": [
          "CopilotEvent",
          "manager.get_context_for_event"
        ],
        "smart_suggest": [
          "manager.get_workflow_suggestions"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "Union",
        "dataclass",
        "dataclasses",
        "enum",
        "fnmatch",
        "json",
        "llmstruct.cache",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "aa0fa742-3697-4f8c-9c6a-c517d5e3e023"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "module_doc": "GitHub visualization/graph feature (gh-view-v1)\nExport consolidated tasks/ideas from JSON files to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for GitHub Projects export",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize exporter with configuration",
          "line_range": null,
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from TOML file",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_mapping",
          "docstring": "Load existing ID mapping between local and GitHub",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_mapping",
          "docstring": "Save ID mapping to file",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_run_gh_command",
          "docstring": "Run GitHub CLI command and return success status and output",
          "line_range": null,
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "load_official_data",
          "docstring": "Load tasks and ideas from official JSON files",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "format_task_for_github",
          "docstring": "Format task data for GitHub Project card",
          "line_range": null,
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "format_idea_for_github",
          "docstring": "Format idea data for GitHub Project card",
          "line_range": null,
          "parameters": [
            "self",
            "idea"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExporter",
          "docstring": "Export tasks and ideas to GitHub Projects as cards",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize exporter with configuration",
              "line_range": null,
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from TOML file",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_mapping",
              "docstring": "Load existing ID mapping between local and GitHub",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_mapping",
              "docstring": "Save ID mapping to file",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_run_gh_command",
              "docstring": "Run GitHub CLI command and return success status and output",
              "line_range": null,
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "load_official_data",
              "docstring": "Load tasks and ideas from official JSON files",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "format_task_for_github",
              "docstring": "Format task data for GitHub Project card",
              "line_range": null,
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "format_idea_for_github",
              "docstring": "Format idea data for GitHub Project card",
              "line_range": null,
              "parameters": [
                "self",
                "idea"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "self._load_mapping",
          "Path"
        ],
        "_load_config": [
          "print",
          "toml.load",
          "open",
          "config.get"
        ],
        "_load_mapping": [
          "open",
          "json.load"
        ],
        "_save_mapping": [
          "print",
          "open",
          "json.dump"
        ],
        "_run_gh_command": [
          "subprocess.run"
        ],
        "load_official_data": [
          "open",
          "ideas_data.get",
          "print",
          "len",
          "tasks_data.get",
          "ideas_file.exists",
          "tasks_file.exists",
          "json.load"
        ],
        "format_task_for_github": [
          "status_map.get",
          "body_parts.append",
          "task.get"
        ],
        "format_idea_for_github": [
          "status_map.get",
          "body_parts.append",
          "idea.get"
        ],
        "main": [
          "exporter.format_task_for_github",
          "exporter.format_idea_for_github",
          "exporter.load_official_data",
          "print",
          "GitHubProjectsExporter",
          "len",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "pathlib",
        "subprocess",
        "sys",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "68fa6678-272c-495b-9524-93fea923a6f8"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": null,
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": null,
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logging.info",
          "int",
          "os.getenv"
        ],
        "query": [
          "json.load",
          "logging.warning",
          "self._query_grok",
          "self._query_ollama",
          "self._query_hybrid",
          "Path",
          "json.dumps",
          "self._query_anthropic",
          "logging.info",
          "range",
          "asyncio.sleep",
          "logging.error"
        ],
        "_query_grok": [
          "logging.error",
          "response.json",
          "result.get",
          "logging.info",
          "session.post",
          "aiohttp.ClientSession"
        ],
        "_query_anthropic": [
          "logging.error",
          "response.json",
          "result.get",
          "logging.info",
          "session.post",
          "aiohttp.ClientSession"
        ],
        "_query_ollama": [
          "logging.debug",
          "logging.error",
          "response.json",
          "result.get",
          "logging.info",
          "session.post",
          "aiohttp.ClientSession"
        ],
        "_query_hybrid": [
          "self._query_grok",
          "self._query_ollama",
          "asyncio.gather",
          "isinstance",
          "len",
          "self._query_anthropic",
          "logging.info"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "1d29863e-fdc1-4598-a3dd-8a614c64289e"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": null,
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": null,
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "open",
          "content.encode",
          "str",
          "json_file.exists",
          "hashlib.sha256",
          "Path",
          "json.dumps",
          "logging.info",
          "f.read",
          "logging.error"
        ],
        "get_metadata": [
          "cursor.fetchone",
          "json.loads"
        ],
        "get_full_json": [
          "logging.error",
          "open",
          "cursor.fetchone",
          "json.load"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "46e6c9c5-9cbb-41b5-8fd8-53d1e48a3b2f"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "struct.get",
          "module.get",
          "isinstance",
          "item.get",
          "filter_json",
          "any",
          "str",
          "prompt.lower"
        ],
        "attach_to_llm_request": [
          "context_file.exists",
          "cache.get_metadata",
          "filter_struct",
          "select_json",
          "Path",
          "cache.get_full_json",
          "filter_json",
          "cache.cache_json",
          "json.dumps",
          "logging.info",
          "logging.error",
          "prompt.lower"
        ]
      },
      "dependencies": [
        "Any",
        "JSONCache",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "7011c8c0-6654-4f58-b3a4-c5239a2bfec0"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": null,
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": null,
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "isinstance",
          "filtered.append",
          "item.get",
          "data.get"
        ],
        "select_json": [
          "json.load",
          "open",
          "path.append",
          "json_file.exists",
          "ijson.parse",
          "Path",
          "current_item.get",
          "filter_json",
          "f.seek",
          "prefix.startswith",
          "filtered.append",
          "logging.error"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "bd7c4835-3932-487e-a0cf-bd5611e07cca"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "audit",
          "docstring": "Handle audit command for recovering lost ideas/tasks.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.startswith",
          "Path",
          "line.strip",
          "gitignore_path.open",
          "gitignore_path.exists",
          "logging.error"
        ],
        "load_config": [
          "toml.load",
          "config_path.open",
          "Path",
          "config_path.exists",
          "logging.error"
        ],
        "read_file_content": [
          "path.is_file",
          "path.open",
          "Path",
          "f.read",
          "logging.error"
        ],
        "write_to_file": [
          "f.write",
          "logging.warning",
          "file_path.exists",
          "Path",
          "re.sub",
          "logging.info",
          "file_path.open",
          "base_path.mkdir",
          "str",
          "logging.error"
        ],
        "parse_files_from_response": [
          "files.append",
          "re.findall",
          "content.strip",
          "filename.strip"
        ],
        "interactive": [
          "interactive_legacy",
          "logging.warning",
          "interactive_modular"
        ],
        "interactive_modular": [
          "cli_core.run_interactive_mode",
          "create_cli_core"
        ],
        "interactive_legacy": [
          "process_cli_queue_enhanced",
          "print",
          "time.time",
          "user_input.lower",
          "json.dumps",
          "client.query",
          "cache.clear",
          "args_str.strip",
          "struct_data.get",
          "cache.list_keys",
          "open",
          "os.makedirs",
          "int",
          "re.match",
          "attach_to_llm_request",
          "write_to_file",
          "user_input.startswith",
          "input",
          "subprocess.run",
          "logging.error",
          "json.load",
          "workflow.get",
          "m.group",
          "Path",
          "cache.close",
          "json.dump",
          "LLMClient",
          "events_data.append",
          "load_gitignore",
          "cache.get_stats",
          "JSONCache",
          "logging.warning",
          "sorted",
          "time.ctime",
          "os.stat",
          "isinstance",
          "len",
          "get_folder_structure",
          "read_file_content",
          "parse",
          "os.listdir"
        ],
        "process_cli_queue_enhanced": [
          "json.load",
          "write_to_file",
          "open",
          "enumerate",
          "options.get",
          "workflow.get",
          "print",
          "time.time",
          "isinstance",
          "item.get",
          "len",
          "attach_to_llm_request",
          "get_folder_structure",
          "logging.info",
          "load_gitignore",
          "client.query",
          "read_file_content",
          "logging.error"
        ],
        "parse": [
          "logging.warning",
          "load_config",
          "logging.error",
          "cli_config.get",
          "Path",
          "parsing_config.get",
          "json.dump",
          "cache.cache_json",
          "logging.info",
          "load_gitignore",
          "cache.close",
          "generate_json",
          "JSONCache",
          "config.get"
        ],
        "query": [
          "Path",
          "client.query",
          "json.dump",
          "LLMClient",
          "cache.close",
          "logging.info",
          "logging.error",
          "JSONCache"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "copilot": [
          "manager.get_context_status",
          "print",
          "config_path.exists",
          "template_path.exists",
          "shutil.copy",
          "hasattr",
          "open",
          "initialize_copilot",
          "getattr",
          "smart_suggest",
          "manager.export_context",
          "logging.error",
          "enumerate",
          "manager.load_context_layer",
          "Path",
          "f.write",
          "manager.close",
          "manager.refresh_all_contexts",
          "manager.unload_context_layer",
          "manager.validate_change",
          "layers.split",
          "logging.info"
        ],
        "audit": [
          "CommandProcessor",
          "os.getcwd",
          "CLIUtils",
          "CLIConfig",
          "processor.cmd_audit",
          "logging.error"
        ],
        "main": [
          "context_parser.add_argument",
          "context",
          "parse_parser.add_argument",
          "parser.add_subparsers",
          "review",
          "interactive_parser.add_argument",
          "asyncio.run",
          "dogfood_parser.add_argument",
          "query_parser.add_argument",
          "subparsers.add_parser",
          "audit_parser.add_argument",
          "interactive_legacy",
          "review_parser.add_argument",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "copilot",
          "audit",
          "copilot_parser.add_argument",
          "query",
          "dogfood",
          "parse"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "cli_commands",
        "cli_config",
        "cli_core",
        "cli_utils",
        "copilot",
        "create_cli_core",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "shutil",
        "smart_suggest",
        "subprocess",
        "sys",
        "time",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "29f07086-b216-45f8-8a84-b4721e1920a1"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "module_doc": "Core CLI functionality and main loop.",
      "functions": [
        {
          "name": "create_cli_core",
          "docstring": "Factory function to create CLI core instance.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI core with root directory.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_cache",
          "docstring": "Initialize cache if enabled in config.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_copilot",
          "docstring": "Initialize Copilot integration if enabled.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive_mode",
          "docstring": "Run the interactive CLI mode.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "Clean up resources.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLICore",
          "docstring": "Core CLI class handling main loop and coordination.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI core with root directory.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "setup_cache",
              "docstring": "Initialize cache if enabled in config.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_copilot",
              "docstring": "Initialize Copilot integration if enabled.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_interactive_mode",
              "docstring": "Run the interactive CLI mode.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CLIUtils",
          "CommandProcessor",
          "CLIConfig"
        ],
        "setup_cache": [
          "logging.warning",
          "cache_path.mkdir",
          "cache_config.get",
          "Path",
          "logging.info",
          "str",
          "JSONCache"
        ],
        "setup_copilot": [
          "logging.info",
          "logging.warning",
          "copilot_config.get",
          "initialize_copilot"
        ],
        "run_interactive_mode": [
          "self.setup_cache",
          "print",
          "user_input.lower",
          "self.setup_copilot",
          "self.cleanup",
          "user_input.startswith",
          "input",
          "logging.error"
        ],
        "cleanup": [
          "logging.info"
        ],
        "create_cli_core": [
          "CLICore"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "JSONCache",
        "Optional",
        "Path",
        "cli_commands",
        "cli_config",
        "cli_utils",
        "copilot",
        "initialize_copilot",
        "llmstruct.cache",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9282f0f6-8025-4299-a974-c4ed2553157e"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "javascript_parser"
      ],
      "hash": null,
      "artifact_id": "906fd43b-8579-43db-aff8-3844a2e7acca"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "open",
          "hashlib.sha256",
          "f.read"
        ],
        "compute_file_metadata": [
          "self.file_hash",
          "os.stat",
          "open",
          "sum"
        ],
        "parse_module": [
          "open",
          "str",
          "esprima.parseModule",
          "self.compute_file_metadata",
          "f.read"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "781d5adf-5733-4293-b553-c4c0bec92d30"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data.",
          "line_range": null,
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_AsyncFunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_Call": [
          "self.generic_visit",
          "isinstance"
        ],
        "compute_file_hash": [
          "open",
          "hashlib.sha256",
          "f.read",
          "logging.error"
        ],
        "analyze_module": [
          "open",
          "CallVisitor",
          "visitor.visit",
          "ast.get_docstring",
          "str",
          "ast.unparse",
          "ast.parse",
          "infer_category",
          "sorted",
          "compute_file_hash",
          "classes.append",
          "ast.walk",
          "Path",
          "isinstance",
          "list",
          "functions.append",
          "f.read",
          "logging.error"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "8ec50837-3df5-48f5-a8a3-888f647a047c"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "02ad89c5-ef6f-4f2c-88c2-cf05442de54e"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "8ddd74db-d478-471a-afd3-b8dbfed0e6e8"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": null,
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": null,
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "json.load",
          "open",
          "json_file.exists",
          "schema_file.exists",
          "Path",
          "validate",
          "logging.info",
          "str",
          "logging.error"
        ],
        "validate_directory": [
          "str",
          "json_file.match",
          "Path",
          "any",
          "validate_struct_json"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "ab796875-8e27-4534-a97b-2530976e89b5"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "file_path.match",
          "uuid.uuid4",
          "structure.append",
          "p.endswith",
          "sorted",
          "p.rstrip",
          "file_path.relative_to",
          "Path",
          "any",
          "set",
          "os.walk",
          "str"
        ],
        "build_toc_and_modules": [
          "uuid.uuid4",
          "toc.append",
          "p.endswith",
          "f.match",
          "p.rstrip",
          "analyze_module",
          "Path",
          "len",
          "any",
          "modules.append",
          "set",
          "str"
        ],
        "generate_json": [
          "list",
          "uuid.uuid4",
          "get_folder_structure",
          "Path",
          "len",
          "set",
          "sum",
          "build_toc_and_modules",
          "str"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "3b3fcc68-9cde-48ce-82a6-8cec2e79de28"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "bf047ece-281c-4da1-b57f-3e6d9f6b8c74"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_self_run",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "struct.get",
          "module.get",
          "filter_json",
          "any",
          "prompt.lower"
        ],
        "attach_to_llm_request": [
          "context_file.exists",
          "cache.get_metadata",
          "filter_struct",
          "select_json",
          "Path",
          "cache.get_full_json",
          "filter_json",
          "cache.cache_json",
          "json.dumps",
          "logging.info",
          "logging.error",
          "prompt.lower"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "fb243a93-a50d-4443-89f6-964cbac9c7b0"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "filtered.append",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "files.append",
          "apply_filters",
          "path.relative_to",
          "path.is_file",
          "root_dir.rglob",
          "str"
        ],
        "generate_struct": [
          "output_path.exists",
          "uuid.uuid4",
          "existing.get",
          "Path",
          "len",
          "json.dump",
          "output_path.open",
          "logger.info",
          "collect_files",
          "str",
          "json.load"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "e41181dc-479e-41b1-837a-bc0f33686eb1"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_self_run",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "select_json",
          "open",
          "json.dump",
          "str"
        ],
        "test_cache_json": [
          "cache.get_metadata",
          "open",
          "json.dump",
          "cache.cache_json",
          "cache.get_full_json",
          "cache.close",
          "str",
          "JSONCache"
        ],
        "test_attach_to_llm_request_init_json": [
          "open",
          "json.dump",
          "cache.close",
          "attach_to_llm_request",
          "str",
          "JSONCache"
        ],
        "test_attach_to_llm_request_missing_file": [
          "attach_to_llm_request",
          "str"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "attach_to_llm_request",
        "filter_json",
        "filter_struct",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "pathlib",
        "pytest",
        "select_json"
      ],
      "hash": null,
      "artifact_id": "cfbd82e0-65f2-43c4-95db-082cabbd1ad7"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_cli.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "setup_files",
          "docstring": "Set up test files.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "test_interactive_with_cli_json",
          "docstring": "Test interactive mode with cli.json.",
          "line_range": null,
          "parameters": [
            "setup_files",
            "monkeypatch"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "setup_files": [
          "json.dumps"
        ],
        "test_interactive_with_cli_json": [
          "inputs.pop",
          "type",
          "AsyncMock",
          "monkeypatch.setattr",
          "interactive",
          "patch.object",
          "str"
        ]
      },
      "dependencies": [
        "AsyncMock",
        "LLMClient",
        "Path",
        "context",
        "dogfood",
        "interactive",
        "json",
        "llmstruct",
        "llmstruct.cli",
        "patch",
        "pathlib",
        "pytest",
        "read_file_content",
        "review",
        "unittest.mock"
      ],
      "hash": null,
      "artifact_id": "0b5c6d66-822f-4d44-bb91-c0611b6e19ce"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.warning",
          "validate"
        ],
        "backup_files": [
          "shutil.copytree",
          "datetime.now",
          "logger.info",
          "target_dir.exists"
        ],
        "deploy_embedded_files": [
          "validate_json",
          "backup_files",
          "f.write",
          "logger.error",
          "EMBEDDED_FILES.get",
          "EMBEDDED_FILES.items",
          "Path",
          "json.dump",
          "target_path.open",
          "target_path.exists",
          "logger.info"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "3aed9466-e759-407a-bb75-126b80336b63"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_json_selector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": null,
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": null,
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "isinstance",
          "filtered.append",
          "item.get",
          "data.get"
        ],
        "select_json": [
          "json.load",
          "open",
          "path.append",
          "json_file.exists",
          "ijson.parse",
          "Path",
          "current_item.get",
          "filter_json",
          "f.seek",
          "prefix.startswith",
          "filtered.append",
          "logging.error"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "463f43d4-d8a7-4e4c-806f-8b4d1a76fcb9"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "generate_project_json",
          "docstring": "Generate project JSON with schema validation.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "generate_project_json": [
          "open",
          "uuid.uuid4",
          "cli_path.open",
          "cli_path.exists",
          "Path",
          "json.dump",
          "validate",
          "logging.info",
          "str",
          "json.load"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "validate"
      ],
      "hash": null,
      "artifact_id": "45006555-da9c-4e4b-96dc-c15de8b5f04c"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "idea.get",
          "enumerate",
          "target_file.exists",
          "logger.error",
          "logger.warning",
          "broken_links.append",
          "Path",
          "json.dump",
          "source_file.exists",
          "logger.info",
          "json.load"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "db8bac6f-bc06-4cd2-8c08-597f848e5561"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": null,
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": null,
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "open",
          "content.encode",
          "str",
          "json_file.exists",
          "hashlib.sha256",
          "Path",
          "json.dumps",
          "logging.info",
          "f.read",
          "logging.error"
        ],
        "get_metadata": [
          "cursor.fetchone",
          "json.loads"
        ],
        "get_full_json": [
          "logging.error",
          "open",
          "cursor.fetchone",
          "json.load"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "8023bc0c-e7de-4277-9d7d-b67e9241eed7"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli_parser",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "parse_argparse",
          "docstring": "Parse argparse setup in cli.py to extract commands and arguments.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "generate_cli_json",
          "docstring": "Generate cli.json from cli.py.",
          "line_range": null,
          "parameters": [
            "cli_path",
            "output_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_argparse": [
          "open",
          "next",
          "ast.parse",
          "ast.walk",
          "cmd_args.append",
          "isinstance",
          "arg_name.lstrip",
          "commands.append",
          "any",
          "arg_name.startswith",
          "f.read"
        ],
        "generate_cli_json": [
          "open",
          "uuid.uuid4",
          "parse_argparse",
          "json.dump",
          "validate",
          "str",
          "json.load"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "ast",
        "json",
        "jsonschema",
        "pathlib",
        "typing",
        "uuid",
        "validate"
      ],
      "hash": null,
      "artifact_id": "fc52c209-438c-4ef5-a6c7-c1b28a5b28f9"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "filtered.append",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "files.append",
          "apply_filters",
          "path.relative_to",
          "path.is_file",
          "root_dir.rglob",
          "str"
        ],
        "generate_struct": [
          "output_path.exists",
          "uuid.uuid4",
          "existing.get",
          "Path",
          "len",
          "json.dump",
          "output_path.open",
          "logger.info",
          "collect_files",
          "str",
          "json.load"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "ad13d798-530e-43b4-8900-36ae94b15907"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "cache_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "load_cache",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_cache",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_cache",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "task_id",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_context",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        },
        {
          "name": "clear_cache",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ChatCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "cache_path",
                "max_size"
              ]
            },
            {
              "name": "load_cache",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_cache",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_cache",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "task_id",
                "message"
              ]
            },
            {
              "name": "get_context",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "task_id"
              ]
            },
            {
              "name": "clear_cache",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "task_id"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.load_cache"
        ],
        "load_cache": [
          "open",
          "json.load"
        ],
        "save_cache": [
          "open",
          "json.dump"
        ],
        "update_cache": [
          "len",
          "datetime.utcnow",
          "self.save_cache"
        ],
        "get_context": [],
        "clear_cache": [
          "self.save_cache"
        ],
        "main": [
          "ChatCache",
          "cache.update_cache",
          "cache.get_context",
          "print",
          "json.dumps"
        ]
      },
      "dependencies": [
        "datetime",
        "json",
        "os"
      ],
      "hash": null,
      "artifact_id": "a31141a9-500c-490f-8c45-402575eac6ac"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "idea.get",
          "enumerate",
          "target_file.exists",
          "logger.error",
          "logger.warning",
          "broken_links.append",
          "Path",
          "json.dump",
          "source_file.exists",
          "logger.info",
          "json.load"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "1640715f-bdab-4e87-875e-e7725f9936bb"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_deploy_embedded_files",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_deploy_embedded_files.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "setup_dirs",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "test_deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "setup_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "setup_dirs": [
          "docs_dir.mkdir",
          "data_dir.mkdir",
          "schemas_dir.mkdir",
          "json.dumps"
        ],
        "test_deploy_embedded_files": [
          "deploy_embedded_files",
          "len",
          "list",
          "backup_root.glob",
          "json.load"
        ]
      },
      "dependencies": [
        "Path",
        "deploy_embedded_files",
        "json",
        "pathlib",
        "pytest",
        "scripts.deploy_embedded_files"
      ],
      "hash": null,
      "artifact_id": "ea48d8be-1d48-4bd9-a8d9-ebf271da93cf"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_cli_json",
          "docstring": "Load cli.json for command metadata.",
          "line_range": null,
          "parameters": [
            "cli_json_path"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, using cli.json for command metadata.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_cli_json": [
          "cli_json_path.exists",
          "Path",
          "cli_json_path.open",
          "json.load"
        ],
        "interactive": [
          "load_cli_json",
          "print",
          "user_input.lower",
          "client.query",
          "prompt.lower",
          "t.format",
          "attach_to_llm_request",
          "write_to_file",
          "cli_json.get",
          "input",
          "logging.error",
          "Path",
          "cache.close",
          "LLMClient",
          "JSONCache",
          "logging.warning",
          "any",
          "parse_files_from_response",
          "cmd.get",
          "parse"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "cf19c918-4deb-443d-a771-143fa74a5332"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.warning",
          "validate"
        ],
        "backup_files": [
          "shutil.copytree",
          "datetime.now",
          "logger.info",
          "target_dir.exists"
        ],
        "deploy_embedded_files": [
          "validate_json",
          "backup_files",
          "f.write",
          "logger.error",
          "EMBEDDED_FILES.get",
          "EMBEDDED_FILES.items",
          "Path",
          "json.dump",
          "target_path.open",
          "target_path.exists",
          "logger.info"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "0da1bba2-098b-4b74-b2a4-65ca9e8d517b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.startswith",
          "Path",
          "line.strip",
          "gitignore_path.open",
          "gitignore_path.exists",
          "logging.error"
        ],
        "load_config": [
          "toml.load",
          "config_path\u30aa\u30fc\u30d7\u30f3",
          "Path",
          "config_path.exists",
          "logging.error"
        ],
        "read_file_content": [
          "path.is_file",
          "path.open",
          "Path",
          "f.read",
          "logging.error"
        ],
        "write_to_file": [
          "f.write",
          "logging.warning",
          "file_path.exists",
          "Path",
          "logging.info",
          "file_path.open",
          "base_path.mkdir",
          "str",
          "logging.error"
        ],
        "parse_files_from_response": [
          "files.append",
          "re.findall",
          "content.strip",
          "filename.strip"
        ],
        "interactive": [
          "print",
          "user_input.lower",
          "re.search",
          "json.dumps",
          "client.query",
          "write_dir.startswith",
          "attach_to_llm_request",
          "files_to_write.append",
          "write_to_file",
          "input",
          "logging.error",
          "Path",
          "cache.close",
          "LLMClient",
          "write_match.group",
          "load_gitignore",
          "JSONCache",
          "logging.warning",
          "sorted",
          "get_folder_structure",
          "parse_files_from_response",
          "scan_match.group",
          "read_file_content",
          "parse",
          "os.listdir"
        ],
        "parse": [
          "logging.warning",
          "load_config",
          "logging.error",
          "Path",
          "json.dump",
          "cache.cache_json",
          "cache.close",
          "logging.info",
          "load_gitignore",
          "generate_json",
          "JSONCache",
          "config.get"
        ],
        "query": [
          "Path",
          "client.query",
          "json.dump",
          "LLMClient",
          "cache.close",
          "logging.info",
          "logging.error",
          "JSONCache"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "review_parser.add_argument",
          "query_parser.add_argument",
          "asyncio.run",
          "subparsers.add_parser",
          "argparse.ArgumentParser",
          "context_parser.add_argument",
          "parser.parse_args",
          "parse",
          "query",
          "context",
          "parse_parser.add_argument",
          "parser.add_subparsers",
          "interactive",
          "review",
          "dogfood",
          "dogfood_parser.add_argument",
          "interactive_parser.add_argument"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "11865559-b879-4b58-884b-da7bbb5e1345"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.extract_artifacts",
      "path": "temp_workfiles/unsorted_mess/22.05.25/extract_artifacts.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "parse_args",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_artifacts_index",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "index_path"
          ],
          "decorators": []
        },
        {
          "name": "save_artifacts_index",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "index",
            "index_path"
          ],
          "decorators": []
        },
        {
          "name": "calculate_sha256",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "content"
          ],
          "decorators": []
        },
        {
          "name": "extract_artifacts",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "html_file",
            "output_dir",
            "index_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_args": [
          "parser.parse_args",
          "argparse.ArgumentParser",
          "parser.add_argument"
        ],
        "load_artifacts_index": [
          "open",
          "json.load"
        ],
        "save_artifacts_index": [
          "open",
          "json.dump"
        ],
        "calculate_sha256": [
          "content.encode",
          "hashlib.sha256"
        ],
        "extract_artifacts": [
          "f.write",
          "open",
          "os.makedirs",
          "calculate_sha256",
          "BeautifulSoup",
          "soup.find_all",
          "print",
          "title.endswith",
          "load_artifacts_index",
          "artifact.get",
          "extracted.append",
          "content_type.split",
          "save_artifacts_index",
          "datetime.utcnow",
          "f.read"
        ],
        "main": [
          "print",
          "extract_artifacts",
          "parse_args"
        ]
      },
      "dependencies": [
        "BeautifulSoup",
        "argparse",
        "bs4",
        "datetime",
        "hashlib",
        "json",
        "os",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "39b04e5a-8941-480b-ad59-21bbd1e49ea0"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.dumper",
      "path": "temp_workfiles/unsorted_mess/dump/dumper.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "json_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "obj"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "json_hash": [
          "json.dumps",
          "dumped.encode",
          "hashlib.md5"
        ]
      },
      "dependencies": [
        "glob",
        "hashlib",
        "json",
        "os"
      ],
      "hash": null,
      "artifact_id": "4356220f-d15b-4024-89e1-3c5155018465"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators___init__.py",
      "category": "core",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JSONGenerator",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "d739fd12-2b15-45ea-a791-ecdd4f88988f"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_utils",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": null,
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "ce37c74b-4cc2-47d2-9908-216173cd86ff"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ideas_tree",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ideas_tree.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "c61679f5-4ba7-432c-bcd4-a3ea78aa188c"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__.py",
      "category": "core",
      "module_doc": "LLMStruct: A tool for generating JSON-based code structures for LLM integration.\n\nThis package provides modular parsers, generators, and validators to create and validate\nJSON representations of code projects, supporting automation and context-aware LLM assistance.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "f7d7ac28-a516-4b5a-a925-24046a8c9d1e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency1",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency1.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.cpu_percent",
          "psutil.virtual_memory"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "run_llm_request": [
          "requests.Session",
          "response.json",
          "len",
          "get_system_metrics",
          "time.perf_counter",
          "session.post"
        ],
        "test_with_llmstruct": [
          "run_llm_request",
          "open",
          "str",
          "struct_path.exists",
          "Path",
          "f.read",
          "subprocess.run"
        ],
        "test_without_llmstruct": [
          "run_llm_request",
          "Path",
          "open",
          "f.read"
        ],
        "evaluate_accuracy": [
          "response_text.lower",
          "sum",
          "len"
        ],
        "main": [
          "evaluate_accuracy",
          "test_without_llmstruct",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "open",
          "print",
          "test_with_llmstruct",
          "setup_proxy",
          "json.dump",
          "parser.add_argument",
          "range"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "subprocess",
        "time"
      ],
      "hash": null,
      "artifact_id": "e4bb3665-8a8b-4508-9c14-bceae3ebdafc"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "payload"
          ],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.cpu_percent",
          "psutil.virtual_memory"
        ],
        "run_llm_request": [
          "response.json",
          "len",
          "get_system_metrics",
          "time.perf_counter",
          "requests.post"
        ],
        "test_with_llmstruct": [
          "run_llm_request",
          "open",
          "str",
          "struct_path.exists",
          "Path",
          "f.read",
          "subprocess.run"
        ],
        "test_without_llmstruct": [
          "run_llm_request",
          "Path",
          "open",
          "f.read"
        ],
        "evaluate_accuracy": [
          "response_text.lower",
          "sum",
          "len"
        ],
        "main": [
          "evaluate_accuracy",
          "test_without_llmstruct",
          "open",
          "print",
          "test_with_llmstruct",
          "json.dump",
          "range"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "psutil",
        "requests",
        "subprocess",
        "time"
      ],
      "hash": null,
      "artifact_id": "368cd758-26a5-4c73-862e-be08b75cc76d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.grok",
      "path": "temp_workfiles/unsorted_mess/dump/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "prompt.split",
          "response.json",
          "response.raise_for_status",
          "len"
        ],
        "test_grok": [
          "client.generate",
          "GrokClient",
          "time.perf_counter"
        ]
      },
      "dependencies": [
        "os",
        "requests"
      ],
      "hash": null,
      "artifact_id": "7499b50a-a1c1-4d04-a70e-f86a1ea4f452"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___main__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___main__.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "88b8391d-9f70-41fa-92c1-67eff050402e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "3885833b-647c-40d4-91d8-9f2eac732fc4"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency (1)",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency (1).py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "check_llmstruct_cli",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_grok",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_key",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.cpu_percent",
          "psutil.virtual_memory"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "run_llm_request": [
          "requests.Session",
          "response.json",
          "len",
          "get_system_metrics",
          "time.perf_counter",
          "session.post"
        ],
        "check_llmstruct_cli": [
          "shutil.which"
        ],
        "test_with_llmstruct": [
          "check_llmstruct_cli",
          "run_llm_request",
          "open",
          "str",
          "FileNotFoundError",
          "Path",
          "json.dump",
          "f.read",
          "target_path.exists",
          "subprocess.run"
        ],
        "test_without_llmstruct": [
          "run_llm_request",
          "Path",
          "open",
          "f.read"
        ],
        "test_with_grok": [
          "open",
          "test_grok",
          "FileNotFoundError",
          "Path",
          "json.dump",
          "target_path.exists",
          "f.read"
        ],
        "evaluate_accuracy": [
          "response_text.lower",
          "sum",
          "len"
        ],
        "main": [
          "check_llmstruct_cli",
          "evaluate_accuracy",
          "test_without_llmstruct",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "open",
          "test_with_grok",
          "print",
          "test_with_llmstruct",
          "setup_proxy",
          "json.dump",
          "parser.add_argument",
          "range",
          "str"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "shutil",
        "src.llmstruct.grok",
        "subprocess",
        "test_grok",
        "time"
      ],
      "hash": null,
      "artifact_id": "eed8b1ea-c26c-472c-a66e-ea3b07f163df"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "file_path.match",
          "uuid.uuid4",
          "structure.append",
          "p.endswith",
          "sorted",
          "p.rstrip",
          "file_path.relative_to",
          "Path",
          "any",
          "set",
          "os.walk",
          "str"
        ],
        "build_toc_and_modules": [
          "uuid.uuid4",
          "toc.append",
          "p.endswith",
          "f.match",
          "p.rstrip",
          "analyze_module",
          "Path",
          "len",
          "any",
          "modules.append",
          "set",
          "str"
        ],
        "generate_json": [
          "list",
          "uuid.uuid4",
          "get_folder_structure",
          "Path",
          "len",
          "set",
          "sum",
          "build_toc_and_modules",
          "str"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "a57ee9ab-6811-4f63-9375-bb42e4fc67f0"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_engines",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_engines.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "call_llm",
          "docstring": "Call the specified LLM backend with the given prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_ollama",
          "docstring": "Call Ollama with the specified prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_openai",
          "docstring": "Call OpenAI API with the specified prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_anthropic",
          "docstring": "Call Anthropic API with the specified prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_grok",
          "docstring": "Call xAI Grok API with the specified prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "call_llm": [
          "call_ollama",
          "call_grok",
          "call_anthropic",
          "call_openai",
          "RuntimeError",
          "ValueError",
          "str"
        ],
        "call_ollama": [
          "subprocess.run"
        ],
        "call_openai": [
          "ValueError",
          "openai.OpenAI",
          "os.getenv"
        ],
        "call_anthropic": [
          "ValueError",
          "anthropic.Anthropic",
          "os.getenv"
        ],
        "call_grok": [
          "requests.post",
          "os.getenv",
          "ValueError",
          "response.json",
          "response.raise_for_status"
        ]
      },
      "dependencies": [
        "LLM_BACKEND",
        "MODEL_NAME",
        "anthropic",
        "json",
        "llm_client.config",
        "openai",
        "os",
        "requests",
        "subprocess"
      ],
      "hash": null,
      "artifact_id": "4eb85dd7-72bd-4123-90fb-b906d78d81ed"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_config",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_config.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "os"
      ],
      "hash": null,
      "artifact_id": "4c40f929-5d72-4279-a7b6-ee24b947f940"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "file_hash",
          "docstring": "Compute SHA-256 hash of file contents.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "extract_comments",
          "docstring": "Extract single-line and multi-line comments using tokenize.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "Compute file size, last modified time, line count, and optional hash.",
          "line_range": null,
          "parameters": [
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path and dependencies.",
          "line_range": null,
          "parameters": [
            "path",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_signature",
          "docstring": "Generate function signature.",
          "line_range": null,
          "parameters": [
            "func_node"
          ],
          "decorators": []
        },
        {
          "name": "extract_dependencies",
          "docstring": "Extract module-level imports.",
          "line_range": null,
          "parameters": [
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module in a single pass.",
          "line_range": null,
          "parameters": [
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "Extract function calls and module dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "file_hash": [
          "open",
          "hashlib.sha256",
          "f.read",
          "logging.error"
        ],
        "extract_comments": [
          "comments.append",
          "open",
          "tokenize.tokenize",
          "logging.error"
        ],
        "compute_file_metadata": [
          "open",
          "file_hash",
          "os.stat",
          "sum",
          "logging.error"
        ],
        "infer_category": [
          "path.lower",
          "any"
        ],
        "get_signature": [],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "self.generic_visit",
          "isinstance"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "extract_dependencies": [
          "dependencies.update",
          "sorted",
          "ast.walk",
          "isinstance",
          "set",
          "dependencies.add"
        ],
        "analyze_module": [
          "infer_category",
          "visitor.visit",
          "ast.parse",
          "classes.append",
          "str",
          "get_signature",
          "open",
          "CallVisitor",
          "getattr",
          "extract_comments",
          "methods.append",
          "functions.append",
          "extract_dependencies",
          "logging.error",
          "f.read",
          "ast.get_docstring",
          "sorted",
          "compute_file_metadata",
          "hashlib.sha256",
          "isinstance",
          "source.splitlines"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "tokenize",
        "typing"
      ],
      "hash": null,
      "artifact_id": "8c396a77-04a5-4631-a1e3-ed123380a5ef"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with robust .gitignore filtering using pathlib.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "logging.debug",
          "fnmatch.fnmatch",
          "rel_dir.split",
          "structure.append",
          "sorted",
          "dir_path.relative_to",
          "dirnames.clear",
          "exclude_patterns.extend",
          "file_path.relative_to",
          "Path",
          "any",
          "os.walk",
          "str"
        ],
        "build_toc_and_modules": [
          "logging.debug",
          "fnmatch.fnmatch",
          "rel_dir.split",
          "toc.append",
          "sum",
          "dir_path.relative_to",
          "exclude_patterns.extend",
          "file_path.relative_to",
          "Path",
          "analyze_module",
          "len",
          "any",
          "logging.info",
          "os.walk",
          "modules.append",
          "str"
        ],
        "generate_json": [
          "len",
          "build_toc_and_modules",
          "get_folder_structure"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Tuple",
        "analyze_module",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "eb55d813-d835-4db5-a853-6d249355b1be"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct.py",
      "category": "core",
      "module_doc": "Generate JSON for workspace based on user instructions template.\n\nCreates structure:\n- metadata with description, instructions, and version\n- toc with module summaries and categories\n- modules with detailed function/class info, comments, call graphs, and categories",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore, logging loaded patterns.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_goals",
          "docstring": "Load goals from semicolon-separated string, file, or interactive editor.",
          "line_range": null,
          "parameters": [
            "goals_input"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "Compute SHA-256 hash of file contents.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "extract_comments",
          "docstring": "Extract single-line and multi-line comments using tokenize.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "Compute file size, last modified time, line count, and optional hash.",
          "line_range": null,
          "parameters": [
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path and dependencies.",
          "line_range": null,
          "parameters": [
            "path",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_signature",
          "docstring": "Generate function signature.",
          "line_range": null,
          "parameters": [
            "func_node"
          ],
          "decorators": []
        },
        {
          "name": "extract_dependencies",
          "docstring": "Extract module-level imports.",
          "line_range": null,
          "parameters": [
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module in a single pass.",
          "line_range": null,
          "parameters": [
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with robust .gitignore filtering using pathlib.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes",
            "goals_input"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "Extract function calls and module dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "load_gitignore": [
          "logging.warning",
          "open",
          "line.startswith",
          "len",
          "line.strip",
          "logging.info",
          "logging.error"
        ],
        "load_goals": [
          "open",
          "line.startswith",
          "os.unlink",
          "tempfile.NamedTemporaryFile",
          "temp.write",
          "len",
          "temp.flush",
          "g.strip",
          "line.strip",
          "logging.info",
          "subprocess.run",
          "goals_input.split",
          "logging.error"
        ],
        "file_hash": [
          "open",
          "hashlib.sha256",
          "f.read",
          "logging.error"
        ],
        "extract_comments": [
          "comments.append",
          "open",
          "tokenize.tokenize",
          "logging.error"
        ],
        "compute_file_metadata": [
          "open",
          "file_hash",
          "os.stat",
          "sum",
          "logging.error"
        ],
        "infer_category": [
          "path.lower",
          "any"
        ],
        "get_signature": [],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "self.generic_visit",
          "isinstance"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "extract_dependencies": [
          "dependencies.update",
          "sorted",
          "ast.walk",
          "isinstance",
          "set",
          "dependencies.add"
        ],
        "analyze_module": [
          "infer_category",
          "visitor.visit",
          "ast.parse",
          "classes.append",
          "str",
          "get_signature",
          "open",
          "CallVisitor",
          "getattr",
          "extract_comments",
          "methods.append",
          "functions.append",
          "extract_dependencies",
          "logging.error",
          "f.read",
          "ast.get_docstring",
          "sorted",
          "compute_file_metadata",
          "hashlib.sha256",
          "isinstance",
          "source.splitlines"
        ],
        "build_toc_and_modules": [
          "logging.debug",
          "fnmatch.fnmatch",
          "rel_dir.split",
          "toc.append",
          "sum",
          "dir_path.relative_to",
          "exclude_patterns.extend",
          "file_path.relative_to",
          "Path",
          "analyze_module",
          "len",
          "any",
          "logging.info",
          "os.walk",
          "modules.append",
          "load_gitignore",
          "str"
        ],
        "generate_json": [
          "build_toc_and_modules",
          "load_goals",
          "len"
        ],
        "main": [
          "logging.info",
          "logging.warning",
          "open",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "json.dump",
          "parser.add_argument",
          "include_patterns.extend",
          "generate_json",
          "language_patterns.get",
          "logging.error"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ast",
        "datetime",
        "fnmatch",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "tempfile",
        "tokenize",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b8e15286-0734-4bd3-a429-1af2712f0039"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "compute_hash",
          "docstring": "Compute SHA-256 hash of content.",
          "line_range": null,
          "parameters": [
            "content"
          ],
          "decorators": []
        },
        {
          "name": "load_struct_json",
          "docstring": "Load struct.json for metadata.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_llmstruct_toml",
          "docstring": "Load llmstruct.toml for configuration.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_docs",
          "docstring": "Generate all documentation files with idempotency.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "compute_hash": [
          "content.encode",
          "hashlib.sha256"
        ],
        "load_struct_json": [
          "struct_path.exists",
          "Path",
          "open",
          "json.load"
        ],
        "load_llmstruct_toml": [
          "toml.load",
          "open",
          "Path",
          "toml_path.exists"
        ],
        "generate_docs": [
          "project_name.lower",
          "chr",
          "json.dumps",
          "struct_data.get",
          "str",
          "open",
          "metadata.get",
          "toml_data.get",
          "Path",
          "doc_files.items",
          "datetime.utcnow",
          "compute_hash",
          "f.read",
          "logger.info",
          "f.write",
          "file_path.exists",
          "load_struct_json",
          "load_llmstruct_toml",
          "any"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "toml"
      ],
      "hash": null,
      "artifact_id": "a33b89ec-cea3-4ba4-b6ba-49dc758e0b9a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "38f1b01e-c992-4211-8591-b2a0ea15f28a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collector",
      "path": "temp_workfiles/unsorted_mess/dump/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_path.exists",
          "Path",
          "gitignore_parser.parse_gitignore"
        ],
        "collect_project": [
          "open",
          "f.read",
          "file_path.is_file",
          "gitignore",
          "root_dir.rglob",
          "Path",
          "json.dump",
          "doc_files.items",
          "any",
          "load_gitignore",
          "str"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "80cfdc16-0447-4038-83c1-95f39430cd51"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "should_ignore",
          "docstring": "Check if path should be ignored based on directories or .gitignore.",
          "line_range": null,
          "parameters": [
            "path",
            "root_dir",
            "ignore_dirs",
            "gitignore_patterns"
          ],
          "decorators": []
        },
        {
          "name": "collect_docs",
          "docstring": "Collect all documentation files into a JSON file.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "open",
          "line.startswith",
          "patterns.append",
          "line.strip",
          "gitignore_path.exists"
        ],
        "should_ignore": [
          "rel_path.startswith",
          "fnmatch",
          "str",
          "path.relative_to"
        ],
        "collect_docs": [
          "open",
          "str",
          "print",
          "path.is_file",
          "path.relative_to",
          "should_ignore",
          "root_dir.rglob",
          "Path",
          "json.dump",
          "load_gitignore",
          "f.read"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "eacb725b-7b0c-4d7c-b9dc-bbfcc6f8358d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "collect_docs",
          "docstring": "Collect all documentation files into a single text file.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "collect_docs": [
          "f.write",
          "file_path.exists",
          "open",
          "dir_path.exists",
          "print",
          "file_path.is_file",
          "Path",
          "dir_path.rglob",
          "collected.append",
          "f.read"
        ]
      },
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "55c3b74b-4423-4b88-8dbf-da67f9bfb694"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.refactored_structure",
      "path": "temp_workfiles/unsorted_mess/dump/refactored_structure.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "json_path",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "modules",
            "metadata"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "PythonParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "JSONGenerator",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "generate",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "modules",
                "metadata"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "parse_module": [],
        "generate": [],
        "main": [
          "generator.generate",
          "open",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "JavaScriptParser",
          "PythonParser",
          "JSONGenerator",
          "json.dump",
          "parser.add_argument",
          "parser.parse_module"
        ],
        "attach_to_llm_request": [
          "open",
          "json.dumps",
          "json.load"
        ]
      },
      "dependencies": [],
      "hash": null,
      "artifact_id": "22e1096a-1221-4ef2-b534-e1f545187d9c"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path.",
          "line_range": null,
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module to extract functions, classes, and call graph.",
          "line_range": null,
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function and module calls.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "path.lower"
        ],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "self.generic_visit",
          "isinstance"
        ],
        "analyze_module": [
          "visitor.visit",
          "ast.unparse",
          "infer_category",
          "ast.parse",
          "classes.append",
          "str",
          "open",
          "CallVisitor",
          "code.encode",
          "methods.append",
          "datetime.fromtimestamp",
          "set",
          "functions.append",
          "logging.error",
          "Path",
          "code.splitlines",
          "relative_path.encode",
          "f.read",
          "dependencies.update",
          "ast.get_docstring",
          "sorted",
          "hashlib.sha256",
          "os.stat",
          "ast.walk",
          "len",
          "isinstance",
          "dependencies.add"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "ast",
        "datetime",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "8c4ccc70-d5a4-453a-87fb-735c1b6b8e2a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_templates___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_templates___init__.py",
      "category": "core",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "aff39fc7-d035-452c-a17a-e14acd717b9f"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end (1)",
      "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end (1).py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_end_to_end",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_end_to_end": [
          "validate_struct_json",
          "open",
          "str",
          "next",
          "main",
          "tasks_json.write_text",
          "len",
          "utils_py.write_text",
          "any",
          "main_py.write_text",
          "output_json.exists",
          "project_dir.mkdir",
          "json.load"
        ]
      },
      "dependencies": [
        "json",
        "llmstruct.cli",
        "llmstruct.validators.json_validator",
        "main",
        "os",
        "pytest",
        "sys",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "b84c7e29-105b-4571-99fd-6b9507d94762"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_content_hash",
          "docstring": "Calculate hash of content for idempotency.",
          "line_range": null,
          "parameters": [
            "content"
          ],
          "decorators": []
        },
        {
          "name": "create_file",
          "docstring": "Create or update file if content changed.",
          "line_range": null,
          "parameters": [
            "path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "generate_docs_tree",
          "docstring": "Generate Di\u00e1taxis-compliant documentation for llmstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "print_docs_tree",
          "docstring": "Print documentation tree.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_content_hash": [
          "content.encode",
          "hashlib.sha256"
        ],
        "create_file": [
          "f.write",
          "open",
          "print",
          "path.exists",
          "get_content_hash",
          "content.strip",
          "f.read"
        ],
        "generate_docs_tree": [
          "Path",
          "create_file"
        ],
        "print_docs_tree": [
          "os.walk",
          "root.startswith",
          "print",
          "root.replace"
        ]
      },
      "dependencies": [
        "Path",
        "hashlib",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "94ea5d03-2577-4cce-ac4b-eb1186e0eb25"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_main",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": null,
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "print",
          "utils.helper"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": null,
      "artifact_id": "6916c739-512f-4888-b02b-4cfce955d2f5"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.filter_llmstruct_json",
      "path": "temp_workfiles/unsorted_mess/dump/filter_llmstruct_json.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load .gitignore patterns.",
          "line_range": null,
          "parameters": [
            "gitignore_path"
          ],
          "decorators": []
        },
        {
          "name": "filter_json",
          "docstring": "Filter struct.json to exclude .gitignore paths and optionally tests.",
          "line_range": null,
          "parameters": [
            "data",
            "gitignore_patterns",
            "include_tests"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "patterns.append",
          "open",
          "line.startswith",
          "line.strip"
        ],
        "filter_json": [
          "fnmatch.fnmatch",
          "module.get",
          "len",
          "any",
          "data.get"
        ],
        "main": [
          "open",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "logging.error",
          "logging.basicConfig",
          "json.dump",
          "filter_json",
          "parser.add_argument",
          "logging.info",
          "load_gitignore",
          "str",
          "json.load"
        ]
      },
      "dependencies": [
        "argparse",
        "fnmatch",
        "json",
        "logging",
        "os"
      ],
      "hash": null,
      "artifact_id": "d1ab4d31-373a-4475-83b0-00e37b6ee250"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_internal_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_internal_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "605c5058-457e-41dd-a8c3-8787403134e2"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": null,
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": null,
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logging.info",
          "int",
          "os.getenv"
        ],
        "query": [
          "json.load",
          "logging.warning",
          "self._query_grok",
          "self._query_ollama",
          "self._query_hybrid",
          "Path",
          "json.dumps",
          "self._query_anthropic",
          "logging.info",
          "range",
          "asyncio.sleep",
          "logging.error"
        ],
        "_query_grok": [
          "logging.error",
          "response.json",
          "result.get",
          "logging.info",
          "session.post",
          "aiohttp.ClientSession"
        ],
        "_query_anthropic": [
          "logging.error",
          "response.json",
          "result.get",
          "logging.info",
          "session.post",
          "aiohttp.ClientSession"
        ],
        "_query_ollama": [
          "logging.debug",
          "logging.error",
          "response.json",
          "result.get",
          "logging.info",
          "session.post",
          "aiohttp.ClientSession"
        ],
        "_query_hybrid": [
          "self._query_grok",
          "self._query_ollama",
          "asyncio.gather",
          "isinstance",
          "len",
          "self._query_anthropic",
          "logging.info"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "requests",
        "typing",
        "urljoin",
        "urllib.parse"
      ],
      "hash": null,
      "artifact_id": "e073c6ad-7d75-4da4-99e0-0487828beb8d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client (3)",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client (3).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": null,
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": null,
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "int",
          "os.getenv"
        ],
        "query": [
          "json.load",
          "logging.warning",
          "self._query_grok",
          "self._query_ollama",
          "self._query_hybrid",
          "Path",
          "json.dumps",
          "self._query_anthropic",
          "logging.info",
          "range",
          "asyncio.sleep",
          "logging.error"
        ],
        "_query_grok": [
          "logging.error",
          "response.json",
          "result.get",
          "logging.info",
          "session.post",
          "aiohttp.ClientSession"
        ],
        "_query_anthropic": [
          "logging.error",
          "response.json",
          "result.get",
          "logging.info",
          "session.post",
          "aiohttp.ClientSession"
        ],
        "_query_ollama": [
          "logging.error",
          "response.json",
          "urljoin",
          "result.get",
          "logging.info",
          "session.post",
          "aiohttp.ClientSession"
        ],
        "_query_hybrid": [
          "self._query_grok",
          "self._query_ollama",
          "asyncio.gather",
          "isinstance",
          "len",
          "self._query_anthropic",
          "logging.info"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "requests",
        "typing",
        "urljoin",
        "urllib.parse"
      ],
      "hash": null,
      "artifact_id": "d5a97ba2-8152-4820-a773-a68f0e100afc"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.tests___init__",
      "path": "temp_workfiles/unsorted_mess/dump/tests___init__.py",
      "category": "core",
      "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "c42f262b-baec-4aae-8dc4-5ae22b16d4dc"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.check_docs",
      "path": "temp_workfiles/unsorted_mess/dump/check_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_struct",
          "docstring": "Load struct.json.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_docs",
          "docstring": "Check docs/ against struct.json and dialogue state.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run doc check and print report.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_struct": [
          "open",
          "json.load"
        ],
        "check_docs": [
          "open",
          "content.lower",
          "struct.get",
          "issues.append",
          "Path",
          "load_struct",
          "os.walk",
          "f.read"
        ],
        "main": [
          "check_docs",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "ed49ad50-911e-4d2a-9ccf-eca6bf779719"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.javascript_parser",
      "path": "temp_workfiles/unsorted_mess/dump/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "open",
          "hashlib.sha256",
          "f.read"
        ],
        "compute_file_metadata": [
          "self.file_hash",
          "os.stat",
          "open",
          "sum"
        ],
        "parse_module": [
          "open",
          "str",
          "esprima.parseModule",
          "self.compute_file_metadata",
          "f.read"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "74688155-88fd-495c-9e79-958993202f77"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.self_run",
      "path": "temp_workfiles/unsorted_mess/dump/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json based on prompt keywords.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered struct.json to LLM prompt.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "struct.get",
          "module.get",
          "any",
          "prompt.lower"
        ],
        "attach_to_llm_request": [
          "context_file.exists",
          "open",
          "prompt.lower",
          "Path",
          "filter_json",
          "json.dumps",
          "filter_struct",
          "logging.error",
          "json.load"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "31f0e1c4-f720-45b7-abeb-6fe1d4c7aad4"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with robust .gitignore filtering using pathlib.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "file_path.match",
          "sorted",
          "structure.append",
          "file_path.relative_to",
          "Path",
          "any",
          "os.walk",
          "str"
        ],
        "build_toc_and_modules": [
          "toc.append",
          "f.match",
          "python_parser.analyze_module",
          "Path",
          "len",
          "any",
          "modules.append",
          "str"
        ],
        "generate_json": [
          "list",
          "get_folder_structure",
          "Path",
          "len",
          "set",
          "sum",
          "build_toc_and_modules"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers",
        "pathlib",
        "python_parser",
        "typing"
      ],
      "hash": null,
      "artifact_id": "e5494669-cc6c-466f-a8e8-ae71664db3d9"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end",
      "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_end_to_end",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_end_to_end": [
          "validate_struct_json",
          "open",
          "str",
          "main",
          "main_py.write_text",
          "output_json.exists",
          "project_dir.mkdir",
          "json.load"
        ]
      },
      "dependencies": [
        "json",
        "llmstruct.cli",
        "llmstruct.validators.json_validator",
        "main",
        "os",
        "pytest",
        "sys",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "8343db60-3d25-4e49-8251-51b9bcc83113"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        },
        {
          "name": "PythonParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "self.generic_visit",
          "isinstance"
        ],
        "file_hash": [
          "open",
          "hashlib.sha256",
          "f.read"
        ],
        "compute_file_metadata": [
          "self.file_hash",
          "os.stat",
          "open",
          "sum"
        ],
        "parse_module": [
          "visitor.visit",
          "ast.parse",
          "classes.append",
          "call.split",
          "str",
          "open",
          "CallVisitor",
          "methods.append",
          "set",
          "functions.append",
          "dependencies.append",
          "f.read",
          "ast.get_docstring",
          "sorted",
          "dependencies.extend",
          "ast.walk",
          "isinstance",
          "self.compute_file_metadata",
          "list"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "ast",
        "datetime",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "585cedda-f627-490e-947f-9f4ab0fe2f2e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers___init__.py",
      "category": "core",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "PythonParser",
        "javascript_parser",
        "python_parser"
      ],
      "hash": null,
      "artifact_id": "a5493337-dd93-4694-ba07-3fc92b181063"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_goals",
          "docstring": "Load project goals from pyproject.toml or default.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.startswith",
          "Path",
          "line.strip",
          "gitignore_path.open",
          "gitignore_path.exists",
          "logging.error"
        ],
        "load_goals": [
          "toml.load",
          "Path",
          "logging.error",
          "pyproject_path.open",
          "pyproject_path.exists",
          "config.get"
        ],
        "main": [
          "open",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "json.dump",
          "load_goals",
          "parser.add_argument",
          "logging.info",
          "load_gitignore",
          "generate_json",
          "logging.error"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "argparse",
        "generate_json",
        "generators.json_generator",
        "json",
        "logging",
        "os",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "316cb3ac-758e-40b0-ac39-ebf66584ffdf"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency_proxybypass",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency_proxybypass.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "is_local_address",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "is_local_address": [
          "ipaddress.ip_address",
          "urlparse"
        ],
        "get_system_metrics": [
          "psutil.cpu_percent",
          "psutil.virtual_memory"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "run_llm_request": [
          "requests.Session",
          "response.json",
          "len",
          "get_system_metrics",
          "time.perf_counter",
          "is_local_address",
          "session.post"
        ],
        "test_with_llmstruct": [
          "run_llm_request",
          "open",
          "str",
          "struct_path.exists",
          "Path",
          "f.read",
          "subprocess.run"
        ],
        "test_without_llmstruct": [
          "run_llm_request",
          "Path",
          "open",
          "f.read"
        ],
        "evaluate_accuracy": [
          "response_text.lower",
          "sum",
          "len"
        ],
        "main": [
          "evaluate_accuracy",
          "test_without_llmstruct",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "open",
          "print",
          "test_with_llmstruct",
          "setup_proxy",
          "json.dump",
          "parser.add_argument",
          "range"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "ipaddress",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "subprocess",
        "time",
        "urllib.parse",
        "urlparse"
      ],
      "hash": null,
      "artifact_id": "237d460d-eb5e-4782-9663-f30b55f6fa9c"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.scripts_setup_github",
      "path": "temp_workfiles/unsorted_mess/dump/scripts_setup_github.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "create_issue",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "repo",
            "token",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "setup_ci_cd",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "repo_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_templates",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "repo_dir"
          ],
          "decorators": []
        },
        {
          "name": "update_readme",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "repo_dir",
            "user_guide_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "open",
          "json.load"
        ],
        "create_issue": [
          "response.json",
          "requests.post",
          "task.get"
        ],
        "setup_ci_cd": [
          "workflow_dir.mkdir",
          "Path",
          "ci_yml.write_text"
        ],
        "setup_templates": [
          "pr_template.write_text",
          "Path",
          "template_dir.mkdir",
          "issue_template.write_text"
        ],
        "update_readme": [
          "Path",
          "readme.write_text"
        ],
        "main": [
          "parser.parse_args",
          "argparse.ArgumentParser",
          "issue.get",
          "print",
          "load_json",
          "setup_templates",
          "setup_ci_cd",
          "task.get",
          "parser.add_argument",
          "update_readme",
          "create_issue"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "os",
        "pathlib",
        "requests"
      ],
      "hash": null,
      "artifact_id": "8c8c6ab3-4b29-46cc-bd2f-9ae5bf362250"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__ (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__ (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "24817eb6-1ee0-4b49-be50-0c8be55a5c53"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.cli",
      "path": "temp_workfiles/unsorted_mess/dump/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.startswith",
          "Path",
          "line.strip",
          "gitignore_path.open",
          "gitignore_path.exists",
          "logging.error"
        ],
        "load_config": [
          "toml.load",
          "config_path.open",
          "Path",
          "config_path.exists",
          "logging.error"
        ],
        "read_file_content": [
          "path.is_file",
          "path.open",
          "Path",
          "f.read",
          "logging.error"
        ],
        "write_to_file": [
          "f.write",
          "logging.warning",
          "file_path.exists",
          "Path",
          "logging.info",
          "file_path.open",
          "base_path.mkdir",
          "str",
          "logging.error"
        ],
        "parse_files_from_response": [
          "files.append",
          "re.findall",
          "content.strip",
          "filename.strip"
        ],
        "interactive": [
          "print",
          "user_input.lower",
          "re.search",
          "json.dumps",
          "client.query",
          "write_dir.startswith",
          "attach_to_llm_request",
          "files_to_write.append",
          "write_to_file",
          "input",
          "logging.error",
          "Path",
          "LLMClient",
          "write_match.group",
          "load_gitignore",
          "logging.warning",
          "sorted",
          "get_folder_structure",
          "parse_files_from_response",
          "scan_match.group",
          "read_file_content",
          "parse",
          "os.listdir"
        ],
        "parse": [
          "logging.warning",
          "load_config",
          "logging.error",
          "Path",
          "json.dump",
          "logging.info",
          "load_gitignore",
          "generate_json",
          "config.get"
        ],
        "query": [
          "json.dump",
          "Path",
          "client.query",
          "LLMClient",
          "logging.info",
          "logging.error"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "review_parser.add_argument",
          "query_parser.add_argument",
          "asyncio.run",
          "subparsers.add_parser",
          "argparse.ArgumentParser",
          "context_parser.add_argument",
          "parser.parse_args",
          "parse",
          "query",
          "context",
          "parse_parser.add_argument",
          "parser.add_subparsers",
          "interactive",
          "review",
          "dogfood",
          "dogfood_parser.add_argument",
          "interactive_parser.add_argument"
        ]
      },
      "dependencies": [
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "25f86aae-a870-4ef8-9341-556698f26e36"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_validators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_validators___init__.py",
      "category": "core",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "94c03b94-ddd4-461b-9abd-c02ce0f78758"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct (1).py",
      "category": "core",
      "module_doc": "Generate JSON for workspace based on user instructions template.\n\nCreates structure:\n- metadata with description, instructions, and version\n- toc with module summaries and categories\n- modules with detailed function/class info, comments, call graphs, and categories",
      "functions": [
        {
          "name": "load_goals",
          "docstring": "Load goals from file or interactive editor.",
          "line_range": null,
          "parameters": [
            "goals_file"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "Compute SHA-256 hash of file contents.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "extract_comments",
          "docstring": "Extract single-line and multi-line comments using tokenize.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "Compute file size, last modified time, line count, and optional hash.",
          "line_range": null,
          "parameters": [
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path and dependencies.",
          "line_range": null,
          "parameters": [
            "path",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_signature",
          "docstring": "Generate function signature.",
          "line_range": null,
          "parameters": [
            "func_node"
          ],
          "decorators": []
        },
        {
          "name": "extract_dependencies",
          "docstring": "Extract module-level imports.",
          "line_range": null,
          "parameters": [
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module in a single pass.",
          "line_range": null,
          "parameters": [
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with filtering.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes",
            "goals_file"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "Extract function calls and module dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "load_goals": [
          "open",
          "line.startswith",
          "os.unlink",
          "tempfile.NamedTemporaryFile",
          "temp.write",
          "temp.flush",
          "line.strip",
          "subprocess.run",
          "logging.error"
        ],
        "file_hash": [
          "open",
          "hashlib.sha256",
          "f.read",
          "logging.error"
        ],
        "extract_comments": [
          "comments.append",
          "open",
          "tokenize.tokenize",
          "logging.error"
        ],
        "compute_file_metadata": [
          "open",
          "file_hash",
          "os.stat",
          "sum",
          "logging.error"
        ],
        "infer_category": [
          "path.lower",
          "any"
        ],
        "get_signature": [],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "self.generic_visit",
          "isinstance"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "extract_dependencies": [
          "dependencies.update",
          "sorted",
          "ast.walk",
          "isinstance",
          "set",
          "dependencies.add"
        ],
        "analyze_module": [
          "infer_category",
          "visitor.visit",
          "ast.parse",
          "classes.append",
          "str",
          "get_signature",
          "open",
          "CallVisitor",
          "getattr",
          "extract_comments",
          "methods.append",
          "functions.append",
          "extract_dependencies",
          "logging.error",
          "f.read",
          "ast.get_docstring",
          "sorted",
          "compute_file_metadata",
          "hashlib.sha256",
          "isinstance",
          "source.splitlines"
        ],
        "build_toc_and_modules": [
          "fnmatch.fnmatch",
          "toc.append",
          "sum",
          "dirpath.split",
          "exclude_patterns.extend",
          "analyze_module",
          "len",
          "any",
          "modules.append",
          "os.walk",
          "load_gitignore"
        ],
        "generate_json": [
          "build_toc_and_modules",
          "load_goals",
          "len"
        ],
        "main": [
          "open",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "json.dump",
          "parser.add_argument",
          "logging.info",
          "generate_json",
          "logging.error"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "argparse",
        "ast",
        "datetime",
        "fnmatch",
        "hashlib",
        "json",
        "logging",
        "os",
        "subprocess",
        "tempfile",
        "tokenize",
        "typing"
      ],
      "hash": null,
      "artifact_id": "3b4dd411-c4ef-4e37-b59e-aa58527d4321"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_validator",
      "path": "temp_workfiles/unsorted_mess/dump/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": null,
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": null,
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "json.load",
          "open",
          "json_file.exists",
          "schema_file.exists",
          "Path",
          "validate",
          "logging.info",
          "str",
          "logging.error"
        ],
        "validate_directory": [
          "str",
          "json_file.match",
          "Path",
          "any",
          "validate_struct_json"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "43f855f8-8d05-444a-a6c4-541aecebf58d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.validate_json",
      "path": "temp_workfiles/unsorted_mess/dump/validate_json.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "open",
          "print",
          "validate",
          "str",
          "json.load"
        ]
      },
      "dependencies": [
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "00608d1c-40c9-4d6a-9bbc-c9fbb56d34d8"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore, logging loaded patterns.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_goals",
          "docstring": "Load goals from semicolon-separated string, file, or interactive editor.",
          "line_range": null,
          "parameters": [
            "goals_input"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "logging.warning",
          "open",
          "line.startswith",
          "len",
          "line.strip",
          "logging.info",
          "logging.error"
        ],
        "load_goals": [
          "open",
          "line.startswith",
          "os.unlink",
          "tempfile.NamedTemporaryFile",
          "temp.write",
          "len",
          "temp.flush",
          "g.strip",
          "line.strip",
          "logging.info",
          "subprocess.run",
          "goals_input.split",
          "logging.error"
        ],
        "main": [
          "logging.info",
          "logging.warning",
          "open",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "json.dump",
          "load_goals",
          "parser.add_argument",
          "include_patterns.extend",
          "load_gitignore",
          "generate_json",
          "language_patterns.get",
          "logging.error"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "argparse",
        "generate_json",
        "generators.json_generator",
        "logging",
        "os",
        "subprocess",
        "tempfile",
        "typing"
      ],
      "hash": null,
      "artifact_id": "e41cb8a7-d9c7-42e0-b896-0d3ced8fa949"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.clean.internal_cleaner",
      "path": "temp_workfiles/unsorted_mess/dump/clean/internal_cleaner.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "normalize",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "record"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "normalize": [
          "record.get",
          "isinstance",
          "id.strip",
          "content.strip",
          "str"
        ]
      },
      "dependencies": [
        "collections",
        "defaultdict",
        "glob",
        "json",
        "os"
      ],
      "hash": null,
      "artifact_id": "cf9912c2-0b83-4aad-8f89-f1002de8a773"
    },
    {
      "module_id": "bak.20250522_102827.scripts.collector",
      "path": "bak/20250522_102827/scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "filtered.append",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "files.append",
          "apply_filters",
          "path.relative_to",
          "path.is_file",
          "root_dir.rglob",
          "str"
        ],
        "generate_struct": [
          "output_path.exists",
          "uuid.uuid4",
          "existing.get",
          "Path",
          "len",
          "json.dump",
          "output_path.open",
          "logger.info",
          "collect_files",
          "str",
          "json.load"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "df6e54d6-536e-4314-957d-5e4bb4eac2c0"
    },
    {
      "module_id": "bak.20250522_102827.scripts.validate_refs",
      "path": "bak/20250522_102827/scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "idea.get",
          "enumerate",
          "target_file.exists",
          "logger.error",
          "logger.warning",
          "broken_links.append",
          "Path",
          "json.dump",
          "source_file.exists",
          "logger.info",
          "json.load"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "76f4f298-f3ea-4109-87bd-221298212b07"
    },
    {
      "module_id": "bak.20250522_102827.scripts.deploy_embedded_files",
      "path": "bak/20250522_102827/scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.warning",
          "validate"
        ],
        "backup_files": [
          "shutil.copytree",
          "datetime.now",
          "logger.info",
          "target_dir.exists"
        ],
        "deploy_embedded_files": [
          "validate_json",
          "backup_files",
          "f.write",
          "logger.error",
          "EMBEDDED_FILES.get",
          "EMBEDDED_FILES.items",
          "Path",
          "json.dump",
          "target_path.open",
          "target_path.exists",
          "logger.info"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "06b80297-d006-4f28-8602-af34e64956d5"
    },
    {
      "module_id": "bak.20250522_131121.scripts.collector",
      "path": "bak/20250522_131121/scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "filtered.append",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "files.append",
          "apply_filters",
          "path.relative_to",
          "path.is_file",
          "root_dir.rglob",
          "str"
        ],
        "generate_struct": [
          "output_path.exists",
          "uuid.uuid4",
          "existing.get",
          "Path",
          "len",
          "json.dump",
          "output_path.open",
          "logger.info",
          "collect_files",
          "str",
          "json.load"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "d560360c-09bf-4d7c-83af-24406f75480e"
    },
    {
      "module_id": "bak.20250522_131121.scripts.validate_refs",
      "path": "bak/20250522_131121/scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "idea.get",
          "enumerate",
          "target_file.exists",
          "logger.error",
          "logger.warning",
          "broken_links.append",
          "Path",
          "json.dump",
          "source_file.exists",
          "logger.info",
          "json.load"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "58e594ee-1184-4bc1-98af-fb224836cf2f"
    },
    {
      "module_id": "bak.20250522_131121.scripts.deploy_embedded_files",
      "path": "bak/20250522_131121/scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.warning",
          "logger.error",
          "RefResolver",
          "validate"
        ],
        "backup_files": [
          "shutil.copytree",
          "datetime.now",
          "logger.info",
          "target_dir.exists"
        ],
        "deploy_embedded_files": [
          "validate_json",
          "backup_files",
          "f.write",
          "logger.error",
          "EMBEDDED_FILES.get",
          "Path.cwd",
          "logger.warning",
          "Path",
          "json.dump",
          "target_path.open",
          "target_path.exists",
          "logger.info"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "2151ec2f-3fc6-46c7-9fe7-e5aa9745f82a"
    },
    {
      "module_id": "tests.test_self_run",
      "path": "tests/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "select_json",
          "open",
          "json.dump",
          "str"
        ],
        "test_cache_json": [
          "cache.get_metadata",
          "open",
          "json.dump",
          "cache.cache_json",
          "cache.get_full_json",
          "cache.close",
          "str",
          "JSONCache"
        ],
        "test_attach_to_llm_request_init_json": [
          "open",
          "json.dump",
          "cache.close",
          "attach_to_llm_request",
          "str",
          "JSONCache"
        ],
        "test_attach_to_llm_request_missing_file": [
          "attach_to_llm_request",
          "str"
        ]
      },
      "dependencies": [
        "JSONCache",
        "attach_to_llm_request",
        "filter_json",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "select_json"
      ],
      "hash": null,
      "artifact_id": "370b25bb-db7e-4561-9516-4f3e5f9c5735"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "087d3cab-8956-4141-9327-ab576c2a5842"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "filtered.append",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "files.append",
          "apply_filters",
          "path.relative_to",
          "path.is_file",
          "root_dir.rglob",
          "str"
        ],
        "generate_struct": [
          "output_path.exists",
          "uuid.uuid4",
          "existing.get",
          "Path",
          "len",
          "json.dump",
          "output_path.open",
          "logger.info",
          "collect_files",
          "str",
          "json.load"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "82fcacc4-de06-444e-a76c-1663dc95f98f"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.",
      "functions": [
        {
          "name": "detect_project_changes",
          "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_struct_json",
          "docstring": "Create a backup of existing struct.json.",
          "line_range": null,
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_struct_json",
          "docstring": "Validate generated struct.json for basic structure.",
          "line_range": null,
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "update_struct_json",
          "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful",
          "line_range": null,
          "parameters": [
            "root_dir",
            "struct_path",
            "force",
            "config_override"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for auto-update script.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_config": [],
        "load_gitignore": [],
        "generate_json": [
          "ImportError"
        ],
        "detect_project_changes": [
          "logger.warning",
          "Path",
          "logger.info",
          "subprocess.run",
          "file_path.stat"
        ],
        "backup_struct_json": [
          "datetime.now",
          "logger.error",
          "Path",
          "subprocess.run",
          "logger.info"
        ],
        "validate_struct_json": [
          "logger.info",
          "open",
          "logger.error",
          "json.load"
        ],
        "update_struct_json": [
          "validate_struct_json",
          "open",
          "backup_struct_json",
          "logger.error",
          "os.getcwd",
          "load_config",
          "detect_project_changes",
          "cli_config.get",
          "json.dump",
          "config.update",
          "load_gitignore",
          "generate_json",
          "subprocess.run",
          "logger.info",
          "config.get"
        ],
        "main": [
          "parser.parse_args",
          "argparse.ArgumentParser",
          "os.getcwd",
          "detect_project_changes",
          "print",
          "parser.add_argument",
          "update_struct_json",
          "logging.getLogger",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "generate_json",
        "json",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "6a515e9f-9afc-443a-89b2-e4d0a527fd5b"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "config_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "check_github_cli",
          "docstring": "Check if GitHub CLI is installed and authenticated",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "list_projects",
          "docstring": "List available GitHub Projects (via gh-projects extension)",
          "line_range": null,
          "parameters": [
            "self",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "create_project_item",
          "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
          "line_range": null,
          "parameters": [
            "self",
            "project_number",
            "title",
            "body",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_tasks_to_project",
          "docstring": "Export tasks to GitHub Project",
          "line_range": null,
          "parameters": [
            "self",
            "tasks",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_ideas_to_project",
          "docstring": "Export ideas to GitHub Project",
          "line_range": null,
          "parameters": [
            "self",
            "ideas",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "filter_data",
          "docstring": "Filter data by status and priority",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "status_filter",
            "priority_filter"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExportScript",
          "docstring": "Extended exporter with command-line interface and GitHub CLI integration",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "config_path",
                "dry_run"
              ]
            },
            {
              "name": "check_github_cli",
              "docstring": "Check if GitHub CLI is installed and authenticated",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "list_projects",
              "docstring": "List available GitHub Projects (via gh-projects extension)",
              "line_range": null,
              "parameters": [
                "self",
                "owner",
                "repo"
              ]
            },
            {
              "name": "create_project_item",
              "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
              "line_range": null,
              "parameters": [
                "self",
                "project_number",
                "title",
                "body",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_tasks_to_project",
              "docstring": "Export tasks to GitHub Project",
              "line_range": null,
              "parameters": [
                "self",
                "tasks",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_ideas_to_project",
              "docstring": "Export ideas to GitHub Project",
              "line_range": null,
              "parameters": [
                "self",
                "ideas",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "filter_data",
              "docstring": "Filter data by status and priority",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "status_filter",
                "priority_filter"
              ]
            }
          ],
          "bases": [
            "GitHubProjectsExporter"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "super"
        ],
        "check_github_cli": [
          "print",
          "self._run_gh_command"
        ],
        "list_projects": [
          "isinstance",
          "print",
          "json.loads",
          "self._run_gh_command"
        ],
        "create_project_item": [
          "output.strip",
          "print",
          "str",
          "self._run_gh_command"
        ],
        "export_tasks_to_project": [
          "self.create_project_item",
          "print",
          "self.format_task_for_github",
          "len",
          "task.get"
        ],
        "export_ideas_to_project": [
          "idea.get",
          "self.create_project_item",
          "self.format_idea_for_github",
          "print",
          "len"
        ],
        "filter_data": [
          "item.get"
        ],
        "main": [
          "parser.parse_args",
          "argparse.ArgumentParser",
          "exporter.export_tasks_to_project",
          "exporter.load_official_data",
          "GitHubProjectsExportScript",
          "print",
          "exporter.filter_data",
          "exporter.check_github_cli",
          "exporter.export_ideas_to_project",
          "parser.add_argument",
          "exporter._save_mapping",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "GitHubProjectsExporter",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "datetime",
        "json",
        "llmstruct.gh_view",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d8c86c27-d66f-4e95-8283-a68373b92ca3"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "idea.get",
          "enumerate",
          "target_file.exists",
          "logger.error",
          "logger.warning",
          "broken_links.append",
          "Path",
          "json.dump",
          "source_file.exists",
          "logger.info",
          "json.load"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "3c753e77-d164-43fb-9f0f-329177608711"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.warning",
          "logger.error",
          "RefResolver",
          "validate"
        ],
        "backup_files": [
          "shutil.copytree",
          "datetime.now",
          "logger.info",
          "target_dir.exists"
        ],
        "deploy_embedded_files": [
          "validate_json",
          "backup_files",
          "f.write",
          "logger.error",
          "EMBEDDED_FILES.get",
          "Path.cwd",
          "logger.warning",
          "Path",
          "json.dump",
          "target_path.open",
          "target_path.exists",
          "logger.info"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "e920fadd-6e8b-44ff-8978-9d24f664d000"
    }
  ]
}