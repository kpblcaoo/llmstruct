{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-05-21T23:09:56.152142Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": [],
    "stats": {
      "modules_count": 23,
      "functions_count": 80,
      "classes_count": 6,
      "call_edges_count": 310
    },
    "artifact_id": "29a67280-2ca2-478f-8845-3f93ed45c0a4",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "28caa1b8-3a67-434a-82ff-a0e936e3eb8c",
        "metadata": {}
      },
      {
        "path": ".github",
        "type": "directory",
        "artifact_id": "a435a75a-e490-442c-bb41-63d1e9c4c3ef",
        "metadata": {}
      },
      {
        "path": ".github/workflows",
        "type": "directory",
        "artifact_id": "4930c05a-28ce-49cb-98a1-4e8e24db4908",
        "metadata": {}
      },
      {
        "path": "collector.py",
        "type": "file",
        "artifact_id": "5ed4219c-b3f6-45fb-9058-388fff98cfe2",
        "metadata": {}
      },
      {
        "path": "data",
        "type": "directory",
        "artifact_id": "38cb75e3-287f-4bda-ab7e-957b2f345a9c",
        "metadata": {}
      },
      {
        "path": "data.old",
        "type": "directory",
        "artifact_id": "4803cb98-d942-4296-8b7b-47c4762153af",
        "metadata": {}
      },
      {
        "path": "docs",
        "type": "directory",
        "artifact_id": "6486907d-7cc9-4b3b-b924-9c3d6037b5dd",
        "metadata": {}
      },
      {
        "path": "docs/examples",
        "type": "directory",
        "artifact_id": "c83822bd-c3ea-4726-b5a2-f0fced6072ce",
        "metadata": {}
      },
      {
        "path": "docs/internal",
        "type": "directory",
        "artifact_id": "e518203a-8ef7-43ba-80ac-fcb2fa93d7c1",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru",
        "type": "directory",
        "artifact_id": "07bea95d-e71b-4a0f-a854-b103e863613f",
        "metadata": {}
      },
      {
        "path": "docs/ru",
        "type": "directory",
        "artifact_id": "d07fc81e-ea73-44cd-b24f-97f7427e3b41",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples",
        "type": "directory",
        "artifact_id": "ffcd99b0-55be-4c08-b8d2-074fa7081c55",
        "metadata": {}
      },
      {
        "path": "examples",
        "type": "directory",
        "artifact_id": "dee6dfce-7582-4b9b-bf96-39b00e3398e2",
        "metadata": {}
      },
      {
        "path": "examples/python_project_main.py",
        "type": "file",
        "artifact_id": "844431c2-0f25-42e5-8f82-c6dce7074afb",
        "metadata": {}
      },
      {
        "path": "examples/python_project_utils.py",
        "type": "file",
        "artifact_id": "71712bf1-f9f0-45d4-82e8-25214f47c4f8",
        "metadata": {}
      },
      {
        "path": "internal",
        "type": "directory",
        "artifact_id": "d4165df0-5e03-43f8-9dd8-8ff9baa6e03f",
        "metadata": {}
      },
      {
        "path": "schemas",
        "type": "directory",
        "artifact_id": "10955cca-dd8d-41f4-af12-684e69b6f34f",
        "metadata": {}
      },
      {
        "path": "src",
        "type": "directory",
        "artifact_id": "a484d5e9-d98c-4acc-86b8-7210fb4578b7",
        "metadata": {}
      },
      {
        "path": "src/llmstruct",
        "type": "directory",
        "artifact_id": "77468000-3208-49c4-898d-36a10fd4823b",
        "metadata": {}
      },
      {
        "path": "src/llmstruct.egg-info",
        "type": "directory",
        "artifact_id": "d9ac2482-bb40-416a-b68b-1e384e3cc3c6",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__init__.py",
        "type": "file",
        "artifact_id": "1bc8d319-d6e6-43c8-8153-18596947db8d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__main__.py",
        "type": "file",
        "artifact_id": "edd4566e-27c0-4254-8333-273441af4b38",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cache.py",
        "type": "file",
        "artifact_id": "a41cc6ef-c6d4-4ab1-afcf-aee7d70eba64",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli.py",
        "type": "file",
        "artifact_id": "d363a4d1-fa4e-4078-bd2a-e857a3e3c1ab",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators",
        "type": "directory",
        "artifact_id": "0975ec65-c2c4-4a04-8af6-50b6f36891bd",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/__init__.py",
        "type": "file",
        "artifact_id": "0b476341-0835-4488-86e3-98909759d851",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/json_generator.py",
        "type": "file",
        "artifact_id": "e54b73eb-c9cc-4521-bcff-ee2e9dc8abd1",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/grok.py",
        "type": "file",
        "artifact_id": "af351e1a-675e-40ed-8a00-39f801c41a91",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/json_selector.py",
        "type": "file",
        "artifact_id": "4e7a5b5c-a213-4c78-a68e-969cc18eb2f7",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/llm_client.py",
        "type": "file",
        "artifact_id": "3415e996-7318-47f2-9b35-95d7dd574039",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers",
        "type": "directory",
        "artifact_id": "e35ed66c-26bb-464e-9d38-5cf8b241ec10",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/__init__.py",
        "type": "file",
        "artifact_id": "d345f404-c9fa-445c-900a-4834432675fa",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/javascript_parser.py",
        "type": "file",
        "artifact_id": "99256690-07bd-4d13-8921-ba49bb508d29",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/python_parser.py",
        "type": "file",
        "artifact_id": "4984455a-69bb-4e63-9505-b8842cf4cec3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/self_run.py",
        "type": "file",
        "artifact_id": "7cb7007f-63fc-4d9f-a531-289ce7994a71",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates",
        "type": "directory",
        "artifact_id": "6a969f13-4273-4dcb-abc5-91409738f07a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates/__init__.py",
        "type": "file",
        "artifact_id": "b4035123-9b92-483a-944b-03e66227c602",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators",
        "type": "directory",
        "artifact_id": "4b17c7a2-d50b-4070-a6d6-b1c4b7643a4c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/__init__.py",
        "type": "file",
        "artifact_id": "329f9fb7-c6b6-4f07-9f47-bc8daf09caf8",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/json_validator.py",
        "type": "file",
        "artifact_id": "5a36ed23-3940-488e-b228-c14dc9d88b11",
        "metadata": {}
      },
      {
        "path": "test_efficiency.py",
        "type": "file",
        "artifact_id": "05067715-77a3-4a5e-8259-2e7607731e8d",
        "metadata": {}
      },
      {
        "path": "tests",
        "type": "directory",
        "artifact_id": "82f3f874-30b3-46ff-a269-0b64d43c6a93",
        "metadata": {}
      },
      {
        "path": "tests/__init__.py",
        "type": "file",
        "artifact_id": "ac2891b0-4015-422e-a089-42e3a4506250",
        "metadata": {}
      },
      {
        "path": "tests/test_self_run.py",
        "type": "file",
        "artifact_id": "cc0bd200-3d42-4699-b9a3-9dacfdf82e05",
        "metadata": {}
      },
      {
        "path": "tmp",
        "type": "directory",
        "artifact_id": "fb17aea6-447e-438d-9484-60858e0fe237",
        "metadata": {}
      },
      {
        "path": "verify_llm_response.py",
        "type": "file",
        "artifact_id": "b64a7120-9446-40af-82da-351f433df011",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "test_efficiency",
      "path": "test_efficiency.py",
      "category": "test",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "2d044c3b-57cf-4140-b54f-327d4c0f9443"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "7dcf8e9d-36cd-4bdd-b0c3-a5ca5e35d359"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "46e172a0-f208-4cfb-899c-c8328d76a31d"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project.",
      "artifact_id": "6d5c6b49-ee5b-464e-898b-68cedae7c2f8"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project.",
      "artifact_id": "0d43dc09-281f-4e5b-af4c-7f030c42f0f0"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "5aeefb5a-29ca-438b-877e-6aacf6e141c8"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "a9e8b744-1c7a-4f16-9a9c-740b3fe4823e"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "f934efc8-7f84-4fc6-8f08-00388dffe10e"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "eae52692-aa95-434a-b536-55dcc9b675a1"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "14cfe3a6-209e-4b3f-949f-652c88c42e78"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "74d9ed29-539b-45ab-bef6-d057fbcebde4"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "e8de98cf-80f4-453f-9f2d-6a6446fddd18"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "96bed95f-e2e5-4d58-8e41-5a8d4407830d"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "182a8ac0-dc90-47a9-96ce-28ee3655cf2b"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "9f5ef397-90e2-48eb-a928-619d1516f204"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "",
      "artifact_id": "1eb1a0ce-869a-4b5a-98cd-575418c1c21c"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "4daffe0e-328d-4ddf-b9c8-4f11cc111df1"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "f1e11392-7325-4439-ba4c-8e984353fad2"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "fbdd40a6-4fdb-483c-b115-80592882de8f"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "30dea2b8-a899-45b6-916f-c17543e949c7"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "5bb19d31-3796-4fa1-badc-3b18f437b0dd"
    },
    {
      "module_id": "tests.test_self_run",
      "path": "tests/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "71c2b7b0-5bfa-4836-aea1-9f5a96170c34"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "artifact_id": "20ddafb2-6faa-4f4a-9cb3-80340374b855"
    }
  ],
  "modules": [
    {
      "module_id": "test_efficiency",
      "path": "test_efficiency.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_local_address",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "check_ollama",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url"
          ],
          "decorators": []
        },
        {
          "name": "optimize_prompt",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "struct_data",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "check_llmstruct_cli",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_grok",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_key",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "is_local_address": [
          "ipaddress.ip_address",
          "urlparse"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "check_ollama": [
          "requests.get",
          "response.json",
          "api_url.replace",
          "str"
        ],
        "optimize_prompt": [
          "len",
          "struct_data.split",
          "print"
        ],
        "run_llm_request": [
          "session.post",
          "requests.Session",
          "type",
          "is_local_address",
          "response.raise_for_status",
          "get_system_metrics",
          "time.perf_counter",
          "response.json",
          "print",
          "len"
        ],
        "check_llmstruct_cli": [
          "shutil.which"
        ],
        "test_with_llmstruct": [
          "f.read",
          "check_llmstruct_cli",
          "target_path.exists",
          "optimize_prompt",
          "run_llm_request",
          "Path",
          "json.dump",
          "FileNotFoundError",
          "open",
          "subprocess.run",
          "str"
        ],
        "test_without_llmstruct": [
          "optimize_prompt",
          "run_llm_request",
          "Path",
          "open",
          "f.read"
        ],
        "test_with_grok": [
          "f.read",
          "target_path.exists",
          "optimize_prompt",
          "Path",
          "json.dump",
          "test_grok",
          "open",
          "FileNotFoundError"
        ],
        "evaluate_accuracy": [
          "len",
          "sum",
          "response_text.lower"
        ],
        "main": [
          "setup_proxy",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "parser.add_argument",
          "check_llmstruct_cli",
          "test_with_llmstruct",
          "evaluate_accuracy",
          "test_with_grok",
          "json.dump",
          "test_without_llmstruct",
          "print",
          "range",
          "open",
          "check_ollama",
          "str"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "ipaddress",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "shutil",
        "src.llmstruct.grok",
        "subprocess",
        "test_grok",
        "time",
        "urllib.parse",
        "urlparse"
      ],
      "hash": null,
      "artifact_id": "2d044c3b-57cf-4140-b54f-327d4c0f9443"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_text_file",
          "docstring": "Check if file is likely a text file based on extension.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_path.exists",
          "Path",
          "gitignore_parser.parse_gitignore"
        ],
        "is_text_file": [],
        "collect_project": [
          "root_dir.rglob",
          "doc_files.items",
          "len",
          "gitignore",
          "logger.warning",
          "Path",
          "file_path.is_file",
          "is_text_file",
          "json.dump",
          "load_gitignore",
          "logger.error",
          "any",
          "open",
          "f.read",
          "logger.info",
          "str"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "7dcf8e9d-36cd-4bdd-b0c3-a5ca5e35d359"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json_file",
          "docstring": "Load a JSON file and return its contents.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_with_struct",
          "docstring": "Verify llm_response.json against struct.json.",
          "line_range": null,
          "parameters": [
            "response_text",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_without_struct",
          "docstring": "Verify llm_response.json based on LLMstruct principles.",
          "line_range": null,
          "parameters": [
            "response_text"
          ],
          "decorators": []
        },
        {
          "name": "generate_metrics",
          "docstring": "Generate metrics for the response per EXT-004.",
          "line_range": null,
          "parameters": [
            "response_data",
            "server_log"
          ],
          "decorators": []
        },
        {
          "name": "update_tasks_json",
          "docstring": "Append a new task to tasks.json.",
          "line_range": null,
          "parameters": [
            "tasks_file",
            "new_task"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json_file": [
          "open",
          "logging.error",
          "json.load"
        ],
        "verify_response_with_struct": [
          "e.startswith",
          "logging.error",
          "expected_goals.issubset",
          "expected_files.issubset",
          "set",
          "expected_extensions.issubset",
          "logging.info",
          "re.findall",
          "struct_data.get"
        ],
        "verify_response_without_struct": [
          "logging.error",
          "expected_goals.issubset",
          "expected_files.issubset",
          "set",
          "expected_extensions.issubset",
          "logging.info",
          "response_text.lower",
          "principle.lower",
          "re.findall"
        ],
        "generate_metrics": [
          "re.findall",
          "len",
          "datetime.utcnow",
          "server_log.get",
          "response_text.split"
        ],
        "update_tasks_json": [
          "tasks.get",
          "logging.info",
          "json.dump",
          "load_json_file",
          "open"
        ],
        "main": [
          "generate_metrics",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "parser.add_argument",
          "logging.info",
          "verify_response_without_struct",
          "json.dump",
          "load_json_file",
          "update_tasks_json",
          "open",
          "verify_response_with_struct"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "argparse",
        "datetime",
        "json",
        "logging",
        "os",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "46e172a0-f208-4cfb-899c-c8328d76a31d"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": null,
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "6d5c6b49-ee5b-464e-898b-68cedae7c2f8"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": null,
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "utils.helper",
          "print"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": null,
      "artifact_id": "0d43dc09-281f-4e5b-af4c-7f030c42f0f0"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "len",
          "response.json",
          "prompt.split",
          "response.raise_for_status"
        ],
        "test_grok": [
          "GrokClient",
          "time.perf_counter",
          "client.generate"
        ]
      },
      "dependencies": [
        "os",
        "requests"
      ],
      "hash": null,
      "artifact_id": "5aeefb5a-29ca-438b-877e-6aacf6e141c8"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "LLMClient",
        "llm_client"
      ],
      "hash": null,
      "artifact_id": "a9e8b744-1c7a-4f16-9a9c-740b3fe4823e"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "LLMClient",
        "llm_client",
        "llmstruct.cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "f934efc8-7f84-4fc6-8f08-00388dffe10e"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": null,
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": null,
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getenv",
          "logging.info",
          "int"
        ],
        "query": [
          "logging.error",
          "json.load",
          "json.dumps",
          "logging.info",
          "asyncio.sleep",
          "Path",
          "logging.warning",
          "self._query_anthropic",
          "self._query_ollama",
          "self._query_hybrid",
          "range",
          "self._query_grok"
        ],
        "_query_grok": [
          "session.post",
          "logging.error",
          "logging.info",
          "aiohttp.ClientSession",
          "result.get",
          "response.json"
        ],
        "_query_anthropic": [
          "session.post",
          "logging.error",
          "logging.info",
          "aiohttp.ClientSession",
          "result.get",
          "response.json"
        ],
        "_query_ollama": [
          "session.post",
          "logging.error",
          "logging.info",
          "logging.debug",
          "aiohttp.ClientSession",
          "result.get",
          "response.json"
        ],
        "_query_hybrid": [
          "isinstance",
          "asyncio.gather",
          "logging.info",
          "self._query_anthropic",
          "self._query_ollama",
          "len",
          "self._query_grok"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "requests",
        "typing",
        "urljoin",
        "urllib.parse"
      ],
      "hash": null,
      "artifact_id": "eae52692-aa95-434a-b536-55dcc9b675a1"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": null,
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": null,
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "sqlite3.connect",
          "self.create_tables"
        ],
        "create_tables": [],
        "cache_json": [
          "json_file.exists",
          "logging.error",
          "json.dumps",
          "logging.info",
          "Path",
          "hashlib.sha256",
          "open",
          "f.read",
          "content.encode",
          "str"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "open",
          "logging.error",
          "json.load",
          "cursor.fetchone"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "14cfe3a6-209e-4b3f-949f-652c88c42e78"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "filter_json",
          "module.get",
          "any",
          "prompt.lower",
          "struct.get"
        ],
        "attach_to_llm_request": [
          "filter_json",
          "cache.get_metadata",
          "logging.error",
          "select_json",
          "filter_struct",
          "json.dumps",
          "logging.info",
          "Path",
          "cache.get_full_json",
          "context_file.exists",
          "prompt.lower",
          "cache.cache_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "74d9ed29-539b-45ab-bef6-d057fbcebde4"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": null,
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": null,
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "isinstance",
          "item.get",
          "filtered.append",
          "data.get"
        ],
        "select_json": [
          "filter_json",
          "json_file.exists",
          "logging.error",
          "filtered.append",
          "json.load",
          "Path",
          "f.seek",
          "prefix.startswith",
          "ijson.parse",
          "open",
          "path.append",
          "current_item.get"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "e8de98cf-80f4-453f-9f2d-6a6446fddd18"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "logging.error",
          "gitignore_path.exists",
          "Path",
          "line.strip",
          "gitignore_path.open",
          "line.startswith"
        ],
        "load_config": [
          "logging.error",
          "config_path.exists",
          "Path",
          "toml.load",
          "config_path\u30aa\u30fc\u30d7\u30f3"
        ],
        "read_file_content": [
          "logging.error",
          "path.is_file",
          "path.open",
          "Path",
          "f.read"
        ],
        "write_to_file": [
          "logging.error",
          "base_path.mkdir",
          "logging.info",
          "Path",
          "logging.warning",
          "f.write",
          "file_path.open",
          "file_path.exists",
          "str"
        ],
        "parse_files_from_response": [
          "files.append",
          "re.findall",
          "filename.strip",
          "content.strip"
        ],
        "interactive": [
          "re.search",
          "write_to_file",
          "Path",
          "user_input.lower",
          "load_gitignore",
          "parse",
          "cache.close",
          "scan_match.group",
          "logging.error",
          "attach_to_llm_request",
          "files_to_write.append",
          "parse_files_from_response",
          "get_folder_structure",
          "write_match.group",
          "LLMClient",
          "json.dumps",
          "write_dir.startswith",
          "sorted",
          "logging.warning",
          "client.query",
          "JSONCache",
          "input",
          "read_file_content",
          "os.listdir",
          "print"
        ],
        "parse": [
          "logging.error",
          "JSONCache",
          "logging.info",
          "Path",
          "logging.warning",
          "json.dump",
          "config.get",
          "load_config",
          "load_gitignore",
          "cache.close",
          "generate_json",
          "cache.cache_json"
        ],
        "query": [
          "LLMClient",
          "logging.error",
          "logging.info",
          "Path",
          "client.query",
          "json.dump",
          "cache.close",
          "JSONCache"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "asyncio.run",
          "review",
          "interactive",
          "dogfood",
          "context",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "dogfood_parser.add_argument",
          "review_parser.add_argument",
          "query_parser.add_argument",
          "query",
          "subparsers.add_parser",
          "context_parser.add_argument",
          "parser.add_subparsers",
          "parse",
          "interactive_parser.add_argument",
          "parse_parser.add_argument"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "96bed95f-e2e5-4d58-8e41-5a8d4407830d"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "analyze_module",
        "javascript_parser",
        "python_parser"
      ],
      "hash": null,
      "artifact_id": "182a8ac0-dc90-47a9-96ce-28ee3655cf2b"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "open",
          "f.read",
          "hashlib.sha256"
        ],
        "compute_file_metadata": [
          "open",
          "os.stat",
          "self.file_hash",
          "sum"
        ],
        "parse_module": [
          "self.compute_file_metadata",
          "open",
          "f.read",
          "esprima.parseModule",
          "str"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9f5ef397-90e2-48eb-a928-619d1516f204"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data.",
          "line_range": null,
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_AsyncFunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "compute_file_hash": [
          "open",
          "f.read",
          "logging.error",
          "hashlib.sha256"
        ],
        "analyze_module": [
          "classes.append",
          "isinstance",
          "logging.error",
          "str",
          "visitor.visit",
          "list",
          "compute_file_hash",
          "ast.parse",
          "Path",
          "sorted",
          "ast.get_docstring",
          "infer_category",
          "ast.walk",
          "ast.unparse",
          "open",
          "f.read",
          "functions.append",
          "CallVisitor"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "1eb1a0ce-869a-4b5a-98cd-575418c1c21c"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "4daffe0e-328d-4ddf-b9c8-4f11cc111df1"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "f1e11392-7325-4439-ba4c-8e984353fad2"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": null,
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": null,
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "json_file.exists",
          "logging.error",
          "json.load",
          "logging.info",
          "Path",
          "validate",
          "schema_file.exists",
          "open",
          "str"
        ],
        "validate_directory": [
          "validate_struct_json",
          "Path",
          "json_file.match",
          "any",
          "str"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "fbdd40a6-4fdb-483c-b115-80592882de8f"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "os.walk",
          "file_path.relative_to",
          "set",
          "structure.append",
          "Path",
          "sorted",
          "file_path.match",
          "p.endswith",
          "p.rstrip",
          "any",
          "uuid.uuid4",
          "str"
        ],
        "build_toc_and_modules": [
          "modules.append",
          "len",
          "toc.append",
          "set",
          "Path",
          "p.endswith",
          "analyze_module",
          "p.rstrip",
          "any",
          "uuid.uuid4",
          "str",
          "f.match"
        ],
        "generate_json": [
          "list",
          "set",
          "build_toc_and_modules",
          "Path",
          "get_folder_structure",
          "sum",
          "len",
          "uuid.uuid4",
          "str"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "30dea2b8-a899-45b6-916f-c17543e949c7"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "5bb19d31-3796-4fa1-badc-3b18f437b0dd"
    },
    {
      "module_id": "tests.test_self_run",
      "path": "tests/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "json.dump",
          "open",
          "str",
          "select_json"
        ],
        "test_cache_json": [
          "cache.get_metadata",
          "cache.get_full_json",
          "json.dump",
          "cache.close",
          "open",
          "JSONCache",
          "cache.cache_json",
          "str"
        ],
        "test_attach_to_llm_request_init_json": [
          "attach_to_llm_request",
          "json.dump",
          "cache.close",
          "open",
          "JSONCache",
          "str"
        ],
        "test_attach_to_llm_request_missing_file": [
          "attach_to_llm_request",
          "str"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "attach_to_llm_request",
        "filter_json",
        "filter_struct",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "pathlib",
        "pytest",
        "select_json"
      ],
      "hash": null,
      "artifact_id": "71c2b7b0-5bfa-4836-aea1-9f5a96170c34"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "20ddafb2-6faa-4f4a-9cb3-80340374b855"
    }
  ]
}