{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-05-31T10:06:39.181681Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": {
      "goals": [
        "Create universal JSON format for codebase structure (modules, functions, classes, calls, metadata)",
        "Ensure extensibility for new languages and entity types",
        "Develop modular, plugin-based parsers for new languages",
        "Maintain an open, RFC-style documented format",
        "Integrate with LLMs by generating and attaching JSON structure to queries"
      ]
    },
    "stats": {
      "modules_count": 129,
      "functions_count": 1294,
      "classes_count": 139,
      "call_edges_count": 3605
    },
    "artifact_id": "a5549110-7e5d-4298-a4b0-dbd4c4a5e81b",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "c30b459c-5211-49e2-ba2a-b5cdf4b03f81",
        "metadata": {}
      },
      {
        "path": "AI_CLI_INSTRUCTIONS.md",
        "type": "file",
        "artifact_id": "0521d730-888e-496e-b20e-5e71cd510a0a",
        "metadata": {}
      },
      {
        "path": "AI_INTEGRATION_SETUP_GUIDE.md",
        "type": "file",
        "artifact_id": "4416b72d-14c2-4017-a753-c671ae983d2e",
        "metadata": {}
      },
      {
        "path": "AI_TESTING_INSTRUCTIONS.md",
        "type": "file",
        "artifact_id": "07651e42-61cf-4c14-88fe-3cf54f6e569b",
        "metadata": {}
      },
      {
        "path": "AI_VSCODE_INSTRUCTIONS.md",
        "type": "file",
        "artifact_id": "a752cd3c-dca9-41e7-bd11-c0ebddcac750",
        "metadata": {}
      },
      {
        "path": "BOT_FUNCTIONALITY_REPORT.md",
        "type": "file",
        "artifact_id": "04edb81f-7219-4f6c-88ca-aaa5c25ae93a",
        "metadata": {}
      },
      {
        "path": "CHANGELOG.md",
        "type": "file",
        "artifact_id": "cc6c501a-84b1-4d0c-b1c8-7fc9a2b4504a",
        "metadata": {}
      },
      {
        "path": "CLEAN_COMMIT_MESSAGE.md",
        "type": "file",
        "artifact_id": "a5b935f2-2eae-4285-bbc5-987822664f0a",
        "metadata": {}
      },
      {
        "path": "CLEAN_CONTEXT_INIT.md",
        "type": "file",
        "artifact_id": "860ec21b-9363-4054-902e-121fcf0c10e8",
        "metadata": {}
      },
      {
        "path": "COMMIT_MESSAGE.md",
        "type": "file",
        "artifact_id": "35168f17-b924-46c6-94d2-f7f9190a60be",
        "metadata": {}
      },
      {
        "path": "COMPREHENSIVE_PROJECT_OVERVIEW.md",
        "type": "file",
        "artifact_id": "917b14b0-c9de-4da4-b928-2ec71b63efd9",
        "metadata": {}
      },
      {
        "path": "CRITICAL_SESSION_STATE_2025-05-28.md",
        "type": "file",
        "artifact_id": "89d09c5e-bd82-4fdc-8504-c226d38ded28",
        "metadata": {}
      },
      {
        "path": "CURSOR_AI_EXAMPLES.md",
        "type": "file",
        "artifact_id": "3fb47681-81d9-47e2-9e76-74c8e45018e0",
        "metadata": {}
      },
      {
        "path": "CURSOR_EVALUATION_PLAN.md",
        "type": "file",
        "artifact_id": "343e8523-2db8-4488-a39d-d2d4c33762c8",
        "metadata": {}
      },
      {
        "path": "FINAL_ARCHITECTURE_STRATEGY.md",
        "type": "file",
        "artifact_id": "b514cd0b-4496-48d4-b1a5-8b451038e9c6",
        "metadata": {}
      },
      {
        "path": "FINAL_CLEANUP_REPORT.md",
        "type": "file",
        "artifact_id": "cb6cb9ee-ac9c-47c5-b325-0396f1ef4b1b",
        "metadata": {}
      },
      {
        "path": "GITHUB_PROJECTS_README.md",
        "type": "file",
        "artifact_id": "d744e5cf-b78a-4a0a-ac03-9dbf4b95ee3d",
        "metadata": {}
      },
      {
        "path": "GROK_REVIEW_REQUEST.md",
        "type": "file",
        "artifact_id": "12b1a42c-7fea-4c8e-88ea-3a48411cfe7e",
        "metadata": {}
      },
      {
        "path": "IDEAS_TASKS_ORGANIZATION_PLAN.md",
        "type": "file",
        "artifact_id": "66ce9a15-39a0-4ca9-ac5d-546351bb883e",
        "metadata": {}
      },
      {
        "path": "LLM_CONTEXT_CAPABILITY_TESTING_COMPLETION_REPORT.md",
        "type": "file",
        "artifact_id": "ed4dca8a-f613-4db9-9cc9-22bcb8089517",
        "metadata": {}
      },
      {
        "path": "LLM_CONTEXT_CAPABILITY_TESTING_PLAN.md",
        "type": "file",
        "artifact_id": "b8738235-222c-4014-ab4e-8b7fc8ed92e4",
        "metadata": {}
      },
      {
        "path": "MEGAPROJECT_PR_DESCRIPTION.md",
        "type": "file",
        "artifact_id": "f8e225fb-1abf-412c-8755-2afc826928c2",
        "metadata": {}
      },
      {
        "path": "META_SESSION_AI_IMPLEMENTATION.md",
        "type": "file",
        "artifact_id": "513cc7ee-1146-41e3-b10f-8e3e98b80dc0",
        "metadata": {}
      },
      {
        "path": "META_SESSION_PLAN.md",
        "type": "file",
        "artifact_id": "36acd604-7b48-444d-ba7b-569c5a7458d9",
        "metadata": {}
      },
      {
        "path": "META_WORKING_NOTE.md",
        "type": "file",
        "artifact_id": "035427ec-4daf-455f-8cac-b1eaa49642a7",
        "metadata": {}
      },
      {
        "path": "MODULAR_CLI_COMPLETION_REPORT.md",
        "type": "file",
        "artifact_id": "d394e263-847a-4e68-921d-2ae75deddf5a",
        "metadata": {}
      },
      {
        "path": "MODULE_ANALYSIS_SYSTEM_GUIDE.md",
        "type": "file",
        "artifact_id": "53ce2044-7a52-4203-a86c-d04850ff3bd3",
        "metadata": {}
      },
      {
        "path": "PR_DESCRIPTION.md",
        "type": "file",
        "artifact_id": "509a5045-f777-438a-a1de-5dbac0f6a6e2",
        "metadata": {}
      },
      {
        "path": "PR_SUMMARY.md",
        "type": "file",
        "artifact_id": "6170841c-f0e0-4377-9661-01f9f9b00834",
        "metadata": {}
      },
      {
        "path": "QUICK_START.md",
        "type": "file",
        "artifact_id": "bf2a9c5a-fdbe-452c-9b31-04741560c5c1",
        "metadata": {}
      },
      {
        "path": "README.md",
        "type": "file",
        "artifact_id": "643ca854-0479-4476-9098-f9e59af75229",
        "metadata": {}
      },
      {
        "path": "README_GITHUB_ROLLOUT.md",
        "type": "file",
        "artifact_id": "a8afd6ea-415e-4dc4-afc6-b1c252aa6d40",
        "metadata": {}
      },
      {
        "path": "SEAMLESS_AI_INTEGRATION_PLAN.md",
        "type": "file",
        "artifact_id": "b848c7f8-10b4-4500-8740-afcc8c50f6f5",
        "metadata": {}
      },
      {
        "path": "SECURITY_IMPLEMENTATION_SUMMARY.md",
        "type": "file",
        "artifact_id": "f0a900ad-aed1-45f5-87d8-e2dc028829a6",
        "metadata": {}
      },
      {
        "path": "SESSION_INTEGRATION_REPORT.md",
        "type": "file",
        "artifact_id": "2ea17a13-9d1c-418b-9815-f4133981992e",
        "metadata": {}
      },
      {
        "path": "SESSION_MANAGEMENT_GUIDE.md",
        "type": "file",
        "artifact_id": "a8641120-8787-410b-a98d-ab74b9d158c8",
        "metadata": {}
      },
      {
        "path": "SESSION_TASKS.md",
        "type": "file",
        "artifact_id": "7ae56551-b778-46e1-b1b8-adf570612d5f",
        "metadata": {}
      },
      {
        "path": "STRATEGIC_ROADMAP_VISION_2025-05-29.md",
        "type": "file",
        "artifact_id": "8b6e6ed7-4dc6-47bc-b604-1fd0db05b204",
        "metadata": {}
      },
      {
        "path": "SYSTEM_READY_REPORT.md",
        "type": "file",
        "artifact_id": "8e2a1b13-a217-4df4-b630-05683fbf8d34",
        "metadata": {}
      },
      {
        "path": "TECHNICAL_ROADMAP.md",
        "type": "file",
        "artifact_id": "023c7083-d03e-4486-92de-cdf0d83b9ac7",
        "metadata": {}
      },
      {
        "path": "UNKNOWN.egg-info",
        "type": "directory",
        "artifact_id": "7f24514f-2064-4490-8416-6c2399b6ad8d",
        "metadata": {}
      },
      {
        "path": "WORKFLOW_CURSOR_INTEGRATION_REPORT.md",
        "type": "file",
        "artifact_id": "bcf53aa7-2b6a-4ae3-88b7-5e02ddd9ef56",
        "metadata": {}
      },
      {
        "path": "anthropic_version.json",
        "type": "file",
        "artifact_id": "154cd9dc-9768-421a-8ce4-bc8579a6372b",
        "metadata": {}
      },
      {
        "path": "archive",
        "type": "directory",
        "artifact_id": "396adf7e-ac40-424b-ba24-a83b5c0643a9",
        "metadata": {}
      },
      {
        "path": "archive/telegram_bots",
        "type": "directory",
        "artifact_id": "97551a37-0215-4861-8c46-7e973783b224",
        "metadata": {}
      },
      {
        "path": "archive/telegram_bots/OLLAMA_API_BOT_README.md",
        "type": "file",
        "artifact_id": "ae189a01-7491-44d0-9cae-7f8c690abb2e",
        "metadata": {}
      },
      {
        "path": "archive/telegram_bots/OLLAMA_BOT_README.md",
        "type": "file",
        "artifact_id": "a75fd506-78b6-48ad-88a8-285db4a5f289",
        "metadata": {}
      },
      {
        "path": "archive/telegram_bots/chat_bot_enhanced.py",
        "type": "file",
        "artifact_id": "cdbe726d-a676-40ea-a85c-b263c8e4660b",
        "metadata": {}
      },
      {
        "path": "archive/telegram_bots/cursor_reporter.py",
        "type": "file",
        "artifact_id": "dcf0d439-4b7e-4d4d-be0e-c70dea5dd0fb",
        "metadata": {}
      },
      {
        "path": "archive/telegram_bots/cursor_telegram_bridge.py",
        "type": "file",
        "artifact_id": "8e892480-2419-41c9-bfe1-9ada170e2416",
        "metadata": {}
      },
      {
        "path": "archive/telegram_bots/demo_bot_features.py",
        "type": "file",
        "artifact_id": "3c456a3a-ceb9-458e-b25d-99e57d02a265",
        "metadata": {}
      },
      {
        "path": "archive/telegram_bots/ollama_api_bot.py",
        "type": "file",
        "artifact_id": "a77b7d8d-e648-4f56-9332-4adf197760a5",
        "metadata": {}
      },
      {
        "path": "archive/telegram_bots/ollama_chat_bot.py",
        "type": "file",
        "artifact_id": "b8c59924-0538-4319-a867-887fd4494741",
        "metadata": {}
      },
      {
        "path": "archive/telegram_bots/start_api_bot.py",
        "type": "file",
        "artifact_id": "b3f1c14b-80ae-4d99-a435-6a911d3c8e20",
        "metadata": {}
      },
      {
        "path": "archive/telegram_bots/start_ollama_bot.py",
        "type": "file",
        "artifact_id": "c75fb510-9de6-4642-8e5b-c3690bcf8cd3",
        "metadata": {}
      },
      {
        "path": "archive/telegram_bots/telegram_cursor_master.py",
        "type": "file",
        "artifact_id": "da63358c-74d4-4979-9211-e861ac47fed5",
        "metadata": {}
      },
      {
        "path": "archive/telegram_experiments",
        "type": "directory",
        "artifact_id": "2832c335-378b-43fe-817e-f8eb03736a5d",
        "metadata": {}
      },
      {
        "path": "archive/telegram_experiments/ENHANCED_TELEGRAM_GUIDE.md",
        "type": "file",
        "artifact_id": "6125a19d-01e9-4f80-9034-a19dad79d540",
        "metadata": {}
      },
      {
        "path": "archive/telegram_experiments/PRODUCTION_ROADMAP.md",
        "type": "file",
        "artifact_id": "2522be22-1e70-4222-82f8-57d88ac907d6",
        "metadata": {}
      },
      {
        "path": "archive/telegram_experiments/SIMPLE_TELEGRAM_README.md",
        "type": "file",
        "artifact_id": "e1cd4fe1-d29f-4fb3-be8d-1825b626e005",
        "metadata": {}
      },
      {
        "path": "archive/telegram_experiments/TELEGRAM_REALITY_CHECK.md",
        "type": "file",
        "artifact_id": "c4538c5e-8ff6-4f7b-b110-bb06a863d0c0",
        "metadata": {}
      },
      {
        "path": "archive/telegram_experiments/api_memory_endpoints.py",
        "type": "file",
        "artifact_id": "9fa2ee0c-ddc8-4def-878d-979793c29c72",
        "metadata": {}
      },
      {
        "path": "archive/telegram_experiments/chat_bot_fastapi_enhanced.py",
        "type": "file",
        "artifact_id": "8de8a17b-60fb-48c1-a2fb-8940028d6f15",
        "metadata": {}
      },
      {
        "path": "archive/telegram_experiments/cursor_bot_messenger.py",
        "type": "file",
        "artifact_id": "7654a729-30b2-46cd-9a5a-83db7f32ffa9",
        "metadata": {}
      },
      {
        "path": "archive/telegram_experiments/cursor_integration.py",
        "type": "file",
        "artifact_id": "1ba3b1ba-c249-4bb8-a8ff-05c873765c00",
        "metadata": {}
      },
      {
        "path": "archive/telegram_experiments/cursor_simple_integration.py",
        "type": "file",
        "artifact_id": "f33d6507-e83b-486b-a50f-aeeb962c0f4e",
        "metadata": {}
      },
      {
        "path": "archive/telegram_experiments/cursor_telegram_reader.py",
        "type": "file",
        "artifact_id": "aa6bba55-681c-4eec-8105-3ea2d0a8482a",
        "metadata": {}
      },
      {
        "path": "archive/telegram_experiments/cursor_telegram_reader_enhanced.py",
        "type": "file",
        "artifact_id": "d4d2523e-000a-43d0-8d3e-eeb055be2760",
        "metadata": {}
      },
      {
        "path": "archive/telegram_experiments/dummy_work_executor.py",
        "type": "file",
        "artifact_id": "f676080b-67bf-4a9f-9045-0bd04e348219",
        "metadata": {}
      },
      {
        "path": "archive/telegram_experiments/fastapi_ollama_server.py",
        "type": "file",
        "artifact_id": "761a23f0-51b4-45a3-9046-8665b38ad9a6",
        "metadata": {}
      },
      {
        "path": "archive/telegram_experiments/send_cursor_response.py",
        "type": "file",
        "artifact_id": "d610f10f-cf45-4277-947d-337a6f8200fd",
        "metadata": {}
      },
      {
        "path": "archive/telegram_experiments/send_test_message.py",
        "type": "file",
        "artifact_id": "52396639-2f57-44f4-aacd-c0892866179d",
        "metadata": {}
      },
      {
        "path": "archive/telegram_experiments/start_simple_telegram.py",
        "type": "file",
        "artifact_id": "ab133537-e334-4298-aaae-88fc8c74788a",
        "metadata": {}
      },
      {
        "path": "auto_init_ai_system.py",
        "type": "file",
        "artifact_id": "64943065-7184-4448-bb49-5d68ec17d63d",
        "metadata": {}
      },
      {
        "path": "board_cli.py",
        "type": "file",
        "artifact_id": "2f2e495d-4346-4173-9edc-e1c10a9d8b3e",
        "metadata": {}
      },
      {
        "path": "bot_api_server.py",
        "type": "file",
        "artifact_id": "8d6f8097-1eeb-4d12-b3f4-4173361ed8ff",
        "metadata": {}
      },
      {
        "path": "bot_file_operations.py",
        "type": "file",
        "artifact_id": "6c2c19fa-6180-4084-ac31-90a2a6c84dcf",
        "metadata": {}
      },
      {
        "path": "chat_bot.py",
        "type": "file",
        "artifact_id": "afbd9b70-1a23-4b97-87c5-4b111ffcb3c3",
        "metadata": {}
      },
      {
        "path": "chat_bot_final.py",
        "type": "file",
        "artifact_id": "59ad55fe-cd51-4481-9803-c3b3221e302a",
        "metadata": {}
      },
      {
        "path": "chat_bot_working.py",
        "type": "file",
        "artifact_id": "bdbd5766-0a6c-474d-8995-f449162a475e",
        "metadata": {}
      },
      {
        "path": "collector.py",
        "type": "file",
        "artifact_id": "4d075156-179a-4636-8495-3b88e56de94c",
        "metadata": {}
      },
      {
        "path": "concept_innovative.json",
        "type": "file",
        "artifact_id": "3bc7b772-a7eb-45fb-8235-5450df309f0b",
        "metadata": {}
      },
      {
        "path": "concept_v0.3.0.json",
        "type": "file",
        "artifact_id": "78d77338-3330-4aa0-b624-9f80aa26009d",
        "metadata": {}
      },
      {
        "path": "cursor_integration_strategy.md",
        "type": "file",
        "artifact_id": "bd14f05a-4e22-4f91-b792-ba983f19ff79",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration",
        "type": "directory",
        "artifact_id": "6346cecc-005d-41a4-b87c-88b4db4f0af0",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/INSTALL.md",
        "type": "file",
        "artifact_id": "f4d422cf-5fe1-4960-b413-07e8b6a648b4",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/PACKAGE_OVERVIEW.md",
        "type": "file",
        "artifact_id": "6109dfef-a095-4031-a4ed-b5750a18cef0",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/README.md",
        "type": "file",
        "artifact_id": "608a7d5c-d31c-4b59-a162-a31f5e1e9298",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs",
        "type": "directory",
        "artifact_id": "62f59c2b-90e8-4a3b-aaf2-6e0fd25db0f5",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/CURSOR_AI_EXAMPLES.md",
        "type": "file",
        "artifact_id": "bcf81643-9d80-4086-97f9-2f18ec85b642",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/SESSION_INTEGRATION_REPORT.md",
        "type": "file",
        "artifact_id": "c4194906-143c-49f7-8d7c-f8ea627b6bae",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/SESSION_MANAGEMENT_GUIDE.md",
        "type": "file",
        "artifact_id": "8b245395-62e4-414b-8d62-764e1364d572",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/WORKFLOW_CURSOR_INTEGRATION_REPORT.md",
        "type": "file",
        "artifact_id": "5442efad-63af-452e-be31-a9281d5cbf70",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/files",
        "type": "directory",
        "artifact_id": "b3de9027-d1ff-4c60-a691-8dc61fbb14fc",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/files/auto_init_ai_system.py",
        "type": "file",
        "artifact_id": "81671f81-0c43-417f-a12f-a9eb46c76709",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/scripts",
        "type": "directory",
        "artifact_id": "6d9d2673-009e-45fb-8988-ffd429539acb",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/scripts/install_ai_integration.py",
        "type": "file",
        "artifact_id": "b9d87a9a-b80d-44aa-bec7-5c4fa72ebf28",
        "metadata": {}
      },
      {
        "path": "data",
        "type": "directory",
        "artifact_id": "91695822-7ffe-4542-817e-595b64aed20b",
        "metadata": {}
      },
      {
        "path": "data/ai_diagnostics_report.json",
        "type": "file",
        "artifact_id": "fd4f01f5-924c-4760-b5f9-b21cedee543c",
        "metadata": {}
      },
      {
        "path": "data/ai_integration_config.json",
        "type": "file",
        "artifact_id": "7064ced1-9188-440a-beca-28930f504bd9",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness",
        "type": "directory",
        "artifact_id": "f9707c47-4a6a-4822-9a0e-937108089870",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/ai_behavior_analysis.json",
        "type": "file",
        "artifact_id": "bcbeed5f-07fe-4915-839a-7c67ee29638f",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/ai_usage_events.json",
        "type": "file",
        "artifact_id": "a5ec100a-5e97-44ee-b293-2dd1935cb377",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/capability_cache.json",
        "type": "file",
        "artifact_id": "5d159e07-73e2-4d90-a4eb-23fc59cad0de",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/search_cache.json",
        "type": "file",
        "artifact_id": "f2bb0315-9b81-4569-af20-1028cae46a6d",
        "metadata": {}
      },
      {
        "path": "data/artifacts_index.json",
        "type": "file",
        "artifact_id": "843807d0-e225-4880-9626-f3ec619de4cb",
        "metadata": {}
      },
      {
        "path": "data/chat_sessions",
        "type": "directory",
        "artifact_id": "537aa380-b970-49a8-8e5a-d0e41de966b4",
        "metadata": {}
      },
      {
        "path": "data/chat_sessions/telegram-bot-session.json",
        "type": "file",
        "artifact_id": "cfb72a96-40d7-4377-9e78-5b67e8496055",
        "metadata": {}
      },
      {
        "path": "data/chat_sessions/test-session.json",
        "type": "file",
        "artifact_id": "ef91ee92-fe90-46f5-abeb-39b12e926c88",
        "metadata": {}
      },
      {
        "path": "data/chat_sessions/tg_-4938821563_306157325.json",
        "type": "file",
        "artifact_id": "3afae077-b5d6-4346-8ba0-e259db008902",
        "metadata": {}
      },
      {
        "path": "data/cli.json",
        "type": "file",
        "artifact_id": "6460ed0c-4e69-427b-978b-a902872e8bfe",
        "metadata": {}
      },
      {
        "path": "data/cli_enhanced.json",
        "type": "file",
        "artifact_id": "b4240b0a-123b-4cf9-92b7-607e8c1a2e84",
        "metadata": {}
      },
      {
        "path": "data/cli_queue.json",
        "type": "file",
        "artifact_id": "04bc4672-2a2b-4f89-abf5-d324f9866b4c",
        "metadata": {}
      },
      {
        "path": "data/cli_queue_enhanced.json",
        "type": "file",
        "artifact_id": "11bf869c-ef2a-4033-b4b5-631103ff4a33",
        "metadata": {}
      },
      {
        "path": "data/conflicts.json",
        "type": "file",
        "artifact_id": "b9019edb-7e70-42f9-8f89-fa08ce60e0f5",
        "metadata": {}
      },
      {
        "path": "data/context_orchestration.json",
        "type": "file",
        "artifact_id": "42ad73e9-4b10-45f1-809c-e726388b110f",
        "metadata": {}
      },
      {
        "path": "data/copilot",
        "type": "directory",
        "artifact_id": "79f38780-ebb1-4f73-9847-9fefe2f2f63d",
        "metadata": {}
      },
      {
        "path": "data/copilot/ai_constraints.json",
        "type": "file",
        "artifact_id": "e5329a9b-b8a6-4c3f-a623-ceaf1dd1e37f",
        "metadata": {}
      },
      {
        "path": "data/copilot/processing_queue.json",
        "type": "file",
        "artifact_id": "a0a41f34-f7fd-47d1-b0bb-73541c1e4105",
        "metadata": {}
      },
      {
        "path": "data/copilot/warnings.json",
        "type": "file",
        "artifact_id": "a2783f26-f176-47a3-a97b-7d9f791b81b4",
        "metadata": {}
      },
      {
        "path": "data/copilot_init.json",
        "type": "file",
        "artifact_id": "b8e4fe65-235c-419e-8b44-cebeb6a1f2bd",
        "metadata": {}
      },
      {
        "path": "data/cursor",
        "type": "directory",
        "artifact_id": "acc7527f-86d5-4ff6-a556-34fc12a12d54",
        "metadata": {}
      },
      {
        "path": "data/cursor/cursor_context_config.json",
        "type": "file",
        "artifact_id": "d303a7a8-324a-4417-b983-cf39a929193c",
        "metadata": {}
      },
      {
        "path": "data/cursor/cursor_personal_bridge.json",
        "type": "file",
        "artifact_id": "4a2d9650-2db3-4c48-a9b6-ab03e9e7ee9b",
        "metadata": {}
      },
      {
        "path": "data/cursor/cursor_session_memory.json",
        "type": "file",
        "artifact_id": "75e29feb-37e3-4cbb-b8ac-65f5ad176f9c",
        "metadata": {}
      },
      {
        "path": "data/developer_onboarding.json",
        "type": "file",
        "artifact_id": "4a6e59df-0e4b-43b5-afe7-bfdc085da3e8",
        "metadata": {}
      },
      {
        "path": "data/docs.json",
        "type": "file",
        "artifact_id": "58fd78e7-73ba-4a36-8168-4ba5294316fb",
        "metadata": {}
      },
      {
        "path": "data/gh_mapping.json",
        "type": "file",
        "artifact_id": "532789a4-7b8c-4000-a6bb-49a60855d711",
        "metadata": {}
      },
      {
        "path": "data/ideas.json",
        "type": "file",
        "artifact_id": "70935de0-4b1e-46dc-96e4-3badee8a2f69",
        "metadata": {}
      },
      {
        "path": "data/ideas_cache.json",
        "type": "file",
        "artifact_id": "860be1f5-8dac-4d1a-82df-ba039bbd2b91",
        "metadata": {}
      },
      {
        "path": "data/init.json",
        "type": "file",
        "artifact_id": "2773d6b4-6f32-4bc7-83f3-5a4815e7828b",
        "metadata": {}
      },
      {
        "path": "data/init_enhanced.json",
        "type": "file",
        "artifact_id": "ee1b8237-c08c-4569-88b8-4df8207106dc",
        "metadata": {}
      },
      {
        "path": "data/init_enhanced_ai.json",
        "type": "file",
        "artifact_id": "20e4cdae-82ac-4ab9-ad9d-60fc7b7f3365",
        "metadata": {}
      },
      {
        "path": "data/insights.json",
        "type": "file",
        "artifact_id": "e1eb4e55-4226-4bc4-ae1d-ef7b3604de82",
        "metadata": {}
      },
      {
        "path": "data/metrics.json",
        "type": "file",
        "artifact_id": "fad6023e-83b4-42b3-883e-3684647f8875",
        "metadata": {}
      },
      {
        "path": "data/ollama_api_chat",
        "type": "directory",
        "artifact_id": "97e857ba-301f-461c-b29b-92dbbcf60d22",
        "metadata": {}
      },
      {
        "path": "data/ollama_chat",
        "type": "directory",
        "artifact_id": "69036fe4-f7c9-4e8c-a31e-781672d5fe1f",
        "metadata": {}
      },
      {
        "path": "data/prs.json",
        "type": "file",
        "artifact_id": "266a2f32-17ad-411b-8b1d-ac45b5e7ddb6",
        "metadata": {}
      },
      {
        "path": "data/references.json",
        "type": "file",
        "artifact_id": "d84f5d83-90b2-4444-bd7f-9335b6ab4571",
        "metadata": {}
      },
      {
        "path": "data/sessions",
        "type": "directory",
        "artifact_id": "dbe306a2-da9a-479c-812a-e2346c43e8ef",
        "metadata": {}
      },
      {
        "path": "data/sessions/README.md",
        "type": "file",
        "artifact_id": "cf60163d-7534-4c08-86fc-f85e74abc6cc",
        "metadata": {}
      },
      {
        "path": "data/sessions/ai_sessions.json",
        "type": "file",
        "artifact_id": "1197f02b-641d-4449-aa50-fdbdbb8a097a",
        "metadata": {}
      },
      {
        "path": "data/sessions/current_session.json",
        "type": "file",
        "artifact_id": "a9bb15a2-f55a-422b-aa16-a550c8e768cd",
        "metadata": {}
      },
      {
        "path": "data/sessions/epic_tg_bot_enhancement.json",
        "type": "file",
        "artifact_id": "0dada619-6952-4aea-9bd8-ddfa7bada343",
        "metadata": {}
      },
      {
        "path": "data/sessions/epics_roadmap.json",
        "type": "file",
        "artifact_id": "d548b080-9cab-4f13-ac42-d8e406defc48",
        "metadata": {}
      },
      {
        "path": "data/sessions/worklog.json",
        "type": "file",
        "artifact_id": "180cf7f6-a67f-43ca-962c-18770400bcae",
        "metadata": {}
      },
      {
        "path": "data/tasks.json",
        "type": "file",
        "artifact_id": "1d8f455b-98ea-4eab-82ef-cd47bd877aee",
        "metadata": {}
      },
      {
        "path": "data/telegram",
        "type": "directory",
        "artifact_id": "138fdb4b-2fc0-4696-87e0-658ffe244e35",
        "metadata": {}
      },
      {
        "path": "data/telegram/bot_responses.json",
        "type": "file",
        "artifact_id": "ec499dbf-e9f9-44b5-8957-425283475ac6",
        "metadata": {}
      },
      {
        "path": "data/telegram/cursor_commands.json",
        "type": "file",
        "artifact_id": "c873ec28-68d3-403c-8b16-91cb8c3382ee",
        "metadata": {}
      },
      {
        "path": "data/telegram/master_status.json",
        "type": "file",
        "artifact_id": "a083756e-7f37-40b3-88bb-7a69195b03d4",
        "metadata": {}
      },
      {
        "path": "data/telegram/user_messages.json",
        "type": "file",
        "artifact_id": "c30abbad-a8a9-4962-83c9-70344488d025",
        "metadata": {}
      },
      {
        "path": "data/user_memory.json",
        "type": "file",
        "artifact_id": "2e6bc8f2-1817-4f30-b022-e6be71071859",
        "metadata": {}
      },
      {
        "path": "data/vision.json",
        "type": "file",
        "artifact_id": "fd3c2726-c039-479d-971f-00f0b6b48368",
        "metadata": {}
      },
      {
        "path": "data/weights.json",
        "type": "file",
        "artifact_id": "f2abb2ee-2185-43cd-8544-52ef76c5229a",
        "metadata": {}
      },
      {
        "path": "data/workflow_events.json",
        "type": "file",
        "artifact_id": "9c888d58-5741-4543-b1d7-9eee93c03eff",
        "metadata": {}
      },
      {
        "path": "data/workspace",
        "type": "directory",
        "artifact_id": "7e4ffcbd-b007-4139-8a71-6b8fed93de82",
        "metadata": {}
      },
      {
        "path": "data/workspace/git_workflow_config.json",
        "type": "file",
        "artifact_id": "b8c0b7d7-da3a-4897-b9f0-52dd340c6682",
        "metadata": {}
      },
      {
        "path": "data/workspace/workspace_state.json",
        "type": "file",
        "artifact_id": "21a9e551-f354-4415-a823-549d60c729ac",
        "metadata": {}
      },
      {
        "path": "debug_terminal.py",
        "type": "file",
        "artifact_id": "0dfe59e5-6577-4f06-ac10-cd60851a7464",
        "metadata": {}
      },
      {
        "path": "deepseek_consultation.md",
        "type": "file",
        "artifact_id": "08523ebf-2703-4562-ae45-fa85ac5c5310",
        "metadata": {}
      },
      {
        "path": "docker",
        "type": "directory",
        "artifact_id": "921c288f-d1fe-4db7-84d2-bc198047cf85",
        "metadata": {}
      },
      {
        "path": "docker/parser_go",
        "type": "directory",
        "artifact_id": "c80f9ad2-5c0e-4fd8-a69e-d1270308bf92",
        "metadata": {}
      },
      {
        "path": "docs",
        "type": "directory",
        "artifact_id": "77a132ec-17ea-4689-b25d-ce7e678424c1",
        "metadata": {}
      },
      {
        "path": "docs.json",
        "type": "file",
        "artifact_id": "1bdee0e7-6cb5-4a43-af15-ebf5eafa4a65",
        "metadata": {}
      },
      {
        "path": "docs/AI_DOGFOODING_FINAL_PLAN.md",
        "type": "file",
        "artifact_id": "a8ac7938-50d7-4f4a-90f5-348906e5323e",
        "metadata": {}
      },
      {
        "path": "docs/AI_DOGFOODING_IMPLEMENTATION_PLAN.md",
        "type": "file",
        "artifact_id": "06463aca-928c-443a-85a6-fddba1b5f0b3",
        "metadata": {}
      },
      {
        "path": "docs/AI_DOGFOODING_PLANNING_MEMO.md",
        "type": "file",
        "artifact_id": "5fea9201-20e7-467b-8c97-e2ac32eb8678",
        "metadata": {}
      },
      {
        "path": "docs/AI_INTEGRATION_REALITY_CHECK.md",
        "type": "file",
        "artifact_id": "4901bbd7-47a3-4e40-921e-4fcf14449e66",
        "metadata": {}
      },
      {
        "path": "docs/AI_SESSION_MOBILE_CONTROL.md",
        "type": "file",
        "artifact_id": "f48e63f5-4ad8-44e1-862b-0d384bfc9c97",
        "metadata": {}
      },
      {
        "path": "docs/COMPREHENSIVE_ANALYSIS.md",
        "type": "file",
        "artifact_id": "bac2b14a-4f82-469f-99d2-80007af69269",
        "metadata": {}
      },
      {
        "path": "docs/COMPREHENSIVE_INDEX.json",
        "type": "file",
        "artifact_id": "df67b82d-1edc-4a46-86e8-41c2745a291b",
        "metadata": {}
      },
      {
        "path": "docs/CONTEXT_TAGS_SYSTEM.md",
        "type": "file",
        "artifact_id": "cb9886f5-c915-402a-83a0-abc18815fc08",
        "metadata": {}
      },
      {
        "path": "docs/CONTINUE_INTEGRATION.md",
        "type": "file",
        "artifact_id": "1390982e-eb58-45ff-9575-5b77508dec7e",
        "metadata": {}
      },
      {
        "path": "docs/CONTRIBUTING.md",
        "type": "file",
        "artifact_id": "b331ad50-ef92-4641-bda3-a597088fd722",
        "metadata": {}
      },
      {
        "path": "docs/COPILOT_INTEGRATION_CLARIFICATION_QUESTIONS.md",
        "type": "file",
        "artifact_id": "838592ed-3b48-462b-9cba-a24b423eadf0",
        "metadata": {}
      },
      {
        "path": "docs/COPILOT_INTEGRATION_RESEARCH_NOTES.md",
        "type": "file",
        "artifact_id": "7b8ba562-5645-4652-a00e-325e2b292a4c",
        "metadata": {}
      },
      {
        "path": "docs/CURSOR_AI_INTEGRATION.md",
        "type": "file",
        "artifact_id": "0b438bc8-fd4f-4c80-ad05-e2224546bdd1",
        "metadata": {}
      },
      {
        "path": "docs/CURSOR_ECOSYSTEM_TECHNICAL_ASSESSMENT.md",
        "type": "file",
        "artifact_id": "8750a0e4-0aab-41b4-b132-aa625d8d7cc8",
        "metadata": {}
      },
      {
        "path": "docs/GITHUB_ROLLOUT_STRATEGY.md",
        "type": "file",
        "artifact_id": "e0fcfd97-06d9-4282-b9aa-05a9a940b49b",
        "metadata": {}
      },
      {
        "path": "docs/GITHUB_TOKEN_SETUP.md",
        "type": "file",
        "artifact_id": "6927763c-d3d0-4ffc-98ed-dde698047ddf",
        "metadata": {}
      },
      {
        "path": "docs/HIDDEN_GEMS_ANALYSIS.md",
        "type": "file",
        "artifact_id": "4c569dbd-420b-42df-b6be-f54b691a5c59",
        "metadata": {}
      },
      {
        "path": "docs/INTEGRATION_AND_WORKFLOW_CLARIFICATIONS.md",
        "type": "file",
        "artifact_id": "5def654d-9613-4ba2-824e-ce96821e33be",
        "metadata": {}
      },
      {
        "path": "docs/JSON_OPTIMIZATION_CLARIFICATIONS.md",
        "type": "file",
        "artifact_id": "990a2836-5bf0-4f42-b022-0e6fd94dd061",
        "metadata": {}
      },
      {
        "path": "docs/JSON_OPTIMIZATION_FINAL_PLAN.md",
        "type": "file",
        "artifact_id": "e2858b7c-f22c-4045-88ad-0745afdba287",
        "metadata": {}
      },
      {
        "path": "docs/JSON_SYSTEM_OPTIMIZATION_RESEARCH.md",
        "type": "file",
        "artifact_id": "474e0ea0-41fd-472a-a9d9-9d448ddee11d",
        "metadata": {}
      },
      {
        "path": "docs/LLM_instructions_api.md",
        "type": "file",
        "artifact_id": "662c181c-d8d7-42f1-baa8-72248ec9a76d",
        "metadata": {}
      },
      {
        "path": "docs/MISSING_INNOVATIONS_SUMMARY.md",
        "type": "file",
        "artifact_id": "c6af6f42-4c81-40d5-9216-21307602960f",
        "metadata": {}
      },
      {
        "path": "docs/PRIORITY_DASHBOARD.md",
        "type": "file",
        "artifact_id": "a084970b-4428-4309-99b1-fc8cb2e319fd",
        "metadata": {}
      },
      {
        "path": "docs/QUICK_START_GUIDE.md",
        "type": "file",
        "artifact_id": "b1dc2473-ed38-4222-ac58-7dd7d832194e",
        "metadata": {}
      },
      {
        "path": "docs/SECURITY.md",
        "type": "file",
        "artifact_id": "df8d0568-93d1-4057-b30f-3b7d25e63fea",
        "metadata": {}
      },
      {
        "path": "docs/STRATEGIC_ROADMAP_2025.md",
        "type": "file",
        "artifact_id": "0bcb3668-f656-4b62-97c3-f7142a4c4033",
        "metadata": {}
      },
      {
        "path": "docs/TASKS_AND_IDEAS_REASSESSMENT.md",
        "type": "file",
        "artifact_id": "8e43f62e-83d4-4177-8cb0-9f6e32d39503",
        "metadata": {}
      },
      {
        "path": "docs/TASKS_INDEX.json",
        "type": "file",
        "artifact_id": "01943095-1a9a-4908-8e05-6343a7a22ffa",
        "metadata": {}
      },
      {
        "path": "docs/TASKS_SUMMARY.md",
        "type": "file",
        "artifact_id": "218c9b0c-83f2-4de0-94e5-77c860047384",
        "metadata": {}
      },
      {
        "path": "docs/TASK_IDEA_CONSOLIDATION_WORK_NOTE.md",
        "type": "file",
        "artifact_id": "393d1a0f-0115-434f-9b9f-4ffd00ca73df",
        "metadata": {}
      },
      {
        "path": "docs/TASK_MANAGEMENT_SYSTEM.md",
        "type": "file",
        "artifact_id": "f769b03e-c3a0-4165-8a41-ad3e513986c0",
        "metadata": {}
      },
      {
        "path": "docs/TPOT_DEPLOYMENT_WORK_PLAN.md",
        "type": "file",
        "artifact_id": "29f0a37e-279c-4b76-8ad9-0695c77eb2a7",
        "metadata": {}
      },
      {
        "path": "docs/WORKFLOW_METRICS_INTEGRATION.md",
        "type": "file",
        "artifact_id": "41722dd5-99d4-4714-a03b-3d4326b2c32c",
        "metadata": {}
      },
      {
        "path": "docs/ai",
        "type": "directory",
        "artifact_id": "5f03f0df-783e-4a42-bd0c-faff924c8e27",
        "metadata": {}
      },
      {
        "path": "docs/ai-constraints-implementation-report.md",
        "type": "file",
        "artifact_id": "d6a6da21-eb77-4edc-8546-6a2e56e28a1c",
        "metadata": {}
      },
      {
        "path": "docs/ai-session-monitor",
        "type": "directory",
        "artifact_id": "ef291d0d-e146-4114-86b4-1b9539e571c1",
        "metadata": {}
      },
      {
        "path": "docs/ai-session-monitor/README.md",
        "type": "file",
        "artifact_id": "fb38c28e-4f3f-4ae8-91d6-2c8e4511669b",
        "metadata": {}
      },
      {
        "path": "docs/ai/README.md",
        "type": "file",
        "artifact_id": "07580cec-a29d-4acf-a5cb-49e8c98e66a3",
        "metadata": {}
      },
      {
        "path": "docs/ai/system_overview.md",
        "type": "file",
        "artifact_id": "51e44915-b4ac-4d51-bb73-6e2bb852b127",
        "metadata": {}
      },
      {
        "path": "docs/ai/workflow_guide.md",
        "type": "file",
        "artifact_id": "7b8e7052-9e11-4015-b959-6e2fef371a8d",
        "metadata": {}
      },
      {
        "path": "docs/best_practices.md",
        "type": "file",
        "artifact_id": "4e4e4970-c190-4e88-9bef-a26d661f58c3",
        "metadata": {}
      },
      {
        "path": "docs/cache.py",
        "type": "file",
        "artifact_id": "09d51ea8-b2cc-4481-9134-0997c724daef",
        "metadata": {}
      },
      {
        "path": "docs/cli.py",
        "type": "file",
        "artifact_id": "8d9398f8-0234-45ed-bb92-9ee487ef22de",
        "metadata": {}
      },
      {
        "path": "docs/cli_modular_architecture.md",
        "type": "file",
        "artifact_id": "fc3ad235-cc9d-4143-b7dd-d447cbd36a99",
        "metadata": {}
      },
      {
        "path": "docs/context_orchestration_architecture.md",
        "type": "file",
        "artifact_id": "fb1de961-6cb3-45e0-a5db-814328975170",
        "metadata": {}
      },
      {
        "path": "docs/copilot_integration.md",
        "type": "file",
        "artifact_id": "8211aeb2-c8bd-4df1-b520-f92fe8f12407",
        "metadata": {}
      },
      {
        "path": "docs/examples",
        "type": "directory",
        "artifact_id": "4bbf4ef1-0518-48dd-a813-54c2f99bc076",
        "metadata": {}
      },
      {
        "path": "docs/examples/struct.json",
        "type": "file",
        "artifact_id": "b2ce001b-d011-401a-9c3e-f3841672676d",
        "metadata": {}
      },
      {
        "path": "docs/gh_view.md",
        "type": "file",
        "artifact_id": "e06db9ee-661e-4660-966c-d25a3eb72c46",
        "metadata": {}
      },
      {
        "path": "docs/github_projects_export.md",
        "type": "file",
        "artifact_id": "1593c179-f610-4720-87b1-67e2c992a3c2",
        "metadata": {}
      },
      {
        "path": "docs/ideas_community.md",
        "type": "file",
        "artifact_id": "c34c5112-0a24-4220-ba96-c6b30c515319",
        "metadata": {}
      },
      {
        "path": "docs/ideas_strategy.md",
        "type": "file",
        "artifact_id": "4c547dcb-9e31-486f-87ea-6ad1e3a629a5",
        "metadata": {}
      },
      {
        "path": "docs/ideas_technical.md",
        "type": "file",
        "artifact_id": "b4794a68-65c8-4087-8404-232ac2f3947f",
        "metadata": {}
      },
      {
        "path": "docs/incremental_indexing_plan.md",
        "type": "file",
        "artifact_id": "ed10b3e7-3a87-408a-917e-8702afb6b13b",
        "metadata": {}
      },
      {
        "path": "docs/integration.md",
        "type": "file",
        "artifact_id": "166c62ef-4dc7-45ef-afd9-6e1d3ecc3aea",
        "metadata": {}
      },
      {
        "path": "docs/interactions_diagram.ru.md",
        "type": "file",
        "artifact_id": "087d353c-eaa5-4747-8df8-fd437b416450",
        "metadata": {}
      },
      {
        "path": "docs/internal",
        "type": "directory",
        "artifact_id": "7f29702e-2c48-4fe2-8b0a-41c3fa4a8713",
        "metadata": {}
      },
      {
        "path": "docs/internal/collaborative-decision-workflow.md",
        "type": "file",
        "artifact_id": "63156a58-7d00-45fe-984c-44aadcddae3b",
        "metadata": {}
      },
      {
        "path": "docs/internal/elastic-workflow-concept.md",
        "type": "file",
        "artifact_id": "6d5fb7f4-1bad-4733-8c66-ce91ea83f426",
        "metadata": {}
      },
      {
        "path": "docs/internal/mamay-scenario-onboarding-design.md",
        "type": "file",
        "artifact_id": "b0c28fa0-c6f5-4ebb-be65-4e1d6a58c134",
        "metadata": {}
      },
      {
        "path": "docs/internal/notes",
        "type": "directory",
        "artifact_id": "e352261a-a7df-4e7e-b696-08e07b611a5b",
        "metadata": {}
      },
      {
        "path": "docs/internal/notes/session_integration.md",
        "type": "file",
        "artifact_id": "079f5c69-bce0-4b63-880f-b14ca8b402d7",
        "metadata": {}
      },
      {
        "path": "docs/internal/project-status-summary.md",
        "type": "file",
        "artifact_id": "3f4dd7ad-a37a-4ace-a2f1-45c73a0cdb59",
        "metadata": {}
      },
      {
        "path": "docs/internal/roadmap.md",
        "type": "file",
        "artifact_id": "714bedd6-44ed-4c76-91f5-561af49ce246",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru",
        "type": "directory",
        "artifact_id": "51bab974-23bb-4010-8759-a00c05ea250e",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/roadmap.md",
        "type": "file",
        "artifact_id": "55130f86-2e01-496f-84a6-02781f6663b0",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/ses-003_critical_analysis.md",
        "type": "file",
        "artifact_id": "0a6bf9a0-2434-411d-94ab-7e1d3f9f69d2",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/setup.md",
        "type": "file",
        "artifact_id": "53feefd4-8111-470c-bdc5-8ad81697fcb8",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/team.md",
        "type": "file",
        "artifact_id": "d77a8312-c6d4-4f1c-9ae9-bed9dd87c5e2",
        "metadata": {}
      },
      {
        "path": "docs/internal/ses-004-implementation-decisions.md",
        "type": "file",
        "artifact_id": "c5b3fee4-f79b-48fd-88f2-e759b512b500",
        "metadata": {}
      },
      {
        "path": "docs/internal/setup.md",
        "type": "file",
        "artifact_id": "1e8a786a-f436-41b1-bb3d-f0c86907ead5",
        "metadata": {}
      },
      {
        "path": "docs/internal/team.md",
        "type": "file",
        "artifact_id": "c9d3f350-f063-4c6c-be4f-cad7ec346352",
        "metadata": {}
      },
      {
        "path": "docs/internal/workspace-mode-design-clarifications.md",
        "type": "file",
        "artifact_id": "593b6895-903c-4246-aa9e-d8a9fa769c64",
        "metadata": {}
      },
      {
        "path": "docs/internal/workspace-state-mode-system-design.md",
        "type": "file",
        "artifact_id": "7978f6fd-bd3e-4f94-a971-9fee717a4cf6",
        "metadata": {}
      },
      {
        "path": "docs/json_selector.py",
        "type": "file",
        "artifact_id": "b051ccce-2bf2-4863-b09c-be59c126729a",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_config.md",
        "type": "file",
        "artifact_id": "db935a12-c3dc-42da-ac9a-4d5e441739dc",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_decision_checklist.md",
        "type": "file",
        "artifact_id": "c1e61248-ac5b-4ef0-b54d-b168d0856855",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_format.md",
        "type": "file",
        "artifact_id": "bd7b0f0e-80b5-47d9-8e2e-4ea07fe153f2",
        "metadata": {}
      },
      {
        "path": "docs/management",
        "type": "directory",
        "artifact_id": "84106f10-e2df-4252-9a63-cd8ebe3c2132",
        "metadata": {}
      },
      {
        "path": "docs/management/README.md",
        "type": "file",
        "artifact_id": "b55c332a-9dc4-489b-a7ec-19aa7a86eab1",
        "metadata": {}
      },
      {
        "path": "docs/manifesto.md",
        "type": "file",
        "artifact_id": "8b36afd6-df18-4d59-9957-bcb9f2cd6847",
        "metadata": {}
      },
      {
        "path": "docs/onboarding.md",
        "type": "file",
        "artifact_id": "e54fa0f6-1745-450c-ba31-33da61823ead",
        "metadata": {}
      },
      {
        "path": "docs/project_structure.md",
        "type": "file",
        "artifact_id": "795aae58-822d-4c43-9364-ea082576f5e6",
        "metadata": {}
      },
      {
        "path": "docs/ru",
        "type": "directory",
        "artifact_id": "3a3d07e3-3a0d-4270-99ca-dfde1b443c03",
        "metadata": {}
      },
      {
        "path": "docs/ru/CONTRIBUTING.md",
        "type": "file",
        "artifact_id": "66984ee5-5981-4c60-84fd-fa6f82393263",
        "metadata": {}
      },
      {
        "path": "docs/ru/README.md",
        "type": "file",
        "artifact_id": "2b133335-b020-4ee1-a3fd-b32694e9aa2d",
        "metadata": {}
      },
      {
        "path": "docs/ru/best_practices.md",
        "type": "file",
        "artifact_id": "19b72cb1-fdb4-481d-93bd-ba06c4d5c13e",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples",
        "type": "directory",
        "artifact_id": "260f594e-4446-42ee-97d0-bc5543a72188",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples/struct.json",
        "type": "file",
        "artifact_id": "1dc8e56f-8cd7-48f7-b3ef-9400d6ddc91f",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_community.md",
        "type": "file",
        "artifact_id": "1ffbb6c6-d40e-4c22-9941-535504647b9c",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_strategy.md",
        "type": "file",
        "artifact_id": "fe3dbc78-944e-44af-a626-be4aad342265",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_technical.md",
        "type": "file",
        "artifact_id": "b0829c8d-c2f2-40f1-871b-375da4a3510e",
        "metadata": {}
      },
      {
        "path": "docs/ru/integration.md",
        "type": "file",
        "artifact_id": "09505f16-df12-4edd-82be-077a7063f2a2",
        "metadata": {}
      },
      {
        "path": "docs/ru/interactions_diagram.ru.md",
        "type": "file",
        "artifact_id": "7d992545-7306-45ba-ac9d-f5e97e671093",
        "metadata": {}
      },
      {
        "path": "docs/ru/llmstruct_config.md",
        "type": "file",
        "artifact_id": "d7272da2-5aec-4a20-a314-a32d8f211777",
        "metadata": {}
      },
      {
        "path": "docs/ru/llmstruct_format.md",
        "type": "file",
        "artifact_id": "c3e1da79-745e-4ab7-bf9e-85c9e31ea5ee",
        "metadata": {}
      },
      {
        "path": "docs/ru/manifesto.md",
        "type": "file",
        "artifact_id": "e4b90ff6-96f9-4432-b0e9-6cafedfcc0f0",
        "metadata": {}
      },
      {
        "path": "docs/ru/onboarding.md",
        "type": "file",
        "artifact_id": "1133633f-239e-4cb5-abf8-5d1befa23377",
        "metadata": {}
      },
      {
        "path": "docs/ru/project_structure.md",
        "type": "file",
        "artifact_id": "805052e6-1386-4b35-b0f9-78df1d1808b1",
        "metadata": {}
      },
      {
        "path": "docs/self_run.py",
        "type": "file",
        "artifact_id": "fdeb75f8-0da6-47a2-8c88-a91dddfa899b",
        "metadata": {}
      },
      {
        "path": "docs/struct_security.md",
        "type": "file",
        "artifact_id": "7ad47fbf-051a-48aa-b41a-147640a9e917",
        "metadata": {}
      },
      {
        "path": "duplication_report.json",
        "type": "file",
        "artifact_id": "66b4f0c2-8323-4ba2-838f-83ca12e3872f",
        "metadata": {}
      },
      {
        "path": "empty.json",
        "type": "file",
        "artifact_id": "fdc07188-555d-4e79-a98c-1a1727c274ed",
        "metadata": {}
      },
      {
        "path": "epics",
        "type": "directory",
        "artifact_id": "c1926fc7-4f71-46c7-88e1-892e448fab59",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-1-AI-BRANCH-SAFETY-SYSTEM.md",
        "type": "file",
        "artifact_id": "d483e22b-af01-4967-a199-a20485790bd2",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-2-AI-SESSION-MANAGEMENT.md",
        "type": "file",
        "artifact_id": "03876212-7014-4aa4-b871-556836380f9f",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-3-ENHANCED-DOGFOOD-COMMAND.md",
        "type": "file",
        "artifact_id": "0f66d9ce-b19a-4372-8e01-7e3dfb3c3457",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-4-RISK-BASED-DEVELOPMENT-WORKFLOW.md",
        "type": "file",
        "artifact_id": "c3dcb789-c44a-4393-b617-87ef6fa21214",
        "metadata": {}
      },
      {
        "path": "epics/README.md",
        "type": "file",
        "artifact_id": "0dedb801-6ae8-413c-b678-63765921a525",
        "metadata": {}
      },
      {
        "path": "epics/epics_data.json",
        "type": "file",
        "artifact_id": "213bf826-bb05-4c4b-9bae-8e30752945bd",
        "metadata": {}
      },
      {
        "path": "examples",
        "type": "directory",
        "artifact_id": "860b316c-f89a-4f09-bab1-5738cb55bf48",
        "metadata": {}
      },
      {
        "path": "examples/python_project_main.py",
        "type": "file",
        "artifact_id": "dd7852a7-babb-41bd-902e-15c150250805",
        "metadata": {}
      },
      {
        "path": "examples/python_project_utils.py",
        "type": "file",
        "artifact_id": "8cf4c41b-9e81-47d5-bda7-0e16558ace87",
        "metadata": {}
      },
      {
        "path": "examples/telegram_bot",
        "type": "directory",
        "artifact_id": "7b2610d3-85f9-4c1d-bb39-833747e33a15",
        "metadata": {}
      },
      {
        "path": "fastapi_ollama_server_working.py",
        "type": "file",
        "artifact_id": "9ff32f55-78c0-4dfe-a095-decaa6b3f178",
        "metadata": {}
      },
      {
        "path": "final_system_check.py",
        "type": "file",
        "artifact_id": "d1a5c0bb-3e6c-45f7-8fbc-fa5a92ac7110",
        "metadata": {}
      },
      {
        "path": "final_system_validation.py",
        "type": "file",
        "artifact_id": "bf465e15-34eb-46ee-b8f1-3ab350d04d3d",
        "metadata": {}
      },
      {
        "path": "force_ai_integration.py",
        "type": "file",
        "artifact_id": "4f1e9d50-0749-45fa-bfdf-45a4dcf44add",
        "metadata": {}
      },
      {
        "path": "github_sync_log.json",
        "type": "file",
        "artifact_id": "6d99bcff-ae68-4b59-9e9c-35b37baeb223",
        "metadata": {}
      },
      {
        "path": "grok_consultations",
        "type": "directory",
        "artifact_id": "2683efb6-fb58-4269-8f45-ff2eb97e0849",
        "metadata": {}
      },
      {
        "path": "grok_consultations/01_architect_consultation.md",
        "type": "file",
        "artifact_id": "c372c3dc-5e78-46a7-ac26-46c9bf90820a",
        "metadata": {}
      },
      {
        "path": "grok_consultations/02_prompt_engineer_consultation.md",
        "type": "file",
        "artifact_id": "8ebe6ad6-42c4-4c83-b670-1f1c665d558c",
        "metadata": {}
      },
      {
        "path": "grok_consultations/03_llm_specialist_consultation.md",
        "type": "file",
        "artifact_id": "3bdc173f-93c7-492c-bfd2-e4d91e6922a8",
        "metadata": {}
      },
      {
        "path": "grok_consultations/04_project_manager_consultation.md",
        "type": "file",
        "artifact_id": "980801ee-57cb-4a77-819c-87e86671229b",
        "metadata": {}
      },
      {
        "path": "grok_consultations/05_final_consensus.md",
        "type": "file",
        "artifact_id": "2a51c24f-6121-4d59-9b15-29bc65d4b6fb",
        "metadata": {}
      },
      {
        "path": "grok_consultations/SUMMARY_AND_TOKEN_ANALYSIS.md",
        "type": "file",
        "artifact_id": "b925f8fb-083d-4486-b701-325e6f566e66",
        "metadata": {}
      },
      {
        "path": "grok_consultations_series_2",
        "type": "directory",
        "artifact_id": "47b2064f-4ebb-4232-aeb8-9573b43830de",
        "metadata": {}
      },
      {
        "path": "grok_consultations_series_2/00_master_context_for_grok.md",
        "type": "file",
        "artifact_id": "c7308847-61cd-412e-99a1-ec6bf8b17d88",
        "metadata": {}
      },
      {
        "path": "grok_consultations_series_2/01_conversation_analysis_summary.md",
        "type": "file",
        "artifact_id": "02767535-6937-4d26-9dba-d4de837cd87d",
        "metadata": {}
      },
      {
        "path": "grok_consultations_series_2/01_ollama_strategic_consultation_analysis.md",
        "type": "file",
        "artifact_id": "1897959e-19a6-49df-af7e-721b43a05cc7",
        "metadata": {}
      },
      {
        "path": "grok_consultations_series_2/02_ollama_integration_strategy.md",
        "type": "file",
        "artifact_id": "1ae44930-b34d-4120-bbf1-73ca56d87a51",
        "metadata": {}
      },
      {
        "path": "grok_consultations_series_2/03_project_cleanup_analysis.md",
        "type": "file",
        "artifact_id": "82aebde2-8fb0-48e6-b309-62d6d3c9e4a8",
        "metadata": {}
      },
      {
        "path": "grok_consultations_series_2/FINAL_STRATEGIC_DECISION.md",
        "type": "file",
        "artifact_id": "6fa24108-d033-41ac-9ef7-910becc6e991",
        "metadata": {}
      },
      {
        "path": "grok_consultations_series_2/SERIES_2_LAUNCH_SUMMARY.md",
        "type": "file",
        "artifact_id": "d18048c1-4d2e-4811-9f74-a0b61492de13",
        "metadata": {}
      },
      {
        "path": "grok_consultations_series_2/comprehensive_analysis_context.md",
        "type": "file",
        "artifact_id": "a2e2385f-70af-4223-bb5f-9849a5147925",
        "metadata": {}
      },
      {
        "path": "grok_consultations_series_2/comprehensive_ollama_context.json",
        "type": "file",
        "artifact_id": "8708bc83-81b6-4ede-9558-689470f95c4e",
        "metadata": {}
      },
      {
        "path": "grok_consultations_series_2/enhanced_ollama_context_with_structure.json",
        "type": "file",
        "artifact_id": "8f5f07bc-527a-4675-a0ca-60baa8917226",
        "metadata": {}
      },
      {
        "path": "grok_consultations_series_2/enhanced_ollama_context_with_structure_fixed.json",
        "type": "file",
        "artifact_id": "5cffb144-ab8d-43b3-918d-cdb35ad4921a",
        "metadata": {}
      },
      {
        "path": "grok_consultations_series_2/enhanced_ollama_context_with_structure_v2.json",
        "type": "file",
        "artifact_id": "cf0f3b47-6733-40c2-a8cd-749b0fdc2091",
        "metadata": {}
      },
      {
        "path": "grok_consultations_series_2/fixed_ollama_context.json",
        "type": "file",
        "artifact_id": "9201a07e-0965-4d95-b3ad-ac54f776b22d",
        "metadata": {}
      },
      {
        "path": "grok_consultations_series_2/improved_ollama_context.json",
        "type": "file",
        "artifact_id": "dc7447e3-6943-458a-9f41-d96875339dc6",
        "metadata": {}
      },
      {
        "path": "grok_consultations_series_2/minimal_ollama_context.json",
        "type": "file",
        "artifact_id": "84bb67cd-a416-4f18-af39-7ee2c771147b",
        "metadata": {}
      },
      {
        "path": "grok_consultations_series_2/ollama_models_analysis.json",
        "type": "file",
        "artifact_id": "e7a492b5-eca8-4280-93c5-3793481bc199",
        "metadata": {}
      },
      {
        "path": "grok_consultations_series_2/ollama_models_context_for_grok.json",
        "type": "file",
        "artifact_id": "f083d967-d3ae-4e58-b27b-f82a1338e589",
        "metadata": {}
      },
      {
        "path": "grok_consultations_series_2/updated_comprehensive_context.md",
        "type": "file",
        "artifact_id": "56690f32-dd1c-42de-a324-8aef83edbd5f",
        "metadata": {}
      },
      {
        "path": "grok_final_consultation.md",
        "type": "file",
        "artifact_id": "f1deeb99-5332-4045-88df-ef733eb090f2",
        "metadata": {}
      },
      {
        "path": "grok_final_strategy_consultation.md",
        "type": "file",
        "artifact_id": "3bf4271e-d2be-4954-b198-156facb4cb17",
        "metadata": {}
      },
      {
        "path": "grok_version.json",
        "type": "file",
        "artifact_id": "8573ff71-6d9e-4e38-be89-a5114c7b3c35",
        "metadata": {}
      },
      {
        "path": "install_ai_integration.py",
        "type": "file",
        "artifact_id": "439674c3-2f7e-4dc8-86f5-4d0141bf566d",
        "metadata": {}
      },
      {
        "path": "integrations",
        "type": "directory",
        "artifact_id": "9b9cf69a-e933-46f4-b32b-68bb015e3915",
        "metadata": {}
      },
      {
        "path": "integrations/continue",
        "type": "directory",
        "artifact_id": "db9c0196-1b5c-4c5e-bf3e-1556d3bf0754",
        "metadata": {}
      },
      {
        "path": "integrations/continue/README.md",
        "type": "file",
        "artifact_id": "b7b90f5a-6997-45f6-96cc-86cc47ab4f1d",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot",
        "type": "directory",
        "artifact_id": "e08c3937-9252-48e1-a379-7ea7faf1e92d",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot/mp002_progress_bot.py",
        "type": "file",
        "artifact_id": "ae9b166c-7085-4941-9692-393b90b9d7e0",
        "metadata": {}
      },
      {
        "path": "metrics.json",
        "type": "file",
        "artifact_id": "742b9f00-ab4f-41c2-8d71-f1344eafc2c1",
        "metadata": {}
      },
      {
        "path": "mistral_consultation.md",
        "type": "file",
        "artifact_id": "f20a2e4c-f92d-4081-b53a-ea748d0e4ff6",
        "metadata": {}
      },
      {
        "path": "monitor_system.py",
        "type": "file",
        "artifact_id": "1bb7ea52-d958-461c-bb38-f84f31e27bef",
        "metadata": {}
      },
      {
        "path": "ollama_full_parser.py",
        "type": "file",
        "artifact_id": "61fe756e-b3d1-4851-95df-3a57ecf7ac6e",
        "metadata": {}
      },
      {
        "path": "parse_ollama_fixed.py",
        "type": "file",
        "artifact_id": "51003165-9fb3-47bf-bd33-a08a10069e66",
        "metadata": {}
      },
      {
        "path": "parse_ollama_for_grok.py",
        "type": "file",
        "artifact_id": "a0b0a05a-6893-4a61-a889-452a4be380b6",
        "metadata": {}
      },
      {
        "path": "parse_ollama_full.py",
        "type": "file",
        "artifact_id": "e90eb1b4-c25b-4145-b886-4e4fa3b623b7",
        "metadata": {}
      },
      {
        "path": "parse_ollama_improved.py",
        "type": "file",
        "artifact_id": "3a429619-7ecc-4048-b796-386bb7169da8",
        "metadata": {}
      },
      {
        "path": "parse_ollama_minimal.py",
        "type": "file",
        "artifact_id": "d4e20b55-5c9b-4b22-bba7-a7e2f20ad482",
        "metadata": {}
      },
      {
        "path": "parse_ollama_models.py",
        "type": "file",
        "artifact_id": "4fb09585-41ed-4b52-af66-7a7a3f2b2f69",
        "metadata": {}
      },
      {
        "path": "processing_results",
        "type": "directory",
        "artifact_id": "06ecd2a6-147a-4beb-9b54-0beea81c0801",
        "metadata": {}
      },
      {
        "path": "processing_results/conflicts_manual_2025-05-29.json",
        "type": "file",
        "artifact_id": "7d84d882-80f0-429f-a678-49a1eb3eae9c",
        "metadata": {}
      },
      {
        "path": "processing_results/duplicates_review_2025-05-29.json",
        "type": "file",
        "artifact_id": "59f9bb85-6361-4632-9905-9564994791c3",
        "metadata": {}
      },
      {
        "path": "processing_results/future_backlog_2025-05-29.json",
        "type": "file",
        "artifact_id": "bed993ee-9ef8-45bf-9483-6cd65e1d516e",
        "metadata": {}
      },
      {
        "path": "processing_results/github_discussions_2025-05-29.json",
        "type": "file",
        "artifact_id": "642bda74-8676-4797-beb6-1bab21cf4695",
        "metadata": {}
      },
      {
        "path": "processing_results/github_epics_2025-05-29.json",
        "type": "file",
        "artifact_id": "11dc0fdf-272b-4557-b18c-b134fefcb07d",
        "metadata": {}
      },
      {
        "path": "processing_results/github_issues_2025-05-29.json",
        "type": "file",
        "artifact_id": "b0de8085-3229-4dbd-82af-5a9918462a68",
        "metadata": {}
      },
      {
        "path": "processing_results/processing_summary_2025-05-29.json",
        "type": "file",
        "artifact_id": "9f343d1f-424b-4c34-a8af-d236522255fe",
        "metadata": {}
      },
      {
        "path": "processing_results/t_pot_revenue_2025-05-29.json",
        "type": "file",
        "artifact_id": "72a2c8dc-ce9c-4c61-8a8e-a30736b31081",
        "metadata": {}
      },
      {
        "path": "project_context.json",
        "type": "file",
        "artifact_id": "978c9b97-2000-455e-bb45-1edb146b5daa",
        "metadata": {}
      },
      {
        "path": "project_restructure_plan.md",
        "type": "file",
        "artifact_id": "5288a707-6a5b-40cc-9848-c5ef77f8f818",
        "metadata": {}
      },
      {
        "path": "run_ai_diagnostics.py",
        "type": "file",
        "artifact_id": "e4b3da89-a8e5-45b6-a3bd-88e7549c4fd3",
        "metadata": {}
      },
      {
        "path": "schema",
        "type": "directory",
        "artifact_id": "fa714782-f773-4562-92f0-e6e15a2259cf",
        "metadata": {}
      },
      {
        "path": "schema/artifacts_simplified.json",
        "type": "file",
        "artifact_id": "ae95f5c7-4130-40e6-8901-601bc5e3c234",
        "metadata": {}
      },
      {
        "path": "schema/cli_queue.json",
        "type": "file",
        "artifact_id": "65877c85-cee7-4cdd-ae65-1a22314f7ef1",
        "metadata": {}
      },
      {
        "path": "schema/cli_simplified.json",
        "type": "file",
        "artifact_id": "dba6b844-313a-4a04-99e1-de0adcda109e",
        "metadata": {}
      },
      {
        "path": "schema/common",
        "type": "directory",
        "artifact_id": "3490358c-bfd0-4769-ad29-98ed228e4b2f",
        "metadata": {}
      },
      {
        "path": "schema/common/definitions.json",
        "type": "file",
        "artifact_id": "3c258adb-f0ea-41f4-a2e6-e827f534daad",
        "metadata": {}
      },
      {
        "path": "schema/core.json",
        "type": "file",
        "artifact_id": "8f72d7ea-4a15-4072-b528-158817cba60b",
        "metadata": {}
      },
      {
        "path": "schema/core_simplified.json",
        "type": "file",
        "artifact_id": "678c5ec0-71eb-4641-9d19-51aa8927a0a0",
        "metadata": {}
      },
      {
        "path": "schema/insights_simplified.json",
        "type": "file",
        "artifact_id": "948120f5-88fa-4a97-8964-08924c4c6215",
        "metadata": {}
      },
      {
        "path": "schema/llmstruct_schema.json",
        "type": "file",
        "artifact_id": "7c97b859-c646-42e3-80f6-6d6618952fc3",
        "metadata": {}
      },
      {
        "path": "schema/llmstruct_schema_simplified.json",
        "type": "file",
        "artifact_id": "ef542962-a28a-4667-b8ce-8738a8407a83",
        "metadata": {}
      },
      {
        "path": "schema/plugins",
        "type": "directory",
        "artifact_id": "9a62ec50-5097-45b1-93dd-0336702ab972",
        "metadata": {}
      },
      {
        "path": "schema/plugins/artifacts.json",
        "type": "file",
        "artifact_id": "c10e0680-307b-450e-87d0-c55813ad28fc",
        "metadata": {}
      },
      {
        "path": "schema/plugins/cli.json",
        "type": "file",
        "artifact_id": "5126457c-170d-44b5-b917-aa830710e090",
        "metadata": {}
      },
      {
        "path": "schema/plugins/data_sorter.json",
        "type": "file",
        "artifact_id": "2d800fa3-885d-4f12-a24c-b2dd4fd965de",
        "metadata": {}
      },
      {
        "path": "schema/plugins/insights.json",
        "type": "file",
        "artifact_id": "521f08c8-78bc-4bcb-b61f-675e161577f0",
        "metadata": {}
      },
      {
        "path": "scripts",
        "type": "directory",
        "artifact_id": "a6a1ae25-b191-4bab-a83b-e1b6072a208f",
        "metadata": {}
      },
      {
        "path": "scripts/auto_update_struct.py",
        "type": "file",
        "artifact_id": "6b7249b4-de77-4493-948b-fc880e8da185",
        "metadata": {}
      },
      {
        "path": "scripts/collector.py",
        "type": "file",
        "artifact_id": "9ea54f49-5121-4875-8a46-229bdf6ca5b8",
        "metadata": {}
      },
      {
        "path": "scripts/create_comprehensive_index.py",
        "type": "file",
        "artifact_id": "54457ba8-73d9-47b9-af17-86a613833e56",
        "metadata": {}
      },
      {
        "path": "scripts/create_github_issues.py",
        "type": "file",
        "artifact_id": "dd43360e-8d83-4c91-8d1f-1314fa032f8b",
        "metadata": {}
      },
      {
        "path": "scripts/create_tasks_index.py",
        "type": "file",
        "artifact_id": "a9c81efb-b242-42c5-8c5b-180003ae1ebe",
        "metadata": {}
      },
      {
        "path": "scripts/deploy_embedded_files.py",
        "type": "file",
        "artifact_id": "698fb2fd-be70-4d48-874d-7a501e10eee0",
        "metadata": {}
      },
      {
        "path": "scripts/epic_roadmap_manager.py",
        "type": "file",
        "artifact_id": "4ec4a17d-c653-434f-9fc4-3cd54fcc4a29",
        "metadata": {}
      },
      {
        "path": "scripts/export_to_github_projects.py",
        "type": "file",
        "artifact_id": "f37425ca-90ce-47bb-8348-617027353978",
        "metadata": {}
      },
      {
        "path": "scripts/fix_github_script.py",
        "type": "file",
        "artifact_id": "62a9da6f-6a01-4029-9c08-5b14e3f8d66c",
        "metadata": {}
      },
      {
        "path": "scripts/fix_hardcoded_usernames.py",
        "type": "file",
        "artifact_id": "553e164e-415f-4a14-bc82-e3b0154f5176",
        "metadata": {}
      },
      {
        "path": "scripts/github_sync_manager.py",
        "type": "file",
        "artifact_id": "8ecb42a9-f117-4296-bb45-c4605b08bdc0",
        "metadata": {}
      },
      {
        "path": "scripts/github_sync_manager_enhanced.py",
        "type": "file",
        "artifact_id": "c56832d4-27e4-4069-99f5-1ec047cd25ee",
        "metadata": {}
      },
      {
        "path": "scripts/old",
        "type": "directory",
        "artifact_id": "51f432dd-bce8-4719-a870-bbab71e6a471",
        "metadata": {}
      },
      {
        "path": "scripts/process_926_items.py",
        "type": "file",
        "artifact_id": "ad76fdca-ecee-4fd2-b641-897a0e71f22f",
        "metadata": {}
      },
      {
        "path": "scripts/session_cli.py",
        "type": "file",
        "artifact_id": "e6f39dfa-a8f9-4b56-bf2d-3ed893e944af",
        "metadata": {}
      },
      {
        "path": "scripts/team",
        "type": "directory",
        "artifact_id": "0edf6dd6-6234-479c-a716-90e17418ac45",
        "metadata": {}
      },
      {
        "path": "scripts/team/__init__.py",
        "type": "file",
        "artifact_id": "31709c70-93c6-408b-8522-d4af2a88f00f",
        "metadata": {}
      },
      {
        "path": "scripts/validate_epics.py",
        "type": "file",
        "artifact_id": "845beaf4-0a4f-456c-8c83-b4953cc461dc",
        "metadata": {}
      },
      {
        "path": "scripts/validate_json.py",
        "type": "file",
        "artifact_id": "db3a626a-0af7-4cd5-8836-6ae8f3675569",
        "metadata": {}
      },
      {
        "path": "scripts/validate_refs.py",
        "type": "file",
        "artifact_id": "4d8682fe-548e-47d8-8d23-2e31964d414b",
        "metadata": {}
      },
      {
        "path": "scripts/validate_schemas.py",
        "type": "file",
        "artifact_id": "862cdf5f-6f9a-4c72-b89f-1da5d38c8f15",
        "metadata": {}
      },
      {
        "path": "src",
        "type": "directory",
        "artifact_id": "3c00c85d-7845-47cc-8818-709f9f33cdb8",
        "metadata": {}
      },
      {
        "path": "src/llmstruct",
        "type": "directory",
        "artifact_id": "93b81be3-55e5-4081-8bb9-12aa2e8181cf",
        "metadata": {}
      },
      {
        "path": "src/llmstruct.egg-info",
        "type": "directory",
        "artifact_id": "a5e44abd-a9a0-40e3-b13d-751bd463c675",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__init__.py",
        "type": "file",
        "artifact_id": "7b44a83d-ede4-4587-b173-6915ad6a6230",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__main__.py",
        "type": "file",
        "artifact_id": "96374c17-c310-4843-baac-f1de01e9a923",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_cli_integration.py",
        "type": "file",
        "artifact_id": "cec11a0e-3470-469d-b03b-fb82064eb79f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_self_awareness.py",
        "type": "file",
        "artifact_id": "5289c68e-b7a8-4211-a07c-63b0b91e869e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_self_monitor.py",
        "type": "file",
        "artifact_id": "c1ad983d-f4b2-4358-807b-a56fd8b55d5a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_workflow_middleware.py",
        "type": "file",
        "artifact_id": "f269ab30-903f-4f4f-a938-53cdc4fca035",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/api",
        "type": "directory",
        "artifact_id": "d3afae1e-1322-470e-a894-338d28bd5b44",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/api/app.py",
        "type": "file",
        "artifact_id": "965c2b01-8197-4307-b9ec-d7b1e1133d46",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/api/middleware",
        "type": "directory",
        "artifact_id": "39c4a8aa-4fb4-4015-b90c-82130c11ee8d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/api/models",
        "type": "directory",
        "artifact_id": "d330748b-9254-4d43-8cfc-b828bd7bbfa1",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/api/routes",
        "type": "directory",
        "artifact_id": "d5039dfb-851e-4ba0-8a9d-c949eb1af9c1",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/api/routes/continue_adapter.py",
        "type": "file",
        "artifact_id": "361329d3-5672-4beb-bde1-cbb5f7e7062f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/api/services",
        "type": "directory",
        "artifact_id": "091a5e54-145a-4a50-8b0f-027cf9b33553",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/api/services/llm_service.py",
        "type": "file",
        "artifact_id": "4aee85fa-c2c5-46cd-8c8b-49aaf0d1339e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cache.py",
        "type": "file",
        "artifact_id": "764d5163-994b-43f9-8b93-8593f62d252d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli.py",
        "type": "file",
        "artifact_id": "99e0fe0e-dcf6-4c8e-9520-6851abc98233",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_commands.py",
        "type": "file",
        "artifact_id": "eef4f545-ad15-481d-a74b-8cfe1aba6662",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_config.py",
        "type": "file",
        "artifact_id": "880423fd-a7af-441e-95cf-fae56abb2004",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_core.py",
        "type": "file",
        "artifact_id": "255433e0-5db2-40af-a5a7-af5a231445ba",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_utils.py",
        "type": "file",
        "artifact_id": "7c9fe13f-e6f7-4c71-88d1-a97e588ce255",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/context_orchestrator.py",
        "type": "file",
        "artifact_id": "57b926b2-6c64-4f3e-b525-3a063d35fd23",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/copilot.py",
        "type": "file",
        "artifact_id": "961e75d0-a61c-4170-ae9e-31f2ad4d75d5",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cursor_ai_bridge.py",
        "type": "file",
        "artifact_id": "2d091f95-93d2-4d68-a7f7-4823b67b615e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cursor_integration.py",
        "type": "file",
        "artifact_id": "44c86264-e443-4df8-a161-3542eef2daa9",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators",
        "type": "directory",
        "artifact_id": "4430b871-c9b2-4b07-a49d-1f4a3a837856",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/__init__.py",
        "type": "file",
        "artifact_id": "79263dab-026a-4e08-bf06-4a2b6fb05c50",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/go_json_generator.py",
        "type": "file",
        "artifact_id": "1a4a54e2-5b68-41f9-a4e6-992d7c72a507",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/json_generator.py",
        "type": "file",
        "artifact_id": "97bb9b71-18f5-4b2f-88cf-1abd766fff68",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/gh_view.py",
        "type": "file",
        "artifact_id": "db30cb58-a197-4785-b6a6-bfc9ebb2b267",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/grok.py",
        "type": "file",
        "artifact_id": "d3903a50-db1f-4072-94e7-3c416ca50403",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/json_selector.py",
        "type": "file",
        "artifact_id": "55e5740f-5c71-46ca-9319-cb4e51ae6eb7",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/llm_client.py",
        "type": "file",
        "artifact_id": "f7ab592d-09d1-4747-8dc0-6875a3427a7f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/metrics_tracker.py",
        "type": "file",
        "artifact_id": "4fd0ece6-8ff4-4cba-bd90-46f2fc3bb044",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers",
        "type": "directory",
        "artifact_id": "93638451-c5e9-4eb9-87e7-9231e5488705",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/__init__.py",
        "type": "file",
        "artifact_id": "877b7bc8-eac8-443f-b44f-01c6b0be7661",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/go_analyzer.py",
        "type": "file",
        "artifact_id": "78439f99-e023-4119-8f4d-fbf010657720",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/javascript_parser.py",
        "type": "file",
        "artifact_id": "765a06a6-0d68-4b1f-944b-fb45cf4cd169",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/python_parser.py",
        "type": "file",
        "artifact_id": "9303f7d7-da8b-41ac-bea7-b8dfc824f02c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/universal_converter.py",
        "type": "file",
        "artifact_id": "16fbeb18-b664-4084-b475-dfca64d8a0b4",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/self_run.py",
        "type": "file",
        "artifact_id": "e35d4dea-f1a1-4237-9f9f-ed74e55b1adf",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates",
        "type": "directory",
        "artifact_id": "62de6ee2-f064-4e70-a333-586f2a310421",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates/__init__.py",
        "type": "file",
        "artifact_id": "dd8a273e-27ab-4ebc-beba-e350ad065640",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/transpiler.py",
        "type": "file",
        "artifact_id": "4582a982-952f-41be-920b-ae3bf94808ed",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators",
        "type": "directory",
        "artifact_id": "4d594fb1-3450-4f07-b337-3f84bb24917f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/__init__.py",
        "type": "file",
        "artifact_id": "dcf557fe-6028-4d26-9822-2cdc9d70e413",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/json_validator.py",
        "type": "file",
        "artifact_id": "417e104f-f1c2-450b-91ca-a20705207fa8",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/workflow_orchestrator.py",
        "type": "file",
        "artifact_id": "4d1f5283-7e4f-415f-b935-f253c870f507",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/workspace.py",
        "type": "file",
        "artifact_id": "de6688fc-6302-4ff6-bc64-62de073f9def",
        "metadata": {}
      },
      {
        "path": "start_development.py",
        "type": "file",
        "artifact_id": "672dc904-d3f6-41ab-ae8c-47a4e044a405",
        "metadata": {}
      },
      {
        "path": "struct.json",
        "type": "file",
        "artifact_id": "a1ea6e24-438d-4281-9db9-23d83cdf77ff",
        "metadata": {}
      },
      {
        "path": "struct_cache_manager.py",
        "type": "file",
        "artifact_id": "c1fa95f0-c723-4870-9c35-aa4af9345acd",
        "metadata": {}
      },
      {
        "path": "struct_ci_test.json",
        "type": "file",
        "artifact_id": "78a6f8ce-edee-4e29-bd23-26ff97d95e61",
        "metadata": {}
      },
      {
        "path": "struct_final_test.json",
        "type": "file",
        "artifact_id": "ea0b8270-d4ca-4321-94e2-f44c4ff9e4e1",
        "metadata": {}
      },
      {
        "path": "struct_fresh.json",
        "type": "file",
        "artifact_id": "095dd248-df76-43ce-bb7f-d8186d77e070",
        "metadata": {}
      },
      {
        "path": "struct_test.json",
        "type": "file",
        "artifact_id": "5ac0e07e-3a7b-4159-a08b-88712bd1d35f",
        "metadata": {}
      },
      {
        "path": "telegram_bot_enhanced.py",
        "type": "file",
        "artifact_id": "bab42dfe-0c68-46d3-9810-df901bdad8d0",
        "metadata": {}
      },
      {
        "path": "telegram_bot_final.py",
        "type": "file",
        "artifact_id": "fb7b226e-200a-4a25-9d17-23bf859a8b3b",
        "metadata": {}
      },
      {
        "path": "telegram_bot_test.py",
        "type": "file",
        "artifact_id": "f99d6d8e-f0da-4696-8b51-56c384d269b0",
        "metadata": {}
      },
      {
        "path": "temp",
        "type": "directory",
        "artifact_id": "600fb66a-0652-4be2-ba07-a353eba24d70",
        "metadata": {}
      },
      {
        "path": "temp/discussion_notes.md",
        "type": "file",
        "artifact_id": "32a8cfa3-6746-4981-9aed-239dd58e122b",
        "metadata": {}
      },
      {
        "path": "temp/pause_recovery.md",
        "type": "file",
        "artifact_id": "9c5c0776-265b-410a-b2ca-d5efa8d8ad9b",
        "metadata": {}
      },
      {
        "path": "temp/restore_ai_context.md",
        "type": "file",
        "artifact_id": "e0225bfa-491d-47c8-a9ff-7967236586d1",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox",
        "type": "directory",
        "artifact_id": "6c9dcf93-b810-46d0-a37e-1e03bc831398",
        "metadata": {}
      },
      {
        "path": "temp_boss_missing",
        "type": "directory",
        "artifact_id": "282ff55a-bdae-457b-9d4e-35f879b67536",
        "metadata": {}
      },
      {
        "path": "temp_boss_missing/data",
        "type": "directory",
        "artifact_id": "9b953225-bd58-415c-89dc-f661ec99545d",
        "metadata": {}
      },
      {
        "path": "temp_boss_missing/docs",
        "type": "directory",
        "artifact_id": "f51a9834-36eb-4c41-997b-c786cd0c0653",
        "metadata": {}
      },
      {
        "path": "temp_boss_missing/docs/final_architecture.md",
        "type": "file",
        "artifact_id": "57212a7d-a4c2-42f7-80ff-bd26a4ab54b3",
        "metadata": {}
      },
      {
        "path": "temp_boss_missing/scripts",
        "type": "directory",
        "artifact_id": "22d874f0-17f8-4b11-84ec-5b1de551ee5a",
        "metadata": {}
      },
      {
        "path": "temp_boss_missing/scripts/__init__.py",
        "type": "file",
        "artifact_id": "91ea2b72-34dc-4e43-9f4a-5998257f17a3",
        "metadata": {}
      },
      {
        "path": "temp_boss_missing/scripts/boss_cli.py",
        "type": "file",
        "artifact_id": "c1255fc4-9178-491b-9d00-1ab35dd8abbb",
        "metadata": {}
      },
      {
        "path": "temp_boss_missing/scripts/business_planning.py",
        "type": "file",
        "artifact_id": "1e5a4484-e920-446f-931b-cee5f24a6a33",
        "metadata": {}
      },
      {
        "path": "temp_boss_missing/scripts/team_management.py",
        "type": "file",
        "artifact_id": "5a88085a-8389-4c86-b515-d3606a6ee3ac",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis",
        "type": "directory",
        "artifact_id": "488e4e05-3e23-4051-842c-e87d2f55c09f",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal",
        "type": "directory",
        "artifact_id": "d2cd7ad9-1990-451a-9f56-9c5ce486e724",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/FINAL_TPOT_DEPLOYMENT_PLAN.md",
        "type": "file",
        "artifact_id": "3665e675-0a2c-45f9-a664-4c9b5f94b16c",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/_saved_query.md",
        "type": "file",
        "artifact_id": "78e60709-86e6-42d9-9f63-2e593934b7f5",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/ai_controlled_branches_config.json",
        "type": "file",
        "artifact_id": "420f00c0-732a-4ff6-a38a-ac54dacf91ec",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/ai_controlled_branches_design.md",
        "type": "file",
        "artifact_id": "766de06b-ca15-4708-873d-17824d032960",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/ai_controlled_branches_examples.md",
        "type": "file",
        "artifact_id": "2d29193a-2120-4dec-aca4-daeab9947000",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/ai_controlled_branches_implementation.md",
        "type": "file",
        "artifact_id": "7adc59dc-bc38-44cf-b956-f983be900853",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/ai_self_awareness_api_strategy.md",
        "type": "file",
        "artifact_id": "ab51f763-268d-4a85-a3ad-63211acb6927",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/archive",
        "type": "directory",
        "artifact_id": "2bae66c7-2c5b-48a3-91e3-0c2a57584ab9",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/archive/2024",
        "type": "directory",
        "artifact_id": "d2160cff-6930-4767-a957-a0e44ac2d508",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/archive/deprecated",
        "type": "directory",
        "artifact_id": "7429c9ea-ae96-4d29-b27e-2f94fcfeaa88",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/boss",
        "type": "directory",
        "artifact_id": "66dcf86f-1572-4eae-8c71-e6bfd9089a34",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/boss/data",
        "type": "directory",
        "artifact_id": "acc7e5d9-2045-415f-9563-b8791cff904a",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/boss/docs",
        "type": "directory",
        "artifact_id": "d9578dd1-2c3e-429e-8b32-0075f12c64b7",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/boss/docs/final_architecture.md",
        "type": "file",
        "artifact_id": "6af2566d-0fea-4182-a360-70413530613f",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/boss/scripts",
        "type": "directory",
        "artifact_id": "9fab50ae-8e6e-47b4-9021-0555f27935e1",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/boss/scripts/__init__.py",
        "type": "file",
        "artifact_id": "60b938af-01ce-4a29-a5da-cfef23f57b97",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/boss/scripts/boss_cli.py",
        "type": "file",
        "artifact_id": "42250f9e-fee0-465e-b56e-b60201b3dec6",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/boss/scripts/business_planning.py",
        "type": "file",
        "artifact_id": "25b4fe8c-3a29-46bd-a5d9-0d1c73beea6d",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/boss/scripts/team_management.py",
        "type": "file",
        "artifact_id": "1764f2a1-b138-4688-a45f-bffa7b4575d6",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/commit_strategy.md",
        "type": "file",
        "artifact_id": "d6ca4e11-d443-4105-baf1-bba617211337",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/current_action_plans.md",
        "type": "file",
        "artifact_id": "0f08f357-9f6c-4e13-8bbd-90471877b8bc",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/decision_memo_2025-05-29.md",
        "type": "file",
        "artifact_id": "44753699-e552-4109-82d3-a54415d09890",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/detailed_contribution_audit.md",
        "type": "file",
        "artifact_id": "f9d8b3fe-7463-4402-9485-ab6a1ac0b7f5",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/detailed_separation_plan.md",
        "type": "file",
        "artifact_id": "7af8feb5-862a-4a21-96a9-35e51fbc7021",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/docs",
        "type": "directory",
        "artifact_id": "76522a7b-f5a5-45e1-815f-b0b10fe42ded",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/docs/emergency-3hour-tpot-plan.md",
        "type": "file",
        "artifact_id": "0a917a43-69ab-4acd-ae36-9ddd7bd1361b",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/docs/emergency-strict-mode-implementation.md",
        "type": "file",
        "artifact_id": "17b1f784-2d96-431d-8d81-0b297ba37012",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/docs/strategic-roadmap-context-multiproject-tpot.md",
        "type": "file",
        "artifact_id": "6bfb91ec-87c7-468b-87fc-0c1afd6e0490",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/exit_strategy_and_investment_scenarios.md",
        "type": "file",
        "artifact_id": "ca7fb37b-a86f-4373-8e7d-f1a37b95566b",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/final_implementation_summary.md",
        "type": "file",
        "artifact_id": "8970af49-4fca-4c3f-a348-5cb1588ee122",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/github_issues_for_copilot.md",
        "type": "file",
        "artifact_id": "5d7d1532-93f7-4585-af0b-4b633e927c73",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/grok_delegation_analysis.md",
        "type": "file",
        "artifact_id": "c50e88b0-27af-493d-83c7-97738e7711ca",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/grok_delegation_implementation.md",
        "type": "file",
        "artifact_id": "4e4e07ee-81e1-4a27-86bf-c35f5692f122",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/grok_research_tasks.md",
        "type": "file",
        "artifact_id": "1bfa190e-077f-4a6b-9899-a4c0ca28539f",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/ideas_structuring_plan.md",
        "type": "file",
        "artifact_id": "90168fe6-1721-4a94-94d0-ac3d3cd67c7d",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/implementation_plan.md",
        "type": "file",
        "artifact_id": "f1c8c9a3-5736-4522-a5c5-8fcec4802265",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/learning",
        "type": "directory",
        "artifact_id": "6dd46997-1b5b-475b-ad80-07a155653040",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/learning/experiments",
        "type": "directory",
        "artifact_id": "2763f3b7-1717-4414-9765-27d66ebf5406",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/learning/research",
        "type": "directory",
        "artifact_id": "14d4713c-aa97-4620-9d2b-8f49171b11ed",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/learning/skills",
        "type": "directory",
        "artifact_id": "9fd5a691-ff76-429c-95d7-966e3240c97a",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/management",
        "type": "directory",
        "artifact_id": "13e8bead-cbfe-4e86-b58d-06a1b4dc8105",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/management/project_oversight",
        "type": "directory",
        "artifact_id": "ea794d7b-163f-4e5d-a585-e1986d384d9b",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/management/strategy_planning",
        "type": "directory",
        "artifact_id": "3231a5e7-1860-4f84-ae1f-6988c5f2d3ae",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/management/team_coordination",
        "type": "directory",
        "artifact_id": "7907ebc9-18ae-438e-bb28-e62a04379efd",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/management_system_design.md",
        "type": "file",
        "artifact_id": "32c933be-aef9-4c88-a516-413fa543ec0d",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/personal_life_planning_concept.md",
        "type": "file",
        "artifact_id": "8337d00c-2fd3-43f8-945b-1af7304b1654",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/personal_planning_detailed.md",
        "type": "file",
        "artifact_id": "a9788fea-36b8-4959-8102-e3023e370d26",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/personalized_json_framework.md",
        "type": "file",
        "artifact_id": "62fd3e12-5f15-469a-9c14-f4fc3d6bb8f9",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans",
        "type": "directory",
        "artifact_id": "ce6da48b-55fb-4a19-8a4f-7461a36364a1",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/ai_ecosystem_integration_master_plan.md",
        "type": "file",
        "artifact_id": "69f27d49-eab5-4e0b-a49d-470fc180a1ac",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/ai_ecosystem_integration_working_notes.md",
        "type": "file",
        "artifact_id": "019d8f66-5d51-4abd-b8ac-9b64bb5b76d6",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/drafts",
        "type": "directory",
        "artifact_id": "43e06528-5ec5-4b4b-81aa-e1c180b74828",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/drafts/business",
        "type": "directory",
        "artifact_id": "6597a625-1994-42c3-99fb-81813461121e",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/drafts/personal",
        "type": "directory",
        "artifact_id": "53828de7-92ad-4450-9c3a-52863af94385",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/drafts/team",
        "type": "directory",
        "artifact_id": "54b9fd15-1501-46c0-aaa9-225e4416cda3",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/drafts/team/926_items_processing_execution_plan.md",
        "type": "file",
        "artifact_id": "0e2a3e07-ac03-4745-9e4e-66d05b9d793c",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/drafts/team/sessions_github_integration_plan.md",
        "type": "file",
        "artifact_id": "64f4c2de-5df0-4c2b-a613-8dddbb213e0a",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/notes",
        "type": "directory",
        "artifact_id": "ca14334d-c6f9-464e-bff5-b4a9528cb6f5",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/notes/business",
        "type": "directory",
        "artifact_id": "23817714-b39d-40db-9768-5a1cc8184040",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/notes/personal",
        "type": "directory",
        "artifact_id": "418d5e06-8970-4bec-810e-f1ab14e85058",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/notes/team",
        "type": "directory",
        "artifact_id": "73307673-2a14-4ce9-8530-4f417b698feb",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/processing_results_documentation_plan.md",
        "type": "file",
        "artifact_id": "e446b8a9-82e6-4f56-a640-376b04c2e7cc",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/projects",
        "type": "directory",
        "artifact_id": "b901e7b4-d743-4df8-9104-b65e642d21eb",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/projects/business",
        "type": "directory",
        "artifact_id": "85d155cc-ddcf-4c19-8b67-c41b94e7270b",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/projects/personal",
        "type": "directory",
        "artifact_id": "34beca20-1bf3-4f0f-8478-4feaa717cc19",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/projects/team",
        "type": "directory",
        "artifact_id": "be2e1f56-4ec9-40fa-b6cc-9afb0fcf4b3f",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/prompt_system_development_questions.md",
        "type": "file",
        "artifact_id": "5a11d77d-345b-4203-b495-ca69cf205668",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/tpot_deployment_readiness_assessment.md",
        "type": "file",
        "artifact_id": "fa65dbab-ee3e-4a29-9097-09b7c3fb4c7e",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/processing",
        "type": "directory",
        "artifact_id": "e3688b0e-476d-4984-b4a3-fb08f0be64f0",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/processing/categorized",
        "type": "directory",
        "artifact_id": "559b6404-6535-4ce5-99a8-92198fbf326b",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/processing/conflicts",
        "type": "directory",
        "artifact_id": "75174461-32e1-46b8-8c22-5fedcaa78212",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/processing/reviews",
        "type": "directory",
        "artifact_id": "a761a4f9-99b8-4f11-a802-3c85f2d6cbac",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/project_architecture_decision.md",
        "type": "file",
        "artifact_id": "52135f14-5734-484b-a560-1c233fc34047",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/project_reality_check_2025-05-29.md",
        "type": "file",
        "artifact_id": "bf80cab9-22ab-4bba-a13a-48198010d911",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/project_valuation_and_equity.md",
        "type": "file",
        "artifact_id": "78944051-ad69-44fa-a71a-d0312ea42bb2",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/quick_decision_summary.md",
        "type": "file",
        "artifact_id": "fb477a51-17e2-4be2-b226-7512e1c7bdcf",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/revised_separation_plan.md",
        "type": "file",
        "artifact_id": "ddd65958-acd0-4d22-91ef-bd216ffaf73d",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/statistical_analysis_foundations.md",
        "type": "file",
        "artifact_id": "fb083a96-7b52-4e0f-ba10-1d87620d0543",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/system_integration_plan.md",
        "type": "file",
        "artifact_id": "7eaaef74-110a-4732-86a3-7189b46e9486",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/task_decision_checklist_2025-05-29.md",
        "type": "file",
        "artifact_id": "3242a152-3a07-4443-82d8-26f8f32c5f8a",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/task_processing_strategy_2025-05-29.md",
        "type": "file",
        "artifact_id": "602d982a-af59-4fbb-9e37-79c9ffe38e19",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/team_collaboration_plan.md",
        "type": "file",
        "artifact_id": "f5a21d7a-e223-40ea-8785-027d590358ba",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/templates",
        "type": "directory",
        "artifact_id": "9bfcb11a-6fb5-443f-9308-82a78a5a12a5",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/templates/grok_delegation_template.json",
        "type": "file",
        "artifact_id": "8984329d-0228-4c16-afbe-6fc981f1a7d9",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/templates/workflow_automation_template.json",
        "type": "file",
        "artifact_id": "a2c49240-7952-4aa3-afa5-451bc236f966",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/tools",
        "type": "directory",
        "artifact_id": "5c717493-9a6d-43d0-80da-a63760caf2ab",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/tools/automation",
        "type": "directory",
        "artifact_id": "51e80d5c-fda9-49c9-b200-1f3cb5f14c81",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/tools/dashboards",
        "type": "directory",
        "artifact_id": "fc8953aa-affb-486a-85a3-2492e25b8813",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/tools/productivity",
        "type": "directory",
        "artifact_id": "5230dfa6-f8d6-449e-9ef5-7a6c4262c4cc",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/tpot-portable",
        "type": "directory",
        "artifact_id": "777d1170-d064-4bda-bff2-f6afda3d91cc",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/tpot-portable/config",
        "type": "directory",
        "artifact_id": "4e6e9495-11f4-40ab-9124-c38cf83f08bb",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/tpot-portable/docs",
        "type": "directory",
        "artifact_id": "7793e64d-444a-43aa-89f3-62d699a7d4ac",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/tpot-portable/scripts",
        "type": "directory",
        "artifact_id": "0f7c8c56-239a-42e5-b540-73b10966b2b2",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/tpot_red_os_deployment.md",
        "type": "file",
        "artifact_id": "4e765e21-8e4a-4cc1-9e36-911ed83ea3b7",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/private",
        "type": "directory",
        "artifact_id": "19bb94cf-c11d-4241-9723-d5791c94250b",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/sorting",
        "type": "directory",
        "artifact_id": "99f807c3-cb36-452e-88f6-37d37a3b984a",
        "metadata": {}
      },
      {
        "path": "test_results.json",
        "type": "file",
        "artifact_id": "41d98e12-dda5-4807-8fc8-2cd177065618",
        "metadata": {}
      },
      {
        "path": "test_simple.json",
        "type": "file",
        "artifact_id": "3abfdf5e-fe82-489d-9bad-9d6c11f7f53c",
        "metadata": {}
      },
      {
        "path": "test_struct_quick.json",
        "type": "file",
        "artifact_id": "4cb8eff7-5453-4a56-a6ba-21b7ccb3672a",
        "metadata": {}
      },
      {
        "path": "tests",
        "type": "directory",
        "artifact_id": "20271d80-2673-474a-8072-1d4b44f0cbcb",
        "metadata": {}
      },
      {
        "path": "tests/__init__.py",
        "type": "file",
        "artifact_id": "4e820d63-b70d-4b64-990f-5399593f20ee",
        "metadata": {}
      },
      {
        "path": "universal_test.json",
        "type": "file",
        "artifact_id": "c219e7c7-e816-49a4-a510-2dc02f54d65e",
        "metadata": {}
      },
      {
        "path": "validate_schemas.py",
        "type": "file",
        "artifact_id": "ed3ce0cc-b5d0-4d16-b8c3-7985c5e2882a",
        "metadata": {}
      },
      {
        "path": "validate_sessions.py",
        "type": "file",
        "artifact_id": "e2b316d9-f138-4d5a-b9de-446e69e959e3",
        "metadata": {}
      },
      {
        "path": "verify_llm_response.py",
        "type": "file",
        "artifact_id": "573bfbb6-baf8-4989-b269-fafe30d77a66",
        "metadata": {}
      },
      {
        "path": "workspace_state.json",
        "type": "file",
        "artifact_id": "ee5e7d11-b7db-47b5-9e0b-8ea5eeea985d",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "Session Schema Validation Script for llmstruct",
      "artifact_id": "c1cb6990-2706-4825-b6c9-88f7e99209e7"
    },
    {
      "module_id": "parse_ollama_models",
      "path": "parse_ollama_models.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "\u041f\u0430\u0440\u0441\u0435\u0440 \u0441\u043f\u0438\u0441\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Ollama \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430",
      "artifact_id": "43d241f5-39a2-41de-b5dc-cccb79f030a0"
    },
    {
      "module_id": "parse_ollama_full",
      "path": "parse_ollama_full.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "Full Ollama List Parser + Context Merger for Grok Consultation",
      "artifact_id": "2fdc19cc-889b-45da-bad6-e619d55212ea"
    },
    {
      "module_id": "force_ai_integration",
      "path": "force_ai_integration.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Force AI Integration Script",
      "artifact_id": "98773814-5444-4dd5-8568-93e0732bb93a"
    },
    {
      "module_id": "auto_init_ai_system",
      "path": "auto_init_ai_system.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor",
      "artifact_id": "0aa7522c-8aa8-4dc3-8471-11b186de1c2b"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "JSON Schema Validation Script for llmstruct",
      "artifact_id": "6434dbc2-4bba-4362-beef-c1c22193393b"
    },
    {
      "module_id": "final_system_check",
      "path": "final_system_check.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final System Status Check - LLMStruct Modular CLI Integration",
      "artifact_id": "41403492-ef76-4539-9116-865846c658fc"
    },
    {
      "module_id": "telegram_bot_final",
      "path": "telegram_bot_final.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "\ud83c\udfaf \u0424\u0418\u041d\u0410\u041b\u042c\u041d\u0410\u042f \u0432\u0435\u0440\u0441\u0438\u044f Telegram \u0431\u043e\u0442\u0430 \u0434\u043b\u044f LLMStruct",
      "artifact_id": "24bfb410-1152-4a60-886b-54d4cb9aa4b0"
    },
    {
      "module_id": "parse_ollama_for_grok",
      "path": "parse_ollama_for_grok.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "03b0c4bf-af13-435b-b206-fe6ee3b7e742"
    },
    {
      "module_id": "final_system_validation",
      "path": "final_system_validation.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final system validation script for LLMStruct Modular CLI Integration",
      "artifact_id": "421ac323-8e02-41d3-b465-3fbe589b9d48"
    },
    {
      "module_id": "install_ai_integration",
      "path": "install_ai_integration.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor",
      "artifact_id": "57ffac98-f8a7-453b-aaaa-fc0704dc04b8"
    },
    {
      "module_id": "debug_terminal",
      "path": "debug_terminal.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Debug Terminal Script - Fallback for when terminal output is not visible",
      "artifact_id": "cbe7d622-c1ba-425c-9b1c-d5b437ed1832"
    },
    {
      "module_id": "telegram_bot_enhanced",
      "path": "telegram_bot_enhanced.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "a5b648e5-2823-4441-8762-6f8557ba02d7"
    },
    {
      "module_id": "run_ai_diagnostics",
      "path": "run_ai_diagnostics.py",
      "category": "core",
      "functions": 19,
      "classes": 0,
      "summary": "Comprehensive AI Self-Awareness Diagnostics Runner",
      "artifact_id": "2200ca44-0839-4a46-9d00-7a8b87f6175c"
    },
    {
      "module_id": "start_development",
      "path": "start_development.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "LLMStruct Development Startup Script",
      "artifact_id": "0fa759dc-78ec-4ede-a4dd-c5e742bf1a23"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "4c2591dd-9a4f-4640-ae59-acd3075a371c"
    },
    {
      "module_id": "parse_ollama_minimal",
      "path": "parse_ollama_minimal.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "Minimal Ollama Parser - Clean JSON without extra analytics",
      "artifact_id": "4b2f751d-2a28-443d-8116-c606f8749e65"
    },
    {
      "module_id": "struct_cache_manager",
      "path": "struct_cache_manager.py",
      "category": "core",
      "functions": 12,
      "classes": 1,
      "summary": "\ud83d\ude80 Smart struct.json Cache Manager for [code] Mode",
      "artifact_id": "4aaeed0f-6157-4b69-8c34-1345d9e555cb"
    },
    {
      "module_id": "chat_bot_final",
      "path": "chat_bot_final.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "LLMStruct Chat Bot Final - \u041f\u043e\u043b\u043d\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 FastAPI",
      "artifact_id": "4ebb3bb6-d0d1-40be-995e-1049de62d4bd"
    },
    {
      "module_id": "monitor_system",
      "path": "monitor_system.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "System Monitor - Continuous logging for debugging terminal issues",
      "artifact_id": "1b3b378c-0551-43f0-9b34-dff109ae1af7"
    },
    {
      "module_id": "ollama_full_parser",
      "path": "ollama_full_parser.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "873da1b8-744e-4e86-8709-6c61bb0d7ea6"
    },
    {
      "module_id": "telegram_bot_test",
      "path": "telegram_bot_test.py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "\ud83e\uddea \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 FastAPI",
      "artifact_id": "06efd80b-ff43-413a-8207-b0bf7959d379"
    },
    {
      "module_id": "parse_ollama_fixed",
      "path": "parse_ollama_fixed.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "Fixed Ollama List Parser + Context Merger for Grok Consultation",
      "artifact_id": "3a8fd572-64de-4aef-8e34-8b2e76c1ea15"
    },
    {
      "module_id": "board_cli",
      "path": "board_cli.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "CLI Kanban Board for llmstruct tasks and ideas",
      "artifact_id": "7cc4a88c-e3ee-4e95-b9bb-cce4812e4616"
    },
    {
      "module_id": "parse_ollama_improved",
      "path": "parse_ollama_improved.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "Improved Ollama List Parser + Context Merger for Grok Consultation",
      "artifact_id": "48488770-bd2d-453d-8cf1-62b5ec7eaa1d"
    },
    {
      "module_id": "bot_api_server",
      "path": "bot_api_server.py",
      "category": "core",
      "functions": 19,
      "classes": 3,
      "summary": "\ud83e\udd16 Enhanced Bot API Server",
      "artifact_id": "c9184e35-1611-4980-afc3-c21cf97c893d"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "5475fb1a-21b4-4be5-b112-d39dc5ccc9ac"
    },
    {
      "module_id": "bot_file_operations",
      "path": "bot_file_operations.py",
      "category": "core",
      "functions": 14,
      "classes": 1,
      "summary": "\ud83d\udcc1 Bot File Operations Module",
      "artifact_id": "b2f58d96-28f6-4d1f-b631-30566d670874"
    },
    {
      "module_id": "chat_bot_working",
      "path": "chat_bot_working.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "\ud83d\ude80 ENHANCED Telegram Bot \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
      "artifact_id": "40114aa9-2d75-4ac9-a811-f5bd89c415b7"
    },
    {
      "module_id": "chat_bot",
      "path": "chat_bot.py",
      "category": "core",
      "functions": 17,
      "classes": 1,
      "summary": "LLMStruct Chat Bot - \u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 Cursor + Ollama",
      "artifact_id": "569af54a-0f1a-4161-b5a7-c40eaf31d0a4"
    },
    {
      "module_id": "fastapi_ollama_server_working",
      "path": "fastapi_ollama_server_working.py",
      "category": "core",
      "functions": 16,
      "classes": 4,
      "summary": "\ud83d\ude80 \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f LLMStruct",
      "artifact_id": "ed06563e-3b65-48d8-b268-8543775b46b1"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Core CLI functionality and main loop.",
      "artifact_id": "040ea2bd-83c3-4c15-bb67-1f65c781f5cd"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "functions": 20,
      "classes": 1,
      "summary": "Workspace State & Mode Management System",
      "artifact_id": "df997091-156d-4eea-8647-818b50c2df77"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "35f9ab6b-2966-4308-863d-9f2d95844798"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "889a1af0-11c6-4dd2-a1fb-5959414bdcd5"
    },
    {
      "module_id": "src.llmstruct.workflow_orchestrator",
      "path": "src/llmstruct/workflow_orchestrator.py",
      "category": "core",
      "functions": 27,
      "classes": 5,
      "summary": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture",
      "artifact_id": "bb862ffe-45f2-4683-add3-291d87c6567c"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "GitHub visualization/graph feature (gh-view-v1)",
      "artifact_id": "bbbfeef0-d3ba-4e18-a39b-8835d7688f3f"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "dda85bf2-c378-4a74-a9e1-6de28ef6371f"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "functions": 26,
      "classes": 5,
      "summary": "LLMStruct Copilot Integration Module",
      "artifact_id": "47f6bb80-30c5-4bf1-940a-d800cb8258c3"
    },
    {
      "module_id": "src.llmstruct.ai_workflow_middleware",
      "path": "src/llmstruct/ai_workflow_middleware.py",
      "category": "core",
      "functions": 22,
      "classes": 4,
      "summary": "AI Workflow Middleware - Forces AI Integration with LLMStruct",
      "artifact_id": "3067bb51-7524-4987-b3dc-cdade5fb87a2"
    },
    {
      "module_id": "src.llmstruct.ai_cli_integration",
      "path": "src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "functions": 14,
      "classes": 1,
      "summary": "AI Self-Awareness CLI Integration Module",
      "artifact_id": "03dc5ba9-2a27-4df2-82a9-02a31b5e4700"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "CLI configuration management.",
      "artifact_id": "9e070cd9-4b16-4161-99b7-3fd97e373051"
    },
    {
      "module_id": "src.llmstruct.cursor_integration",
      "path": "src/llmstruct/cursor_integration.py",
      "category": "core",
      "functions": 22,
      "classes": 6,
      "summary": "Cursor IDE Integration Module",
      "artifact_id": "4424464c-f2a8-45e0-a30b-cbc1ff3c127a"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "02abbb11-f59d-4ea0-8ae9-e21ce4c4f068"
    },
    {
      "module_id": "src.llmstruct.transpiler",
      "path": "src/llmstruct/transpiler.py",
      "category": "core",
      "functions": 10,
      "classes": 3,
      "summary": "AI-Powered Universal Transpiler",
      "artifact_id": "f33c6693-5da5-4066-a403-0b0563140c7e"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "7a9a485e-ff8d-45c2-98ae-1efa6e75967b"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "f356d9e7-7d3b-4ced-a855-b9d756cca049"
    },
    {
      "module_id": "src.llmstruct.metrics_tracker",
      "path": "src/llmstruct/metrics_tracker.py",
      "category": "core",
      "functions": 29,
      "classes": 4,
      "summary": "LLMStruct Metrics Tracker - \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "artifact_id": "b721531c-c779-4191-885b-fc92996efe49"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "functions": 29,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "artifact_id": "02ce7a66-0bbc-47c4-86aa-2761f30413df"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "functions": 20,
      "classes": 5,
      "summary": "Smart Context Orchestration for LLMStruct",
      "artifact_id": "6616dd41-3e56-4966-aa6f-0c2727fc89c8"
    },
    {
      "module_id": "src.llmstruct.ai_self_monitor",
      "path": "src/llmstruct/ai_self_monitor.py",
      "category": "core",
      "functions": 16,
      "classes": 4,
      "summary": "AI Self-Monitoring System",
      "artifact_id": "2a51b3b9-461a-4e17-87d6-5158a3bf7df7"
    },
    {
      "module_id": "src.llmstruct.cursor_ai_bridge",
      "path": "src/llmstruct/cursor_ai_bridge.py",
      "category": "core",
      "functions": 21,
      "classes": 1,
      "summary": "Cursor AI Bridge - API Layer for AI Assistant Integration",
      "artifact_id": "43e36da3-d908-49c9-84c7-f1aaca3b5998"
    },
    {
      "module_id": "src.llmstruct.ai_self_awareness",
      "path": "src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "functions": 47,
      "classes": 8,
      "summary": "AI Self-Awareness Enhancement Module",
      "artifact_id": "98ab52e5-0618-4a12-9be5-58de6e0756ec"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "CLI utility functions.",
      "artifact_id": "3a448199-7dbe-4b85-8f23-fb118bfca085"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "functions": 22,
      "classes": 1,
      "summary": "CLI command processing and handlers.",
      "artifact_id": "eb8b1d00-0cc9-467d-a04f-a2369cf8b5a4"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "f181a815-d493-4fef-b4cf-4b19fe9f5307"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "cea3eb7d-2c3b-48a8-95ac-20eed00e5cdc"
    },
    {
      "module_id": "src.llmstruct.api.app",
      "path": "src/llmstruct/api/app.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Main FastAPI application for LLMStruct",
      "artifact_id": "c161998a-fabc-43ca-93ed-e63cc7b504db"
    },
    {
      "module_id": "src.llmstruct.api.routes.continue_adapter",
      "path": "src/llmstruct/api/routes/continue_adapter.py",
      "category": "core",
      "functions": 5,
      "classes": 2,
      "summary": "Continue API Adapter",
      "artifact_id": "fefacc81-6715-462a-ae5a-81938b6a8521"
    },
    {
      "module_id": "src.llmstruct.api.services.llm_service",
      "path": "src/llmstruct/api/services/llm_service.py",
      "category": "core",
      "functions": 17,
      "classes": 4,
      "summary": "LLM Service",
      "artifact_id": "d85dbe8c-4d93-475c-a6ee-5d299c528058"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "d0df777c-1929-4f83-ba9c-8c7c43df66d9"
    },
    {
      "module_id": "src.llmstruct.generators.go_json_generator",
      "path": "src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "8edb4c12-960d-48ea-8ebe-00d1915d6b17"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "d508282a-f155-4753-966f-e3a4506adf9d"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "e5111601-363e-41bb-86cb-bd52f6c91e51"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "b0060dd1-6696-44b0-8b94-abc688c382e9"
    },
    {
      "module_id": "src.llmstruct.parsers.universal_converter",
      "path": "src/llmstruct/parsers/universal_converter.py",
      "category": "core",
      "functions": 14,
      "classes": 3,
      "summary": "Universal Code Converter - Orchestrates all language parsers",
      "artifact_id": "3dc9a58d-8334-484a-a6e0-9ef15347b0b8"
    },
    {
      "module_id": "src.llmstruct.parsers.go_analyzer",
      "path": "src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430",
      "artifact_id": "2a6f3b15-8456-491b-a56d-5e60ddfce180"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "9d3afd7a-d8f9-408e-a707-feeac913655d"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "",
      "artifact_id": "7f0710b6-9b79-4823-83c2-ad2d53213ee5"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "f4a5ab3d-2284-47bf-b973-55f787c1dd52"
    },
    {
      "module_id": "temp_boss_missing.scripts.business_planning",
      "path": "temp_boss_missing/scripts/business_planning.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "Business Planning Module",
      "artifact_id": "034c4815-a4dd-42b8-bf34-a611edf106bd"
    },
    {
      "module_id": "temp_boss_missing.scripts.team_management",
      "path": "temp_boss_missing/scripts/team_management.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "Team Management Module",
      "artifact_id": "df6734aa-378d-43e6-835a-182f5a8e2744"
    },
    {
      "module_id": "temp_boss_missing.scripts.boss_cli",
      "path": "temp_boss_missing/scripts/boss_cli.py",
      "category": "core",
      "functions": 25,
      "classes": 1,
      "summary": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f",
      "artifact_id": "4e39af28-cd89-499b-81ba-360989dace2d"
    },
    {
      "module_id": "temp_boss_missing.scripts.__init__",
      "path": "temp_boss_missing/scripts/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "b5fca801-9d4a-4fe8-b7dd-e89f875ea249"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project.",
      "artifact_id": "ae13ee4f-3748-44ce-85c3-cb479a0136cc"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project.",
      "artifact_id": "308d4733-ccf9-427f-ae63-057f6dba36e5"
    },
    {
      "module_id": "integrations.telegram_bot.mp002_progress_bot",
      "path": "integrations/telegram_bot/mp002_progress_bot.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "MP-002A Progress Bot - Telegram \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Smart Wrapper \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438",
      "artifact_id": "af73e2b7-2dd9-41fd-bbf9-9fb34a4488af"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "b97cef5b-fabd-4e46-86dd-16e8d99e159e"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "0152443d-ca49-42f6-9813-8f79e9fd1e6b"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "53850f3a-7542-4550-9f43-8bd87648031c"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "de2fe1d8-1000-4c4d-a559-f94e307f3ec8"
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Session Management CLI",
      "artifact_id": "34b79e51-13ed-40a5-aae8-4ec66414044a"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Automatic struct.json update script",
      "artifact_id": "2b79c3b7-1a42-413f-9a43-ce2f3c6c8287"
    },
    {
      "module_id": "scripts.fix_hardcoded_usernames",
      "path": "scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "functions": 12,
      "classes": 2,
      "summary": "Fix Hardcoded Usernames Script",
      "artifact_id": "5b65aa6a-2fa9-4561-9671-4926d2a6be68"
    },
    {
      "module_id": "scripts.create_github_issues",
      "path": "scripts/create_github_issues.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "GitHub Issues Creator for AI-Dogfooding Project",
      "artifact_id": "b248b2a7-e565-4e14-af84-8a99f189c7fa"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Export script for GitHub Projects integration",
      "artifact_id": "9c8cb104-ef4f-442b-a7db-8ede98ee6d3f"
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "6352bb40-e384-4cbc-ab66-47702fbcf1e0"
    },
    {
      "module_id": "scripts.process_926_items",
      "path": "scripts/process_926_items.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "926 Items Processing Script - Updated Implementation",
      "artifact_id": "9bcfd0ce-d0d5-464c-92a9-3a28333f0a58"
    },
    {
      "module_id": "scripts.fix_github_script",
      "path": "scripts/fix_github_script.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Quick fix for GitHub issues creation script",
      "artifact_id": "2bfdcf2c-192c-49fe-895d-4824255c8648"
    },
    {
      "module_id": "scripts.github_sync_manager",
      "path": "scripts/github_sync_manager.py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub",
      "artifact_id": "3bcda7e8-4e45-437d-9efa-9ded654121f1"
    },
    {
      "module_id": "scripts.create_comprehensive_index",
      "path": "scripts/create_comprehensive_index.py",
      "category": "core",
      "functions": 37,
      "classes": 2,
      "summary": "Comprehensive Project Index Creator",
      "artifact_id": "a851a12f-96e4-4a02-b5bb-211ceada98fa"
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "JSON Validation Script",
      "artifact_id": "87f3b0bf-03f2-4840-a20a-4b3ce4302b59"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "dc781660-962e-4b12-bb2d-c33ae15f610b"
    },
    {
      "module_id": "scripts.create_tasks_index",
      "path": "scripts/create_tasks_index.py",
      "category": "core",
      "functions": 18,
      "classes": 3,
      "summary": "Tasks Index Creator",
      "artifact_id": "8dda7231-8716-4d8a-9981-4c8cde20b6c9"
    },
    {
      "module_id": "scripts.github_sync_manager_enhanced",
      "path": "scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "functions": 28,
      "classes": 3,
      "summary": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout",
      "artifact_id": "b40e64a1-14bf-4d5c-8877-2c0bf630dad2"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "89e1751f-5583-4f20-bb69-dc32ef2de9f0"
    },
    {
      "module_id": "scripts.validate_epics",
      "path": "scripts/validate_epics.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "Epic Data Validator",
      "artifact_id": "339edc3e-5326-449e-90ed-045378ac8bb6"
    },
    {
      "module_id": "scripts.epic_roadmap_manager",
      "path": "scripts/epic_roadmap_manager.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439",
      "artifact_id": "7a8996ae-3bab-45de-9910-04f2d7c5ec46"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "159a7561-57dc-42e8-9c02-a82f61c28673"
    },
    {
      "module_id": "scripts.team.__init__",
      "path": "scripts/team/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "4cb82973-0061-4a27-b4d1-0dcf5a884627"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "artifact_id": "28e9b75d-38fd-4c80-bc0e-aeed636d68b6"
    },
    {
      "module_id": "temp_personal_analysis.personal.boss.scripts.business_planning",
      "path": "temp_personal_analysis/personal/boss/scripts/business_planning.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "Business Planning Module",
      "artifact_id": "97bb6eb1-f253-4605-90ea-374bb72777d5"
    },
    {
      "module_id": "temp_personal_analysis.personal.boss.scripts.team_management",
      "path": "temp_personal_analysis/personal/boss/scripts/team_management.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "Team Management Module",
      "artifact_id": "3c35fbd8-8515-40e8-be4e-c8c5ecfbdbd1"
    },
    {
      "module_id": "temp_personal_analysis.personal.boss.scripts.boss_cli",
      "path": "temp_personal_analysis/personal/boss/scripts/boss_cli.py",
      "category": "core",
      "functions": 25,
      "classes": 1,
      "summary": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f",
      "artifact_id": "71389784-9279-4d20-96c8-da00d6ff24f3"
    },
    {
      "module_id": "temp_personal_analysis.personal.boss.scripts.__init__",
      "path": "temp_personal_analysis/personal/boss/scripts/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "8ae9cadb-b943-4145-a695-0feff3c21a8f"
    },
    {
      "module_id": ".personal.boss.scripts.boss_cli",
      "path": ".personal/boss/scripts/boss_cli.py",
      "category": "core",
      "functions": 29,
      "classes": 1,
      "summary": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f",
      "artifact_id": "ab4ea744-c5e5-4a7f-9898-7faa2fc1c9fb"
    },
    {
      "module_id": "archive.telegram_experiments.send_cursor_response",
      "path": "archive/telegram_experiments/send_cursor_response.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "0bd5953d-2432-4200-a156-91e6682a37a3"
    },
    {
      "module_id": "archive.telegram_experiments.cursor_telegram_reader_enhanced",
      "path": "archive/telegram_experiments/cursor_telegram_reader_enhanced.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Enhanced Cursor Telegram Reader",
      "artifact_id": "a4c16476-1aa4-443d-baf4-15e2899311f2"
    },
    {
      "module_id": "archive.telegram_experiments.api_memory_endpoints",
      "path": "archive/telegram_experiments/api_memory_endpoints.py",
      "category": "core",
      "functions": 9,
      "classes": 3,
      "summary": "API Endpoints \u0434\u043b\u044f \u043f\u0430\u043c\u044f\u0442\u0438 Telegram \u0431\u043e\u0442\u0430",
      "artifact_id": "b7f33d0f-e572-41cd-ac23-5a5fadcefadf"
    },
    {
      "module_id": "archive.telegram_experiments.fastapi_ollama_server",
      "path": "archive/telegram_experiments/fastapi_ollama_server.py",
      "category": "core",
      "functions": 14,
      "classes": 4,
      "summary": "\ud83d\ude80 \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f LLMStruct",
      "artifact_id": "1482d2b3-e046-4cf2-9b1f-c0f2045822f1"
    },
    {
      "module_id": "archive.telegram_experiments.dummy_work_executor",
      "path": "archive/telegram_experiments/dummy_work_executor.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Dummy Work Executor - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0432\u0443\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u0439 \u0441\u0432\u044f\u0437\u0438 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0447\u0435\u0440\u0435\u0437 Telegram",
      "artifact_id": "616af452-2497-441a-be7f-2118718c3ae5"
    },
    {
      "module_id": "archive.telegram_experiments.cursor_telegram_reader",
      "path": "archive/telegram_experiments/cursor_telegram_reader.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Cursor Telegram Reader - \u0427\u0438\u0442\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0437 Telegram \u0431\u043e\u0442\u0430 \u0434\u043b\u044f Cursor",
      "artifact_id": "522ca700-2722-4bf5-98c8-c2fb708ca17a"
    },
    {
      "module_id": "archive.telegram_experiments.cursor_bot_messenger",
      "path": "archive/telegram_experiments/cursor_bot_messenger.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Cursor Bot Messenger - \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0447\u0435\u0440\u0435\u0437 Telegram",
      "artifact_id": "16d83e84-04eb-4ae9-bf0c-ad1ec61bf0e8"
    },
    {
      "module_id": "archive.telegram_experiments.send_test_message",
      "path": "archive/telegram_experiments/send_test_message.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "Test message sender to Telegram",
      "artifact_id": "165223d6-ccba-416c-9a66-13583bdf95b0"
    },
    {
      "module_id": "archive.telegram_experiments.cursor_integration",
      "path": "archive/telegram_experiments/cursor_integration.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "\ud83c\udfaf Cursor Integration for Telegram Master Controller",
      "artifact_id": "c8e12b55-c917-4791-a8ed-44cf5fe83fbe"
    },
    {
      "module_id": "archive.telegram_experiments.cursor_simple_integration",
      "path": "archive/telegram_experiments/cursor_simple_integration.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "\u041f\u0440\u043e\u0441\u0442\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 Cursor \u0441 Telegram \u0431\u043e\u0442\u043e\u043c",
      "artifact_id": "f9b70d25-6cbe-46dc-b28d-93bb2d0d586f"
    },
    {
      "module_id": "archive.telegram_experiments.start_simple_telegram",
      "path": "archive/telegram_experiments/start_simple_telegram.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "\u0421\u043a\u0440\u0438\u043f\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f Cursor \u2194 Telegram",
      "artifact_id": "e922a5f2-bb55-4e2f-bb22-b5d619b4e93a"
    },
    {
      "module_id": "archive.telegram_experiments.chat_bot_fastapi_enhanced",
      "path": "archive/telegram_experiments/chat_bot_fastapi_enhanced.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "\ud83d\ude80 ENHANCED Telegram Bot \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
      "artifact_id": "2c6ad960-4e53-48f5-b782-425183c97167"
    },
    {
      "module_id": "archive.telegram_bots.chat_bot_enhanced",
      "path": "archive/telegram_bots/chat_bot_enhanced.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "Enhanced LLMStruct Telegram Bot",
      "artifact_id": "40e85f9f-b738-46dd-98fb-2506daff8ab3"
    },
    {
      "module_id": "archive.telegram_bots.cursor_telegram_bridge",
      "path": "archive/telegram_bots/cursor_telegram_bridge.py",
      "category": "core",
      "functions": 7,
      "classes": 1,
      "summary": "Cursor \u2194 Telegram Bridge",
      "artifact_id": "dd58be72-8aaa-470f-9848-a733e20163a7"
    },
    {
      "module_id": "archive.telegram_bots.start_ollama_bot",
      "path": "archive/telegram_bots/start_ollama_bot.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "Quick launcher for Ollama Chat Bot",
      "artifact_id": "7fb680df-1883-4b08-ac46-4fd47f166c98"
    },
    {
      "module_id": "archive.telegram_bots.ollama_chat_bot",
      "path": "archive/telegram_bots/ollama_chat_bot.py",
      "category": "core",
      "functions": 23,
      "classes": 6,
      "summary": "LLMStruct Ollama Chat Bot",
      "artifact_id": "e0ceac30-261e-4ce9-a46a-cae88d5c659e"
    },
    {
      "module_id": "archive.telegram_bots.demo_bot_features",
      "path": "archive/telegram_bots/demo_bot_features.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 Ollama Chat Bot",
      "artifact_id": "04caa2d0-9ecd-4621-bd06-f5d0aa3fce2d"
    },
    {
      "module_id": "archive.telegram_bots.cursor_reporter",
      "path": "archive/telegram_bots/cursor_reporter.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "Cursor Task Reporter",
      "artifact_id": "883aa011-3cd5-4456-bc8d-b1450725cf10"
    },
    {
      "module_id": "archive.telegram_bots.ollama_api_bot",
      "path": "archive/telegram_bots/ollama_api_bot.py",
      "category": "core",
      "functions": 28,
      "classes": 7,
      "summary": "Ollama Chat Bot \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0439 FastAPI API \u0432\u043c\u0435\u0441\u0442\u043e CLI",
      "artifact_id": "03d33042-198d-45d5-a9ea-640dde296f44"
    },
    {
      "module_id": "archive.telegram_bots.start_api_bot",
      "path": "archive/telegram_bots/start_api_bot.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "\u041b\u0430\u0443\u043d\u0447\u0435\u0440 \u0434\u043b\u044f Ollama API Bot \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430\u043c\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 API",
      "artifact_id": "8872dd39-ab09-42a7-ba46-33094dead5c2"
    },
    {
      "module_id": "archive.telegram_bots.telegram_cursor_master",
      "path": "archive/telegram_bots/telegram_cursor_master.py",
      "category": "core",
      "functions": 17,
      "classes": 1,
      "summary": "\ud83c\udfaf LLMStruct Telegram Master Controller",
      "artifact_id": "bdba2773-e917-47ab-ab3a-6bcf90d12b23"
    },
    {
      "module_id": "cursor_workflow_integration.scripts.install_ai_integration",
      "path": "cursor_workflow_integration/scripts/install_ai_integration.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor",
      "artifact_id": "5d12425c-749c-4cd5-9bb4-7c3d195c8841"
    },
    {
      "module_id": "cursor_workflow_integration.files.auto_init_ai_system",
      "path": "cursor_workflow_integration/files/auto_init_ai_system.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor",
      "artifact_id": "723625f8-26f1-4aa2-85f0-d38897d5ca34"
    }
  ],
  "modules": [
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "module_doc": "Session Schema Validation Script for llmstruct\nValidates session management JSON files against their schemas.\nFocused validation for session system only.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            21,
            31
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": [
            33,
            52
          ],
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            54,
            124
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            13,
            19
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "print",
          "open",
          "json.load"
        ],
        "validate_json_against_schema": [
          "validator.iter_errors",
          "print",
          "len",
          "str",
          "Draft7Validator",
          "list"
        ],
        "main": [
          "print",
          "errors.append",
          "load_json",
          "validate_json_against_schema"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "c1cb6990-2706-4825-b6c9-88f7e99209e7"
    },
    {
      "module_id": "parse_ollama_models",
      "path": "parse_ollama_models.py",
      "category": "core",
      "module_doc": "\u041f\u0430\u0440\u0441\u0435\u0440 \u0441\u043f\u0438\u0441\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Ollama \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430",
      "functions": [
        {
          "name": "parse_ollama_models",
          "docstring": "\u041f\u0430\u0440\u0441\u0438\u0442 \u0444\u0430\u0439\u043b \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Ollama \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            8,
            44
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "parse_model_block",
          "docstring": "\u041f\u0430\u0440\u0441\u0438\u0442 \u0431\u043b\u043e\u043a \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043c\u043e\u0434\u0435\u043b\u0438",
          "line_range": [
            46,
            105
          ],
          "parameters": [
            "name",
            "block"
          ],
          "decorators": []
        },
        {
          "name": "categorize_models",
          "docstring": "\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u043c \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044e",
          "line_range": [
            107,
            156
          ],
          "parameters": [
            "models"
          ],
          "decorators": []
        },
        {
          "name": "analyze_for_rtx3060ti",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u0438 \u0441 RTX 3060 Ti (8GB VRAM)",
          "line_range": [
            158,
            179
          ],
          "parameters": [
            "models"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_ollama_models": [
          "content.split",
          "len",
          "parse_model_block",
          "f.read",
          "current_block.append",
          "open",
          "line.strip",
          "models.append",
          "re.match"
        ],
        "parse_model_block": [
          "len",
          "capabilities.append",
          "enumerate",
          "int",
          "prev_line.isdigit",
          "sizes.append",
          "re.match",
          "line.isdigit",
          "prev_line.replace"
        ],
        "categorize_models": [
          "any"
        ],
        "analyze_for_rtx3060ti": [
          "sorted",
          "compatible_models.append",
          "max",
          "float",
          "size.endswith"
        ]
      },
      "dependencies": [
        "json",
        "re"
      ],
      "hash": null,
      "artifact_id": "43d241f5-39a2-41de-b5dc-cccb79f030a0"
    },
    {
      "module_id": "parse_ollama_full",
      "path": "parse_ollama_full.py",
      "category": "core",
      "module_doc": "Full Ollama List Parser + Context Merger for Grok Consultation\nParses ollama_list.txt (2103 lines) and merges with existing context",
      "functions": [
        {
          "name": "parse_ollama_list",
          "docstring": "Parse ollama_list.txt and return structured data",
          "line_range": [
            11,
            92
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_md_to_json",
          "docstring": "Convert markdown content to structured JSON",
          "line_range": [
            94,
            124
          ],
          "parameters": [
            "md_content"
          ],
          "decorators": []
        },
        {
          "name": "create_flattened_models_structure",
          "docstring": "Create a flattened structure that's more LLM-friendly",
          "line_range": [
            126,
            222
          ],
          "parameters": [
            "models"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            224,
            301
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "parse_pulls",
          "docstring": "",
          "line_range": [
            150,
            157
          ],
          "parameters": [
            "pulls_str"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_ollama_list": [
          "c.isdigit",
          "len",
          "any",
          "open",
          "current_model.get",
          "f.readlines",
          "models.append",
          "line.isdigit",
          "line.endswith"
        ],
        "convert_md_to_json": [
          "line.strip",
          "md_content.split",
          "current_content.append",
          "line.startswith"
        ],
        "create_flattened_models_structure": [
          "len"
        ],
        "parse_pulls": [
          "float",
          "pulls_str.endswith"
        ],
        "main": [
          "len",
          "print",
          "convert_md_to_json",
          "json.dump",
          "create_flattened_models_structure",
          "f.read",
          "enumerate",
          "parse_ollama_list",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "re"
      ],
      "hash": null,
      "artifact_id": "2fdc19cc-889b-45da-bad6-e619d55212ea"
    },
    {
      "module_id": "force_ai_integration",
      "path": "force_ai_integration.py",
      "category": "core",
      "module_doc": "Force AI Integration Script\nInitializes middleware and monitoring to ensure AI uses llmstruct system.",
      "functions": [
        {
          "name": "force_ai_integration",
          "docstring": "Force AI to use llmstruct system.",
          "line_range": [
            18,
            106
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_integration_status",
          "docstring": "Check current AI integration status.",
          "line_range": [
            109,
            138
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "force_ai_integration": [
          "config_file.exists",
          "print",
          "json.dump",
          "str",
          "monitor.get_real_time_guidance",
          "middleware.process_ai_request",
          "initialize_ai_monitor",
          "open",
          "initialize_ai_middleware",
          "Path",
          "record_ai_usage"
        ],
        "check_integration_status": [
          "monitor.analyze_behavior_trends",
          "print",
          "middleware.get_middleware_stats",
          "get_ai_monitor",
          "get_ai_middleware"
        ]
      },
      "dependencies": [
        "AIWorkflowMode",
        "Path",
        "get_ai_middleware",
        "get_ai_monitor",
        "initialize_ai_middleware",
        "initialize_ai_monitor",
        "json",
        "llmstruct.ai_self_monitor",
        "llmstruct.ai_workflow_middleware",
        "pathlib",
        "record_ai_usage",
        "sys"
      ],
      "hash": null,
      "artifact_id": "98773814-5444-4dd5-8568-93e0732bb93a"
    },
    {
      "module_id": "auto_init_ai_system",
      "path": "auto_init_ai_system.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor\n\u042d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439\nENHANCED: \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 workflow \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439, \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438 \u0438 context tags",
      "functions": [
        {
          "name": "auto_initialize_ai_system",
          "docstring": "\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            27,
            91
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_current_workflow_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 workflow \u0441\u0435\u0441\u0441\u0438\u0438 \u0438 workspace mode",
          "line_range": [
            93,
            129
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_workflow_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 workflow \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            131,
            215
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "switch_workspace_mode",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c workspace mode (\u0434\u043b\u044f CLI integration)",
          "line_range": [
            217,
            233
          ],
          "parameters": [
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            235,
            245
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "search_ai_capabilities",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 AI \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e struct.json \u0438 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            247,
            314
          ],
          "parameters": [
            "query"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f AI \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435",
          "line_range": [
            316,
            347
          ],
          "parameters": [
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "get_epic_sessions_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u0441\u0435\u0445 \u044d\u043f\u0438\u043a-\u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            349,
            398
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "create_epic_session",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            400,
            421
          ],
          "parameters": [
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "switch_to_session",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            423,
            441
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "get_available_sessions",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            443,
            504
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "session_management_commands",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438",
          "line_range": [
            506,
            532
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "auto_initialize_ai_system": [
          "src_path.exists",
          "print",
          "len",
          "AI_CAPABILITIES.discover_all_capabilities",
          "get_current_workflow_context",
          "str",
          "logger.info",
          "SystemCapabilityDiscovery",
          "Path",
          "f.exists",
          "logger.error"
        ],
        "get_current_workflow_context": [
          "workspace.get",
          "logger.warning",
          "workspace_file.exists",
          "session_file.exists",
          "logger.info",
          "epic_data.get",
          "open",
          "json.load",
          "Path",
          "session.get",
          "roadmap_file.exists",
          "roadmap.get"
        ],
        "get_workflow_status": [
          "workspace_manager.get_epic_summaries",
          "workspace_manager.get_mode_description",
          "open",
          "json.load",
          "e.get",
          "Path",
          "workspace_manager.get_session_info",
          "get_metrics_tracker",
          "metrics_tracker.get_session_summary",
          "struct_status.upper",
          "workspace_manager._get_git_branch",
          "track_workflow_event",
          "str",
          "WorkspaceStateManager",
          "roadmap.get",
          "struct_file.exists",
          "len",
          "session_info.get",
          "workspace_manager.get_current_mode",
          "roadmap_file.exists",
          "time.time"
        ],
        "switch_workspace_mode": [
          "get_current_workflow_context",
          "str",
          "logger.info",
          "WorkspaceStateManager",
          "ws.set_mode",
          "Path",
          "logger.error"
        ],
        "get_ai_status": [
          "get_workflow_status",
          "AI_STATUS.get",
          "AI_CAPABILITIES.get_enhanced_capabilities_summary",
          "auto_initialize_ai_system"
        ],
        "search_ai_capabilities": [
          "struct_file.exists",
          "len",
          "track_task_complete",
          "track_workflow_event",
          "str",
          "results.append",
          "enumerate",
          "int",
          "struct_data.get",
          "cls.get",
          "track_task_start",
          "open",
          "json.load",
          "query.lower",
          "file_info.get",
          "func.get",
          "Path",
          "time.time"
        ],
        "get_ai_context": [
          "len",
          "auto_initialize_ai_system",
          "get_current_workflow_context",
          "AI_CAPABILITIES.discover_all_capabilities",
          "json.dumps",
          "logger.error"
        ],
        "get_epic_sessions_status": [
          "status_lines.append",
          "sessions_file.exists",
          "logger.error",
          "epic_data.get",
          "open",
          "json.load",
          "Path",
          "session.get",
          "roadmap_file.exists",
          "roadmap.get"
        ],
        "create_epic_session": [
          "os.system",
          "epic_id.split",
          "logger.info",
          "Path",
          "logger.error"
        ],
        "switch_to_session": [
          "os.system",
          "get_current_workflow_context",
          "logger.info",
          "Path",
          "logger.error"
        ],
        "get_available_sessions": [
          "sessions_file.exists",
          "sessions_data.get",
          "sessions_list.append",
          "current_session_file.exists",
          "logger.error",
          "epic_data.get",
          "current_data.get",
          "open",
          "json.load",
          "Path",
          "session.get",
          "roadmap_file.exists",
          "roadmap.get"
        ],
        "session_management_commands": []
      },
      "dependencies": [
        "Path",
        "SystemCapabilityDiscovery",
        "WorkspaceStateManager",
        "datetime",
        "get_metrics_tracker",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.workspace",
        "logging",
        "os",
        "pathlib",
        "src.llmstruct.metrics_tracker",
        "src.llmstruct.workspace",
        "sys",
        "time",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event"
      ],
      "hash": null,
      "artifact_id": "0aa7522c-8aa8-4dc3-8471-11b186de1c2b"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "module_doc": "JSON Schema Validation Script for llmstruct\nValidates all enhanced JSON files against their appropriate schemas.\nPart of TSK-130 implementation.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            24,
            34
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            56,
            193
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            15,
            21
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "print",
          "open",
          "json.load"
        ],
        "validate_json_against_schema": [
          "str",
          "print",
          "validate"
        ],
        "main": [
          "print",
          "errors.append",
          "load_json",
          "validate_json_against_schema"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "6434dbc2-4bba-4362-beef-c1c22193393b"
    },
    {
      "module_id": "final_system_check",
      "path": "final_system_check.py",
      "category": "core",
      "module_doc": "Final System Status Check - LLMStruct Modular CLI Integration\nComprehensive validation of all completed components",
      "functions": [
        {
          "name": "check_system_status",
          "docstring": "Comprehensive system status check",
          "line_range": [
            12,
            155
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_system_status": [
          "len",
          "print",
          "t.get",
          "open",
          "json.load",
          "i.get",
          "data.get"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "41403492-ef76-4539-9116-865846c658fc"
    },
    {
      "module_id": "telegram_bot_final",
      "path": "telegram_bot_final.py",
      "category": "core",
      "module_doc": "\ud83c\udfaf \u0424\u0418\u041d\u0410\u041b\u042c\u041d\u0410\u042f \u0432\u0435\u0440\u0441\u0438\u044f Telegram \u0431\u043e\u0442\u0430 \u0434\u043b\u044f LLMStruct\n- \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 FastAPI \u2705\n- \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 SSL \u043e\u0448\u0438\u0431\u043e\u043a \u2705  \n- \u0410\u0432\u0442\u043e\u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u2705\n- \u041f\u043e\u043b\u043d\u043e\u0435 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u2705",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            292,
            325
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            42,
            53
          ],
          "parameters": [
            "self",
            "token",
            "api_base_url"
          ],
          "decorators": []
        },
        {
          "name": "get_session",
          "docstring": "",
          "line_range": [
            55,
            59
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_call",
          "docstring": "\u0423\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 API \u0441 \u043f\u043e\u0432\u0442\u043e\u0440\u0430\u043c\u0438",
          "line_range": [
            61,
            92
          ],
          "parameters": [
            "self",
            "endpoint",
            "method",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "save_user_message",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            94,
            106
          ],
          "parameters": [
            "self",
            "user_id",
            "username",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            108,
            116
          ],
          "parameters": [
            "self",
            "user_id",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
          "line_range": [
            118,
            133
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_system_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            135,
            137
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
          "line_range": [
            139,
            150
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            152,
            176
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
          "line_range": [
            178,
            200
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "memory_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
          "line_range": [
            202,
            222
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "help_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
          "line_range": [
            224,
            243
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            245,
            272
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "error_handler",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043e\u0448\u0438\u0431\u043e\u043a",
          "line_range": [
            274,
            284
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
          "line_range": [
            286,
            290
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "FinalLLMStructBot",
          "docstring": "",
          "line_range": [
            41,
            290
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                42,
                53
              ],
              "parameters": [
                "self",
                "token",
                "api_base_url"
              ]
            },
            {
              "name": "get_session",
              "docstring": "",
              "line_range": [
                55,
                59
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_call",
              "docstring": "\u0423\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 API \u0441 \u043f\u043e\u0432\u0442\u043e\u0440\u0430\u043c\u0438",
              "line_range": [
                61,
                92
              ],
              "parameters": [
                "self",
                "endpoint",
                "method",
                "data"
              ]
            },
            {
              "name": "save_user_message",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                94,
                106
              ],
              "parameters": [
                "self",
                "user_id",
                "username",
                "message"
              ]
            },
            {
              "name": "get_user_history",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                108,
                116
              ],
              "parameters": [
                "self",
                "user_id",
                "limit"
              ]
            },
            {
              "name": "chat_with_ollama",
              "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
              "line_range": [
                118,
                133
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "get_system_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                135,
                137
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
              "line_range": [
                139,
                150
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                152,
                176
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
              "line_range": [
                178,
                200
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "memory_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
              "line_range": [
                202,
                222
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "help_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
              "line_range": [
                224,
                243
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                245,
                272
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "error_handler",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043e\u0448\u0438\u0431\u043e\u043a",
              "line_range": [
                274,
                284
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
              "line_range": [
                286,
                290
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.setup_handlers",
          "Application.builder",
          "logger.info"
        ],
        "get_session": [
          "aiohttp.ClientSession",
          "aiohttp.ClientTimeout"
        ],
        "api_call": [
          "logger.debug",
          "response.json",
          "logger.warning",
          "asyncio.sleep",
          "range",
          "session.post",
          "self.get_session",
          "session.get",
          "logger.error"
        ],
        "save_user_message": [
          "datetime.now",
          "self.api_call",
          "logger.info"
        ],
        "get_user_history": [
          "len",
          "result.get",
          "self.api_call",
          "logger.info"
        ],
        "chat_with_ollama": [
          "result.get",
          "self.api_call",
          "logger.info",
          "logger.error"
        ],
        "get_system_status": [
          "self.api_call"
        ],
        "setup_handlers": [
          "MessageHandler",
          "logger.info",
          "CommandHandler"
        ],
        "start_command": [
          "self.save_user_message",
          "logger.info",
          "logger.error"
        ],
        "status_command": [
          "status.get",
          "self.save_user_message",
          "logger.info",
          "self.get_system_status",
          "logger.error"
        ],
        "memory_command": [
          "self.get_user_history",
          "msg.get",
          "self.save_user_message",
          "logger.info",
          "enumerate",
          "logger.error"
        ],
        "help_command": [
          "logger.info",
          "logger.error"
        ],
        "handle_message": [
          "self.save_user_message",
          "self.chat_with_ollama",
          "logger.info",
          "thinking_msg.edit_text",
          "logger.error"
        ],
        "error_handler": [
          "asyncio.sleep",
          "isinstance",
          "logger.info",
          "logger.error"
        ],
        "cleanup": [
          "logger.info"
        ],
        "main": [
          "print",
          "BotCommand",
          "FinalLLMStructBot",
          "os.getenv",
          "logger.info",
          "logger.error"
        ]
      },
      "dependencies": [
        "Application",
        "BotCommand",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "NetworkError",
        "Path",
        "RetryAfter",
        "TimedOut",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "json",
        "logging",
        "os",
        "pathlib",
        "telegram",
        "telegram.error",
        "telegram.ext",
        "time"
      ],
      "hash": null,
      "artifact_id": "24bfb410-1152-4a60-886b-54d4cb9aa4b0"
    },
    {
      "module_id": "parse_ollama_for_grok",
      "path": "parse_ollama_for_grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "03b0c4bf-af13-435b-b206-fe6ee3b7e742"
    },
    {
      "module_id": "final_system_validation",
      "path": "final_system_validation.py",
      "category": "core",
      "module_doc": "Final system validation script for LLMStruct Modular CLI Integration",
      "functions": [
        {
          "name": "main",
          "docstring": "Run comprehensive system validation",
          "line_range": [
            13,
            238
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "len",
          "print",
          "next",
          "__import__",
          "getattr",
          "task.get",
          "open",
          "create_cli_core",
          "json.load",
          "status.upper",
          "subprocess.run"
        ]
      },
      "dependencies": [
        "Path",
        "create_cli_core",
        "json",
        "llmstruct.cli_core",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "421ac323-8e02-41d3-b465-3fbe589b9d48"
    },
    {
      "module_id": "install_ai_integration",
      "path": "install_ai_integration.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor\n\u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u043b\u044e\u0431\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
      "functions": [
        {
          "name": "install_ai_integration",
          "docstring": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u0432 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            12,
            58
          ],
          "parameters": [
            "target_project"
          ],
          "decorators": []
        },
        {
          "name": "adapt_cursorrules",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c .cursorrules \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            60,
            99
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "adapt_auto_init",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c auto_init_ai_system.py \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            101,
            123
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "create_simplified_auto_init",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e auto_init \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0431\u0435\u0437 llmstruct",
          "line_range": [
            125,
            189
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438",
          "line_range": [
            191,
            207
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "install_ai_integration": [
          "print",
          "adapt_auto_init",
          "source_path.exists",
          "adapt_cursorrules",
          "vscode_dir.mkdir",
          "shutil.copy2",
          "target_root.exists",
          "Path"
        ],
        "adapt_cursorrules": [
          "len",
          "content.replace",
          "print",
          "project_root.rglob",
          "cursorrules_path.read_text",
          "cursorrules_path.exists",
          "cursorrules_path.write_text",
          "list"
        ],
        "adapt_auto_init": [
          "content.replace",
          "print",
          "auto_init_path.exists",
          "create_simplified_auto_init",
          "auto_init_path.write_text",
          "auto_init_path.read_text"
        ],
        "create_simplified_auto_init": [],
        "main": [
          "install_ai_integration",
          "len",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "shutil",
        "sys"
      ],
      "hash": null,
      "artifact_id": "57ffac98-f8a7-453b-aaaa-fc0704dc04b8"
    },
    {
      "module_id": "debug_terminal",
      "path": "debug_terminal.py",
      "category": "core",
      "module_doc": "Debug Terminal Script - Fallback for when terminal output is not visible\nSaves all output to files for manual inspection",
      "functions": [
        {
          "name": "run_with_output_capture",
          "docstring": "Run command and capture output to both console and file.",
          "line_range": [
            13,
            78
          ],
          "parameters": [
            "command",
            "description"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run common diagnostic commands with output capture.",
          "line_range": [
            80,
            110
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "run_with_output_capture": [
          "len",
          "print",
          "f.write",
          "open",
          "subprocess.run"
        ],
        "main": [
          "print",
          "results.append",
          "run_with_output_capture"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "cbe7d622-c1ba-425c-9b1c-d5b437ed1832"
    },
    {
      "module_id": "telegram_bot_enhanced",
      "path": "telegram_bot_enhanced.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "a5b648e5-2823-4441-8762-6f8557ba02d7"
    },
    {
      "module_id": "run_ai_diagnostics",
      "path": "run_ai_diagnostics.py",
      "category": "core",
      "module_doc": "Comprehensive AI Self-Awareness Diagnostics Runner\nEnhanced with Cursor integration testing, multi-AI orchestration validation,\npersonal planning bridge testing, and real-time performance metrics.",
      "functions": [
        {
          "name": "print_section",
          "docstring": "Print a formatted section header.",
          "line_range": [
            20,
            23
          ],
          "parameters": [
            "title",
            "emoji"
          ],
          "decorators": []
        },
        {
          "name": "print_subsection",
          "docstring": "Print a formatted subsection header.",
          "line_range": [
            25,
            28
          ],
          "parameters": [
            "title",
            "emoji"
          ],
          "decorators": []
        },
        {
          "name": "test_basic_ai_awareness",
          "docstring": "Test basic AI self-awareness capabilities.",
          "line_range": [
            30,
            51
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_cursor_integration",
          "docstring": "Test Cursor IDE integration capabilities.",
          "line_range": [
            53,
            124
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_real_time_metrics",
          "docstring": "Test real-time metrics calculation.",
          "line_range": [
            126,
            146
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_personal_planning_bridge",
          "docstring": "Test personal planning bridge functionality.",
          "line_range": [
            148,
            196
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_session_management",
          "docstring": "Test session management capabilities.",
          "line_range": [
            198,
            233
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_configuration_loading",
          "docstring": "Test configuration file loading.",
          "line_range": [
            235,
            255
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_performance_benchmark",
          "docstring": "Run performance benchmarks for AI operations.",
          "line_range": [
            257,
            287
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_diagnostic_report",
          "docstring": "Generate a comprehensive diagnostic report.",
          "line_range": [
            289,
            333
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "continuous_monitoring_mode",
          "docstring": "Run continuous monitoring of AI system health.",
          "line_range": [
            335,
            382
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_specific_component",
          "docstring": "Test a specific AI component in detail.",
          "line_range": [
            384,
            423
          ],
          "parameters": [
            "component_name"
          ],
          "decorators": []
        },
        {
          "name": "test_cli_commands",
          "docstring": "Test CLI command processing capabilities.",
          "line_range": [
            425,
            447
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_context_scenarios",
          "docstring": "Test context orchestrator scenarios.",
          "line_range": [
            449,
            466
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_copilot_features",
          "docstring": "Test copilot manager features.",
          "line_range": [
            468,
            485
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_integration_health_check",
          "docstring": "Run comprehensive integration health check.",
          "line_range": [
            487,
            524
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_optimization_suggestions",
          "docstring": "Generate automated optimization suggestions based on diagnostics.",
          "line_range": [
            526,
            597
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_stress_test",
          "docstring": "Run stress test on AI system.",
          "line_range": [
            599,
            651
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run comprehensive AI diagnostics.",
          "line_range": [
            653,
            738
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "print_section": [
          "len",
          "print"
        ],
        "print_subsection": [
          "len",
          "print"
        ],
        "test_basic_ai_awareness": [
          "len",
          "print",
          "discovery.get_comprehensive_ai_status",
          "print_section",
          "discovery.discover_all_capabilities",
          "SystemCapabilityDiscovery",
          "discovery.get_enhanced_capabilities_summary"
        ],
        "test_cursor_integration": [
          "len",
          "context_data.get",
          "print",
          "create_cursor_integration",
          "response.get",
          "print_section",
          "print_subsection",
          "delegation.get",
          "cursor_integration.get_comprehensive_cursor_response"
        ],
        "test_real_time_metrics": [
          "discovery._get_real_system_load",
          "print",
          "print_section",
          "discovery.get_cursor_status_report",
          "SystemCapabilityDiscovery",
          "discovery._calculate_real_cache_hit_rate"
        ],
        "test_personal_planning_bridge": [
          "len",
          "print",
          "print_section",
          "enumerate",
          "bridge.get_goal_aligned_suggestions",
          "PersonalPlanningCursorBridge",
          "top_feature.get",
          "guidance.get",
          "bridge.get_priority_guidance"
        ],
        "test_session_management": [
          "print",
          "session_manager.start_session",
          "print_section",
          "session_manager.save_session_context",
          "CursorSessionManager"
        ],
        "test_configuration_loading": [
          "len",
          "print",
          "config_path.exists",
          "print_section",
          "open",
          "json.load",
          "Path"
        ],
        "run_performance_benchmark": [
          "print",
          "create_cursor_integration",
          "print_section",
          "discovery.discover_all_capabilities",
          "SystemCapabilityDiscovery",
          "time.time"
        ],
        "generate_diagnostic_report": [
          "len",
          "print",
          "json.dump",
          "Path",
          "print_section",
          "discovery.discover_all_capabilities",
          "SystemCapabilityDiscovery",
          "open",
          "time.strftime"
        ],
        "continuous_monitoring_mode": [
          "discovery._get_real_system_load",
          "len",
          "print",
          "print_section",
          "discovery.discover_all_capabilities",
          "SystemCapabilityDiscovery",
          "time.sleep",
          "discovery._calculate_real_cache_hit_rate",
          "time.strftime"
        ],
        "test_specific_component": [
          "len",
          "print",
          "test_context_scenarios",
          "print_section",
          "component_name.upper",
          "discovery.discover_all_capabilities",
          "enumerate",
          "test_copilot_features",
          "test_cli_commands",
          "SystemCapabilityDiscovery",
          "list"
        ],
        "test_cli_commands": [
          "CLIConfig",
          "print",
          "CommandProcessor",
          "CLIUtils"
        ],
        "test_context_scenarios": [
          "create_context_orchestrator",
          "print"
        ],
        "test_copilot_features": [
          "hasattr",
          "feature.replace",
          "initialize_copilot",
          "print"
        ],
        "run_integration_health_check": [
          "print",
          "response.get",
          "create_cursor_integration",
          "print_section",
          "cursor_integration.get_comprehensive_cursor_response"
        ],
        "generate_optimization_suggestions": [
          "len",
          "suggestions.append",
          "print",
          "print_section",
          "discovery.discover_all_capabilities",
          "enumerate",
          "SystemCapabilityDiscovery"
        ],
        "run_stress_test": [
          "print",
          "context_data.get",
          "create_cursor_integration",
          "print_section",
          "discovery.discover_all_capabilities",
          "range",
          "enumerate",
          "delegation.get",
          "SystemCapabilityDiscovery",
          "time.time"
        ],
        "main": [
          "run_stress_test",
          "len",
          "print",
          "print_section",
          "generate_optimization_suggestions",
          "run_integration_health_check",
          "test_specific_component",
          "continuous_monitoring_mode",
          "test_func",
          "time.time"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CursorSessionManager",
        "Path",
        "PersonalPlanningCursorBridge",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "create_cursor_integration",
        "initialize_copilot",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.cursor_integration",
        "os",
        "pathlib",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "2200ca44-0839-4a46-9d00-7a8b87f6175c"
    },
    {
      "module_id": "start_development",
      "path": "start_development.py",
      "category": "core",
      "module_doc": "LLMStruct Development Startup Script\nConvenient one-command startup for daily development workflow.\nEnhanced with AI Workflow Middleware and Self-Monitoring for seamless llmstruct integration.",
      "functions": [
        {
          "name": "print_header",
          "docstring": "Print startup header.",
          "line_range": [
            17,
            21
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_ai_integration_layer",
          "docstring": "Initialize AI integration layer - this is the NEW seamless integration",
          "line_range": [
            23,
            73
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_environment",
          "docstring": "Check if development environment is properly set up.",
          "line_range": [
            75,
            110
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_workflow_orchestrator",
          "docstring": "Initialize and test WorkflowOrchestrator integration.",
          "line_range": [
            112,
            156
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_cursor_ai_bridge",
          "docstring": "Initialize and test CursorAIBridge integration.",
          "line_range": [
            158,
            198
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "sync_architecture_components",
          "docstring": "Sync with existing llmstruct architecture components and AI integration.",
          "line_range": [
            200,
            240
          ],
          "parameters": [
            "orchestrator",
            "ai_integration"
          ],
          "decorators": []
        },
        {
          "name": "run_system_health_check",
          "docstring": "Run comprehensive system health check.",
          "line_range": [
            242,
            263
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_optimization_suggestions",
          "docstring": "Get AI optimization suggestions with WorkflowOrchestrator integration.",
          "line_range": [
            265,
            320
          ],
          "parameters": [
            "orchestrator"
          ],
          "decorators": []
        },
        {
          "name": "check_git_status",
          "docstring": "Check git repository status.",
          "line_range": [
            322,
            368
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_context",
          "docstring": "Show current project context and priorities.",
          "line_range": [
            370,
            411
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_useful_commands",
          "docstring": "Show useful commands for development.",
          "line_range": [
            413,
            472
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main startup routine with AI Workflow Middleware and WorkflowOrchestrator integration.",
          "line_range": [
            474,
            593
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "print_header": [
          "print"
        ],
        "initialize_ai_integration_layer": [
          "print",
          "str",
          "middleware.process_ai_request",
          "initialize_ai_monitor",
          "initialize_ai_middleware",
          "Path",
          "record_ai_usage"
        ],
        "check_environment": [
          "hasattr",
          "Path",
          "print",
          "missing_files.append"
        ],
        "initialize_workflow_orchestrator": [
          "orchestrator.get_current_context",
          "print",
          "len",
          "struct_analysis.get",
          "dup_analysis.get",
          "WorkflowOrchestrator",
          "context.get",
          "stats.get",
          "system_caps.get",
          "copilot_status.get"
        ],
        "initialize_cursor_ai_bridge": [
          "len",
          "print",
          "ai_rec.get",
          "bridge.ai_get_context",
          "CursorAIBridge",
          "project_state.get",
          "context.get",
          "bridge.ai_analyze_task",
          "task_analysis.get"
        ],
        "sync_architecture_components": [
          "print",
          "middleware.get_middleware_stats",
          "orchestrator.sync_with_existing_architecture",
          "ai_integration.get",
          "sync_results.items"
        ],
        "run_system_health_check": [
          "print",
          "subprocess.run"
        ],
        "get_optimization_suggestions": [
          "duplication_analysis.get",
          "print",
          "suggestions.append",
          "orchestrator.analyze_codebase_for_duplicates",
          "enumerate",
          "r.get",
          "line.strip",
          "subprocess.run"
        ],
        "check_git_status": [
          "len",
          "print",
          "subprocess.run",
          "changes.split"
        ],
        "show_current_context": [
          "bridge_data.get",
          "print",
          "vision.get",
          "bridge_file.exists",
          "enumerate",
          "init_data.get",
          "open",
          "json.load",
          "init_file.exists",
          "business_obj.get",
          "Path"
        ],
        "show_useful_commands": [
          "print"
        ],
        "main": [
          "monitor.analyze_behavior_trends",
          "print",
          "show_current_context",
          "get_optimization_suggestions",
          "initialize_cursor_ai_bridge",
          "middleware.get_middleware_stats",
          "initialize_ai_integration_layer",
          "show_useful_commands",
          "run_system_health_check",
          "sync_architecture_components",
          "ai_integration.get",
          "check_git_status",
          "initialize_workflow_orchestrator",
          "check_environment",
          "print_header"
        ]
      },
      "dependencies": [
        "AIWorkflowMode",
        "CursorAIBridge",
        "Path",
        "WorkflowOrchestrator",
        "initialize_ai_middleware",
        "initialize_ai_monitor",
        "json",
        "llmstruct.ai_self_monitor",
        "llmstruct.ai_workflow_middleware",
        "llmstruct.cursor_ai_bridge",
        "llmstruct.workflow_orchestrator",
        "os",
        "pathlib",
        "record_ai_usage",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "0fa759dc-78ec-4ede-a4dd-c5e742bf1a23"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json_file",
          "docstring": "Load a JSON file and return its contents.",
          "line_range": [
            15,
            25
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_with_struct",
          "docstring": "Verify llm_response.json against struct.json.",
          "line_range": [
            28,
            71
          ],
          "parameters": [
            "response_text",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_without_struct",
          "docstring": "Verify llm_response.json based on LLMstruct principles.",
          "line_range": [
            74,
            108
          ],
          "parameters": [
            "response_text"
          ],
          "decorators": []
        },
        {
          "name": "generate_metrics",
          "docstring": "Generate metrics for the response per EXT-004.",
          "line_range": [
            111,
            141
          ],
          "parameters": [
            "response_data",
            "server_log"
          ],
          "decorators": []
        },
        {
          "name": "update_tasks_json",
          "docstring": "Append a new task to tasks.json.",
          "line_range": [
            144,
            151
          ],
          "parameters": [
            "tasks_file",
            "new_task"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            154,
            225
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json_file": [
          "logging.error",
          "open",
          "json.load"
        ],
        "verify_response_with_struct": [
          "e.startswith",
          "expected_extensions.issubset",
          "logging.error",
          "struct_data.get",
          "set",
          "expected_goals.issubset",
          "expected_files.issubset",
          "logging.info",
          "re.findall"
        ],
        "verify_response_without_struct": [
          "response_text.lower",
          "principle.lower",
          "logging.error",
          "expected_extensions.issubset",
          "set",
          "expected_goals.issubset",
          "expected_files.issubset",
          "logging.info",
          "re.findall"
        ],
        "generate_metrics": [
          "len",
          "response_text.split",
          "datetime.utcnow",
          "server_log.get",
          "re.findall"
        ],
        "update_tasks_json": [
          "load_json_file",
          "json.dump",
          "tasks.get",
          "open",
          "logging.info"
        ],
        "main": [
          "load_json_file",
          "argparse.ArgumentParser",
          "json.dump",
          "update_tasks_json",
          "open",
          "logging.info",
          "verify_response_with_struct",
          "verify_response_without_struct",
          "generate_metrics",
          "parser.add_argument",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "argparse",
        "datetime",
        "json",
        "logging",
        "os",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "4c2591dd-9a4f-4640-ae59-acd3075a371c"
    },
    {
      "module_id": "parse_ollama_minimal",
      "path": "parse_ollama_minimal.py",
      "category": "core",
      "module_doc": "Minimal Ollama Parser - Clean JSON without extra analytics\nJust structure original data properly, remove irrelevant entries",
      "functions": [
        {
          "name": "parse_ollama_minimal",
          "docstring": "Minimal parser - just clean structure",
          "line_range": [
            10,
            90
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "create_compact_json",
          "docstring": "Create compact JSON structure",
          "line_range": [
            92,
            137
          ],
          "parameters": [
            "models",
            "md_content"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            139,
            177
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_ollama_minimal": [
          "c.isdigit",
          "len",
          "any",
          "open",
          "f.readlines",
          "line.strip",
          "models.append",
          "line.isdigit",
          "line.endswith"
        ],
        "create_compact_json": [
          "len",
          "md_content.split",
          "current_content.append",
          "line.startswith",
          "line.strip"
        ],
        "main": [
          "len",
          "print",
          "parse_ollama_minimal",
          "json.dump",
          "create_compact_json",
          "f.read",
          "enumerate",
          "open",
          "f.readlines"
        ]
      },
      "dependencies": [
        "json",
        "os",
        "re"
      ],
      "hash": null,
      "artifact_id": "4b2f751d-2a28-443d-8116-c606f8749e65"
    },
    {
      "module_id": "struct_cache_manager",
      "path": "struct_cache_manager.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 Smart struct.json Cache Manager for [code] Mode\n\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "functions": [
        {
          "name": "test_cache_performance",
          "docstring": "\u0422\u0435\u0441\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u0435\u0448\u0430",
          "line_range": [
            321,
            355
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            17,
            29
          ],
          "parameters": [
            "self",
            "struct_file"
          ],
          "decorators": []
        },
        {
          "name": "get_file_hash",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0445\u0435\u0448 \u0444\u0430\u0439\u043b\u0430 struct.json \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439",
          "line_range": [
            31,
            38
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_cache_valid",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043a\u0435\u0448\u0430",
          "line_range": [
            40,
            54
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "build_cache",
          "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u043f\u043e\u043b\u043d\u044b\u0439 \u043a\u0435\u0448 \u0438\u0437 struct.json",
          "line_range": [
            56,
            150
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "search_modules",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043c\u043e\u0434\u0443\u043b\u0435\u0439",
          "line_range": [
            152,
            177
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        },
        {
          "name": "search_functions",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
          "line_range": [
            179,
            205
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        },
        {
          "name": "search_classes",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043a\u043b\u0430\u0441\u0441\u043e\u0432",
          "line_range": [
            207,
            233
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        },
        {
          "name": "get_module_details",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0435\u0442\u0430\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044f",
          "line_range": [
            235,
            248
          ],
          "parameters": [
            "self",
            "module_name"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_stats",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043a\u0435\u0448\u0430",
          "line_range": [
            250,
            265
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "invalidate_cache",
          "docstring": "\u0418\u043d\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043a\u0435\u0448",
          "line_range": [
            267,
            281
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "smart_search",
          "docstring": "\u0423\u043c\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0432\u0441\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c \u0441 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432",
          "line_range": [
            283,
            319
          ],
          "parameters": [
            "self",
            "query",
            "search_type"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "StructCacheManager",
          "docstring": "\u0423\u043c\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043a\u0435\u0448\u0430 \u0434\u043b\u044f struct.json \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 [code]",
          "line_range": [
            14,
            319
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                17,
                29
              ],
              "parameters": [
                "self",
                "struct_file"
              ]
            },
            {
              "name": "get_file_hash",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0445\u0435\u0448 \u0444\u0430\u0439\u043b\u0430 struct.json \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439",
              "line_range": [
                31,
                38
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_cache_valid",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043a\u0435\u0448\u0430",
              "line_range": [
                40,
                54
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "build_cache",
              "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u043f\u043e\u043b\u043d\u044b\u0439 \u043a\u0435\u0448 \u0438\u0437 struct.json",
              "line_range": [
                56,
                150
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "search_modules",
              "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043c\u043e\u0434\u0443\u043b\u0435\u0439",
              "line_range": [
                152,
                177
              ],
              "parameters": [
                "self",
                "query"
              ]
            },
            {
              "name": "search_functions",
              "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
              "line_range": [
                179,
                205
              ],
              "parameters": [
                "self",
                "query"
              ]
            },
            {
              "name": "search_classes",
              "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043a\u043b\u0430\u0441\u0441\u043e\u0432",
              "line_range": [
                207,
                233
              ],
              "parameters": [
                "self",
                "query"
              ]
            },
            {
              "name": "get_module_details",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0435\u0442\u0430\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044f",
              "line_range": [
                235,
                248
              ],
              "parameters": [
                "self",
                "module_name"
              ]
            },
            {
              "name": "get_cache_stats",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043a\u0435\u0448\u0430",
              "line_range": [
                250,
                265
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "invalidate_cache",
              "docstring": "\u0418\u043d\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043a\u0435\u0448",
              "line_range": [
                267,
                281
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "smart_search",
              "docstring": "\u0423\u043c\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0432\u0441\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c \u0441 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432",
              "line_range": [
                283,
                319
              ],
              "parameters": [
                "self",
                "query",
                "search_type"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "print"
        ],
        "get_file_hash": [
          "hashlib.md5",
          "f.read",
          "open"
        ],
        "is_cache_valid": [
          "self.get_file_hash",
          "open",
          "metadata.get",
          "json.load"
        ],
        "build_cache": [
          "len",
          "print",
          "json.dump",
          "c.get",
          "datetime.now",
          "module.get",
          "self.get_file_hash",
          "cls.get",
          "open",
          "json.load",
          "func.get",
          "m.get",
          "data.get",
          "f.get",
          "time.time"
        ],
        "search_modules": [
          "len",
          "print",
          "name.lower",
          "results.append",
          "self.is_cache_valid",
          "self.build_cache",
          "modules.items",
          "open",
          "json.load",
          "query.lower"
        ],
        "search_functions": [
          "sorted",
          "print",
          "name.lower",
          "results.append",
          "self.is_cache_valid",
          "self.build_cache",
          "open",
          "functions.items",
          "json.load",
          "query.lower"
        ],
        "search_classes": [
          "len",
          "sorted",
          "print",
          "name.lower",
          "results.append",
          "self.is_cache_valid",
          "self.build_cache",
          "open",
          "classes.items",
          "json.load",
          "query.lower"
        ],
        "get_module_details": [
          "print",
          "modules.get",
          "self.is_cache_valid",
          "self.build_cache",
          "open",
          "json.load"
        ],
        "get_cache_stats": [
          "str",
          "open",
          "self.is_cache_valid",
          "json.load"
        ],
        "invalidate_cache": [
          "cache_file.unlink",
          "print",
          "cache_file.exists"
        ],
        "smart_search": [
          "self.search_functions",
          "print",
          "json.dump",
          "open",
          "json.load",
          "query.lower",
          "self.search_modules",
          "self.search_classes"
        ],
        "test_cache_performance": [
          "len",
          "print",
          "cache_manager.build_cache",
          "cache_manager.get_cache_stats",
          "sum",
          "stats.get",
          "StructCacheManager",
          "cache_manager.smart_search",
          "time.time"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "hashlib",
        "json",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "4aaeed0f-6157-4b69-8c34-1345d9e555cb"
    },
    {
      "module_id": "chat_bot_final",
      "path": "chat_bot_final.py",
      "category": "core",
      "module_doc": "LLMStruct Chat Bot Final - \u041f\u043e\u043b\u043d\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 FastAPI\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c: API \u0432\u043c\u0435\u0441\u0442\u043e CLI, \u0431\u0435\u0437 Markdown parse_mode, \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u043f\u0430\u043c\u044f\u0442\u044c",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            31,
            47
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "get_http_session",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 HTTP \u0441\u0435\u0441\u0441\u0438\u0438 \u0434\u043b\u044f API \u0432\u044b\u0437\u043e\u0432\u043e\u0432",
          "line_range": [
            49,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_call",
          "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f API \u0432\u044b\u0437\u043e\u0432\u043e\u0432",
          "line_range": [
            55,
            69
          ],
          "parameters": [
            "self",
            "endpoint",
            "method",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "save_user_memory",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            71,
            78
          ],
          "parameters": [
            "self",
            "user_id",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            80,
            83
          ],
          "parameters": [
            "self",
            "user_id",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            85,
            100
          ],
          "parameters": [
            "self",
            "message",
            "user_id"
          ],
          "decorators": []
        },
        {
          "name": "get_system_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            102,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_available_models",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            106,
            109
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "log_user_message",
          "docstring": "\u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            111,
            124
          ],
          "parameters": [
            "self",
            "user_info",
            "message",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            126,
            133
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            135,
            162
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "help_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
          "line_range": [
            164,
            186
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
          "line_range": [
            188,
            205
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "memory_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
          "line_range": [
            207,
            221
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "models_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /models",
          "line_range": [
            223,
            234
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            236,
            255
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
          "line_range": [
            257,
            260
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "signal_handler",
          "docstring": "",
          "line_range": [
            266,
            268
          ],
          "parameters": [
            "sig",
            "frame"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "FinalLLMStructBot",
          "docstring": "\u0424\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0431\u043e\u0442\u0430 \u0441 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
          "line_range": [
            28,
            260
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                31,
                47
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "get_http_session",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 HTTP \u0441\u0435\u0441\u0441\u0438\u0438 \u0434\u043b\u044f API \u0432\u044b\u0437\u043e\u0432\u043e\u0432",
              "line_range": [
                49,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_call",
              "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f API \u0432\u044b\u0437\u043e\u0432\u043e\u0432",
              "line_range": [
                55,
                69
              ],
              "parameters": [
                "self",
                "endpoint",
                "method",
                "data"
              ]
            },
            {
              "name": "save_user_memory",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                71,
                78
              ],
              "parameters": [
                "self",
                "user_id",
                "message"
              ]
            },
            {
              "name": "get_user_history",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                80,
                83
              ],
              "parameters": [
                "self",
                "user_id",
                "limit"
              ]
            },
            {
              "name": "chat_with_ollama",
              "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                85,
                100
              ],
              "parameters": [
                "self",
                "message",
                "user_id"
              ]
            },
            {
              "name": "get_system_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                102,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_available_models",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                106,
                109
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "log_user_message",
              "docstring": "\u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                111,
                124
              ],
              "parameters": [
                "self",
                "user_info",
                "message",
                "chat_id"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                126,
                133
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                135,
                162
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "help_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
              "line_range": [
                164,
                186
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
              "line_range": [
                188,
                205
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "memory_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
              "line_range": [
                207,
                221
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "models_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /models",
              "line_range": [
                223,
                234
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                236,
                255
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
              "line_range": [
                257,
                260
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.setup_handlers",
          "Path",
          "Application.builder",
          "logger.info"
        ],
        "get_http_session": [
          "aiohttp.ClientSession"
        ],
        "api_call": [
          "response.json",
          "str",
          "session.post",
          "session.get",
          "self.get_http_session",
          "logger.error"
        ],
        "save_user_memory": [
          "datetime.now",
          "self.api_call"
        ],
        "get_user_history": [
          "result.get",
          "self.api_call"
        ],
        "chat_with_ollama": [
          "result.get",
          "self.get_user_history",
          "self.api_call",
          "h.get"
        ],
        "get_system_status": [
          "self.api_call"
        ],
        "get_available_models": [
          "result.get",
          "self.api_call"
        ],
        "log_user_message": [
          "f.write",
          "user_info.get",
          "datetime.now",
          "open"
        ],
        "setup_handlers": [
          "MessageHandler",
          "CommandHandler"
        ],
        "start_command": [
          "self.log_user_message"
        ],
        "help_command": [],
        "status_command": [
          "status.get",
          "self.get_system_status"
        ],
        "memory_command": [
          "str",
          "self.get_user_history",
          "msg.get",
          "enumerate"
        ],
        "models_command": [
          "self.get_available_models"
        ],
        "handle_message": [
          "str",
          "self.save_user_memory",
          "self.chat_with_ollama",
          "self.log_user_message"
        ],
        "cleanup": [],
        "signal_handler": [
          "sys.exit",
          "logger.info"
        ]
      },
      "dependencies": [
        "Any",
        "Application",
        "BotCommand",
        "CommandHandler",
        "ContextTypes",
        "Dict",
        "MessageHandler",
        "Optional",
        "Path",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "json",
        "logging",
        "os",
        "pathlib",
        "signal",
        "sys",
        "telegram",
        "telegram.ext",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "4ebb3bb6-d0d1-40be-995e-1049de62d4bd"
    },
    {
      "module_id": "monitor_system",
      "path": "monitor_system.py",
      "category": "core",
      "module_doc": "System Monitor - Continuous logging for debugging terminal issues\nRuns in background and logs system status to files",
      "functions": [
        {
          "name": "log_system_status",
          "docstring": "Log current system status to file.",
          "line_range": [
            15,
            60
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run continuous monitoring.",
          "line_range": [
            62,
            86
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "log_system_status": [
          "len",
          "str",
          "f.write",
          "wo.get_current_context",
          "open",
          "WorkflowOrchestrator",
          "timestamp.isoformat",
          "timestamp.strftime",
          "context.get",
          "Path",
          "json.dumps"
        ],
        "main": [
          "log_system_status",
          "print",
          "time.sleep",
          "len"
        ]
      },
      "dependencies": [
        "Path",
        "WorkflowOrchestrator",
        "datetime",
        "json",
        "llmstruct.workflow_orchestrator",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "1b3b378c-0551-43f0-9b34-dff109ae1af7"
    },
    {
      "module_id": "ollama_full_parser",
      "path": "ollama_full_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "873da1b8-744e-4e86-8709-6c61bb0d7ea6"
    },
    {
      "module_id": "telegram_bot_test",
      "path": "telegram_bot_test.py",
      "category": "core",
      "module_doc": "\ud83e\uddea \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 FastAPI\n\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0434\u043b\u044f \u0444\u043e\u0440\u0433\u0440\u0430\u0443\u043d\u0434 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            238,
            266
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "self",
            "token",
            "api_base_url"
          ],
          "decorators": []
        },
        {
          "name": "get_session",
          "docstring": "",
          "line_range": [
            45,
            48
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_call",
          "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 API",
          "line_range": [
            50,
            74
          ],
          "parameters": [
            "self",
            "endpoint",
            "method",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "save_user_message",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            76,
            90
          ],
          "parameters": [
            "self",
            "user_id",
            "username",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            92,
            102
          ],
          "parameters": [
            "self",
            "user_id",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
          "line_range": [
            104,
            119
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_system_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            121,
            123
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
          "line_range": [
            125,
            133
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            135,
            153
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
          "line_range": [
            155,
            174
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "memory_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
          "line_range": [
            176,
            193
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "chat_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /chat",
          "line_range": [
            195,
            216
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            218,
            230
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
          "line_range": [
            232,
            236
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TelegramBotTest",
          "docstring": "",
          "line_range": [
            33,
            236
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                34,
                43
              ],
              "parameters": [
                "self",
                "token",
                "api_base_url"
              ]
            },
            {
              "name": "get_session",
              "docstring": "",
              "line_range": [
                45,
                48
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_call",
              "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 API",
              "line_range": [
                50,
                74
              ],
              "parameters": [
                "self",
                "endpoint",
                "method",
                "data"
              ]
            },
            {
              "name": "save_user_message",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                76,
                90
              ],
              "parameters": [
                "self",
                "user_id",
                "username",
                "message"
              ]
            },
            {
              "name": "get_user_history",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                92,
                102
              ],
              "parameters": [
                "self",
                "user_id",
                "limit"
              ]
            },
            {
              "name": "chat_with_ollama",
              "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
              "line_range": [
                104,
                119
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "get_system_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                121,
                123
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
              "line_range": [
                125,
                133
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                135,
                153
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
              "line_range": [
                155,
                174
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "memory_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
              "line_range": [
                176,
                193
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "chat_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /chat",
              "line_range": [
                195,
                216
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                218,
                230
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
              "line_range": [
                232,
                236
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.setup_handlers",
          "Application.builder",
          "logger.info"
        ],
        "get_session": [
          "aiohttp.ClientSession"
        ],
        "api_call": [
          "response.json",
          "str",
          "session.post",
          "self.get_session",
          "session.get",
          "logger.error"
        ],
        "save_user_message": [
          "self.api_call",
          "logger.info",
          "result.get",
          "datetime.now",
          "logger.error"
        ],
        "get_user_history": [
          "len",
          "self.api_call",
          "logger.info",
          "result.get",
          "logger.error"
        ],
        "chat_with_ollama": [
          "result.get",
          "self.api_call",
          "logger.info",
          "logger.error"
        ],
        "get_system_status": [
          "self.api_call"
        ],
        "setup_handlers": [
          "MessageHandler",
          "logger.info",
          "CommandHandler"
        ],
        "start_command": [
          "self.save_user_message",
          "logger.info"
        ],
        "status_command": [
          "self.save_user_message",
          "logger.info",
          "status.get",
          "self.get_system_status"
        ],
        "memory_command": [
          "self.save_user_message",
          "logger.info",
          "self.get_user_history",
          "msg.get"
        ],
        "chat_command": [
          "self.save_user_message",
          "len",
          "self.chat_with_ollama",
          "logger.info"
        ],
        "handle_message": [
          "self.save_user_message",
          "self.chat_with_ollama",
          "logger.info"
        ],
        "cleanup": [
          "logger.info"
        ],
        "main": [
          "print",
          "TelegramBotTest",
          "BotCommand",
          "os.getenv",
          "logger.info",
          "logger.error"
        ]
      },
      "dependencies": [
        "Application",
        "BotCommand",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "json",
        "logging",
        "os",
        "telegram",
        "telegram.ext",
        "time"
      ],
      "hash": null,
      "artifact_id": "06efd80b-ff43-413a-8207-b0bf7959d379"
    },
    {
      "module_id": "parse_ollama_fixed",
      "path": "parse_ollama_fixed.py",
      "category": "core",
      "module_doc": "Fixed Ollama List Parser + Context Merger for Grok Consultation\nCorrectly parses the specific structure of ollama_list.txt",
      "functions": [
        {
          "name": "parse_ollama_list_fixed",
          "docstring": "Parse ollama_list.txt with correct understanding of structure",
          "line_range": [
            11,
            101
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "create_smart_categorization",
          "docstring": "Create intelligent categorization with RTX 3060 Ti focus",
          "line_range": [
            103,
            279
          ],
          "parameters": [
            "models"
          ],
          "decorators": []
        },
        {
          "name": "convert_md_to_json",
          "docstring": "Convert markdown content to structured JSON",
          "line_range": [
            281,
            306
          ],
          "parameters": [
            "md_content"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            308,
            412
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "parse_pulls_number",
          "docstring": "Convert pulls string to number for sorting",
          "line_range": [
            156,
            167
          ],
          "parameters": [
            "pulls_str"
          ],
          "decorators": []
        },
        {
          "name": "get_max_size_gb",
          "docstring": "Get maximum model size in GB",
          "line_range": [
            169,
            182
          ],
          "parameters": [
            "sizes"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_ollama_list_fixed": [
          "c.isdigit",
          "len",
          "models.append",
          "any",
          "re.split",
          "f.read",
          "open",
          "block.strip",
          "line.strip",
          "block.split",
          "line.isdigit",
          "line.endswith"
        ],
        "create_smart_categorization": [
          "len"
        ],
        "parse_pulls_number": [
          "float",
          "pulls_str.endswith"
        ],
        "get_max_size_gb": [
          "max",
          "float",
          "size.endswith"
        ],
        "convert_md_to_json": [
          "line.strip",
          "md_content.split",
          "current_content.append",
          "line.startswith"
        ],
        "main": [
          "len",
          "print",
          "convert_md_to_json",
          "json.dump",
          "create_smart_categorization",
          "f.read",
          "enumerate",
          "open",
          "parse_ollama_list_fixed"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "re"
      ],
      "hash": null,
      "artifact_id": "3a8fd572-64de-4aef-8e34-8b2e76c1ea15"
    },
    {
      "module_id": "board_cli",
      "path": "board_cli.py",
      "category": "core",
      "module_doc": "CLI Kanban Board for llmstruct tasks and ideas\n- Reads data/tasks.json and data/ideas.json\n- Shows board in terminal: columns by status, rows by priority\n- Supports filtering, sorting, and shows links between tasks/ideas",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": [
            26,
            28
          ],
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "group_by_status_and_priority",
          "docstring": "",
          "line_range": [
            30,
            36
          ],
          "parameters": [
            "items",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "render_board",
          "docstring": "",
          "line_range": [
            38,
            64
          ],
          "parameters": [
            "board",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            66,
            74
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "open",
          "json.load"
        ],
        "group_by_status_and_priority": [
          "item.get",
          "defaultdict"
        ],
        "render_board": [
          "Panel",
          "Table",
          "table.add_row",
          "links.extend",
          "item.get",
          "kind.capitalize",
          "links.append",
          "table.add_column",
          "console.print"
        ],
        "main": [
          "load_json",
          "console.rule",
          "render_board",
          "ideas_data.get",
          "group_by_status_and_priority",
          "tasks_data.get"
        ]
      },
      "dependencies": [
        "Console",
        "Panel",
        "Path",
        "Table",
        "box",
        "collections",
        "defaultdict",
        "json",
        "os",
        "pathlib",
        "rich",
        "rich.console",
        "rich.panel",
        "rich.table"
      ],
      "hash": null,
      "artifact_id": "7cc4a88c-e3ee-4e95-b9bb-cce4812e4616"
    },
    {
      "module_id": "parse_ollama_improved",
      "path": "parse_ollama_improved.py",
      "category": "core",
      "module_doc": "Improved Ollama List Parser + Context Merger for Grok Consultation\nBetter parsing algorithm for ollama_list.txt structure",
      "functions": [
        {
          "name": "parse_ollama_list_improved",
          "docstring": "Parse ollama_list.txt with improved algorithm",
          "line_range": [
            11,
            95
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "create_better_flattened_structure",
          "docstring": "Create an improved flattened structure for LLM consumption",
          "line_range": [
            97,
            245
          ],
          "parameters": [
            "models"
          ],
          "decorators": []
        },
        {
          "name": "convert_md_to_json",
          "docstring": "Convert markdown content to structured JSON",
          "line_range": [
            247,
            276
          ],
          "parameters": [
            "md_content"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            278,
            373
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "parse_pulls",
          "docstring": "",
          "line_range": [
            146,
            156
          ],
          "parameters": [
            "pulls_str"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_ollama_list_improved": [
          "c.isdigit",
          "content.split",
          "len",
          "models.append",
          "any",
          "f.read",
          "open",
          "block.strip",
          "model_name.lower",
          "model_name.isdigit",
          "line.strip",
          "block.split",
          "line.isdigit",
          "line.endswith"
        ],
        "create_better_flattened_structure": [
          "len"
        ],
        "parse_pulls": [
          "float",
          "pulls_str.endswith"
        ],
        "convert_md_to_json": [
          "line.strip",
          "md_content.split",
          "current_content.append",
          "line.startswith"
        ],
        "main": [
          "len",
          "print",
          "convert_md_to_json",
          "json.dump",
          "f.read",
          "parse_ollama_list_improved",
          "open",
          "create_better_flattened_structure"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "re"
      ],
      "hash": null,
      "artifact_id": "48488770-bd2d-453d-8cf1-62b5ec7eaa1d"
    },
    {
      "module_id": "bot_api_server",
      "path": "bot_api_server.py",
      "category": "core",
      "module_doc": "\ud83e\udd16 Enhanced Bot API Server\nFastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0431\u043e\u0442\u0430",
      "functions": [
        {
          "name": "get_file_ops",
          "docstring": "Lazy loading \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439",
          "line_range": [
            62,
            67
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_cache_manager",
          "docstring": "Lazy loading \u043a\u0435\u0448 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430",
          "line_range": [
            69,
            74
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "root",
          "docstring": "\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 API",
          "line_range": [
            94,
            112
          ],
          "parameters": [],
          "decorators": [
            "app.get('/', summary='Bot API Information')"
          ]
        },
        {
          "name": "health_check",
          "docstring": "Health check",
          "line_range": [
            115,
            126
          ],
          "parameters": [],
          "decorators": [
            "app.get('/health')"
          ]
        },
        {
          "name": "list_files",
          "docstring": "\u0421\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0440\u0430\u0431\u043e\u0447\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
          "line_range": [
            131,
            147
          ],
          "parameters": [
            "path"
          ],
          "decorators": [
            "app.get('/api/v1/files/list')"
          ]
        },
        {
          "name": "read_file",
          "docstring": "\u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            150,
            166
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": [
            "app.get('/api/v1/files/read')"
          ]
        },
        {
          "name": "write_file",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            169,
            185
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/files/write')"
          ]
        },
        {
          "name": "edit_file",
          "docstring": "\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            188,
            204
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/files/edit')"
          ]
        },
        {
          "name": "create_directory",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
          "line_range": [
            207,
            220
          ],
          "parameters": [
            "dir_path"
          ],
          "decorators": [
            "app.post('/api/v1/files/mkdir')"
          ]
        },
        {
          "name": "delete_file",
          "docstring": "\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430 \u0438\u043b\u0438 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
          "line_range": [
            223,
            236
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": [
            "app.delete('/api/v1/files/delete')"
          ]
        },
        {
          "name": "search_struct",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432 struct.json \u0441 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c",
          "line_range": [
            241,
            257
          ],
          "parameters": [
            "query",
            "search_type"
          ],
          "decorators": [
            "app.get('/api/v1/struct/search')"
          ]
        },
        {
          "name": "get_struct_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 struct.json \u043a\u0435\u0448\u0430",
          "line_range": [
            260,
            270
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/struct/stats')"
          ]
        },
        {
          "name": "invalidate_struct_cache",
          "docstring": "\u0418\u043d\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043a\u0435\u0448\u0430 struct.json",
          "line_range": [
            273,
            283
          ],
          "parameters": [],
          "decorators": [
            "app.post('/api/v1/struct/invalidate')"
          ]
        },
        {
          "name": "rebuild_struct_cache",
          "docstring": "\u041f\u0435\u0440\u0435\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043a\u0435\u0448\u0430 struct.json",
          "line_range": [
            286,
            305
          ],
          "parameters": [],
          "decorators": [
            "app.post('/api/v1/struct/rebuild')"
          ]
        },
        {
          "name": "get_workspace_status",
          "docstring": "\u0421\u0442\u0430\u0442\u0443\u0441 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430",
          "line_range": [
            310,
            320
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/workspace/status')"
          ]
        },
        {
          "name": "send_message_to_claude",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f Claude \u0447\u0435\u0440\u0435\u0437 API (\u0441\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f)",
          "line_range": [
            325,
            338
          ],
          "parameters": [
            "message"
          ],
          "decorators": [
            "app.post('/api/v1/claude/message')"
          ]
        },
        {
          "name": "run_full_test",
          "docstring": "\u041f\u043e\u043b\u043d\u044b\u0439 \u0442\u0435\u0441\u0442 \u0432\u0441\u0435\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0431\u043e\u0442\u0430",
          "line_range": [
            343,
            380
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/test/full')"
          ]
        },
        {
          "name": "startup_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435",
          "line_range": [
            385,
            392
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('startup')"
          ]
        },
        {
          "name": "shutdown_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435",
          "line_range": [
            395,
            400
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('shutdown')"
          ]
        }
      ],
      "classes": [
        {
          "name": "FileWriteRequest",
          "docstring": "",
          "line_range": [
            77,
            80
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "FileEditRequest",
          "docstring": "",
          "line_range": [
            82,
            84
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ChatMessage",
          "docstring": "",
          "line_range": [
            86,
            89
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        }
      ],
      "callgraph": {
        "get_file_ops": [
          "BotFileOperations"
        ],
        "get_cache_manager": [
          "StructCacheManager"
        ],
        "root": [
          "app.get"
        ],
        "health_check": [
          "datetime.now",
          "track_workflow_event",
          "app.get"
        ],
        "list_files": [
          "Query",
          "track_workflow_event",
          "get_file_ops",
          "HTTPException",
          "app.get",
          "ops.list_files"
        ],
        "read_file": [
          "ops.read_file",
          "Query",
          "track_workflow_event",
          "get_file_ops",
          "HTTPException",
          "app.get"
        ],
        "write_file": [
          "track_workflow_event",
          "get_file_ops",
          "HTTPException",
          "ops.write_file",
          "app.post"
        ],
        "edit_file": [
          "track_workflow_event",
          "get_file_ops",
          "HTTPException",
          "ops.edit_file",
          "app.post"
        ],
        "create_directory": [
          "Query",
          "track_workflow_event",
          "get_file_ops",
          "HTTPException",
          "ops.create_directory",
          "app.post"
        ],
        "delete_file": [
          "Query",
          "app.delete",
          "track_workflow_event",
          "get_file_ops",
          "HTTPException",
          "ops.delete_file"
        ],
        "search_struct": [
          "Query",
          "track_workflow_event",
          "get_file_ops",
          "HTTPException",
          "app.get",
          "ops.search_struct"
        ],
        "get_struct_stats": [
          "track_workflow_event",
          "get_cache_manager",
          "HTTPException",
          "cache.get_cache_stats",
          "app.get"
        ],
        "invalidate_struct_cache": [
          "track_workflow_event",
          "get_cache_manager",
          "HTTPException",
          "datetime.now",
          "cache.invalidate_cache",
          "app.post"
        ],
        "rebuild_struct_cache": [
          "track_workflow_event",
          "cache.build_cache",
          "get_cache_manager",
          "HTTPException",
          "cache.get_cache_stats",
          "datetime.now",
          "app.post"
        ],
        "get_workspace_status": [
          "track_workflow_event",
          "get_file_ops",
          "HTTPException",
          "ops.get_workspace_status",
          "app.get"
        ],
        "send_message_to_claude": [
          "track_workflow_event",
          "app.post",
          "int",
          "datetime.now",
          "time.time"
        ],
        "run_full_test": [
          "ops.read_file",
          "len",
          "search_result.get",
          "track_workflow_event",
          "get_file_ops",
          "get_cache_manager",
          "cache.get_cache_stats",
          "ops.write_file",
          "app.get",
          "datetime.now",
          "cache.smart_search"
        ],
        "startup_event": [
          "print",
          "track_workflow_event",
          "app.on_event"
        ],
        "shutdown_event": [
          "print",
          "track_workflow_event",
          "app.on_event"
        ]
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "BotFileOperations",
        "CORSMiddleware",
        "Dict",
        "FastAPI",
        "HTTPException",
        "List",
        "Optional",
        "Path",
        "Query",
        "StructCacheManager",
        "aiohttp",
        "bot_file_operations",
        "datetime",
        "fastapi",
        "fastapi.middleware.cors",
        "get_metrics_tracker",
        "json",
        "pathlib",
        "pydantic",
        "src.llmstruct.metrics_tracker",
        "struct_cache_manager",
        "time",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event",
        "typing",
        "uvicorn"
      ],
      "hash": null,
      "artifact_id": "c9184e35-1611-4980-afc3-c21cf97c893d"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            13,
            17
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_text_file",
          "docstring": "Check if file is likely a text file based on extension.",
          "line_range": [
            20,
            31
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": [
            34,
            66
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "gitignore_parser.parse_gitignore",
          "gitignore_path.exists"
        ],
        "is_text_file": [],
        "collect_project": [
          "len",
          "any",
          "json.dump",
          "logger.warning",
          "str",
          "f.read",
          "root_dir.rglob",
          "gitignore",
          "logger.info",
          "file_path.is_file",
          "load_gitignore",
          "open",
          "is_text_file",
          "Path",
          "doc_files.items",
          "logger.error"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "5475fb1a-21b4-4be5-b112-d39dc5ccc9ac"
    },
    {
      "module_id": "bot_file_operations",
      "path": "bot_file_operations.py",
      "category": "core",
      "module_doc": "\ud83d\udcc1 Bot File Operations Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0434\u043b\u044f Telegram \u0431\u043e\u0442\u0430 \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 [code]",
      "functions": [
        {
          "name": "test_file_operations",
          "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439",
          "line_range": [
            354,
            384
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Args:\n    work_dir: \u0420\u0430\u0431\u043e\u0447\u0430\u044f \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f (\u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c /tmp)\n    simulate_root: \u0421\u0438\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043a\u0430\u043a \u0432 \u043a\u043e\u0440\u043d\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            19,
            37
          ],
          "parameters": [
            "self",
            "work_dir",
            "simulate_root"
          ],
          "decorators": []
        },
        {
          "name": "setup_simulated_environment",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0438\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 /tmp",
          "line_range": [
            39,
            57
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "list_files",
          "docstring": "\u0421\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
          "line_range": [
            59,
            83
          ],
          "parameters": [
            "self",
            "path"
          ],
          "decorators": []
        },
        {
          "name": "read_file",
          "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u0444\u0430\u0439\u043b",
          "line_range": [
            85,
            114
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_file",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0444\u0430\u0439\u043b",
          "line_range": [
            116,
            143
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "edit_file",
          "docstring": "\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b (\u0437\u0430\u043c\u0435\u043d\u0430, \u0432\u0441\u0442\u0430\u0432\u043a\u0430, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a)",
          "line_range": [
            145,
            235
          ],
          "parameters": [
            "self",
            "file_path",
            "operation"
          ],
          "decorators": []
        },
        {
          "name": "create_directory",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e",
          "line_range": [
            237,
            250
          ],
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "delete_file",
          "docstring": "\u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0444\u0430\u0439\u043b",
          "line_range": [
            252,
            270
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "copy_file",
          "docstring": "\u041a\u043e\u043f\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b",
          "line_range": [
            272,
            294
          ],
          "parameters": [
            "self",
            "src_path",
            "dst_path"
          ],
          "decorators": []
        },
        {
          "name": "search_struct",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432 struct.json \u0447\u0435\u0440\u0435\u0437 \u043a\u0435\u0448",
          "line_range": [
            296,
            309
          ],
          "parameters": [
            "self",
            "query",
            "search_type"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_stats",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 struct.json \u043a\u0435\u0448\u0430",
          "line_range": [
            311,
            317
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "invalidate_struct_cache",
          "docstring": "\u0418\u043d\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043a\u0435\u0448 struct.json",
          "line_range": [
            319,
            325
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_workspace_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430",
          "line_range": [
            327,
            352
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BotFileOperations",
          "docstring": "\u0424\u0430\u0439\u043b\u043e\u0432\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Telegram \u0431\u043e\u0442\u0430",
          "line_range": [
            16,
            352
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Args:\n    work_dir: \u0420\u0430\u0431\u043e\u0447\u0430\u044f \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f (\u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c /tmp)\n    simulate_root: \u0421\u0438\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043a\u0430\u043a \u0432 \u043a\u043e\u0440\u043d\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                19,
                37
              ],
              "parameters": [
                "self",
                "work_dir",
                "simulate_root"
              ]
            },
            {
              "name": "setup_simulated_environment",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0438\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 /tmp",
              "line_range": [
                39,
                57
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "list_files",
              "docstring": "\u0421\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
              "line_range": [
                59,
                83
              ],
              "parameters": [
                "self",
                "path"
              ]
            },
            {
              "name": "read_file",
              "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u0444\u0430\u0439\u043b",
              "line_range": [
                85,
                114
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "write_file",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0444\u0430\u0439\u043b",
              "line_range": [
                116,
                143
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "mode"
              ]
            },
            {
              "name": "edit_file",
              "docstring": "\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b (\u0437\u0430\u043c\u0435\u043d\u0430, \u0432\u0441\u0442\u0430\u0432\u043a\u0430, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a)",
              "line_range": [
                145,
                235
              ],
              "parameters": [
                "self",
                "file_path",
                "operation"
              ]
            },
            {
              "name": "create_directory",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e",
              "line_range": [
                237,
                250
              ],
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "delete_file",
              "docstring": "\u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0444\u0430\u0439\u043b",
              "line_range": [
                252,
                270
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "copy_file",
              "docstring": "\u041a\u043e\u043f\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b",
              "line_range": [
                272,
                294
              ],
              "parameters": [
                "self",
                "src_path",
                "dst_path"
              ]
            },
            {
              "name": "search_struct",
              "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432 struct.json \u0447\u0435\u0440\u0435\u0437 \u043a\u0435\u0448",
              "line_range": [
                296,
                309
              ],
              "parameters": [
                "self",
                "query",
                "search_type"
              ]
            },
            {
              "name": "get_struct_stats",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 struct.json \u043a\u0435\u0448\u0430",
              "line_range": [
                311,
                317
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "invalidate_struct_cache",
              "docstring": "\u0418\u043d\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043a\u0435\u0448 struct.json",
              "line_range": [
                319,
                325
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_workspace_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430",
              "line_range": [
                327,
                352
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "print",
          "StructCacheManager",
          "self.setup_simulated_environment"
        ],
        "setup_simulated_environment": [
          "print"
        ],
        "list_files": [
          "item.is_file",
          "target_path.exists",
          "sorted",
          "item.stat",
          "items.append",
          "str",
          "target_path.iterdir",
          "item.is_dir",
          "datetime.fromtimestamp"
        ],
        "read_file": [
          "target_file.is_file",
          "len",
          "target_file.exists",
          "target_file.read_text",
          "content.splitlines",
          "target_file.stat"
        ],
        "write_file": [
          "len",
          "f.write",
          "content.splitlines",
          "open",
          "target_file.stat",
          "target_file.write_text"
        ],
        "edit_file": [
          "len",
          "content.replace",
          "target_file.exists",
          "target_file.read_text",
          "operation.get",
          "new_content.splitlines",
          "lines.append",
          "content.count",
          "target_file.write_text",
          "lines.insert"
        ],
        "create_directory": [
          "target_dir.mkdir"
        ],
        "delete_file": [
          "target_path.exists",
          "target_path.unlink",
          "shutil.rmtree",
          "target_path.is_file",
          "target_path.is_dir"
        ],
        "copy_file": [
          "src_file.exists",
          "dst_file.stat",
          "shutil.copy2"
        ],
        "search_struct": [
          "len",
          "sum"
        ],
        "get_struct_stats": [],
        "invalidate_struct_cache": [],
        "get_workspace_status": [
          "item.is_file",
          "item.stat",
          "str",
          "item.is_dir"
        ],
        "test_file_operations": [
          "ops.read_file",
          "print",
          "BotFileOperations",
          "ops.get_workspace_status",
          "result.get",
          "ops.write_file",
          "ops.search_struct",
          "ops.edit_file"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "StructCacheManager",
        "datetime",
        "json",
        "os",
        "pathlib",
        "shutil",
        "struct_cache_manager",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b2f58d96-28f6-4d1f-b631-30566d670874"
    },
    {
      "module_id": "chat_bot_working",
      "path": "chat_bot_working.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 ENHANCED Telegram Bot \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432\u0430\u0448 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f:\n- \u041a\u0435\u0448\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 WebSocket\n- \u041f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 API endpoints\n- \u041c\u0435\u0442\u0440\u0438\u043a \u0447\u0435\u0440\u0435\u0437 API\n\n\u0411\u043e\u043b\u044c\u0448\u0435 \u043d\u0438\u043a\u0430\u043a\u0438\u0445 CLI \u0432\u044b\u0437\u043e\u0432\u043e\u0432 - \u0432\u0441\u0435 \u0447\u0435\u0440\u0435\u0437 API!",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            342,
            378
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            35,
            43
          ],
          "parameters": [
            "self",
            "telegram_token",
            "fastapi_base_url"
          ],
          "decorators": []
        },
        {
          "name": "setup_session",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            45,
            48
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "close_session",
          "docstring": "\u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            50,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "health_check_api",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            55,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_user_message_via_api",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            71,
            102
          ],
          "parameters": [
            "self",
            "user_id",
            "username",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_user_history_via_api",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            104,
            122
          ],
          "parameters": [
            "self",
            "user_id",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama_via_api",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 FastAPI endpoint",
          "line_range": [
            124,
            150
          ],
          "parameters": [
            "self",
            "message",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_system_metrics_via_api",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            152,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            164,
            172
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            174,
            198
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "memory_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory - \u0442\u0435\u0441\u0442 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            200,
            207
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "history_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /history - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e",
          "line_range": [
            209,
            228
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "health_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /health - \u0441\u0442\u0430\u0442\u0443\u0441 FastAPI",
          "line_range": [
            230,
            237
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "metrics_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics - \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            239,
            269
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "ollama_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u0447\u0430\u0442 \u0441 Ollama",
          "line_range": [
            271,
            289
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            291,
            321
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
          "line_range": [
            323,
            340
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "FastAPIIntegratedBot",
          "docstring": "Telegram \u0431\u043e\u0442 \u0441 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
          "line_range": [
            32,
            340
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                35,
                43
              ],
              "parameters": [
                "self",
                "telegram_token",
                "fastapi_base_url"
              ]
            },
            {
              "name": "setup_session",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                45,
                48
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "close_session",
              "docstring": "\u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                50,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "health_check_api",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
              "line_range": [
                55,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_user_message_via_api",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                71,
                102
              ],
              "parameters": [
                "self",
                "user_id",
                "username",
                "message"
              ]
            },
            {
              "name": "get_user_history_via_api",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                104,
                122
              ],
              "parameters": [
                "self",
                "user_id",
                "limit"
              ]
            },
            {
              "name": "chat_with_ollama_via_api",
              "docstring": "\u0427\u0430\u0442 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 FastAPI endpoint",
              "line_range": [
                124,
                150
              ],
              "parameters": [
                "self",
                "message",
                "context"
              ]
            },
            {
              "name": "get_system_metrics_via_api",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                152,
                162
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                164,
                172
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                174,
                198
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "memory_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory - \u0442\u0435\u0441\u0442 \u043f\u0430\u043c\u044f\u0442\u0438",
              "line_range": [
                200,
                207
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "history_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /history - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e",
              "line_range": [
                209,
                228
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "health_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /health - \u0441\u0442\u0430\u0442\u0443\u0441 FastAPI",
              "line_range": [
                230,
                237
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "metrics_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics - \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                239,
                269
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "ollama_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u0447\u0430\u0442 \u0441 Ollama",
              "line_range": [
                271,
                289
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                291,
                321
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "run",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
              "line_range": [
                323,
                340
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.setup_handlers",
          "Application.builder"
        ],
        "setup_session": [
          "aiohttp.ClientSession"
        ],
        "close_session": [],
        "health_check_api": [
          "resp.json",
          "self.setup_session",
          "logger.info",
          "data.get",
          "logger.error"
        ],
        "save_user_message_via_api": [
          "logger.warning",
          "self.setup_session",
          "logger.info",
          "datetime.now",
          "logger.error"
        ],
        "get_user_history_via_api": [
          "len",
          "logger.warning",
          "self.setup_session",
          "logger.info",
          "logger.error",
          "data.get",
          "resp.json"
        ],
        "chat_with_ollama_via_api": [
          "resp.json",
          "str",
          "self.setup_session",
          "logger.info",
          "data.get",
          "logger.error"
        ],
        "get_system_metrics_via_api": [
          "str",
          "self.setup_session",
          "resp.json"
        ],
        "setup_handlers": [
          "MessageHandler",
          "CommandHandler"
        ],
        "start_command": [
          "self.save_user_message_via_api"
        ],
        "memory_command": [
          "self.save_user_message_via_api"
        ],
        "history_command": [
          "len",
          "self.get_user_history_via_api",
          "msg.get",
          "int"
        ],
        "health_command": [
          "self.health_check_api"
        ],
        "metrics_command": [
          "metrics.get",
          "features.get",
          "system.get",
          "self.get_system_metrics_via_api",
          "struct_json.get"
        ],
        "ollama_command": [
          "self.chat_with_ollama_via_api",
          "status_msg.edit_text",
          "self.save_user_message_via_api"
        ],
        "handle_message": [
          "message_text.replace",
          "msg.get",
          "self.chat_with_ollama_via_api",
          "enumerate",
          "self.get_user_history_via_api",
          "self.save_user_message_via_api",
          "message_text.startswith",
          "message_text.lower"
        ],
        "run": [
          "logger.warning",
          "logger.info",
          "self.close_session",
          "self.health_check_api",
          "logger.error"
        ],
        "main": [
          "FastAPIIntegratedBot",
          "print",
          "bot.run",
          "asyncio.get_event_loop",
          "os.getenv",
          "asyncio.set_event_loop",
          "loop.run_until_complete",
          "traceback.print_exc",
          "asyncio.new_event_loop",
          "loop.close",
          "exit"
        ]
      },
      "dependencies": [
        "Application",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "json",
        "logging",
        "os",
        "telegram",
        "telegram.ext",
        "timedelta",
        "traceback",
        "websockets"
      ],
      "hash": null,
      "artifact_id": "40114aa9-2d75-4ac9-a811-f5bd89c415b7"
    },
    {
      "module_id": "chat_bot",
      "path": "chat_bot.py",
      "category": "core",
      "module_doc": "LLMStruct Chat Bot - \u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 Cursor + Ollama",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            756,
            767
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            41,
            59
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "load_ollama_config",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e Ollama \u0438\u0437 llmstruct.toml",
          "line_range": [
            61,
            91
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "query_ollama",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043a Ollama \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442",
          "line_range": [
            93,
            138
          ],
          "parameters": [
            "self",
            "message",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "log_user_message",
          "docstring": "\u041b\u043e\u0433\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439 \u0444\u0430\u0439\u043b \u0434\u043b\u044f Cursor",
          "line_range": [
            140,
            158
          ],
          "parameters": [
            "self",
            "user_info",
            "message",
            "message_type",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            160,
            171
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            173,
            220
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cursor_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /cursor - \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0441 Cursor",
          "line_range": [
            222,
            259
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "logs_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /logs - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
          "line_range": [
            261,
            300
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "help_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
          "line_range": [
            302,
            341
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
          "line_range": [
            343,
            424
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "metrics_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics",
          "line_range": [
            426,
            486
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "dev_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /dev - \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
          "line_range": [
            488,
            533
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "ollama_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0432\u044f\u0437\u0438 \u0441 Ollama",
          "line_range": [
            535,
            608
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "model_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /model - \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 Ollama",
          "line_range": [
            610,
            625
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441 Ollama + \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435",
          "line_range": [
            627,
            714
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
          "line_range": [
            716,
            754
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMStructChatBot",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 \u0447\u0430\u0442-\u0431\u043e\u0442 \u0434\u043b\u044f LLMStruct \u0441 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0434\u043b\u044f Cursor + Ollama",
          "line_range": [
            38,
            754
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                41,
                59
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "load_ollama_config",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e Ollama \u0438\u0437 llmstruct.toml",
              "line_range": [
                61,
                91
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "query_ollama",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043a Ollama \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442",
              "line_range": [
                93,
                138
              ],
              "parameters": [
                "self",
                "message",
                "context"
              ]
            },
            {
              "name": "log_user_message",
              "docstring": "\u041b\u043e\u0433\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439 \u0444\u0430\u0439\u043b \u0434\u043b\u044f Cursor",
              "line_range": [
                140,
                158
              ],
              "parameters": [
                "self",
                "user_info",
                "message",
                "message_type",
                "chat_id"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                160,
                171
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                173,
                220
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cursor_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /cursor - \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0441 Cursor",
              "line_range": [
                222,
                259
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "logs_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /logs - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
              "line_range": [
                261,
                300
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "help_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
              "line_range": [
                302,
                341
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
              "line_range": [
                343,
                424
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "metrics_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics",
              "line_range": [
                426,
                486
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "dev_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /dev - \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
              "line_range": [
                488,
                533
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "ollama_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0432\u044f\u0437\u0438 \u0441 Ollama",
              "line_range": [
                535,
                608
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "model_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /model - \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 Ollama",
              "line_range": [
                610,
                625
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441 Ollama + \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435",
              "line_range": [
                627,
                714
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
              "line_range": [
                716,
                754
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.load_ollama_config",
          "track_workflow_event",
          "self.setup_handlers",
          "Path",
          "Application.builder"
        ],
        "load_ollama_config": [
          "config_path.exists",
          "logger.warning",
          "toml.load",
          "logger.info",
          "config.get",
          "Path",
          "logger.error"
        ],
        "query_ollama": [
          "len",
          "response.json",
          "response.text",
          "message.split",
          "str",
          "aiohttp.ClientSession",
          "result.get",
          "session.post",
          "error_msg.lower",
          "get_metrics_tracker",
          "ollama_response.split",
          "logger.error",
          "tracker.track_token_usage"
        ],
        "log_user_message": [
          "user_info.get",
          "message.lower",
          "any",
          "f.write",
          "open",
          "datetime.now"
        ],
        "setup_handlers": [
          "MessageHandler",
          "CommandHandler"
        ],
        "start_command": [
          "len",
          "track_workflow_event",
          "self.log_user_message",
          "enumerate",
          "chr"
        ],
        "cursor_command": [
          "track_workflow_event",
          "self.log_user_message"
        ],
        "logs_command": [
          "content.split",
          "len",
          "next",
          "track_workflow_event",
          "self.log_user_message",
          "f.read",
          "line.startswith",
          "open",
          "message_line.replace",
          "entry.strip"
        ],
        "help_command": [
          "track_workflow_event",
          "self.log_user_message"
        ],
        "status_command": [
          "struct_file.exists",
          "len",
          "track_task_complete",
          "track_workflow_event",
          "self.log_user_message",
          "requests.get",
          "tracker.get_session_summary",
          "str",
          "int",
          "track_task_start",
          "open",
          "struct_file.stat",
          "f.readlines",
          "Path",
          "datetime.now",
          "get_metrics_tracker",
          "time.time"
        ],
        "metrics_command": [
          "tracker.get_session_summary",
          "get_metrics_tracker",
          "track_workflow_event",
          "self.log_user_message"
        ],
        "dev_command": [
          "track_workflow_event",
          "self.log_user_message"
        ],
        "ollama_command": [
          "len",
          "response.json",
          "track_workflow_event",
          "self.log_user_message",
          "str",
          "aiohttp.ClientSession",
          "test_response.startswith",
          "self.query_ollama",
          "m.get",
          "session.get",
          "data.get"
        ],
        "model_command": [
          "enumerate",
          "track_workflow_event",
          "self.log_user_message"
        ],
        "handle_message": [
          "any",
          "response.split",
          "message_text.split",
          "open",
          "Path",
          "f.write",
          "int",
          "track_token_usage",
          "track_task_start",
          "datetime.now",
          "track_task_complete",
          "track_workflow_event",
          "str",
          "message_text.lower",
          "message_text.isdigit",
          "len",
          "self.log_user_message",
          "self.query_ollama",
          "logger.error",
          "time.time"
        ],
        "run_sync": [
          "track_workflow_event",
          "BotCommand",
          "str",
          "asyncio.set_event_loop",
          "logger.info",
          "tracker.save_session",
          "asyncio.new_event_loop",
          "get_metrics_tracker",
          "loop.run_until_complete",
          "logger.error"
        ],
        "main": [
          "LLMStructChatBot",
          "os.getenv",
          "bot.run_sync",
          "print"
        ]
      },
      "dependencies": [
        "Application",
        "BotCommand",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "Optional",
        "Path",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "get_metrics_tracker",
        "json",
        "logging",
        "os",
        "pathlib",
        "requests",
        "src.llmstruct.metrics_tracker",
        "sys",
        "telegram",
        "telegram.ext",
        "time",
        "toml",
        "track_task_complete",
        "track_task_start",
        "track_token_usage",
        "track_workflow_event",
        "typing"
      ],
      "hash": null,
      "artifact_id": "569af54a-0f1a-4161-b5a7-c40eaf31d0a4"
    },
    {
      "module_id": "fastapi_ollama_server_working",
      "path": "fastapi_ollama_server_working.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f LLMStruct\n- Ollama \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f\n- \u041f\u0430\u043c\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \n- \u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b\n- \u0412\u0441\u0435 \u0432 \u043e\u0434\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b",
      "functions": [
        {
          "name": "load_user_memory",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439",
          "line_range": [
            56,
            64
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "save_user_memory",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439",
          "line_range": [
            66,
            72
          ],
          "parameters": [
            "memory"
          ],
          "decorators": []
        },
        {
          "name": "load_ollama_config",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 Ollama",
          "line_range": [
            74,
            82
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "root",
          "docstring": "\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 API",
          "line_range": [
            114,
            131
          ],
          "parameters": [],
          "decorators": [
            "app.get('/', summary='API Information')"
          ]
        },
        {
          "name": "health_check",
          "docstring": "Health check \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 Ollama",
          "line_range": [
            134,
            155
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/system/health', response_model=HealthResponse)"
          ]
        },
        {
          "name": "system_status",
          "docstring": "\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            158,
            246
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/system/status')"
          ]
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
          "line_range": [
            251,
            319
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/chat/ollama')"
          ]
        },
        {
          "name": "get_ollama_models",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Ollama",
          "line_range": [
            322,
            350
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/ollama/models')"
          ]
        },
        {
          "name": "save_user_message",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            355,
            389
          ],
          "parameters": [
            "message"
          ],
          "decorators": [
            "app.post('/api/v1/memory/save')"
          ]
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            392,
            415
          ],
          "parameters": [
            "user_id",
            "limit"
          ],
          "decorators": [
            "app.get('/api/v1/memory/history/{user_id}')"
          ]
        },
        {
          "name": "memory_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            418,
            450
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/memory/stats')"
          ]
        },
        {
          "name": "clear_user_memory",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            453,
            476
          ],
          "parameters": [
            "user_id"
          ],
          "decorators": [
            "app.delete('/api/v1/memory/clear/{user_id}')"
          ]
        },
        {
          "name": "read_project_file",
          "docstring": "\u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            481,
            566
          ],
          "parameters": [
            "path",
            "lines",
            "start_line"
          ],
          "decorators": [
            "app.get('/api/v1/files/read')"
          ]
        },
        {
          "name": "list_available_files",
          "docstring": "\u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            569,
            600
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/files/list')"
          ]
        },
        {
          "name": "startup_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435",
          "line_range": [
            605,
            612
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('startup')"
          ]
        },
        {
          "name": "shutdown_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435",
          "line_range": [
            615,
            623
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('shutdown')"
          ]
        }
      ],
      "classes": [
        {
          "name": "UserMessage",
          "docstring": "",
          "line_range": [
            85,
            90
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "OllamaRequest",
          "docstring": "",
          "line_range": [
            92,
            97
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ChatMessage",
          "docstring": "",
          "line_range": [
            99,
            102
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HealthResponse",
          "docstring": "",
          "line_range": [
            104,
            109
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        }
      ],
      "callgraph": {
        "load_user_memory": [
          "json.load",
          "open",
          "print",
          "USER_MEMORY_FILE.exists"
        ],
        "save_user_memory": [
          "print",
          "open",
          "json.dump"
        ],
        "load_ollama_config": [
          "toml.load",
          "open"
        ],
        "root": [
          "app.get"
        ],
        "health_check": [
          "track_workflow_event",
          "aiohttp.ClientSession",
          "load_ollama_config",
          "app.get",
          "HealthResponse",
          "time.strftime",
          "session.get",
          "aiohttp.ClientTimeout"
        ],
        "system_status": [
          "load_ollama_config",
          "Path",
          "data.get",
          "int",
          "track_task_start",
          "struct_file.stat",
          "app.get",
          "memory.values",
          "get_metrics_tracker",
          "resp.json",
          "aiohttp.ClientTimeout",
          "track_task_complete",
          "track_workflow_event",
          "str",
          "tracker.get_session_summary",
          "aiohttp.ClientSession",
          "HTTPException",
          "time.strftime",
          "session.get",
          "struct_file.exists",
          "len",
          "load_user_memory",
          "USER_MEMORY_FILE.exists",
          "time.ctime",
          "sum",
          "time.time"
        ],
        "chat_with_ollama": [
          "response_text.split",
          "resp.text",
          "load_ollama_config",
          "data.get",
          "int",
          "track_task_start",
          "session.post",
          "get_metrics_tracker",
          "resp.json",
          "aiohttp.ClientTimeout",
          "track_task_complete",
          "track_workflow_event",
          "str",
          "aiohttp.ClientSession",
          "HTTPException",
          "time.strftime",
          "tracker.track_token_usage",
          "app.post",
          "len",
          "time.time"
        ],
        "get_ollama_models": [
          "aiohttp.ClientTimeout",
          "len",
          "str",
          "aiohttp.ClientSession",
          "HTTPException",
          "load_ollama_config",
          "app.get",
          "model.get",
          "models.append",
          "session.get",
          "data.get",
          "resp.json"
        ],
        "save_user_message": [
          "len",
          "load_user_memory",
          "track_workflow_event",
          "str",
          "HTTPException",
          "save_user_memory",
          "time.strftime",
          "app.post"
        ],
        "get_user_history": [
          "len",
          "Query",
          "load_user_memory",
          "track_workflow_event",
          "str",
          "HTTPException",
          "app.get",
          "memory.get"
        ],
        "memory_stats": [
          "len",
          "load_user_memory",
          "user_stats.append",
          "memory.items",
          "USER_MEMORY_FILE.exists",
          "str",
          "HTTPException",
          "int",
          "USER_MEMORY_FILE.stat",
          "time.ctime",
          "last_message.get",
          "user_stats.sort",
          "app.get",
          "memory.values",
          "sum"
        ],
        "clear_user_memory": [
          "len",
          "load_user_memory",
          "app.delete",
          "track_workflow_event",
          "str",
          "HTTPException",
          "save_user_memory",
          "memory.get",
          "time.strftime"
        ],
        "read_project_file": [
          "f.read",
          "open",
          "Path",
          "content.split",
          "Query",
          "int",
          "track_task_start",
          "app.get",
          "track_task_complete",
          "track_workflow_event",
          "str",
          "HTTPException",
          "f.readlines",
          "time.strftime",
          "len",
          "file_path.stat",
          "file_path.exists",
          "time.ctime",
          "min",
          "time.time"
        ],
        "list_available_files": [
          "files_info.append",
          "len",
          "track_workflow_event",
          "time.strftime",
          "file_path.stat",
          "file_path.exists",
          "time.ctime",
          "app.get",
          "Path"
        ],
        "startup_event": [
          "print",
          "get_metrics_tracker",
          "track_workflow_event",
          "app.on_event"
        ],
        "shutdown_event": [
          "print",
          "track_workflow_event",
          "tracker.save_session",
          "app.on_event",
          "get_metrics_tracker"
        ]
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "CORSMiddleware",
        "Dict",
        "FastAPI",
        "HTTPException",
        "List",
        "Optional",
        "Path",
        "Query",
        "aiohttp",
        "asyncio",
        "datetime",
        "fastapi",
        "fastapi.middleware.cors",
        "get_metrics_tracker",
        "json",
        "pathlib",
        "pydantic",
        "src.llmstruct.metrics_tracker",
        "time",
        "timedelta",
        "toml",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event",
        "typing",
        "uvicorn"
      ],
      "hash": null,
      "artifact_id": "ed06563e-3b65-48d8-b268-8543775b46b1"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "module_doc": "Core CLI functionality and main loop.",
      "functions": [
        {
          "name": "create_cli_core",
          "docstring": "Factory function to create CLI core instance.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI core with root directory.",
          "line_range": [
            28,
            35
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_cache",
          "docstring": "Initialize cache if enabled in config.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_copilot",
          "docstring": "Initialize Copilot integration if enabled.",
          "line_range": [
            55,
            63
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive_mode",
          "docstring": "Run the interactive CLI mode.",
          "line_range": [
            65,
            97
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "Clean up resources.",
          "line_range": [
            99,
            107
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLICore",
          "docstring": "Core CLI class handling main loop and coordination.",
          "line_range": [
            25,
            107
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI core with root directory.",
              "line_range": [
                28,
                35
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "setup_cache",
              "docstring": "Initialize cache if enabled in config.",
              "line_range": [
                37,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_copilot",
              "docstring": "Initialize Copilot integration if enabled.",
              "line_range": [
                55,
                63
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_interactive_mode",
              "docstring": "Run the interactive CLI mode.",
              "line_range": [
                65,
                97
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources.",
              "line_range": [
                99,
                107
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CLIConfig",
          "CommandProcessor",
          "CLIUtils"
        ],
        "setup_cache": [
          "JSONCache",
          "cache_config.get",
          "cache_path.mkdir",
          "str",
          "logging.warning",
          "logging.info",
          "Path"
        ],
        "setup_copilot": [
          "initialize_copilot",
          "logging.info",
          "copilot_config.get",
          "logging.warning"
        ],
        "run_interactive_mode": [
          "user_input.startswith",
          "input",
          "self.setup_cache",
          "print",
          "self.cleanup",
          "self.setup_copilot",
          "logging.error",
          "user_input.lower"
        ],
        "cleanup": [
          "logging.info"
        ],
        "create_cli_core": [
          "CLICore"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "JSONCache",
        "Optional",
        "Path",
        "cli_commands",
        "cli_config",
        "cli_utils",
        "copilot",
        "initialize_copilot",
        "llmstruct.cache",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "040ea2bd-83c3-4c15-bb67-1f65c781f5cd"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "module_doc": "Workspace State & Mode Management System\nEnhanced AI-Human Collaboration with Context Boundaries",
      "functions": [
        {
          "name": "create_workspace_manager",
          "docstring": "Factory function to create workspace manager",
          "line_range": [
            461,
            463
          ],
          "parameters": [
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_or_create_state",
          "docstring": "Load existing workspace state or create default",
          "line_range": [
            38,
            75
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_permission_templates",
          "docstring": "Load permission templates for different modes",
          "line_range": [
            77,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "set_mode",
          "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
          "line_range": [
            130,
            176
          ],
          "parameters": [
            "self",
            "modes",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_parse_modes_from_string",
          "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
          "line_range": [
            178,
            182
          ],
          "parameters": [
            "self",
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "_combine_mode_permissions",
          "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
          "line_range": [
            184,
            216
          ],
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "_get_mode_combination_name",
          "docstring": "Get descriptive name for mode combination",
          "line_range": [
            218,
            232
          ],
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "get_current_state",
          "docstring": "Get current workspace state",
          "line_range": [
            234,
            236
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "check_permission",
          "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
          "line_range": [
            238,
            302
          ],
          "parameters": [
            "self",
            "operation",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "_get_required_capability",
          "docstring": "Map operations to required capabilities",
          "line_range": [
            304,
            320
          ],
          "parameters": [
            "self",
            "operation"
          ],
          "decorators": []
        },
        {
          "name": "_is_restricted_target",
          "docstring": "Check if target matches any file restrictions",
          "line_range": [
            322,
            334
          ],
          "parameters": [
            "self",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "set_emergency_override",
          "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
          "line_range": [
            336,
            365
          ],
          "parameters": [
            "self",
            "level",
            "reason",
            "duration_minutes"
          ],
          "decorators": []
        },
        {
          "name": "_check_emergency_override",
          "docstring": "Check if emergency override is active and not expired",
          "line_range": [
            367,
            381
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_strict_mode",
          "docstring": "Integration with existing strict mode system",
          "line_range": [
            383,
            387
          ],
          "parameters": [
            "self",
            "strict_tags"
          ],
          "decorators": []
        },
        {
          "name": "add_decision_workflow",
          "docstring": "Add decision to workflow tracking (for [decide] mode)",
          "line_range": [
            389,
            396
          ],
          "parameters": [
            "self",
            "decision_id",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "get_workspace_status",
          "docstring": "Get comprehensive workspace status for debugging and display",
          "line_range": [
            398,
            420
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_override_time_remaining",
          "docstring": "Get formatted time remaining for emergency override",
          "line_range": [
            422,
            437
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_state",
          "docstring": "Save current state to file",
          "line_range": [
            439,
            442
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_mode_status",
          "docstring": "Get formatted status string for CLI display",
          "line_range": [
            444,
            458
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WorkspaceStateManager",
          "docstring": "Core workspace state management with mode-based permissions and context boundaries.\n\nFeatures:\n- Multi-dimensional mode system ([code][debug], [discuss][meta])\n- Hybrid permission system (capabilities + file restrictions)\n- Smart mode combinations with context awareness\n- Emergency override protocols with time-boxing\n- Integration with existing strict mode system",
          "line_range": [
            16,
            458
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "workspace_dir"
              ]
            },
            {
              "name": "_load_or_create_state",
              "docstring": "Load existing workspace state or create default",
              "line_range": [
                38,
                75
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_permission_templates",
              "docstring": "Load permission templates for different modes",
              "line_range": [
                77,
                128
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "set_mode",
              "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
              "line_range": [
                130,
                176
              ],
              "parameters": [
                "self",
                "modes",
                "session_id"
              ]
            },
            {
              "name": "_parse_modes_from_string",
              "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
              "line_range": [
                178,
                182
              ],
              "parameters": [
                "self",
                "mode_string"
              ]
            },
            {
              "name": "_combine_mode_permissions",
              "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
              "line_range": [
                184,
                216
              ],
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "_get_mode_combination_name",
              "docstring": "Get descriptive name for mode combination",
              "line_range": [
                218,
                232
              ],
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "get_current_state",
              "docstring": "Get current workspace state",
              "line_range": [
                234,
                236
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "check_permission",
              "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
              "line_range": [
                238,
                302
              ],
              "parameters": [
                "self",
                "operation",
                "target"
              ]
            },
            {
              "name": "_get_required_capability",
              "docstring": "Map operations to required capabilities",
              "line_range": [
                304,
                320
              ],
              "parameters": [
                "self",
                "operation"
              ]
            },
            {
              "name": "_is_restricted_target",
              "docstring": "Check if target matches any file restrictions",
              "line_range": [
                322,
                334
              ],
              "parameters": [
                "self",
                "target"
              ]
            },
            {
              "name": "set_emergency_override",
              "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
              "line_range": [
                336,
                365
              ],
              "parameters": [
                "self",
                "level",
                "reason",
                "duration_minutes"
              ]
            },
            {
              "name": "_check_emergency_override",
              "docstring": "Check if emergency override is active and not expired",
              "line_range": [
                367,
                381
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_strict_mode",
              "docstring": "Integration with existing strict mode system",
              "line_range": [
                383,
                387
              ],
              "parameters": [
                "self",
                "strict_tags"
              ]
            },
            {
              "name": "add_decision_workflow",
              "docstring": "Add decision to workflow tracking (for [decide] mode)",
              "line_range": [
                389,
                396
              ],
              "parameters": [
                "self",
                "decision_id",
                "decision_data"
              ]
            },
            {
              "name": "get_workspace_status",
              "docstring": "Get comprehensive workspace status for debugging and display",
              "line_range": [
                398,
                420
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_override_time_remaining",
              "docstring": "Get formatted time remaining for emergency override",
              "line_range": [
                422,
                437
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_state",
              "docstring": "Save current state to file",
              "line_range": [
                439,
                442
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_mode_status",
              "docstring": "Get formatted status string for CLI display",
              "line_range": [
                444,
                458
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_or_create_state",
          "self._load_permission_templates"
        ],
        "_load_or_create_state": [
          "self._save_state",
          "datetime.now",
          "open",
          "json.load"
        ],
        "_load_permission_templates": [],
        "set_mode": [
          "len",
          "self._save_state",
          "self._combine_mode_permissions",
          "self._parse_modes_from_string",
          "combined_permissions.get",
          "self._get_mode_combination_name",
          "isinstance",
          "datetime.now"
        ],
        "_parse_modes_from_string": [
          "re.findall"
        ],
        "_combine_mode_permissions": [
          "sorted",
          "logger.info",
          "set",
          "template.get",
          "list"
        ],
        "_get_mode_combination_name": [
          "sorted",
          "combination_names.get"
        ],
        "get_current_state": [],
        "check_permission": [
          "self._check_emergency_override",
          "self._get_required_capability",
          "self._is_restricted_target",
          "permissions.get"
        ],
        "_get_required_capability": [
          "capability_map.items",
          "operation.startswith"
        ],
        "_is_restricted_target": [
          "restriction.startswith",
          "fnmatch.fnmatch",
          "target.startswith"
        ],
        "set_emergency_override": [
          "timedelta",
          "self._save_state",
          "datetime.now",
          "expires_at.isoformat"
        ],
        "_check_emergency_override": [
          "self._save_state",
          "datetime.now",
          "datetime.fromisoformat",
          "override.get"
        ],
        "integrate_strict_mode": [
          "self._save_state",
          "datetime.now"
        ],
        "add_decision_workflow": [
          "self._save_state",
          "datetime.now"
        ],
        "get_workspace_status": [
          "len",
          "self._get_override_time_remaining",
          "self._get_mode_combination_name",
          "override.get"
        ],
        "_get_override_time_remaining": [
          "datetime.fromisoformat",
          "remaining.total_seconds",
          "int",
          "datetime.now",
          "override.get"
        ],
        "_save_state": [
          "open",
          "json.dump"
        ],
        "get_mode_status": [
          "self._get_mode_combination_name",
          "override.get"
        ],
        "create_workspace_manager": [
          "WorkspaceStateManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "Union",
        "datetime",
        "fnmatch",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "timedelta",
        "timezone",
        "typing"
      ],
      "hash": null,
      "artifact_id": "df997091-156d-4eea-8647-818b50c2df77"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            21,
            25
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            27,
            49
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            51,
            90
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            92,
            108
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            110,
            126
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            128,
            130
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            20,
            130
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                27,
                49
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                51,
                90
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                92,
                108
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                110,
                126
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                128,
                130
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "sqlite3.connect",
          "self.create_tables"
        ],
        "create_tables": [],
        "cache_json": [
          "json_file.exists",
          "logging.error",
          "f.read",
          "str",
          "open",
          "logging.info",
          "content.encode",
          "Path",
          "json.dumps",
          "hashlib.sha256"
        ],
        "get_metadata": [
          "cursor.fetchone",
          "json.loads"
        ],
        "get_full_json": [
          "cursor.fetchone",
          "logging.error",
          "open",
          "json.load"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "35f9ab6b-2966-4308-863d-9f2d95844798"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            20,
            46
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            49,
            116
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "filtered.append",
          "isinstance",
          "item.get",
          "data.get"
        ],
        "select_json": [
          "ijson.parse",
          "f.seek",
          "json_file.exists",
          "path.append",
          "logging.error",
          "open",
          "current_item.get",
          "prefix.startswith",
          "filtered.append",
          "json.load",
          "Path",
          "filter_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "889a1af0-11c6-4dd2-a1fb-5959414bdcd5"
    },
    {
      "module_id": "src.llmstruct.workflow_orchestrator",
      "path": "src/llmstruct/workflow_orchestrator.py",
      "category": "core",
      "module_doc": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture\nExtends CopilotContextManager and SmartContextOrchestrator instead of duplicating",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface that integrates with existing llmstruct architecture",
          "line_range": [
            650,
            687
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            62,
            70
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            89,
            101
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            110,
            151
          ],
          "parameters": [
            "self",
            "project_root",
            "debug"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_onboarding_guide",
          "docstring": "Generate comprehensive AI onboarding guide using existing architecture",
          "line_range": [
            153,
            163
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_project_overview_from_struct",
          "docstring": "Get project overview from struct.json analysis",
          "line_range": [
            165,
            183
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_existing_architecture_guide",
          "docstring": "Guide to existing llmstruct architecture",
          "line_range": [
            185,
            207
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_copilot_integration_guide",
          "docstring": "Guide for proper CopilotContextManager usage",
          "line_range": [
            209,
            222
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_orchestration_guide",
          "docstring": "Guide for SmartContextOrchestrator usage",
          "line_range": [
            224,
            239
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_analysis_guide",
          "docstring": "Guide for proper struct.json analysis approach",
          "line_range": [
            241,
            259
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_current_context",
          "docstring": "Get comprehensive current context using existing architecture",
          "line_range": [
            261,
            300
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_analysis",
          "docstring": "Analyze struct.json for current codebase state",
          "line_range": [
            302,
            356
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_architecture_from_struct",
          "docstring": "Analyze architecture patterns from struct.json",
          "line_range": [
            358,
            376
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_function_duplication",
          "docstring": "Analyze function duplication across modules",
          "line_range": [
            378,
            399
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_metrics",
          "docstring": "Calculate complexity metrics from struct.json",
          "line_range": [
            401,
            417
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_score",
          "docstring": "Calculate overall complexity score",
          "line_range": [
            419,
            432
          ],
          "parameters": [
            "self",
            "stats"
          ],
          "decorators": []
        },
        {
          "name": "_get_orchestrator_state",
          "docstring": "Get SmartContextOrchestrator state",
          "line_range": [
            434,
            445
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_codebase_for_duplicates",
          "docstring": "Analyze codebase for duplicate functions using struct.json",
          "line_range": [
            447,
            495
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "sync_with_existing_architecture",
          "docstring": "Sync with existing llmstruct architecture instead of duplicating",
          "line_range": [
            497,
            520
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "create_task",
          "docstring": "Create new task (this is new functionality, not duplication)",
          "line_range": [
            526,
            554
          ],
          "parameters": [
            "self",
            "title",
            "description",
            "priority",
            "tags",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_active_tasks",
          "docstring": "Get all active tasks",
          "line_range": [
            556,
            564
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_json_safe",
          "docstring": "Safe JSON loading with error handling",
          "line_range": [
            566,
            576
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_save_json_safe",
          "docstring": "Safe JSON saving with error handling",
          "line_range": [
            578,
            587
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_get_active_session_context",
          "docstring": "Get current session context",
          "line_range": [
            590,
            594
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_identify_key_components",
          "docstring": "Identify key components from struct analysis",
          "line_range": [
            596,
            607
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_patterns",
          "docstring": "Define workflow patterns that integrate with existing architecture",
          "line_range": [
            609,
            629
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_available_commands",
          "docstring": "Available commands that work with existing architecture",
          "line_range": [
            631,
            647
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskStatus",
          "docstring": "",
          "line_range": [
            29,
            34
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "SessionType",
          "docstring": "",
          "line_range": [
            37,
            42
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "Task",
          "docstring": "Structured task representation",
          "line_range": [
            46,
            70
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                62,
                70
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "Session",
          "docstring": "AI work session with context and goals",
          "line_range": [
            74,
            101
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                89,
                101
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "WorkflowOrchestrator",
          "docstring": "Integration layer that extends existing llmstruct architecture\nUses CopilotContextManager, SmartContextOrchestrator, and struct.json analysis",
          "line_range": [
            104,
            647
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                110,
                151
              ],
              "parameters": [
                "self",
                "project_root",
                "debug"
              ]
            },
            {
              "name": "get_ai_onboarding_guide",
              "docstring": "Generate comprehensive AI onboarding guide using existing architecture",
              "line_range": [
                153,
                163
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_project_overview_from_struct",
              "docstring": "Get project overview from struct.json analysis",
              "line_range": [
                165,
                183
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_existing_architecture_guide",
              "docstring": "Guide to existing llmstruct architecture",
              "line_range": [
                185,
                207
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_copilot_integration_guide",
              "docstring": "Guide for proper CopilotContextManager usage",
              "line_range": [
                209,
                222
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_context_orchestration_guide",
              "docstring": "Guide for SmartContextOrchestrator usage",
              "line_range": [
                224,
                239
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_analysis_guide",
              "docstring": "Guide for proper struct.json analysis approach",
              "line_range": [
                241,
                259
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_current_context",
              "docstring": "Get comprehensive current context using existing architecture",
              "line_range": [
                261,
                300
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_analysis",
              "docstring": "Analyze struct.json for current codebase state",
              "line_range": [
                302,
                356
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_architecture_from_struct",
              "docstring": "Analyze architecture patterns from struct.json",
              "line_range": [
                358,
                376
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_analyze_function_duplication",
              "docstring": "Analyze function duplication across modules",
              "line_range": [
                378,
                399
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_calculate_complexity_metrics",
              "docstring": "Calculate complexity metrics from struct.json",
              "line_range": [
                401,
                417
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_calculate_complexity_score",
              "docstring": "Calculate overall complexity score",
              "line_range": [
                419,
                432
              ],
              "parameters": [
                "self",
                "stats"
              ]
            },
            {
              "name": "_get_orchestrator_state",
              "docstring": "Get SmartContextOrchestrator state",
              "line_range": [
                434,
                445
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_codebase_for_duplicates",
              "docstring": "Analyze codebase for duplicate functions using struct.json",
              "line_range": [
                447,
                495
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "sync_with_existing_architecture",
              "docstring": "Sync with existing llmstruct architecture instead of duplicating",
              "line_range": [
                497,
                520
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "create_task",
              "docstring": "Create new task (this is new functionality, not duplication)",
              "line_range": [
                526,
                554
              ],
              "parameters": [
                "self",
                "title",
                "description",
                "priority",
                "tags",
                "dependencies"
              ]
            },
            {
              "name": "get_active_tasks",
              "docstring": "Get all active tasks",
              "line_range": [
                556,
                564
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_json_safe",
              "docstring": "Safe JSON loading with error handling",
              "line_range": [
                566,
                576
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_save_json_safe",
              "docstring": "Safe JSON saving with error handling",
              "line_range": [
                578,
                587
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            },
            {
              "name": "_get_active_session_context",
              "docstring": "Get current session context",
              "line_range": [
                590,
                594
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_identify_key_components",
              "docstring": "Identify key components from struct analysis",
              "line_range": [
                596,
                607
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_get_workflow_patterns",
              "docstring": "Define workflow patterns that integrate with existing architecture",
              "line_range": [
                609,
                629
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_available_commands",
              "docstring": "Available commands that work with existing architecture",
              "line_range": [
                631,
                647
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "print",
          "str",
          "CLIConfig",
          "CopilotContextManager",
          "SystemCapabilityDiscovery",
          "SmartContextOrchestrator",
          "Path",
          "UniversalConverter",
          "time.time"
        ],
        "get_ai_onboarding_guide": [
          "self._get_project_overview_from_struct",
          "self._get_copilot_integration_guide",
          "self._get_workflow_patterns",
          "self._get_available_commands",
          "self._get_struct_analysis_guide",
          "self._get_context_orchestration_guide",
          "self._get_existing_architecture_guide"
        ],
        "_get_project_overview_from_struct": [
          "len",
          "logger.warning",
          "self._analyze_architecture_from_struct",
          "struct_path.exists",
          "struct_data.get",
          "open",
          "json.load",
          "self._identify_key_components"
        ],
        "_get_existing_architecture_guide": [],
        "_get_copilot_integration_guide": [],
        "_get_context_orchestration_guide": [],
        "_get_struct_analysis_guide": [],
        "get_current_context": [
          "print",
          "logger.warning",
          "str",
          "isinstance",
          "self._get_orchestrator_state",
          "self.get_active_tasks",
          "self._get_struct_analysis",
          "self._get_active_session_context",
          "time.time"
        ],
        "_get_struct_analysis": [
          "len",
          "print",
          "str",
          "self._analyze_architecture_from_struct",
          "struct_path.exists",
          "struct_data.get",
          "open",
          "self._calculate_complexity_metrics",
          "json.load",
          "self._analyze_function_duplication",
          "logger.error",
          "time.time"
        ],
        "_analyze_architecture_from_struct": [
          "len",
          "directories.items",
          "struct_data.get",
          "directories.keys",
          "Path",
          "list"
        ],
        "_analyze_function_duplication": [
          "struct_data.get",
          "len",
          "function_names.items",
          "module.get"
        ],
        "_calculate_complexity_metrics": [
          "len",
          "round",
          "struct_data.get",
          "stats.get",
          "m.get",
          "self._calculate_complexity_score",
          "sum"
        ],
        "_calculate_complexity_score": [
          "stats.get",
          "round"
        ],
        "_get_orchestrator_state": [
          "str"
        ],
        "analyze_codebase_for_duplicates": [
          "len",
          "struct_analysis.get",
          "print",
          "recommendations.append",
          "duplication.get",
          "self._get_struct_analysis",
          "time.time"
        ],
        "sync_with_existing_architecture": [
          "str",
          "open",
          "json.dump",
          "logger.error"
        ],
        "create_task": [
          "self._load_json_safe",
          "asdict",
          "str",
          "logger.info",
          "Task",
          "uuid.uuid4",
          "self._save_json_safe"
        ],
        "get_active_tasks": [
          "self._load_json_safe",
          "t.get"
        ],
        "_load_json_safe": [
          "file_path.exists",
          "open",
          "json.load",
          "logger.error"
        ],
        "_save_json_safe": [
          "open",
          "json.dump",
          "logger.error"
        ],
        "_get_active_session_context": [
          "asdict"
        ],
        "_identify_key_components": [
          "struct_data.get",
          "len",
          "module.get",
          "key_components.append"
        ],
        "_get_workflow_patterns": [],
        "_get_available_commands": [],
        "main": [
          "orchestrator.get_current_context",
          "print",
          "argparse.ArgumentParser",
          "orchestrator.analyze_codebase_for_duplicates",
          "len",
          "orchestrator.get_ai_onboarding_guide",
          "orchestrator.sync_with_existing_architecture",
          "WorkflowOrchestrator",
          "context.get",
          "json.dumps",
          "parser.add_argument",
          "results.items",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "SystemCapabilityDiscovery",
        "Union",
        "UniversalConverter",
        "ai_self_awareness",
        "argparse",
        "asdict",
        "cli_config",
        "context_orchestrator",
        "copilot",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "os",
        "parsers.universal_converter",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "bb862ffe-45f2-4683-add3-291d87c6567c"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "module_doc": "GitHub visualization/graph feature (gh-view-v1)\nExport consolidated tasks/ideas from JSON files to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for GitHub Projects export",
          "line_range": [
            177,
            208
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize exporter with configuration",
          "line_range": [
            19,
            25
          ],
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from TOML file",
          "line_range": [
            27,
            35
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_mapping",
          "docstring": "Load existing ID mapping between local and GitHub",
          "line_range": [
            37,
            45
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_mapping",
          "docstring": "Save ID mapping to file",
          "line_range": [
            47,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_run_gh_command",
          "docstring": "Run GitHub CLI command and return success status and output",
          "line_range": [
            55,
            68
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "load_official_data",
          "docstring": "Load tasks and ideas from official JSON files",
          "line_range": [
            70,
            98
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "format_task_for_github",
          "docstring": "Format task data for GitHub Project card",
          "line_range": [
            100,
            137
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "format_idea_for_github",
          "docstring": "Format idea data for GitHub Project card",
          "line_range": [
            139,
            174
          ],
          "parameters": [
            "self",
            "idea"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExporter",
          "docstring": "Export tasks and ideas to GitHub Projects as cards",
          "line_range": [
            16,
            174
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize exporter with configuration",
              "line_range": [
                19,
                25
              ],
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from TOML file",
              "line_range": [
                27,
                35
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_mapping",
              "docstring": "Load existing ID mapping between local and GitHub",
              "line_range": [
                37,
                45
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_mapping",
              "docstring": "Save ID mapping to file",
              "line_range": [
                47,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_run_gh_command",
              "docstring": "Run GitHub CLI command and return success status and output",
              "line_range": [
                55,
                68
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "load_official_data",
              "docstring": "Load tasks and ideas from official JSON files",
              "line_range": [
                70,
                98
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "format_task_for_github",
              "docstring": "Format task data for GitHub Project card",
              "line_range": [
                100,
                137
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "format_idea_for_github",
              "docstring": "Format idea data for GitHub Project card",
              "line_range": [
                139,
                174
              ],
              "parameters": [
                "self",
                "idea"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config",
          "self._load_mapping"
        ],
        "_load_config": [
          "toml.load",
          "open",
          "print",
          "config.get"
        ],
        "_load_mapping": [
          "open",
          "json.load"
        ],
        "_save_mapping": [
          "print",
          "open",
          "json.dump"
        ],
        "_run_gh_command": [
          "subprocess.run"
        ],
        "load_official_data": [
          "len",
          "print",
          "ideas_file.exists",
          "tasks_file.exists",
          "open",
          "json.load",
          "ideas_data.get",
          "tasks_data.get"
        ],
        "format_task_for_github": [
          "task.get",
          "body_parts.append",
          "status_map.get"
        ],
        "format_idea_for_github": [
          "status_map.get",
          "body_parts.append",
          "idea.get"
        ],
        "main": [
          "exporter.load_official_data",
          "len",
          "print",
          "exporter.format_idea_for_github",
          "GitHubProjectsExporter",
          "sys.exit",
          "exporter.format_task_for_github"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "pathlib",
        "subprocess",
        "sys",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "bbbfeef0-d3ba-4e18-a39b-8835d7688f3f"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
          "line_range": [
            20,
            71
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            74,
            114
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "any",
          "str",
          "struct.get",
          "module.get",
          "isinstance",
          "item.get",
          "prompt.lower",
          "filter_json"
        ],
        "attach_to_llm_request": [
          "filter_struct",
          "cache.cache_json",
          "logging.error",
          "cache.get_full_json",
          "select_json",
          "filter_json",
          "context_file.exists",
          "prompt.lower",
          "logging.info",
          "Path",
          "json.dumps",
          "cache.get_metadata"
        ]
      },
      "dependencies": [
        "Any",
        "JSONCache",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "dda85bf2-c378-4a74-a9e1-6de28ef6371f"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "module_doc": "LLMStruct Copilot Integration Module\nProvides context-aware development assistance with hybrid copilot capabilities.",
      "functions": [
        {
          "name": "initialize_copilot",
          "docstring": "Initialize copilot context manager for the project.\n\nArgs:\n    project_root: Project root directory\n\nReturns:\n    Configured CopilotContextManager instance",
          "line_range": [
            649,
            659
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "trigger_copilot_event",
          "docstring": "Trigger a copilot event and get relevant context.\n\nArgs:\n    manager: CopilotContextManager instance\n    event_type: Type of event\n    file_path: Optional file path\n    **kwargs: Additional event metadata\n\nReturns:\n    Dict with event context",
          "line_range": [
            662,
            679
          ],
          "parameters": [
            "manager",
            "event_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "smart_suggest",
          "docstring": "Get smart suggestions based on query and context.\n\nArgs:\n    manager: CopilotContextManager instance\n    query: Query string\n    context: Context type (code, workflow, task, etc.)\n\nReturns:\n    List of suggestions",
          "line_range": [
            682,
            702
          ],
          "parameters": [
            "manager",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context_for_scenario",
          "docstring": "Get optimized context for specific scenario - standalone function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            705,
            728
          ],
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
          "line_range": [
            68,
            90
          ],
          "parameters": [
            "self",
            "project_root",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load copilot configuration from JSON file.",
          "line_range": [
            92,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_layers",
          "docstring": "Initialize context layers from configuration.",
          "line_range": [
            106,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_context_layer",
          "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
          "line_range": [
            118,
            160
          ],
          "parameters": [
            "self",
            "layer_name",
            "force"
          ],
          "decorators": []
        },
        {
          "name": "unload_context_layer",
          "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
          "line_range": [
            162,
            180
          ],
          "parameters": [
            "self",
            "layer_name"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            182,
            225
          ],
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_context",
          "docstring": "Fallback to legacy context loading.",
          "line_range": [
            227,
            235
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_vscode",
          "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
          "line_range": [
            237,
            251
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_event",
          "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
          "line_range": [
            252,
            296
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_event_context",
          "docstring": "Legacy event context loading as fallback.",
          "line_range": [
            298,
            350
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "suggest_completion",
          "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
          "line_range": [
            352,
            397
          ],
          "parameters": [
            "self",
            "current_code",
            "file_path",
            "cursor_position"
          ],
          "decorators": []
        },
        {
          "name": "validate_change",
          "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
          "line_range": [
            399,
            445
          ],
          "parameters": [
            "self",
            "file_path",
            "change_type"
          ],
          "decorators": []
        },
        {
          "name": "_matches_scope",
          "docstring": "Check if file matches scope pattern.",
          "line_range": [
            447,
            452
          ],
          "parameters": [
            "self",
            "file_path",
            "scope"
          ],
          "decorators": []
        },
        {
          "name": "_matches_trigger",
          "docstring": "Check if change type matches trigger.",
          "line_range": [
            454,
            463
          ],
          "parameters": [
            "self",
            "change_type",
            "trigger"
          ],
          "decorators": []
        },
        {
          "name": "_validate_json_schema",
          "docstring": "Validate JSON file against schema.",
          "line_range": [
            465,
            480
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_check_circular_dependencies",
          "docstring": "Check for circular dependencies.",
          "line_range": [
            482,
            507
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_validate_task_references",
          "docstring": "Validate task references in tasks.json.",
          "line_range": [
            509,
            536
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
          "line_range": [
            538,
            568
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "refresh_all_contexts",
          "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
          "line_range": [
            570,
            584
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_status",
          "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
          "line_range": [
            586,
            607
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "export_context",
          "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
          "line_range": [
            609,
            631
          ],
          "parameters": [
            "self",
            "layers",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Clean up resources.",
          "line_range": [
            633,
            643
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextLayer",
          "docstring": "Context layer priorities for copilot integration.",
          "line_range": [
            22,
            28
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AttachMode",
          "docstring": "Context attachment modes.",
          "line_range": [
            31,
            37
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLayerConfig",
          "docstring": "Configuration for a context layer.",
          "line_range": [
            41,
            49
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotEvent",
          "docstring": "Represents a copilot event for context triggering.",
          "line_range": [
            53,
            59
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotContextManager",
          "docstring": "Manages context layers and integration with GitHub Copilot.\nProvides intelligent context loading and workflow assistance.",
          "line_range": [
            62,
            643
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
              "line_range": [
                68,
                90
              ],
              "parameters": [
                "self",
                "project_root",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load copilot configuration from JSON file.",
              "line_range": [
                92,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_initialize_layers",
              "docstring": "Initialize context layers from configuration.",
              "line_range": [
                106,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_context_layer",
              "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
              "line_range": [
                118,
                160
              ],
              "parameters": [
                "self",
                "layer_name",
                "force"
              ]
            },
            {
              "name": "unload_context_layer",
              "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
              "line_range": [
                162,
                180
              ],
              "parameters": [
                "self",
                "layer_name"
              ]
            },
            {
              "name": "get_optimized_context",
              "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
              "line_range": [
                182,
                225
              ],
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "max_tokens"
              ]
            },
            {
              "name": "_get_legacy_context",
              "docstring": "Fallback to legacy context loading.",
              "line_range": [
                227,
                235
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_vscode",
              "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
              "line_range": [
                237,
                251
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_context_for_event",
              "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
              "line_range": [
                252,
                296
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_get_legacy_event_context",
              "docstring": "Legacy event context loading as fallback.",
              "line_range": [
                298,
                350
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "suggest_completion",
              "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
              "line_range": [
                352,
                397
              ],
              "parameters": [
                "self",
                "current_code",
                "file_path",
                "cursor_position"
              ]
            },
            {
              "name": "validate_change",
              "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
              "line_range": [
                399,
                445
              ],
              "parameters": [
                "self",
                "file_path",
                "change_type"
              ]
            },
            {
              "name": "_matches_scope",
              "docstring": "Check if file matches scope pattern.",
              "line_range": [
                447,
                452
              ],
              "parameters": [
                "self",
                "file_path",
                "scope"
              ]
            },
            {
              "name": "_matches_trigger",
              "docstring": "Check if change type matches trigger.",
              "line_range": [
                454,
                463
              ],
              "parameters": [
                "self",
                "change_type",
                "trigger"
              ]
            },
            {
              "name": "_validate_json_schema",
              "docstring": "Validate JSON file against schema.",
              "line_range": [
                465,
                480
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_check_circular_dependencies",
              "docstring": "Check for circular dependencies.",
              "line_range": [
                482,
                507
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_validate_task_references",
              "docstring": "Validate task references in tasks.json.",
              "line_range": [
                509,
                536
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
              "line_range": [
                538,
                568
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "refresh_all_contexts",
              "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
              "line_range": [
                570,
                584
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_status",
              "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
              "line_range": [
                586,
                607
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "export_context",
              "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
              "line_range": [
                609,
                631
              ],
              "parameters": [
                "self",
                "layers",
                "format"
              ]
            },
            {
              "name": "close",
              "docstring": "Clean up resources.",
              "line_range": [
                633,
                643
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "JSONCache",
          "str",
          "self._initialize_layers",
          "create_context_orchestrator",
          "Path",
          "self._load_config",
          "os.getcwd"
        ],
        "_load_config": [
          "logger.warning",
          "logger.info",
          "open",
          "json.load",
          "Path",
          "logger.error"
        ],
        "_initialize_layers": [
          "ContextLayerConfig",
          "layer_config.get",
          "layers_config.items"
        ],
        "load_context_layer": [
          "logger.debug",
          "source_path.exists",
          "logger.warning",
          "logger.info",
          "open",
          "json.load",
          "logger.error",
          "time.time"
        ],
        "unload_context_layer": [
          "logger.info"
        ],
        "get_optimized_context": [
          "logger.error",
          "scenario_mapping.get",
          "self._get_legacy_context"
        ],
        "_get_legacy_context": [
          "self.load_context_layer"
        ],
        "get_context_for_vscode": [
          "self.get_optimized_context"
        ],
        "get_context_for_event": [
          "logger.error",
          "self._get_legacy_event_context",
          "self.get_optimized_context",
          "scenario_mapping.get"
        ],
        "_get_legacy_event_context": [
          "workflow_triggers.get",
          "source_path.exists",
          "code_triggers.get",
          "self.load_context_layer",
          "open",
          "json.load",
          "file_triggers.get",
          "logger.error",
          "triggers.get"
        ],
        "suggest_completion": [
          "current_module.get",
          "suggestions.append",
          "self.load_context_layer",
          "str",
          "module.get",
          "struct_context.get",
          "Path",
          "func.get"
        ],
        "validate_change": [
          "safety_features.get",
          "self._validate_json_schema",
          "len",
          "self._matches_scope",
          "self._matches_trigger",
          "self._check_circular_dependencies",
          "result.get",
          "rule.get",
          "self._validate_task_references"
        ],
        "_matches_scope": [
          "str",
          "fnmatch",
          "Path"
        ],
        "_matches_trigger": [
          "trigger_map.get"
        ],
        "_validate_json_schema": [
          "open",
          "file_path.endswith",
          "json.load"
        ],
        "_check_circular_dependencies": [
          "len",
          "self.load_context_layer",
          "str",
          "module.get",
          "struct_data.get",
          "Path"
        ],
        "_validate_task_references": [
          "file_path.endswith",
          "task_ids.add",
          "set",
          "task.get",
          "open",
          "json.load",
          "tasks_data.get"
        ],
        "get_workflow_suggestions": [
          "workflow.get",
          "suggestions.extend",
          "suggestions.append",
          "self.load_context_layer",
          "workflows.items",
          "command.lower"
        ],
        "refresh_all_contexts": [
          "self.load_context_layer",
          "logger.info",
          "list"
        ],
        "get_context_status": [
          "list"
        ],
        "export_context": [
          "str",
          "json.dumps",
          "list"
        ],
        "close": [
          "hasattr",
          "logger.info"
        ],
        "initialize_copilot": [
          "CopilotContextManager"
        ],
        "trigger_copilot_event": [
          "CopilotEvent",
          "manager.get_context_for_event"
        ],
        "smart_suggest": [
          "manager.get_workflow_suggestions"
        ],
        "get_optimized_context_for_scenario": [
          "manager.close",
          "initialize_copilot",
          "locals",
          "manager.get_optimized_context"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "Union",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "fnmatch",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "47f6bb80-30c5-4bf1-940a-d800cb8258c3"
    },
    {
      "module_id": "src.llmstruct.ai_workflow_middleware",
      "path": "src/llmstruct/ai_workflow_middleware.py",
      "category": "core",
      "module_doc": "AI Workflow Middleware - Forces AI Integration with LLMStruct\nIntercepts all AI requests and ensures they go through our orchestration system.",
      "functions": [
        {
          "name": "initialize_ai_middleware",
          "docstring": "Initialize global AI middleware.",
          "line_range": [
            393,
            397
          ],
          "parameters": [
            "project_root",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_middleware",
          "docstring": "Get current AI middleware instance.",
          "line_range": [
            400,
            402
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "process_ai_query",
          "docstring": "Global function to process AI queries through middleware.",
          "line_range": [
            405,
            410
          ],
          "parameters": [
            "query",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "ensure_llmstruct_integration",
          "docstring": "Decorator that ensures function uses llmstruct system.",
          "line_range": [
            414,
            431
          ],
          "parameters": [
            "func"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            55,
            74
          ],
          "parameters": [
            "self",
            "project_root",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "_load_middleware_config",
          "docstring": "Load middleware configuration.",
          "line_range": [
            76,
            101
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_ai_request",
          "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration",
          "line_range": [
            103,
            135
          ],
          "parameters": [
            "self",
            "raw_query",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_parse_ai_request",
          "docstring": "Parse raw query into structured AI request.",
          "line_range": [
            137,
            160
          ],
          "parameters": [
            "self",
            "raw_query"
          ],
          "decorators": []
        },
        {
          "name": "_should_use_llmstruct",
          "docstring": "Determine if request should use llmstruct system.",
          "line_range": [
            162,
            186
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_process_with_llmstruct",
          "docstring": "Process request through full llmstruct system.",
          "line_range": [
            188,
            219
          ],
          "parameters": [
            "self",
            "request",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_process_bypass",
          "docstring": "Process request without llmstruct system.",
          "line_range": [
            221,
            236
          ],
          "parameters": [
            "self",
            "request",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_optimize_context",
          "docstring": "Optimize context using orchestrator.",
          "line_range": [
            238,
            261
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_ai_delegation",
          "docstring": "Analyze which AI should handle this request.",
          "line_range": [
            263,
            280
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_context",
          "docstring": "Get enhanced context with project awareness.",
          "line_range": [
            282,
            295
          ],
          "parameters": [
            "self",
            "request",
            "context_result"
          ],
          "decorators": []
        },
        {
          "name": "_get_capability_summary",
          "docstring": "Get current system capabilities.",
          "line_range": [
            297,
            310
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_generate_usage_guidance",
          "docstring": "Generate guidance for AI on how to use llmstruct system.",
          "line_range": [
            312,
            331
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_map_tags_to_scenario",
          "docstring": "Map context tags to orchestrator scenarios.",
          "line_range": [
            333,
            348
          ],
          "parameters": [
            "self",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "_default_ai_processing",
          "docstring": "Default AI processing when no custom handler provided.",
          "line_range": [
            350,
            365
          ],
          "parameters": [
            "self",
            "request",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_middleware_stats",
          "docstring": "Get middleware usage statistics.",
          "line_range": [
            367,
            376
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "force_llmstruct_mode",
          "docstring": "Force all future requests to use llmstruct system.",
          "line_range": [
            378,
            381
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enable_guidance_mode",
          "docstring": "Enable guided mode with llmstruct suggestions.",
          "line_range": [
            383,
            386
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "wrapper",
          "docstring": "",
          "line_range": [
            416,
            429
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AIWorkflowMode",
          "docstring": "AI workflow enforcement modes.",
          "line_range": [
            21,
            26
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AIRequest",
          "docstring": "Standardized AI request structure.",
          "line_range": [
            30,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIResponse",
          "docstring": "Standardized AI response structure.",
          "line_range": [
            40,
            46
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIWorkflowMiddleware",
          "docstring": "Middleware that ensures ALL AI interactions go through LLMStruct system.\nThis solves the problem of AI not using its own infrastructure.",
          "line_range": [
            49,
            386
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                55,
                74
              ],
              "parameters": [
                "self",
                "project_root",
                "mode"
              ]
            },
            {
              "name": "_load_middleware_config",
              "docstring": "Load middleware configuration.",
              "line_range": [
                76,
                101
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_ai_request",
              "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration",
              "line_range": [
                103,
                135
              ],
              "parameters": [
                "self",
                "raw_query",
                "ai_handler"
              ]
            },
            {
              "name": "_parse_ai_request",
              "docstring": "Parse raw query into structured AI request.",
              "line_range": [
                137,
                160
              ],
              "parameters": [
                "self",
                "raw_query"
              ]
            },
            {
              "name": "_should_use_llmstruct",
              "docstring": "Determine if request should use llmstruct system.",
              "line_range": [
                162,
                186
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_process_with_llmstruct",
              "docstring": "Process request through full llmstruct system.",
              "line_range": [
                188,
                219
              ],
              "parameters": [
                "self",
                "request",
                "ai_handler"
              ]
            },
            {
              "name": "_process_bypass",
              "docstring": "Process request without llmstruct system.",
              "line_range": [
                221,
                236
              ],
              "parameters": [
                "self",
                "request",
                "ai_handler"
              ]
            },
            {
              "name": "_optimize_context",
              "docstring": "Optimize context using orchestrator.",
              "line_range": [
                238,
                261
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_analyze_ai_delegation",
              "docstring": "Analyze which AI should handle this request.",
              "line_range": [
                263,
                280
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_get_enhanced_context",
              "docstring": "Get enhanced context with project awareness.",
              "line_range": [
                282,
                295
              ],
              "parameters": [
                "self",
                "request",
                "context_result"
              ]
            },
            {
              "name": "_get_capability_summary",
              "docstring": "Get current system capabilities.",
              "line_range": [
                297,
                310
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_generate_usage_guidance",
              "docstring": "Generate guidance for AI on how to use llmstruct system.",
              "line_range": [
                312,
                331
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_map_tags_to_scenario",
              "docstring": "Map context tags to orchestrator scenarios.",
              "line_range": [
                333,
                348
              ],
              "parameters": [
                "self",
                "tags"
              ]
            },
            {
              "name": "_default_ai_processing",
              "docstring": "Default AI processing when no custom handler provided.",
              "line_range": [
                350,
                365
              ],
              "parameters": [
                "self",
                "request",
                "context"
              ]
            },
            {
              "name": "get_middleware_stats",
              "docstring": "Get middleware usage statistics.",
              "line_range": [
                367,
                376
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "force_llmstruct_mode",
              "docstring": "Force all future requests to use llmstruct system.",
              "line_range": [
                378,
                381
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enable_guidance_mode",
              "docstring": "Enable guided mode with llmstruct suggestions.",
              "line_range": [
                383,
                386
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_middleware_config",
          "Path",
          "str",
          "logger.info",
          "CursorAIBridge",
          "SystemCapabilityDiscovery",
          "create_context_orchestrator"
        ],
        "_load_middleware_config": [
          "json.load",
          "open",
          "config_path.exists"
        ],
        "process_ai_request": [
          "self._should_use_llmstruct",
          "str",
          "self._process_bypass",
          "self._process_with_llmstruct",
          "time.time",
          "AIResponse",
          "logger.error",
          "self._parse_ai_request"
        ],
        "_parse_ai_request": [
          "AIRequest",
          "re.sub",
          "re.findall",
          "context_tags.extend",
          "time.time"
        ],
        "_should_use_llmstruct": [],
        "_process_with_llmstruct": [
          "self._analyze_ai_delegation",
          "self._optimize_context",
          "ai_handler",
          "self._default_ai_processing",
          "self._get_enhanced_context",
          "enhanced_context.get",
          "AIResponse",
          "time.time"
        ],
        "_process_bypass": [
          "ai_handler",
          "AIResponse"
        ],
        "_optimize_context": [
          "len",
          "str",
          "context.get",
          "self._map_tags_to_scenario",
          "logger.error"
        ],
        "_analyze_ai_delegation": [
          "str",
          "logger.error",
          "delegation.get"
        ],
        "_get_enhanced_context": [
          "self._get_capability_summary",
          "self._generate_usage_guidance"
        ],
        "_get_capability_summary": [
          "str"
        ],
        "_generate_usage_guidance": [
          "guidance.append"
        ],
        "_map_tags_to_scenario": [],
        "_default_ai_processing": [],
        "get_middleware_stats": [],
        "force_llmstruct_mode": [
          "logger.info"
        ],
        "enable_guidance_mode": [
          "logger.info"
        ],
        "initialize_ai_middleware": [
          "AIWorkflowMiddleware"
        ],
        "get_ai_middleware": [],
        "process_ai_query": [
          "RuntimeError",
          "_middleware_instance.process_ai_request"
        ],
        "ensure_llmstruct_integration": [],
        "wrapper": [
          "kwargs.get",
          "logger.warning",
          "str",
          "middleware.process_ai_request",
          "func",
          "get_ai_middleware"
        ]
      },
      "dependencies": [
        "Any",
        "Callable",
        "CursorAIBridge",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.context_orchestrator",
        "llmstruct.cursor_ai_bridge",
        "logging",
        "pathlib",
        "re",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "3067bb51-7524-4987-b3dc-cdade5fb87a2"
    },
    {
      "module_id": "src.llmstruct.ai_cli_integration",
      "path": "src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "module_doc": "AI Self-Awareness CLI Integration Module\nIntegrates unused CLI functions into the AI self-awareness system.",
      "functions": [
        {
          "name": "create_ai_cli_integration",
          "docstring": "Factory function to create AI CLI integration instance.",
          "line_range": [
            304,
            306
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_enhanced_cli_summary",
          "docstring": "Get a formatted summary of AI CLI integration capabilities.",
          "line_range": [
            309,
            346
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI integration system.",
          "line_range": [
            21,
            25
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_discover_available_commands",
          "docstring": "Discover which unused CLI commands are available for integration.",
          "line_range": [
            27,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_status_command",
          "docstring": "Integrate cmd_status for real-time AI system status awareness.",
          "line_range": [
            71,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_audit_command",
          "docstring": "Integrate cmd_audit for system health analysis awareness.",
          "line_range": [
            102,
            131
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_context_command",
          "docstring": "Integrate cmd_context for context mode awareness.",
          "line_range": [
            133,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_queue_command",
          "docstring": "Integrate cmd_queue for workflow queue monitoring.",
          "line_range": [
            164,
            193
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_integration_summary",
          "docstring": "Get summary of CLI command integrations for AI awareness.",
          "line_range": [
            195,
            215
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_ai_enhancement_impact",
          "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
          "line_range": [
            217,
            241
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_status",
          "docstring": "Create fallback status information if cmd_status is not available.",
          "line_range": [
            243,
            256
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_audit",
          "docstring": "Create fallback audit information if cmd_audit is not available.",
          "line_range": [
            258,
            271
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_context",
          "docstring": "Create fallback context information if cmd_context is not available.",
          "line_range": [
            273,
            286
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_queue",
          "docstring": "Create fallback queue information if cmd_queue is not available.",
          "line_range": [
            288,
            301
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AISelfAwarenessCLIIntegration",
          "docstring": "Integrates unused CLI functions to enhance AI self-awareness capabilities.\nTransforms 21 unused CLI commands into useful AI interaction tools.",
          "line_range": [
            15,
            301
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI integration system.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_discover_available_commands",
              "docstring": "Discover which unused CLI commands are available for integration.",
              "line_range": [
                27,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_status_command",
              "docstring": "Integrate cmd_status for real-time AI system status awareness.",
              "line_range": [
                71,
                100
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_audit_command",
              "docstring": "Integrate cmd_audit for system health analysis awareness.",
              "line_range": [
                102,
                131
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_context_command",
              "docstring": "Integrate cmd_context for context mode awareness.",
              "line_range": [
                133,
                162
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_queue_command",
              "docstring": "Integrate cmd_queue for workflow queue monitoring.",
              "line_range": [
                164,
                193
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_integration_summary",
              "docstring": "Get summary of CLI command integrations for AI awareness.",
              "line_range": [
                195,
                215
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_ai_enhancement_impact",
              "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
              "line_range": [
                217,
                241
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_status",
              "docstring": "Create fallback status information if cmd_status is not available.",
              "line_range": [
                243,
                256
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_audit",
              "docstring": "Create fallback audit information if cmd_audit is not available.",
              "line_range": [
                258,
                271
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_context",
              "docstring": "Create fallback context information if cmd_context is not available.",
              "line_range": [
                273,
                286
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_queue",
              "docstring": "Create fallback queue information if cmd_queue is not available.",
              "line_range": [
                288,
                301
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._discover_available_commands"
        ],
        "_discover_available_commands": [
          "hasattr",
          "getattr",
          "unused_command_mapping.items",
          "logger.error"
        ],
        "integrate_ai_status_command": [
          "str",
          "cmd_status",
          "self._create_fallback_status",
          "logger.error"
        ],
        "integrate_ai_audit_command": [
          "self._create_fallback_audit",
          "str",
          "cmd_audit",
          "logger.error"
        ],
        "integrate_ai_context_command": [
          "str",
          "cmd_context",
          "self._create_fallback_context",
          "logger.error"
        ],
        "integrate_ai_queue_command": [
          "logger.error",
          "str",
          "self._create_fallback_queue",
          "cmd_queue"
        ],
        "get_integration_summary": [
          "len",
          "self._calculate_ai_enhancement_impact",
          "info.get",
          "cmd.get",
          "sum"
        ],
        "_calculate_ai_enhancement_impact": [
          "len",
          "any",
          "capability_categories.items",
          "info.get",
          "enhanced_categories.append"
        ],
        "_create_fallback_status": [
          "str"
        ],
        "_create_fallback_audit": [
          "str"
        ],
        "_create_fallback_context": [],
        "_create_fallback_queue": [],
        "create_ai_cli_integration": [
          "AISelfAwarenessCLIIntegration"
        ],
        "get_ai_enhanced_cli_summary": [
          "integration.integrate_ai_status_command",
          "integration.get_integration_summary",
          "integration.integrate_ai_queue_command",
          "create_ai_cli_integration",
          "integration.integrate_ai_context_command",
          "integration.integrate_ai_audit_command"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "cli_commands",
        "json",
        "llmstruct",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "03dc5ba9-2a27-4df2-82a9-02a31b5e4700"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "module_doc": "CLI configuration management.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize configuration manager.",
          "line_range": [
            20,
            24
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from llmstruct.toml.",
          "line_range": [
            26,
            34
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "Get cache configuration section.",
          "line_range": [
            36,
            38
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "Get Copilot configuration section.",
          "line_range": [
            40,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "Get queue configuration section.",
          "line_range": [
            44,
            46
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "Get context configuration section.",
          "line_range": [
            48,
            50
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_gitignore_patterns",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            52,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "Get directories to exclude from scanning.",
          "line_range": [
            68,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "Get file patterns to include.",
          "line_range": [
            84,
            89
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "Get file patterns to exclude.",
          "line_range": [
            91,
            96
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "Get maximum file size for processing (in bytes).",
          "line_range": [
            98,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_auto_update_config",
          "docstring": "Get auto-update configuration.",
          "line_range": [
            102,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_auto_update_enabled",
          "docstring": "Check if auto-update is enabled.",
          "line_range": [
            106,
            108
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "Get path to struct.json file.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "Get path to context file.",
          "line_range": [
            114,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "Save current configuration to file.",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_config",
          "docstring": "Update configuration value.",
          "line_range": [
            126,
            131
          ],
          "parameters": [
            "self",
            "section",
            "key",
            "value"
          ],
          "decorators": []
        },
        {
          "name": "reload_config",
          "docstring": "Reload configuration from file.",
          "line_range": [
            133,
            135
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIConfig",
          "docstring": "Manages CLI configuration from llmstruct.toml and other sources.",
          "line_range": [
            17,
            135
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize configuration manager.",
              "line_range": [
                20,
                24
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from llmstruct.toml.",
              "line_range": [
                26,
                34
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cache_config",
              "docstring": "Get cache configuration section.",
              "line_range": [
                36,
                38
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_copilot_config",
              "docstring": "Get Copilot configuration section.",
              "line_range": [
                40,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_queue_config",
              "docstring": "Get queue configuration section.",
              "line_range": [
                44,
                46
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_config",
              "docstring": "Get context configuration section.",
              "line_range": [
                48,
                50
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_gitignore_patterns",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": [
                52,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "Get directories to exclude from scanning.",
              "line_range": [
                68,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_include_patterns",
              "docstring": "Get file patterns to include.",
              "line_range": [
                84,
                89
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "Get file patterns to exclude.",
              "line_range": [
                91,
                96
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_max_file_size",
              "docstring": "Get maximum file size for processing (in bytes).",
              "line_range": [
                98,
                100
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_auto_update_config",
              "docstring": "Get auto-update configuration.",
              "line_range": [
                102,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_auto_update_enabled",
              "docstring": "Check if auto-update is enabled.",
              "line_range": [
                106,
                108
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_struct_file_path",
              "docstring": "Get path to struct.json file.",
              "line_range": [
                110,
                112
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_file_path",
              "docstring": "Get path to context file.",
              "line_range": [
                114,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_config",
              "docstring": "Save current configuration to file.",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_config",
              "docstring": "Update configuration value.",
              "line_range": [
                126,
                131
              ],
              "parameters": [
                "self",
                "section",
                "key",
                "value"
              ]
            },
            {
              "name": "reload_config",
              "docstring": "Reload configuration from file.",
              "line_range": [
                133,
                135
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config"
        ],
        "_load_config": [
          "logging.error",
          "toml.load"
        ],
        "get_cache_config": [],
        "get_copilot_config": [],
        "get_queue_config": [],
        "get_context_config": [],
        "get_gitignore_patterns": [
          "gitignore_path.exists",
          "logging.error",
          "gitignore_path.open",
          "line.startswith",
          "line.strip",
          "Path"
        ],
        "get_exclude_dirs": [
          "set",
          "cli_config.get",
          "list",
          "parsing_config.get"
        ],
        "get_include_patterns": [
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_exclude_patterns": [
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_max_file_size": [],
        "get_auto_update_config": [],
        "is_auto_update_enabled": [
          "self.get_auto_update_config"
        ],
        "get_struct_file_path": [],
        "get_context_file_path": [],
        "save_config": [
          "logging.error",
          "toml.dump"
        ],
        "update_config": [
          "self.save_config"
        ],
        "reload_config": [
          "self._load_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "logging",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9e070cd9-4b16-4161-99b7-3fd97e373051"
    },
    {
      "module_id": "src.llmstruct.cursor_integration",
      "path": "src/llmstruct/cursor_integration.py",
      "category": "core",
      "module_doc": "Cursor IDE Integration Module\nProvides seamless integration between llmstruct AI capabilities and Cursor IDE.",
      "functions": [
        {
          "name": "create_cursor_integration",
          "docstring": "Create a Cursor integration manager for the project.",
          "line_range": [
            435,
            437
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            31,
            35
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_optimized_context",
          "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
          "line_range": [
            37,
            71
          ],
          "parameters": [
            "self",
            "query_type",
            "file_context"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": [
            73,
            83
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": [
            85,
            101
          ],
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": [
            103,
            115
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            121,
            124
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "delegate_to_optimal_ai",
          "docstring": "Route tasks to best AI model based on preferences.",
          "line_range": [
            126,
            160
          ],
          "parameters": [
            "self",
            "task_type",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_delegation_confidence",
          "docstring": "Calculate confidence in AI delegation decision.",
          "line_range": [
            162,
            175
          ],
          "parameters": [
            "self",
            "task_type",
            "selected_ai"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor configuration.",
          "line_range": [
            177,
            187
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            193,
            195
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals.",
          "line_range": [
            197,
            242
          ],
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "get_priority_guidance",
          "docstring": "Provide priority guidance based on business objectives.",
          "line_range": [
            244,
            270
          ],
          "parameters": [
            "self",
            "feature_options"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_feature_score",
          "docstring": "Calculate priority score for a feature.",
          "line_range": [
            272,
            292
          ],
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_get_scoring_reasoning",
          "docstring": "Get reasoning for feature scoring.",
          "line_range": [
            294,
            307
          ],
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": [
            309,
            319
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            325,
            328
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "Start a new Cursor session.",
          "line_range": [
            330,
            349
          ],
          "parameters": [
            "self",
            "session_id",
            "user_preferences"
          ],
          "decorators": []
        },
        {
          "name": "save_session_context",
          "docstring": "Save important context for next session.",
          "line_range": [
            351,
            377
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load context from previous sessions.",
          "line_range": [
            379,
            388
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            394,
            400
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_cursor_response",
          "docstring": "Get comprehensive response optimized for Cursor.",
          "line_range": [
            402,
            431
          ],
          "parameters": [
            "self",
            "query",
            "file_context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorSession",
          "docstring": "Represents a Cursor IDE session with context and preferences.",
          "line_range": [
            19,
            25
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CursorContextManager",
          "docstring": "Manages context optimization specifically for Cursor interactions.",
          "line_range": [
            28,
            115
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_cursor_optimized_context",
              "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
              "line_range": [
                37,
                71
              ],
              "parameters": [
                "self",
                "query_type",
                "file_context"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": [
                73,
                83
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": [
                85,
                101
              ],
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": [
                103,
                115
              ],
              "parameters": [
                "self",
                "data"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorMultiAIOrchestrator",
          "docstring": "Coordinates different AI models through Cursor interface.",
          "line_range": [
            118,
            187
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                121,
                124
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "delegate_to_optimal_ai",
              "docstring": "Route tasks to best AI model based on preferences.",
              "line_range": [
                126,
                160
              ],
              "parameters": [
                "self",
                "task_type",
                "context"
              ]
            },
            {
              "name": "_calculate_delegation_confidence",
              "docstring": "Calculate confidence in AI delegation decision.",
              "line_range": [
                162,
                175
              ],
              "parameters": [
                "self",
                "task_type",
                "selected_ai"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor configuration.",
              "line_range": [
                177,
                187
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "PersonalPlanningCursorBridge",
          "docstring": "Bridge between personal planning and Cursor without exposing sensitive data.",
          "line_range": [
            190,
            319
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                193,
                195
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals.",
              "line_range": [
                197,
                242
              ],
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "get_priority_guidance",
              "docstring": "Provide priority guidance based on business objectives.",
              "line_range": [
                244,
                270
              ],
              "parameters": [
                "self",
                "feature_options"
              ]
            },
            {
              "name": "_calculate_feature_score",
              "docstring": "Calculate priority score for a feature.",
              "line_range": [
                272,
                292
              ],
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_get_scoring_reasoning",
              "docstring": "Get reasoning for feature scoring.",
              "line_range": [
                294,
                307
              ],
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": [
                309,
                319
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorSessionManager",
          "docstring": "Maintains context across Cursor sessions for better continuity.",
          "line_range": [
            322,
            388
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                325,
                328
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "start_session",
              "docstring": "Start a new Cursor session.",
              "line_range": [
                330,
                349
              ],
              "parameters": [
                "self",
                "session_id",
                "user_preferences"
              ]
            },
            {
              "name": "save_session_context",
              "docstring": "Save important context for next session.",
              "line_range": [
                351,
                377
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load context from previous sessions.",
              "line_range": [
                379,
                388
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorIntegrationManager",
          "docstring": "Main integration manager that coordinates all Cursor-specific features.",
          "line_range": [
            391,
            431
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                394,
                400
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_comprehensive_cursor_response",
              "docstring": "Get comprehensive response optimized for Cursor.",
              "line_range": [
                402,
                431
              ],
              "parameters": [
                "self",
                "query",
                "file_context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CursorMultiAIOrchestrator",
          "SystemCapabilityDiscovery",
          "PersonalPlanningCursorBridge",
          "CursorContextManager",
          "CursorSessionManager"
        ],
        "get_cursor_optimized_context": [
          "optimal_config.get",
          "str",
          "context_rules.get",
          "logger.error",
          "file_path.exists",
          "open",
          "json.load",
          "self._apply_privacy_filter"
        ],
        "_load_cursor_config": [
          "config_path.exists",
          "open",
          "json.load",
          "Path",
          "logger.error"
        ],
        "_apply_privacy_filter": [
          "isinstance",
          "context_data.items",
          "self._filter_sensitive_dict"
        ],
        "_filter_sensitive_dict": [
          "any",
          "data.items",
          "isinstance",
          "self._filter_sensitive_dict",
          "key.lower"
        ],
        "delegate_to_optimal_ai": [
          "str",
          "delegation_rules.get",
          "self._calculate_delegation_confidence",
          "Path",
          "logger.error"
        ],
        "_calculate_delegation_confidence": [
          "delegation_rules.get"
        ],
        "get_goal_aligned_suggestions": [
          "suggestions.extend",
          "technical_context.lower",
          "any",
          "logger.error"
        ],
        "get_priority_guidance": [
          "str",
          "scored_features.append",
          "decision_guidance.get",
          "scored_features.sort",
          "self._calculate_feature_score",
          "self._get_scoring_reasoning",
          "logger.error"
        ],
        "_calculate_feature_score": [
          "float",
          "any",
          "feature.lower",
          "prioritization.get"
        ],
        "_get_scoring_reasoning": [
          "reasons.append",
          "any",
          "feature.lower"
        ],
        "_load_personal_bridge": [
          "bridge_path.exists",
          "open",
          "json.load",
          "logger.error"
        ],
        "start_session": [
          "self._load_session_context",
          "previous_context.get",
          "logger.error",
          "CursorSession"
        ],
        "save_session_context": [
          "json.dump",
          "str",
          "open",
          "session_data.get",
          "Path",
          "logger.error"
        ],
        "_load_session_context": [
          "open",
          "json.load",
          "logger.error"
        ],
        "get_comprehensive_cursor_response": [
          "str",
          "logger.error"
        ],
        "create_cursor_integration": [
          "CursorIntegrationManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.context_orchestrator",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "4424464c-f2a8-45e0-a30b-cbc1ff3c127a"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": [
            24,
            30
          ],
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            6,
            11
          ],
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": [
            13,
            21
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": [
            5,
            21
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                6,
                11
              ],
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": [
                13,
                21
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "len",
          "response.raise_for_status",
          "response.json",
          "prompt.split"
        ],
        "test_grok": [
          "GrokClient",
          "time.perf_counter",
          "client.generate"
        ]
      },
      "dependencies": [
        "requests",
        "time"
      ],
      "hash": null,
      "artifact_id": "02abbb11-f59d-4ea0-8ae9-e21ce4c4f068"
    },
    {
      "module_id": "src.llmstruct.transpiler",
      "path": "src/llmstruct/transpiler.py",
      "category": "core",
      "module_doc": "AI-Powered Universal Transpiler\nConverts entire codebases from one language to another using LLM analysis",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for AI transpiler",
          "line_range": [
            475,
            527
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            142,
            149
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "analyze_source_project",
          "docstring": "Analyze source project structure",
          "line_range": [
            151,
            155
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "create_target_project_structure",
          "docstring": "Create target project directory structure",
          "line_range": [
            157,
            221
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_generate_structure_info",
          "docstring": "Generate structure information for README",
          "line_range": [
            223,
            253
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "transpile_module",
          "docstring": "Transpile a single module using AI",
          "line_range": [
            255,
            318
          ],
          "parameters": [
            "self",
            "module",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_format_functions",
          "docstring": "Format functions for prompt",
          "line_range": [
            320,
            333
          ],
          "parameters": [
            "self",
            "functions"
          ],
          "decorators": []
        },
        {
          "name": "_format_classes",
          "docstring": "Format classes for prompt",
          "line_range": [
            335,
            348
          ],
          "parameters": [
            "self",
            "classes"
          ],
          "decorators": []
        },
        {
          "name": "determine_target_path",
          "docstring": "Determine target file path for transpiled module",
          "line_range": [
            350,
            388
          ],
          "parameters": [
            "self",
            "module"
          ],
          "decorators": []
        },
        {
          "name": "transpile_project",
          "docstring": "Transpile entire project",
          "line_range": [
            390,
            472
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TranspilerConfig",
          "docstring": "Configuration for AI transpiler",
          "line_range": [
            24,
            35
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "LanguageTemplates",
          "docstring": "Templates and patterns for different target languages",
          "line_range": [
            38,
            136
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AITranspiler",
          "docstring": "AI-powered code transpiler",
          "line_range": [
            139,
            472
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                142,
                149
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "analyze_source_project",
              "docstring": "Analyze source project structure",
              "line_range": [
                151,
                155
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "create_target_project_structure",
              "docstring": "Create target project directory structure",
              "line_range": [
                157,
                221
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_generate_structure_info",
              "docstring": "Generate structure information for README",
              "line_range": [
                223,
                253
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "transpile_module",
              "docstring": "Transpile a single module using AI",
              "line_range": [
                255,
                318
              ],
              "parameters": [
                "self",
                "module",
                "context"
              ]
            },
            {
              "name": "_format_functions",
              "docstring": "Format functions for prompt",
              "line_range": [
                320,
                333
              ],
              "parameters": [
                "self",
                "functions"
              ]
            },
            {
              "name": "_format_classes",
              "docstring": "Format classes for prompt",
              "line_range": [
                335,
                348
              ],
              "parameters": [
                "self",
                "classes"
              ]
            },
            {
              "name": "determine_target_path",
              "docstring": "Determine target file path for transpiled module",
              "line_range": [
                350,
                388
              ],
              "parameters": [
                "self",
                "module"
              ]
            },
            {
              "name": "transpile_project",
              "docstring": "Transpile entire project",
              "line_range": [
                390,
                472
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "UniversalConverter",
          "ConverterConfig",
          "LLMClient"
        ],
        "analyze_source_project": [
          "logger.info"
        ],
        "create_target_project_structure": [
          "self._generate_structure_info",
          "logger.warning",
          "shutil.rmtree",
          "src_dir.mkdir",
          "output_path.mkdir",
          "Path",
          "output_path.exists"
        ],
        "_generate_structure_info": [
          "len",
          "categories.items",
          "module.get",
          "category.title",
          "analysis.get",
          "stats.get"
        ],
        "transpile_module": [
          "len",
          "self._format_functions",
          "target_lang.upper",
          "str",
          "module.get",
          "ctx_module.get",
          "response.strip",
          "target_lang.lower",
          "logger.error",
          "self._format_classes"
        ],
        "_format_functions": [
          "func.get",
          "len"
        ],
        "_format_classes": [
          "len",
          "cls.get"
        ],
        "determine_target_path": [
          "Path",
          "module_id.split",
          "module.get",
          "len"
        ],
        "transpile_project": [
          "len",
          "self.create_target_project_structure",
          "transpiled_files.append",
          "Path",
          "str",
          "logger.info",
          "range",
          "report_path.write_text",
          "self.transpile_module",
          "full_target_path.write_text",
          "analysis.get",
          "self.determine_target_path",
          "json.dumps",
          "errors.append",
          "logger.error",
          "self.analyze_source_project"
        ],
        "main": [
          "Language",
          "print",
          "argparse.ArgumentParser",
          "len",
          "AITranspiler",
          "logger.error",
          "traceback.print_exc",
          "TranspilerConfig",
          "transpiler.transpile_project",
          "parser.add_argument",
          "exit",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "Any",
        "ConverterConfig",
        "Dict",
        "Enum",
        "LLMClient",
        "Language",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "UniversalConverter",
        "argparse",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "llm_client",
        "logging",
        "os",
        "parsers.universal_converter",
        "pathlib",
        "shutil",
        "traceback",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f33c6693-5da5-4066-a403-0b0563140c7e"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": [
            38,
            86
          ],
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": [
            88,
            115
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": [
            117,
            141
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": [
            143,
            156
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": [
            158,
            172
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": [
            27,
            172
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": [
                38,
                86
              ],
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": [
                88,
                115
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": [
                117,
                141
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": [
                143,
                156
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": [
                158,
                172
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getenv",
          "logging.info",
          "int"
        ],
        "query": [
          "self._query_hybrid",
          "self._query_grok",
          "logging.error",
          "asyncio.sleep",
          "range",
          "logging.warning",
          "self._query_anthropic",
          "json.load",
          "logging.info",
          "Path",
          "json.dumps",
          "self._query_ollama"
        ],
        "_query_grok": [
          "response.json",
          "logging.error",
          "aiohttp.ClientSession",
          "result.get",
          "logging.info",
          "session.post"
        ],
        "_query_anthropic": [
          "response.json",
          "logging.error",
          "aiohttp.ClientSession",
          "result.get",
          "logging.info",
          "session.post"
        ],
        "_query_ollama": [
          "response.json",
          "logging.error",
          "aiohttp.ClientSession",
          "result.get",
          "logging.debug",
          "logging.info",
          "session.post"
        ],
        "_query_hybrid": [
          "len",
          "asyncio.gather",
          "self._query_anthropic",
          "isinstance",
          "logging.info",
          "self._query_grok",
          "self._query_ollama"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "7a9a485e-ff8d-45c2-98ae-1efa6e75967b"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "llmstruct.cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "f356d9e7-7d3b-4ced-a855-b9d756cca049"
    },
    {
      "module_id": "src.llmstruct.metrics_tracker",
      "path": "src/llmstruct/metrics_tracker.py",
      "category": "core",
      "module_doc": "LLMStruct Metrics Tracker - \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u0442\u043e\u043a\u0435\u043d\u044b, performance, \u043e\u0448\u0438\u0431\u043a\u0438, \u043b\u043e\u0436\u043d\u044b\u0435 \u043f\u0443\u0442\u0438 \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 master-plans",
      "functions": [
        {
          "name": "get_metrics_tracker",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 MetricsTracker",
          "line_range": [
            364,
            369
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "track_token_usage",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            371,
            373
          ],
          "parameters": [
            "provider",
            "model",
            "input_tokens",
            "output_tokens",
            "cost"
          ],
          "decorators": []
        },
        {
          "name": "track_task_start",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            375,
            377
          ],
          "parameters": [
            "task_id",
            "task_type"
          ],
          "decorators": []
        },
        {
          "name": "track_task_complete",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            379,
            381
          ],
          "parameters": [
            "task_id",
            "status",
            "error"
          ],
          "decorators": []
        },
        {
          "name": "track_false_path",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439",
          "line_range": [
            383,
            385
          ],
          "parameters": [
            "task_id",
            "description"
          ],
          "decorators": []
        },
        {
          "name": "track_workflow_event",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f workflow \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": [
            387,
            389
          ],
          "parameters": [
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "track_telegram_interaction",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0447\u0435\u0440\u0435\u0437 Telegram \u0441 \u043f\u043e\u043b\u043d\u044b\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c",
          "line_range": [
            391,
            421
          ],
          "parameters": [
            "user_message",
            "bot_response",
            "context_size"
          ],
          "decorators": []
        },
        {
          "name": "track_api_interaction",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 API \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043f\u043e\u043b\u043d\u044b\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c",
          "line_range": [
            423,
            449
          ],
          "parameters": [
            "endpoint",
            "request_tokens",
            "response_tokens",
            "context_tokens"
          ],
          "decorators": []
        },
        {
          "name": "get_token_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0432\u043e\u0434\u043a\u0443 \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c",
          "line_range": [
            451,
            470
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            41,
            43
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            58,
            60
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            65,
            87
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_generate_session_id",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 ID \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            89,
            92
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_current_branch",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0443\u044e git \u0432\u0435\u0442\u043a\u0443",
          "line_range": [
            94,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_commit_hash",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 commit hash",
          "line_range": [
            106,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_json_hash",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 hash struct.json \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "track_token_usage",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            126,
            142
          ],
          "parameters": [
            "self",
            "provider",
            "model",
            "input_tokens",
            "output_tokens",
            "cost_estimate"
          ],
          "decorators": []
        },
        {
          "name": "start_task",
          "docstring": "\u041d\u0430\u0447\u0430\u043b\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            144,
            155
          ],
          "parameters": [
            "self",
            "task_id",
            "task_type"
          ],
          "decorators": []
        },
        {
          "name": "complete_task",
          "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            157,
            174
          ],
          "parameters": [
            "self",
            "task_id",
            "status",
            "error_message"
          ],
          "decorators": []
        },
        {
          "name": "track_false_path",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439",
          "line_range": [
            176,
            185
          ],
          "parameters": [
            "self",
            "task_id",
            "false_path_description"
          ],
          "decorators": []
        },
        {
          "name": "track_rollback",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u043a\u0430\u0442\u043e\u0432",
          "line_range": [
            187,
            193
          ],
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        },
        {
          "name": "track_retry",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0445 \u043f\u043e\u043f\u044b\u0442\u043e\u043a",
          "line_range": [
            195,
            201
          ],
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        },
        {
          "name": "track_workflow_event",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 workflow \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": [
            203,
            226
          ],
          "parameters": [
            "self",
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "calculate_efficiency_score",
          "docstring": "\u0420\u0430\u0441\u0447\u0435\u0442 \u043e\u0446\u0435\u043d\u043a\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438",
          "line_range": [
            228,
            253
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_session_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            255,
            277
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_session_duration",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0435\u0441\u0441\u0438\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445",
          "line_range": [
            279,
            282
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_session",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            284,
            292
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_update_aggregate_metrics",
          "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            294,
            322
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_analytics_data",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432",
          "line_range": [
            324,
            358
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TokenUsage",
          "docstring": "\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            17,
            25
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "TaskExecution",
          "docstring": "\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            28,
            43
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                41,
                43
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "WorkflowMetrics",
          "docstring": "\u041c\u0435\u0442\u0440\u0438\u043a\u0438 workflow",
          "line_range": [
            46,
            60
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                58,
                60
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "MetricsTracker",
          "docstring": "\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            62,
            358
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                65,
                87
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_generate_session_id",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 ID \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                89,
                92
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_current_branch",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0443\u044e git \u0432\u0435\u0442\u043a\u0443",
              "line_range": [
                94,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_commit_hash",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 commit hash",
              "line_range": [
                106,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_json_hash",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 hash struct.json \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "track_token_usage",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
              "line_range": [
                126,
                142
              ],
              "parameters": [
                "self",
                "provider",
                "model",
                "input_tokens",
                "output_tokens",
                "cost_estimate"
              ]
            },
            {
              "name": "start_task",
              "docstring": "\u041d\u0430\u0447\u0430\u043b\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                144,
                155
              ],
              "parameters": [
                "self",
                "task_id",
                "task_type"
              ]
            },
            {
              "name": "complete_task",
              "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                157,
                174
              ],
              "parameters": [
                "self",
                "task_id",
                "status",
                "error_message"
              ]
            },
            {
              "name": "track_false_path",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439",
              "line_range": [
                176,
                185
              ],
              "parameters": [
                "self",
                "task_id",
                "false_path_description"
              ]
            },
            {
              "name": "track_rollback",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u043a\u0430\u0442\u043e\u0432",
              "line_range": [
                187,
                193
              ],
              "parameters": [
                "self",
                "task_id"
              ]
            },
            {
              "name": "track_retry",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0445 \u043f\u043e\u043f\u044b\u0442\u043e\u043a",
              "line_range": [
                195,
                201
              ],
              "parameters": [
                "self",
                "task_id"
              ]
            },
            {
              "name": "track_workflow_event",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 workflow \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
              "line_range": [
                203,
                226
              ],
              "parameters": [
                "self",
                "event_type",
                "details"
              ]
            },
            {
              "name": "calculate_efficiency_score",
              "docstring": "\u0420\u0430\u0441\u0447\u0435\u0442 \u043e\u0446\u0435\u043d\u043a\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438",
              "line_range": [
                228,
                253
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_session_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                255,
                277
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_session_duration",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0435\u0441\u0441\u0438\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445",
              "line_range": [
                279,
                282
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_session",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                284,
                292
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_update_aggregate_metrics",
              "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a",
              "line_range": [
                294,
                322
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_analytics_data",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432",
              "line_range": [
                324,
                358
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "self._get_current_branch",
          "asdict",
          "self._get_commit_hash",
          "self._generate_session_id",
          "self._get_struct_json_hash",
          "logging.info",
          "Path",
          "datetime.now",
          "WorkflowMetrics"
        ],
        "_generate_session_id": [
          "hashlib.md5",
          "datetime.now",
          "timestamp.encode"
        ],
        "_get_current_branch": [
          "subprocess.run"
        ],
        "_get_commit_hash": [
          "subprocess.run"
        ],
        "_get_struct_json_hash": [
          "struct_file.exists",
          "f.read",
          "open",
          "hashlib.md5"
        ],
        "track_token_usage": [
          "get_metrics_tracker"
        ],
        "start_task": [
          "asdict",
          "datetime.now",
          "TaskExecution",
          "logging.info"
        ],
        "complete_task": [
          "datetime.now",
          "datetime.fromisoformat",
          "logging.info",
          "task_data.get"
        ],
        "track_false_path": [
          "get_metrics_tracker"
        ],
        "track_rollback": [
          "logging.warning"
        ],
        "track_retry": [
          "logging.info"
        ],
        "track_workflow_event": [
          "get_metrics_tracker"
        ],
        "calculate_efficiency_score": [
          "len",
          "t.get",
          "min",
          "max",
          "sum"
        ],
        "get_session_summary": [
          "self.calculate_efficiency_score",
          "len",
          "self._get_session_duration",
          "t.get",
          "usage.get",
          "sum"
        ],
        "_get_session_duration": [
          "datetime.now",
          "datetime.fromisoformat"
        ],
        "save_session": [
          "self._update_aggregate_metrics",
          "logging.info",
          "open",
          "json.dump"
        ],
        "_update_aggregate_metrics": [
          "len",
          "json.dump",
          "open",
          "json.load",
          "self.get_session_summary",
          "sum"
        ],
        "get_analytics_data": [
          "max",
          "open",
          "json.load"
        ],
        "get_metrics_tracker": [
          "MetricsTracker"
        ],
        "track_task_start": [
          "get_metrics_tracker"
        ],
        "track_task_complete": [
          "get_metrics_tracker"
        ],
        "track_telegram_interaction": [
          "len",
          "logger.info",
          "datetime.now",
          "get_metrics_tracker",
          "logger.error"
        ],
        "track_api_interaction": [
          "datetime.now",
          "get_metrics_tracker",
          "logger.info",
          "logger.error"
        ],
        "get_token_summary": [
          "len",
          "get_metrics_tracker",
          "logger.error"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "subprocess",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b721531c-c779-4191-885b-fc92996efe49"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            43,
            57
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            60,
            69
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            72,
            81
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": [
            84,
            104
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            107,
            114
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            117,
            127
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            130,
            144
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            147,
            503
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": [
            506,
            705
          ],
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            708,
            759
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            762,
            818
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            821,
            823
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            826,
            828
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            831,
            833
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            836,
            954
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": [
            957,
            975
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": [
            978,
            1081
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "add_api_bot_commands",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f API \u0438 Bot \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438",
          "line_range": [
            1084,
            1158
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        },
        {
          "name": "cmd_api_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 API \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c",
          "line_range": [
            1161,
            1243
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_bot_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430\u043c\u0438",
          "line_range": [
            1246,
            1348
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_services",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 (API + Bots)",
          "line_range": [
            1351,
            1412
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_metrics",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            1415,
            1434
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "metrics_status",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            1437,
            1459
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_summary",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0432\u043e\u0434\u043a\u0443 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            1462,
            1514
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_analytics",
          "docstring": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            1517,
            1562
          ],
          "parameters": [
            "output_file",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "metrics_report",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0435\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u043e\u0442\u0447\u0435\u0442",
          "line_range": [
            1565,
            1616
          ],
          "parameters": [
            "sessions",
            "output_file"
          ],
          "decorators": []
        },
        {
          "name": "metrics_track",
          "docstring": "\u0420\u0443\u0447\u043d\u043e\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": [
            1619,
            1630
          ],
          "parameters": [
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "metrics_tokens",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            1633,
            1681
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            1684,
            1921
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_path.exists",
          "logging.error",
          "gitignore_path.open",
          "line.startswith",
          "line.strip",
          "Path"
        ],
        "load_config": [
          "config_path.exists",
          "logging.error",
          "toml.load",
          "Path",
          "config_path.open"
        ],
        "read_file_content": [
          "logging.error",
          "f.read",
          "path.is_file",
          "path.open",
          "Path"
        ],
        "write_to_file": [
          "base_path.mkdir",
          "logging.error",
          "f.write",
          "file_path.open",
          "str",
          "logging.warning",
          "file_path.exists",
          "re.sub",
          "logging.info",
          "Path"
        ],
        "parse_files_from_response": [
          "files.append",
          "re.findall",
          "filename.strip",
          "content.strip"
        ],
        "interactive": [
          "interactive_legacy",
          "interactive_modular",
          "logging.warning"
        ],
        "interactive_modular": [
          "hasattr",
          "cli_core.run_interactive_mode",
          "create_cli_core",
          "logging.info"
        ],
        "interactive_legacy": [
          "args_str.strip",
          "json.dump",
          "LLMClient",
          "cache.clear",
          "logging.warning",
          "open",
          "json.load",
          "user_input.lower",
          "Path",
          "user_input.startswith",
          "os.listdir",
          "read_file_content",
          "parse",
          "logging.error",
          "client.query",
          "cache.list_keys",
          "struct_data.get",
          "int",
          "isinstance",
          "os.makedirs",
          "m.group",
          "json.dumps",
          "workflow.get",
          "os.stat",
          "attach_to_llm_request",
          "re.match",
          "process_cli_queue_enhanced",
          "get_folder_structure",
          "JSONCache",
          "input",
          "print",
          "sorted",
          "len",
          "cache.close",
          "events_data.append",
          "time.ctime",
          "load_gitignore",
          "cache.get_stats",
          "write_to_file",
          "subprocess.run",
          "time.time"
        ],
        "process_cli_queue_enhanced": [
          "workflow.get",
          "len",
          "print",
          "options.get",
          "read_file_content",
          "logging.error",
          "enumerate",
          "client.query",
          "attach_to_llm_request",
          "isinstance",
          "open",
          "item.get",
          "json.load",
          "logging.info",
          "load_gitignore",
          "get_folder_structure",
          "write_to_file",
          "time.time"
        ],
        "parse": [
          "JSONCache",
          "cli_config.get",
          "load_config",
          "json.dump",
          "cache.cache_json",
          "cache.close",
          "logging.error",
          "logging.warning",
          "load_gitignore",
          "generate_json",
          "config.get",
          "logging.info",
          "Path",
          "parsing_config.get"
        ],
        "query": [
          "JSONCache",
          "hasattr",
          "json.dump",
          "cache.close",
          "LLMClient",
          "logging.error",
          "logging.warning",
          "logging.info",
          "client.query_with_context",
          "create_context_orchestrator",
          "Path",
          "orchestrator.get_context_for_scenario",
          "client.query"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "copilot": [
          "smart_suggest",
          "manager.validate_change",
          "manager.unload_context_layer",
          "getattr",
          "layers.split",
          "open",
          "Path",
          "template_path.exists",
          "logging.error",
          "f.write",
          "manager.close",
          "manager.refresh_all_contexts",
          "hasattr",
          "manager.get_context_status",
          "config_path.exists",
          "manager.load_context_layer",
          "enumerate",
          "initialize_copilot",
          "shutil.copy",
          "print",
          "manager.export_context",
          "logging.info"
        ],
        "audit": [
          "hasattr",
          "print",
          "file_path.exists",
          "analyze_duplicates",
          "Path"
        ],
        "analyze_duplicates": [
          "hasattr",
          "len",
          "print",
          "sorted",
          "orchestrator.analyze_codebase_for_duplicates",
          "json.dump",
          "r.get",
          "enumerate",
          "filtered_duplicates.items",
          "getattr",
          "traceback.print_exc",
          "open",
          "WorkflowOrchestrator",
          "rec.get",
          "analysis.get",
          "json.dumps",
          "duplicates.items",
          "duplication_data.get"
        ],
        "add_api_bot_commands": [
          "bot_parser.add_subparsers",
          "subparsers.add_parser",
          "metrics_track.add_argument",
          "bot_subparsers.add_parser",
          "metrics_report.add_argument",
          "api_parser.add_subparsers",
          "api_start.add_argument",
          "metrics_subparsers.add_parser",
          "services_subparsers.add_parser",
          "api_subparsers.add_parser",
          "metrics_analytics.add_argument",
          "metrics_parser.add_subparsers",
          "services_parser.add_subparsers",
          "bot_start.add_argument"
        ],
        "cmd_api_management": [
          "process.wait",
          "pid_file.unlink",
          "print",
          "response.json",
          "pid_file.exists",
          "requests.get",
          "str",
          "f.write",
          "f.read",
          "int",
          "requests.post",
          "process.terminate",
          "open",
          "subprocess.Popen",
          "venv_path.exists",
          "Path",
          "psutil.Process",
          "data.get"
        ],
        "cmd_bot_management": [
          "process.wait",
          "print",
          "bot_scripts.get",
          "pid_file.exists",
          "str",
          "os.getenv",
          "f.write",
          "f.read",
          "int",
          "active_bots.append",
          "process.terminate",
          "open",
          "subprocess.Popen",
          "pid_file.unlink",
          "Path",
          "psutil.Process",
          "process.is_running"
        ],
        "cmd_services": [
          "print",
          "cmd_bot_management",
          "type",
          "time.sleep",
          "cmd_api_management"
        ],
        "cmd_metrics": [
          "metrics_report",
          "print",
          "metrics_track",
          "metrics_status",
          "metrics_analytics",
          "metrics_summary",
          "metrics_tokens"
        ],
        "metrics_status": [
          "tracker.get_session_summary",
          "print",
          "get_metrics_tracker"
        ],
        "metrics_summary": [
          "max",
          "tracker.get_session_summary",
          "print",
          "get_metrics_tracker"
        ],
        "metrics_analytics": [
          "print",
          "json.dump",
          "tracker.get_session_summary",
          "writer.writerow",
          "tracker.get_analytics_data",
          "enumerate",
          "open",
          "csv.writer",
          "time.strftime",
          "json.dumps",
          "get_metrics_tracker"
        ],
        "metrics_report": [
          "analytics.get",
          "print",
          "len",
          "f.write",
          "tracker.get_analytics_data",
          "open",
          "min",
          "time.strftime",
          "get_metrics_tracker",
          "sum"
        ],
        "metrics_track": [
          "print",
          "track_workflow_event"
        ],
        "metrics_tokens": [
          "print",
          "get_token_summary",
          "enumerate",
          "summary.get",
          "get_metrics_tracker",
          "interaction.get"
        ],
        "main": [
          "dogfood",
          "review",
          "review_parser.add_argument",
          "interactive",
          "parser.parse_args",
          "add_api_bot_commands",
          "parse",
          "parse_parser.add_argument",
          "cmd_metrics",
          "duplicates_parser.add_argument",
          "dogfood_parser.add_argument",
          "context",
          "context_parser.add_argument",
          "audit_parser.add_argument",
          "query",
          "parser.add_subparsers",
          "audit",
          "argparse.ArgumentParser",
          "cmd_services",
          "copilot",
          "analyze_duplicates",
          "query_parser.add_argument",
          "subparsers.add_parser",
          "interactive_parser.add_argument",
          "copilot_parser.add_argument",
          "asyncio.run"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "WorkflowOrchestrator",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "cli_core",
        "context_orchestrator",
        "copilot",
        "create_cli_core",
        "create_context_orchestrator",
        "csv",
        "generate_json",
        "get_folder_structure",
        "get_metrics_tracker",
        "get_token_summary",
        "initialize_copilot",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "metrics_tracker",
        "os",
        "pathlib",
        "psutil",
        "re",
        "requests",
        "shutil",
        "signal",
        "smart_suggest",
        "subprocess",
        "sys",
        "time",
        "toml",
        "traceback",
        "track_workflow_event",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": null,
      "artifact_id": "02ce7a66-0bbc-47c4-86aa-2761f30413df"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "module_doc": "Smart Context Orchestration for LLMStruct\nOptimizes context loading for different LLM usage scenarios",
      "functions": [
        {
          "name": "create_context_orchestrator",
          "docstring": "Factory function to create context orchestrator.",
          "line_range": [
            506,
            508
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context for scenario - convenience function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (cli_direct, vscode_copilot, session_work)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            511,
            543
          ],
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            57,
            75
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load context orchestration configuration.",
          "line_range": [
            77,
            119
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_scenario",
          "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            121,
            161
          ],
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "custom_budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_budget_for_scenario",
          "docstring": "Create budget configuration for scenario.",
          "line_range": [
            163,
            172
          ],
          "parameters": [
            "self",
            "scenario_config"
          ],
          "decorators": []
        },
        {
          "name": "_load_full_context",
          "docstring": "Load complete context without token restrictions.",
          "line_range": [
            174,
            187
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_extract_relationship_summary",
          "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438",
          "line_range": [
            189,
            216
          ],
          "parameters": [
            "self",
            "max_modules"
          ],
          "decorators": []
        },
        {
          "name": "_load_focused_context",
          "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441",
          "line_range": [
            218,
            275
          ],
          "parameters": [
            "self",
            "file_path",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load session-specific context.",
          "line_range": [
            277,
            299
          ],
          "parameters": [
            "self",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_minimal_context",
          "docstring": "Load minimal context for quick operations.",
          "line_range": [
            301,
            319
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_source_with_filtering",
          "docstring": "Load source with optional filtering based on budget.",
          "line_range": [
            321,
            344
          ],
          "parameters": [
            "self",
            "source_name",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_file_context",
          "docstring": "Get context specific to a file.",
          "line_range": [
            346,
            357
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_essential_parts",
          "docstring": "Extract essential parts of data to fit token budget.",
          "line_range": [
            359,
            381
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_filter_for_current_session",
          "docstring": "Filter data to items relevant to current session.",
          "line_range": [
            383,
            422
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_summary",
          "docstring": "Extract summary information from data.",
          "line_range": [
            424,
            443
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_apply_section_filtering",
          "docstring": "Apply section filtering to exclude specified sections.",
          "line_range": [
            445,
            457
          ],
          "parameters": [
            "self",
            "data",
            "exclude_sections"
          ],
          "decorators": []
        },
        {
          "name": "_update_metrics",
          "docstring": "Update performance metrics.",
          "line_range": [
            459,
            477
          ],
          "parameters": [
            "self",
            "scenario",
            "context",
            "load_time"
          ],
          "decorators": []
        },
        {
          "name": "get_metrics_summary",
          "docstring": "Get summary of context loading metrics.",
          "line_range": [
            479,
            494
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_metrics",
          "docstring": "Save metrics to file for analysis.",
          "line_range": [
            496,
            501
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextMode",
          "docstring": "Context loading modes for different scenarios.",
          "line_range": [
            17,
            22
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLevel",
          "docstring": "Progressive context levels with token budgets.",
          "line_range": [
            25,
            30
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextBudget",
          "docstring": "Token budget configuration for context loading.",
          "line_range": [
            34,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextMetrics",
          "docstring": "Metrics for context loading performance.",
          "line_range": [
            43,
            48
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SmartContextOrchestrator",
          "docstring": "Orchestrates context loading based on usage scenario and token budget.\nProvides optimized context for different LLM integration patterns.",
          "line_range": [
            51,
            501
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                57,
                75
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load context orchestration configuration.",
              "line_range": [
                77,
                119
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_scenario",
              "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
              "line_range": [
                121,
                161
              ],
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "custom_budget"
              ]
            },
            {
              "name": "_get_budget_for_scenario",
              "docstring": "Create budget configuration for scenario.",
              "line_range": [
                163,
                172
              ],
              "parameters": [
                "self",
                "scenario_config"
              ]
            },
            {
              "name": "_load_full_context",
              "docstring": "Load complete context without token restrictions.",
              "line_range": [
                174,
                187
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_extract_relationship_summary",
              "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438",
              "line_range": [
                189,
                216
              ],
              "parameters": [
                "self",
                "max_modules"
              ]
            },
            {
              "name": "_load_focused_context",
              "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441",
              "line_range": [
                218,
                275
              ],
              "parameters": [
                "self",
                "file_path",
                "budget"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load session-specific context.",
              "line_range": [
                277,
                299
              ],
              "parameters": [
                "self",
                "budget"
              ]
            },
            {
              "name": "_load_minimal_context",
              "docstring": "Load minimal context for quick operations.",
              "line_range": [
                301,
                319
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_source_with_filtering",
              "docstring": "Load source with optional filtering based on budget.",
              "line_range": [
                321,
                344
              ],
              "parameters": [
                "self",
                "source_name",
                "budget"
              ]
            },
            {
              "name": "_get_file_context",
              "docstring": "Get context specific to a file.",
              "line_range": [
                346,
                357
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_essential_parts",
              "docstring": "Extract essential parts of data to fit token budget.",
              "line_range": [
                359,
                381
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_filter_for_current_session",
              "docstring": "Filter data to items relevant to current session.",
              "line_range": [
                383,
                422
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_extract_summary",
              "docstring": "Extract summary information from data.",
              "line_range": [
                424,
                443
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_apply_section_filtering",
              "docstring": "Apply section filtering to exclude specified sections.",
              "line_range": [
                445,
                457
              ],
              "parameters": [
                "self",
                "data",
                "exclude_sections"
              ]
            },
            {
              "name": "_update_metrics",
              "docstring": "Update performance metrics.",
              "line_range": [
                459,
                477
              ],
              "parameters": [
                "self",
                "scenario",
                "context",
                "load_time"
              ]
            },
            {
              "name": "get_metrics_summary",
              "docstring": "Get summary of context loading metrics.",
              "line_range": [
                479,
                494
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_metrics",
              "docstring": "Save metrics to file for analysis.",
              "line_range": [
                496,
                501
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config"
        ],
        "_load_config": [
          "json.load",
          "open",
          "config_path.exists"
        ],
        "get_context_for_scenario": [
          "self._get_budget_for_scenario",
          "self._load_focused_context",
          "self._load_minimal_context",
          "self._load_full_context",
          "scenario_config.get",
          "ContextMode",
          "self._load_session_context",
          "self._update_metrics",
          "time.time"
        ],
        "_get_budget_for_scenario": [
          "scenario_config.get",
          "budget_config.get",
          "ContextBudget"
        ],
        "_load_full_context": [
          "full_path.exists",
          "open",
          "json.load",
          "logger.warning"
        ],
        "_extract_relationship_summary": [
          "logger.warning",
          "struct.get",
          "struct_path.exists",
          "summary.append",
          "open",
          "json.load",
          "m.get"
        ],
        "_load_focused_context": [
          "self._extract_relationship_summary",
          "len",
          "file_path.endswith",
          "init_path.exists",
          "logger.warning",
          "self._get_file_context",
          "session_path.exists",
          "open",
          "json.load",
          "self._extract_summary",
          "json.dumps"
        ],
        "_load_session_context": [
          "self._filter_for_current_session",
          "self._load_source_with_filtering"
        ],
        "_load_minimal_context": [
          "source_path.exists",
          "logger.warning",
          "open",
          "json.load",
          "self._extract_summary"
        ],
        "_load_source_with_filtering": [
          "source_path.exists",
          "logger.warning",
          "self._apply_section_filtering",
          "open",
          "json.load"
        ],
        "_get_file_context": [
          "Path"
        ],
        "_extract_essential_parts": [
          "task.get",
          "isinstance"
        ],
        "_filter_for_current_session": [
          "data.items",
          "logger.warning",
          "current_session.get",
          "task.get",
          "current_session_path.exists",
          "open",
          "json.load",
          "idea.get"
        ],
        "_extract_summary": [
          "len",
          "isinstance",
          "t.get"
        ],
        "_apply_section_filtering": [
          "data.items"
        ],
        "_update_metrics": [
          "ContextMetrics",
          "len",
          "context.get"
        ],
        "get_metrics_summary": [
          "len",
          "sum"
        ],
        "save_metrics": [
          "self.get_metrics_summary",
          "open",
          "json.dump"
        ],
        "create_context_orchestrator": [
          "SmartContextOrchestrator"
        ],
        "get_optimized_context": [
          "create_context_orchestrator",
          "orchestrator.get_context_for_scenario",
          "ContextBudget"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Union",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "6616dd41-3e56-4966-aa6f-0c2727fc89c8"
    },
    {
      "module_id": "src.llmstruct.ai_self_monitor",
      "path": "src/llmstruct/ai_self_monitor.py",
      "category": "core",
      "module_doc": "AI Self-Monitoring System\nTracks AI usage patterns and ensures proper llmstruct integration.",
      "functions": [
        {
          "name": "initialize_ai_monitor",
          "docstring": "Initialize global AI monitor.",
          "line_range": [
            433,
            437
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_monitor",
          "docstring": "Get current AI monitor instance.",
          "line_range": [
            440,
            442
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "record_ai_usage",
          "docstring": "Global function to record AI usage.",
          "line_range": [
            445,
            456
          ],
          "parameters": [
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            60,
            80
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "record_ai_interaction",
          "docstring": "Record an AI interaction for monitoring.",
          "line_range": [
            82,
            121
          ],
          "parameters": [
            "self",
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_interaction_patterns",
          "docstring": "Analyze patterns in AI interaction.",
          "line_range": [
            123,
            157
          ],
          "parameters": [
            "self",
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_effectiveness_score",
          "docstring": "Calculate effectiveness score for interaction.",
          "line_range": [
            159,
            188
          ],
          "parameters": [
            "self",
            "patterns",
            "tools_used",
            "used_llmstruct"
          ],
          "decorators": []
        },
        {
          "name": "_check_immediate_feedback",
          "docstring": "Check if immediate feedback/correction is needed.",
          "line_range": [
            190,
            209
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_log_immediate_feedback",
          "docstring": "Log immediate feedback message.",
          "line_range": [
            211,
            214
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "analyze_behavior_trends",
          "docstring": "Analyze AI behavior trends over specified period.",
          "line_range": [
            216,
            300
          ],
          "parameters": [
            "self",
            "days"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "Generate specific recommendations for improvement.",
          "line_range": [
            302,
            335
          ],
          "parameters": [
            "self",
            "llmstruct_usage",
            "context_awareness",
            "tool_diversity",
            "effectiveness"
          ],
          "decorators": []
        },
        {
          "name": "get_real_time_guidance",
          "docstring": "Get real-time guidance for current query.",
          "line_range": [
            337,
            365
          ],
          "parameters": [
            "self",
            "current_query"
          ],
          "decorators": []
        },
        {
          "name": "_load_events",
          "docstring": "Load events from disk.",
          "line_range": [
            367,
            379
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_events",
          "docstring": "Save events to disk.",
          "line_range": [
            381,
            388
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_analysis",
          "docstring": "Save behavior analysis to disk.",
          "line_range": [
            390,
            397
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "get_monitoring_report",
          "docstring": "Get comprehensive monitoring report.",
          "line_range": [
            399,
            426
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AIBehaviorPattern",
          "docstring": "AI behavior patterns to monitor.",
          "line_range": [
            18,
            26
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AIUsageEvent",
          "docstring": "Single AI usage event.",
          "line_range": [
            30,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIBehaviorAnalysis",
          "docstring": "Analysis of AI behavior patterns.",
          "line_range": [
            43,
            51
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AISelfMonitor",
          "docstring": "Monitors AI behavior and ensures proper llmstruct integration.\nProvides feedback and corrective guidance.",
          "line_range": [
            54,
            426
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                60,
                80
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "record_ai_interaction",
              "docstring": "Record an AI interaction for monitoring.",
              "line_range": [
                82,
                121
              ],
              "parameters": [
                "self",
                "query",
                "tools_used",
                "used_llmstruct",
                "context_tags",
                "metadata"
              ]
            },
            {
              "name": "_analyze_interaction_patterns",
              "docstring": "Analyze patterns in AI interaction.",
              "line_range": [
                123,
                157
              ],
              "parameters": [
                "self",
                "query",
                "tools_used",
                "used_llmstruct",
                "context_tags"
              ]
            },
            {
              "name": "_calculate_effectiveness_score",
              "docstring": "Calculate effectiveness score for interaction.",
              "line_range": [
                159,
                188
              ],
              "parameters": [
                "self",
                "patterns",
                "tools_used",
                "used_llmstruct"
              ]
            },
            {
              "name": "_check_immediate_feedback",
              "docstring": "Check if immediate feedback/correction is needed.",
              "line_range": [
                190,
                209
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_log_immediate_feedback",
              "docstring": "Log immediate feedback message.",
              "line_range": [
                211,
                214
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "analyze_behavior_trends",
              "docstring": "Analyze AI behavior trends over specified period.",
              "line_range": [
                216,
                300
              ],
              "parameters": [
                "self",
                "days"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "Generate specific recommendations for improvement.",
              "line_range": [
                302,
                335
              ],
              "parameters": [
                "self",
                "llmstruct_usage",
                "context_awareness",
                "tool_diversity",
                "effectiveness"
              ]
            },
            {
              "name": "get_real_time_guidance",
              "docstring": "Get real-time guidance for current query.",
              "line_range": [
                337,
                365
              ],
              "parameters": [
                "self",
                "current_query"
              ]
            },
            {
              "name": "_load_events",
              "docstring": "Load events from disk.",
              "line_range": [
                367,
                379
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_events",
              "docstring": "Save events to disk.",
              "line_range": [
                381,
                388
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_analysis",
              "docstring": "Save behavior analysis to disk.",
              "line_range": [
                390,
                397
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "get_monitoring_report",
              "docstring": "Get comprehensive monitoring report.",
              "line_range": [
                399,
                426
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_events",
          "logger.info"
        ],
        "record_ai_interaction": [
          "self._check_immediate_feedback",
          "self._calculate_effectiveness_score",
          "len",
          "AIUsageEvent",
          "self._analyze_interaction_patterns",
          "datetime.now",
          "self._save_events"
        ],
        "_analyze_interaction_patterns": [
          "any",
          "query.lower",
          "patterns.append"
        ],
        "_calculate_effectiveness_score": [
          "len",
          "pattern_scores.get",
          "min",
          "set"
        ],
        "_check_immediate_feedback": [
          "self._log_immediate_feedback",
          "any"
        ],
        "_log_immediate_feedback": [
          "print",
          "logger.warning"
        ],
        "analyze_behavior_trends": [
          "len",
          "datetime.fromisoformat",
          "any",
          "all_tools.update",
          "self._generate_recommendations",
          "improvements.append",
          "AIBehaviorAnalysis",
          "self._save_analysis",
          "set",
          "timedelta",
          "datetime.now",
          "sum",
          "strengths.append"
        ],
        "_generate_recommendations": [
          "recommendations.extend",
          "recommendations.append"
        ],
        "get_real_time_guidance": [
          "guidance.append",
          "any",
          "current_query.lower"
        ],
        "_load_events": [
          "len",
          "AIUsageEvent",
          "logger.info",
          "open",
          "json.load",
          "logger.error"
        ],
        "_save_events": [
          "asdict",
          "open",
          "json.dump",
          "logger.error"
        ],
        "_save_analysis": [
          "asdict",
          "open",
          "json.dump",
          "logger.error"
        ],
        "get_monitoring_report": [
          "len",
          "datetime.now",
          "self.analyze_behavior_trends",
          "chr"
        ],
        "initialize_ai_monitor": [
          "AISelfMonitor"
        ],
        "get_ai_monitor": [],
        "record_ai_usage": [
          "_monitor_instance.record_ai_interaction"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "2a51b3b9-461a-4e17-87d6-5158a3bf7df7"
    },
    {
      "module_id": "src.llmstruct.cursor_ai_bridge",
      "path": "src/llmstruct/cursor_ai_bridge.py",
      "category": "core",
      "module_doc": "Cursor AI Bridge - API Layer for AI Assistant Integration\nProvides CLI and HTTP endpoints so Cursor AI can use WorkflowOrchestrator",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for Cursor AI Bridge.",
          "line_range": [
            350,
            401
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            29,
            32
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "ai_get_context",
          "docstring": "Get AI-optimized context for current development state.",
          "line_range": [
            34,
            67
          ],
          "parameters": [
            "self",
            "query_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "ai_analyze_task",
          "docstring": "Analyze a task and provide AI-optimized guidance.",
          "line_range": [
            69,
            93
          ],
          "parameters": [
            "self",
            "task_description"
          ],
          "decorators": []
        },
        {
          "name": "ai_create_task",
          "docstring": "Create a task through AI interface.",
          "line_range": [
            95,
            114
          ],
          "parameters": [
            "self",
            "title",
            "description",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "ai_get_onboarding_guide",
          "docstring": "Get comprehensive AI onboarding guide.",
          "line_range": [
            116,
            145
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "ai_check_duplicates",
          "docstring": "Check for code duplicates with AI-friendly output.",
          "line_range": [
            147,
            171
          ],
          "parameters": [
            "self",
            "threshold"
          ],
          "decorators": []
        },
        {
          "name": "ai_suggest",
          "docstring": "Get AI suggestions based on context.",
          "line_range": [
            173,
            199
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_task_complexity",
          "docstring": "Estimate task complexity based on codebase analysis.",
          "line_range": [
            201,
            215
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_suggest_approach",
          "docstring": "Suggest approach based on task and codebase state.",
          "line_range": [
            217,
            234
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_find_relevant_modules",
          "docstring": "Find modules relevant to the task.",
          "line_range": [
            236,
            248
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_check_potential_duplicates",
          "docstring": "Check if task might create duplicates.",
          "line_range": [
            250,
            253
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_recommend_ai_for_task",
          "docstring": "Recommend which AI to use for the task.",
          "line_range": [
            255,
            264
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_generate_workflow_steps",
          "docstring": "Generate workflow steps for the task.",
          "line_range": [
            266,
            276
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_determine_context_requirements",
          "docstring": "Determine what context is needed for the task.",
          "line_range": [
            278,
            290
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on context.",
          "line_range": [
            292,
            299
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_available_ai_commands",
          "docstring": "Get available AI commands.",
          "line_range": [
            301,
            310
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_identify_high_priority_duplicates",
          "docstring": "Identify high-priority duplicates for refactoring.",
          "line_range": [
            312,
            315
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_generate_refactoring_suggestions",
          "docstring": "Generate refactoring suggestions.",
          "line_range": [
            317,
            323
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_classify_task_type",
          "docstring": "Classify task type for AI delegation.",
          "line_range": [
            325,
            338
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_generate_next_steps",
          "docstring": "Generate next steps based on context.",
          "line_range": [
            340,
            347
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorAIBridge",
          "docstring": "Bridge that allows Cursor AI assistant to use WorkflowOrchestrator\nthrough CLI commands and structured JSON responses.",
          "line_range": [
            23,
            347
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                29,
                32
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "ai_get_context",
              "docstring": "Get AI-optimized context for current development state.",
              "line_range": [
                34,
                67
              ],
              "parameters": [
                "self",
                "query_type",
                "file_path"
              ]
            },
            {
              "name": "ai_analyze_task",
              "docstring": "Analyze a task and provide AI-optimized guidance.",
              "line_range": [
                69,
                93
              ],
              "parameters": [
                "self",
                "task_description"
              ]
            },
            {
              "name": "ai_create_task",
              "docstring": "Create a task through AI interface.",
              "line_range": [
                95,
                114
              ],
              "parameters": [
                "self",
                "title",
                "description",
                "priority"
              ]
            },
            {
              "name": "ai_get_onboarding_guide",
              "docstring": "Get comprehensive AI onboarding guide.",
              "line_range": [
                116,
                145
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "ai_check_duplicates",
              "docstring": "Check for code duplicates with AI-friendly output.",
              "line_range": [
                147,
                171
              ],
              "parameters": [
                "self",
                "threshold"
              ]
            },
            {
              "name": "ai_suggest",
              "docstring": "Get AI suggestions based on context.",
              "line_range": [
                173,
                199
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_estimate_task_complexity",
              "docstring": "Estimate task complexity based on codebase analysis.",
              "line_range": [
                201,
                215
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_suggest_approach",
              "docstring": "Suggest approach based on task and codebase state.",
              "line_range": [
                217,
                234
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_find_relevant_modules",
              "docstring": "Find modules relevant to the task.",
              "line_range": [
                236,
                248
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_check_potential_duplicates",
              "docstring": "Check if task might create duplicates.",
              "line_range": [
                250,
                253
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_recommend_ai_for_task",
              "docstring": "Recommend which AI to use for the task.",
              "line_range": [
                255,
                264
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_generate_workflow_steps",
              "docstring": "Generate workflow steps for the task.",
              "line_range": [
                266,
                276
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_determine_context_requirements",
              "docstring": "Determine what context is needed for the task.",
              "line_range": [
                278,
                290
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on context.",
              "line_range": [
                292,
                299
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_get_available_ai_commands",
              "docstring": "Get available AI commands.",
              "line_range": [
                301,
                310
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_identify_high_priority_duplicates",
              "docstring": "Identify high-priority duplicates for refactoring.",
              "line_range": [
                312,
                315
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_generate_refactoring_suggestions",
              "docstring": "Generate refactoring suggestions.",
              "line_range": [
                317,
                323
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_classify_task_type",
              "docstring": "Classify task type for AI delegation.",
              "line_range": [
                325,
                338
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_generate_next_steps",
              "docstring": "Generate next steps based on context.",
              "line_range": [
                340,
                347
              ],
              "parameters": [
                "self",
                "context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "str",
          "Path",
          "CursorIntegrationManager",
          "WorkflowOrchestrator"
        ],
        "ai_get_context": [
          "len",
          "self._get_workflow_suggestions",
          "datetime.utcnow",
          "str",
          "self._get_available_ai_commands",
          "context.get",
          "cursor_context.get"
        ],
        "ai_analyze_task": [
          "self._recommend_ai_for_task",
          "self._determine_context_requirements",
          "self._check_potential_duplicates",
          "str",
          "self._find_relevant_modules",
          "self._generate_workflow_steps",
          "context.get",
          "self._estimate_task_complexity",
          "self._suggest_approach"
        ],
        "ai_create_task": [
          "str",
          "datetime.utcnow",
          "self.ai_analyze_task"
        ],
        "ai_get_onboarding_guide": [
          "str"
        ],
        "ai_check_duplicates": [
          "str",
          "self._identify_high_priority_duplicates",
          "analysis.get",
          "self._generate_refactoring_suggestions"
        ],
        "ai_suggest": [
          "self._get_workflow_suggestions",
          "str",
          "delegation.get",
          "self._classify_task_type",
          "self._generate_next_steps"
        ],
        "_estimate_task_complexity": [
          "complexity_keywords.items",
          "task.lower",
          "any"
        ],
        "_suggest_approach": [
          "approaches.append",
          "task.lower"
        ],
        "_find_relevant_modules": [
          "struct_analysis.get",
          "any",
          "module.get",
          "task.lower",
          "relevant.append"
        ],
        "_check_potential_duplicates": [],
        "_recommend_ai_for_task": [
          "task.lower",
          "any"
        ],
        "_generate_workflow_steps": [],
        "_determine_context_requirements": [
          "task.lower",
          "requirements.append"
        ],
        "_get_workflow_suggestions": [],
        "_get_available_ai_commands": [],
        "_identify_high_priority_duplicates": [],
        "_generate_refactoring_suggestions": [],
        "_classify_task_type": [
          "any",
          "context.lower"
        ],
        "_generate_next_steps": [],
        "main": [
          "print",
          "argparse.ArgumentParser",
          "bridge.ai_suggest",
          "bridge.ai_onboarding_guide",
          "bridge.ai_check_duplicates",
          "bridge.ai_get_context",
          "CursorAIBridge",
          "bridge.ai_analyze_task",
          "json.dumps",
          "parser.add_argument",
          "bridge.ai_create_task",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "Any",
        "CursorIntegrationManager",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "WorkflowOrchestrator",
        "ai_self_awareness",
        "argparse",
        "cursor_integration",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": null,
      "artifact_id": "43e36da3-d908-49c9-84c7-f1aaca3b5998"
    },
    {
      "module_id": "src.llmstruct.ai_self_awareness",
      "path": "src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "module_doc": "AI Self-Awareness Enhancement Module\nProvides comprehensive system introspection and capability discovery for llmstruct AI systems.\nEnhanced with Cursor IDE integration and real-time metrics.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize the capability discovery system with CLI integration.",
          "line_range": [
            101,
            107
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_ensure_directories",
          "docstring": "Ensure required directories exist.",
          "line_range": [
            109,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "discover_all_capabilities",
          "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
          "line_range": [
            113,
            154
          ],
          "parameters": [
            "self",
            "force_refresh"
          ],
          "decorators": []
        },
        {
          "name": "_get_integration_metrics",
          "docstring": "Get metrics about unused function integration success.",
          "line_range": [
            156,
            163
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_enhanced_capabilities_summary",
          "docstring": "Get enhanced capabilities summary including unused function integration.",
          "line_range": [
            165,
            203
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_ai_status",
          "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
          "line_range": [
            205,
            246
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_tools",
          "docstring": "Discover and check health of all available tools.",
          "line_range": [
            248,
            260
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cli_processor",
          "docstring": "Check CLI processor health.",
          "line_range": [
            262,
            297
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_copilot_manager",
          "docstring": "Check Copilot manager health.",
          "line_range": [
            299,
            336
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_context_orchestrator",
          "docstring": "Check context orchestrator health.",
          "line_range": [
            338,
            393
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cache_system",
          "docstring": "Check cache system health.",
          "line_range": [
            395,
            438
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_struct_parser",
          "docstring": "Check struct.json parser health.",
          "line_range": [
            440,
            484
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_docs_system",
          "docstring": "Check docs.json system health.",
          "line_range": [
            486,
            517
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_capabilities",
          "docstring": "Discover available context capabilities.",
          "line_range": [
            519,
            556
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_integration_health",
          "docstring": "Check health of all system integrations.",
          "line_range": [
            558,
            567
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_component_status",
          "docstring": "Check status of a specific component.",
          "line_range": [
            569,
            574
          ],
          "parameters": [
            "self",
            "component_name"
          ],
          "decorators": []
        },
        {
          "name": "_discover_vscode_capabilities",
          "docstring": "Discover VS Code specific capabilities.",
          "line_range": [
            576,
            585
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_cache_hit_rate",
          "docstring": "Calculate cache hit rate using real metrics.",
          "line_range": [
            587,
            589
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_system_load",
          "docstring": "Estimate current system load using real metrics.",
          "line_range": [
            591,
            593
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_cache_valid",
          "docstring": "Check if cached capabilities are still valid.",
          "line_range": [
            595,
            602
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cached_capabilities",
          "docstring": "Load capabilities from cache.",
          "line_range": [
            604,
            618
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cache_capabilities",
          "docstring": "Cache capabilities to disk.",
          "line_range": [
            620,
            630
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "get_capabilities_summary",
          "docstring": "Get a human-readable summary of current capabilities.",
          "line_range": [
            632,
            691
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_project_structure",
          "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
          "line_range": [
            693,
            739
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_directory_structure",
          "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
          "line_range": [
            741,
            760
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_unused_capabilities",
          "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
          "line_range": [
            762,
            819
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_discover_config_capabilities",
          "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
          "line_range": [
            821,
            849
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_scenarios",
          "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
          "line_range": [
            851,
            890
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_command",
          "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
          "line_range": [
            892,
            898
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_config",
          "docstring": "Determine if a config function would be useful for AI configuration awareness.",
          "line_range": [
            900,
            906
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_utility",
          "docstring": "Determine if a utility function would be useful for AI operations.",
          "line_range": [
            908,
            914
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_prioritize_integrations",
          "docstring": "Prioritize which unused functions should be integrated first.",
          "line_range": [
            916,
            932
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_basic_directory_scan",
          "docstring": "Basic directory scan for fallback scenarios.",
          "line_range": [
            934,
            946
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_status_report",
          "docstring": "Generate Cursor-specific status optimized for IDE integration.",
          "line_range": [
            949,
            967
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "optimize_context_for_cursor",
          "docstring": "Provide perfectly sized context for Cursor interactions.",
          "line_range": [
            969,
            1001
          ],
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals from personal bridge.",
          "line_range": [
            1003,
            1038
          ],
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_real_cache_hit_rate",
          "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
          "line_range": [
            1040,
            1066
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_real_system_load",
          "docstring": "Get actual system performance metrics.",
          "line_range": [
            1068,
            1090
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": [
            1092,
            1102
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": [
            1104,
            1114
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_query_type",
          "docstring": "Analyze query to determine optimal context type.",
          "line_range": [
            1116,
            1144
          ],
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": [
            1146,
            1163
          ],
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": [
            1165,
            1177
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_get_overall_health_emoji",
          "docstring": "Get emoji representing overall system health.",
          "line_range": [
            1179,
            1202
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_status_emoji",
          "docstring": "Get emoji for context engine status.",
          "line_range": [
            1204,
            1214
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_ai_integration_emoji",
          "docstring": "Get emoji for AI integration status.",
          "line_range": [
            1216,
            1224
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_goal_alignment_status",
          "docstring": "Get goal alignment status.",
          "line_range": [
            1226,
            1235
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CapabilityStatus",
          "docstring": "Status of system capabilities.",
          "line_range": [
            22,
            27
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextMode",
          "docstring": "Available context modes.",
          "line_range": [
            30,
            35
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ToolHealth",
          "docstring": "Health status of a specific tool.",
          "line_range": [
            39,
            46
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextCapabilities",
          "docstring": "Available context capabilities.",
          "line_range": [
            50,
            57
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "IntegrationHealth",
          "docstring": "Status of system integrations.",
          "line_range": [
            61,
            68
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "VSCodeCapabilities",
          "docstring": "VS Code specific capabilities.",
          "line_range": [
            72,
            79
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilities",
          "docstring": "Complete system capabilities overview.",
          "line_range": [
            83,
            91
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilityDiscovery",
          "docstring": "Discovers and monitors system capabilities in real-time.\nProvides AI with comprehensive understanding of available tools and systems.\nEnhanced with unused function integration for maximum AI self-awareness.",
          "line_range": [
            94,
            1235
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the capability discovery system with CLI integration.",
              "line_range": [
                101,
                107
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_ensure_directories",
              "docstring": "Ensure required directories exist.",
              "line_range": [
                109,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "discover_all_capabilities",
              "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
              "line_range": [
                113,
                154
              ],
              "parameters": [
                "self",
                "force_refresh"
              ]
            },
            {
              "name": "_get_integration_metrics",
              "docstring": "Get metrics about unused function integration success.",
              "line_range": [
                156,
                163
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_enhanced_capabilities_summary",
              "docstring": "Get enhanced capabilities summary including unused function integration.",
              "line_range": [
                165,
                203
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_comprehensive_ai_status",
              "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
              "line_range": [
                205,
                246
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_tools",
              "docstring": "Discover and check health of all available tools.",
              "line_range": [
                248,
                260
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cli_processor",
              "docstring": "Check CLI processor health.",
              "line_range": [
                262,
                297
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_copilot_manager",
              "docstring": "Check Copilot manager health.",
              "line_range": [
                299,
                336
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_context_orchestrator",
              "docstring": "Check context orchestrator health.",
              "line_range": [
                338,
                393
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cache_system",
              "docstring": "Check cache system health.",
              "line_range": [
                395,
                438
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_struct_parser",
              "docstring": "Check struct.json parser health.",
              "line_range": [
                440,
                484
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_docs_system",
              "docstring": "Check docs.json system health.",
              "line_range": [
                486,
                517
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_capabilities",
              "docstring": "Discover available context capabilities.",
              "line_range": [
                519,
                556
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_integration_health",
              "docstring": "Check health of all system integrations.",
              "line_range": [
                558,
                567
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_component_status",
              "docstring": "Check status of a specific component.",
              "line_range": [
                569,
                574
              ],
              "parameters": [
                "self",
                "component_name"
              ]
            },
            {
              "name": "_discover_vscode_capabilities",
              "docstring": "Discover VS Code specific capabilities.",
              "line_range": [
                576,
                585
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_cache_hit_rate",
              "docstring": "Calculate cache hit rate using real metrics.",
              "line_range": [
                587,
                589
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_estimate_system_load",
              "docstring": "Estimate current system load using real metrics.",
              "line_range": [
                591,
                593
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_cache_valid",
              "docstring": "Check if cached capabilities are still valid.",
              "line_range": [
                595,
                602
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cached_capabilities",
              "docstring": "Load capabilities from cache.",
              "line_range": [
                604,
                618
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cache_capabilities",
              "docstring": "Cache capabilities to disk.",
              "line_range": [
                620,
                630
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "get_capabilities_summary",
              "docstring": "Get a human-readable summary of current capabilities.",
              "line_range": [
                632,
                691
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_project_structure",
              "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
              "line_range": [
                693,
                739
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_enhanced_directory_structure",
              "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
              "line_range": [
                741,
                760
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_unused_capabilities",
              "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
              "line_range": [
                762,
                819
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_discover_config_capabilities",
              "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
              "line_range": [
                821,
                849
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_scenarios",
              "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
              "line_range": [
                851,
                890
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_ai_useful_command",
              "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
              "line_range": [
                892,
                898
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_config",
              "docstring": "Determine if a config function would be useful for AI configuration awareness.",
              "line_range": [
                900,
                906
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_utility",
              "docstring": "Determine if a utility function would be useful for AI operations.",
              "line_range": [
                908,
                914
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_prioritize_integrations",
              "docstring": "Prioritize which unused functions should be integrated first.",
              "line_range": [
                916,
                932
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_basic_directory_scan",
              "docstring": "Basic directory scan for fallback scenarios.",
              "line_range": [
                934,
                946
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cursor_status_report",
              "docstring": "Generate Cursor-specific status optimized for IDE integration.",
              "line_range": [
                949,
                967
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "optimize_context_for_cursor",
              "docstring": "Provide perfectly sized context for Cursor interactions.",
              "line_range": [
                969,
                1001
              ],
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals from personal bridge.",
              "line_range": [
                1003,
                1038
              ],
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "_calculate_real_cache_hit_rate",
              "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
              "line_range": [
                1040,
                1066
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_real_system_load",
              "docstring": "Get actual system performance metrics.",
              "line_range": [
                1068,
                1090
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": [
                1092,
                1102
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": [
                1104,
                1114
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_query_type",
              "docstring": "Analyze query to determine optimal context type.",
              "line_range": [
                1116,
                1144
              ],
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": [
                1146,
                1163
              ],
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": [
                1165,
                1177
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_get_overall_health_emoji",
              "docstring": "Get emoji representing overall system health.",
              "line_range": [
                1179,
                1202
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_get_context_status_emoji",
              "docstring": "Get emoji for context engine status.",
              "line_range": [
                1204,
                1214
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_get_ai_integration_emoji",
              "docstring": "Get emoji for AI integration status.",
              "line_range": [
                1216,
                1224
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_goal_alignment_status",
              "docstring": "Get goal alignment status.",
              "line_range": [
                1226,
                1235
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._ensure_directories",
          "create_ai_cli_integration"
        ],
        "_ensure_directories": [],
        "discover_all_capabilities": [
          "self._discover_tools",
          "self._cache_capabilities",
          "datetime.now",
          "self._load_cached_capabilities",
          "logger.info",
          "self._calculate_cache_hit_rate",
          "self._analyze_project_structure",
          "self._check_integration_health",
          "self._estimate_system_load",
          "self._get_integration_metrics",
          "SystemCapabilities",
          "self._is_cache_valid",
          "self._discover_vscode_capabilities",
          "self._discover_context_capabilities",
          "time.time"
        ],
        "_get_integration_metrics": [],
        "get_enhanced_capabilities_summary": [
          "hasattr",
          "str",
          "enhanced_info.append",
          "self.get_capabilities_summary"
        ],
        "get_comprehensive_ai_status": [
          "self.get_enhanced_capabilities_summary",
          "str",
          "get_ai_enhanced_cli_summary"
        ],
        "_discover_tools": [
          "self._check_struct_parser",
          "self._check_context_orchestrator",
          "self._check_cache_system",
          "self._check_copilot_manager",
          "self._check_cli_processor",
          "self._check_docs_system"
        ],
        "_check_cli_processor": [
          "str",
          "CLIConfig",
          "CommandProcessor",
          "ToolHealth",
          "time.time",
          "datetime.now",
          "CLIUtils"
        ],
        "_check_copilot_manager": [
          "hasattr",
          "manager.get_context_status",
          "str",
          "ToolHealth",
          "initialize_copilot",
          "datetime.now",
          "time.time"
        ],
        "_check_context_orchestrator": [
          "get_optimized_context",
          "hasattr",
          "logger.warning",
          "str",
          "ToolHealth",
          "create_context_orchestrator",
          "datetime.now",
          "time.time"
        ],
        "_check_cache_system": [
          "JSONCache",
          "struct_file.exists",
          "cache.close",
          "cache.cache_json",
          "str",
          "cache.get_full_json",
          "ToolHealth",
          "datetime.now",
          "time.time"
        ],
        "_check_struct_parser": [
          "struct_file.exists",
          "str",
          "FileNotFoundError",
          "ToolHealth",
          "struct_data.get",
          "open",
          "json.load",
          "datetime.now",
          "missing_keys.append",
          "time.time"
        ],
        "_check_docs_system": [
          "str",
          "FileNotFoundError",
          "ToolHealth",
          "open",
          "json.load",
          "datetime.now",
          "docs_file.exists",
          "time.time"
        ],
        "_discover_context_capabilities": [
          "ContextCapabilities",
          "str",
          "logger.error",
          "scenario_mappings.keys",
          "isinstance",
          "config.get",
          "create_context_orchestrator",
          "list"
        ],
        "_check_integration_health": [
          "self._check_component_status",
          "IntegrationHealth"
        ],
        "_check_component_status": [
          "hasattr"
        ],
        "_discover_vscode_capabilities": [
          "VSCodeCapabilities"
        ],
        "_calculate_cache_hit_rate": [
          "self._calculate_real_cache_hit_rate"
        ],
        "_estimate_system_load": [
          "self._get_real_system_load"
        ],
        "_is_cache_valid": [
          "time.time"
        ],
        "_load_cached_capabilities": [
          "open",
          "json.load",
          "logger.error"
        ],
        "_cache_capabilities": [
          "asdict",
          "open",
          "json.dump",
          "logger.error"
        ],
        "get_capabilities_summary": [
          "str",
          "len",
          "self.discover_all_capabilities",
          "chr"
        ],
        "_analyze_project_structure": [
          "struct_file.exists",
          "len",
          "self._get_enhanced_directory_structure",
          "self._analyze_unused_capabilities",
          "self._discover_config_capabilities",
          "str",
          "module.get",
          "struct_data.get",
          "open",
          "json.load",
          "self._discover_context_scenarios",
          "sum"
        ],
        "_get_enhanced_directory_structure": [
          "get_directory_structure",
          "str",
          "self._basic_directory_scan"
        ],
        "_analyze_unused_capabilities": [
          "self._is_ai_useful_command",
          "f.startswith",
          "len",
          "modules.get",
          "str",
          "self._prioritize_integrations",
          "self._is_ai_useful_utility",
          "self._is_ai_useful_config",
          "struct_data.get",
          "config_module.get",
          "min",
          "cli_module.get",
          "utils_module.get"
        ],
        "_discover_config_capabilities": [
          "str",
          "get_queue_config",
          "get_context_config",
          "is_auto_update_enabled",
          "get_copilot_config"
        ],
        "_discover_context_scenarios": [
          "str",
          "get_metrics_summary",
          "get_context_for_scenario"
        ],
        "_is_ai_useful_command": [],
        "_is_ai_useful_config": [],
        "_is_ai_useful_utility": [],
        "_prioritize_integrations": [
          "priorities.append"
        ],
        "_basic_directory_scan": [
          "item.is_file",
          "item.is_dir",
          "str",
          "logger.error"
        ],
        "get_cursor_status_report": [
          "self._get_goal_alignment_status",
          "self._get_ai_integration_emoji",
          "str",
          "self.discover_all_capabilities",
          "self._get_overall_health_emoji",
          "self._get_context_status_emoji",
          "self._load_cursor_config"
        ],
        "optimize_context_for_cursor": [
          "optimal_config.get",
          "str",
          "context_rules.get",
          "logger.error",
          "file_path.exists",
          "open",
          "self._analyze_query_type",
          "json.load",
          "self._load_cursor_config",
          "cursor_config.get",
          "self._apply_privacy_filter"
        ],
        "get_goal_aligned_suggestions": [
          "self._load_personal_bridge",
          "suggestions.extend",
          "personal_bridge.get",
          "any",
          "technical_context.lower",
          "logger.error"
        ],
        "_calculate_real_cache_hit_rate": [
          "len",
          "cache_dir.exists",
          "cache_file.stat",
          "cache_dir.glob",
          "logger.error",
          "list",
          "time.time"
        ],
        "_get_real_system_load": [
          "str",
          "psutil.disk_usage",
          "min",
          "psutil.virtual_memory",
          "logger.error",
          "psutil.cpu_percent"
        ],
        "_load_cursor_config": [
          "json.load",
          "open",
          "config_path.exists",
          "logger.error"
        ],
        "_load_personal_bridge": [
          "bridge_path.exists",
          "open",
          "json.load",
          "logger.error"
        ],
        "_analyze_query_type": [
          "query_analysis.get",
          "any"
        ],
        "_apply_privacy_filter": [
          "isinstance",
          "context_data.items",
          "self._filter_sensitive_dict"
        ],
        "_filter_sensitive_dict": [
          "any",
          "data.items",
          "isinstance",
          "self._filter_sensitive_dict",
          "key.lower"
        ],
        "_get_overall_health_emoji": [],
        "_get_context_status_emoji": [
          "len"
        ],
        "_get_ai_integration_emoji": [
          "hasattr"
        ],
        "_get_goal_alignment_status": [
          "self._load_personal_bridge"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "asdict",
        "create_ai_cli_integration",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "get_ai_enhanced_cli_summary",
        "get_auto_update_config",
        "get_context_config",
        "get_context_for_scenario",
        "get_copilot_config",
        "get_directory_structure",
        "get_metrics_summary",
        "get_optimized_context",
        "get_queue_config",
        "initialize_copilot",
        "is_auto_update_enabled",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cache",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "logging",
        "os",
        "pathlib",
        "psutil",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "98ab52e5-0618-4a12-9be5-58de6e0756ec"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "module_doc": "CLI utility functions.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize utils with root directory.",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read file content with size limit.",
          "line_range": [
            28,
            50
          ],
          "parameters": [
            "self",
            "file_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "write_file_content",
          "docstring": "Write content to file.",
          "line_range": [
            52,
            70
          ],
          "parameters": [
            "self",
            "file_path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "get_directory_structure",
          "docstring": "Get directory structure using folder generator.",
          "line_range": [
            72,
            115
          ],
          "parameters": [
            "self",
            "path",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON content.",
          "line_range": [
            117,
            123
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "format_json",
          "docstring": "Format data as JSON string.",
          "line_range": [
            125,
            131
          ],
          "parameters": [
            "self",
            "data",
            "indent"
          ],
          "decorators": []
        },
        {
          "name": "generate_unique_id",
          "docstring": "Generate unique ID for commands, queues, etc.",
          "line_range": [
            133,
            137
          ],
          "parameters": [
            "self",
            "prefix"
          ],
          "decorators": []
        },
        {
          "name": "safe_path_join",
          "docstring": "Safely join path parts, preventing directory traversal.",
          "line_range": [
            139,
            149
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_exists",
          "docstring": "Check if file exists.",
          "line_range": [
            151,
            157
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "dir_exists",
          "docstring": "Check if directory exists.",
          "line_range": [
            159,
            165
          ],
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_size",
          "docstring": "Get file size in bytes.",
          "line_range": [
            167,
            173
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_file",
          "docstring": "Create backup of file with timestamp.",
          "line_range": [
            175,
            191
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_backups",
          "docstring": "Clean up old backup files, keeping only the most recent ones.",
          "line_range": [
            193,
            222
          ],
          "parameters": [
            "self",
            "file_path",
            "keep_count"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIUtils",
          "docstring": "Utility functions for CLI operations.",
          "line_range": [
            21,
            222
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize utils with root directory.",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "read_file_content",
              "docstring": "Read file content with size limit.",
              "line_range": [
                28,
                50
              ],
              "parameters": [
                "self",
                "file_path",
                "max_size"
              ]
            },
            {
              "name": "write_file_content",
              "docstring": "Write content to file.",
              "line_range": [
                52,
                70
              ],
              "parameters": [
                "self",
                "file_path",
                "content"
              ]
            },
            {
              "name": "get_directory_structure",
              "docstring": "Get directory structure using folder generator.",
              "line_range": [
                72,
                115
              ],
              "parameters": [
                "self",
                "path",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ]
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON content.",
              "line_range": [
                117,
                123
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "format_json",
              "docstring": "Format data as JSON string.",
              "line_range": [
                125,
                131
              ],
              "parameters": [
                "self",
                "data",
                "indent"
              ]
            },
            {
              "name": "generate_unique_id",
              "docstring": "Generate unique ID for commands, queues, etc.",
              "line_range": [
                133,
                137
              ],
              "parameters": [
                "self",
                "prefix"
              ]
            },
            {
              "name": "safe_path_join",
              "docstring": "Safely join path parts, preventing directory traversal.",
              "line_range": [
                139,
                149
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_exists",
              "docstring": "Check if file exists.",
              "line_range": [
                151,
                157
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "dir_exists",
              "docstring": "Check if directory exists.",
              "line_range": [
                159,
                165
              ],
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "get_file_size",
              "docstring": "Get file size in bytes.",
              "line_range": [
                167,
                173
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "backup_file",
              "docstring": "Create backup of file with timestamp.",
              "line_range": [
                175,
                191
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "cleanup_old_backups",
              "docstring": "Clean up old backup files, keeping only the most recent ones.",
              "line_range": [
                193,
                222
              ],
              "parameters": [
                "self",
                "file_path",
                "keep_count"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "read_file_content": [
          "logging.error",
          "f.read",
          "logging.warning",
          "os.stat",
          "open"
        ],
        "write_file_content": [
          "logging.error",
          "f.write",
          "open",
          "logging.info",
          "Path"
        ],
        "get_directory_structure": [
          "logging.error",
          "sorted",
          "get_folder_structure",
          "os.listdir"
        ],
        "validate_json": [
          "str",
          "json.loads"
        ],
        "format_json": [
          "str",
          "logging.error",
          "json.dumps"
        ],
        "generate_unique_id": [
          "str",
          "time.time",
          "uuid.uuid4",
          "int"
        ],
        "safe_path_join": [
          "ValueError",
          "resolved_path.startswith"
        ],
        "file_exists": [
          "self.safe_path_join"
        ],
        "dir_exists": [
          "self.safe_path_join"
        ],
        "get_file_size": [
          "self.safe_path_join"
        ],
        "backup_file": [
          "dst.write",
          "logging.error",
          "int",
          "self.safe_path_join",
          "open",
          "src.read",
          "time.time"
        ],
        "cleanup_old_backups": [
          "os.listdir",
          "backups.sort",
          "logging.error",
          "backups.append",
          "logging.warning",
          "int",
          "self.safe_path_join",
          "logging.info",
          "filename.split",
          "os.remove",
          "filename.startswith"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "3a448199-7dbe-4b85-8f23-fb118bfca085"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "module_doc": "CLI command processing and handlers.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize command processor.",
          "line_range": [
            33,
            72
          ],
          "parameters": [
            "self",
            "root_dir",
            "config",
            "utils"
          ],
          "decorators": []
        },
        {
          "name": "set_cache",
          "docstring": "Set cache instance.",
          "line_range": [
            74,
            76
          ],
          "parameters": [
            "self",
            "cache"
          ],
          "decorators": []
        },
        {
          "name": "set_copilot",
          "docstring": "Set Copilot manager instance.",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "self",
            "copilot_manager"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "Process a command starting with /.",
          "line_range": [
            82,
            98
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "process_prompt",
          "docstring": "Process a regular user prompt (not a command).",
          "line_range": [
            100,
            152
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Show help information.",
          "line_range": [
            154,
            217
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace",
          "docstring": "Handle workspace state and permissions management.",
          "line_range": [
            219,
            334
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_mode",
          "docstring": "Handle context mode operations with workspace integration.",
          "line_range": [
            336,
            437
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_view",
          "docstring": "View file or directory contents.",
          "line_range": [
            439,
            478
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_write",
          "docstring": "Write content to a file.",
          "line_range": [
            480,
            505
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_queue",
          "docstring": "Handle queue operations.",
          "line_range": [
            507,
            549
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_cache",
          "docstring": "Handle cache operations.",
          "line_range": [
            551,
            590
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_copilot",
          "docstring": "Handle Copilot operations.",
          "line_range": [
            592,
            626
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_config",
          "docstring": "Handle configuration operations.",
          "line_range": [
            628,
            660
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Show system status.",
          "line_range": [
            662,
            676
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_backup",
          "docstring": "Create backup of a file.",
          "line_range": [
            678,
            693
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_parse",
          "docstring": "Parse project structure.",
          "line_range": [
            695,
            715
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_audit",
          "docstring": "Handle audit operations.",
          "line_range": [
            717,
            743
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_auto_update",
          "docstring": "Handle auto-update operations.",
          "line_range": [
            745,
            765
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_struct_status",
          "docstring": "Handle struct status operations.",
          "line_range": [
            767,
            791
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context",
          "docstring": "Handle context operations.",
          "line_range": [
            793,
            849
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_session",
          "docstring": "Handle session operations.",
          "line_range": [
            851,
            902
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CommandProcessor",
          "docstring": "Processes CLI commands and user prompts.",
          "line_range": [
            30,
            902
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize command processor.",
              "line_range": [
                33,
                72
              ],
              "parameters": [
                "self",
                "root_dir",
                "config",
                "utils"
              ]
            },
            {
              "name": "set_cache",
              "docstring": "Set cache instance.",
              "line_range": [
                74,
                76
              ],
              "parameters": [
                "self",
                "cache"
              ]
            },
            {
              "name": "set_copilot",
              "docstring": "Set Copilot manager instance.",
              "line_range": [
                78,
                80
              ],
              "parameters": [
                "self",
                "copilot_manager"
              ]
            },
            {
              "name": "process_command",
              "docstring": "Process a command starting with /.",
              "line_range": [
                82,
                98
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "process_prompt",
              "docstring": "Process a regular user prompt (not a command).",
              "line_range": [
                100,
                152
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Show help information.",
              "line_range": [
                154,
                217
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace",
              "docstring": "Handle workspace state and permissions management.",
              "line_range": [
                219,
                334
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_mode",
              "docstring": "Handle context mode operations with workspace integration.",
              "line_range": [
                336,
                437
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_view",
              "docstring": "View file or directory contents.",
              "line_range": [
                439,
                478
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_write",
              "docstring": "Write content to a file.",
              "line_range": [
                480,
                505
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_queue",
              "docstring": "Handle queue operations.",
              "line_range": [
                507,
                549
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_cache",
              "docstring": "Handle cache operations.",
              "line_range": [
                551,
                590
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_copilot",
              "docstring": "Handle Copilot operations.",
              "line_range": [
                592,
                626
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_config",
              "docstring": "Handle configuration operations.",
              "line_range": [
                628,
                660
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Show system status.",
              "line_range": [
                662,
                676
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_backup",
              "docstring": "Create backup of a file.",
              "line_range": [
                678,
                693
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_parse",
              "docstring": "Parse project structure.",
              "line_range": [
                695,
                715
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_audit",
              "docstring": "Handle audit operations.",
              "line_range": [
                717,
                743
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_auto_update",
              "docstring": "Handle auto-update operations.",
              "line_range": [
                745,
                765
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_struct_status",
              "docstring": "Handle struct status operations.",
              "line_range": [
                767,
                791
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context",
              "docstring": "Handle context operations.",
              "line_range": [
                793,
                849
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_session",
              "docstring": "Handle session operations.",
              "line_range": [
                851,
                902
              ],
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "print",
          "WorkspaceStateManager"
        ],
        "set_cache": [],
        "set_copilot": [],
        "process_command": [
          "len",
          "print",
          "logging.error",
          "command_line.strip",
          "command_line.split"
        ],
        "process_prompt": [
          "get_optimized_context",
          "len",
          "print",
          "context_data.get",
          "logging.error",
          "prompt.strip",
          "logging.warning",
          "context_info.get",
          "logging.info",
          "CopilotEvent"
        ],
        "cmd_help": [
          "print"
        ],
        "cmd_workspace": [
          "len",
          "print",
          "permissions.get",
          "logging.error",
          "action_args.split",
          "entry.get",
          "int",
          "boundaries.get",
          "result.get",
          "args.strip",
          "state.get",
          "override.get"
        ],
        "cmd_mode": [
          "get_optimized_context",
          "len",
          "print",
          "context_data.get",
          "metrics.get",
          "permissions.get",
          "args.lower",
          "result.get",
          "args.upper",
          "args.strip",
          "re.findall"
        ],
        "cmd_view": [
          "print",
          "sorted",
          "os.listdir",
          "args.strip"
        ],
        "cmd_write": [
          "len",
          "print",
          "content.endswith",
          "content.startswith",
          "args.split"
        ],
        "cmd_queue": [
          "len",
          "print",
          "cmd.get",
          "enumerate",
          "open",
          "json.load",
          "args.strip",
          "queue_data.get",
          "os.remove"
        ],
        "cmd_cache": [
          "len",
          "print",
          "os.listdir",
          "args.strip",
          "stats.get"
        ],
        "cmd_copilot": [
          "print",
          "open",
          "json.load",
          "args.strip",
          "json.dumps"
        ],
        "cmd_config": [
          "print",
          "json.dumps",
          "args.strip"
        ],
        "cmd_status": [
          "print"
        ],
        "cmd_backup": [
          "print",
          "args.strip"
        ],
        "cmd_parse": [
          "print",
          "generate_json"
        ],
        "cmd_audit": [
          "print",
          "args.strip"
        ],
        "handle_auto_update": [
          "print",
          "generate_json"
        ],
        "handle_struct_status": [
          "len",
          "print",
          "os.stat",
          "struct_data.get",
          "open",
          "json.load",
          "datetime.fromtimestamp"
        ],
        "cmd_context": [
          "get_optimized_context",
          "len",
          "print",
          "context_data.get",
          "metrics.get",
          "args.strip"
        ],
        "cmd_session": [
          "len",
          "print",
          "state.get",
          "args.strip",
          "datetime.now"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CopilotContextManager",
        "CopilotEvent",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "WorkspaceStateManager",
        "cli_config",
        "cli_utils",
        "copilot",
        "create_context_orchestrator",
        "datetime",
        "generate_json",
        "get_optimized_context",
        "get_optimized_context_for_scenario",
        "initialize_copilot",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "sys",
        "trigger_copilot_event",
        "typing",
        "workspace"
      ],
      "hash": null,
      "artifact_id": "eb8b1d00-0cc9-467d-a04f-a2369cf8b5a4"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "LLMClient",
        "SystemCapabilityDiscovery",
        "ai_cli_integration",
        "ai_self_awareness",
        "llm_client"
      ],
      "hash": null,
      "artifact_id": "f181a815-d493-4fef-b4cf-4b19fe9f5307"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "cea3eb7d-2c3b-48a8-95ac-20eed00e5cdc"
    },
    {
      "module_id": "src.llmstruct.api.app",
      "path": "src/llmstruct/api/app.py",
      "category": "core",
      "module_doc": "Main FastAPI application for LLMStruct",
      "functions": [
        {
          "name": "root",
          "docstring": "Root endpoint with API information",
          "line_range": [
            78,
            86
          ],
          "parameters": [],
          "decorators": [
            "app.get('/', tags=['root'])"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "root": [
          "app.get"
        ]
      },
      "dependencies": [
        "CORSMiddleware",
        "Depends",
        "FastAPI",
        "GZipMiddleware",
        "api_key_middleware",
        "chat",
        "config",
        "continue_adapter",
        "fastapi",
        "fastapi.middleware.cors",
        "fastapi.middleware.gzip",
        "logging",
        "middleware.auth",
        "middleware.logging",
        "request_logging_middleware",
        "routes",
        "settings",
        "system",
        "uvicorn"
      ],
      "hash": null,
      "artifact_id": "c161998a-fabc-43ca-93ed-e63cc7b504db"
    },
    {
      "module_id": "src.llmstruct.api.routes.continue_adapter",
      "path": "src/llmstruct/api/routes/continue_adapter.py",
      "category": "core",
      "module_doc": "Continue API Adapter\n\nTranslates Continue extension requests to LLMStruct chat API format",
      "functions": [
        {
          "name": "continue_chat_completion",
          "docstring": "Continue-compatible chat completion endpoint\nTranslates Continue requests to our LLMStruct format",
          "line_range": [
            59,
            129
          ],
          "parameters": [
            "request",
            "api_key"
          ],
          "decorators": [
            "router.post('/v1/chat/completions')"
          ]
        },
        {
          "name": "continue_models",
          "docstring": "List available models for Continue",
          "line_range": [
            132,
            158
          ],
          "parameters": [
            "api_key"
          ],
          "decorators": [
            "router.get('/v1/models')"
          ]
        },
        {
          "name": "continue_embeddings",
          "docstring": "Embeddings endpoint for Continue (placeholder)",
          "line_range": [
            161,
            193
          ],
          "parameters": [
            "request",
            "api_key"
          ],
          "decorators": [
            "router.post('/v1/embeddings')"
          ]
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            25,
            35
          ],
          "parameters": [
            "self",
            "messages",
            "model",
            "temperature",
            "max_tokens",
            "stream"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            39,
            56
          ],
          "parameters": [
            "self",
            "content",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContinueRequest",
          "docstring": "Continue API request format",
          "line_range": [
            23,
            35
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                25,
                35
              ],
              "parameters": [
                "self",
                "messages",
                "model",
                "temperature",
                "max_tokens",
                "stream"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "ContinueResponse",
          "docstring": "Continue API response format (OpenAI-compatible)",
          "line_range": [
            37,
            56
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                39,
                56
              ],
              "parameters": [
                "self",
                "content",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "len",
          "datetime.now",
          "content.split",
          "int"
        ],
        "continue_chat_completion": [
          "len",
          "Depends",
          "msg.get",
          "reversed",
          "str",
          "logger.info",
          "request.json",
          "request_data.get",
          "HTTPException",
          "llm_service.process_message",
          "datetime.now",
          "router.post",
          "logger.error",
          "ContinueResponse"
        ],
        "continue_models": [
          "datetime.now",
          "Depends",
          "router.get",
          "int"
        ],
        "continue_embeddings": [
          "len",
          "input_text.split",
          "Depends",
          "str",
          "request.json",
          "request_data.get",
          "HTTPException",
          "router.post",
          "logger.error"
        ]
      },
      "dependencies": [
        "APIRouter",
        "Any",
        "ChatMessage",
        "ChatResponse",
        "Depends",
        "Dict",
        "HTTPException",
        "LLMService",
        "List",
        "Optional",
        "Request",
        "datetime",
        "fastapi",
        "get_api_key",
        "logging",
        "middleware.auth",
        "models.requests",
        "models.responses",
        "services.llm_service",
        "typing"
      ],
      "hash": null,
      "artifact_id": "fefacc81-6715-462a-ae5a-81938b6a8521"
    },
    {
      "module_id": "src.llmstruct.api.services.llm_service",
      "path": "src/llmstruct/api/services/llm_service.py",
      "category": "core",
      "module_doc": "LLM Service\n\nIntegrates with existing LLM models and context orchestration",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            28
          ],
          "parameters": [
            "self",
            "content",
            "context_info",
            "token_usage"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            33,
            36
          ],
          "parameters": [
            "self",
            "api_key"
          ],
          "decorators": []
        },
        {
          "name": "chat_completion",
          "docstring": "Send chat completion request to Anthropic",
          "line_range": [
            38,
            77
          ],
          "parameters": [
            "self",
            "messages",
            "temperature"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            82,
            85
          ],
          "parameters": [
            "self",
            "api_key"
          ],
          "decorators": []
        },
        {
          "name": "chat_completion",
          "docstring": "Send chat completion request to Grok",
          "line_range": [
            87,
            113
          ],
          "parameters": [
            "self",
            "messages",
            "temperature"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_components",
          "docstring": "Initialize context orchestrator and copilot manager",
          "line_range": [
            126,
            140
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_message",
          "docstring": "Process a user message and return AI response",
          "line_range": [
            143,
            168
          ],
          "parameters": [
            "self",
            "message",
            "session_id",
            "context_mode"
          ],
          "decorators": []
        },
        {
          "name": "_try_llm_providers",
          "docstring": "Try LLM providers in order and return response",
          "line_range": [
            170,
            195
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_get_context",
          "docstring": "Get relevant context for the message",
          "line_range": [
            197,
            229
          ],
          "parameters": [
            "self",
            "message",
            "context_mode"
          ],
          "decorators": []
        },
        {
          "name": "_get_full_context",
          "docstring": "Get full project context",
          "line_range": [
            231,
            243
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_focused_context",
          "docstring": "Get focused context based on message content",
          "line_range": [
            245,
            260
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "_get_minimal_context",
          "docstring": "Get minimal context - basic project info",
          "line_range": [
            262,
            267
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_generate_grok_response",
          "docstring": "Generate response using Grok API",
          "line_range": [
            269,
            287
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_generate_anthropic_response",
          "docstring": "Generate response using Anthropic API",
          "line_range": [
            289,
            307
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_build_system_prompt",
          "docstring": "Build system prompt with project context",
          "line_range": [
            309,
            344
          ],
          "parameters": [
            "self",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_generate_mock_response",
          "docstring": "Generate a mock AI response (placeholder for real LLM)",
          "line_range": [
            346,
            380
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMResponse",
          "docstring": "Response from LLM processing",
          "line_range": [
            21,
            28
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                28
              ],
              "parameters": [
                "self",
                "content",
                "context_info",
                "token_usage"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "AnthropicClient",
          "docstring": "Client for Anthropic Claude API",
          "line_range": [
            30,
            77
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                33,
                36
              ],
              "parameters": [
                "self",
                "api_key"
              ]
            },
            {
              "name": "chat_completion",
              "docstring": "Send chat completion request to Anthropic",
              "line_range": [
                38,
                77
              ],
              "parameters": [
                "self",
                "messages",
                "temperature"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "GrokClient",
          "docstring": "Client for Grok API integration",
          "line_range": [
            79,
            113
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                82,
                85
              ],
              "parameters": [
                "self",
                "api_key"
              ]
            },
            {
              "name": "chat_completion",
              "docstring": "Send chat completion request to Grok",
              "line_range": [
                87,
                113
              ],
              "parameters": [
                "self",
                "messages",
                "temperature"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "LLMService",
          "docstring": "Service for LLM processing with context integration",
          "line_range": [
            115,
            380
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self",
                "base_path"
              ]
            },
            {
              "name": "_initialize_components",
              "docstring": "Initialize context orchestrator and copilot manager",
              "line_range": [
                126,
                140
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_message",
              "docstring": "Process a user message and return AI response",
              "line_range": [
                143,
                168
              ],
              "parameters": [
                "self",
                "message",
                "session_id",
                "context_mode"
              ]
            },
            {
              "name": "_try_llm_providers",
              "docstring": "Try LLM providers in order and return response",
              "line_range": [
                170,
                195
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            },
            {
              "name": "_get_context",
              "docstring": "Get relevant context for the message",
              "line_range": [
                197,
                229
              ],
              "parameters": [
                "self",
                "message",
                "context_mode"
              ]
            },
            {
              "name": "_get_full_context",
              "docstring": "Get full project context",
              "line_range": [
                231,
                243
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_focused_context",
              "docstring": "Get focused context based on message content",
              "line_range": [
                245,
                260
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "_get_minimal_context",
              "docstring": "Get minimal context - basic project info",
              "line_range": [
                262,
                267
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_generate_grok_response",
              "docstring": "Generate response using Grok API",
              "line_range": [
                269,
                287
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            },
            {
              "name": "_generate_anthropic_response",
              "docstring": "Generate response using Anthropic API",
              "line_range": [
                289,
                307
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            },
            {
              "name": "_build_system_prompt",
              "docstring": "Build system prompt with project context",
              "line_range": [
                309,
                344
              ],
              "parameters": [
                "self",
                "context_info"
              ]
            },
            {
              "name": "_generate_mock_response",
              "docstring": "Generate a mock AI response (placeholder for real LLM)",
              "line_range": [
                346,
                380
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "AnthropicClient",
          "GrokClient",
          "Path.cwd",
          "self._initialize_components"
        ],
        "chat_completion": [
          "ValueError",
          "client.post",
          "response.json",
          "httpx.AsyncClient",
          "response.raise_for_status"
        ],
        "_initialize_components": [
          "str",
          "logger.info",
          "CopilotContextManager",
          "SmartContextOrchestrator",
          "logger.error"
        ],
        "process_message": [
          "LLMResponse",
          "str",
          "self._get_context",
          "self._try_llm_providers",
          "logger.error"
        ],
        "_try_llm_providers": [
          "len",
          "self._generate_anthropic_response",
          "logger.warning",
          "self._generate_mock_response",
          "logger.info",
          "self._generate_grok_response"
        ],
        "_get_context": [
          "self._get_focused_context",
          "self._get_full_context",
          "str",
          "context_info.update",
          "self._get_minimal_context",
          "logger.error"
        ],
        "_get_full_context": [
          "struct_file.exists",
          "len",
          "struct_data.get",
          "open",
          "json.load",
          "list"
        ],
        "_get_focused_context": [
          "message.lower",
          "any"
        ],
        "_get_minimal_context": [
          "str",
          "datetime.now"
        ],
        "_generate_grok_response": [
          "ValueError",
          "len",
          "self._build_system_prompt"
        ],
        "_generate_anthropic_response": [
          "ValueError",
          "len",
          "self._build_system_prompt"
        ],
        "_build_system_prompt": [
          "context_info.get"
        ],
        "_generate_mock_response": [
          "len",
          "message.lower",
          "context_info.get"
        ]
      },
      "dependencies": [
        "Any",
        "CopilotContextManager",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "asyncio",
        "context_orchestrator",
        "copilot",
        "datetime",
        "httpx",
        "json",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d85dbe8c-4d93-475c-a6ee-5d299c528058"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            15,
            88
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering.",
          "line_range": [
            91,
            148
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.",
          "line_range": [
            151,
            218
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "sorted",
          "os.walk",
          "any",
          "file_path.relative_to",
          "str",
          "structure.append",
          "set",
          "p.rstrip",
          "file_path.match",
          "Path",
          "p.endswith",
          "uuid.uuid4"
        ],
        "build_toc_and_modules": [
          "toc.append",
          "len",
          "any",
          "analyze_module",
          "f.match",
          "str",
          "set",
          "p.rstrip",
          "modules.append",
          "Path",
          "p.endswith",
          "uuid.uuid4"
        ],
        "generate_json": [
          "len",
          "build_toc_and_modules",
          "str",
          "set",
          "Path",
          "uuid.uuid4",
          "get_folder_structure",
          "sum",
          "list"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "d0df777c-1929-4f83-ba9c-8c7c43df66d9"
    },
    {
      "module_id": "src.llmstruct.generators.go_json_generator",
      "path": "src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_go_folder_structure",
          "docstring": "Capture directory and file structure for Go projects with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            15,
            85
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_go_toc_and_modules",
          "docstring": "Build TOC and modules for Go projects with artifact_id and robust filtering.",
          "line_range": [
            88,
            143
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "extract_go_mod_info",
          "docstring": "Extract information from go.mod file.",
          "line_range": [
            146,
            182
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "generate_go_json",
          "docstring": "Generate JSON structure for Go project with artifact_id, summary, and tags.",
          "line_range": [
            185,
            259
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_go_folder_structure": [
          "sorted",
          "os.walk",
          "any",
          "file_path.relative_to",
          "str",
          "structure.append",
          "set",
          "p.rstrip",
          "file_path.match",
          "Path",
          "p.endswith",
          "uuid.uuid4"
        ],
        "build_go_toc_and_modules": [
          "toc.append",
          "len",
          "any",
          "analyze_module",
          "f.match",
          "str",
          "module.get",
          "set",
          "p.rstrip",
          "modules.append",
          "Path",
          "p.endswith",
          "uuid.uuid4"
        ],
        "extract_go_mod_info": [
          "dependencies.append",
          "len",
          "line.split",
          "logging.error",
          "f.read",
          "line.startswith",
          "go_mod_path.exists",
          "open",
          "content.strip",
          "line.strip",
          "Path"
        ],
        "generate_go_json": [
          "len",
          "go_mod_info.get",
          "str",
          "get_go_folder_structure",
          "extract_go_mod_info",
          "set",
          "build_go_toc_and_modules",
          "Path",
          "m.get",
          "uuid.uuid4",
          "sum",
          "list"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.go_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "8edb4c12-960d-48ea-8ebe-00d1915d6b17"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "d508282a-f155-4753-966f-e3a4506adf9d"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": [
            12,
            40
          ],
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": [
            43,
            61
          ],
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "json_file.exists",
          "logging.error",
          "str",
          "open",
          "schema_file.exists",
          "json.load",
          "logging.info",
          "Path",
          "validate"
        ],
        "validate_directory": [
          "validate_struct_json",
          "any",
          "str",
          "json_file.match",
          "Path"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "e5111601-363e-41bb-86cb-bd52f6c91e51"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "b0060dd1-6696-44b0-8b94-abc688c382e9"
    },
    {
      "module_id": "src.llmstruct.parsers.universal_converter",
      "path": "src/llmstruct/parsers/universal_converter.py",
      "category": "core",
      "module_doc": "Universal Code Converter - Orchestrates all language parsers\nConverts any codebase to llmstruct JSON format",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for universal converter",
          "line_range": [
            375,
            428
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            55,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            79,
            82
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "detect_language",
          "docstring": "Detect programming language from file extension",
          "line_range": [
            84,
            92
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "detect_project_languages",
          "docstring": "Detect all languages in project and count files",
          "line_range": [
            94,
            109
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "get_project_files",
          "docstring": "Get all relevant files for conversion",
          "line_range": [
            111,
            138
          ],
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_python_project",
          "docstring": "Convert Python project to llmstruct format",
          "line_range": [
            140,
            171
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_go_project",
          "docstring": "Convert Go project to llmstruct format",
          "line_range": [
            173,
            190
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_javascript_project",
          "docstring": "Convert JavaScript project to llmstruct format",
          "line_range": [
            192,
            223
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_project",
          "docstring": "Convert any project to llmstruct format",
          "line_range": [
            225,
            250
          ],
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_multi_language_project",
          "docstring": "Convert multi-language project with separate sections per language",
          "line_range": [
            252,
            282
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_build_project_structure",
          "docstring": "Build standard llmstruct project structure",
          "line_range": [
            284,
            312
          ],
          "parameters": [
            "self",
            "language",
            "project_path",
            "modules",
            "toc"
          ],
          "decorators": []
        },
        {
          "name": "_build_empty_project_structure",
          "docstring": "Build empty structure when conversion fails",
          "line_range": [
            314,
            329
          ],
          "parameters": [
            "self",
            "language",
            "project_path",
            "error"
          ],
          "decorators": []
        },
        {
          "name": "_merge_language_results",
          "docstring": "Merge multiple language results into unified structure",
          "line_range": [
            331,
            372
          ],
          "parameters": [
            "self",
            "project_path",
            "language_results"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Language",
          "docstring": "",
          "line_range": [
            33,
            42
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ConverterConfig",
          "docstring": "Configuration for universal converter",
          "line_range": [
            46,
            62
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                55,
                62
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "UniversalConverter",
          "docstring": "Universal code converter for any programming language",
          "line_range": [
            65,
            372
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                79,
                82
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "detect_language",
              "docstring": "Detect programming language from file extension",
              "line_range": [
                84,
                92
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "detect_project_languages",
              "docstring": "Detect all languages in project and count files",
              "line_range": [
                94,
                109
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "get_project_files",
              "docstring": "Get all relevant files for conversion",
              "line_range": [
                111,
                138
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_python_project",
              "docstring": "Convert Python project to llmstruct format",
              "line_range": [
                140,
                171
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_go_project",
              "docstring": "Convert Go project to llmstruct format",
              "line_range": [
                173,
                190
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_javascript_project",
              "docstring": "Convert JavaScript project to llmstruct format",
              "line_range": [
                192,
                223
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_project",
              "docstring": "Convert any project to llmstruct format",
              "line_range": [
                225,
                250
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_multi_language_project",
              "docstring": "Convert multi-language project with separate sections per language",
              "line_range": [
                252,
                282
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_build_project_structure",
              "docstring": "Build standard llmstruct project structure",
              "line_range": [
                284,
                312
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "modules",
                "toc"
              ]
            },
            {
              "name": "_build_empty_project_structure",
              "docstring": "Build empty structure when conversion fails",
              "line_range": [
                314,
                329
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "error"
              ]
            },
            {
              "name": "_merge_language_results",
              "docstring": "Merge multiple language results into unified structure",
              "line_range": [
                331,
                372
              ],
              "parameters": [
                "self",
                "project_path",
                "language_results"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "GoAnalyzer",
          "ConverterConfig",
          "JavaScriptParser"
        ],
        "detect_language": [
          "Path"
        ],
        "detect_project_languages": [
          "languages.get",
          "any",
          "os.walk",
          "self.detect_language"
        ],
        "get_project_files": [
          "files.append",
          "any",
          "os.walk",
          "self.detect_language"
        ],
        "convert_python_project": [
          "toc.append",
          "len",
          "module_data.get",
          "logger.warning",
          "logger.info",
          "self._build_project_structure",
          "self.get_project_files",
          "modules.append",
          "analyze_python"
        ],
        "convert_go_project": [
          "str",
          "logger.info",
          "self._build_empty_project_structure",
          "convert_to_llmstruct_format",
          "logger.error"
        ],
        "convert_javascript_project": [
          "toc.append",
          "len",
          "module_data.get",
          "logger.warning",
          "logger.info",
          "self._build_project_structure",
          "self.get_project_files",
          "modules.append"
        ],
        "convert_project": [
          "ValueError",
          "self.convert_python_project",
          "NotImplementedError",
          "logger.info",
          "languages.keys",
          "self.convert_go_project",
          "self.detect_project_languages",
          "self.convert_javascript_project",
          "max"
        ],
        "convert_multi_language_project": [
          "ValueError",
          "self.convert_python_project",
          "logger.warning",
          "logger.info",
          "languages.keys",
          "self._merge_language_results",
          "self.convert_go_project",
          "self.detect_project_languages",
          "self.convert_javascript_project",
          "logger.error"
        ],
        "_build_project_structure": [
          "len",
          "m.get",
          "language.title",
          "sum"
        ],
        "_build_empty_project_structure": [],
        "_merge_language_results": [
          "all_modules.append",
          "language_results.items",
          "result.get",
          "language_results.keys",
          "stats.get",
          "all_toc.append",
          "list"
        ],
        "main": [
          "Language",
          "print",
          "argparse.ArgumentParser",
          "ConverterConfig",
          "converter.convert_multi_language_project",
          "f.write",
          "converter.convert_project",
          "logger.error",
          "result.get",
          "open",
          "traceback.print_exc",
          "stats.get",
          "json.dumps",
          "parser.parse_args",
          "UniversalConverter",
          "exit",
          "parser.add_argument"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "GoAnalyzer",
        "JavaScriptParser",
        "List",
        "Optional",
        "Path",
        "Union",
        "analyze_module",
        "argparse",
        "convert_to_llmstruct_format",
        "dataclass",
        "dataclasses",
        "enum",
        "go_analyzer",
        "javascript_parser",
        "json",
        "logging",
        "os",
        "pathlib",
        "python_parser",
        "sys",
        "traceback",
        "typing"
      ],
      "hash": null,
      "artifact_id": "3dc9a58d-8334-484a-a6e0-9ef15347b0b8"
    },
    {
      "module_id": "src.llmstruct.parsers.go_analyzer",
      "path": "src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "module_doc": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b: go/packages, go/analysis",
      "functions": [
        {
          "name": "convert_to_llmstruct_format",
          "docstring": "\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 llmstruct",
          "line_range": [
            203,
            337
          ],
          "parameters": [
            "analysis",
            "include_ranges",
            "goals"
          ],
          "decorators": []
        },
        {
          "name": "_compute_file_hash",
          "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 SHA-256 \u0445\u044d\u0448 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            339,
            345
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            347,
            402
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_setup_analyzer",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
          "line_range": [
            28,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cleanup",
          "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
          "line_range": [
            68,
            72
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_project",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            74,
            125
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_fallback_analysis",
          "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            127,
            201
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GoAnalyzer",
          "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 Go \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432",
          "line_range": [
            21,
            201
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_setup_analyzer",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
              "line_range": [
                28,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cleanup",
              "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
              "line_range": [
                68,
                72
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_project",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
              "line_range": [
                74,
                125
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_fallback_analysis",
              "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                127,
                201
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "_setup_analyzer": [
          "tempfile.mkdtemp",
          "analyzer_file.write_text",
          "str",
          "logging.warning",
          "analyzer_source.read_text",
          "Path",
          "subprocess.run"
        ],
        "_cleanup": [
          "Path",
          "shutil.rmtree"
        ],
        "analyze_project": [
          "self._fallback_analysis",
          "json.loads",
          "logging.error",
          "logging.warning",
          "logging.info",
          "self._setup_analyzer",
          "self._cleanup",
          "subprocess.run"
        ],
        "_fallback_analysis": [
          "content.split",
          "len",
          "sorted",
          "file_path.relative_to",
          "line.split",
          "str",
          "go_mod_path.read_text",
          "line.startswith",
          "packages.add",
          "logging.warning",
          "set",
          "go_mod_path.exists",
          "logging.info",
          "file_path.read_text",
          "line.strip",
          "Path",
          "list"
        ],
        "convert_to_llmstruct_format": [
          "toc.append",
          "len",
          "classes.append",
          "iface.get",
          "str",
          "file_data.get",
          "struct.get",
          "module.get",
          "_compute_file_hash",
          "fn.get",
          "path.replace",
          "analysis.get",
          "modules.append",
          "path.endswith",
          "functions.append",
          "uuid.uuid4",
          "sum"
        ],
        "_compute_file_hash": [
          "f.read",
          "open",
          "hashlib.sha256"
        ],
        "main": [
          "len",
          "print",
          "argparse.ArgumentParser",
          "analyzer.analyze_project",
          "GoAnalyzer",
          "sys.exit",
          "f.write",
          "convert_to_llmstruct_format",
          "result.get",
          "open",
          "traceback.print_exc",
          "stats.get",
          "Path",
          "json.dumps",
          "parser.add_argument",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "subprocess",
        "sys",
        "tempfile",
        "traceback",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "2a6f3b15-8456-491b-a56d-5e60ddfce180"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            9,
            13
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": [
            15,
            20
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": [
            22,
            41
          ],
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": [
            43,
            124
          ],
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": [
            8,
            124
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                9,
                13
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": [
                15,
                20
              ],
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": [
                22,
                41
              ],
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": [
                43,
                124
              ],
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "f.read",
          "open",
          "hashlib.sha256"
        ],
        "compute_file_metadata": [
          "os.stat",
          "self.file_hash",
          "open",
          "sum"
        ],
        "parse_module": [
          "esprima.parseModule",
          "self.compute_file_metadata",
          "str",
          "f.read",
          "open"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9d3afd7a-d8f9-408e-a707-feeac913655d"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": [
            13,
            20
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content.",
          "line_range": [
            72,
            79
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data.",
          "line_range": [
            82,
            154
          ],
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            26,
            29
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": [
            31,
            35
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": [
            37,
            43
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": [
            45,
            50
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": [
            52,
            57
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": [
            59,
            69
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": [
            23,
            69
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                29
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": [
                37,
                43
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": [
                45,
                50
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": [
                52,
                57
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": [
                59,
                69
              ],
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_AsyncFunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "compute_file_hash": [
          "logging.error",
          "f.read",
          "open",
          "hashlib.sha256"
        ],
        "analyze_module": [
          "compute_file_hash",
          "sorted",
          "ast.parse",
          "classes.append",
          "ast.walk",
          "visitor.visit",
          "infer_category",
          "logging.error",
          "f.read",
          "str",
          "ast.get_docstring",
          "ast.unparse",
          "isinstance",
          "open",
          "Path",
          "functions.append",
          "CallVisitor",
          "list"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "7f0710b6-9b79-4823-83c2-ad2d53213ee5"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "javascript_parser"
      ],
      "hash": null,
      "artifact_id": "f4a5ab3d-2284-47bf-b973-55f787c1dd52"
    },
    {
      "module_id": "temp_boss_missing.scripts.business_planning",
      "path": "temp_boss_missing/scripts/business_planning.py",
      "category": "core",
      "module_doc": "Business Planning Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
      "functions": [
        {
          "name": "create_business_planning_manager",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
          "line_range": [
            216,
            218
          ],
          "parameters": [
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
          "line_range": [
            20,
            27
          ],
          "parameters": [
            "self",
            "boss_data_dir"
          ],
          "decorators": []
        },
        {
          "name": "create_business_roadmap",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.",
          "line_range": [
            29,
            55
          ],
          "parameters": [
            "self",
            "roadmap_data"
          ],
          "decorators": []
        },
        {
          "name": "create_financial_plan",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "plan_data"
          ],
          "decorators": []
        },
        {
          "name": "record_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.",
          "line_range": [
            84,
            116
          ],
          "parameters": [
            "self",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_business_metrics",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            118,
            154
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_business_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.",
          "line_range": [
            156,
            193
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
          "line_range": [
            195,
            204
          ],
          "parameters": [
            "self",
            "file_path",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
          "line_range": [
            206,
            213
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BusinessPlanningManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439.",
          "line_range": [
            17,
            213
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
              "line_range": [
                20,
                27
              ],
              "parameters": [
                "self",
                "boss_data_dir"
              ]
            },
            {
              "name": "create_business_roadmap",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.",
              "line_range": [
                29,
                55
              ],
              "parameters": [
                "self",
                "roadmap_data"
              ]
            },
            {
              "name": "create_financial_plan",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "plan_data"
              ]
            },
            {
              "name": "record_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.",
              "line_range": [
                84,
                116
              ],
              "parameters": [
                "self",
                "decision_data"
              ]
            },
            {
              "name": "analyze_business_metrics",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                118,
                154
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_business_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.",
              "line_range": [
                156,
                193
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
              "line_range": [
                195,
                204
              ],
              "parameters": [
                "self",
                "file_path",
                "default"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
              "line_range": [
                206,
                213
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "create_business_roadmap": [
          "logger.error",
          "datetime.now",
          "logger.info",
          "self._save_data"
        ],
        "create_financial_plan": [
          "logger.error",
          "datetime.now",
          "logger.info",
          "self._save_data"
        ],
        "record_strategic_decision": [
          "decisions.append",
          "logger.info",
          "isinstance",
          "self._load_data",
          "decision_data.get",
          "self._save_data",
          "datetime.now",
          "logger.error"
        ],
        "analyze_business_metrics": [
          "len",
          "isinstance",
          "self._load_data",
          "datetime.now",
          "logger.error"
        ],
        "get_business_summary": [
          "len",
          "financial.get",
          "bool",
          "isinstance",
          "self._load_data",
          "datetime.now",
          "logger.error",
          "roadmap.get"
        ],
        "_load_data": [
          "file_path.exists",
          "file_path.open",
          "json.load",
          "logger.error"
        ],
        "_save_data": [
          "file_path.open",
          "json.dump",
          "logger.error"
        ],
        "create_business_planning_manager": [
          "BusinessPlanningManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "034c4815-a4dd-42b8-bf34-a611edf106bd"
    },
    {
      "module_id": "temp_boss_missing.scripts.team_management",
      "path": "temp_boss_missing/scripts/team_management.py",
      "category": "core",
      "module_doc": "Team Management Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439, \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
      "functions": [
        {
          "name": "create_team_management_system",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            291,
            293
          ],
          "parameters": [
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            20,
            27
          ],
          "parameters": [
            "self",
            "boss_data_dir"
          ],
          "decorators": []
        },
        {
          "name": "create_team_strategy",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            29,
            54
          ],
          "parameters": [
            "self",
            "strategy_data"
          ],
          "decorators": []
        },
        {
          "name": "record_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            56,
            88
          ],
          "parameters": [
            "self",
            "evaluation_data"
          ],
          "decorators": []
        },
        {
          "name": "create_hiring_plan",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            90,
            115
          ],
          "parameters": [
            "self",
            "plan_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_team_performance",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            117,
            156
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_team_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            158,
            195
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_team_report",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            197,
            226
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_strategy",
          "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.",
          "line_range": [
            228,
            238
          ],
          "parameters": [
            "self",
            "strategy"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_evaluations",
          "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.",
          "line_range": [
            240,
            250
          ],
          "parameters": [
            "self",
            "evaluations"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.",
          "line_range": [
            252,
            268
          ],
          "parameters": [
            "self",
            "strategy",
            "evaluations"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
          "line_range": [
            270,
            279
          ],
          "parameters": [
            "self",
            "file_path",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
          "line_range": [
            281,
            288
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TeamManagementSystem",
          "docstring": "\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438.",
          "line_range": [
            17,
            288
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
              "line_range": [
                20,
                27
              ],
              "parameters": [
                "self",
                "boss_data_dir"
              ]
            },
            {
              "name": "create_team_strategy",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
              "line_range": [
                29,
                54
              ],
              "parameters": [
                "self",
                "strategy_data"
              ]
            },
            {
              "name": "record_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                56,
                88
              ],
              "parameters": [
                "self",
                "evaluation_data"
              ]
            },
            {
              "name": "create_hiring_plan",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                90,
                115
              ],
              "parameters": [
                "self",
                "plan_data"
              ]
            },
            {
              "name": "analyze_team_performance",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                117,
                156
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_team_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                158,
                195
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_team_report",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                197,
                226
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_summarize_strategy",
              "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.",
              "line_range": [
                228,
                238
              ],
              "parameters": [
                "self",
                "strategy"
              ]
            },
            {
              "name": "_summarize_evaluations",
              "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.",
              "line_range": [
                240,
                250
              ],
              "parameters": [
                "self",
                "evaluations"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.",
              "line_range": [
                252,
                268
              ],
              "parameters": [
                "self",
                "strategy",
                "evaluations"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
              "line_range": [
                270,
                279
              ],
              "parameters": [
                "self",
                "file_path",
                "default"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
              "line_range": [
                281,
                288
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "create_team_strategy": [
          "logger.error",
          "datetime.now",
          "logger.info",
          "self._save_data"
        ],
        "record_team_evaluation": [
          "logger.info",
          "isinstance",
          "self._load_data",
          "self._save_data",
          "evaluations.append",
          "datetime.now",
          "logger.error"
        ],
        "create_hiring_plan": [
          "logger.error",
          "datetime.now",
          "logger.info",
          "self._save_data"
        ],
        "analyze_team_performance": [
          "len",
          "bool",
          "isinstance",
          "self._load_data",
          "datetime.now",
          "logger.error"
        ],
        "get_team_summary": [
          "len",
          "bool",
          "strategy.get",
          "hiring_plans.get",
          "isinstance",
          "self._load_data",
          "datetime.now",
          "logger.error"
        ],
        "generate_team_report": [
          "self._summarize_strategy",
          "self._generate_recommendations",
          "self._summarize_evaluations",
          "self._load_data",
          "datetime.now",
          "logger.error"
        ],
        "_summarize_strategy": [
          "strategy.get"
        ],
        "_summarize_evaluations": [
          "len",
          "isinstance"
        ],
        "_generate_recommendations": [
          "len",
          "recommendations.append"
        ],
        "_load_data": [
          "file_path.exists",
          "file_path.open",
          "json.load",
          "logger.error"
        ],
        "_save_data": [
          "file_path.open",
          "json.dump",
          "logger.error"
        ],
        "create_team_management_system": [
          "TeamManagementSystem"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "df6734aa-378d-43e6-835a-182f5a8e2744"
    },
    {
      "module_id": "temp_boss_missing.scripts.boss_cli",
      "path": "temp_boss_missing/scripts/boss_cli.py",
      "category": "core",
      "module_doc": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u043e\u0434\u0443\u043b\u0438",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f.",
          "line_range": [
            490,
            503
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
          "line_range": [
            42,
            101
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
          "line_range": [
            103,
            126
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            128,
            147
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_status",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.",
          "line_range": [
            150,
            157
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_audit",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.",
          "line_range": [
            159,
            166
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_context",
          "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.",
          "line_range": [
            168,
            175
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_queue",
          "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.",
          "line_range": [
            177,
            184
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_summary",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.",
          "line_range": [
            186,
            193
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_roadmap",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
          "line_range": [
            196,
            221
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_financial_plan",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.",
          "line_range": [
            223,
            256
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
          "line_range": [
            258,
            273
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            275,
            282
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_summary",
          "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
          "line_range": [
            284,
            291
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_strategy",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            294,
            308
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            310,
            326
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_hiring_plan",
          "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            328,
            346
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            348,
            355
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_report",
          "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            357,
            364
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_technical",
          "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
          "line_range": [
            367,
            379
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context_full",
          "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
          "line_range": [
            381,
            384
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace_override",
          "docstring": "Emergency workspace overrides.",
          "line_range": [
            387,
            396
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_capabilities",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
          "line_range": [
            399,
            422
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_boss_status",
          "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
          "line_range": [
            424,
            440
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
          "line_range": [
            442,
            487
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BossCLI",
          "docstring": "Boss CLI - \u043f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f.\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u0444\u0443\u043d\u043a\u0446\u0438\u0438.",
          "line_range": [
            36,
            487
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
              "line_range": [
                42,
                101
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "run_interactive",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
              "line_range": [
                103,
                126
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                128,
                147
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "cmd_ai_status",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.",
              "line_range": [
                150,
                157
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_audit",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.",
              "line_range": [
                159,
                166
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_context",
              "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.",
              "line_range": [
                168,
                175
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_queue",
              "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.",
              "line_range": [
                177,
                184
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_summary",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.",
              "line_range": [
                186,
                193
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_roadmap",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
              "line_range": [
                196,
                221
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_financial_plan",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.",
              "line_range": [
                223,
                256
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
              "line_range": [
                258,
                273
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                275,
                282
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_summary",
              "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
              "line_range": [
                284,
                291
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_strategy",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                294,
                308
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                310,
                326
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_hiring_plan",
              "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                328,
                346
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                348,
                355
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_report",
              "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                357,
                364
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_technical",
              "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
              "line_range": [
                367,
                379
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context_full",
              "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
              "line_range": [
                381,
                384
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace_override",
              "docstring": "Emergency workspace overrides.",
              "line_range": [
                387,
                396
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_capabilities",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
              "line_range": [
                399,
                422
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_boss_status",
              "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
              "line_range": [
                424,
                440
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
              "line_range": [
                442,
                487
              ],
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "str",
          "CLIConfig",
          "CommandProcessor",
          "AISelfAwarenessCLIIntegration",
          "TeamManagementSystem",
          "Path",
          "BusinessPlanningManager",
          "CLIUtils"
        ],
        "run_interactive": [
          "input",
          "print",
          "self.process_command",
          "user_input.lower"
        ],
        "process_command": [
          "len",
          "print",
          "cmd.startswith",
          "command_line.split"
        ],
        "cmd_ai_status": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_audit": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_context": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_queue": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_business_roadmap": [
          "print",
          "json.dumps"
        ],
        "cmd_financial_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_strategic_decision": [
          "print",
          "json.dumps"
        ],
        "cmd_business_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_business_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_team_strategy": [
          "print",
          "json.dumps"
        ],
        "cmd_team_evaluation": [
          "print",
          "json.dumps"
        ],
        "cmd_hiring_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_team_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_team_report": [
          "print",
          "json.dumps"
        ],
        "cmd_technical": [
          "print"
        ],
        "cmd_context_full": [
          "print"
        ],
        "cmd_workspace_override": [
          "print"
        ],
        "cmd_capabilities": [
          "print",
          "json.dumps",
          "bool"
        ],
        "cmd_boss_status": [
          "print",
          "json.dumps"
        ],
        "cmd_help": [
          "print"
        ],
        "main": [
          "argparse.ArgumentParser",
          "BossCLI",
          "boss_cli.run_interactive",
          "parser.parse_args",
          "boss_cli.process_command",
          "parser.add_argument"
        ]
      },
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "Any",
        "BusinessPlanningManager",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "Dict",
        "Optional",
        "Path",
        "TeamManagementSystem",
        "argparse",
        "business_planning",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "os",
        "pathlib",
        "sys",
        "team_management",
        "typing"
      ],
      "hash": null,
      "artifact_id": "4e39af28-cd89-499b-81ba-360989dace2d"
    },
    {
      "module_id": "temp_boss_missing.scripts.__init__",
      "path": "temp_boss_missing/scripts/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "b5fca801-9d4a-4fe8-b7dd-e89f875ea249"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": [
            6,
            8
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": [
            11,
            13
          ],
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "ae13ee4f-3748-44ce-85c3-cb479a0136cc"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": [
            6,
            9
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": [
            15,
            17
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": [
            12,
            17
          ],
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": [
                15,
                17
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "print",
          "utils.helper"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": null,
      "artifact_id": "308d4733-ccf9-427f-ae63-057f6dba36e5"
    },
    {
      "module_id": "integrations.telegram_bot.mp002_progress_bot",
      "path": "integrations/telegram_bot/mp002_progress_bot.py",
      "category": "core",
      "module_doc": "MP-002A Progress Bot - Telegram \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Smart Wrapper \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\n\u042d\u0442\u0430\u043f\u043d\u0430\u044f \u043e\u0442\u0447\u0435\u0442\u043d\u043e\u0441\u0442\u044c, \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430, \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435",
      "functions": [
        {
          "name": "start_mp002_bot",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a MP-002A \u0431\u043e\u0442\u0430",
          "line_range": [
            431,
            452
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            23,
            82
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "init_progress_tracking",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            84,
            109
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_progress",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            111,
            118
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_progress",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            120,
            123
          ],
          "parameters": [
            "self",
            "progress"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
          "line_range": [
            125,
            139
          ],
          "parameters": [
            "self",
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "report_phase_start",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435 \u0444\u0430\u0437\u044b",
          "line_range": [
            141,
            172
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id"
          ],
          "decorators": []
        },
        {
          "name": "report_task_completion",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            174,
            207
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id",
            "task_description",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "request_phase_approval",
          "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441 \u043e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0430\u0437\u044b",
          "line_range": [
            209,
            232
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id"
          ],
          "decorators": []
        },
        {
          "name": "report_issue",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0435",
          "line_range": [
            234,
            264
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id",
            "issue_description"
          ],
          "decorators": []
        },
        {
          "name": "get_overall_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            266,
            307
          ],
          "parameters": [
            "self",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            309,
            326
          ],
          "parameters": [
            "self",
            "update"
          ],
          "decorators": []
        },
        {
          "name": "handle_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            328,
            349
          ],
          "parameters": [
            "self",
            "chat_id",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "send_welcome",
          "docstring": "\u041f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
          "line_range": [
            351,
            367
          ],
          "parameters": [
            "self",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "approve_phase",
          "docstring": "\u041e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u0435 \u0444\u0430\u0437\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c",
          "line_range": [
            369,
            413
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id"
          ],
          "decorators": []
        },
        {
          "name": "handle_feedback",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043a\u0430\u043a feedback",
          "line_range": [
            415,
            427
          ],
          "parameters": [
            "self",
            "chat_id",
            "text"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "MP002ProgressBot",
          "docstring": "Telegram \u0431\u043e\u0442 \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 MP-002A Smart Wrapper",
          "line_range": [
            18,
            427
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                23,
                82
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "init_progress_tracking",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                84,
                109
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_progress",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                111,
                118
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_progress",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                120,
                123
              ],
              "parameters": [
                "self",
                "progress"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
              "line_range": [
                125,
                139
              ],
              "parameters": [
                "self",
                "chat_id",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "report_phase_start",
              "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435 \u0444\u0430\u0437\u044b",
              "line_range": [
                141,
                172
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id"
              ]
            },
            {
              "name": "report_task_completion",
              "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                174,
                207
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id",
                "task_description",
                "details"
              ]
            },
            {
              "name": "request_phase_approval",
              "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441 \u043e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0430\u0437\u044b",
              "line_range": [
                209,
                232
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id"
              ]
            },
            {
              "name": "report_issue",
              "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0435",
              "line_range": [
                234,
                264
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id",
                "issue_description"
              ]
            },
            {
              "name": "get_overall_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                266,
                307
              ],
              "parameters": [
                "self",
                "chat_id"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                309,
                326
              ],
              "parameters": [
                "self",
                "update"
              ]
            },
            {
              "name": "handle_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                328,
                349
              ],
              "parameters": [
                "self",
                "chat_id",
                "command"
              ]
            },
            {
              "name": "send_welcome",
              "docstring": "\u041f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
              "line_range": [
                351,
                367
              ],
              "parameters": [
                "self",
                "chat_id"
              ]
            },
            {
              "name": "approve_phase",
              "docstring": "\u041e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u0435 \u0444\u0430\u0437\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c",
              "line_range": [
                369,
                413
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id"
              ]
            },
            {
              "name": "handle_feedback",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043a\u0430\u043a feedback",
              "line_range": [
                415,
                427
              ],
              "parameters": [
                "self",
                "chat_id",
                "text"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self.init_progress_tracking"
        ],
        "init_progress_tracking": [
          "datetime.now",
          "open",
          "json.dump"
        ],
        "load_progress": [
          "self.init_progress_tracking",
          "open",
          "json.load",
          "self.load_progress"
        ],
        "save_progress": [
          "open",
          "json.dump"
        ],
        "send_message": [
          "client.post",
          "print",
          "response.json",
          "str",
          "httpx.AsyncClient"
        ],
        "report_phase_start": [
          "phase_id.upper",
          "enumerate",
          "self.send_message",
          "self.save_progress",
          "datetime.now",
          "self.load_progress"
        ],
        "report_task_completion": [
          "len",
          "self.request_phase_approval",
          "self.send_message",
          "self.save_progress",
          "datetime.now",
          "self.load_progress"
        ],
        "request_phase_approval": [
          "self.send_message",
          "phase_id.upper",
          "enumerate"
        ],
        "report_issue": [
          "self.save_progress",
          "self.send_message",
          "datetime.now",
          "self.load_progress"
        ],
        "get_overall_status": [
          "phase_data.get",
          "len",
          "progress.get",
          "self.send_message",
          "self.load_progress"
        ],
        "handle_message": [
          "message.get",
          "text.startswith",
          "self.handle_feedback",
          "self.handle_command"
        ],
        "handle_command": [
          "self.report_user_issues",
          "len",
          "self.get_overall_status",
          "self.send_message",
          "self.show_help",
          "self.continue_work",
          "self.approve_phase",
          "self.send_welcome",
          "command.split",
          "self.show_phase_details"
        ],
        "send_welcome": [
          "self.send_message"
        ],
        "approve_phase": [
          "len",
          "self.report_phase_start",
          "phase_id.upper",
          "self.send_message",
          "phases_list.index",
          "self.save_progress",
          "datetime.now",
          "list",
          "self.load_progress"
        ],
        "handle_feedback": [
          "progress.get",
          "self.send_message",
          "self.save_progress",
          "datetime.now",
          "self.load_progress"
        ],
        "start_mp002_bot": [
          "os.getenv",
          "print",
          "MP002ProgressBot"
        ]
      },
      "dependencies": [
        "Path",
        "asyncio",
        "datetime",
        "httpx",
        "json",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "af73e2b7-2dd9-41fd-bbf9-9fb34a4488af"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            18,
            22
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            24,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            44,
            64
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            66,
            79
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            81,
            94
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            96,
            98
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            17,
            98
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                18,
                22
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                24,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                44,
                64
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                66,
                79
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                81,
                94
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                96,
                98
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "sqlite3.connect",
          "self.create_tables"
        ],
        "create_tables": [],
        "cache_json": [
          "json_file.exists",
          "logging.error",
          "f.read",
          "str",
          "open",
          "logging.info",
          "content.encode",
          "Path",
          "json.dumps",
          "hashlib.sha256"
        ],
        "get_metadata": [
          "cursor.fetchone",
          "json.loads"
        ],
        "get_full_json": [
          "cursor.fetchone",
          "logging.error",
          "open",
          "json.load"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b97cef5b-fabd-4e46-86dd-16e8d99e159e"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            17,
            29
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            31,
            72
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "filtered.append",
          "isinstance",
          "item.get",
          "data.get"
        ],
        "select_json": [
          "ijson.parse",
          "f.seek",
          "json_file.exists",
          "path.append",
          "logging.error",
          "open",
          "current_item.get",
          "prefix.startswith",
          "filtered.append",
          "json.load",
          "Path",
          "filter_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "0152443d-ca49-42f6-9813-8f79e9fd1e6b"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": [
            17,
            35
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            37,
            74
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "any",
          "struct.get",
          "module.get",
          "prompt.lower",
          "filter_json"
        ],
        "attach_to_llm_request": [
          "filter_struct",
          "cache.cache_json",
          "logging.error",
          "cache.get_full_json",
          "select_json",
          "filter_json",
          "context_file.exists",
          "prompt.lower",
          "logging.info",
          "Path",
          "json.dumps",
          "cache.get_metadata"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "53850f3a-7542-4550-9f43-8bd87648031c"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            26,
            36
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            38,
            47
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            49,
            58
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": [
            60,
            74
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            76,
            83
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            85,
            195
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            197,
            237
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            239,
            260
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            262,
            264
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            266,
            268
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            270,
            272
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            274,
            334
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_path.exists",
          "logging.error",
          "gitignore_path.open",
          "line.startswith",
          "line.strip",
          "Path"
        ],
        "load_config": [
          "config_path\u30aa\u30fc\u30d7\u30f3",
          "config_path.exists",
          "logging.error",
          "toml.load",
          "Path"
        ],
        "read_file_content": [
          "logging.error",
          "f.read",
          "path.is_file",
          "path.open",
          "Path"
        ],
        "write_to_file": [
          "base_path.mkdir",
          "str",
          "f.write",
          "file_path.open",
          "logging.error",
          "logging.warning",
          "file_path.exists",
          "logging.info",
          "Path"
        ],
        "parse_files_from_response": [
          "files.append",
          "re.findall",
          "filename.strip",
          "content.strip"
        ],
        "interactive": [
          "LLMClient",
          "logging.warning",
          "user_input.lower",
          "Path",
          "os.listdir",
          "read_file_content",
          "parse",
          "files_to_write.append",
          "logging.error",
          "re.search",
          "json.dumps",
          "write_to_file",
          "attach_to_llm_request",
          "write_match.group",
          "get_folder_structure",
          "JSONCache",
          "input",
          "print",
          "sorted",
          "cache.close",
          "write_dir.startswith",
          "parse_files_from_response",
          "load_gitignore",
          "scan_match.group",
          "client.query"
        ],
        "parse": [
          "JSONCache",
          "json.dump",
          "load_config",
          "cache.cache_json",
          "cache.close",
          "logging.error",
          "logging.warning",
          "generate_json",
          "load_gitignore",
          "config.get",
          "logging.info",
          "Path"
        ],
        "query": [
          "JSONCache",
          "json.dump",
          "cache.close",
          "LLMClient",
          "logging.error",
          "logging.info",
          "Path",
          "client.query"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "dogfood",
          "argparse.ArgumentParser",
          "subparsers.add_parser",
          "parse",
          "review",
          "parse_parser.add_argument",
          "interactive_parser.add_argument",
          "asyncio.run",
          "dogfood_parser.add_argument",
          "context",
          "query_parser.add_argument",
          "context_parser.add_argument",
          "review_parser.add_argument",
          "interactive",
          "query",
          "parser.parse_args",
          "parser.add_subparsers"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "de2fe1d8-1000-4c4d-a559-f94e307f3ec8"
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "module_doc": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct.\nPart of the comprehensive session management system.",
      "functions": [
        {
          "name": "get_current_branch",
          "docstring": "Get current git branch.",
          "line_range": [
            24,
            31
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "save_json_file",
          "docstring": "Save JSON file with error handling.",
          "line_range": [
            42,
            51
          ],
          "parameters": [
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_current_timestamp",
          "docstring": "Get current timestamp in ISO format.",
          "line_range": [
            53,
            55
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log_event",
          "docstring": "Log an event to worklog.json.",
          "line_range": [
            57,
            88
          ],
          "parameters": [
            "event_message",
            "author"
          ],
          "decorators": []
        },
        {
          "name": "switch_session",
          "docstring": "Switch to a different session or create new one.",
          "line_range": [
            90,
            141
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "list_sessions",
          "docstring": "List all available sessions.",
          "line_range": [
            143,
            166
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_session",
          "docstring": "Show current session details.",
          "line_range": [
            168,
            183
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_worklog",
          "docstring": "Show recent worklog entries.",
          "line_range": [
            185,
            203
          ],
          "parameters": [
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main CLI interface.",
          "line_range": [
            205,
            244
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            16,
            22
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "get_current_branch": [
          "subprocess.run"
        ],
        "load_json_file": [
          "print",
          "open",
          "json.load"
        ],
        "save_json_file": [
          "print",
          "open",
          "json.dump",
          "os.makedirs"
        ],
        "get_current_timestamp": [
          "datetime.now"
        ],
        "log_event": [
          "load_json_file",
          "print",
          "current_session.get",
          "get_current_branch",
          "save_json_file",
          "get_current_timestamp"
        ],
        "switch_session": [
          "load_json_file",
          "print",
          "log_event",
          "get_current_branch",
          "save_json_file",
          "get_current_timestamp"
        ],
        "list_sessions": [
          "load_json_file",
          "print",
          "current_session.get"
        ],
        "show_current_session": [
          "load_json_file",
          "print",
          "current_session.get"
        ],
        "show_worklog": [
          "load_json_file",
          "print",
          "reversed",
          "len"
        ],
        "main": [
          "len",
          "print",
          "list_sessions",
          "log_event",
          "switch_session",
          "show_worklog",
          "show_current_session",
          "int"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "34b79e51-13ed-40a5-aae8-4ec66414044a"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.",
      "functions": [
        {
          "name": "detect_project_changes",
          "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.",
          "line_range": [
            44,
            81
          ],
          "parameters": [
            "root_dir",
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_struct_json",
          "docstring": "Create a backup of existing struct.json.",
          "line_range": [
            84,
            97
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_struct_json",
          "docstring": "Validate generated struct.json for basic structure.",
          "line_range": [
            100,
            128
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "update_struct_json",
          "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful",
          "line_range": [
            131,
            225
          ],
          "parameters": [
            "root_dir",
            "struct_path",
            "force",
            "config_override"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for auto-update script.",
          "line_range": [
            228,
            286
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "",
          "line_range": [
            24,
            25
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            26,
            27
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_config": [],
        "load_gitignore": [],
        "generate_json": [
          "ImportError"
        ],
        "detect_project_changes": [
          "logger.warning",
          "logger.info",
          "file_path.stat",
          "Path",
          "subprocess.run"
        ],
        "backup_struct_json": [
          "subprocess.run",
          "logger.info",
          "Path",
          "datetime.now",
          "logger.error"
        ],
        "validate_struct_json": [
          "open",
          "logger.info",
          "json.load",
          "logger.error"
        ],
        "update_struct_json": [
          "detect_project_changes",
          "cli_config.get",
          "load_config",
          "json.dump",
          "validate_struct_json",
          "subprocess.run",
          "logger.info",
          "backup_struct_json",
          "load_gitignore",
          "generate_json",
          "config.get",
          "open",
          "os.getcwd",
          "config.update",
          "logger.error"
        ],
        "main": [
          "detect_project_changes",
          "argparse.ArgumentParser",
          "os.getcwd",
          "print",
          "sys.exit",
          "update_struct_json",
          "parser.add_argument",
          "parser.parse_args",
          "logging.getLogger"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "generate_json",
        "json",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "2b79c3b7-1a42-413f-9a43-ce2f3c6c8287"
    },
    {
      "module_id": "scripts.fix_hardcoded_usernames",
      "path": "scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "module_doc": "Fix Hardcoded Usernames Script\nAutomatically detects and replaces hardcoded usernames with dynamic values from .env or git config.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            234,
            288
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            22,
            24
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_detect_user_info",
          "docstring": "Detect user info from .env, git config, or environment.",
          "line_range": [
            26,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_env",
          "docstring": "Load user info from .env file.",
          "line_range": [
            64,
            86
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_git",
          "docstring": "Load user info from git config.",
          "line_range": [
            88,
            120
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_environment",
          "docstring": "Load user info from environment variables.",
          "line_range": [
            122,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_user_info",
          "docstring": "Get detected user information.",
          "line_range": [
            130,
            132
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            138,
            148
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_files",
          "docstring": "Scan for files containing hardcoded usernames.",
          "line_range": [
            150,
            172
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "fix_file",
          "docstring": "Fix hardcoded usernames in a single file.",
          "line_range": [
            174,
            200
          ],
          "parameters": [
            "self",
            "file_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "fix_all_files",
          "docstring": "Fix hardcoded usernames in all project files.",
          "line_range": [
            202,
            214
          ],
          "parameters": [
            "self",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "generate_env_template",
          "docstring": "Generate .env template with required variables.",
          "line_range": [
            216,
            231
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "UserInfoDetector",
          "docstring": "Detect user information from various sources.",
          "line_range": [
            19,
            132
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                22,
                24
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_detect_user_info",
              "docstring": "Detect user info from .env, git config, or environment.",
              "line_range": [
                26,
                62
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_env",
              "docstring": "Load user info from .env file.",
              "line_range": [
                64,
                86
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_git",
              "docstring": "Load user info from git config.",
              "line_range": [
                88,
                120
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_environment",
              "docstring": "Load user info from environment variables.",
              "line_range": [
                122,
                128
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_user_info",
              "docstring": "Get detected user information.",
              "line_range": [
                130,
                132
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "HardcodeFixer",
          "docstring": "Fix hardcoded usernames in project files.",
          "line_range": [
            135,
            231
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                138,
                148
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_files",
              "docstring": "Scan for files containing hardcoded usernames.",
              "line_range": [
                150,
                172
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "fix_file",
              "docstring": "Fix hardcoded usernames in a single file.",
              "line_range": [
                174,
                200
              ],
              "parameters": [
                "self",
                "file_path",
                "dry_run"
              ]
            },
            {
              "name": "fix_all_files",
              "docstring": "Fix hardcoded usernames in all project files.",
              "line_range": [
                202,
                214
              ],
              "parameters": [
                "self",
                "dry_run"
              ]
            },
            {
              "name": "generate_env_template",
              "docstring": "Generate .env template with required variables.",
              "line_range": [
                216,
                231
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "UserInfoDetector"
        ],
        "_detect_user_info": [
          "env_info.items",
          "user_info.get",
          "self._load_from_git",
          "self._load_from_environment",
          "logger.info",
          "self._load_from_env",
          "user_info.update",
          "env_vars.items"
        ],
        "_load_from_env": [
          "line.split",
          "env_file.exists",
          "key.strip",
          "line.startswith",
          "value.strip",
          "open",
          "env_vars.get",
          "line.strip",
          "logger.error"
        ],
        "_load_from_git": [
          "logger.error",
          "re.search",
          "match.group",
          "subprocess.run"
        ],
        "_load_from_environment": [],
        "get_user_info": [],
        "scan_files": [
          "files_with_hardcode.append",
          "any",
          "logger.warning",
          "str",
          "f.read",
          "open",
          "content.count"
        ],
        "fix_file": [
          "content.replace",
          "f.write",
          "f.read",
          "logger.info",
          "open",
          "content.count",
          "logger.error"
        ],
        "fix_all_files": [
          "len",
          "self.scan_files",
          "str",
          "logger.info",
          "self.fix_file"
        ],
        "generate_env_template": [],
        "main": [
          "len",
          "print",
          "argparse.ArgumentParser",
          "replacements.items",
          "Path",
          "f.write",
          "fixer.fix_all_files",
          "logger.info",
          "fixer.scan_files",
          "fixer.generate_env_template",
          "open",
          "HardcodeFixer",
          "parser.add_argument",
          "results.items",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "typing"
      ],
      "hash": null,
      "artifact_id": "5b65aa6a-2fa9-4561-9671-4926d2a6be68"
    },
    {
      "module_id": "scripts.create_github_issues",
      "path": "scripts/create_github_issues.py",
      "category": "core",
      "module_doc": "GitHub Issues Creator for AI-Dogfooding Project\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GitHub issues \u0438\u0437 \u043d\u0430\u0448\u0438\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447",
      "functions": [
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            16,
            28
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_epics_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438\u0437 JSON",
          "line_range": [
            205,
            213
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f issues",
          "line_range": [
            215,
            252
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "token",
            "use_cli"
          ],
          "decorators": []
        },
        {
          "name": "create_epic_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            45,
            83
          ],
          "parameters": [
            "self",
            "epic_data"
          ],
          "decorators": []
        },
        {
          "name": "create_task_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            85,
            128
          ],
          "parameters": [
            "self",
            "task_data",
            "epic_number"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_api",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
          "line_range": [
            130,
            150
          ],
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_cli",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
          "line_range": [
            152,
            186
          ],
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_format_criteria",
          "docstring": "",
          "line_range": [
            188,
            189
          ],
          "parameters": [
            "self",
            "criteria"
          ],
          "decorators": []
        },
        {
          "name": "_format_tasks",
          "docstring": "",
          "line_range": [
            191,
            200
          ],
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "_format_metrics",
          "docstring": "",
          "line_range": [
            202,
            203
          ],
          "parameters": [
            "self",
            "metrics"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubIssuesCreator",
          "docstring": "",
          "line_range": [
            33,
            203
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                34,
                43
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "token",
                "use_cli"
              ]
            },
            {
              "name": "create_epic_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
              "line_range": [
                45,
                83
              ],
              "parameters": [
                "self",
                "epic_data"
              ]
            },
            {
              "name": "create_task_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                85,
                128
              ],
              "parameters": [
                "self",
                "task_data",
                "epic_number"
              ]
            },
            {
              "name": "_create_issue_via_api",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
              "line_range": [
                130,
                150
              ],
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_create_issue_via_cli",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
              "line_range": [
                152,
                186
              ],
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_format_criteria",
              "docstring": "",
              "line_range": [
                188,
                189
              ],
              "parameters": [
                "self",
                "criteria"
              ]
            },
            {
              "name": "_format_tasks",
              "docstring": "",
              "line_range": [
                191,
                200
              ],
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "_format_metrics",
              "docstring": "",
              "line_range": [
                202,
                203
              ],
              "parameters": [
                "self",
                "metrics"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "load_env_file": [
          "print",
          "line.split",
          "env_file.exists",
          "key.strip",
          "line.startswith",
          "value.strip",
          "open",
          "line.strip",
          "Path"
        ],
        "__init__": [],
        "create_epic_issue": [
          "self._format_metrics",
          "self._format_criteria",
          "self._format_tasks",
          "epic_data.get",
          "self._create_issue_via_cli",
          "self._create_issue_via_api"
        ],
        "create_task_issue": [
          "self._format_criteria",
          "self._create_issue_via_api",
          "self._create_issue_via_cli",
          "task_data.get"
        ],
        "_create_issue_via_api": [
          "requests.post",
          "print",
          "response.json"
        ],
        "_create_issue_via_cli": [
          "print",
          "f.write",
          "os.getpid",
          "subprocess.run",
          "issue_url.split",
          "int",
          "open",
          "os.unlink"
        ],
        "_format_criteria": [],
        "_format_tasks": [],
        "_format_metrics": [
          "metrics.items"
        ],
        "load_epics_data": [
          "print",
          "open",
          "epics_file.exists",
          "json.load",
          "Path"
        ],
        "main": [
          "len",
          "epics_data.get",
          "print",
          "os.getenv",
          "load_epics_data",
          "epic_data.get",
          "creator.create_epic_issue",
          "creator.create_task_issue",
          "GitHubIssuesCreator"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b248b2a7-e565-4e14-af84-8a99f189c7fa"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            183,
            266
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            23,
            26
          ],
          "parameters": [
            "self",
            "config_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "check_github_cli",
          "docstring": "Check if GitHub CLI is installed and authenticated",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "list_projects",
          "docstring": "List available GitHub Projects (via gh-projects extension)",
          "line_range": [
            38,
            55
          ],
          "parameters": [
            "self",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "create_project_item",
          "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "project_number",
            "title",
            "body",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_tasks_to_project",
          "docstring": "Export tasks to GitHub Project",
          "line_range": [
            84,
            123
          ],
          "parameters": [
            "self",
            "tasks",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_ideas_to_project",
          "docstring": "Export ideas to GitHub Project",
          "line_range": [
            125,
            164
          ],
          "parameters": [
            "self",
            "ideas",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "filter_data",
          "docstring": "Filter data by status and priority",
          "line_range": [
            166,
            180
          ],
          "parameters": [
            "self",
            "data",
            "status_filter",
            "priority_filter"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExportScript",
          "docstring": "Extended exporter with command-line interface and GitHub CLI integration",
          "line_range": [
            20,
            180
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                23,
                26
              ],
              "parameters": [
                "self",
                "config_path",
                "dry_run"
              ]
            },
            {
              "name": "check_github_cli",
              "docstring": "Check if GitHub CLI is installed and authenticated",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "list_projects",
              "docstring": "List available GitHub Projects (via gh-projects extension)",
              "line_range": [
                38,
                55
              ],
              "parameters": [
                "self",
                "owner",
                "repo"
              ]
            },
            {
              "name": "create_project_item",
              "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "project_number",
                "title",
                "body",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_tasks_to_project",
              "docstring": "Export tasks to GitHub Project",
              "line_range": [
                84,
                123
              ],
              "parameters": [
                "self",
                "tasks",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_ideas_to_project",
              "docstring": "Export ideas to GitHub Project",
              "line_range": [
                125,
                164
              ],
              "parameters": [
                "self",
                "ideas",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "filter_data",
              "docstring": "Filter data by status and priority",
              "line_range": [
                166,
                180
              ],
              "parameters": [
                "self",
                "data",
                "status_filter",
                "priority_filter"
              ]
            }
          ],
          "bases": [
            "GitHubProjectsExporter"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "super"
        ],
        "check_github_cli": [
          "print",
          "self._run_gh_command"
        ],
        "list_projects": [
          "print",
          "isinstance",
          "json.loads",
          "self._run_gh_command"
        ],
        "create_project_item": [
          "str",
          "print",
          "output.strip",
          "self._run_gh_command"
        ],
        "export_tasks_to_project": [
          "len",
          "print",
          "self.create_project_item",
          "self.format_task_for_github",
          "task.get"
        ],
        "export_ideas_to_project": [
          "len",
          "print",
          "self.create_project_item",
          "self.format_idea_for_github",
          "idea.get"
        ],
        "filter_data": [
          "item.get"
        ],
        "main": [
          "exporter.load_official_data",
          "print",
          "argparse.ArgumentParser",
          "sys.exit",
          "exporter.export_tasks_to_project",
          "exporter.export_ideas_to_project",
          "exporter.check_github_cli",
          "exporter._save_mapping",
          "GitHubProjectsExportScript",
          "exporter.filter_data",
          "parser.add_argument",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "GitHubProjectsExporter",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "datetime",
        "json",
        "llmstruct.gh_view",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9c8cb104-ef4f-442b-a7db-8ede98ee6d3f"
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "6352bb40-e384-4cbc-ab66-47702fbcf1e0"
    },
    {
      "module_id": "scripts.process_926_items",
      "path": "scripts/process_926_items.py",
      "category": "core",
      "module_doc": "926 Items Processing Script - Updated Implementation\nProcesses items according to GitHub roadmap + personal management vision\nImplements all decisions from 926_items_processing_execution_plan.md",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            51
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_comprehensive_index",
          "docstring": "Load the 926 items from comprehensive index",
          "line_range": [
            53,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "calculate_confidence_score",
          "docstring": "Calculate confidence score for categorization decision",
          "line_range": [
            113,
            146
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "check_t_pot_related",
          "docstring": "Enhanced T-Pot detection",
          "line_range": [
            148,
            155
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_team_implementable",
          "docstring": "Check if team can implement without architecture review",
          "line_range": [
            157,
            176
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_personal_vs_team_vs_business",
          "docstring": "Classify as personal/team/business",
          "line_range": [
            178,
            214
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "identify_epic_candidates",
          "docstring": "Identify items that should be grouped into epics",
          "line_range": [
            216,
            233
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "extract_epic_name",
          "docstring": "Extract epic name from item",
          "line_range": [
            235,
            241
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "categorize_item",
          "docstring": "Main categorization logic with confidence scoring",
          "line_range": [
            243,
            278
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "find_duplicates",
          "docstring": "Enhanced duplicate detection with T-Pot special handling",
          "line_range": [
            280,
            319
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "calculate_similarity",
          "docstring": "Enhanced similarity calculation",
          "line_range": [
            321,
            342
          ],
          "parameters": [
            "self",
            "title1",
            "title2"
          ],
          "decorators": []
        },
        {
          "name": "suggest_merge_strategy",
          "docstring": "Enhanced merge strategy with T-Pot consideration",
          "line_range": [
            344,
            359
          ],
          "parameters": [
            "self",
            "item1",
            "item2"
          ],
          "decorators": []
        },
        {
          "name": "process_items",
          "docstring": "Main processing workflow implementing execution plan",
          "line_range": [
            361,
            468
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "save_results",
          "docstring": "Save categorized results with enhanced metadata",
          "line_range": [
            470,
            546
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_category_description",
          "docstring": "Category descriptions per execution plan",
          "line_range": [
            548,
            562
          ],
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Main execution workflow per execution plan",
          "line_range": [
            564,
            606
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskProcessor926",
          "docstring": "",
          "line_range": [
            15,
            606
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                51
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_comprehensive_index",
              "docstring": "Load the 926 items from comprehensive index",
              "line_range": [
                53,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "calculate_confidence_score",
              "docstring": "Calculate confidence score for categorization decision",
              "line_range": [
                113,
                146
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "check_t_pot_related",
              "docstring": "Enhanced T-Pot detection",
              "line_range": [
                148,
                155
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_team_implementable",
              "docstring": "Check if team can implement without architecture review",
              "line_range": [
                157,
                176
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_personal_vs_team_vs_business",
              "docstring": "Classify as personal/team/business",
              "line_range": [
                178,
                214
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "identify_epic_candidates",
              "docstring": "Identify items that should be grouped into epics",
              "line_range": [
                216,
                233
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "extract_epic_name",
              "docstring": "Extract epic name from item",
              "line_range": [
                235,
                241
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "categorize_item",
              "docstring": "Main categorization logic with confidence scoring",
              "line_range": [
                243,
                278
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "find_duplicates",
              "docstring": "Enhanced duplicate detection with T-Pot special handling",
              "line_range": [
                280,
                319
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "calculate_similarity",
              "docstring": "Enhanced similarity calculation",
              "line_range": [
                321,
                342
              ],
              "parameters": [
                "self",
                "title1",
                "title2"
              ]
            },
            {
              "name": "suggest_merge_strategy",
              "docstring": "Enhanced merge strategy with T-Pot consideration",
              "line_range": [
                344,
                359
              ],
              "parameters": [
                "self",
                "item1",
                "item2"
              ]
            },
            {
              "name": "process_items",
              "docstring": "Main processing workflow implementing execution plan",
              "line_range": [
                361,
                468
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "save_results",
              "docstring": "Save categorized results with enhanced metadata",
              "line_range": [
                470,
                546
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_category_description",
              "docstring": "Category descriptions per execution plan",
              "line_range": [
                548,
                562
              ],
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "run",
              "docstring": "Main execution workflow per execution plan",
              "line_range": [
                564,
                606
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "datetime.now"
        ],
        "load_comprehensive_index": [
          "value.items",
          "len",
          "print",
          "hash",
          "item_content.lower",
          "data.items",
          "any",
          "items.append",
          "str",
          "index_path.exists",
          "set",
          "open",
          "isinstance",
          "json.load",
          "items.extend",
          "item.get",
          "unique_items.append",
          "seen_items.add"
        ],
        "calculate_confidence_score": [
          "self.check_t_pot_related",
          "str",
          "item.get",
          "min",
          "sum"
        ],
        "check_t_pot_related": [
          "str",
          "any"
        ],
        "check_team_implementable": [
          "str",
          "sum"
        ],
        "check_personal_vs_team_vs_business": [
          "max",
          "str",
          "item.get",
          "sum"
        ],
        "identify_epic_candidates": [
          "len",
          "self.extract_epic_name",
          "any",
          "str",
          "item.get",
          "epic_groups.items"
        ],
        "extract_epic_name": [
          "item.get",
          "title.split"
        ],
        "categorize_item": [
          "self.check_team_implementable",
          "any",
          "self.check_t_pot_related",
          "str",
          "self.check_personal_vs_team_vs_business",
          "self.calculate_confidence_score"
        ],
        "find_duplicates": [
          "duplicates.append",
          "self.calculate_similarity",
          "self.check_t_pot_related",
          "seen_items.items",
          "item.get",
          "self.suggest_merge_strategy"
        ],
        "calculate_similarity": [
          "len",
          "title2.split",
          "words1.intersection",
          "set",
          "min",
          "title1.split",
          "words1.union"
        ],
        "suggest_merge_strategy": [
          "len",
          "self.check_t_pot_related",
          "str",
          "item1.get",
          "item2.get"
        ],
        "process_items": [
          "len",
          "print",
          "self.find_duplicates",
          "category.startswith",
          "self.check_team_implementable",
          "any",
          "self.check_t_pot_related",
          "self.extract_epic_name",
          "str",
          "low_confidence_items.append",
          "id",
          "processed_item.copy",
          "self.categorize_item",
          "set",
          "duplicate_item_ids.add",
          "datetime.now"
        ],
        "save_results": [
          "len",
          "print",
          "json.dump",
          "self.get_category_description",
          "item.get",
          "open",
          "datetime.now",
          "sum"
        ],
        "get_category_description": [
          "descriptions.get"
        ],
        "run": [
          "print",
          "self.load_comprehensive_index",
          "self.process_items",
          "self.save_results"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9bcfd0ce-d0d5-464c-92a9-3a28333f0a58"
    },
    {
      "module_id": "scripts.fix_github_script",
      "path": "scripts/fix_github_script.py",
      "category": "core",
      "module_doc": "Quick fix for GitHub issues creation script\n\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 JSON \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445",
      "functions": [
        {
          "name": "fix_json_loading",
          "docstring": "\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 JSON \u0434\u0430\u043d\u043d\u044b\u0445",
          "line_range": [
            11,
            42
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "fix_json_loading": [
          "content.replace",
          "print",
          "f.write",
          "f.read",
          "open",
          "Path"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "2bfdcf2c-192c-49fe-895d-4824255c8648"
    },
    {
      "module_id": "scripts.github_sync_manager",
      "path": "scripts/github_sync_manager.py",
      "category": "core",
      "module_doc": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub\nSupports: Issues, Epics (Projects), Discussions\nSafety: dry-run mode, logging, collision detection",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface",
          "line_range": [
            375,
            408
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            17,
            48
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results for idempotency",
          "line_range": [
            50,
            60
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log for future idempotency",
          "line_range": [
            62,
            65
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Safe GitHub API request with rate limiting",
          "line_range": [
            67,
            94
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_issues",
          "docstring": "Get existing GitHub issues for collision detection",
          "line_range": [
            96,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_discussions",
          "docstring": "Get existing GitHub discussions",
          "line_range": [
            114,
            118
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced (idempotency)",
          "line_range": [
            120,
            125
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "find_existing_by_title",
          "docstring": "Find existing GitHub item by title similarity",
          "line_range": [
            127,
            143
          ],
          "parameters": [
            "self",
            "title",
            "existing_items"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue",
          "docstring": "Create GitHub issue from processed item",
          "line_range": [
            145,
            182
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion",
          "docstring": "Create GitHub discussion from processed item",
          "line_range": [
            184,
            194
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic",
          "docstring": "Create GitHub epic (as Project or enhanced Issue)",
          "line_range": [
            196,
            214
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "sync_category",
          "docstring": "Sync specific category with GitHub",
          "line_range": [
            216,
            290
          ],
          "parameters": [
            "self",
            "category",
            "filename"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Pre-sync validation checks",
          "line_range": [
            292,
            322
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "Main sync execution",
          "line_range": [
            324,
            373
          ],
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubSyncManager",
          "docstring": "",
          "line_range": [
            16,
            373
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                17,
                48
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results for idempotency",
              "line_range": [
                50,
                60
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log for future idempotency",
              "line_range": [
                62,
                65
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Safe GitHub API request with rate limiting",
              "line_range": [
                67,
                94
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "get_existing_issues",
              "docstring": "Get existing GitHub issues for collision detection",
              "line_range": [
                96,
                112
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_existing_discussions",
              "docstring": "Get existing GitHub discussions",
              "line_range": [
                114,
                118
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced (idempotency)",
              "line_range": [
                120,
                125
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "find_existing_by_title",
              "docstring": "Find existing GitHub item by title similarity",
              "line_range": [
                127,
                143
              ],
              "parameters": [
                "self",
                "title",
                "existing_items"
              ]
            },
            {
              "name": "create_github_issue",
              "docstring": "Create GitHub issue from processed item",
              "line_range": [
                145,
                182
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion",
              "docstring": "Create GitHub discussion from processed item",
              "line_range": [
                184,
                194
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_epic",
              "docstring": "Create GitHub epic (as Project or enhanced Issue)",
              "line_range": [
                196,
                214
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "sync_category",
              "docstring": "Sync specific category with GitHub",
              "line_range": [
                216,
                290
              ],
              "parameters": [
                "self",
                "category",
                "filename"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Pre-sync validation checks",
              "line_range": [
                292,
                322
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "Main sync execution",
              "line_range": [
                324,
                373
              ],
              "parameters": [
                "self",
                "categories"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "os.getenv",
          "self.load_sync_log",
          "print"
        ],
        "load_sync_log": [
          "open",
          "json.load"
        ],
        "save_sync_log": [
          "open",
          "json.dump"
        ],
        "api_request": [
          "ValueError",
          "print",
          "response.json",
          "requests.get",
          "int",
          "requests.post",
          "time.sleep",
          "requests.patch",
          "method.upper",
          "response.raise_for_status"
        ],
        "get_existing_issues": [
          "len",
          "issues.extend",
          "self.api_request"
        ],
        "get_existing_discussions": [],
        "item_already_synced": [
          "item.get"
        ],
        "find_existing_by_title": [
          "len",
          "item.get",
          "title.lower"
        ],
        "create_github_issue": [
          "print",
          "self.api_request",
          "item.get",
          "labels.append",
          "processing_meta.get"
        ],
        "create_github_discussion": [
          "print",
          "item.get"
        ],
        "create_github_epic": [
          "print",
          "item.get",
          "self.api_request"
        ],
        "sync_category": [
          "self.create_github_issue",
          "print",
          "self.get_existing_issues",
          "self.get_existing_discussions",
          "self.find_existing_by_title",
          "self.item_already_synced",
          "existing.get",
          "self.create_github_discussion",
          "file_path.exists",
          "result.get",
          "open",
          "item.get",
          "json.load",
          "datetime.now",
          "data.get",
          "self.create_github_epic"
        ],
        "validate_before_sync": [
          "user_info.get",
          "print",
          "core_limit.get",
          "repo_info.get",
          "self.api_request",
          "rate_limit.get"
        ],
        "run_sync": [
          "print",
          "self.sync_category",
          "r.get",
          "results.values",
          "self.save_sync_log",
          "datetime.now",
          "sum",
          "self.validate_before_sync"
        ],
        "main": [
          "len",
          "print",
          "argparse.ArgumentParser",
          "GitHubSyncManager",
          "manager.run_sync",
          "result.get",
          "parser.add_argument",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "3bcda7e8-4e45-437d-9efa-9ded654121f1"
    },
    {
      "module_id": "scripts.create_comprehensive_index",
      "path": "scripts/create_comprehensive_index.py",
      "category": "core",
      "module_doc": "Comprehensive Project Index Creator\nScans ALL project directories for tasks, ideas, sessions, and concepts.\nProvides complete visibility into project state and unaccounted innovations.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            714,
            735
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            45,
            58
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize comprehensive extraction patterns.",
          "line_range": [
            60,
            92
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "scan_all_directories",
          "docstring": "Scan all configured directories comprehensively.",
          "line_range": [
            94,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_scan_directory",
          "docstring": "Scan a specific directory according to its configuration.",
          "line_range": [
            113,
            127
          ],
          "parameters": [
            "self",
            "directory",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_scan_root_files",
          "docstring": "Scan root-level files.",
          "line_range": [
            129,
            133
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_should_scan_file",
          "docstring": "Check if file should be scanned based on extension.",
          "line_range": [
            135,
            137
          ],
          "parameters": [
            "self",
            "file_path",
            "allowed_types"
          ],
          "decorators": []
        },
        {
          "name": "_scan_file",
          "docstring": "Scan individual file for project items.",
          "line_range": [
            139,
            152
          ],
          "parameters": [
            "self",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_text",
          "docstring": "Extract items from text/markdown files.",
          "line_range": [
            154,
            206
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_json",
          "docstring": "Extract items from JSON files.",
          "line_range": [
            208,
            225
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_item_from_match",
          "docstring": "Create ProjectItem from regex match.",
          "line_range": [
            227,
            249
          ],
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_checkbox_item",
          "docstring": "Create ProjectItem from checkbox match.",
          "line_range": [
            251,
            274
          ],
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_simple_item",
          "docstring": "Create simple ProjectItem.",
          "line_range": [
            276,
            297
          ],
          "parameters": [
            "self",
            "title",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_status",
          "docstring": "Detect item status from surrounding content.",
          "line_range": [
            299,
            308
          ],
          "parameters": [
            "self",
            "content",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_priority",
          "docstring": "Detect item priority from surrounding content.",
          "line_range": [
            310,
            319
          ],
          "parameters": [
            "self",
            "content",
            "position",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_assess_strategic_value",
          "docstring": "Assess strategic value of item.",
          "line_range": [
            321,
            330
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract context around position.",
          "line_range": [
            332,
            336
          ],
          "parameters": [
            "self",
            "content",
            "position",
            "length"
          ],
          "decorators": []
        },
        {
          "name": "_detect_category",
          "docstring": "Detect item category.",
          "line_range": [
            338,
            351
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_effort",
          "docstring": "Estimate effort required.",
          "line_range": [
            353,
            362
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tags",
          "docstring": "Extract relevant tags.",
          "line_range": [
            364,
            378
          ],
          "parameters": [
            "self",
            "title",
            "content",
            "source_dir"
          ],
          "decorators": []
        },
        {
          "name": "_is_noise_checkbox",
          "docstring": "Check if checkbox is noise (navigation, etc).",
          "line_range": [
            380,
            384
          ],
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "_parse_json_files",
          "docstring": "Parse structured JSON files for existing data.",
          "line_range": [
            386,
            402
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_process_structured_json",
          "docstring": "Process structured JSON data.",
          "line_range": [
            404,
            419
          ],
          "parameters": [
            "self",
            "data",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_add_json_item",
          "docstring": "Add item from JSON structure.",
          "line_range": [
            421,
            441
          ],
          "parameters": [
            "self",
            "item",
            "file_path",
            "item_type"
          ],
          "decorators": []
        },
        {
          "name": "_assess_json_strategic_value",
          "docstring": "Assess strategic value from JSON item.",
          "line_range": [
            443,
            450
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_extract_innovation_concepts",
          "docstring": "Extract innovation concepts from content.",
          "line_range": [
            452,
            482
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_enhance_items",
          "docstring": "Post-process items to enhance metadata and find relationships.",
          "line_range": [
            484,
            501
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_find_related_items",
          "docstring": "Find related items based on content similarity.",
          "line_range": [
            503,
            517
          ],
          "parameters": [
            "self",
            "item",
            "id_map",
            "title_map"
          ],
          "decorators": []
        },
        {
          "name": "generate_comprehensive_report",
          "docstring": "Generate comprehensive analysis report.",
          "line_range": [
            519,
            561
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_comprehensive_index",
          "docstring": "Save comprehensive index and reports.",
          "line_range": [
            563,
            582
          ],
          "parameters": [
            "self",
            "output_dir"
          ],
          "decorators": []
        },
        {
          "name": "_generate_analysis_report",
          "docstring": "Generate human-readable analysis report.",
          "line_range": [
            584,
            658
          ],
          "parameters": [
            "self",
            "report"
          ],
          "decorators": []
        },
        {
          "name": "_format_dict",
          "docstring": "Format dictionary for markdown display.",
          "line_range": [
            660,
            662
          ],
          "parameters": [
            "self",
            "d"
          ],
          "decorators": []
        },
        {
          "name": "_format_items_list",
          "docstring": "Format items list for markdown display.",
          "line_range": [
            664,
            677
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_tasks",
          "docstring": "Extract tasks from JSON tasks array.",
          "line_range": [
            679,
            684
          ],
          "parameters": [
            "self",
            "tasks_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_ideas",
          "docstring": "Extract ideas from JSON ideas array.",
          "line_range": [
            686,
            691
          ],
          "parameters": [
            "self",
            "ideas_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_sessions",
          "docstring": "Extract sessions from JSON sessions array.",
          "line_range": [
            693,
            698
          ],
          "parameters": [
            "self",
            "sessions_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_array",
          "docstring": "Extract items from JSON array.",
          "line_range": [
            700,
            711
          ],
          "parameters": [
            "self",
            "array_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ProjectItem",
          "docstring": "Unified representation of any project item (task, idea, session, concept).",
          "line_range": [
            22,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ComprehensiveIndexer",
          "docstring": "Comprehensive indexer for all project content.",
          "line_range": [
            42,
            711
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                45,
                58
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize comprehensive extraction patterns.",
              "line_range": [
                60,
                92
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "scan_all_directories",
              "docstring": "Scan all configured directories comprehensively.",
              "line_range": [
                94,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_scan_directory",
              "docstring": "Scan a specific directory according to its configuration.",
              "line_range": [
                113,
                127
              ],
              "parameters": [
                "self",
                "directory",
                "config"
              ]
            },
            {
              "name": "_scan_root_files",
              "docstring": "Scan root-level files.",
              "line_range": [
                129,
                133
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "_should_scan_file",
              "docstring": "Check if file should be scanned based on extension.",
              "line_range": [
                135,
                137
              ],
              "parameters": [
                "self",
                "file_path",
                "allowed_types"
              ]
            },
            {
              "name": "_scan_file",
              "docstring": "Scan individual file for project items.",
              "line_range": [
                139,
                152
              ],
              "parameters": [
                "self",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_text",
              "docstring": "Extract items from text/markdown files.",
              "line_range": [
                154,
                206
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_json",
              "docstring": "Extract items from JSON files.",
              "line_range": [
                208,
                225
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_item_from_match",
              "docstring": "Create ProjectItem from regex match.",
              "line_range": [
                227,
                249
              ],
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_checkbox_item",
              "docstring": "Create ProjectItem from checkbox match.",
              "line_range": [
                251,
                274
              ],
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_simple_item",
              "docstring": "Create simple ProjectItem.",
              "line_range": [
                276,
                297
              ],
              "parameters": [
                "self",
                "title",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority",
                "position"
              ]
            },
            {
              "name": "_detect_status",
              "docstring": "Detect item status from surrounding content.",
              "line_range": [
                299,
                308
              ],
              "parameters": [
                "self",
                "content",
                "position"
              ]
            },
            {
              "name": "_detect_priority",
              "docstring": "Detect item priority from surrounding content.",
              "line_range": [
                310,
                319
              ],
              "parameters": [
                "self",
                "content",
                "position",
                "default"
              ]
            },
            {
              "name": "_assess_strategic_value",
              "docstring": "Assess strategic value of item.",
              "line_range": [
                321,
                330
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract context around position.",
              "line_range": [
                332,
                336
              ],
              "parameters": [
                "self",
                "content",
                "position",
                "length"
              ]
            },
            {
              "name": "_detect_category",
              "docstring": "Detect item category.",
              "line_range": [
                338,
                351
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_estimate_effort",
              "docstring": "Estimate effort required.",
              "line_range": [
                353,
                362
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_tags",
              "docstring": "Extract relevant tags.",
              "line_range": [
                364,
                378
              ],
              "parameters": [
                "self",
                "title",
                "content",
                "source_dir"
              ]
            },
            {
              "name": "_is_noise_checkbox",
              "docstring": "Check if checkbox is noise (navigation, etc).",
              "line_range": [
                380,
                384
              ],
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "_parse_json_files",
              "docstring": "Parse structured JSON files for existing data.",
              "line_range": [
                386,
                402
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_process_structured_json",
              "docstring": "Process structured JSON data.",
              "line_range": [
                404,
                419
              ],
              "parameters": [
                "self",
                "data",
                "file_path"
              ]
            },
            {
              "name": "_add_json_item",
              "docstring": "Add item from JSON structure.",
              "line_range": [
                421,
                441
              ],
              "parameters": [
                "self",
                "item",
                "file_path",
                "item_type"
              ]
            },
            {
              "name": "_assess_json_strategic_value",
              "docstring": "Assess strategic value from JSON item.",
              "line_range": [
                443,
                450
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_extract_innovation_concepts",
              "docstring": "Extract innovation concepts from content.",
              "line_range": [
                452,
                482
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_enhance_items",
              "docstring": "Post-process items to enhance metadata and find relationships.",
              "line_range": [
                484,
                501
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_find_related_items",
              "docstring": "Find related items based on content similarity.",
              "line_range": [
                503,
                517
              ],
              "parameters": [
                "self",
                "item",
                "id_map",
                "title_map"
              ]
            },
            {
              "name": "generate_comprehensive_report",
              "docstring": "Generate comprehensive analysis report.",
              "line_range": [
                519,
                561
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_comprehensive_index",
              "docstring": "Save comprehensive index and reports.",
              "line_range": [
                563,
                582
              ],
              "parameters": [
                "self",
                "output_dir"
              ]
            },
            {
              "name": "_generate_analysis_report",
              "docstring": "Generate human-readable analysis report.",
              "line_range": [
                584,
                658
              ],
              "parameters": [
                "self",
                "report"
              ]
            },
            {
              "name": "_format_dict",
              "docstring": "Format dictionary for markdown display.",
              "line_range": [
                660,
                662
              ],
              "parameters": [
                "self",
                "d"
              ]
            },
            {
              "name": "_format_items_list",
              "docstring": "Format items list for markdown display.",
              "line_range": [
                664,
                677
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "_extract_json_tasks",
              "docstring": "Extract tasks from JSON tasks array.",
              "line_range": [
                679,
                684
              ],
              "parameters": [
                "self",
                "tasks_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_ideas",
              "docstring": "Extract ideas from JSON ideas array.",
              "line_range": [
                686,
                691
              ],
              "parameters": [
                "self",
                "ideas_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_sessions",
              "docstring": "Extract sessions from JSON sessions array.",
              "line_range": [
                693,
                698
              ],
              "parameters": [
                "self",
                "sessions_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_array",
              "docstring": "Extract items from JSON array.",
              "line_range": [
                700,
                711
              ],
              "parameters": [
                "self",
                "array_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._init_patterns"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "scan_all_directories": [
          "len",
          "self._enhance_items",
          "self._scan_root_files",
          "logger.info",
          "self._parse_json_files",
          "self._scan_directory"
        ],
        "_scan_directory": [
          "self._should_scan_file",
          "logger.warning",
          "logger.info",
          "dir_path.glob",
          "file_path.is_file",
          "self._scan_file",
          "dir_path.exists"
        ],
        "_scan_root_files": [
          "self._should_scan_file",
          "self._scan_file",
          "file_path.is_file"
        ],
        "_should_scan_file": [],
        "_scan_file": [
          "f.read",
          "self._extract_from_json",
          "open",
          "self._extract_from_text",
          "logger.error"
        ],
        "_extract_from_text": [
          "self._extract_innovation_concepts",
          "self._create_checkbox_item",
          "self._is_noise_checkbox",
          "self._create_simple_item",
          "match.group",
          "match.start",
          "self._create_item_from_match"
        ],
        "_extract_from_json": [
          "self._extract_json_tasks",
          "logger.warning",
          "self._extract_json_ideas",
          "isinstance",
          "self._extract_json_sessions",
          "self._extract_json_array",
          "json.loads"
        ],
        "_create_item_from_match": [
          "self._extract_context",
          "self._detect_status",
          "self._assess_strategic_value",
          "self._extract_tags",
          "str",
          "self._detect_category",
          "self._estimate_effort",
          "self._detect_priority",
          "ProjectItem",
          "title.strip",
          "datetime.now",
          "match.group",
          "match.start"
        ],
        "_create_checkbox_item": [
          "self._extract_context",
          "self._assess_strategic_value",
          "self._extract_tags",
          "str",
          "self._detect_category",
          "self._estimate_effort",
          "self._detect_priority",
          "ProjectItem",
          "datetime.now",
          "match.group",
          "match.start"
        ],
        "_create_simple_item": [
          "self._extract_context",
          "str",
          "ProjectItem",
          "title.strip",
          "datetime.now"
        ],
        "_detect_status": [
          "max"
        ],
        "_detect_priority": [
          "max"
        ],
        "_assess_strategic_value": [],
        "_extract_context": [
          "max",
          "len",
          "min"
        ],
        "_detect_category": [
          "any",
          "title.lower"
        ],
        "_estimate_effort": [
          "any"
        ],
        "_extract_tags": [
          "source_dir.replace",
          "tags.append",
          "title.lower"
        ],
        "_is_noise_checkbox": [
          "len",
          "any",
          "text.lower",
          "text.strip"
        ],
        "_parse_json_files": [
          "file_path.exists",
          "self._process_structured_json",
          "open",
          "json.load",
          "logger.error"
        ],
        "_process_structured_json": [
          "self._add_json_item",
          "isinstance"
        ],
        "_add_json_item": [
          "len",
          "self._assess_json_strategic_value",
          "str",
          "ProjectItem",
          "item.get",
          "datetime.now"
        ],
        "_assess_json_strategic_value": [
          "item.get"
        ],
        "_extract_innovation_concepts": [
          "content.split",
          "len",
          "self._extract_context",
          "content.find",
          "str",
          "enumerate",
          "ProjectItem",
          "source_dir.replace",
          "line.strip",
          "datetime.now",
          "innovation_lines.append"
        ],
        "_enhance_items": [
          "self._find_related_items",
          "logger.info",
          "re.sub"
        ],
        "_find_related_items": [
          "re.findall",
          "related.append",
          "ref_type.upper"
        ],
        "generate_comprehensive_report": [
          "len",
          "by_strategic_value.get",
          "by_source.get",
          "asdict",
          "by_status.get",
          "by_type.get",
          "by_priority.get",
          "datetime.now"
        ],
        "save_comprehensive_index": [
          "len",
          "json.dump",
          "f.write",
          "self.generate_comprehensive_report",
          "logger.info",
          "os.makedirs",
          "open",
          "self._generate_analysis_report"
        ],
        "_generate_analysis_report": [
          "self._format_items_list",
          "len",
          "self._format_dict"
        ],
        "_format_dict": [
          "d.items",
          "sorted"
        ],
        "_format_items_list": [
          "result.append"
        ],
        "_extract_json_tasks": [
          "self._add_json_item",
          "isinstance"
        ],
        "_extract_json_ideas": [
          "self._add_json_item",
          "isinstance"
        ],
        "_extract_json_sessions": [
          "self._add_json_item",
          "isinstance"
        ],
        "_extract_json_array": [
          "str",
          "isinstance",
          "self._add_json_item"
        ],
        "main": [
          "len",
          "print",
          "logger.info",
          "indexer.save_comprehensive_index",
          "indexer.scan_all_directories",
          "by_strategic.get",
          "ComprehensiveIndexer"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "a851a12f-96e4-4a02-b5bb-211ceada98fa"
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "module_doc": "JSON Validation Script\nValidates JSON files against their respective schemas.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            13,
            23
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate a JSON file against a schema.",
          "line_range": [
            26,
            49
          ],
          "parameters": [
            "file_path",
            "schema_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "print",
          "open",
          "json.load"
        ],
        "validate_json": [
          "print",
          "validator.validate",
          "str",
          "load_json",
          "Path",
          "Draft7Validator"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "pathlib",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "87f3b0bf-03f2-4840-a20a-4b3ce4302b59"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": [
            11,
            43
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            46,
            47
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "json.dump",
          "target_file.exists",
          "source_file.exists",
          "logger.warning",
          "broken_links.append",
          "logger.info",
          "enumerate",
          "json.load",
          "Path",
          "logger.error",
          "idea.get"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "dc781660-962e-4b12-bb2d-c33ae15f610b"
    },
    {
      "module_id": "scripts.create_tasks_index",
      "path": "scripts/create_tasks_index.py",
      "category": "core",
      "module_doc": "Tasks Index Creator\nScans all documentation files and creates comprehensive index of tasks, EPICs, TODOs, and other actionable items.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            469,
            515
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            42,
            44
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize regex patterns for task extraction.",
          "line_range": [
            46,
            73
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "extract_from_markdown",
          "docstring": "Extract tasks from markdown file.",
          "line_range": [
            75,
            107
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_status",
          "docstring": "Extract document status.",
          "line_range": [
            109,
            120
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_priority",
          "docstring": "Extract document priority.",
          "line_range": [
            122,
            135
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_date",
          "docstring": "Extract document date.",
          "line_range": [
            137,
            142
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_epics",
          "docstring": "Extract EPIC items.",
          "line_range": [
            144,
            168
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tasks",
          "docstring": "Extract explicit task items.",
          "line_range": [
            170,
            194
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_todos",
          "docstring": "Extract TODO items.",
          "line_range": [
            196,
            219
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_phases",
          "docstring": "Extract phase/step items.",
          "line_range": [
            221,
            245
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_checkboxes",
          "docstring": "Extract checkbox items as tasks.",
          "line_range": [
            247,
            275
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract surrounding context for a match.",
          "line_range": [
            277,
            286
          ],
          "parameters": [
            "self",
            "content",
            "start",
            "end",
            "context_lines"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            292,
            294
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_documentation",
          "docstring": "Scan all documentation files for tasks.",
          "line_range": [
            296,
            314
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_index",
          "docstring": "Generate comprehensive task index.",
          "line_range": [
            316,
            367
          ],
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "generate_summary_report",
          "docstring": "Generate human-readable summary report.",
          "line_range": [
            369,
            446
          ],
          "parameters": [
            "self",
            "index"
          ],
          "decorators": []
        },
        {
          "name": "save_index",
          "docstring": "Save index and summary to files.",
          "line_range": [
            448,
            466
          ],
          "parameters": [
            "self",
            "index",
            "summary",
            "output_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Task",
          "docstring": "Represents a single task or actionable item.",
          "line_range": [
            21,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "TaskExtractor",
          "docstring": "Extract tasks from various document formats.",
          "line_range": [
            39,
            286
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                42,
                44
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize regex patterns for task extraction.",
              "line_range": [
                46,
                73
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "extract_from_markdown",
              "docstring": "Extract tasks from markdown file.",
              "line_range": [
                75,
                107
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_status",
              "docstring": "Extract document status.",
              "line_range": [
                109,
                120
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_priority",
              "docstring": "Extract document priority.",
              "line_range": [
                122,
                135
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_date",
              "docstring": "Extract document date.",
              "line_range": [
                137,
                142
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_epics",
              "docstring": "Extract EPIC items.",
              "line_range": [
                144,
                168
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_tasks",
              "docstring": "Extract explicit task items.",
              "line_range": [
                170,
                194
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_todos",
              "docstring": "Extract TODO items.",
              "line_range": [
                196,
                219
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_phases",
              "docstring": "Extract phase/step items.",
              "line_range": [
                221,
                245
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_checkboxes",
              "docstring": "Extract checkbox items as tasks.",
              "line_range": [
                247,
                275
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract surrounding context for a match.",
              "line_range": [
                277,
                286
              ],
              "parameters": [
                "self",
                "content",
                "start",
                "end",
                "context_lines"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TaskIndexGenerator",
          "docstring": "Generate comprehensive task index.",
          "line_range": [
            289,
            466
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                292,
                294
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_documentation",
              "docstring": "Scan all documentation files for tasks.",
              "line_range": [
                296,
                314
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_index",
              "docstring": "Generate comprehensive task index.",
              "line_range": [
                316,
                367
              ],
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "generate_summary_report",
              "docstring": "Generate human-readable summary report.",
              "line_range": [
                369,
                446
              ],
              "parameters": [
                "self",
                "index"
              ]
            },
            {
              "name": "save_index",
              "docstring": "Save index and summary to files.",
              "line_range": [
                448,
                466
              ],
              "parameters": [
                "self",
                "index",
                "summary",
                "output_dir"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "TaskExtractor"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "extract_from_markdown": [
          "self._extract_tasks",
          "tasks.extend",
          "self._extract_checkboxes",
          "self._extract_priority",
          "f.read",
          "self._extract_epics",
          "self._extract_todos",
          "self._extract_phases",
          "self._extract_date",
          "open",
          "self._extract_status",
          "logger.error"
        ],
        "_extract_status": [
          "match.group"
        ],
        "_extract_priority": [
          "match.group"
        ],
        "_extract_date": [
          "datetime.now",
          "match.group"
        ],
        "_extract_epics": [
          "self._extract_context",
          "str",
          "match.end",
          "Task",
          "tasks.append",
          "match.group",
          "match.start"
        ],
        "_extract_tasks": [
          "self._extract_context",
          "str",
          "match.end",
          "Task",
          "tasks.append",
          "match.group",
          "match.start"
        ],
        "_extract_todos": [
          "str",
          "Task",
          "tasks.append",
          "match.group",
          "match.start"
        ],
        "_extract_phases": [
          "self._extract_context",
          "str",
          "match.end",
          "Task",
          "tasks.append",
          "match.group",
          "match.start"
        ],
        "_extract_checkboxes": [
          "any",
          "str",
          "task_title.upper",
          "Task",
          "tasks.append",
          "match.group",
          "match.start"
        ],
        "_extract_context": [
          "content.split",
          "len",
          "context.strip",
          "min",
          "max"
        ],
        "scan_documentation": [
          "logger.info",
          "docs_dir.glob",
          "all_tasks.extend",
          "docs_dir.exists"
        ],
        "generate_index": [
          "len",
          "by_status.items",
          "datetime.now",
          "asdict",
          "by_file.items",
          "by_priority.items",
          "by_category.items"
        ],
        "generate_summary_report": [
          "len",
          "sorted",
          "category.upper",
          "status.upper",
          "priority.upper",
          "Path",
          "file_categories.items"
        ],
        "save_index": [
          "json.dump",
          "f.write",
          "logger.info",
          "output_path.mkdir",
          "open",
          "Path"
        ],
        "main": [
          "len",
          "print",
          "argparse.ArgumentParser",
          "sorted",
          "generator.save_index",
          "by_status.items",
          "by_status.get",
          "logger.info",
          "TaskIndexGenerator",
          "generator.scan_documentation",
          "by_category.get",
          "generator.generate_summary_report",
          "parser.add_argument",
          "by_category.items",
          "parser.parse_args",
          "generator.generate_index"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "8dda7231-8716-4d8a-9981-4c8cde20b6c9"
    },
    {
      "module_id": "scripts.github_sync_manager_enhanced",
      "path": "scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "module_doc": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout\n\u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442: processing results + GitHub API + token management + CLI fallback",
      "functions": [
        {
          "name": "print_info",
          "docstring": "",
          "line_range": [
            25,
            26
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_success",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_warning",
          "docstring": "",
          "line_range": [
            31,
            32
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_error",
          "docstring": "",
          "line_range": [
            34,
            35
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_step",
          "docstring": "",
          "line_range": [
            37,
            38
          ],
          "parameters": [
            "step",
            "total",
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Enhanced CLI interface",
          "line_range": [
            620,
            655
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            43,
            44
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            46,
            57
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_github_token",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
          "line_range": [
            59,
            73
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "check_gh_cli",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
          "line_range": [
            75,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_token_from_gh_cli",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
          "line_range": [
            84,
            93
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_github_token",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
          "line_range": [
            95,
            117
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            122,
            164
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "detect_repo_from_git",
          "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
          "line_range": [
            166,
            198
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results",
          "line_range": [
            200,
            211
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log",
          "line_range": [
            213,
            216
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Enhanced API request with CLI fallback",
          "line_range": [
            218,
            231
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_direct",
          "docstring": "Direct API request",
          "line_range": [
            233,
            261
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_via_cli",
          "docstring": "API request via GitHub CLI",
          "line_range": [
            263,
            293
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue_enhanced",
          "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
          "line_range": [
            295,
            359
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_acceptance_criteria",
          "docstring": "Format acceptance criteria from item metadata",
          "line_range": [
            361,
            380
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_implementation_notes",
          "docstring": "Format implementation notes",
          "line_range": [
            382,
            397
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Enhanced validation",
          "line_range": [
            399,
            434
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_enhanced_sync",
          "docstring": "Enhanced sync with full project rollout integration",
          "line_range": [
            436,
            494
          ],
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        },
        {
          "name": "sync_category_enhanced",
          "docstring": "Enhanced category sync",
          "line_range": [
            496,
            554
          ],
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced",
          "line_range": [
            556,
            560
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic_enhanced",
          "docstring": "Enhanced epic creation",
          "line_range": [
            562,
            607
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion_enhanced",
          "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
          "line_range": [
            609,
            618
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            18,
            23
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "GitHubTokenManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 GitHub \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 (\u0438\u0437 setup_github_token.sh)",
          "line_range": [
            40,
            117
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                43,
                44
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_env_file",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                46,
                57
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_github_token",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
              "line_range": [
                59,
                73
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "check_gh_cli",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
              "line_range": [
                75,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_token_from_gh_cli",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
              "line_range": [
                84,
                93
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_github_token",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
              "line_range": [
                95,
                117
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "EnhancedGitHubSyncManager",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 GitHub Sync Manager \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0432\u0441\u0435\u0445 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a",
          "line_range": [
            119,
            618
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                122,
                164
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "detect_repo_from_git",
              "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
              "line_range": [
                166,
                198
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results",
              "line_range": [
                200,
                211
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log",
              "line_range": [
                213,
                216
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Enhanced API request with CLI fallback",
              "line_range": [
                218,
                231
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_direct",
              "docstring": "Direct API request",
              "line_range": [
                233,
                261
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_via_cli",
              "docstring": "API request via GitHub CLI",
              "line_range": [
                263,
                293
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "create_github_issue_enhanced",
              "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
              "line_range": [
                295,
                359
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_acceptance_criteria",
              "docstring": "Format acceptance criteria from item metadata",
              "line_range": [
                361,
                380
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_implementation_notes",
              "docstring": "Format implementation notes",
              "line_range": [
                382,
                397
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Enhanced validation",
              "line_range": [
                399,
                434
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_enhanced_sync",
              "docstring": "Enhanced sync with full project rollout integration",
              "line_range": [
                436,
                494
              ],
              "parameters": [
                "self",
                "categories"
              ]
            },
            {
              "name": "sync_category_enhanced",
              "docstring": "Enhanced category sync",
              "line_range": [
                496,
                554
              ],
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced",
              "line_range": [
                556,
                560
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "create_github_epic_enhanced",
              "docstring": "Enhanced epic creation",
              "line_range": [
                562,
                607
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion_enhanced",
              "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
              "line_range": [
                609,
                618
              ],
              "parameters": [
                "self",
                "item"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "print_info": [
          "print"
        ],
        "print_success": [
          "print"
        ],
        "print_warning": [
          "print"
        ],
        "print_error": [
          "print"
        ],
        "print_step": [
          "print"
        ],
        "__init__": [
          "print_info",
          "self.load_sync_log",
          "self.detect_repo_from_git",
          "Path",
          "GitHubTokenManager"
        ],
        "load_env_file": [
          "line.split",
          "env_file.exists",
          "key.strip",
          "line.startswith",
          "value.strip",
          "open",
          "line.strip",
          "Path"
        ],
        "test_github_token": [
          "response.json",
          "requests.get"
        ],
        "check_gh_cli": [
          "subprocess.run"
        ],
        "get_token_from_gh_cli": [
          "subprocess.run"
        ],
        "get_github_token": [
          "print_warning",
          "os.getenv",
          "self.check_gh_cli",
          "self.get_token_from_gh_cli",
          "self.test_github_token"
        ],
        "detect_repo_from_git": [
          "len",
          "print_warning",
          "print_info",
          "path.split",
          "url.startswith",
          "url.replace",
          "url.split",
          "url.endswith",
          "subprocess.run"
        ],
        "load_sync_log": [
          "open",
          "json.load"
        ],
        "save_sync_log": [
          "open",
          "json.dump"
        ],
        "api_request": [
          "print_error",
          "time.sleep",
          "self._api_request_direct",
          "self._api_request_via_cli"
        ],
        "_api_request_direct": [
          "ValueError",
          "print_warning",
          "print_error",
          "response.json",
          "requests.get",
          "int",
          "requests.post",
          "requests.patch",
          "method.upper",
          "response.raise_for_status"
        ],
        "_api_request_via_cli": [
          "print_warning",
          "print_error",
          "json.loads",
          "method.upper",
          "json.dumps",
          "cmd.extend",
          "subprocess.run"
        ],
        "create_github_issue_enhanced": [
          "self._format_acceptance_criteria",
          "print_info",
          "self._format_implementation_notes",
          "self.api_request",
          "item.get",
          "labels.append",
          "print_success",
          "processing_meta.get"
        ],
        "_format_acceptance_criteria": [
          "item.get",
          "criteria.extend",
          "criteria.append"
        ],
        "_format_implementation_notes": [
          "item.get",
          "processing_meta.get",
          "notes.append"
        ],
        "validate_before_sync": [
          "user_info.get",
          "print_error",
          "repo_info.get",
          "self.api_request",
          "file_path.exists",
          "print_success",
          "print_step"
        ],
        "run_enhanced_sync": [
          "print",
          "print_info",
          "enumerate",
          "print_success",
          "self.save_sync_log",
          "result.get",
          "datetime.now",
          "print_step",
          "self.sync_category_enhanced",
          "self.validate_before_sync"
        ],
        "sync_category_enhanced": [
          "self.create_github_issue_enhanced",
          "print_warning",
          "print_error",
          "self.create_github_epic_enhanced",
          "self.create_github_discussion_enhanced",
          "print_info",
          "self.item_already_synced",
          "file_path.exists",
          "result.get",
          "open",
          "item.get",
          "json.load",
          "datetime.now",
          "data.get"
        ],
        "item_already_synced": [
          "item.get"
        ],
        "create_github_epic_enhanced": [
          "print_success",
          "item.get",
          "self.api_request",
          "print_info"
        ],
        "create_github_discussion_enhanced": [
          "print_warning",
          "item.get",
          "print_info"
        ],
        "main": [
          "len",
          "print_error",
          "argparse.ArgumentParser",
          "manager.run_enhanced_sync",
          "result.get",
          "print_success",
          "parser.add_argument",
          "EnhancedGitHubSyncManager",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b40e64a1-14bf-4d5c-8877-2c0bf630dad2"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": [
            13,
            29
          ],
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": [
            32,
            38
          ],
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": [
            41,
            88
          ],
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            91,
            92
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "fnmatch.fnmatch",
          "pattern.startswith",
          "filtered.append"
        ],
        "collect_files": [
          "apply_filters",
          "str",
          "path.relative_to",
          "root_dir.rglob",
          "path.is_file",
          "files.append"
        ],
        "generate_struct": [
          "len",
          "json.dump",
          "collect_files",
          "str",
          "logger.info",
          "existing.get",
          "json.load",
          "Path",
          "uuid.uuid4",
          "output_path.open",
          "output_path.exists"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "89e1751f-5583-4f20-bb69-dc32ef2de9f0"
    },
    {
      "module_id": "scripts.validate_epics",
      "path": "scripts/validate_epics.py",
      "category": "core",
      "module_doc": "Epic Data Validator\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c GitHub issues",
      "functions": [
        {
          "name": "validate_epic_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            12,
            35
          ],
          "parameters": [
            "epic"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "task",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "validate_priorities",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u0432",
          "line_range": [
            55,
            68
          ],
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_ids",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c ID \u0437\u0430\u0434\u0430\u0447",
          "line_range": [
            70,
            82
          ],
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438",
          "line_range": [
            84,
            131
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_epic_structure": [
          "isinstance",
          "errors.append"
        ],
        "validate_task_structure": [
          "task.get",
          "isinstance",
          "errors.append"
        ],
        "validate_priorities": [
          "task.get",
          "errors.append",
          "data.get",
          "epic.get"
        ],
        "validate_task_ids": [
          "seen_ids.add",
          "epic.get",
          "set",
          "task.get",
          "errors.append",
          "data.get"
        ],
        "main": [
          "len",
          "print",
          "all_errors.extend",
          "epic.get",
          "sys.exit",
          "validate_task_structure",
          "all_errors.append",
          "validate_epic_structure",
          "validate_priorities",
          "isinstance",
          "open",
          "epics_file.exists",
          "json.load",
          "e.get",
          "Path",
          "validate_task_ids",
          "sum"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "pathlib",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "339edc3e-5326-449e-90ed-045378ac8bb6"
    },
    {
      "module_id": "scripts.epic_roadmap_manager",
      "path": "scripts/epic_roadmap_manager.py",
      "category": "core",
      "module_doc": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u0438:\n- \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 roadmap \u0438 \u043f\u043b\u0430\u043d\u043e\u0432\n- \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439\n- \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441 GitHub epics\n- \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u0432",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            259,
            291
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            19,
            22
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_roadmap",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            24,
            31
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_roadmap",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "self",
            "roadmap"
          ],
          "decorators": []
        },
        {
          "name": "show_overview",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
          "line_range": [
            42,
            80
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "show_epic_details",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            82,
            125
          ],
          "parameters": [
            "self",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
          "line_range": [
            127,
            189
          ],
          "parameters": [
            "self",
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "complete_session",
          "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            191,
            257
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EpicRoadmapManager",
          "docstring": "",
          "line_range": [
            18,
            257
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                19,
                22
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_roadmap",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                24,
                31
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_roadmap",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
              "line_range": [
                33,
                40
              ],
              "parameters": [
                "self",
                "roadmap"
              ]
            },
            {
              "name": "show_overview",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
              "line_range": [
                42,
                80
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "show_epic_details",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
              "line_range": [
                82,
                125
              ],
              "parameters": [
                "self",
                "epic_id"
              ]
            },
            {
              "name": "start_session",
              "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
              "line_range": [
                127,
                189
              ],
              "parameters": [
                "self",
                "epic_id",
                "session_id"
              ]
            },
            {
              "name": "complete_session",
              "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                191,
                257
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "load_roadmap": [
          "print",
          "open",
          "json.load"
        ],
        "save_roadmap": [
          "datetime.now",
          "open",
          "print",
          "json.dump"
        ],
        "show_overview": [
          "print",
          "epic.get",
          "self.load_roadmap",
          "stats.get",
          "epics.items",
          "roadmap.get"
        ],
        "show_epic_details": [
          "len",
          "print",
          "epic.get",
          "self.load_roadmap",
          "epic_data.get",
          "session.get",
          "roadmap.get"
        ],
        "start_session": [
          "print",
          "self.save_roadmap",
          "json.dump",
          "epic.get",
          "self.load_roadmap",
          "os.makedirs",
          "epic_data.get",
          "sess.get",
          "open",
          "datetime.now",
          "session.get",
          "roadmap.get"
        ],
        "complete_session": [
          "print",
          "all",
          "self.save_roadmap",
          "json.dump",
          "epic.get",
          "sessions_log.append",
          "self.load_roadmap",
          "current_session.get",
          "os.makedirs",
          "sess.get",
          "open",
          "json.load",
          "os.remove",
          "datetime.now",
          "session.get",
          "roadmap.get"
        ],
        "main": [
          "print",
          "argparse.ArgumentParser",
          "manager.complete_session",
          "manager.show_epic_details",
          "manager.show_overview",
          "manager.start_session",
          "parser.add_argument",
          "EpicRoadmapManager",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "7a8996ae-3bab-45de-9910-04f2d7c5ec46"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": [
            931,
            941
          ],
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": [
            944,
            950
          ],
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": [
            953,
            1007
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            1010,
            1011
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "RefResolver",
          "validate",
          "logger.error",
          "logger.warning"
        ],
        "backup_files": [
          "datetime.now",
          "target_dir.exists",
          "logger.info",
          "shutil.copytree"
        ],
        "deploy_embedded_files": [
          "target_path.exists",
          "json.dump",
          "logger.warning",
          "f.write",
          "backup_files",
          "EMBEDDED_FILES.get",
          "logger.info",
          "Path.cwd",
          "Path",
          "target_path.open",
          "validate_json",
          "logger.error"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "159a7561-57dc-42e8-9c02-a82f61c28673"
    },
    {
      "module_id": "scripts.team.__init__",
      "path": "scripts/team/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "4cb82973-0061-4a27-b4d1-0dcf5a884627"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "28e9b75d-38fd-4c80-bc0e-aeed636d68b6"
    },
    {
      "module_id": "temp_personal_analysis.personal.boss.scripts.business_planning",
      "path": "temp_personal_analysis/personal/boss/scripts/business_planning.py",
      "category": "core",
      "module_doc": "Business Planning Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
      "functions": [
        {
          "name": "create_business_planning_manager",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
          "line_range": [
            216,
            218
          ],
          "parameters": [
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
          "line_range": [
            20,
            27
          ],
          "parameters": [
            "self",
            "boss_data_dir"
          ],
          "decorators": []
        },
        {
          "name": "create_business_roadmap",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.",
          "line_range": [
            29,
            55
          ],
          "parameters": [
            "self",
            "roadmap_data"
          ],
          "decorators": []
        },
        {
          "name": "create_financial_plan",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "plan_data"
          ],
          "decorators": []
        },
        {
          "name": "record_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.",
          "line_range": [
            84,
            116
          ],
          "parameters": [
            "self",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_business_metrics",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            118,
            154
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_business_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.",
          "line_range": [
            156,
            193
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
          "line_range": [
            195,
            204
          ],
          "parameters": [
            "self",
            "file_path",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
          "line_range": [
            206,
            213
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BusinessPlanningManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439.",
          "line_range": [
            17,
            213
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
              "line_range": [
                20,
                27
              ],
              "parameters": [
                "self",
                "boss_data_dir"
              ]
            },
            {
              "name": "create_business_roadmap",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.",
              "line_range": [
                29,
                55
              ],
              "parameters": [
                "self",
                "roadmap_data"
              ]
            },
            {
              "name": "create_financial_plan",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "plan_data"
              ]
            },
            {
              "name": "record_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.",
              "line_range": [
                84,
                116
              ],
              "parameters": [
                "self",
                "decision_data"
              ]
            },
            {
              "name": "analyze_business_metrics",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                118,
                154
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_business_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.",
              "line_range": [
                156,
                193
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
              "line_range": [
                195,
                204
              ],
              "parameters": [
                "self",
                "file_path",
                "default"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
              "line_range": [
                206,
                213
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "create_business_roadmap": [
          "logger.error",
          "datetime.now",
          "logger.info",
          "self._save_data"
        ],
        "create_financial_plan": [
          "logger.error",
          "datetime.now",
          "logger.info",
          "self._save_data"
        ],
        "record_strategic_decision": [
          "decisions.append",
          "logger.info",
          "isinstance",
          "self._load_data",
          "decision_data.get",
          "self._save_data",
          "datetime.now",
          "logger.error"
        ],
        "analyze_business_metrics": [
          "len",
          "isinstance",
          "self._load_data",
          "datetime.now",
          "logger.error"
        ],
        "get_business_summary": [
          "len",
          "financial.get",
          "bool",
          "isinstance",
          "self._load_data",
          "datetime.now",
          "logger.error",
          "roadmap.get"
        ],
        "_load_data": [
          "file_path.exists",
          "file_path.open",
          "json.load",
          "logger.error"
        ],
        "_save_data": [
          "file_path.open",
          "json.dump",
          "logger.error"
        ],
        "create_business_planning_manager": [
          "BusinessPlanningManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "97bb6eb1-f253-4605-90ea-374bb72777d5"
    },
    {
      "module_id": "temp_personal_analysis.personal.boss.scripts.team_management",
      "path": "temp_personal_analysis/personal/boss/scripts/team_management.py",
      "category": "core",
      "module_doc": "Team Management Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439, \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
      "functions": [
        {
          "name": "create_team_management_system",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            291,
            293
          ],
          "parameters": [
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            20,
            27
          ],
          "parameters": [
            "self",
            "boss_data_dir"
          ],
          "decorators": []
        },
        {
          "name": "create_team_strategy",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            29,
            54
          ],
          "parameters": [
            "self",
            "strategy_data"
          ],
          "decorators": []
        },
        {
          "name": "record_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            56,
            88
          ],
          "parameters": [
            "self",
            "evaluation_data"
          ],
          "decorators": []
        },
        {
          "name": "create_hiring_plan",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            90,
            115
          ],
          "parameters": [
            "self",
            "plan_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_team_performance",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            117,
            156
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_team_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            158,
            195
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_team_report",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            197,
            226
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_strategy",
          "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.",
          "line_range": [
            228,
            238
          ],
          "parameters": [
            "self",
            "strategy"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_evaluations",
          "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.",
          "line_range": [
            240,
            250
          ],
          "parameters": [
            "self",
            "evaluations"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.",
          "line_range": [
            252,
            268
          ],
          "parameters": [
            "self",
            "strategy",
            "evaluations"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
          "line_range": [
            270,
            279
          ],
          "parameters": [
            "self",
            "file_path",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
          "line_range": [
            281,
            288
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TeamManagementSystem",
          "docstring": "\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438.",
          "line_range": [
            17,
            288
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
              "line_range": [
                20,
                27
              ],
              "parameters": [
                "self",
                "boss_data_dir"
              ]
            },
            {
              "name": "create_team_strategy",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
              "line_range": [
                29,
                54
              ],
              "parameters": [
                "self",
                "strategy_data"
              ]
            },
            {
              "name": "record_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                56,
                88
              ],
              "parameters": [
                "self",
                "evaluation_data"
              ]
            },
            {
              "name": "create_hiring_plan",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                90,
                115
              ],
              "parameters": [
                "self",
                "plan_data"
              ]
            },
            {
              "name": "analyze_team_performance",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                117,
                156
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_team_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                158,
                195
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_team_report",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                197,
                226
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_summarize_strategy",
              "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.",
              "line_range": [
                228,
                238
              ],
              "parameters": [
                "self",
                "strategy"
              ]
            },
            {
              "name": "_summarize_evaluations",
              "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.",
              "line_range": [
                240,
                250
              ],
              "parameters": [
                "self",
                "evaluations"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.",
              "line_range": [
                252,
                268
              ],
              "parameters": [
                "self",
                "strategy",
                "evaluations"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
              "line_range": [
                270,
                279
              ],
              "parameters": [
                "self",
                "file_path",
                "default"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
              "line_range": [
                281,
                288
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "create_team_strategy": [
          "logger.error",
          "datetime.now",
          "logger.info",
          "self._save_data"
        ],
        "record_team_evaluation": [
          "logger.info",
          "isinstance",
          "self._load_data",
          "self._save_data",
          "evaluations.append",
          "datetime.now",
          "logger.error"
        ],
        "create_hiring_plan": [
          "logger.error",
          "datetime.now",
          "logger.info",
          "self._save_data"
        ],
        "analyze_team_performance": [
          "len",
          "bool",
          "isinstance",
          "self._load_data",
          "datetime.now",
          "logger.error"
        ],
        "get_team_summary": [
          "len",
          "bool",
          "strategy.get",
          "hiring_plans.get",
          "isinstance",
          "self._load_data",
          "datetime.now",
          "logger.error"
        ],
        "generate_team_report": [
          "self._summarize_strategy",
          "self._generate_recommendations",
          "self._summarize_evaluations",
          "self._load_data",
          "datetime.now",
          "logger.error"
        ],
        "_summarize_strategy": [
          "strategy.get"
        ],
        "_summarize_evaluations": [
          "len",
          "isinstance"
        ],
        "_generate_recommendations": [
          "len",
          "recommendations.append"
        ],
        "_load_data": [
          "file_path.exists",
          "file_path.open",
          "json.load",
          "logger.error"
        ],
        "_save_data": [
          "file_path.open",
          "json.dump",
          "logger.error"
        ],
        "create_team_management_system": [
          "TeamManagementSystem"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "3c35fbd8-8515-40e8-be4e-c8c5ecfbdbd1"
    },
    {
      "module_id": "temp_personal_analysis.personal.boss.scripts.boss_cli",
      "path": "temp_personal_analysis/personal/boss/scripts/boss_cli.py",
      "category": "core",
      "module_doc": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u043e\u0434\u0443\u043b\u0438",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f.",
          "line_range": [
            490,
            503
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
          "line_range": [
            42,
            101
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
          "line_range": [
            103,
            126
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            128,
            147
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_status",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.",
          "line_range": [
            150,
            157
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_audit",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.",
          "line_range": [
            159,
            166
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_context",
          "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.",
          "line_range": [
            168,
            175
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_queue",
          "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.",
          "line_range": [
            177,
            184
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_summary",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.",
          "line_range": [
            186,
            193
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_roadmap",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
          "line_range": [
            196,
            221
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_financial_plan",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.",
          "line_range": [
            223,
            256
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
          "line_range": [
            258,
            273
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            275,
            282
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_summary",
          "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
          "line_range": [
            284,
            291
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_strategy",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            294,
            308
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            310,
            326
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_hiring_plan",
          "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            328,
            346
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            348,
            355
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_report",
          "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            357,
            364
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_technical",
          "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
          "line_range": [
            367,
            379
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context_full",
          "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
          "line_range": [
            381,
            384
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace_override",
          "docstring": "Emergency workspace overrides.",
          "line_range": [
            387,
            396
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_capabilities",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
          "line_range": [
            399,
            422
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_boss_status",
          "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
          "line_range": [
            424,
            440
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
          "line_range": [
            442,
            487
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BossCLI",
          "docstring": "Boss CLI - \u043f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f.\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u0444\u0443\u043d\u043a\u0446\u0438\u0438.",
          "line_range": [
            36,
            487
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
              "line_range": [
                42,
                101
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "run_interactive",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
              "line_range": [
                103,
                126
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                128,
                147
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "cmd_ai_status",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.",
              "line_range": [
                150,
                157
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_audit",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.",
              "line_range": [
                159,
                166
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_context",
              "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.",
              "line_range": [
                168,
                175
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_queue",
              "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.",
              "line_range": [
                177,
                184
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_summary",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.",
              "line_range": [
                186,
                193
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_roadmap",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
              "line_range": [
                196,
                221
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_financial_plan",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.",
              "line_range": [
                223,
                256
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
              "line_range": [
                258,
                273
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                275,
                282
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_summary",
              "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
              "line_range": [
                284,
                291
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_strategy",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                294,
                308
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                310,
                326
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_hiring_plan",
              "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                328,
                346
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                348,
                355
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_report",
              "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                357,
                364
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_technical",
              "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
              "line_range": [
                367,
                379
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context_full",
              "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
              "line_range": [
                381,
                384
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace_override",
              "docstring": "Emergency workspace overrides.",
              "line_range": [
                387,
                396
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_capabilities",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
              "line_range": [
                399,
                422
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_boss_status",
              "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
              "line_range": [
                424,
                440
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
              "line_range": [
                442,
                487
              ],
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "str",
          "CLIConfig",
          "CommandProcessor",
          "AISelfAwarenessCLIIntegration",
          "TeamManagementSystem",
          "Path",
          "BusinessPlanningManager",
          "CLIUtils"
        ],
        "run_interactive": [
          "input",
          "print",
          "self.process_command",
          "user_input.lower"
        ],
        "process_command": [
          "len",
          "print",
          "cmd.startswith",
          "command_line.split"
        ],
        "cmd_ai_status": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_audit": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_context": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_queue": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_business_roadmap": [
          "print",
          "json.dumps"
        ],
        "cmd_financial_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_strategic_decision": [
          "print",
          "json.dumps"
        ],
        "cmd_business_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_business_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_team_strategy": [
          "print",
          "json.dumps"
        ],
        "cmd_team_evaluation": [
          "print",
          "json.dumps"
        ],
        "cmd_hiring_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_team_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_team_report": [
          "print",
          "json.dumps"
        ],
        "cmd_technical": [
          "print"
        ],
        "cmd_context_full": [
          "print"
        ],
        "cmd_workspace_override": [
          "print"
        ],
        "cmd_capabilities": [
          "print",
          "json.dumps",
          "bool"
        ],
        "cmd_boss_status": [
          "print",
          "json.dumps"
        ],
        "cmd_help": [
          "print"
        ],
        "main": [
          "argparse.ArgumentParser",
          "BossCLI",
          "boss_cli.run_interactive",
          "parser.parse_args",
          "boss_cli.process_command",
          "parser.add_argument"
        ]
      },
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "Any",
        "BusinessPlanningManager",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "Dict",
        "Optional",
        "Path",
        "TeamManagementSystem",
        "argparse",
        "business_planning",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "os",
        "pathlib",
        "sys",
        "team_management",
        "typing"
      ],
      "hash": null,
      "artifact_id": "71389784-9279-4d20-96c8-da00d6ff24f3"
    },
    {
      "module_id": "temp_personal_analysis.personal.boss.scripts.__init__",
      "path": "temp_personal_analysis/personal/boss/scripts/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "8ae9cadb-b943-4145-a695-0feff3c21a8f"
    },
    {
      "module_id": ".personal.boss.scripts.boss_cli",
      "path": ".personal/boss/scripts/boss_cli.py",
      "category": "core",
      "module_doc": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n\u0414\u043e\u0441\u0442\u0443\u043f \u043a\u043e \u0432\u0441\u0435\u043c \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430, \u0432\u043a\u043b\u044e\u0447\u0430\u044f business planning \u0438 team management.",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f.",
          "line_range": [
            493,
            506
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
          "line_range": [
            47,
            95
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
          "line_range": [
            97,
            119
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            121,
            141
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_status",
          "docstring": "\u0421\u0442\u0430\u0442\u0443\u0441 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
          "line_range": [
            144,
            151
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_audit",
          "docstring": "\u0410\u0443\u0434\u0438\u0442 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439.",
          "line_range": [
            153,
            160
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_context",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c.",
          "line_range": [
            162,
            170
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_queue",
          "docstring": "\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 AI \u043e\u0447\u0435\u0440\u0435\u0434\u0438.",
          "line_range": [
            172,
            179
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_summary",
          "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.",
          "line_range": [
            181,
            188
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_roadmap",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
          "line_range": [
            191,
            210
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_financial_plan",
          "docstring": "\u0424\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0435 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.",
          "line_range": [
            212,
            226
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
          "line_range": [
            228,
            242
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            244,
            251
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_summary",
          "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
          "line_range": [
            253,
            260
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_strategy",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            263,
            277
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            279,
            295
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_hiring_plan",
          "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            297,
            315
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            317,
            324
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_report",
          "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            326,
            333
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_technical",
          "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
          "line_range": [
            336,
            348
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context_full",
          "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
          "line_range": [
            350,
            353
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace_override",
          "docstring": "Emergency workspace overrides.",
          "line_range": [
            356,
            365
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_capabilities",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
          "line_range": [
            368,
            391
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_boss_status",
          "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
          "line_range": [
            393,
            409
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
          "line_range": [
            411,
            456
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_init_ai_integration",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.",
          "line_range": [
            458,
            464
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_init_command_processor",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430 \u043a\u043e\u043c\u0430\u043d\u0434.",
          "line_range": [
            466,
            472
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_init_business_manager",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430.",
          "line_range": [
            474,
            481
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_init_team_manager",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            483,
            490
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BossCLI",
          "docstring": "Boss CLI - \u043f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f.\n\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f \u043a\u043e \u0432\u0441\u0435\u043c \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
          "line_range": [
            41,
            490
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
              "line_range": [
                47,
                95
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "run_interactive",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
              "line_range": [
                97,
                119
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                121,
                141
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "cmd_ai_status",
              "docstring": "\u0421\u0442\u0430\u0442\u0443\u0441 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
              "line_range": [
                144,
                151
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_audit",
              "docstring": "\u0410\u0443\u0434\u0438\u0442 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439.",
              "line_range": [
                153,
                160
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_context",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c.",
              "line_range": [
                162,
                170
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_queue",
              "docstring": "\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 AI \u043e\u0447\u0435\u0440\u0435\u0434\u0438.",
              "line_range": [
                172,
                179
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_summary",
              "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.",
              "line_range": [
                181,
                188
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_roadmap",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
              "line_range": [
                191,
                210
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_financial_plan",
              "docstring": "\u0424\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0435 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.",
              "line_range": [
                212,
                226
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
              "line_range": [
                228,
                242
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                244,
                251
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_summary",
              "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
              "line_range": [
                253,
                260
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_strategy",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                263,
                277
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                279,
                295
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_hiring_plan",
              "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                297,
                315
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                317,
                324
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_report",
              "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                326,
                333
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_technical",
              "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
              "line_range": [
                336,
                348
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context_full",
              "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
              "line_range": [
                350,
                353
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace_override",
              "docstring": "Emergency workspace overrides.",
              "line_range": [
                356,
                365
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_capabilities",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
              "line_range": [
                368,
                391
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_boss_status",
              "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
              "line_range": [
                393,
                409
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
              "line_range": [
                411,
                456
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_init_ai_integration",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.",
              "line_range": [
                458,
                464
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_init_command_processor",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430 \u043a\u043e\u043c\u0430\u043d\u0434.",
              "line_range": [
                466,
                472
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_init_business_manager",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430.",
              "line_range": [
                474,
                481
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_init_team_manager",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                483,
                490
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._init_command_processor",
          "str",
          "self._init_ai_integration",
          "self._init_business_manager",
          "Path",
          "self._init_team_manager"
        ],
        "run_interactive": [
          "input",
          "print",
          "self.process_command",
          "user_input.lower"
        ],
        "process_command": [
          "print",
          "cmd.startswith",
          "command_line.split"
        ],
        "cmd_ai_status": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_audit": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_context": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_queue": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_business_roadmap": [
          "print",
          "json.dumps"
        ],
        "cmd_financial_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_strategic_decision": [
          "print",
          "json.dumps"
        ],
        "cmd_business_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_business_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_team_strategy": [
          "print",
          "json.dumps"
        ],
        "cmd_team_evaluation": [
          "print",
          "json.dumps"
        ],
        "cmd_hiring_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_team_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_team_report": [
          "print",
          "json.dumps"
        ],
        "cmd_technical": [
          "print"
        ],
        "cmd_context_full": [
          "print"
        ],
        "cmd_workspace_override": [
          "print"
        ],
        "cmd_capabilities": [
          "print",
          "json.dumps",
          "bool"
        ],
        "cmd_boss_status": [
          "print",
          "json.dumps"
        ],
        "cmd_help": [
          "print"
        ],
        "_init_ai_integration": [],
        "_init_command_processor": [],
        "_init_business_manager": [
          "BusinessPlanningManager",
          "logger.error"
        ],
        "_init_team_manager": [
          "TeamManagementSystem",
          "logger.error"
        ],
        "main": [
          "argparse.ArgumentParser",
          "BossCLI",
          "boss_cli.run_interactive",
          "parser.parse_args",
          "boss_cli.process_command",
          "parser.add_argument"
        ]
      },
      "dependencies": [
        "BusinessPlanningManager",
        "Path",
        "TeamManagementSystem",
        "argparse",
        "business_planning",
        "json",
        "logging",
        "pathlib",
        "sys",
        "team_management"
      ],
      "hash": null,
      "artifact_id": "ab4ea744-c5e5-4a7f-9898-7faa2fc1c9fb"
    },
    {
      "module_id": "archive.telegram_experiments.send_cursor_response",
      "path": "archive/telegram_experiments/send_cursor_response.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            5,
            32
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "print",
          "send_to_user"
        ]
      },
      "dependencies": [
        "asyncio",
        "cursor_bot_messenger",
        "send_to_user"
      ],
      "hash": null,
      "artifact_id": "0bd5953d-2432-4200-a156-91e6682a37a3"
    },
    {
      "module_id": "archive.telegram_experiments.cursor_telegram_reader_enhanced",
      "path": "archive/telegram_experiments/cursor_telegram_reader_enhanced.py",
      "category": "core",
      "module_doc": "Enhanced Cursor Telegram Reader\n\u0427\u0438\u0442\u0430\u0435\u0442 cursor \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0441 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 reply context",
      "functions": [
        {
          "name": "handle_cursor_command",
          "docstring": "Example handler for cursor commands",
          "line_range": [
            181,
            203
          ],
          "parameters": [
            "command_data"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main entry point",
          "line_range": [
            205,
            222
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            20
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "read_cursor_commands",
          "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0435 cursor \u043a\u043e\u043c\u0430\u043d\u0434\u044b",
          "line_range": [
            22,
            44
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_parse_cursor_command",
          "docstring": "Parse single cursor command entry",
          "line_range": [
            46,
            84
          ],
          "parameters": [
            "self",
            "entry"
          ],
          "decorators": []
        },
        {
          "name": "get_recent_user_messages",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
          "line_range": [
            86,
            108
          ],
          "parameters": [
            "self",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "_parse_user_message",
          "docstring": "Parse user message entry",
          "line_range": [
            110,
            158
          ],
          "parameters": [
            "self",
            "entry"
          ],
          "decorators": []
        },
        {
          "name": "poll_for_commands",
          "docstring": "Polling \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            160,
            179
          ],
          "parameters": [
            "self",
            "callback_func",
            "poll_interval"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EnhancedCursorTelegramReader",
          "docstring": "Enhanced reader \u0434\u043b\u044f cursor \u043a\u043e\u043c\u0430\u043d\u0434 \u0438\u0437 Telegram \u043b\u043e\u0433\u043e\u0432",
          "line_range": [
            13,
            179
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                20
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "read_cursor_commands",
              "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0435 cursor \u043a\u043e\u043c\u0430\u043d\u0434\u044b",
              "line_range": [
                22,
                44
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_parse_cursor_command",
              "docstring": "Parse single cursor command entry",
              "line_range": [
                46,
                84
              ],
              "parameters": [
                "self",
                "entry"
              ]
            },
            {
              "name": "get_recent_user_messages",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
              "line_range": [
                86,
                108
              ],
              "parameters": [
                "self",
                "limit"
              ]
            },
            {
              "name": "_parse_user_message",
              "docstring": "Parse user message entry",
              "line_range": [
                110,
                158
              ],
              "parameters": [
                "self",
                "entry"
              ]
            },
            {
              "name": "poll_for_commands",
              "docstring": "Polling \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                160,
                179
              ],
              "parameters": [
                "self",
                "callback_func",
                "poll_interval"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "read_cursor_commands": [
          "content.split",
          "print",
          "f.read",
          "commands.append",
          "open",
          "entry.strip",
          "self._parse_cursor_command"
        ],
        "_parse_cursor_command": [
          "len",
          "print",
          "timestamp.timestamp",
          "int",
          "line.startswith",
          "timestamp_line.split",
          "timestamp.isoformat",
          "line.strip",
          "datetime.now",
          "entry.strip",
          "datetime.strptime"
        ],
        "get_recent_user_messages": [
          "content.split",
          "print",
          "f.read",
          "open",
          "messages.append",
          "entry.strip",
          "self._parse_user_message"
        ],
        "_parse_user_message": [
          "len",
          "print",
          "timestamp_line.replace",
          "line.startswith",
          "int",
          "timestamp.isoformat",
          "line.strip",
          "datetime.now",
          "entry.strip",
          "datetime.strptime"
        ],
        "poll_for_commands": [
          "callback_func",
          "print",
          "time.sleep",
          "self.read_cursor_commands"
        ],
        "handle_cursor_command": [
          "print"
        ],
        "main": [
          "print",
          "reader.get_recent_user_messages",
          "EnhancedCursorTelegramReader",
          "reader.poll_for_commands"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "datetime",
        "json",
        "os",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "a4c16476-1aa4-443d-baf4-15e2899311f2"
    },
    {
      "module_id": "archive.telegram_experiments.api_memory_endpoints",
      "path": "archive/telegram_experiments/api_memory_endpoints.py",
      "category": "core",
      "module_doc": "API Endpoints \u0434\u043b\u044f \u043f\u0430\u043c\u044f\u0442\u0438 Telegram \u0431\u043e\u0442\u0430\n\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 FastAPI \u0434\u043b\u044f \u043a\u0435\u0448\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439",
      "functions": [
        {
          "name": "load_user_memory",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            44,
            52
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "save_user_memory",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u0444\u0430\u0439\u043b",
          "line_range": [
            54,
            60
          ],
          "parameters": [
            "memory"
          ],
          "decorators": []
        },
        {
          "name": "add_memory_endpoints",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 endpoints \u043f\u0430\u043c\u044f\u0442\u0438 \u043a FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044e",
          "line_range": [
            62,
            273
          ],
          "parameters": [
            "app"
          ],
          "decorators": []
        },
        {
          "name": "save_user_message",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            66,
            97
          ],
          "parameters": [
            "message"
          ],
          "decorators": [
            "app.post('/api/v1/memory/save')"
          ]
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            100,
            122
          ],
          "parameters": [
            "user_id",
            "limit"
          ],
          "decorators": [
            "app.get('/api/v1/memory/history/{user_id}')"
          ]
        },
        {
          "name": "search_user_memory",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            125,
            152
          ],
          "parameters": [
            "query"
          ],
          "decorators": [
            "app.post('/api/v1/memory/search')"
          ]
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            155,
            215
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/chat/ollama')"
          ]
        },
        {
          "name": "clear_user_memory",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            218,
            238
          ],
          "parameters": [
            "user_id"
          ],
          "decorators": [
            "app.delete('/api/v1/memory/clear/{user_id}')"
          ]
        },
        {
          "name": "memory_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            241,
            273
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/memory/stats')"
          ]
        }
      ],
      "classes": [
        {
          "name": "UserMessage",
          "docstring": "",
          "line_range": [
            21,
            26
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "MemoryQuery",
          "docstring": "",
          "line_range": [
            28,
            31
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "OllamaRequest",
          "docstring": "",
          "line_range": [
            33,
            38
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        }
      ],
      "callgraph": {
        "load_user_memory": [
          "json.load",
          "open",
          "print",
          "USER_MEMORY_FILE.exists"
        ],
        "save_user_memory": [
          "print",
          "open",
          "json.dump"
        ],
        "add_memory_endpoints": [],
        "save_user_message": [
          "len",
          "load_user_memory",
          "str",
          "HTTPException",
          "save_user_memory",
          "time.strftime",
          "app.post"
        ],
        "get_user_history": [
          "len",
          "Query",
          "load_user_memory",
          "str",
          "HTTPException",
          "app.get",
          "memory.get"
        ],
        "search_user_memory": [
          "len",
          "load_user_memory",
          "msg.get",
          "str",
          "HTTPException",
          "found_messages.append",
          "memory.get",
          "app.post"
        ],
        "chat_with_ollama": [
          "len",
          "response_text.split",
          "resp.text",
          "resp.json",
          "str",
          "toml.load",
          "aiohttp.ClientSession",
          "time.strftime",
          "HTTPException",
          "open",
          "session.post",
          "data.get",
          "aiohttp.ClientTimeout",
          "app.post"
        ],
        "clear_user_memory": [
          "len",
          "load_user_memory",
          "app.delete",
          "str",
          "HTTPException",
          "save_user_memory",
          "memory.get",
          "time.strftime"
        ],
        "memory_stats": [
          "len",
          "load_user_memory",
          "user_stats.append",
          "memory.items",
          "USER_MEMORY_FILE.exists",
          "str",
          "HTTPException",
          "int",
          "USER_MEMORY_FILE.stat",
          "time.ctime",
          "last_message.get",
          "user_stats.sort",
          "app.get",
          "memory.values",
          "sum"
        ]
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "Dict",
        "FastAPI",
        "HTTPException",
        "List",
        "Optional",
        "Path",
        "Query",
        "aiohttp",
        "asyncio",
        "datetime",
        "fastapi",
        "json",
        "pathlib",
        "pydantic",
        "time",
        "timedelta",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b7f33d0f-e572-41cd-ac23-5a5fadcefadf"
    },
    {
      "module_id": "archive.telegram_experiments.fastapi_ollama_server",
      "path": "archive/telegram_experiments/fastapi_ollama_server.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f LLMStruct\n- Ollama \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f\n- \u041f\u0430\u043c\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \n- \u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b\n- \u0412\u0441\u0435 \u0432 \u043e\u0434\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b",
      "functions": [
        {
          "name": "load_user_memory",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439",
          "line_range": [
            56,
            64
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "save_user_memory",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439",
          "line_range": [
            66,
            72
          ],
          "parameters": [
            "memory"
          ],
          "decorators": []
        },
        {
          "name": "load_ollama_config",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 Ollama",
          "line_range": [
            74,
            82
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "root",
          "docstring": "\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 API",
          "line_range": [
            114,
            131
          ],
          "parameters": [],
          "decorators": [
            "app.get('/', summary='API Information')"
          ]
        },
        {
          "name": "health_check",
          "docstring": "Health check \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 Ollama",
          "line_range": [
            134,
            155
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/system/health', response_model=HealthResponse)"
          ]
        },
        {
          "name": "system_status",
          "docstring": "\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            158,
            246
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/system/status')"
          ]
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
          "line_range": [
            251,
            319
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/chat/ollama')"
          ]
        },
        {
          "name": "get_ollama_models",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Ollama",
          "line_range": [
            322,
            350
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/ollama/models')"
          ]
        },
        {
          "name": "save_user_message",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            355,
            389
          ],
          "parameters": [
            "message"
          ],
          "decorators": [
            "app.post('/api/v1/memory/save')"
          ]
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            392,
            415
          ],
          "parameters": [
            "user_id",
            "limit"
          ],
          "decorators": [
            "app.get('/api/v1/memory/history/{user_id}')"
          ]
        },
        {
          "name": "memory_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            418,
            450
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/memory/stats')"
          ]
        },
        {
          "name": "clear_user_memory",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            453,
            476
          ],
          "parameters": [
            "user_id"
          ],
          "decorators": [
            "app.delete('/api/v1/memory/clear/{user_id}')"
          ]
        },
        {
          "name": "startup_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435",
          "line_range": [
            481,
            488
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('startup')"
          ]
        },
        {
          "name": "shutdown_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435",
          "line_range": [
            491,
            499
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('shutdown')"
          ]
        }
      ],
      "classes": [
        {
          "name": "UserMessage",
          "docstring": "",
          "line_range": [
            85,
            90
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "OllamaRequest",
          "docstring": "",
          "line_range": [
            92,
            97
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ChatMessage",
          "docstring": "",
          "line_range": [
            99,
            102
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HealthResponse",
          "docstring": "",
          "line_range": [
            104,
            109
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        }
      ],
      "callgraph": {
        "load_user_memory": [
          "json.load",
          "open",
          "print",
          "USER_MEMORY_FILE.exists"
        ],
        "save_user_memory": [
          "print",
          "open",
          "json.dump"
        ],
        "load_ollama_config": [
          "toml.load",
          "open"
        ],
        "root": [
          "app.get"
        ],
        "health_check": [
          "track_workflow_event",
          "aiohttp.ClientSession",
          "load_ollama_config",
          "app.get",
          "HealthResponse",
          "time.strftime",
          "session.get",
          "aiohttp.ClientTimeout"
        ],
        "system_status": [
          "load_ollama_config",
          "Path",
          "data.get",
          "int",
          "track_task_start",
          "struct_file.stat",
          "app.get",
          "memory.values",
          "get_metrics_tracker",
          "resp.json",
          "aiohttp.ClientTimeout",
          "track_task_complete",
          "track_workflow_event",
          "str",
          "tracker.get_session_summary",
          "aiohttp.ClientSession",
          "HTTPException",
          "time.strftime",
          "session.get",
          "struct_file.exists",
          "len",
          "load_user_memory",
          "USER_MEMORY_FILE.exists",
          "time.ctime",
          "sum",
          "time.time"
        ],
        "chat_with_ollama": [
          "response_text.split",
          "resp.text",
          "load_ollama_config",
          "data.get",
          "int",
          "track_task_start",
          "session.post",
          "get_metrics_tracker",
          "resp.json",
          "aiohttp.ClientTimeout",
          "track_task_complete",
          "track_workflow_event",
          "str",
          "aiohttp.ClientSession",
          "HTTPException",
          "time.strftime",
          "tracker.track_token_usage",
          "app.post",
          "len",
          "time.time"
        ],
        "get_ollama_models": [
          "aiohttp.ClientTimeout",
          "len",
          "str",
          "aiohttp.ClientSession",
          "HTTPException",
          "load_ollama_config",
          "app.get",
          "model.get",
          "models.append",
          "session.get",
          "data.get",
          "resp.json"
        ],
        "save_user_message": [
          "len",
          "load_user_memory",
          "track_workflow_event",
          "str",
          "HTTPException",
          "save_user_memory",
          "time.strftime",
          "app.post"
        ],
        "get_user_history": [
          "len",
          "Query",
          "load_user_memory",
          "track_workflow_event",
          "str",
          "HTTPException",
          "app.get",
          "memory.get"
        ],
        "memory_stats": [
          "len",
          "load_user_memory",
          "user_stats.append",
          "memory.items",
          "USER_MEMORY_FILE.exists",
          "str",
          "HTTPException",
          "int",
          "USER_MEMORY_FILE.stat",
          "time.ctime",
          "last_message.get",
          "user_stats.sort",
          "app.get",
          "memory.values",
          "sum"
        ],
        "clear_user_memory": [
          "len",
          "load_user_memory",
          "app.delete",
          "track_workflow_event",
          "str",
          "HTTPException",
          "save_user_memory",
          "memory.get",
          "time.strftime"
        ],
        "startup_event": [
          "print",
          "get_metrics_tracker",
          "track_workflow_event",
          "app.on_event"
        ],
        "shutdown_event": [
          "print",
          "track_workflow_event",
          "tracker.save_session",
          "app.on_event",
          "get_metrics_tracker"
        ]
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "CORSMiddleware",
        "Dict",
        "FastAPI",
        "HTTPException",
        "List",
        "Optional",
        "Path",
        "Query",
        "aiohttp",
        "asyncio",
        "datetime",
        "fastapi",
        "fastapi.middleware.cors",
        "get_metrics_tracker",
        "json",
        "pathlib",
        "pydantic",
        "src.llmstruct.metrics_tracker",
        "time",
        "timedelta",
        "toml",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event",
        "typing",
        "uvicorn"
      ],
      "hash": null,
      "artifact_id": "1482d2b3-e046-4cf2-9b1f-c0f2045822f1"
    },
    {
      "module_id": "archive.telegram_experiments.dummy_work_executor",
      "path": "archive/telegram_experiments/dummy_work_executor.py",
      "category": "core",
      "module_doc": "Dummy Work Executor - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0432\u0443\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u0439 \u0441\u0432\u044f\u0437\u0438 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0447\u0435\u0440\u0435\u0437 Telegram",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            340,
            350
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            31,
            43
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0447\u0435\u0440\u0435\u0437 Telegram",
          "line_range": [
            45,
            61
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "check_user_response",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u043b\u043e\u0433\u043e\u0432",
          "line_range": [
            63,
            102
          ],
          "parameters": [
            "self",
            "expected_keywords"
          ],
          "decorators": []
        },
        {
          "name": "wait_for_user_input",
          "docstring": "\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u043e\u043c",
          "line_range": [
            104,
            118
          ],
          "parameters": [
            "self",
            "timeout",
            "expected_keywords"
          ],
          "decorators": []
        },
        {
          "name": "dummy_phase_1",
          "docstring": "Dummy Phase 1: \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0432\u044f\u0437\u0438",
          "line_range": [
            120,
            173
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "dummy_phase_2",
          "docstring": "Dummy Phase 2: \u0413\u043e\u0442\u043e\u0432\u043d\u043e\u0441\u0442\u044c \u043a \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u0443",
          "line_range": [
            175,
            296
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "execute_dummy_work",
          "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430 dummy work",
          "line_range": [
            298,
            338
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "DummyWorkExecutor",
          "docstring": "\u0418\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c dummy work \u0441 \u0434\u0432\u0443\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u0439 \u0441\u0432\u044f\u0437\u044c\u044e",
          "line_range": [
            28,
            338
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                31,
                43
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0447\u0435\u0440\u0435\u0437 Telegram",
              "line_range": [
                45,
                61
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "check_user_response",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u043b\u043e\u0433\u043e\u0432",
              "line_range": [
                63,
                102
              ],
              "parameters": [
                "self",
                "expected_keywords"
              ]
            },
            {
              "name": "wait_for_user_input",
              "docstring": "\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u043e\u043c",
              "line_range": [
                104,
                118
              ],
              "parameters": [
                "self",
                "timeout",
                "expected_keywords"
              ]
            },
            {
              "name": "dummy_phase_1",
              "docstring": "Dummy Phase 1: \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0432\u044f\u0437\u0438",
              "line_range": [
                120,
                173
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "dummy_phase_2",
              "docstring": "Dummy Phase 2: \u0413\u043e\u0442\u043e\u0432\u043d\u043e\u0441\u0442\u044c \u043a \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u0443",
              "line_range": [
                175,
                296
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "execute_dummy_work",
              "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430 dummy work",
              "line_range": [
                298,
                338
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Bot",
          "track_workflow_event",
          "os.getenv",
          "int",
          "time.time"
        ],
        "send_message": [
          "print"
        ],
        "check_user_response": [
          "content.split",
          "len",
          "next",
          "message.lower",
          "print",
          "keyword.lower",
          "f.read",
          "last_entry.strip",
          "line.startswith",
          "messages_log.exists",
          "open",
          "Path",
          "message_line.replace"
        ],
        "wait_for_user_input": [
          "asyncio.sleep",
          "print",
          "self.check_user_response",
          "time.time"
        ],
        "dummy_phase_1": [
          "print",
          "track_task_complete",
          "self.wait_for_user_input",
          "self.send_message",
          "track_task_start"
        ],
        "dummy_phase_2": [
          "print",
          "track_task_complete",
          "any",
          "track_workflow_event",
          "self.wait_for_user_input",
          "self.send_message",
          "track_task_start",
          "user_message.lower"
        ],
        "execute_dummy_work": [
          "print",
          "track_workflow_event",
          "asyncio.sleep",
          "str",
          "self.dummy_phase_1",
          "self.send_message",
          "datetime.now",
          "self.dummy_phase_2"
        ],
        "main": [
          "executor.execute_dummy_work",
          "print",
          "DummyWorkExecutor"
        ]
      },
      "dependencies": [
        "Bot",
        "Path",
        "asyncio",
        "datetime",
        "os",
        "pathlib",
        "src.llmstruct.metrics_tracker",
        "sys",
        "telegram",
        "time",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event"
      ],
      "hash": null,
      "artifact_id": "616af452-2497-441a-be7f-2118718c3ae5"
    },
    {
      "module_id": "archive.telegram_experiments.cursor_telegram_reader",
      "path": "archive/telegram_experiments/cursor_telegram_reader.py",
      "category": "core",
      "module_doc": "Cursor Telegram Reader - \u0427\u0438\u0442\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0437 Telegram \u0431\u043e\u0442\u0430 \u0434\u043b\u044f Cursor",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            153,
            202
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            20
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_latest_messages",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
          "line_range": [
            22,
            56
          ],
          "parameters": [
            "self",
            "count"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_commands",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f Cursor \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0447\u0430\u0441\u044b",
          "line_range": [
            58,
            91
          ],
          "parameters": [
            "self",
            "hours"
          ],
          "decorators": []
        },
        {
          "name": "watch_new_messages",
          "docstring": "\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438",
          "line_range": [
            93,
            127
          ],
          "parameters": [
            "self",
            "callback"
          ],
          "decorators": []
        },
        {
          "name": "print_status",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
          "line_range": [
            129,
            151
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TelegramLogReader",
          "docstring": "\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c \u043b\u043e\u0433\u043e\u0432 Telegram \u0434\u043b\u044f Cursor",
          "line_range": [
            13,
            151
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                20
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_latest_messages",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
              "line_range": [
                22,
                56
              ],
              "parameters": [
                "self",
                "count"
              ]
            },
            {
              "name": "get_cursor_commands",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f Cursor \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0447\u0430\u0441\u044b",
              "line_range": [
                58,
                91
              ],
              "parameters": [
                "self",
                "hours"
              ]
            },
            {
              "name": "watch_new_messages",
              "docstring": "\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438",
              "line_range": [
                93,
                127
              ],
              "parameters": [
                "self",
                "callback"
              ]
            },
            {
              "name": "print_status",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
              "line_range": [
                129,
                151
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "get_latest_messages": [
          "content.split",
          "len",
          "print",
          "type_line.replace",
          "f.read",
          "open",
          "messages.append",
          "message_line.replace",
          "user_line.replace",
          "entry.strip"
        ],
        "get_cursor_commands": [
          "len",
          "print",
          "line.split",
          "commands.append",
          "timedelta",
          "open",
          "f.readlines",
          "datetime.now",
          "datetime.strptime"
        ],
        "watch_new_messages": [
          "print",
          "f.seek",
          "f.read",
          "new_content.strip",
          "callback",
          "open",
          "time.sleep"
        ],
        "print_status": [
          "print",
          "datetime.fromtimestamp"
        ],
        "main": [
          "len",
          "print",
          "reader.print_status",
          "reader.watch_new_messages",
          "int",
          "reader.get_cursor_commands",
          "TelegramLogReader",
          "reader.get_latest_messages"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "sys",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "522ca700-2722-4bf5-98c8-c2fb708ca17a"
    },
    {
      "module_id": "archive.telegram_experiments.cursor_bot_messenger",
      "path": "archive/telegram_experiments/cursor_bot_messenger.py",
      "category": "core",
      "module_doc": "Cursor Bot Messenger - \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0447\u0435\u0440\u0435\u0437 Telegram",
      "functions": [
        {
          "name": "send_to_user",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
          "line_range": [
            113,
            116
          ],
          "parameters": [
            "message"
          ],
          "decorators": []
        },
        {
          "name": "wait_for_response",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430",
          "line_range": [
            118,
            121
          ],
          "parameters": [
            "timeout_minutes"
          ],
          "decorators": []
        },
        {
          "name": "interactive_communication",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0432\u043e\u043f\u0440\u043e\u0441 \u0438 \u0434\u043e\u0436\u0434\u0430\u0442\u044c\u0441\u044f \u043e\u0442\u0432\u0435\u0442\u0430",
          "line_range": [
            123,
            134
          ],
          "parameters": [
            "question",
            "timeout_minutes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            22,
            30
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_user_chat_id",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 chat_id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u043b\u043e\u0433\u043e\u0432",
          "line_range": [
            32,
            50
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e",
          "line_range": [
            52,
            71
          ],
          "parameters": [
            "self",
            "message",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "wait_for_user_response",
          "docstring": "\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            73,
            111
          ],
          "parameters": [
            "self",
            "timeout_minutes"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            145,
            146
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorBotMessenger",
          "docstring": "\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438\u0437 Cursor \u0432 Telegram",
          "line_range": [
            19,
            111
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                22,
                30
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_user_chat_id",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 chat_id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u043b\u043e\u0433\u043e\u0432",
              "line_range": [
                32,
                50
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e",
              "line_range": [
                52,
                71
              ],
              "parameters": [
                "self",
                "message",
                "parse_mode"
              ]
            },
            {
              "name": "wait_for_user_response",
              "docstring": "\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                73,
                111
              ],
              "parameters": [
                "self",
                "timeout_minutes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "ValueError",
          "Path",
          "os.getenv",
          "Bot"
        ],
        "get_user_chat_id": [
          "content.split",
          "print",
          "reversed",
          "line.split",
          "f.read",
          "int",
          "messages_log.exists",
          "open"
        ],
        "send_message": [
          "self.get_user_chat_id",
          "print"
        ],
        "wait_for_user_response": [
          "content.split",
          "print",
          "len",
          "datetime.fromisoformat",
          "reversed",
          "asyncio.sleep",
          "f.read",
          "messages_log.exists",
          "open",
          "datetime.now",
          "entry.strip",
          "time.time"
        ],
        "send_to_user": [
          "CursorBotMessenger",
          "messenger.send_message"
        ],
        "wait_for_response": [
          "CursorBotMessenger",
          "messenger.wait_for_user_response"
        ],
        "interactive_communication": [
          "CursorBotMessenger",
          "messenger.send_message",
          "messenger.wait_for_user_response"
        ],
        "main": [
          "send_to_user"
        ]
      },
      "dependencies": [
        "Bot",
        "Path",
        "asyncio",
        "datetime",
        "logging",
        "os",
        "pathlib",
        "sys",
        "telegram",
        "time"
      ],
      "hash": null,
      "artifact_id": "16d83e84-04eb-4ae9-bf0c-ad1ec61bf0e8"
    },
    {
      "module_id": "archive.telegram_experiments.send_test_message",
      "path": "archive/telegram_experiments/send_test_message.py",
      "category": "core",
      "module_doc": "Test message sender to Telegram\n\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438 \u0436\u0434\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
      "functions": [
        {
          "name": "send_test_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 Telegram",
          "line_range": [
            13,
            57
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "wait_for_user_response",
          "docstring": "\u0416\u0434\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u043b\u043e\u0433\u043e\u0432",
          "line_range": [
            59,
            101
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
          "line_range": [
            103,
            120
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "send_test_message": [
          "client.post",
          "print",
          "os.getenv",
          "httpx.AsyncClient",
          "datetime.now"
        ],
        "wait_for_user_response": [
          "start_time.strftime",
          "print",
          "datetime.fromisoformat",
          "reversed",
          "line.split",
          "log_time.strftime",
          "asyncio.sleep",
          "open",
          "timestamp_str.replace",
          "f.readlines",
          "datetime.now"
        ],
        "main": [
          "send_test_message",
          "print",
          "wait_for_user_response"
        ]
      },
      "dependencies": [
        "asyncio",
        "datetime",
        "httpx",
        "os",
        "sys"
      ],
      "hash": null,
      "artifact_id": "165223d6-ccba-416c-9a66-13583bdf95b0"
    },
    {
      "module_id": "archive.telegram_experiments.cursor_integration",
      "path": "archive/telegram_experiments/cursor_integration.py",
      "category": "core",
      "module_doc": "\ud83c\udfaf Cursor Integration for Telegram Master Controller\n\u041f\u0440\u043e\u0441\u0442\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 Cursor \u0441 Telegram \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u043c",
      "functions": [
        {
          "name": "check_telegram_commands",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            142,
            144
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "send_telegram_message",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            146,
            148
          ],
          "parameters": [
            "message",
            "msg_type"
          ],
          "decorators": []
        },
        {
          "name": "update_telegram_status",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0443\u0441\u0430",
          "line_range": [
            150,
            152
          ],
          "parameters": [
            "message",
            "status"
          ],
          "decorators": []
        },
        {
          "name": "send_progress",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            154,
            156
          ],
          "parameters": [
            "step",
            "details",
            "progress"
          ],
          "decorators": []
        },
        {
          "name": "send_completion",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438",
          "line_range": [
            158,
            160
          ],
          "parameters": [
            "summary",
            "success"
          ],
          "decorators": []
        },
        {
          "name": "ask_confirmation",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f",
          "line_range": [
            162,
            164
          ],
          "parameters": [
            "question",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            25
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "check_for_commands",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            27,
            48
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_response",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0432 Telegram",
          "line_range": [
            50,
            78
          ],
          "parameters": [
            "self",
            "message",
            "response_type"
          ],
          "decorators": []
        },
        {
          "name": "update_status",
          "docstring": "\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f",
          "line_range": [
            80,
            96
          ],
          "parameters": [
            "self",
            "message",
            "status"
          ],
          "decorators": []
        },
        {
          "name": "send_progress_update",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            98,
            109
          ],
          "parameters": [
            "self",
            "step",
            "details",
            "progress"
          ],
          "decorators": []
        },
        {
          "name": "send_completion",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438",
          "line_range": [
            111,
            124
          ],
          "parameters": [
            "self",
            "summary",
            "success"
          ],
          "decorators": []
        },
        {
          "name": "ask_for_confirmation",
          "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441\u0438\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            126,
            137
          ],
          "parameters": [
            "self",
            "question",
            "context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorTelegramIntegration",
          "docstring": "\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f Cursor \u0441 Telegram Master Controller",
          "line_range": [
            13,
            137
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                25
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "check_for_commands",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                27,
                48
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_response",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0432 Telegram",
              "line_range": [
                50,
                78
              ],
              "parameters": [
                "self",
                "message",
                "response_type"
              ]
            },
            {
              "name": "update_status",
              "docstring": "\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f",
              "line_range": [
                80,
                96
              ],
              "parameters": [
                "self",
                "message",
                "status"
              ]
            },
            {
              "name": "send_progress_update",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                98,
                109
              ],
              "parameters": [
                "self",
                "step",
                "details",
                "progress"
              ]
            },
            {
              "name": "send_completion",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438",
              "line_range": [
                111,
                124
              ],
              "parameters": [
                "self",
                "summary",
                "success"
              ]
            },
            {
              "name": "ask_for_confirmation",
              "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441\u0438\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                126,
                137
              ],
              "parameters": [
                "self",
                "question",
                "context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "set"
        ],
        "check_for_commands": [
          "print",
          "cmd.get",
          "open",
          "json.load",
          "new_commands.append"
        ],
        "send_response": [
          "responses.append",
          "len",
          "print",
          "json.dump",
          "int",
          "open",
          "json.load",
          "datetime.now",
          "time.time"
        ],
        "update_status": [
          "datetime.now",
          "open",
          "print",
          "json.dump"
        ],
        "send_progress_update": [
          "self.send_response",
          "self.update_status"
        ],
        "send_completion": [
          "_integration.send_completion"
        ],
        "ask_for_confirmation": [
          "self.send_response",
          "self.update_status"
        ],
        "check_telegram_commands": [
          "_integration.check_for_commands"
        ],
        "send_telegram_message": [
          "_integration.send_response"
        ],
        "update_telegram_status": [
          "_integration.update_status"
        ],
        "send_progress": [
          "_integration.send_progress_update"
        ],
        "ask_confirmation": [
          "_integration.ask_for_confirmation"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c8e12b55-c917-4791-a8ed-44cf5fe83fbe"
    },
    {
      "module_id": "archive.telegram_experiments.cursor_simple_integration",
      "path": "archive/telegram_experiments/cursor_simple_integration.py",
      "category": "core",
      "module_doc": "\u041f\u0440\u043e\u0441\u0442\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 Cursor \u0441 Telegram \u0431\u043e\u0442\u043e\u043c\n\u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 JSON \u0444\u0430\u0439\u043b\u044b \u0431\u0435\u0437 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439",
      "functions": [
        {
          "name": "ensure_data_dir",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445",
          "line_range": [
            20,
            27
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_user_messages",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n\nArgs:\n    limit: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e 10)\n\nReturns:\n    \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            29,
            50
          ],
          "parameters": [
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "send_to_telegram",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram \u0447\u0435\u0440\u0435\u0437 \u0431\u043e\u0442\u0430\n\nArgs:\n    text: \u0422\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\n    message_type: \u0422\u0438\u043f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (response, notification, etc.)\n\nReturns:\n    True \u0435\u0441\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c",
          "line_range": [
            52,
            94
          ],
          "parameters": [
            "text",
            "message_type"
          ],
          "decorators": []
        },
        {
          "name": "check_new_messages",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438\n\nArgs:\n    last_check_timestamp: ISO timestamp \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\n\nReturns:\n    \u0421\u043f\u0438\u0441\u043e\u043a \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            96,
            126
          ],
          "parameters": [
            "last_check_timestamp"
          ],
          "decorators": []
        },
        {
          "name": "get_last_message",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n\nReturns:\n    \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 None",
          "line_range": [
            128,
            136
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_conversation_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430\n\nReturns:\n    \u0421\u0442\u0430\u0442\u0443\u0441 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430 \u0441 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438",
          "line_range": [
            138,
            178
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "start_conversation_monitor",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n\nArgs:\n    callback_func: \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n    check_interval: \u0418\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445",
          "line_range": [
            180,
            214
          ],
          "parameters": [
            "callback_func",
            "check_interval"
          ],
          "decorators": []
        },
        {
          "name": "quick_reply",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u0432 Telegram",
          "line_range": [
            218,
            220
          ],
          "parameters": [
            "text"
          ],
          "decorators": []
        },
        {
          "name": "quick_status",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            222,
            224
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "quick_notification",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u043e\u0435 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435",
          "line_range": [
            226,
            228
          ],
          "parameters": [
            "text"
          ],
          "decorators": []
        },
        {
          "name": "list_recent_messages",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
          "line_range": [
            230,
            243
          ],
          "parameters": [
            "count"
          ],
          "decorators": []
        },
        {
          "name": "test_integration",
          "docstring": "\u0422\u0435\u0441\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438",
          "line_range": [
            245,
            264
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "ensure_data_dir": [
          "file.write_text",
          "DATA_DIR.mkdir",
          "file.exists"
        ],
        "get_user_messages": [
          "json.load",
          "open",
          "print",
          "ensure_data_dir"
        ],
        "send_to_telegram": [
          "len",
          "print",
          "ensure_data_dir",
          "json.dump",
          "commands.append",
          "int",
          "open",
          "json.load",
          "datetime.now",
          "time.time"
        ],
        "check_new_messages": [
          "print",
          "msg.get",
          "ensure_data_dir",
          "new_messages.append",
          "open",
          "json.load"
        ],
        "get_last_message": [
          "get_user_messages"
        ],
        "show_conversation_status": [
          "len",
          "print",
          "ensure_data_dir",
          "CURSOR_COMMANDS_FILE.exists",
          "str",
          "cmd.get",
          "USER_MESSAGES_FILE.exists",
          "open",
          "json.load",
          "Path",
          "datetime.now",
          "BOT_RESPONSES_FILE.exists"
        ],
        "start_conversation_monitor": [
          "len",
          "print",
          "msg.get",
          "ensure_data_dir",
          "max",
          "time.sleep",
          "check_new_messages",
          "datetime.now",
          "callback_func"
        ],
        "quick_reply": [
          "send_to_telegram"
        ],
        "quick_status": [
          "datetime.now",
          "send_to_telegram"
        ],
        "quick_notification": [
          "send_to_telegram"
        ],
        "list_recent_messages": [
          "len",
          "print",
          "msg.get",
          "enumerate",
          "get_user_messages"
        ],
        "test_integration": [
          "print",
          "show_conversation_status",
          "send_to_telegram",
          "ensure_data_dir"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "sys",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f9b70d25-6cbe-46dc-b28d-93bb2d0d586f"
    },
    {
      "module_id": "archive.telegram_experiments.start_simple_telegram",
      "path": "archive/telegram_experiments/start_simple_telegram.py",
      "category": "core",
      "module_doc": "\u0421\u043a\u0440\u0438\u043f\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f Cursor \u2194 Telegram\n\u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0438 \u043d\u0430\u0434\u0435\u0436\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439",
      "functions": [
        {
          "name": "check_token",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430",
          "line_range": [
            14,
            23
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_dependencies",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439",
          "line_range": [
            25,
            34
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "start_bot",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0431\u043e\u0442\u0430",
          "line_range": [
            36,
            76
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_integration",
          "docstring": "\u0422\u0435\u0441\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438",
          "line_range": [
            78,
            87
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_status",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            89,
            112
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            114,
            144
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_token": [
          "os.getenv",
          "print"
        ],
        "check_dependencies": [
          "print"
        ],
        "start_bot": [
          "process.wait",
          "print",
          "check_dependencies",
          "check_token",
          "process.terminate",
          "Path.cwd",
          "subprocess.Popen",
          "process.kill"
        ],
        "test_integration": [
          "test_integration",
          "print"
        ],
        "show_status": [
          "print",
          "show_conversation_status",
          "msg.get",
          "status.get",
          "list_recent_messages"
        ],
        "main": [
          "len",
          "print",
          "test_integration",
          "show_status",
          "start_bot"
        ]
      },
      "dependencies": [
        "Path",
        "cursor_simple_integration",
        "list_recent_messages",
        "os",
        "pathlib",
        "requests",
        "show_conversation_status",
        "signal",
        "subprocess",
        "sys",
        "test_integration",
        "time"
      ],
      "hash": null,
      "artifact_id": "e922a5f2-bb55-4e2f-bb22-b5d619b4e93a"
    },
    {
      "module_id": "archive.telegram_experiments.chat_bot_fastapi_enhanced",
      "path": "archive/telegram_experiments/chat_bot_fastapi_enhanced.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 ENHANCED Telegram Bot \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432\u0430\u0448 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f:\n- \u041a\u0435\u0448\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 WebSocket\n- \u041f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 API endpoints\n- \u041c\u0435\u0442\u0440\u0438\u043a \u0447\u0435\u0440\u0435\u0437 API\n\n\u0411\u043e\u043b\u044c\u0448\u0435 \u043d\u0438\u043a\u0430\u043a\u0438\u0445 CLI \u0432\u044b\u0437\u043e\u0432\u043e\u0432 - \u0432\u0441\u0435 \u0447\u0435\u0440\u0435\u0437 API!",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            342,
            378
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            35,
            43
          ],
          "parameters": [
            "self",
            "telegram_token",
            "fastapi_base_url"
          ],
          "decorators": []
        },
        {
          "name": "setup_session",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            45,
            48
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "close_session",
          "docstring": "\u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            50,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "health_check_api",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            55,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_user_message_via_api",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            71,
            102
          ],
          "parameters": [
            "self",
            "user_id",
            "username",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_user_history_via_api",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            104,
            122
          ],
          "parameters": [
            "self",
            "user_id",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama_via_api",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 FastAPI endpoint",
          "line_range": [
            124,
            150
          ],
          "parameters": [
            "self",
            "message",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_system_metrics_via_api",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            152,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            164,
            172
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            174,
            198
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "memory_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory - \u0442\u0435\u0441\u0442 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            200,
            207
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "history_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /history - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e",
          "line_range": [
            209,
            228
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "health_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /health - \u0441\u0442\u0430\u0442\u0443\u0441 FastAPI",
          "line_range": [
            230,
            237
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "metrics_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics - \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            239,
            269
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "ollama_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u0447\u0430\u0442 \u0441 Ollama",
          "line_range": [
            271,
            289
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            291,
            321
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
          "line_range": [
            323,
            340
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "FastAPIIntegratedBot",
          "docstring": "Telegram \u0431\u043e\u0442 \u0441 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
          "line_range": [
            32,
            340
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                35,
                43
              ],
              "parameters": [
                "self",
                "telegram_token",
                "fastapi_base_url"
              ]
            },
            {
              "name": "setup_session",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                45,
                48
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "close_session",
              "docstring": "\u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                50,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "health_check_api",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
              "line_range": [
                55,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_user_message_via_api",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                71,
                102
              ],
              "parameters": [
                "self",
                "user_id",
                "username",
                "message"
              ]
            },
            {
              "name": "get_user_history_via_api",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                104,
                122
              ],
              "parameters": [
                "self",
                "user_id",
                "limit"
              ]
            },
            {
              "name": "chat_with_ollama_via_api",
              "docstring": "\u0427\u0430\u0442 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 FastAPI endpoint",
              "line_range": [
                124,
                150
              ],
              "parameters": [
                "self",
                "message",
                "context"
              ]
            },
            {
              "name": "get_system_metrics_via_api",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                152,
                162
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                164,
                172
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                174,
                198
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "memory_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory - \u0442\u0435\u0441\u0442 \u043f\u0430\u043c\u044f\u0442\u0438",
              "line_range": [
                200,
                207
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "history_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /history - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e",
              "line_range": [
                209,
                228
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "health_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /health - \u0441\u0442\u0430\u0442\u0443\u0441 FastAPI",
              "line_range": [
                230,
                237
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "metrics_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics - \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                239,
                269
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "ollama_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u0447\u0430\u0442 \u0441 Ollama",
              "line_range": [
                271,
                289
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                291,
                321
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "run",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
              "line_range": [
                323,
                340
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.setup_handlers",
          "Application.builder"
        ],
        "setup_session": [
          "aiohttp.ClientSession"
        ],
        "close_session": [],
        "health_check_api": [
          "resp.json",
          "self.setup_session",
          "logger.info",
          "data.get",
          "logger.error"
        ],
        "save_user_message_via_api": [
          "logger.warning",
          "self.setup_session",
          "logger.info",
          "datetime.now",
          "logger.error"
        ],
        "get_user_history_via_api": [
          "len",
          "logger.warning",
          "self.setup_session",
          "logger.info",
          "logger.error",
          "data.get",
          "resp.json"
        ],
        "chat_with_ollama_via_api": [
          "resp.json",
          "str",
          "self.setup_session",
          "logger.info",
          "data.get",
          "logger.error"
        ],
        "get_system_metrics_via_api": [
          "str",
          "self.setup_session",
          "resp.json"
        ],
        "setup_handlers": [
          "MessageHandler",
          "CommandHandler"
        ],
        "start_command": [
          "self.save_user_message_via_api"
        ],
        "memory_command": [
          "self.save_user_message_via_api"
        ],
        "history_command": [
          "len",
          "self.get_user_history_via_api",
          "msg.get",
          "int"
        ],
        "health_command": [
          "self.health_check_api"
        ],
        "metrics_command": [
          "metrics.get",
          "features.get",
          "system.get",
          "self.get_system_metrics_via_api",
          "struct_json.get"
        ],
        "ollama_command": [
          "self.chat_with_ollama_via_api",
          "status_msg.edit_text",
          "self.save_user_message_via_api"
        ],
        "handle_message": [
          "message_text.replace",
          "msg.get",
          "self.chat_with_ollama_via_api",
          "enumerate",
          "self.get_user_history_via_api",
          "self.save_user_message_via_api",
          "message_text.startswith",
          "message_text.lower"
        ],
        "run": [
          "logger.warning",
          "logger.info",
          "self.close_session",
          "self.health_check_api",
          "logger.error"
        ],
        "main": [
          "FastAPIIntegratedBot",
          "print",
          "bot.run",
          "asyncio.get_event_loop",
          "os.getenv",
          "asyncio.set_event_loop",
          "loop.run_until_complete",
          "traceback.print_exc",
          "asyncio.new_event_loop",
          "loop.close",
          "exit"
        ]
      },
      "dependencies": [
        "Application",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "json",
        "logging",
        "os",
        "telegram",
        "telegram.ext",
        "timedelta",
        "traceback",
        "websockets"
      ],
      "hash": null,
      "artifact_id": "2c6ad960-4e53-48f5-b782-425183c97167"
    },
    {
      "module_id": "archive.telegram_bots.chat_bot_enhanced",
      "path": "archive/telegram_bots/chat_bot_enhanced.py",
      "category": "core",
      "module_doc": "Enhanced LLMStruct Telegram Bot\n- Smart reply detection (reply_to_message support)\n- LLM chain: Ollama \u2192 Grok \u2192 Anthropic\n- Cursor command forwarding to Cursor AI\n- Concise responses by default",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point",
          "line_range": [
            439,
            459
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            37,
            68
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "log_user_message",
          "docstring": "Log user message with reply context",
          "line_range": [
            70,
            83
          ],
          "parameters": [
            "self",
            "user_info",
            "message",
            "message_type",
            "chat_id",
            "reply_to_message"
          ],
          "decorators": []
        },
        {
          "name": "log_cursor_command",
          "docstring": "Log cursor command for processing",
          "line_range": [
            85,
            95
          ],
          "parameters": [
            "self",
            "message",
            "user_info",
            "reply_context"
          ],
          "decorators": []
        },
        {
          "name": "ollama_chat",
          "docstring": "Try Ollama first",
          "line_range": [
            97,
            114
          ],
          "parameters": [
            "self",
            "message",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "grok_chat",
          "docstring": "Fallback to Grok",
          "line_range": [
            116,
            143
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "anthropic_chat",
          "docstring": "Final fallback to Anthropic",
          "line_range": [
            145,
            173
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "llm_chain_response",
          "docstring": "LLM chain: Ollama \u2192 Grok \u2192 Anthropic",
          "line_range": [
            175,
            194
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "Setup bot handlers",
          "line_range": [
            196,
            208
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "Start command handler",
          "line_range": [
            210,
            236
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "help_command",
          "docstring": "Help command",
          "line_range": [
            238,
            260
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "Status command",
          "line_range": [
            262,
            287
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "Handle all text messages with smart routing",
          "line_range": [
            289,
            368
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "Run bot synchronously with timeout",
          "line_range": [
            370,
            437
          ],
          "parameters": [
            "self",
            "timeout_minutes"
          ],
          "decorators": []
        },
        {
          "name": "signal_handler",
          "docstring": "",
          "line_range": [
            374,
            377
          ],
          "parameters": [
            "signum",
            "frame"
          ],
          "decorators": []
        },
        {
          "name": "run_with_timeout",
          "docstring": "",
          "line_range": [
            396,
            413
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EnhancedLLMStructChatBot",
          "docstring": "Enhanced Telegram bot with LLM chain and smart reply detection",
          "line_range": [
            34,
            437
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                37,
                68
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "log_user_message",
              "docstring": "Log user message with reply context",
              "line_range": [
                70,
                83
              ],
              "parameters": [
                "self",
                "user_info",
                "message",
                "message_type",
                "chat_id",
                "reply_to_message"
              ]
            },
            {
              "name": "log_cursor_command",
              "docstring": "Log cursor command for processing",
              "line_range": [
                85,
                95
              ],
              "parameters": [
                "self",
                "message",
                "user_info",
                "reply_context"
              ]
            },
            {
              "name": "ollama_chat",
              "docstring": "Try Ollama first",
              "line_range": [
                97,
                114
              ],
              "parameters": [
                "self",
                "message",
                "model"
              ]
            },
            {
              "name": "grok_chat",
              "docstring": "Fallback to Grok",
              "line_range": [
                116,
                143
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "anthropic_chat",
              "docstring": "Final fallback to Anthropic",
              "line_range": [
                145,
                173
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "llm_chain_response",
              "docstring": "LLM chain: Ollama \u2192 Grok \u2192 Anthropic",
              "line_range": [
                175,
                194
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "Setup bot handlers",
              "line_range": [
                196,
                208
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "Start command handler",
              "line_range": [
                210,
                236
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "help_command",
              "docstring": "Help command",
              "line_range": [
                238,
                260
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "Status command",
              "line_range": [
                262,
                287
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "Handle all text messages with smart routing",
              "line_range": [
                289,
                368
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "Run bot synchronously with timeout",
              "line_range": [
                370,
                437
              ],
              "parameters": [
                "self",
                "timeout_minutes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Bot",
          "track_workflow_event",
          "os.getenv",
          "os.makedirs",
          "logging.basicConfig",
          "get_metrics_tracker",
          "logging.getLogger"
        ],
        "log_user_message": [
          "user_info.get",
          "f.write",
          "open",
          "reply_to_message.get",
          "datetime.now"
        ],
        "log_cursor_command": [
          "f.write",
          "user_info.get",
          "datetime.now",
          "open"
        ],
        "ollama_chat": [
          "client.post",
          "result.get",
          "httpx.AsyncClient",
          "response.json"
        ],
        "grok_chat": [
          "client.post",
          "httpx.AsyncClient",
          "response.json"
        ],
        "anthropic_chat": [
          "client.post",
          "httpx.AsyncClient",
          "response.json"
        ],
        "llm_chain_response": [
          "self.grok_chat",
          "self.anthropic_chat",
          "self.ollama_chat"
        ],
        "setup_handlers": [
          "MessageHandler",
          "Application.builder",
          "CommandHandler"
        ],
        "start_command": [],
        "help_command": [],
        "status_command": [
          "len",
          "response.json",
          "status_parts.append",
          "httpx.AsyncClient",
          "client.get"
        ],
        "handle_message": [
          "len",
          "text.split",
          "user.to_dict",
          "track_workflow_event",
          "response.split",
          "self.log_user_message",
          "self.llm_chain_response",
          "track_task_complete",
          "message.reply_text",
          "int",
          "track_token_usage",
          "track_task_start",
          "cursor_message.split",
          "text.lower",
          "self.log_cursor_command",
          "reply_to_message.get",
          "time.time"
        ],
        "run_sync": [],
        "signal_handler": [],
        "run_with_timeout": [
          "application.initialize",
          "asyncio.sleep",
          "application.start",
          "application.stop",
          "application.shutdown",
          "time.time"
        ],
        "main": [
          "print",
          "argparse.ArgumentParser",
          "EnhancedLLMStructChatBot",
          "os.getenv",
          "bot.run_sync",
          "parser.add_argument",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "Any",
        "Application",
        "Bot",
        "CommandHandler",
        "ContextTypes",
        "Dict",
        "MessageHandler",
        "Optional",
        "Update",
        "argparse",
        "asyncio",
        "datetime",
        "filters",
        "get_metrics_tracker",
        "httpx",
        "json",
        "logging",
        "os",
        "signal",
        "src.llmstruct.metrics_tracker",
        "sys",
        "telegram",
        "telegram.ext",
        "time",
        "traceback",
        "track_task_complete",
        "track_task_start",
        "track_token_usage",
        "track_workflow_event",
        "typing"
      ],
      "hash": null,
      "artifact_id": "40e85f9f-b738-46dd-98fb-2506daff8ab3"
    },
    {
      "module_id": "archive.telegram_bots.cursor_telegram_bridge",
      "path": "archive/telegram_bots/cursor_telegram_bridge.py",
      "category": "core",
      "module_doc": "Cursor \u2194 Telegram Bridge\n\u0427\u0438\u0442\u0430\u0435\u0442 cursor \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u044b \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0432 Telegram",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point",
          "line_range": [
            218,
            226
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            36
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_telegram_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 Telegram",
          "line_range": [
            38,
            62
          ],
          "parameters": [
            "self",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "process_cursor_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c cursor \u043a\u043e\u043c\u0430\u043d\u0434\u0443",
          "line_range": [
            64,
            85
          ],
          "parameters": [
            "self",
            "command_data"
          ],
          "decorators": []
        },
        {
          "name": "simulate_cursor_processing",
          "docstring": "\u0421\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434s Cursor AI",
          "line_range": [
            87,
            175
          ],
          "parameters": [
            "self",
            "command",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_cursor_command",
          "docstring": "Handle cursor command (sync wrapper)",
          "line_range": [
            177,
            188
          ],
          "parameters": [
            "self",
            "command_data"
          ],
          "decorators": []
        },
        {
          "name": "start_bridge",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c bridge",
          "line_range": [
            190,
            216
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorTelegramBridge",
          "docstring": "Bridge \u043c\u0435\u0436\u0434\u0443 cursor \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438 \u0438 Telegram \u043e\u0442\u0432\u0435\u0442\u0430\u043c\u0438",
          "line_range": [
            21,
            216
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                36
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_telegram_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 Telegram",
              "line_range": [
                38,
                62
              ],
              "parameters": [
                "self",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "process_cursor_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c cursor \u043a\u043e\u043c\u0430\u043d\u0434\u0443",
              "line_range": [
                64,
                85
              ],
              "parameters": [
                "self",
                "command_data"
              ]
            },
            {
              "name": "simulate_cursor_processing",
              "docstring": "\u0421\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434s Cursor AI",
              "line_range": [
                87,
                175
              ],
              "parameters": [
                "self",
                "command",
                "context"
              ]
            },
            {
              "name": "handle_cursor_command",
              "docstring": "Handle cursor command (sync wrapper)",
              "line_range": [
                177,
                188
              ],
              "parameters": [
                "self",
                "command_data"
              ]
            },
            {
              "name": "start_bridge",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c bridge",
              "line_range": [
                190,
                216
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getenv",
          "EnhancedCursorTelegramReader"
        ],
        "send_telegram_message": [
          "client.post",
          "print",
          "httpx.AsyncClient"
        ],
        "process_cursor_command": [
          "print",
          "self.simulate_cursor_processing",
          "command_data.get",
          "result.get",
          "self.send_telegram_message"
        ],
        "simulate_cursor_processing": [
          "asyncio.sleep",
          "command.lower",
          "any",
          "len"
        ],
        "handle_cursor_command": [
          "print",
          "self.process_cursor_command",
          "asyncio.run"
        ],
        "start_bridge": [
          "print",
          "self.send_telegram_message",
          "asyncio.run"
        ],
        "main": [
          "bridge.start_bridge",
          "os.getenv",
          "CursorTelegramBridge",
          "print"
        ]
      },
      "dependencies": [
        "Dict",
        "EnhancedCursorTelegramReader",
        "Optional",
        "asyncio",
        "cursor_telegram_reader_enhanced",
        "datetime",
        "httpx",
        "json",
        "os",
        "sys",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "dd58be72-8aaa-470f-9848-a733e20163a7"
    },
    {
      "module_id": "archive.telegram_bots.start_ollama_bot",
      "path": "archive/telegram_bots/start_ollama_bot.py",
      "category": "core",
      "module_doc": "Quick launcher for Ollama Chat Bot",
      "functions": [
        {
          "name": "check_dependencies",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438",
          "line_range": [
            11,
            25
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_services",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u044c \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432",
          "line_range": [
            27,
            65
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            67,
            118
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_ollama",
          "docstring": "",
          "line_range": [
            36,
            51
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_dependencies": [
          "print",
          "__import__"
        ],
        "check_services": [
          "print"
        ],
        "check_ollama": [
          "len",
          "print",
          "response.json",
          "httpx.AsyncClient",
          "client.get"
        ],
        "main": [
          "check_services",
          "print",
          "os.getenv",
          "check_dependencies",
          "Path.cwd",
          "Path",
          "subprocess.run"
        ]
      },
      "dependencies": [
        "Path",
        "asyncio",
        "httpx",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "7fb680df-1883-4b08-ac46-4fd47f166c98"
    },
    {
      "module_id": "archive.telegram_bots.ollama_chat_bot",
      "path": "archive/telegram_bots/ollama_chat_bot.py",
      "category": "core",
      "module_doc": "LLMStruct Ollama Chat Bot\n\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0439 \u0431\u043e\u0442 \u0441 \u041e\u043b\u043b\u0430\u043c\u043e\u0439, fallback \u043d\u0430 \u0413\u0440\u043e\u043a/\u0410\u043d\u0442\u0440\u043e\u043f\u0438\u043a, \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043e\u043c \u043a \u0444\u0430\u0439\u043b\u0430\u043c",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0422\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430",
          "line_range": [
            646,
            668
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            53,
            57
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama",
          "line_range": [
            59,
            83
          ],
          "parameters": [
            "self",
            "messages",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_grok",
          "docstring": "Fallback \u043d\u0430 Grok",
          "line_range": [
            85,
            110
          ],
          "parameters": [
            "self",
            "messages"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_anthropic",
          "docstring": "Fallback \u043d\u0430 Anthropic",
          "line_range": [
            112,
            153
          ],
          "parameters": [
            "self",
            "messages"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            158,
            159
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "read_file",
          "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u0444\u0430\u0439\u043b \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e",
          "line_range": [
            161,
            189
          ],
          "parameters": [
            "self",
            "file_path",
            "max_lines"
          ],
          "decorators": []
        },
        {
          "name": "list_directory",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
          "line_range": [
            191,
            223
          ],
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "run_cli_command",
          "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 CLI \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            225,
            269
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            274,
            284
          ],
          "parameters": [
            "self",
            "storage_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            286,
            315
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            317,
            341
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_or_create_session",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            343,
            360
          ],
          "parameters": [
            "self",
            "chat_id",
            "user_id",
            "user_name"
          ],
          "decorators": []
        },
        {
          "name": "add_message",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            362,
            380
          ],
          "parameters": [
            "self",
            "session",
            "role",
            "content",
            "model_used"
          ],
          "decorators": []
        },
        {
          "name": "get_conversation_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430 \u0434\u043b\u044f LLM",
          "line_range": [
            382,
            394
          ],
          "parameters": [
            "self",
            "session",
            "max_messages"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            399,
            408
          ],
          "parameters": [
            "self",
            "bot_token"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 Telegram",
          "line_range": [
            410,
            420
          ],
          "parameters": [
            "self",
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "_send_single_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0434\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
          "line_range": [
            422,
            438
          ],
          "parameters": [
            "self",
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "get_updates",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0442 Telegram",
          "line_range": [
            440,
            455
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_task_report",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0447\u0435\u0442 \u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0447\u0430\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430",
          "line_range": [
            457,
            472
          ],
          "parameters": [
            "self",
            "task_description",
            "status",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ai",
          "docstring": "\u041e\u0431\u0449\u0430\u0435\u0442\u0441\u044f \u0441 AI (Ollama + fallback)",
          "line_range": [
            474,
            506
          ],
          "parameters": [
            "self",
            "session",
            "user_message"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
          "line_range": [
            508,
            621
          ],
          "parameters": [
            "self",
            "update"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0446\u0438\u043a\u043b \u0431\u043e\u0442\u0430",
          "line_range": [
            623,
            644
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ChatMessage",
          "docstring": "",
          "line_range": [
            31,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ChatSession",
          "docstring": "",
          "line_range": [
            39,
            48
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ModelManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 LLM \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430\u043c\u0438",
          "line_range": [
            50,
            153
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                53,
                57
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "chat_with_ollama",
              "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama",
              "line_range": [
                59,
                83
              ],
              "parameters": [
                "self",
                "messages",
                "model"
              ]
            },
            {
              "name": "chat_with_grok",
              "docstring": "Fallback \u043d\u0430 Grok",
              "line_range": [
                85,
                110
              ],
              "parameters": [
                "self",
                "messages"
              ]
            },
            {
              "name": "chat_with_anthropic",
              "docstring": "Fallback \u043d\u0430 Anthropic",
              "line_range": [
                112,
                153
              ],
              "parameters": [
                "self",
                "messages"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "FileManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043e\u043c \u043a \u0444\u0430\u0439\u043b\u0430\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0447\u0435\u0440\u0435\u0437 CLI",
          "line_range": [
            155,
            269
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                158,
                159
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "read_file",
              "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u0444\u0430\u0439\u043b \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e",
              "line_range": [
                161,
                189
              ],
              "parameters": [
                "self",
                "file_path",
                "max_lines"
              ]
            },
            {
              "name": "list_directory",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
              "line_range": [
                191,
                223
              ],
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "run_cli_command",
              "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 CLI \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                225,
                269
              ],
              "parameters": [
                "self",
                "command"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "MemoryManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u043e\u0432",
          "line_range": [
            271,
            394
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                274,
                284
              ],
              "parameters": [
                "self",
                "storage_dir"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                286,
                315
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435",
              "line_range": [
                317,
                341
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_or_create_session",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                343,
                360
              ],
              "parameters": [
                "self",
                "chat_id",
                "user_id",
                "user_name"
              ]
            },
            {
              "name": "add_message",
              "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                362,
                380
              ],
              "parameters": [
                "self",
                "session",
                "role",
                "content",
                "model_used"
              ]
            },
            {
              "name": "get_conversation_context",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430 \u0434\u043b\u044f LLM",
              "line_range": [
                382,
                394
              ],
              "parameters": [
                "self",
                "session",
                "max_messages"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "OllamaChatBot",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 Telegram \u0431\u043e\u0442\u0430",
          "line_range": [
            396,
            644
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                399,
                408
              ],
              "parameters": [
                "self",
                "bot_token"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 Telegram",
              "line_range": [
                410,
                420
              ],
              "parameters": [
                "self",
                "chat_id",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "_send_single_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0434\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
              "line_range": [
                422,
                438
              ],
              "parameters": [
                "self",
                "chat_id",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "get_updates",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0442 Telegram",
              "line_range": [
                440,
                455
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_task_report",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0447\u0435\u0442 \u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0447\u0430\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430",
              "line_range": [
                457,
                472
              ],
              "parameters": [
                "self",
                "task_description",
                "status",
                "details"
              ]
            },
            {
              "name": "chat_with_ai",
              "docstring": "\u041e\u0431\u0449\u0430\u0435\u0442\u0441\u044f \u0441 AI (Ollama + fallback)",
              "line_range": [
                474,
                506
              ],
              "parameters": [
                "self",
                "session",
                "user_message"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
              "line_range": [
                508,
                621
              ],
              "parameters": [
                "self",
                "update"
              ]
            },
            {
              "name": "run",
              "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0446\u0438\u043a\u043b \u0431\u043e\u0442\u0430",
              "line_range": [
                623,
                644
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logger.info",
          "ModelManager",
          "FileManager",
          "MemoryManager"
        ],
        "chat_with_ollama": [
          "client.post",
          "response.json",
          "httpx.AsyncClient",
          "result.get",
          "logger.error"
        ],
        "chat_with_grok": [
          "client.post",
          "httpx.AsyncClient",
          "response.json",
          "logger.error"
        ],
        "chat_with_anthropic": [
          "client.post",
          "response.json",
          "httpx.AsyncClient",
          "user_messages.append",
          "logger.error"
        ],
        "read_file": [
          "len",
          "full_path.is_dir",
          "str",
          "open",
          "f.readlines",
          "full_path.exists"
        ],
        "list_directory": [
          "len",
          "sorted",
          "full_path.is_dir",
          "str",
          "items.append",
          "item.stat",
          "full_path.iterdir",
          "item.is_dir",
          "full_path.exists"
        ],
        "run_cli_command": [
          "len",
          "safe_commands.keys",
          "str",
          "command.split",
          "subprocess.run"
        ],
        "_load_data": [
          "ChatSession",
          "len",
          "ChatMessage",
          "logger.info",
          "open",
          "data.values",
          "json.load",
          "session_data.get",
          "logger.error"
        ],
        "_save_data": [
          "asdict",
          "open",
          "json.dump",
          "logger.error"
        ],
        "get_or_create_session": [
          "ChatSession",
          "datetime.now"
        ],
        "add_message": [
          "len",
          "datetime.now",
          "ChatMessage",
          "self._save_data"
        ],
        "get_conversation_context": [
          "context.append"
        ],
        "send_message": [
          "len",
          "enumerate",
          "range",
          "self._send_single_message"
        ],
        "_send_single_message": [
          "client.post",
          "httpx.AsyncClient",
          "response.json",
          "logger.error"
        ],
        "get_updates": [
          "client.get",
          "httpx.AsyncClient",
          "response.json",
          "logger.error"
        ],
        "send_task_report": [
          "self.send_message",
          "datetime.now",
          "logger.info"
        ],
        "chat_with_ai": [
          "logger.info",
          "context.append"
        ],
        "handle_message": [
          "len",
          "self.chat_with_ai",
          "text.startswith",
          "logger.info",
          "self.send_message",
          "update.get",
          "message.get"
        ],
        "run": [
          "asyncio.sleep",
          "logger.info",
          "self.get_updates",
          "updates.get",
          "self.handle_message",
          "logger.error"
        ],
        "main": [
          "print",
          "OllamaChatBot",
          "bot.run",
          "os.getenv",
          "bot.send_task_report",
          "Path"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asdict",
        "asyncio",
        "dataclass",
        "dataclasses",
        "datetime",
        "httpx",
        "json",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "e0ceac30-261e-4ce9-a46a-cae88d5c659e"
    },
    {
      "module_id": "archive.telegram_bots.demo_bot_features",
      "path": "archive/telegram_bots/demo_bot_features.py",
      "category": "core",
      "module_doc": "\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 Ollama Chat Bot",
      "functions": [
        {
          "name": "demo_task_reporting",
          "docstring": "\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043e\u0442\u0447\u0435\u0442\u043e\u0432",
          "line_range": [
            9,
            57
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_bot_commands",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u043c\u0430\u043d\u0434 \u0431\u043e\u0442\u0430",
          "line_range": [
            59,
            78
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_architecture",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            80,
            106
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438",
          "line_range": [
            108,
            125
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "demo_task_reporting": [
          "report_completed",
          "print",
          "time.sleep",
          "report_started",
          "report_progress"
        ],
        "show_bot_commands": [
          "print"
        ],
        "show_architecture": [
          "print"
        ],
        "main": [
          "demo_task_reporting",
          "print",
          "show_bot_commands",
          "show_architecture"
        ]
      },
      "dependencies": [
        "cursor_reporter",
        "report_completed",
        "report_progress",
        "report_started",
        "time"
      ],
      "hash": null,
      "artifact_id": "04caa2d0-9ecd-4621-bd06-f5d0aa3fce2d"
    },
    {
      "module_id": "archive.telegram_bots.cursor_reporter",
      "path": "archive/telegram_bots/cursor_reporter.py",
      "category": "core",
      "module_doc": "Cursor Task Reporter\n\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043e\u0442\u0447\u0435\u0442\u043e\u0432 \u043e \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u0432 Telegram",
      "functions": [
        {
          "name": "report_task_started",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            93,
            96
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_task_progress",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            98,
            101
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_task_completed",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            103,
            106
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_task_failed",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            108,
            111
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_started",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f - \u043e\u0442\u0447\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435",
          "line_range": [
            114,
            116
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_progress",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f - \u043e\u0442\u0447\u0435\u0442 \u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0435",
          "line_range": [
            118,
            120
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_completed",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f - \u043e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438",
          "line_range": [
            122,
            124
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_failed",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f - \u043e\u0442\u0447\u0435\u0442 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435",
          "line_range": [
            126,
            128
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            21
          ],
          "parameters": [
            "self",
            "bot_token",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "send_report",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0434\u0430\u0447\u0435",
          "line_range": [
            23,
            90
          ],
          "parameters": [
            "self",
            "task",
            "status",
            "details",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "escape_markdown",
          "docstring": "\u042d\u043a\u0440\u0430\u043d\u0438\u0440\u0443\u0435\u0442 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b Markdown",
          "line_range": [
            48,
            53
          ],
          "parameters": [
            "text"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorReporter",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0447\u0435\u0442\u044b \u043e \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u0432 Telegram",
          "line_range": [
            13,
            90
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                21
              ],
              "parameters": [
                "self",
                "bot_token",
                "chat_id"
              ]
            },
            {
              "name": "send_report",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0434\u0430\u0447\u0435",
              "line_range": [
                23,
                90
              ],
              "parameters": [
                "self",
                "task",
                "status",
                "details",
                "priority"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "ValueError",
          "os.getenv"
        ],
        "send_report": [
          "priority_emojis.get",
          "status_emojis.get",
          "priority.lower",
          "status.lower"
        ],
        "escape_markdown": [
          "text.replace"
        ],
        "report_task_started": [
          "reporter.send_report",
          "CursorReporter"
        ],
        "report_task_progress": [
          "reporter.send_report",
          "CursorReporter"
        ],
        "report_task_completed": [
          "reporter.send_report",
          "CursorReporter"
        ],
        "report_task_failed": [
          "reporter.send_report",
          "CursorReporter"
        ],
        "report_started": [
          "report_task_started",
          "asyncio.run"
        ],
        "report_progress": [
          "report_task_progress",
          "asyncio.run"
        ],
        "report_completed": [
          "asyncio.run",
          "report_task_completed"
        ],
        "report_failed": [
          "report_task_failed",
          "asyncio.run"
        ]
      },
      "dependencies": [
        "Optional",
        "asyncio",
        "datetime",
        "httpx",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "883aa011-3cd5-4456-bc8d-b1450725cf10"
    },
    {
      "module_id": "archive.telegram_bots.ollama_api_bot",
      "path": "archive/telegram_bots/ollama_api_bot.py",
      "category": "core",
      "module_doc": "Ollama Chat Bot \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0439 FastAPI API \u0432\u043c\u0435\u0441\u0442\u043e CLI\n\u0411\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 API \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            468,
            487
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            50,
            52
          ],
          "parameters": [
            "self",
            "api_base_url"
          ],
          "decorators": []
        },
        {
          "name": "__aenter__",
          "docstring": "",
          "line_range": [
            54,
            56
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__aexit__",
          "docstring": "",
          "line_range": [
            58,
            60
          ],
          "parameters": [
            "self",
            "exc_type",
            "exc_val",
            "exc_tb"
          ],
          "decorators": []
        },
        {
          "name": "health_check",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f API",
          "line_range": [
            62,
            65
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "system_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            67,
            70
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "chat_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0447\u0430\u0442 \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            72,
            80
          ],
          "parameters": [
            "self",
            "message",
            "context_mode",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "execute_cli_command",
          "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 CLI \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            82,
            89
          ],
          "parameters": [
            "self",
            "command",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "get_metrics",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            91,
            94
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            99,
            101
          ],
          "parameters": [
            "self",
            "api_client"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u044f\u043c\u043e\u0439 API",
          "line_range": [
            103,
            121
          ],
          "parameters": [
            "self",
            "messages",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_api_fallback",
          "docstring": "Fallback \u0447\u0435\u0440\u0435\u0437 FastAPI \u0447\u0430\u0442",
          "line_range": [
            123,
            130
          ],
          "parameters": [
            "self",
            "message",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            135,
            137
          ],
          "parameters": [
            "self",
            "api_client"
          ],
          "decorators": []
        },
        {
          "name": "read_file",
          "docstring": "\u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430 \u0447\u0435\u0440\u0435\u0437 API \u043a\u043e\u043c\u0430\u043d\u0434\u044b",
          "line_range": [
            139,
            147
          ],
          "parameters": [
            "self",
            "file_path",
            "max_lines"
          ],
          "decorators": []
        },
        {
          "name": "get_system_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            149,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            167,
            175
          ],
          "parameters": [
            "self",
            "storage_dir",
            "api_client"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0441\u0435\u0441\u0441\u0438\u0439 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            177,
            189
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0439 \u0432 \u0444\u0430\u0439\u043b",
          "line_range": [
            191,
            208
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_or_create_session",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            210,
            227
          ],
          "parameters": [
            "self",
            "chat_id",
            "user_id",
            "user_name"
          ],
          "decorators": []
        },
        {
          "name": "add_message",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            229,
            246
          ],
          "parameters": [
            "self",
            "session",
            "role",
            "content",
            "model_used"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            251,
            264
          ],
          "parameters": [
            "self",
            "bot_token",
            "api_base_url"
          ],
          "decorators": []
        },
        {
          "name": "_signal_handler",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441\u0438\u0433\u043d\u0430\u043b\u043e\u0432 \u0434\u043b\u044f graceful shutdown",
          "line_range": [
            266,
            269
          ],
          "parameters": [
            "self",
            "signum",
            "frame"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
          "line_range": [
            271,
            284
          ],
          "parameters": [
            "self",
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "get_updates",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0442 Telegram",
          "line_range": [
            286,
            295
          ],
          "parameters": [
            "self",
            "offset"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ai",
          "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 AI \u0447\u0435\u0440\u0435\u0437 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 API",
          "line_range": [
            297,
            321
          ],
          "parameters": [
            "self",
            "session",
            "user_message"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
          "line_range": [
            323,
            361
          ],
          "parameters": [
            "self",
            "update"
          ],
          "decorators": []
        },
        {
          "name": "handle_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434 \u0431\u043e\u0442\u0430",
          "line_range": [
            363,
            431
          ],
          "parameters": [
            "self",
            "chat_id",
            "command",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
          "line_range": [
            433,
            466
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ChatMessage",
          "docstring": "",
          "line_range": [
            28,
            33
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ChatSession",
          "docstring": "",
          "line_range": [
            36,
            45
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "APIClient",
          "docstring": "\u041a\u043b\u0438\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c",
          "line_range": [
            47,
            94
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                50,
                52
              ],
              "parameters": [
                "self",
                "api_base_url"
              ]
            },
            {
              "name": "__aenter__",
              "docstring": "",
              "line_range": [
                54,
                56
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "__aexit__",
              "docstring": "",
              "line_range": [
                58,
                60
              ],
              "parameters": [
                "self",
                "exc_type",
                "exc_val",
                "exc_tb"
              ]
            },
            {
              "name": "health_check",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f API",
              "line_range": [
                62,
                65
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "system_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                67,
                70
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "chat_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0447\u0430\u0442 \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                72,
                80
              ],
              "parameters": [
                "self",
                "message",
                "context_mode",
                "session_id"
              ]
            },
            {
              "name": "execute_cli_command",
              "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 CLI \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                82,
                89
              ],
              "parameters": [
                "self",
                "command",
                "args"
              ]
            },
            {
              "name": "get_metrics",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a",
              "line_range": [
                91,
                94
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "ModelManager",
          "docstring": "\u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 LLM \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441 API \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439",
          "line_range": [
            96,
            130
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                99,
                101
              ],
              "parameters": [
                "self",
                "api_client"
              ]
            },
            {
              "name": "chat_with_ollama",
              "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u044f\u043c\u043e\u0439 API",
              "line_range": [
                103,
                121
              ],
              "parameters": [
                "self",
                "messages",
                "model"
              ]
            },
            {
              "name": "chat_with_api_fallback",
              "docstring": "Fallback \u0447\u0435\u0440\u0435\u0437 FastAPI \u0447\u0430\u0442",
              "line_range": [
                123,
                130
              ],
              "parameters": [
                "self",
                "message",
                "session_id"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "FileManager",
          "docstring": "\u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0444\u0430\u0439\u043b\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            132,
            162
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                135,
                137
              ],
              "parameters": [
                "self",
                "api_client"
              ]
            },
            {
              "name": "read_file",
              "docstring": "\u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430 \u0447\u0435\u0440\u0435\u0437 API \u043a\u043e\u043c\u0430\u043d\u0434\u044b",
              "line_range": [
                139,
                147
              ],
              "parameters": [
                "self",
                "file_path",
                "max_lines"
              ]
            },
            {
              "name": "get_system_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                149,
                162
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "MemoryManager",
          "docstring": "\u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u0430\u043c\u044f\u0442\u0438 \u0441 API \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439",
          "line_range": [
            164,
            246
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                167,
                175
              ],
              "parameters": [
                "self",
                "storage_dir",
                "api_client"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0441\u0435\u0441\u0441\u0438\u0439 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                177,
                189
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0439 \u0432 \u0444\u0430\u0439\u043b",
              "line_range": [
                191,
                208
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_or_create_session",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                210,
                227
              ],
              "parameters": [
                "self",
                "chat_id",
                "user_id",
                "user_name"
              ]
            },
            {
              "name": "add_message",
              "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                229,
                246
              ],
              "parameters": [
                "self",
                "session",
                "role",
                "content",
                "model_used"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "OllamaAPIBot",
          "docstring": "Telegram \u0431\u043e\u0442 \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
          "line_range": [
            248,
            466
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                251,
                264
              ],
              "parameters": [
                "self",
                "bot_token",
                "api_base_url"
              ]
            },
            {
              "name": "_signal_handler",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441\u0438\u0433\u043d\u0430\u043b\u043e\u0432 \u0434\u043b\u044f graceful shutdown",
              "line_range": [
                266,
                269
              ],
              "parameters": [
                "self",
                "signum",
                "frame"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
              "line_range": [
                271,
                284
              ],
              "parameters": [
                "self",
                "chat_id",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "get_updates",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0442 Telegram",
              "line_range": [
                286,
                295
              ],
              "parameters": [
                "self",
                "offset"
              ]
            },
            {
              "name": "chat_with_ai",
              "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 AI \u0447\u0435\u0440\u0435\u0437 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 API",
              "line_range": [
                297,
                321
              ],
              "parameters": [
                "self",
                "session",
                "user_message"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
              "line_range": [
                323,
                361
              ],
              "parameters": [
                "self",
                "update"
              ]
            },
            {
              "name": "handle_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434 \u0431\u043e\u0442\u0430",
              "line_range": [
                363,
                431
              ],
              "parameters": [
                "self",
                "chat_id",
                "command",
                "session"
              ]
            },
            {
              "name": "run",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
              "line_range": [
                433,
                466
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "signal.signal",
          "MemoryManager",
          "logging.getLogger"
        ],
        "__aenter__": [
          "aiohttp.ClientSession"
        ],
        "__aexit__": [],
        "health_check": [
          "response.json"
        ],
        "system_status": [
          "response.json"
        ],
        "chat_message": [
          "response.json"
        ],
        "execute_cli_command": [
          "response.json"
        ],
        "get_metrics": [
          "response.json"
        ],
        "chat_with_ollama": [
          "session.post",
          "logging.error",
          "aiohttp.ClientSession",
          "response.json"
        ],
        "chat_with_api_fallback": [
          "logging.error",
          "result.get"
        ],
        "read_file": [
          "result.get"
        ],
        "get_system_status": [],
        "_load_data": [
          "ChatSession",
          "logging.error",
          "ChatMessage",
          "open",
          "json.load",
          "data.get"
        ],
        "_save_data": [
          "json.dump",
          "asdict",
          "logging.error",
          "open",
          "datetime.now",
          "sessions_data.append"
        ],
        "get_or_create_session": [
          "ChatSession",
          "datetime.now"
        ],
        "add_message": [
          "len",
          "content.split",
          "ChatMessage",
          "self._save_data",
          "datetime.now"
        ],
        "_signal_handler": [],
        "send_message": [
          "session.post",
          "aiohttp.ClientSession",
          "response.json"
        ],
        "get_updates": [
          "aiohttp.ClientSession",
          "response.json",
          "session.get"
        ],
        "chat_with_ai": [
          "messages.append",
          "ModelManager",
          "model_manager.chat_with_api_fallback",
          "model_manager.chat_with_ollama"
        ],
        "handle_message": [
          "self.handle_command",
          "locals",
          "self.chat_with_ai",
          "text.startswith",
          "self.send_message",
          "update.get",
          "message.get"
        ],
        "handle_command": [
          "file_manager.get_system_status",
          "len",
          "self.send_message",
          "FileManager"
        ],
        "run": [
          "APIClient",
          "asyncio.sleep",
          "self.get_updates",
          "updates.get",
          "self.handle_message"
        ],
        "main": [
          "print",
          "bot.run",
          "logging.error",
          "os.getenv",
          "logging.info",
          "OllamaAPIBot"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "aiohttp",
        "asdict",
        "asyncio",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "signal",
        "typing"
      ],
      "hash": null,
      "artifact_id": "03d33042-198d-45d5-a9ea-640dde296f44"
    },
    {
      "module_id": "archive.telegram_bots.start_api_bot",
      "path": "archive/telegram_bots/start_api_bot.py",
      "category": "core",
      "module_doc": "\u041b\u0430\u0443\u043d\u0447\u0435\u0440 \u0434\u043b\u044f Ollama API Bot \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430\u043c\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 API",
      "functions": [
        {
          "name": "check_environment",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f",
          "line_range": [
            13,
            30
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_api_server",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            32,
            53
          ],
          "parameters": [
            "api_url"
          ],
          "decorators": []
        },
        {
          "name": "check_ollama",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 Ollama",
          "line_range": [
            55,
            77
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_dependencies",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 Python \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439",
          "line_range": [
            79,
            99
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "start_api_server",
          "docstring": "\u041f\u043e\u043f\u044b\u0442\u043a\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 API \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            101,
            125
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            127,
            183
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_environment": [
          "print",
          "os.getenv"
        ],
        "check_api_server": [
          "print",
          "aiohttp.ClientSession",
          "response.json",
          "session.get"
        ],
        "check_ollama": [
          "len",
          "print",
          "response.json",
          "aiohttp.ClientSession",
          "session.get",
          "data.get"
        ],
        "check_dependencies": [
          "print",
          "__import__",
          "missing.append"
        ],
        "start_api_server": [
          "Path",
          "print",
          "time.sleep",
          "subprocess.Popen"
        ],
        "main": [
          "print",
          "check_ollama",
          "start_api_server",
          "asyncio.sleep",
          "os.getenv",
          "check_dependencies",
          "bot_main",
          "check_api_server",
          "Path",
          "check_environment"
        ]
      },
      "dependencies": [
        "Path",
        "aiohttp",
        "asyncio",
        "main",
        "ollama_api_bot",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "8872dd39-ab09-42a7-ba46-33094dead5c2"
    },
    {
      "module_id": "archive.telegram_bots.telegram_cursor_master",
      "path": "archive/telegram_bots/telegram_cursor_master.py",
      "category": "core",
      "module_doc": "\ud83c\udfaf LLMStruct Telegram Master Controller\n\u0415\u0434\u0438\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043b\u044f seamless \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u043e\u043c \u0447\u0435\u0440\u0435\u0437 Telegram\n\n\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430:\n- \u041e\u0434\u0438\u043d \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0439 Telegram Bot  \n- File-based communication \u0441 Cursor\n- Clear command protocols\n- Real-time status updates",
      "functions": [
        {
          "name": "main",
          "docstring": "Main function",
          "line_range": [
            355,
            395
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            40,
            60
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "Setup command and message handlers",
          "line_range": [
            62,
            75
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cmd_start",
          "docstring": "Start command",
          "line_range": [
            77,
            96
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Status command",
          "line_range": [
            98,
            119
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cmd_master",
          "docstring": "Master plan command",
          "line_range": [
            121,
            149
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cmd_stop",
          "docstring": "Stop command",
          "line_range": [
            151,
            171
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Help command",
          "line_range": [
            173,
            196
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "Handle regular messages",
          "line_range": [
            198,
            229
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "write_command",
          "docstring": "Write command to file for Cursor",
          "line_range": [
            231,
            251
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "read_status",
          "docstring": "Read current status",
          "line_range": [
            253,
            262
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_status",
          "docstring": "Update status file",
          "line_range": [
            264,
            279
          ],
          "parameters": [
            "self",
            "message",
            "status"
          ],
          "decorators": []
        },
        {
          "name": "start_response_watcher",
          "docstring": "Start watching for responses from Cursor",
          "line_range": [
            281,
            298
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_responses",
          "docstring": "Process responses from Cursor",
          "line_range": [
            300,
            316
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_response",
          "docstring": "Send response to Telegram",
          "line_range": [
            318,
            332
          ],
          "parameters": [
            "self",
            "response"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Run the master controller",
          "line_range": [
            334,
            353
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_in_thread",
          "docstring": "",
          "line_range": [
            372,
            376
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TelegramCursorMaster",
          "docstring": "\u041c\u0430\u0441\u0442\u0435\u0440-\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0447\u0435\u0440\u0435\u0437 Telegram",
          "line_range": [
            37,
            353
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                40,
                60
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "Setup command and message handlers",
              "line_range": [
                62,
                75
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cmd_start",
              "docstring": "Start command",
              "line_range": [
                77,
                96
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Status command",
              "line_range": [
                98,
                119
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cmd_master",
              "docstring": "Master plan command",
              "line_range": [
                121,
                149
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cmd_stop",
              "docstring": "Stop command",
              "line_range": [
                151,
                171
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Help command",
              "line_range": [
                173,
                196
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "Handle regular messages",
              "line_range": [
                198,
                229
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "write_command",
              "docstring": "Write command to file for Cursor",
              "line_range": [
                231,
                251
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "read_status",
              "docstring": "Read current status",
              "line_range": [
                253,
                262
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_status",
              "docstring": "Update status file",
              "line_range": [
                264,
                279
              ],
              "parameters": [
                "self",
                "message",
                "status"
              ]
            },
            {
              "name": "start_response_watcher",
              "docstring": "Start watching for responses from Cursor",
              "line_range": [
                281,
                298
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_responses",
              "docstring": "Process responses from Cursor",
              "line_range": [
                300,
                316
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_response",
              "docstring": "Send response to Telegram",
              "line_range": [
                318,
                332
              ],
              "parameters": [
                "self",
                "response"
              ]
            },
            {
              "name": "run",
              "docstring": "Run the master controller",
              "line_range": [
                334,
                353
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Bot",
          "self.update_status",
          "logger.info",
          "self.setup_handlers",
          "Path",
          "Application.builder"
        ],
        "setup_handlers": [
          "MessageHandler",
          "CommandHandler"
        ],
        "cmd_start": [
          "logger.info"
        ],
        "cmd_status": [
          "status.get",
          "logger.info",
          "self.read_status"
        ],
        "cmd_master": [
          "self.write_command",
          "self.update_status",
          "logger.info",
          "int",
          "datetime.now",
          "time.time"
        ],
        "cmd_stop": [
          "self.write_command",
          "self.update_status",
          "logger.info",
          "int",
          "datetime.now",
          "time.time"
        ],
        "cmd_help": [],
        "handle_message": [
          "self.write_command",
          "logger.info",
          "int",
          "datetime.now",
          "time.time"
        ],
        "write_command": [
          "len",
          "json.dump",
          "logger.info",
          "commands.append",
          "open",
          "json.load",
          "logger.error"
        ],
        "read_status": [
          "open",
          "json.load",
          "logger.error"
        ],
        "update_status": [
          "json.dump",
          "logger.info",
          "open",
          "datetime.now",
          "logger.error"
        ],
        "start_response_watcher": [
          "asyncio.sleep",
          "self.process_responses",
          "logger.info",
          "logger.error"
        ],
        "process_responses": [
          "json.dump",
          "response.get",
          "self.send_response",
          "open",
          "json.load",
          "logger.error"
        ],
        "send_response": [
          "logger.info",
          "response.get",
          "logger.error"
        ],
        "run": [
          "logger.info",
          "self.start_response_watcher",
          "asyncio.create_task"
        ],
        "main": [
          "asyncio.get_event_loop",
          "os.getenv",
          "TelegramCursorMaster",
          "loop.is_running",
          "logger.error"
        ],
        "run_in_thread": [
          "new_loop.close",
          "master.run",
          "asyncio.set_event_loop",
          "new_loop.run_until_complete",
          "asyncio.new_event_loop"
        ]
      },
      "dependencies": [
        "Application",
        "Bot",
        "CommandHandler",
        "ContextTypes",
        "Dict",
        "List",
        "MessageHandler",
        "Optional",
        "Path",
        "Update",
        "asyncio",
        "datetime",
        "filters",
        "httpx",
        "json",
        "logging",
        "os",
        "pathlib",
        "sys",
        "telegram",
        "telegram.ext",
        "threading",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "bdba2773-e917-47ab-ab3a-6bcf90d12b23"
    },
    {
      "module_id": "cursor_workflow_integration.scripts.install_ai_integration",
      "path": "cursor_workflow_integration/scripts/install_ai_integration.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor\n\u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u043b\u044e\u0431\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
      "functions": [
        {
          "name": "install_ai_integration",
          "docstring": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u0432 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            12,
            58
          ],
          "parameters": [
            "target_project"
          ],
          "decorators": []
        },
        {
          "name": "adapt_cursorrules",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c .cursorrules \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            60,
            99
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "adapt_auto_init",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c auto_init_ai_system.py \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            101,
            123
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "create_simplified_auto_init",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e auto_init \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0431\u0435\u0437 llmstruct",
          "line_range": [
            125,
            189
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438",
          "line_range": [
            191,
            207
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "install_ai_integration": [
          "print",
          "adapt_auto_init",
          "source_path.exists",
          "adapt_cursorrules",
          "vscode_dir.mkdir",
          "shutil.copy2",
          "target_root.exists",
          "Path"
        ],
        "adapt_cursorrules": [
          "len",
          "content.replace",
          "print",
          "project_root.rglob",
          "cursorrules_path.read_text",
          "cursorrules_path.exists",
          "cursorrules_path.write_text",
          "list"
        ],
        "adapt_auto_init": [
          "content.replace",
          "print",
          "auto_init_path.exists",
          "create_simplified_auto_init",
          "auto_init_path.write_text",
          "auto_init_path.read_text"
        ],
        "create_simplified_auto_init": [],
        "main": [
          "install_ai_integration",
          "len",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "shutil",
        "sys"
      ],
      "hash": null,
      "artifact_id": "5d12425c-749c-4cd5-9bb4-7c3d195c8841"
    },
    {
      "module_id": "cursor_workflow_integration.files.auto_init_ai_system",
      "path": "cursor_workflow_integration/files/auto_init_ai_system.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor\n\u042d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439\nENHANCED: \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 workflow \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439, \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438 \u0438 context tags",
      "functions": [
        {
          "name": "auto_initialize_ai_system",
          "docstring": "\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            26,
            90
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_current_workflow_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 workflow \u0441\u0435\u0441\u0441\u0438\u0438 \u0438 workspace mode",
          "line_range": [
            92,
            128
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_workflow_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 workflow \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            130,
            178
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "switch_workspace_mode",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c workspace mode (\u0434\u043b\u044f CLI integration)",
          "line_range": [
            180,
            196
          ],
          "parameters": [
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            198,
            208
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "search_ai_capabilities",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u0445 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b (Enhanced with caching optimization)",
          "line_range": [
            210,
            271
          ],
          "parameters": [
            "query"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f AI \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435",
          "line_range": [
            273,
            304
          ],
          "parameters": [
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "get_epic_sessions_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u0441\u0435\u0445 \u044d\u043f\u0438\u043a-\u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            306,
            355
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "create_epic_session",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            357,
            378
          ],
          "parameters": [
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "switch_to_session",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            380,
            398
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "get_available_sessions",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            400,
            461
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "session_management_commands",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438",
          "line_range": [
            463,
            489
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "auto_initialize_ai_system": [
          "src_path.exists",
          "print",
          "len",
          "AI_CAPABILITIES.discover_all_capabilities",
          "get_current_workflow_context",
          "str",
          "logger.info",
          "SystemCapabilityDiscovery",
          "Path",
          "f.exists",
          "logger.error"
        ],
        "get_current_workflow_context": [
          "workspace.get",
          "logger.warning",
          "workspace_file.exists",
          "session_file.exists",
          "logger.info",
          "epic_data.get",
          "open",
          "json.load",
          "Path",
          "session.get",
          "roadmap_file.exists",
          "roadmap.get"
        ],
        "get_workflow_status": [
          "len",
          "auto_initialize_ai_system",
          "get_current_workflow_context",
          "str",
          "logger.error",
          "e.get",
          "open",
          "context.get",
          "json.load",
          "WorkspaceStateManager",
          "Path",
          "roadmap_file.exists",
          "roadmap.get"
        ],
        "switch_workspace_mode": [
          "get_current_workflow_context",
          "str",
          "logger.info",
          "WorkspaceStateManager",
          "ws.set_mode",
          "Path",
          "logger.error"
        ],
        "get_ai_status": [
          "get_workflow_status",
          "AI_STATUS.get",
          "AI_CAPABILITIES.get_enhanced_capabilities_summary",
          "auto_initialize_ai_system"
        ],
        "search_ai_capabilities": [
          "len",
          "cache_file.stat",
          "auto_initialize_ai_system",
          "json.dump",
          "results.append",
          "logger.info",
          "module.get",
          "open",
          "cache_file.exists",
          "json.load",
          "struct_file.stat",
          "query.lower",
          "func.get",
          "Path",
          "data.get",
          "logger.error"
        ],
        "get_ai_context": [
          "len",
          "auto_initialize_ai_system",
          "get_current_workflow_context",
          "AI_CAPABILITIES.discover_all_capabilities",
          "json.dumps",
          "logger.error"
        ],
        "get_epic_sessions_status": [
          "status_lines.append",
          "sessions_file.exists",
          "logger.error",
          "epic_data.get",
          "open",
          "json.load",
          "Path",
          "session.get",
          "roadmap_file.exists",
          "roadmap.get"
        ],
        "create_epic_session": [
          "os.system",
          "epic_id.split",
          "logger.info",
          "Path",
          "logger.error"
        ],
        "switch_to_session": [
          "os.system",
          "get_current_workflow_context",
          "logger.info",
          "Path",
          "logger.error"
        ],
        "get_available_sessions": [
          "sessions_file.exists",
          "sessions_data.get",
          "sessions_list.append",
          "current_session_file.exists",
          "logger.error",
          "epic_data.get",
          "current_data.get",
          "open",
          "json.load",
          "Path",
          "session.get",
          "roadmap_file.exists",
          "roadmap.get"
        ],
        "session_management_commands": []
      },
      "dependencies": [
        "Path",
        "SystemCapabilityDiscovery",
        "WorkspaceStateManager",
        "datetime",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.workspace",
        "logging",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "723625f8-26f1-4aa2-85f0-d38897d5ca34"
    }
  ]
}