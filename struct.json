{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-06-08T09:34:50.904155Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": {
      "goals": [
        "Create universal JSON format for codebase structure (modules, functions, classes, calls, metadata)",
        "Ensure extensibility for new languages and entity types",
        "Develop modular, plugin-based parsers for new languages",
        "Maintain an open, RFC-style documented format",
        "Integrate with LLMs by generating and attaching JSON structure to queries"
      ]
    },
    "stats": {
      "modules_count": 88,
      "functions_count": 521,
      "classes_count": 49,
      "call_edges_count": 1790
    },
    "artifact_id": "fab61826-d432-483e-812d-25bdbef63904",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "643b1a3e-349a-4033-8c97-1a50bdb07e1e",
        "metadata": {}
      },
      {
        "path": "README.md",
        "type": "file",
        "artifact_id": "68f8b977-f027-4c87-a11d-5c53eb09eadd",
        "metadata": {}
      },
      {
        "path": "TODO",
        "type": "directory",
        "artifact_id": "9e389085-9c96-4e27-a4aa-5db71094a3c3",
        "metadata": {}
      },
      {
        "path": "TODO/ast_fallback.md",
        "type": "file",
        "artifact_id": "cc4e65bb-46dd-4e2a-8df8-dacfd39edb3f",
        "metadata": {}
      },
      {
        "path": "TODO/llmstruct_workflow_meta.md",
        "type": "file",
        "artifact_id": "6618c08a-2d34-41c8-a7f2-b86b2330b61d",
        "metadata": {}
      },
      {
        "path": "cache.py",
        "type": "file",
        "artifact_id": "d8344924-f06f-425b-80ba-6a2cd99e94ae",
        "metadata": {}
      },
      {
        "path": "docker",
        "type": "directory",
        "artifact_id": "971064c7-583e-4b5c-8287-ce5879ccf83b",
        "metadata": {}
      },
      {
        "path": "docker/parser_go",
        "type": "directory",
        "artifact_id": "af2d45e6-4762-44c5-b238-8562d3384687",
        "metadata": {}
      },
      {
        "path": "docker/parsers",
        "type": "directory",
        "artifact_id": "2bb02282-084d-4422-89dd-b76bcfc3da19",
        "metadata": {}
      },
      {
        "path": "docker/parsers/base",
        "type": "directory",
        "artifact_id": "fad6c356-48e7-4934-b755-98149c43806f",
        "metadata": {}
      },
      {
        "path": "docker/parsers/go",
        "type": "directory",
        "artifact_id": "779ca9b8-a2fd-4e2e-b208-a3f567c692ab",
        "metadata": {}
      },
      {
        "path": "docker/parsers/python",
        "type": "directory",
        "artifact_id": "05a1daf5-7aba-4aec-a010-21a8b6edacba",
        "metadata": {}
      },
      {
        "path": "docs",
        "type": "directory",
        "artifact_id": "aaade072-3bb7-4425-8af7-c98242e4d8d4",
        "metadata": {}
      },
      {
        "path": "docs/hybrid_log.md",
        "type": "file",
        "artifact_id": "56c72f4b-1de7-4133-8c1b-e3db3cafaa2c",
        "metadata": {}
      },
      {
        "path": "docs/report",
        "type": "directory",
        "artifact_id": "b090627d-0a62-497e-a481-a92732f4dcb1",
        "metadata": {}
      },
      {
        "path": "docs/report/split_initial_structure_2024-06-12",
        "type": "directory",
        "artifact_id": "f6f345c2-e56b-4fc0-b5f0-c5295a8f4320",
        "metadata": {}
      },
      {
        "path": "docs/report/split_initial_structure_2024-06-12/summary.md",
        "type": "file",
        "artifact_id": "c354ba27-e840-461d-8361-c65fd85c16be",
        "metadata": {}
      },
      {
        "path": "epics",
        "type": "directory",
        "artifact_id": "918a2e01-ef8c-40d6-8436-4265327df1b5",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-5-CI-DOCKERIZED-PARSERS.md",
        "type": "file",
        "artifact_id": "4e97768e-044f-4480-955f-f581cd2fee66",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-6-VSCODE-PLUGIN.md",
        "type": "file",
        "artifact_id": "05ff1231-a9da-46b1-8aef-07c6a5850697",
        "metadata": {}
      },
      {
        "path": "event_log",
        "type": "directory",
        "artifact_id": "c5d01794-4068-4278-9fe3-cfdaf85bdab1",
        "metadata": {}
      },
      {
        "path": "examples",
        "type": "directory",
        "artifact_id": "141dbe4f-80df-4004-b812-8c82e0f0949f",
        "metadata": {}
      },
      {
        "path": "examples/python_project_main.py",
        "type": "file",
        "artifact_id": "e6406377-a7c7-4f98-bf3e-77b724f4f156",
        "metadata": {}
      },
      {
        "path": "examples/python_project_utils.py",
        "type": "file",
        "artifact_id": "8f410749-b3a9-4a99-821b-1a8d71916afd",
        "metadata": {}
      },
      {
        "path": "examples/telegram_bot",
        "type": "directory",
        "artifact_id": "a628a309-dc1e-479f-ab3a-71c4608732b4",
        "metadata": {}
      },
      {
        "path": "examples/telegram_bot/README.md",
        "type": "file",
        "artifact_id": "bd561346-b602-4b45-bd73-585b34bff430",
        "metadata": {}
      },
      {
        "path": "examples/telegram_bot/bot.py",
        "type": "file",
        "artifact_id": "cb24ca79-ae8f-41a7-bd7c-c19ca5a33ebc",
        "metadata": {}
      },
      {
        "path": "examples/telegram_bot/memory_manager.py",
        "type": "file",
        "artifact_id": "5125e639-06ba-4286-99bc-4cdec6725fce",
        "metadata": {}
      },
      {
        "path": "examples/telegram_bot/test_bot.py",
        "type": "file",
        "artifact_id": "b8149564-c32a-4888-a753-e54bfb4dba49",
        "metadata": {}
      },
      {
        "path": "integrations",
        "type": "directory",
        "artifact_id": "33f6eaf2-fb5b-4a69-8174-449252231350",
        "metadata": {}
      },
      {
        "path": "integrations/continue",
        "type": "directory",
        "artifact_id": "91fe7879-63c6-4ded-ae73-10785738479b",
        "metadata": {}
      },
      {
        "path": "integrations/continue/CONTINUE_INTEGRATION.md",
        "type": "file",
        "artifact_id": "bfad6fe1-8c01-419a-8e6c-b39efb8242b0",
        "metadata": {}
      },
      {
        "path": "integrations/continue/README.md",
        "type": "file",
        "artifact_id": "39b83e4d-52d1-4c2e-8b39-2f9d630ba52d",
        "metadata": {}
      },
      {
        "path": "integrations/continue/setup_config.py",
        "type": "file",
        "artifact_id": "0560875a-129a-41b4-838c-8ecab4d6c939",
        "metadata": {}
      },
      {
        "path": "integrations/continue/test_continue_api.py",
        "type": "file",
        "artifact_id": "94494d76-9c01-40cb-b1e7-c13181110af4",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot",
        "type": "directory",
        "artifact_id": "c28fed1d-ef4f-4e48-b1ec-8a6ac74999be",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot/README.md",
        "type": "file",
        "artifact_id": "93600d22-d4e7-44bb-9ac3-c715bc75ebdd",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot/bot.py",
        "type": "file",
        "artifact_id": "6e33383a-63e7-4e64-bb6d-0bc1047f5d87",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot/memory_manager.py",
        "type": "file",
        "artifact_id": "e1e06bf1-1c1d-48e8-a5d0-d846df3ffdc7",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot/mp002_progress_bot.py",
        "type": "file",
        "artifact_id": "4eac84c5-6e24-4af9-82be-b8e3b139a608",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot/simple_bot.py",
        "type": "file",
        "artifact_id": "7de5661a-1e4c-4426-a580-8d5c5289a5ee",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot/test_bot.py",
        "type": "file",
        "artifact_id": "0e178ecc-9569-4de3-b773-78336a032a8e",
        "metadata": {}
      },
      {
        "path": "package-lock.json",
        "type": "file",
        "artifact_id": "c2e43ce6-c06f-4c20-98f6-521d918f4fae",
        "metadata": {}
      },
      {
        "path": "parse_go_project.py",
        "type": "file",
        "artifact_id": "21d185de-d41c-4e6a-87be-bd1e46f02556",
        "metadata": {}
      },
      {
        "path": "prompts_collection.json",
        "type": "file",
        "artifact_id": "14aaebb9-85f7-4dea-af5f-7bfd7e45bcb6",
        "metadata": {}
      },
      {
        "path": "scripts",
        "type": "directory",
        "artifact_id": "12e0d610-a27d-43fa-9b2b-37a086cfee7b",
        "metadata": {}
      },
      {
        "path": "scripts/log_viewer.py",
        "type": "file",
        "artifact_id": "9ba2bcf4-9447-43e3-abf6-6c90ccc980de",
        "metadata": {}
      },
      {
        "path": "scripts/run_devops_tests.py",
        "type": "file",
        "artifact_id": "1dc48c24-44cd-4a9f-8c78-cefa4151fed6",
        "metadata": {}
      },
      {
        "path": "self_run.py",
        "type": "file",
        "artifact_id": "e05135d0-432d-4ff9-96fe-fb99fcefd5a1",
        "metadata": {}
      },
      {
        "path": "src",
        "type": "directory",
        "artifact_id": "8270e219-3bda-40fa-802d-05b1cf1e5c78",
        "metadata": {}
      },
      {
        "path": "src/docs",
        "type": "directory",
        "artifact_id": "d36dbba6-41f3-47d3-8606-08a66a391866",
        "metadata": {}
      },
      {
        "path": "src/docs/hybrid_log.md",
        "type": "file",
        "artifact_id": "24c809f4-1dc5-4ae4-af47-404e2208a010",
        "metadata": {}
      },
      {
        "path": "src/llmstruct",
        "type": "directory",
        "artifact_id": "c7631bee-fe76-4ab3-9008-506d8633ccba",
        "metadata": {}
      },
      {
        "path": "src/llmstruct.egg-info",
        "type": "directory",
        "artifact_id": "8a9b19fd-b6a0-431b-9bdf-759cdd2b0a84",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ARCHIVE",
        "type": "directory",
        "artifact_id": "abc4de6c-6d3f-474a-9b36-2a24c6574ca1",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ARCHIVE/cli_argument_parser.py",
        "type": "file",
        "artifact_id": "06cc7c68-49e5-4a4f-bb4e-2b5a28b4018b",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ARCHIVE/cli_commands.py",
        "type": "file",
        "artifact_id": "7e1a5c87-62a8-4d71-88b9-271d414655a1",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ARCHIVE/cli_config.py",
        "type": "file",
        "artifact_id": "a67425bf-c7bf-4887-9260-006aa621871d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ARCHIVE/cli_core.py",
        "type": "file",
        "artifact_id": "ea5096e8-f00e-4adc-b223-4002b07f2a9c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ARCHIVE/cli_main_commands.py",
        "type": "file",
        "artifact_id": "6eddda5b-0f03-4457-ada2-7c549d632bc1",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ARCHIVE/cli_utils.py",
        "type": "file",
        "artifact_id": "9ab01377-3702-4835-8891-043770f1fad0",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__init__.py",
        "type": "file",
        "artifact_id": "e4c6e24a-68b5-4d5b-9bf3-4da6ee5a8ed3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__main__.py",
        "type": "file",
        "artifact_id": "be615968-90e9-4612-8c87-c7de07d43439",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cache.py",
        "type": "file",
        "artifact_id": "74a44457-0627-4f5e-baa9-a825581c7d14",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli.py",
        "type": "file",
        "artifact_id": "41bf8a2d-55c4-4288-858d-16637896bb29",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators",
        "type": "directory",
        "artifact_id": "9231e750-ee7e-4cbe-b873-6956f182c90a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/__init__.py",
        "type": "file",
        "artifact_id": "098d01fe-e915-4914-a19c-3bc6b2d05cee",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/go_json_generator.py",
        "type": "file",
        "artifact_id": "a95e0165-548c-41c5-8f26-8c514e6ba783",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/json_generator.py",
        "type": "file",
        "artifact_id": "ab58fe1f-c9af-40b3-961c-f30d4d6d842e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/json_selector.py",
        "type": "file",
        "artifact_id": "91cd01c8-0c3d-4126-857b-8c8c19c06b6f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/llm_client.py",
        "type": "file",
        "artifact_id": "a33302bc-8798-465e-b491-ac598a98f0ee",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules",
        "type": "directory",
        "artifact_id": "1e74e0c8-4cfb-4221-8a3c-79a962c3e730",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules/commands",
        "type": "directory",
        "artifact_id": "9b79e824-667b-46b3-bc83-60903096f1be",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules/commands/__init__.py",
        "type": "file",
        "artifact_id": "17cee0cc-8d5d-474c-989c-0364bfe220b4",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules/commands/metrics.py",
        "type": "file",
        "artifact_id": "bd1e9304-160f-4f6b-ba03-de16c305068b",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules/commands/queue.py",
        "type": "file",
        "artifact_id": "5c3efc08-6170-4c49-91cd-ff80ce2cf707",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules/commands/services.py",
        "type": "file",
        "artifact_id": "aad3bb13-6924-49d3-a32f-04e072e4b13c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers",
        "type": "directory",
        "artifact_id": "e7877551-7d84-4296-a815-f47de0fe7600",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/__init__.py",
        "type": "file",
        "artifact_id": "0211f50f-2017-471e-9dc5-8c40aed74c86",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/go_analyzer.py",
        "type": "file",
        "artifact_id": "7ba8e607-88bf-4962-8adb-d1ff94edbccc",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/javascript_parser.py",
        "type": "file",
        "artifact_id": "c6f5c1c0-65ba-4bed-8843-a044d23476c5",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/python_parser.py",
        "type": "file",
        "artifact_id": "9c40bfe4-9be1-41d2-a86d-472481f8b96b",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/universal_converter.py",
        "type": "file",
        "artifact_id": "2f571763-35cf-410a-a8d5-5a6a3f64b6a1",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/self_run.py",
        "type": "file",
        "artifact_id": "c0eb7060-c599-4b72-8685-72ba9770c283",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates",
        "type": "directory",
        "artifact_id": "82652faf-0c2f-4ac7-9a79-392356f7063d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates/__init__.py",
        "type": "file",
        "artifact_id": "a75f3e30-4998-4695-90e2-922bed76cca9",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators",
        "type": "directory",
        "artifact_id": "6a958a5f-8df3-41b3-8345-6571a71c0bd8",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/__init__.py",
        "type": "file",
        "artifact_id": "1e1c39b4-e6f6-455a-877d-def55a20bd01",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/json_validator.py",
        "type": "file",
        "artifact_id": "5b6b4c35-3b46-47e4-846e-405c822ad04c",
        "metadata": {}
      },
      {
        "path": "src/scripts",
        "type": "directory",
        "artifact_id": "817daa9c-154b-4032-afff-c5d83e73f884",
        "metadata": {}
      },
      {
        "path": "src/scripts/auto_update_struct.py",
        "type": "file",
        "artifact_id": "22dfb2e9-88fe-4a4d-a5d5-578d75db1186",
        "metadata": {}
      },
      {
        "path": "src/scripts/collector.py",
        "type": "file",
        "artifact_id": "6ce4866d-802b-4d63-9a5a-477d5ff0b559",
        "metadata": {}
      },
      {
        "path": "src/scripts/create_comprehensive_index.py",
        "type": "file",
        "artifact_id": "bee9985f-9fb8-4a63-bf4a-46bd1769803a",
        "metadata": {}
      },
      {
        "path": "src/scripts/create_github_issues.py",
        "type": "file",
        "artifact_id": "05e04065-0902-4fe1-a2a5-b72445cab5ca",
        "metadata": {}
      },
      {
        "path": "src/scripts/create_tasks_index.py",
        "type": "file",
        "artifact_id": "a9116684-5d29-4fd7-bef4-89f6c32d3094",
        "metadata": {}
      },
      {
        "path": "src/scripts/deploy_embedded_files.py",
        "type": "file",
        "artifact_id": "c0b4b27b-c90a-49b6-bcee-7113a58dd4b6",
        "metadata": {}
      },
      {
        "path": "src/scripts/epic_roadmap_manager.py",
        "type": "file",
        "artifact_id": "ca4c50b8-5c32-43a9-a4c0-9e32d86f6f39",
        "metadata": {}
      },
      {
        "path": "src/scripts/export_to_github_projects.py",
        "type": "file",
        "artifact_id": "0875e50d-eb23-41ef-9c8a-c59caf60f008",
        "metadata": {}
      },
      {
        "path": "src/scripts/fix_github_script.py",
        "type": "file",
        "artifact_id": "a5816299-81c2-4619-830c-28b02de9dcfe",
        "metadata": {}
      },
      {
        "path": "src/scripts/fix_hardcoded_usernames.py",
        "type": "file",
        "artifact_id": "395e501a-5d46-4851-890f-b5f8aa08f823",
        "metadata": {}
      },
      {
        "path": "src/scripts/github_sync_manager.py",
        "type": "file",
        "artifact_id": "760d80b2-8d70-4a51-91d4-2e818f982e6a",
        "metadata": {}
      },
      {
        "path": "src/scripts/github_sync_manager_enhanced.py",
        "type": "file",
        "artifact_id": "e3fb5a04-1659-4f0a-beb1-e0d7677bd078",
        "metadata": {}
      },
      {
        "path": "src/scripts/old",
        "type": "directory",
        "artifact_id": "b09edac7-60a3-4792-8ae8-666e2931add8",
        "metadata": {}
      },
      {
        "path": "src/scripts/process_926_items.py",
        "type": "file",
        "artifact_id": "ec733ebc-c67c-46a6-aed3-f5f7ad840c45",
        "metadata": {}
      },
      {
        "path": "src/scripts/session_cli.py",
        "type": "file",
        "artifact_id": "5d16de6e-5615-4ca3-8d7f-3f0b797e9b8a",
        "metadata": {}
      },
      {
        "path": "src/scripts/team",
        "type": "directory",
        "artifact_id": "b1d4a87f-536d-4363-bdf7-34e5312d259b",
        "metadata": {}
      },
      {
        "path": "src/scripts/team/__init__.py",
        "type": "file",
        "artifact_id": "403ae48c-2c23-459c-bac0-ffcec9f6a388",
        "metadata": {}
      },
      {
        "path": "src/scripts/validate_epics.py",
        "type": "file",
        "artifact_id": "11a22e18-f72c-499b-b9d3-05e5bcaac9a6",
        "metadata": {}
      },
      {
        "path": "src/scripts/validate_json.py",
        "type": "file",
        "artifact_id": "010106f0-e200-4ba7-bda8-a835d2b25950",
        "metadata": {}
      },
      {
        "path": "src/scripts/validate_refs.py",
        "type": "file",
        "artifact_id": "7dea2ae3-32af-4577-b80d-071a705133e5",
        "metadata": {}
      },
      {
        "path": "src/scripts/validate_schemas.py",
        "type": "file",
        "artifact_id": "9574f3d6-5ccb-4c24-8128-dcc42ea2f2a7",
        "metadata": {}
      },
      {
        "path": "src/struct.json",
        "type": "file",
        "artifact_id": "44ee6e31-9498-4176-a284-89243b6ca2b8",
        "metadata": {}
      },
      {
        "path": "struct.json",
        "type": "file",
        "artifact_id": "97df7d03-745e-4f42-97ac-eebad06dbe3e",
        "metadata": {}
      },
      {
        "path": "tests",
        "type": "directory",
        "artifact_id": "6e705066-ee6c-42fd-a31b-3eda0a4595c8",
        "metadata": {}
      },
      {
        "path": "tests/test_ai_integration_devops.py",
        "type": "file",
        "artifact_id": "dc74f01b-9481-4a4b-a0d7-08130ad17dde",
        "metadata": {}
      },
      {
        "path": "tests/test_project_health_smoke.py",
        "type": "file",
        "artifact_id": "57c9ce2d-4feb-439d-aa5d-f206cb63184c",
        "metadata": {}
      },
      {
        "path": "vscode-extension",
        "type": "directory",
        "artifact_id": "e42faeb6-2c26-4298-b9fe-96630739eeb8",
        "metadata": {}
      },
      {
        "path": "vscode-extension/README.md",
        "type": "file",
        "artifact_id": "55a0372a-90d8-42a1-b4cc-9ec7390e2e4e",
        "metadata": {}
      },
      {
        "path": "vscode-extension/media",
        "type": "directory",
        "artifact_id": "7e3ddf49-c2f9-4a96-9516-4b8309031976",
        "metadata": {}
      },
      {
        "path": "vscode-extension/out",
        "type": "directory",
        "artifact_id": "37cbb583-edec-4317-9f2f-455dce5290e2",
        "metadata": {}
      },
      {
        "path": "vscode-extension/output",
        "type": "directory",
        "artifact_id": "72cf9a9b-d83f-4d91-bb90-75080d6d7765",
        "metadata": {}
      },
      {
        "path": "vscode-extension/package-lock.json",
        "type": "file",
        "artifact_id": "8e43b273-8f19-407f-960c-e717bde30c36",
        "metadata": {}
      },
      {
        "path": "vscode-extension/package.json",
        "type": "file",
        "artifact_id": "4ad82393-450c-42d5-9746-5315dcbea274",
        "metadata": {}
      },
      {
        "path": "vscode-extension/src",
        "type": "directory",
        "artifact_id": "f614f9ed-e4a1-4e99-bb10-d0d0ad08a55a",
        "metadata": {}
      },
      {
        "path": "vscode-extension/tsconfig.json",
        "type": "file",
        "artifact_id": "c157d65a-8f22-401e-a1db-11ba03799523",
        "metadata": {}
      },
      {
        "path": "workspace_state.json",
        "type": "file",
        "artifact_id": "588aeaa0-f34c-4716-ac40-a13b0220d55a",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "parse_go_project",
      "path": "parse_go_project.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "CLI \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 Go \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e llmstruct",
      "artifact_id": "34716867-629c-4423-af10-f4b773649987"
    },
    {
      "module_id": "self_run",
      "path": "self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "67cc5d1b-6586-45c4-8dcd-f2c1162b1c86"
    },
    {
      "module_id": "cache",
      "path": "cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "33d32b97-d91b-4165-add1-28bb468b37e2"
    },
    {
      "module_id": "scripts.log_viewer",
      "path": "scripts/log_viewer.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "123a551a-9a4f-4945-aa2f-a67611af239f"
    },
    {
      "module_id": "scripts.run_devops_tests",
      "path": "scripts/run_devops_tests.py",
      "category": "core",
      "functions": 10,
      "classes": 0,
      "summary": "\u0421\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430 DevOps \u0442\u0435\u0441\u0442\u043e\u0432 LLMStruct",
      "artifact_id": "43e4ba19-1528-4a3f-b716-d852d5d374c6"
    },
    {
      "module_id": ".private.log_insight",
      "path": ".private/log_insight.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Quick insight logging helper for workflow optimization",
      "artifact_id": "4ee738bb-5c02-4cdc-be6d-3453f7c949c3"
    },
    {
      "module_id": "tests.test_ai_integration_devops",
      "path": "tests/test_ai_integration_devops.py",
      "category": "test",
      "functions": 17,
      "classes": 6,
      "summary": "DevOps Integration Test Suite for LLMStruct AI Components",
      "artifact_id": "0a645b09-4582-4034-a309-2b234c1e9117"
    },
    {
      "module_id": "tests.test_project_health_smoke",
      "path": "tests/test_project_health_smoke.py",
      "category": "test",
      "functions": 11,
      "classes": 1,
      "summary": "Smoke Tests \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 LLMStruct",
      "artifact_id": "ca0f3436-6c62-44fe-bd13-4332e6914e66"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project.",
      "artifact_id": "5b52e21e-7fa0-4009-a04b-2dfd9b613dd8"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project.",
      "artifact_id": "0fe4ab83-1ff2-4a1b-87c6-b753a75d0c74"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "b09c0eba-8423-496a-8e4f-fb5e6c17a3d5"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "43766d5b-ea24-44e1-9861-d66a71474f44"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "5d1d3624-6fe5-476a-b172-0c9a00d16e4d"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "9a80e8d4-c78f-4866-b2c1-25e3b14561b4"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "33bb4cf0-1164-4bf4-beb8-02c4013479ad"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "62228d09-6641-4322-a341-46995c6b754d"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "artifact_id": "93b4e08f-daa0-4b1d-a1a4-1cbe1aced33f"
    },
    {
      "module_id": "src.scripts.process_926_items",
      "path": "src/scripts/process_926_items.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "926 Items Processing Script - Updated Implementation",
      "artifact_id": "9b09dafa-59fb-48ae-a9e5-ade0e7637119"
    },
    {
      "module_id": "src.scripts.create_comprehensive_index",
      "path": "src/scripts/create_comprehensive_index.py",
      "category": "core",
      "functions": 37,
      "classes": 2,
      "summary": "Comprehensive Project Index Creator",
      "artifact_id": "4f1fcc5b-947c-4318-9b5d-9e393d4a8908"
    },
    {
      "module_id": "src.scripts.fix_github_script",
      "path": "src/scripts/fix_github_script.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Quick fix for GitHub issues creation script",
      "artifact_id": "27003dcd-8e5c-4bed-9037-84cdcefac056"
    },
    {
      "module_id": "src.scripts.github_sync_manager_enhanced",
      "path": "src/scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "functions": 28,
      "classes": 3,
      "summary": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout",
      "artifact_id": "0ead1447-70b6-4eb5-8e7f-c93aa4f052fd"
    },
    {
      "module_id": "src.scripts.fix_hardcoded_usernames",
      "path": "src/scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "functions": 12,
      "classes": 2,
      "summary": "Fix Hardcoded Usernames Script",
      "artifact_id": "4f543169-c66f-4f36-b155-77e203e0dc89"
    },
    {
      "module_id": "src.scripts.deploy_embedded_files",
      "path": "src/scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "7efc237f-f85e-4aa0-b9c1-e7cd5759b901"
    },
    {
      "module_id": "src.scripts.validate_epics",
      "path": "src/scripts/validate_epics.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "Epic Data Validator",
      "artifact_id": "83a0e23c-6814-4247-8009-01584fda7cfc"
    },
    {
      "module_id": "src.scripts.collector",
      "path": "src/scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "f30c6743-9fa3-4526-bd68-bf2b47cc6adf"
    },
    {
      "module_id": "src.scripts.create_tasks_index",
      "path": "src/scripts/create_tasks_index.py",
      "category": "core",
      "functions": 18,
      "classes": 3,
      "summary": "Tasks Index Creator",
      "artifact_id": "c2e79761-23b5-4b2c-a1f3-5ecfbfaed155"
    },
    {
      "module_id": "src.scripts.export_to_github_projects",
      "path": "src/scripts/export_to_github_projects.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Export script for GitHub Projects integration",
      "artifact_id": "6328f770-74fd-483a-b01b-7f7409063710"
    },
    {
      "module_id": "src.scripts.auto_update_struct",
      "path": "src/scripts/auto_update_struct.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Automatic struct.json update script",
      "artifact_id": "5e524c88-b40a-41e4-8d62-5e393e249015"
    },
    {
      "module_id": "src.scripts.github_sync_manager",
      "path": "src/scripts/github_sync_manager.py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub",
      "artifact_id": "7a3cbf2d-e749-4208-811f-40557e8a241c"
    },
    {
      "module_id": "src.scripts.session_cli",
      "path": "src/scripts/session_cli.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Session Management CLI",
      "artifact_id": "28171b00-6141-4f74-b594-b5fa55961ab3"
    },
    {
      "module_id": "src.scripts.create_github_issues",
      "path": "src/scripts/create_github_issues.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "GitHub Issues Creator for AI-Dogfooding Project",
      "artifact_id": "f0d338d3-1b0e-46a2-be2b-f8549587d8e8"
    },
    {
      "module_id": "src.scripts.epic_roadmap_manager",
      "path": "src/scripts/epic_roadmap_manager.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439",
      "artifact_id": "22d67ddc-d1ab-4cd7-b781-7f2818bdfc60"
    },
    {
      "module_id": "src.scripts.validate_refs",
      "path": "src/scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "fbf78d6d-6744-45e9-9921-79da85388523"
    },
    {
      "module_id": "src.scripts.validate_json",
      "path": "src/scripts/validate_json.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "JSON Validation Script",
      "artifact_id": "dbf50116-85f6-4fcd-a5a6-cf28c4017c47"
    },
    {
      "module_id": "src.scripts.validate_schemas",
      "path": "src/scripts/validate_schemas.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "8dbdbc09-6c9d-4fbc-945a-082833ea8ab5"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "ea8a4614-727d-45b4-bb6c-754271bde11f"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "6678cb74-522c-4ef2-ac05-8834adeaf492"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "c720a85d-3126-46fc-8a65-0551eee2233a"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_config",
      "path": "src/llmstruct/ARCHIVE/cli_config.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "CLI configuration management.",
      "artifact_id": "1c400c00-8a5e-4b46-96eb-800255dfcc1a"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_core",
      "path": "src/llmstruct/ARCHIVE/cli_core.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Core CLI functionality and main loop.",
      "artifact_id": "953e9107-4d90-466c-9ce1-f41ac097dc5f"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_argument_parser",
      "path": "src/llmstruct/ARCHIVE/cli_argument_parser.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "CLI argument parsing for LLMStruct.",
      "artifact_id": "a5844cb1-a16f-4087-80a5-1a8e4f646fe3"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_utils",
      "path": "src/llmstruct/ARCHIVE/cli_utils.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "CLI utility functions.",
      "artifact_id": "b00daa88-b1de-4fdb-95ac-a29cda81046d"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_commands",
      "path": "src/llmstruct/ARCHIVE/cli_commands.py",
      "category": "core",
      "functions": 22,
      "classes": 1,
      "summary": "CLI command processing and handlers.",
      "artifact_id": "d941e46e-8197-4bce-8c50-707897fdcdbf"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_main_commands",
      "path": "src/llmstruct/ARCHIVE/cli_main_commands.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "Main CLI command handlers for LLMStruct.",
      "artifact_id": "e2e17b9c-47d0-4f6d-9332-c135780fadd6"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "",
      "artifact_id": "c06a4b5f-9675-4dc3-b73b-bdd70d55bfa7"
    },
    {
      "module_id": "src.llmstruct.parsers.universal_converter",
      "path": "src/llmstruct/parsers/universal_converter.py",
      "category": "core",
      "functions": 14,
      "classes": 3,
      "summary": "Universal Code Converter - Orchestrates all language parsers",
      "artifact_id": "38c73e27-f21c-49fa-bcf6-b47bc99152f0"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "a8464450-f4ba-4aa6-ba26-93148e465021"
    },
    {
      "module_id": "src.llmstruct.parsers.go_analyzer",
      "path": "src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430",
      "artifact_id": "95872282-402f-4e0b-bad4-4170760f4b67"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "74c9b130-d65f-4605-8346-8a35a286f4ad"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "e7af0c01-4ddc-4022-acd6-c38b93d459fa"
    },
    {
      "module_id": "src.llmstruct.generators.go_json_generator",
      "path": "src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "b2d7edd0-90f2-4377-95b2-462ba9e6c60b"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "e22bcbb3-c33f-4d56-b2e2-956c16605949"
    },
    {
      "module_id": "src.llmstruct.api.auth",
      "path": "src/llmstruct/api/auth.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "fc536b00-cd13-4779-83c0-a9f846043d16"
    },
    {
      "module_id": "src.llmstruct.api.app",
      "path": "src/llmstruct/api/app.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "76c21985-a9ad-4851-be0b-54981d31bfef"
    },
    {
      "module_id": "src.llmstruct.api.deps",
      "path": "src/llmstruct/api/deps.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "d1dfc547-c4f3-45c8-a319-a8dfa052bb1a"
    },
    {
      "module_id": "src.llmstruct.api.routes",
      "path": "src/llmstruct/api/routes.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "4d917629-7edb-48df-9154-2f6f1d0aa8d0"
    },
    {
      "module_id": "src.llmstruct.api.models",
      "path": "src/llmstruct/api/models.py",
      "category": "core",
      "functions": 0,
      "classes": 2,
      "summary": "",
      "artifact_id": "29d4add8-243b-4788-8b9b-e51720333962"
    },
    {
      "module_id": "src.llmstruct.modules.commands.services",
      "path": "src/llmstruct/modules/commands/services.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "2e67a2e4-a7d4-403b-ad1e-88d49b6f26d6"
    },
    {
      "module_id": "src.llmstruct.modules.commands.__init__",
      "path": "src/llmstruct/modules/commands/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "17212136-6682-44a8-b73c-752c8231c476"
    },
    {
      "module_id": "src.llmstruct.modules.commands.metrics",
      "path": "src/llmstruct/modules/commands/metrics.py",
      "category": "core",
      "functions": 7,
      "classes": 0,
      "summary": "",
      "artifact_id": "700bee1f-21c9-4718-8ae0-613744df4837"
    },
    {
      "module_id": "src.llmstruct.modules.commands.queue",
      "path": "src/llmstruct/modules/commands/queue.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "fcf5188e-c917-4716-8aeb-62ab617f318d"
    },
    {
      "module_id": "src.llmstruct.modules.cli.dogfood",
      "path": "src/llmstruct/modules/cli/dogfood.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "a49cfceb-7bdf-42f5-9530-60ab53f2d599"
    },
    {
      "module_id": "src.llmstruct.modules.cli.analyze_duplicates",
      "path": "src/llmstruct/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "3394203c-e337-49ec-80be-675db25d47ab"
    },
    {
      "module_id": "src.llmstruct.modules.cli.parse",
      "path": "src/llmstruct/modules/cli/parse.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "94434544-5d40-46d0-a73b-11cbcb77d6d1"
    },
    {
      "module_id": "src.llmstruct.modules.cli.utils",
      "path": "src/llmstruct/modules/cli/utils.py",
      "category": "cli",
      "functions": 16,
      "classes": 0,
      "summary": "",
      "artifact_id": "a308dca7-1689-4bf5-9337-e7f5a48e6552"
    },
    {
      "module_id": "src.llmstruct.modules.cli.context",
      "path": "src/llmstruct/modules/cli/context.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "aa37b457-da10-4c12-93cc-7c1b1aa8c532"
    },
    {
      "module_id": "src.llmstruct.modules.cli.query",
      "path": "src/llmstruct/modules/cli/query.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "04c34bc3-40d1-4aaf-929d-91fea49135d5"
    },
    {
      "module_id": "src.llmstruct.modules.cli.__init__",
      "path": "src/llmstruct/modules/cli/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "522e05e1-83be-4dc6-9069-328afa52db79"
    },
    {
      "module_id": "src.llmstruct.modules.cli.handlers",
      "path": "src/llmstruct/modules/cli/handlers.py",
      "category": "cli",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "bd5a4328-cb97-4a65-87e0-98f51a038223"
    },
    {
      "module_id": "src.llmstruct.modules.cli.audit",
      "path": "src/llmstruct/modules/cli/audit.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "e78e0541-9ac8-44bc-91ca-ccef8b4d94cc"
    },
    {
      "module_id": "src.llmstruct.modules.cli.epic",
      "path": "src/llmstruct/modules/cli/epic.py",
      "category": "cli",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "b5780fea-691a-43ed-9f14-219d8ff10316"
    },
    {
      "module_id": "src.llmstruct.modules.cli.handlers_legacy",
      "path": "src/llmstruct/modules/cli/handlers_legacy.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "63804ece-b1c7-4b4d-a074-85c9a9f07087"
    },
    {
      "module_id": "src.llmstruct.modules.cli.copilot",
      "path": "src/llmstruct/modules/cli/copilot.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "d477ba86-ab44-4c2b-929e-a7c4111827bd"
    },
    {
      "module_id": "src.llmstruct.modules.cli.review",
      "path": "src/llmstruct/modules/cli/review.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "8db7cfd3-3d00-4238-a05d-e00fb3cfd3e3"
    },
    {
      "module_id": "src.llmstruct.api.routes.__init__",
      "path": "src/llmstruct/api/routes/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "5bab8788-65b5-4999-97d5-a57fef5a8964"
    },
    {
      "module_id": "src.llmstruct.api.routes.health",
      "path": "src/llmstruct/api/routes/health.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "da6e7f30-10f1-4eb9-867a-48a9996add91"
    },
    {
      "module_id": "src.llmstruct.api.routes.chat",
      "path": "src/llmstruct/api/routes/chat.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "9b7245af-2e69-4be0-9c6a-ac8a103a5d56"
    },
    {
      "module_id": "src.scripts.team.__init__",
      "path": "src/scripts/team/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "8c20123a-a4af-4015-8544-4b5f91786e03"
    },
    {
      "module_id": "examples.telegram_bot.memory_manager",
      "path": "examples/telegram_bot/memory_manager.py",
      "category": "core",
      "functions": 15,
      "classes": 3,
      "summary": "Memory Manager for LLMStruct Telegram Bot",
      "artifact_id": "f20b67be-ed5d-443b-9726-9055aeb8a777"
    },
    {
      "module_id": "examples.telegram_bot.test_bot",
      "path": "examples/telegram_bot/test_bot.py",
      "category": "test",
      "functions": 4,
      "classes": 0,
      "summary": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430 \u0431\u0435\u0437 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e Telegram",
      "artifact_id": "52dd5fc7-7bd9-4e63-96e8-fdef877b7501"
    },
    {
      "module_id": "examples.telegram_bot.bot",
      "path": "examples/telegram_bot/bot.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Telegram Bot for LLMStruct Integration",
      "artifact_id": "84a2f488-4415-44f0-a34f-0e987678f6e7"
    },
    {
      "module_id": "integrations.telegram_bot.simple_bot",
      "path": "integrations/telegram_bot/simple_bot.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "\u0423\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f LLMStruct \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u043c\u0435\u0442\u0440\u0438\u043a",
      "artifact_id": "d96ce158-84b9-44cd-b5cc-3d04fdba2f81"
    },
    {
      "module_id": "integrations.telegram_bot.memory_manager",
      "path": "integrations/telegram_bot/memory_manager.py",
      "category": "core",
      "functions": 15,
      "classes": 3,
      "summary": "Memory Manager for LLMStruct Telegram Bot",
      "artifact_id": "3abe97ef-6bed-4e58-a1df-5bc50c914333"
    },
    {
      "module_id": "integrations.telegram_bot.test_bot",
      "path": "integrations/telegram_bot/test_bot.py",
      "category": "test",
      "functions": 4,
      "classes": 0,
      "summary": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430 \u0431\u0435\u0437 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e Telegram",
      "artifact_id": "5299615f-244d-4596-ab69-ba5ad2968dfe"
    },
    {
      "module_id": "integrations.telegram_bot.bot",
      "path": "integrations/telegram_bot/bot.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "Telegram Bot for LLMStruct Integration",
      "artifact_id": "cb188a36-6eb5-4231-9081-eb034d59dd5f"
    },
    {
      "module_id": "integrations.telegram_bot.mp002_progress_bot",
      "path": "integrations/telegram_bot/mp002_progress_bot.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "MP-002A Progress Bot - Telegram \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Smart Wrapper \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438",
      "artifact_id": "bc417216-bbda-438f-a528-ada76901ccbf"
    },
    {
      "module_id": "integrations.continue.test_continue_api",
      "path": "integrations/continue/test_continue_api.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test Continue API Integration",
      "artifact_id": "3abcf7e0-3cd7-40a0-be76-83d0afdd46d2"
    },
    {
      "module_id": "integrations.continue.setup_config",
      "path": "integrations/continue/setup_config.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "Setup script for Continue VS Code extension configuration",
      "artifact_id": "75d4c276-8ba9-481b-afa6-3193b96b5530"
    }
  ],
  "modules": [
    {
      "module_id": "parse_go_project",
      "path": "parse_go_project.py",
      "category": "core",
      "module_doc": "CLI \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 Go \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e llmstruct",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            16,
            82
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "any",
          "sys.exit",
          "str",
          "project_path.is_dir",
          "result.get",
          "project_path.rglob",
          "parser.add_argument",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "traceback.print_exc",
          "print",
          "go_mod.exists",
          "project_path.exists",
          "generate_go_json",
          "f.write",
          "Path",
          "json.dumps",
          "open",
          "stats.get"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "generate_go_json",
        "json",
        "llmstruct.generators.go_json_generator",
        "pathlib",
        "sys",
        "traceback"
      ],
      "hash": null,
      "artifact_id": "34716867-629c-4423-af10-f4b773649987"
    },
    {
      "module_id": "self_run",
      "path": "self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
          "line_range": [
            22,
            73
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            76,
            116
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "any",
          "filter_json",
          "str",
          "prompt.lower",
          "struct.get",
          "module.get",
          "isinstance",
          "item.get"
        ],
        "attach_to_llm_request": [
          "logging.info",
          "filter_json",
          "filter_struct",
          "select_json",
          "prompt.lower",
          "logging.error",
          "cache.cache_json",
          "Path",
          "context_file.exists",
          "cache.get_full_json",
          "cache.get_metadata",
          "json.dumps"
        ]
      },
      "dependencies": [
        "Any",
        "JSONCache",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "67cc5d1b-6586-45c4-8dcd-f2c1162b1c86"
    },
    {
      "module_id": "cache",
      "path": "cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            23,
            27
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            29,
            51
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            53,
            92
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            94,
            110
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            112,
            128
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            130,
            132
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            22,
            132
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                23,
                27
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                29,
                51
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                53,
                92
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                94,
                110
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                112,
                128
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                130,
                132
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "logging.info",
          "logging.error",
          "content.encode",
          "str",
          "Path",
          "f.read",
          "json_file.exists",
          "hashlib.sha256",
          "json.dumps",
          "open"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "logging.error",
          "json.load",
          "open",
          "cursor.fetchone"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "33d32b97-d91b-4165-add1-28bb468b37e2"
    },
    {
      "module_id": "scripts.log_viewer",
      "path": "scripts/log_viewer.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "parse_date",
          "docstring": "",
          "line_range": [
            9,
            16
          ],
          "parameters": [
            "date_str"
          ],
          "decorators": []
        },
        {
          "name": "load_log",
          "docstring": "",
          "line_range": [
            18,
            20
          ],
          "parameters": [
            "log_path"
          ],
          "decorators": []
        },
        {
          "name": "filter_log",
          "docstring": "",
          "line_range": [
            22,
            38
          ],
          "parameters": [
            "log",
            "epic",
            "event_type",
            "author",
            "request_id",
            "from_date",
            "to_date"
          ],
          "decorators": []
        },
        {
          "name": "aggregate_log",
          "docstring": "",
          "line_range": [
            40,
            42
          ],
          "parameters": [
            "log",
            "field"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            44,
            73
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_date": [
          "datetime.strptime",
          "ValueError"
        ],
        "load_log": [
          "json.loads",
          "open",
          "line.strip"
        ],
        "filter_log": [
          "parse_date",
          "e.get"
        ],
        "aggregate_log": [
          "counter.items",
          "Counter",
          "e.get"
        ],
        "main": [
          "print",
          "filter_log",
          "tabulate",
          "load_log",
          "parser.add_argument",
          "parser.parse_args",
          "aggregate_log",
          "e.get",
          "argparse.ArgumentParser",
          "json.dumps"
        ]
      },
      "dependencies": [
        "Counter",
        "Path",
        "argparse",
        "collections",
        "datetime",
        "json",
        "pathlib",
        "tabulate"
      ],
      "hash": null,
      "artifact_id": "123a551a-9a4f-4945-aa2f-a67611af239f"
    },
    {
      "module_id": "scripts.run_devops_tests",
      "path": "scripts/run_devops_tests.py",
      "category": "core",
      "module_doc": "\u0421\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430 DevOps \u0442\u0435\u0441\u0442\u043e\u0432 LLMStruct\n\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u0431\u044b\u0441\u0442\u0440\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043f\u0435\u0440\u0435\u0434 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u043c",
      "functions": [
        {
          "name": "run_command",
          "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0441 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u043e\u043c \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u043e\u0448\u0438\u0431\u043e\u043a",
          "line_range": [
            14,
            29
          ],
          "parameters": [
            "cmd",
            "cwd",
            "timeout"
          ],
          "decorators": []
        },
        {
          "name": "print_section",
          "docstring": "\u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0435\u043a\u0446\u0438\u0438",
          "line_range": [
            32,
            36
          ],
          "parameters": [
            "title"
          ],
          "decorators": []
        },
        {
          "name": "print_result",
          "docstring": "\u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u044d\u043c\u043e\u0434\u0437\u0438",
          "line_range": [
            39,
            44
          ],
          "parameters": [
            "success",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "run_smoke_tests",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 smoke \u0442\u0435\u0441\u0442\u044b",
          "line_range": [
            47,
            78
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "run_json_validation",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c JSON \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            81,
            150
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "run_ai_integration_tests",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0442\u0435\u0441\u0442\u044b \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 AI \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432",
          "line_range": [
            153,
            179
          ],
          "parameters": [
            "project_root",
            "test_type"
          ],
          "decorators": []
        },
        {
          "name": "run_code_quality_checks",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043e\u0434\u0430",
          "line_range": [
            182,
            205
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "run_performance_check",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438",
          "line_range": [
            208,
            234
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "run_docker_syntax_check",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 Docker \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            237,
            269
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            272,
            344
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "run_command": [
          "str",
          "subprocess.run"
        ],
        "print_section": [
          "print"
        ],
        "print_result": [
          "print"
        ],
        "run_smoke_tests": [
          "test_file.exists",
          "print",
          "print_section",
          "run_command",
          "print_result",
          "time.time"
        ],
        "run_json_validation": [
          "print",
          "temp_script.exists",
          "print_section",
          "run_command",
          "f.write",
          "open",
          "temp_script.unlink"
        ],
        "run_ai_integration_tests": [
          "test_file.exists",
          "print",
          "test_type.upper",
          "print_section",
          "run_command",
          "print_result"
        ],
        "run_code_quality_checks": [
          "print_result",
          "print_section",
          "print",
          "run_command"
        ],
        "run_performance_check": [
          "struct_file.stat",
          "print_section",
          "list",
          "print_result",
          "len",
          "project_root.glob",
          "struct_file.exists"
        ],
        "run_docker_syntax_check": [
          "content.count",
          "print_section",
          "f.read",
          "print_result",
          "dockerfile_path.exists",
          "open"
        ],
        "main": [
          "print",
          "sum",
          "Path.cwd",
          "sys.exit",
          "run_code_quality_checks",
          "print_section",
          "parser.add_argument",
          "run_json_validation",
          "parser.parse_args",
          "run_ai_integration_tests",
          "results.items",
          "run_docker_syntax_check",
          "len",
          "argparse.ArgumentParser",
          "run_smoke_tests",
          "time.time",
          "results.values",
          "run_performance_check"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "43e4ba19-1528-4a3f-b716-d852d5d374c6"
    },
    {
      "module_id": ".private.log_insight",
      "path": ".private/log_insight.py",
      "category": "core",
      "module_doc": "Quick insight logging helper for workflow optimization\nUsage: python .private/log_insight.py \"category\" \"type\" \"insight text\"",
      "functions": [
        {
          "name": "log_insight",
          "docstring": "Log a workflow insight to the JSON file",
          "line_range": [
            12,
            53
          ],
          "parameters": [
            "category",
            "insight_type",
            "insight_text",
            "context",
            "solution",
            "improvement"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "log_insight": [
          "json.load",
          "print",
          "json.dump",
          "Path",
          "insights_file.exists",
          "open",
          "datetime.now"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "4ee738bb-5c02-4cdc-be6d-3453f7c949c3"
    },
    {
      "module_id": "tests.test_ai_integration_devops",
      "path": "tests/test_ai_integration_devops.py",
      "category": "test",
      "module_doc": "DevOps Integration Test Suite for LLMStruct AI Components\n\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442 \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0443\u0442\u0438 \u0440\u0430\u0431\u043e\u0442\u044b AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0432 production \u0441\u0440\u0435\u0434\u0435",
      "functions": [
        {
          "name": "run_critical_tests",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0442\u0435\u0441\u0442\u044b \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438",
          "line_range": [
            327,
            339
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_performance_tests",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0442\u0435\u0441\u0442\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438",
          "line_range": [
            342,
            352
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "setUp",
          "docstring": "\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f",
          "line_range": [
            22,
            29
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "tearDown",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u043f\u043e\u0441\u043b\u0435 \u0442\u0435\u0441\u0442\u043e\u0432",
          "line_range": [
            31,
            35
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_test_project",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            37,
            45
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "create_test_configs",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
          "line_range": [
            47,
            96
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_critical_json_files_exist",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 JSON \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            102,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_json_files_valid_format",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c JSON \u0444\u043e\u0440\u043c\u0430\u0442\u0430",
          "line_range": [
            113,
            123
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_context_hierarchy_integrity",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u044c \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
          "line_range": [
            125,
            150
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_ai_self_awareness_initialization",
          "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e AI self-awareness \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430",
          "line_range": [
            157,
            181
          ],
          "parameters": [
            "self",
            "mock_introspector"
          ],
          "decorators": [
            "patch('llmstruct.ai_self_awareness.AISystemIntrospector')"
          ]
        },
        {
          "name": "test_context_orchestrator_config",
          "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e context orchestrator",
          "line_range": [
            183,
            203
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_json_parsing_performance",
          "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 JSON \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            209,
            230
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_struct_json_size_limit",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0447\u0442\u043e struct.json \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u0440\u0430\u0437\u0443\u043c\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430",
          "line_range": [
            232,
            240
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_go_docker_image_builds",
          "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u0431\u043e\u0440\u043a\u0443 Go Docker \u043e\u0431\u0440\u0430\u0437\u0430",
          "line_range": [
            246,
            272
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_go_environment_variables",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 Go \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0432 Docker",
          "line_range": [
            274,
            292
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_cli_entry_point_exists",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 CLI \u0442\u043e\u0447\u043a\u0438 \u0432\u0445\u043e\u0434\u0430",
          "line_range": [
            298,
            305
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_cli_help_command",
          "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u043f\u043e\u043c\u043e\u0449\u0438 CLI",
          "line_range": [
            308,
            322
          ],
          "parameters": [
            "self",
            "mock_run"
          ],
          "decorators": [
            "patch('subprocess.run')"
          ]
        }
      ],
      "classes": [
        {
          "name": "TestAISystemIntegration",
          "docstring": "\u0422\u0435\u0441\u0442\u044b \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 AI \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f DevOps pipeline",
          "line_range": [
            19,
            96
          ],
          "methods": [
            {
              "name": "setUp",
              "docstring": "\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f",
              "line_range": [
                22,
                29
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "tearDown",
              "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u043f\u043e\u0441\u043b\u0435 \u0442\u0435\u0441\u0442\u043e\u0432",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_test_project",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                37,
                45
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "create_test_configs",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
              "line_range": [
                47,
                96
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": [
            "unittest.TestCase"
          ]
        },
        {
          "name": "TestJSONEcosystemValidation",
          "docstring": "\u0422\u0435\u0441\u0442\u044b \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u0438 JSON \u044d\u043a\u043e\u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            99,
            150
          ],
          "methods": [
            {
              "name": "test_critical_json_files_exist",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 JSON \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                102,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_json_files_valid_format",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c JSON \u0444\u043e\u0440\u043c\u0430\u0442\u0430",
              "line_range": [
                113,
                123
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_context_hierarchy_integrity",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u044c \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
              "line_range": [
                125,
                150
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": [
            "TestAISystemIntegration"
          ]
        },
        {
          "name": "TestAIComponentsHealth",
          "docstring": "\u0422\u0435\u0441\u0442\u044b \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f AI \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432",
          "line_range": [
            153,
            203
          ],
          "methods": [
            {
              "name": "test_ai_self_awareness_initialization",
              "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e AI self-awareness \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430",
              "line_range": [
                157,
                181
              ],
              "parameters": [
                "self",
                "mock_introspector"
              ]
            },
            {
              "name": "test_context_orchestrator_config",
              "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e context orchestrator",
              "line_range": [
                183,
                203
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": [
            "TestAISystemIntegration"
          ]
        },
        {
          "name": "TestPerformanceMetrics",
          "docstring": "\u0422\u0435\u0441\u0442\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            206,
            240
          ],
          "methods": [
            {
              "name": "test_json_parsing_performance",
              "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 JSON \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                209,
                230
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_struct_json_size_limit",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0447\u0442\u043e struct.json \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u0440\u0430\u0437\u0443\u043c\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430",
              "line_range": [
                232,
                240
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": [
            "TestAISystemIntegration"
          ]
        },
        {
          "name": "TestDockerEnvironment",
          "docstring": "\u0422\u0435\u0441\u0442\u044b Docker \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f",
          "line_range": [
            243,
            292
          ],
          "methods": [
            {
              "name": "test_go_docker_image_builds",
              "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u0431\u043e\u0440\u043a\u0443 Go Docker \u043e\u0431\u0440\u0430\u0437\u0430",
              "line_range": [
                246,
                272
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_go_environment_variables",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 Go \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0432 Docker",
              "line_range": [
                274,
                292
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": [
            "unittest.TestCase"
          ]
        },
        {
          "name": "TestCLIInterface",
          "docstring": "\u0422\u0435\u0441\u0442\u044b CLI \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430",
          "line_range": [
            295,
            322
          ],
          "methods": [
            {
              "name": "test_cli_entry_point_exists",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 CLI \u0442\u043e\u0447\u043a\u0438 \u0432\u0445\u043e\u0434\u0430",
              "line_range": [
                298,
                305
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_cli_help_command",
              "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u043f\u043e\u043c\u043e\u0449\u0438 CLI",
              "line_range": [
                308,
                322
              ],
              "parameters": [
                "self",
                "mock_run"
              ]
            }
          ],
          "bases": [
            "TestAISystemIntegration"
          ]
        }
      ],
      "callgraph": {
        "setUp": [
          "os.getcwd",
          "Path",
          "os.chdir",
          "self.setup_test_project",
          "tempfile.mkdtemp"
        ],
        "tearDown": [
          "os.chdir",
          "shutil.rmtree"
        ],
        "setup_test_project": [
          "self.create_test_configs"
        ],
        "create_test_configs": [
          "json.dump",
          "open"
        ],
        "test_critical_json_files_exist": [
          "self.assertTrue",
          "full_path.exists"
        ],
        "test_json_files_valid_format": [
          "list",
          "self.subTest",
          "self.fail",
          "json.load",
          "open"
        ],
        "test_context_hierarchy_integrity": [
          "self.assertTrue",
          "file_path.exists",
          "hierarchy.get",
          "config.get",
          "self.assertIn",
          "json.load",
          "open"
        ],
        "test_ai_self_awareness_initialization": [
          "self.assertTrue",
          "self.skipTest",
          "patch",
          "MagicMock"
        ],
        "test_context_orchestrator_config": [
          "json.load",
          "self.assertLessEqual",
          "config.get",
          "self.assertIn",
          "self.assertGreaterEqual",
          "ai_delegation.get",
          "open"
        ],
        "test_json_parsing_performance": [
          "self.assertLess",
          "json.load",
          "list",
          "self.assertGreater",
          "time.time",
          "open"
        ],
        "test_struct_json_size_limit": [
          "self.assertLess",
          "struct_path.stat"
        ],
        "test_go_docker_image_builds": [
          "self.skipTest",
          "subprocess.run",
          "Path",
          "f.read",
          "self.assertIn",
          "dockerfile_path.exists",
          "open"
        ],
        "test_go_environment_variables": [
          "self.skipTest",
          "Path",
          "f.read",
          "self.assertIn",
          "dockerfile_path.exists",
          "open"
        ],
        "test_cli_entry_point_exists": [
          "pyproject_path.exists",
          "f.read",
          "Path",
          "self.assertIn",
          "open"
        ],
        "test_cli_help_command": [
          "self.skipTest",
          "patch",
          "subprocess.run",
          "MagicMock"
        ],
        "run_critical_tests": [
          "result.wasSuccessful",
          "unittest.TestSuite",
          "unittest.TextTestRunner",
          "TestAIComponentsHealth",
          "runner.run",
          "TestJSONEcosystemValidation",
          "suite.addTest"
        ],
        "run_performance_tests": [
          "result.wasSuccessful",
          "unittest.TestSuite",
          "unittest.TextTestRunner",
          "TestPerformanceMetrics",
          "runner.run",
          "suite.addTest"
        ]
      },
      "dependencies": [
        "MagicMock",
        "Path",
        "json",
        "os",
        "patch",
        "pathlib",
        "pytest",
        "shutil",
        "subprocess",
        "sys",
        "tempfile",
        "time",
        "unittest",
        "unittest.mock"
      ],
      "hash": null,
      "artifact_id": "0a645b09-4582-4034-a309-2b234c1e9117"
    },
    {
      "module_id": "tests.test_project_health_smoke",
      "path": "tests/test_project_health_smoke.py",
      "category": "test",
      "module_doc": "Smoke Tests \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 LLMStruct\n\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0437\u0430 < 30 \u0441\u0435\u043a\u0443\u043d\u0434 \u0432 CI/CD pipeline",
      "functions": [
        {
          "name": "run_smoke_tests",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0432\u0441\u0435 smoke \u0442\u0435\u0441\u0442\u044b \u0441 \u043e\u0442\u0447\u0435\u0442\u043e\u043c",
          "line_range": [
            242,
            270
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "setUp",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432",
          "line_range": [
            18,
            21
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "tearDown",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u0430",
          "line_range": [
            23,
            27
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_critical_files_exist",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u0430\u0436\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            29,
            47
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_python_syntax_validity",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c Python \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            49,
            74
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_json_files_validity",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c JSON \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            76,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_package_importability",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0447\u0442\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u0430\u043a\u0435\u0442 \u043c\u043e\u0436\u043d\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c",
          "line_range": [
            102,
            122
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_cli_entry_point",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e CLI entry point",
          "line_range": [
            124,
            153
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_struct_json_exists_and_valid",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0431\u0430\u0437\u043e\u0432\u0443\u044e \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c struct.json",
          "line_range": [
            155,
            178
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_ai_components_basic_config",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0431\u0430\u0437\u043e\u0432\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e AI \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432",
          "line_range": [
            180,
            208
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_docker_config_syntax",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 Docker \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0439",
          "line_range": [
            210,
            239
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ProjectHealthSmokeTest",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0435 smoke \u0442\u0435\u0441\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432",
          "line_range": [
            15,
            239
          ],
          "methods": [
            {
              "name": "setUp",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432",
              "line_range": [
                18,
                21
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "tearDown",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u0430",
              "line_range": [
                23,
                27
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_critical_files_exist",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u0430\u0436\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                29,
                47
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_python_syntax_validity",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c Python \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                49,
                74
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_json_files_validity",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c JSON \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                76,
                100
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_package_importability",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0447\u0442\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u0430\u043a\u0435\u0442 \u043c\u043e\u0436\u043d\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c",
              "line_range": [
                102,
                122
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_cli_entry_point",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e CLI entry point",
              "line_range": [
                124,
                153
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_struct_json_exists_and_valid",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0431\u0430\u0437\u043e\u0432\u0443\u044e \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c struct.json",
              "line_range": [
                155,
                178
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_ai_components_basic_config",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0431\u0430\u0437\u043e\u0432\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e AI \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432",
              "line_range": [
                180,
                208
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_docker_config_syntax",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 Docker \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0439",
              "line_range": [
                210,
                239
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": [
            "unittest.TestCase"
          ]
        }
      ],
      "callgraph": {
        "setUp": [
          "time.time",
          "Path.cwd"
        ],
        "tearDown": [
          "time.time",
          "print"
        ],
        "test_critical_files_exist": [
          "missing_files.append",
          "print",
          "self.fail",
          "full_path.exists"
        ],
        "test_python_syntax_validity": [
          "syntax_errors.append",
          "print",
          "self.skipTest",
          "compile",
          "list",
          "f.read",
          "self.fail",
          "open"
        ],
        "test_json_files_validity": [
          "json_files.extend",
          "print",
          "self.skipTest",
          "str",
          "list",
          "json_errors.append",
          "self.fail",
          "json.load",
          "open"
        ],
        "test_package_importability": [
          "hasattr",
          "print",
          "str",
          "self.fail"
        ],
        "test_cli_entry_point": [
          "print",
          "self.skipTest",
          "pyproject_path.exists",
          "f.read",
          "toml.load",
          "config.get",
          "self.fail",
          "open"
        ],
        "test_struct_json_exists_and_valid": [
          "print",
          "struct_data.get",
          "len",
          "self.fail",
          "json.load",
          "struct_path.exists",
          "open"
        ],
        "test_ai_components_basic_config": [
          "print",
          "self.skipTest",
          "config.get",
          "init_enhanced_path.exists",
          "self.fail",
          "json.load",
          "open"
        ],
        "test_docker_config_syntax": [
          "content.count",
          "print",
          "self.skipTest",
          "f.read",
          "missing_instructions.append",
          "self.fail",
          "dockerfile_path.exists",
          "open"
        ],
        "run_smoke_tests": [
          "result.wasSuccessful",
          "print",
          "unittest.TestLoader",
          "unittest.TextTestRunner",
          "len",
          "runner.run",
          "time.time"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "llmstruct",
        "os",
        "pathlib",
        "sys",
        "time",
        "toml",
        "unittest"
      ],
      "hash": null,
      "artifact_id": "ca0f3436-6c62-44fe-bd13-4332e6914e66"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": [
            6,
            8
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": [
            11,
            13
          ],
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "5b52e21e-7fa0-4009-a04b-2dfd9b613dd8"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": [
            6,
            9
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": [
            15,
            17
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": [
            12,
            17
          ],
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": [
                15,
                17
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "utils.helper",
          "print"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": null,
      "artifact_id": "0fe4ab83-1ff2-4a1b-87c6-b753a75d0c74"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            20,
            46
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            49,
            116
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "filtered.append",
          "data.get",
          "isinstance",
          "item.get"
        ],
        "select_json": [
          "path.append",
          "filter_json",
          "current_item.get",
          "f.seek",
          "logging.error",
          "Path",
          "prefix.startswith",
          "json_file.exists",
          "json.load",
          "open",
          "filtered.append",
          "ijson.parse"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b09c0eba-8423-496a-8e4f-fb5e6c17a3d5"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "LLMClient",
        "SystemCapabilityDiscovery",
        "ai_cli_integration",
        "ai_self_awareness",
        "llm_client"
      ],
      "hash": null,
      "artifact_id": "43766d5b-ea24-44e1-9861-d66a71474f44"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
          "line_range": [
            22,
            73
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            76,
            116
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "any",
          "filter_json",
          "str",
          "prompt.lower",
          "struct.get",
          "module.get",
          "isinstance",
          "item.get"
        ],
        "attach_to_llm_request": [
          "logging.info",
          "filter_json",
          "filter_struct",
          "select_json",
          "prompt.lower",
          "logging.error",
          "cache.cache_json",
          "Path",
          "context_file.exists",
          "cache.get_full_json",
          "cache.get_metadata",
          "json.dumps"
        ]
      },
      "dependencies": [
        "Any",
        "JSONCache",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "5d1d3624-6fe5-476a-b172-0c9a00d16e4d"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": [
            38,
            86
          ],
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": [
            88,
            115
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": [
            117,
            141
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": [
            143,
            156
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": [
            158,
            172
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": [
            27,
            172
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": [
                38,
                86
              ],
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": [
                88,
                115
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": [
                117,
                141
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": [
                143,
                156
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": [
                158,
                172
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logging.info",
          "int",
          "os.getenv"
        ],
        "query": [
          "logging.warning",
          "self._query_anthropic",
          "self._query_grok",
          "logging.error",
          "range",
          "self._query_hybrid",
          "Path",
          "asyncio.sleep",
          "self._query_ollama",
          "json.load",
          "logging.info",
          "json.dumps"
        ],
        "_query_grok": [
          "result.get",
          "aiohttp.ClientSession",
          "logging.error",
          "response.json",
          "logging.info",
          "session.post"
        ],
        "_query_anthropic": [
          "result.get",
          "aiohttp.ClientSession",
          "logging.error",
          "response.json",
          "logging.info",
          "session.post"
        ],
        "_query_ollama": [
          "result.get",
          "logging.info",
          "aiohttp.ClientSession",
          "logging.error",
          "response.json",
          "logging.debug",
          "session.post"
        ],
        "_query_hybrid": [
          "self._query_anthropic",
          "self._query_grok",
          "asyncio.gather",
          "len",
          "self._query_ollama",
          "logging.info",
          "isinstance"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9a80e8d4-c78f-4866-b2c1-25e3b14561b4"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "llmstruct.cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "33bb4cf0-1164-4bf4-beb8-02c4013479ad"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            21,
            25
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            27,
            49
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            51,
            90
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            92,
            108
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            110,
            126
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            128,
            130
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            20,
            130
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                27,
                49
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                51,
                90
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                92,
                108
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                110,
                126
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                128,
                130
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "logging.info",
          "logging.error",
          "content.encode",
          "str",
          "Path",
          "f.read",
          "json_file.exists",
          "hashlib.sha256",
          "json.dumps",
          "open"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "logging.error",
          "json.load",
          "open",
          "cursor.fetchone"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "62228d09-6641-4322-a341-46995c6b754d"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            55,
            318
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "normalize_patterns",
          "docstring": "",
          "line_range": [
            281,
            292
          ],
          "parameters": [
            "arglist"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "query_parser.add_argument",
          "copilot_parser.add_argument",
          "epic.add_epic_cli_subparser",
          "subparsers.add_parser",
          "duplicates_parser.add_argument",
          "parse_parser.add_argument",
          "audit_parser.add_argument",
          "parser.parse_args",
          "review_parser.add_argument",
          "context_parser.add_argument",
          "argparse.ArgumentParser",
          "parser.add_subparsers",
          "dogfood_parser.add_argument"
        ],
        "normalize_patterns": [
          "item.strip",
          "p.strip",
          "result.extend",
          "result.append",
          "item.split"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "analyze_duplicates",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "audit",
        "cli_core",
        "context",
        "copilot",
        "create_cli_core",
        "dogfood",
        "epic",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "interactive",
        "interactive_legacy",
        "interactive_modular",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.analyze_duplicates",
        "llmstruct.modules.cli.audit",
        "llmstruct.modules.cli.context",
        "llmstruct.modules.cli.copilot",
        "llmstruct.modules.cli.dogfood",
        "llmstruct.modules.cli.handlers",
        "llmstruct.modules.cli.parse",
        "llmstruct.modules.cli.query",
        "llmstruct.modules.cli.review",
        "llmstruct.modules.cli.utils",
        "llmstruct.modules.commands.queue",
        "llmstruct.self_run",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "parse_files_from_response",
        "pathlib",
        "process_cli_queue_enhanced",
        "query",
        "re",
        "read_file_content",
        "review",
        "shutil",
        "sys",
        "time",
        "toml",
        "typing",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "93b4e08f-daa0-4b1d-a1a4-1cbe1aced33f"
    },
    {
      "module_id": "src.scripts.process_926_items",
      "path": "src/scripts/process_926_items.py",
      "category": "core",
      "module_doc": "926 Items Processing Script - Updated Implementation\nProcesses items according to GitHub roadmap + personal management vision\nImplements all decisions from 926_items_processing_execution_plan.md",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            51
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_comprehensive_index",
          "docstring": "Load the 926 items from comprehensive index",
          "line_range": [
            53,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "calculate_confidence_score",
          "docstring": "Calculate confidence score for categorization decision",
          "line_range": [
            113,
            146
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "check_t_pot_related",
          "docstring": "Enhanced T-Pot detection",
          "line_range": [
            148,
            155
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_team_implementable",
          "docstring": "Check if team can implement without architecture review",
          "line_range": [
            157,
            176
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_personal_vs_team_vs_business",
          "docstring": "Classify as personal/team/business",
          "line_range": [
            178,
            214
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "identify_epic_candidates",
          "docstring": "Identify items that should be grouped into epics",
          "line_range": [
            216,
            233
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "extract_epic_name",
          "docstring": "Extract epic name from item",
          "line_range": [
            235,
            241
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "categorize_item",
          "docstring": "Main categorization logic with confidence scoring",
          "line_range": [
            243,
            278
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "find_duplicates",
          "docstring": "Enhanced duplicate detection with T-Pot special handling",
          "line_range": [
            280,
            319
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "calculate_similarity",
          "docstring": "Enhanced similarity calculation",
          "line_range": [
            321,
            342
          ],
          "parameters": [
            "self",
            "title1",
            "title2"
          ],
          "decorators": []
        },
        {
          "name": "suggest_merge_strategy",
          "docstring": "Enhanced merge strategy with T-Pot consideration",
          "line_range": [
            344,
            359
          ],
          "parameters": [
            "self",
            "item1",
            "item2"
          ],
          "decorators": []
        },
        {
          "name": "process_items",
          "docstring": "Main processing workflow implementing execution plan",
          "line_range": [
            361,
            468
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "save_results",
          "docstring": "Save categorized results with enhanced metadata",
          "line_range": [
            470,
            546
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_category_description",
          "docstring": "Category descriptions per execution plan",
          "line_range": [
            548,
            562
          ],
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Main execution workflow per execution plan",
          "line_range": [
            564,
            606
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskProcessor926",
          "docstring": "",
          "line_range": [
            15,
            606
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                51
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_comprehensive_index",
              "docstring": "Load the 926 items from comprehensive index",
              "line_range": [
                53,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "calculate_confidence_score",
              "docstring": "Calculate confidence score for categorization decision",
              "line_range": [
                113,
                146
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "check_t_pot_related",
              "docstring": "Enhanced T-Pot detection",
              "line_range": [
                148,
                155
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_team_implementable",
              "docstring": "Check if team can implement without architecture review",
              "line_range": [
                157,
                176
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_personal_vs_team_vs_business",
              "docstring": "Classify as personal/team/business",
              "line_range": [
                178,
                214
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "identify_epic_candidates",
              "docstring": "Identify items that should be grouped into epics",
              "line_range": [
                216,
                233
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "extract_epic_name",
              "docstring": "Extract epic name from item",
              "line_range": [
                235,
                241
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "categorize_item",
              "docstring": "Main categorization logic with confidence scoring",
              "line_range": [
                243,
                278
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "find_duplicates",
              "docstring": "Enhanced duplicate detection with T-Pot special handling",
              "line_range": [
                280,
                319
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "calculate_similarity",
              "docstring": "Enhanced similarity calculation",
              "line_range": [
                321,
                342
              ],
              "parameters": [
                "self",
                "title1",
                "title2"
              ]
            },
            {
              "name": "suggest_merge_strategy",
              "docstring": "Enhanced merge strategy with T-Pot consideration",
              "line_range": [
                344,
                359
              ],
              "parameters": [
                "self",
                "item1",
                "item2"
              ]
            },
            {
              "name": "process_items",
              "docstring": "Main processing workflow implementing execution plan",
              "line_range": [
                361,
                468
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "save_results",
              "docstring": "Save categorized results with enhanced metadata",
              "line_range": [
                470,
                546
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_category_description",
              "docstring": "Category descriptions per execution plan",
              "line_range": [
                548,
                562
              ],
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "run",
              "docstring": "Main execution workflow per execution plan",
              "line_range": [
                564,
                606
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "datetime.now",
          "Path"
        ],
        "load_comprehensive_index": [
          "print",
          "items.extend",
          "any",
          "items.append",
          "item_content.lower",
          "index_path.exists",
          "unique_items.append",
          "str",
          "seen_items.add",
          "data.items",
          "set",
          "hash",
          "len",
          "value.items",
          "json.load",
          "open",
          "isinstance",
          "item.get"
        ],
        "calculate_confidence_score": [
          "sum",
          "self.check_t_pot_related",
          "str",
          "item.get",
          "min"
        ],
        "check_t_pot_related": [
          "str",
          "any"
        ],
        "check_team_implementable": [
          "sum",
          "str"
        ],
        "check_personal_vs_team_vs_business": [
          "max",
          "sum",
          "str",
          "item.get"
        ],
        "identify_epic_candidates": [
          "self.extract_epic_name",
          "any",
          "str",
          "len",
          "epic_groups.items",
          "item.get"
        ],
        "extract_epic_name": [
          "title.split",
          "item.get"
        ],
        "categorize_item": [
          "self.check_personal_vs_team_vs_business",
          "any",
          "self.check_team_implementable",
          "self.check_t_pot_related",
          "str",
          "self.calculate_confidence_score"
        ],
        "find_duplicates": [
          "duplicates.append",
          "self.calculate_similarity",
          "self.check_t_pot_related",
          "seen_items.items",
          "self.suggest_merge_strategy",
          "item.get"
        ],
        "calculate_similarity": [
          "words1.intersection",
          "words1.union",
          "set",
          "len",
          "title2.split",
          "title1.split",
          "min"
        ],
        "suggest_merge_strategy": [
          "item2.get",
          "self.check_t_pot_related",
          "str",
          "len",
          "item1.get"
        ],
        "process_items": [
          "self.extract_epic_name",
          "print",
          "any",
          "self.check_team_implementable",
          "id",
          "self.check_t_pot_related",
          "self.categorize_item",
          "category.startswith",
          "str",
          "processed_item.copy",
          "self.find_duplicates",
          "low_confidence_items.append",
          "set",
          "len",
          "duplicate_item_ids.add",
          "datetime.now"
        ],
        "save_results": [
          "sum",
          "self.get_category_description",
          "print",
          "json.dump",
          "len",
          "datetime.now",
          "open",
          "item.get"
        ],
        "get_category_description": [
          "descriptions.get"
        ],
        "run": [
          "self.save_results",
          "self.load_comprehensive_index",
          "print",
          "self.process_items"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9b09dafa-59fb-48ae-a9e5-ade0e7637119"
    },
    {
      "module_id": "src.scripts.create_comprehensive_index",
      "path": "src/scripts/create_comprehensive_index.py",
      "category": "core",
      "module_doc": "Comprehensive Project Index Creator\nScans ALL project directories for tasks, ideas, sessions, and concepts.\nProvides complete visibility into project state and unaccounted innovations.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            714,
            735
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            45,
            58
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize comprehensive extraction patterns.",
          "line_range": [
            60,
            92
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "scan_all_directories",
          "docstring": "Scan all configured directories comprehensively.",
          "line_range": [
            94,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_scan_directory",
          "docstring": "Scan a specific directory according to its configuration.",
          "line_range": [
            113,
            127
          ],
          "parameters": [
            "self",
            "directory",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_scan_root_files",
          "docstring": "Scan root-level files.",
          "line_range": [
            129,
            133
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_should_scan_file",
          "docstring": "Check if file should be scanned based on extension.",
          "line_range": [
            135,
            137
          ],
          "parameters": [
            "self",
            "file_path",
            "allowed_types"
          ],
          "decorators": []
        },
        {
          "name": "_scan_file",
          "docstring": "Scan individual file for project items.",
          "line_range": [
            139,
            152
          ],
          "parameters": [
            "self",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_text",
          "docstring": "Extract items from text/markdown files.",
          "line_range": [
            154,
            206
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_json",
          "docstring": "Extract items from JSON files.",
          "line_range": [
            208,
            225
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_item_from_match",
          "docstring": "Create ProjectItem from regex match.",
          "line_range": [
            227,
            249
          ],
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_checkbox_item",
          "docstring": "Create ProjectItem from checkbox match.",
          "line_range": [
            251,
            274
          ],
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_simple_item",
          "docstring": "Create simple ProjectItem.",
          "line_range": [
            276,
            297
          ],
          "parameters": [
            "self",
            "title",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_status",
          "docstring": "Detect item status from surrounding content.",
          "line_range": [
            299,
            308
          ],
          "parameters": [
            "self",
            "content",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_priority",
          "docstring": "Detect item priority from surrounding content.",
          "line_range": [
            310,
            319
          ],
          "parameters": [
            "self",
            "content",
            "position",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_assess_strategic_value",
          "docstring": "Assess strategic value of item.",
          "line_range": [
            321,
            330
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract context around position.",
          "line_range": [
            332,
            336
          ],
          "parameters": [
            "self",
            "content",
            "position",
            "length"
          ],
          "decorators": []
        },
        {
          "name": "_detect_category",
          "docstring": "Detect item category.",
          "line_range": [
            338,
            351
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_effort",
          "docstring": "Estimate effort required.",
          "line_range": [
            353,
            362
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tags",
          "docstring": "Extract relevant tags.",
          "line_range": [
            364,
            378
          ],
          "parameters": [
            "self",
            "title",
            "content",
            "source_dir"
          ],
          "decorators": []
        },
        {
          "name": "_is_noise_checkbox",
          "docstring": "Check if checkbox is noise (navigation, etc).",
          "line_range": [
            380,
            384
          ],
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "_parse_json_files",
          "docstring": "Parse structured JSON files for existing data.",
          "line_range": [
            386,
            402
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_process_structured_json",
          "docstring": "Process structured JSON data.",
          "line_range": [
            404,
            419
          ],
          "parameters": [
            "self",
            "data",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_add_json_item",
          "docstring": "Add item from JSON structure.",
          "line_range": [
            421,
            441
          ],
          "parameters": [
            "self",
            "item",
            "file_path",
            "item_type"
          ],
          "decorators": []
        },
        {
          "name": "_assess_json_strategic_value",
          "docstring": "Assess strategic value from JSON item.",
          "line_range": [
            443,
            450
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_extract_innovation_concepts",
          "docstring": "Extract innovation concepts from content.",
          "line_range": [
            452,
            482
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_enhance_items",
          "docstring": "Post-process items to enhance metadata and find relationships.",
          "line_range": [
            484,
            501
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_find_related_items",
          "docstring": "Find related items based on content similarity.",
          "line_range": [
            503,
            517
          ],
          "parameters": [
            "self",
            "item",
            "id_map",
            "title_map"
          ],
          "decorators": []
        },
        {
          "name": "generate_comprehensive_report",
          "docstring": "Generate comprehensive analysis report.",
          "line_range": [
            519,
            561
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_comprehensive_index",
          "docstring": "Save comprehensive index and reports.",
          "line_range": [
            563,
            582
          ],
          "parameters": [
            "self",
            "output_dir"
          ],
          "decorators": []
        },
        {
          "name": "_generate_analysis_report",
          "docstring": "Generate human-readable analysis report.",
          "line_range": [
            584,
            658
          ],
          "parameters": [
            "self",
            "report"
          ],
          "decorators": []
        },
        {
          "name": "_format_dict",
          "docstring": "Format dictionary for markdown display.",
          "line_range": [
            660,
            662
          ],
          "parameters": [
            "self",
            "d"
          ],
          "decorators": []
        },
        {
          "name": "_format_items_list",
          "docstring": "Format items list for markdown display.",
          "line_range": [
            664,
            677
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_tasks",
          "docstring": "Extract tasks from JSON tasks array.",
          "line_range": [
            679,
            684
          ],
          "parameters": [
            "self",
            "tasks_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_ideas",
          "docstring": "Extract ideas from JSON ideas array.",
          "line_range": [
            686,
            691
          ],
          "parameters": [
            "self",
            "ideas_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_sessions",
          "docstring": "Extract sessions from JSON sessions array.",
          "line_range": [
            693,
            698
          ],
          "parameters": [
            "self",
            "sessions_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_array",
          "docstring": "Extract items from JSON array.",
          "line_range": [
            700,
            711
          ],
          "parameters": [
            "self",
            "array_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ProjectItem",
          "docstring": "Unified representation of any project item (task, idea, session, concept).",
          "line_range": [
            22,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ComprehensiveIndexer",
          "docstring": "Comprehensive indexer for all project content.",
          "line_range": [
            42,
            711
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                45,
                58
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize comprehensive extraction patterns.",
              "line_range": [
                60,
                92
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "scan_all_directories",
              "docstring": "Scan all configured directories comprehensively.",
              "line_range": [
                94,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_scan_directory",
              "docstring": "Scan a specific directory according to its configuration.",
              "line_range": [
                113,
                127
              ],
              "parameters": [
                "self",
                "directory",
                "config"
              ]
            },
            {
              "name": "_scan_root_files",
              "docstring": "Scan root-level files.",
              "line_range": [
                129,
                133
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "_should_scan_file",
              "docstring": "Check if file should be scanned based on extension.",
              "line_range": [
                135,
                137
              ],
              "parameters": [
                "self",
                "file_path",
                "allowed_types"
              ]
            },
            {
              "name": "_scan_file",
              "docstring": "Scan individual file for project items.",
              "line_range": [
                139,
                152
              ],
              "parameters": [
                "self",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_text",
              "docstring": "Extract items from text/markdown files.",
              "line_range": [
                154,
                206
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_json",
              "docstring": "Extract items from JSON files.",
              "line_range": [
                208,
                225
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_item_from_match",
              "docstring": "Create ProjectItem from regex match.",
              "line_range": [
                227,
                249
              ],
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_checkbox_item",
              "docstring": "Create ProjectItem from checkbox match.",
              "line_range": [
                251,
                274
              ],
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_simple_item",
              "docstring": "Create simple ProjectItem.",
              "line_range": [
                276,
                297
              ],
              "parameters": [
                "self",
                "title",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority",
                "position"
              ]
            },
            {
              "name": "_detect_status",
              "docstring": "Detect item status from surrounding content.",
              "line_range": [
                299,
                308
              ],
              "parameters": [
                "self",
                "content",
                "position"
              ]
            },
            {
              "name": "_detect_priority",
              "docstring": "Detect item priority from surrounding content.",
              "line_range": [
                310,
                319
              ],
              "parameters": [
                "self",
                "content",
                "position",
                "default"
              ]
            },
            {
              "name": "_assess_strategic_value",
              "docstring": "Assess strategic value of item.",
              "line_range": [
                321,
                330
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract context around position.",
              "line_range": [
                332,
                336
              ],
              "parameters": [
                "self",
                "content",
                "position",
                "length"
              ]
            },
            {
              "name": "_detect_category",
              "docstring": "Detect item category.",
              "line_range": [
                338,
                351
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_estimate_effort",
              "docstring": "Estimate effort required.",
              "line_range": [
                353,
                362
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_tags",
              "docstring": "Extract relevant tags.",
              "line_range": [
                364,
                378
              ],
              "parameters": [
                "self",
                "title",
                "content",
                "source_dir"
              ]
            },
            {
              "name": "_is_noise_checkbox",
              "docstring": "Check if checkbox is noise (navigation, etc).",
              "line_range": [
                380,
                384
              ],
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "_parse_json_files",
              "docstring": "Parse structured JSON files for existing data.",
              "line_range": [
                386,
                402
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_process_structured_json",
              "docstring": "Process structured JSON data.",
              "line_range": [
                404,
                419
              ],
              "parameters": [
                "self",
                "data",
                "file_path"
              ]
            },
            {
              "name": "_add_json_item",
              "docstring": "Add item from JSON structure.",
              "line_range": [
                421,
                441
              ],
              "parameters": [
                "self",
                "item",
                "file_path",
                "item_type"
              ]
            },
            {
              "name": "_assess_json_strategic_value",
              "docstring": "Assess strategic value from JSON item.",
              "line_range": [
                443,
                450
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_extract_innovation_concepts",
              "docstring": "Extract innovation concepts from content.",
              "line_range": [
                452,
                482
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_enhance_items",
              "docstring": "Post-process items to enhance metadata and find relationships.",
              "line_range": [
                484,
                501
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_find_related_items",
              "docstring": "Find related items based on content similarity.",
              "line_range": [
                503,
                517
              ],
              "parameters": [
                "self",
                "item",
                "id_map",
                "title_map"
              ]
            },
            {
              "name": "generate_comprehensive_report",
              "docstring": "Generate comprehensive analysis report.",
              "line_range": [
                519,
                561
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_comprehensive_index",
              "docstring": "Save comprehensive index and reports.",
              "line_range": [
                563,
                582
              ],
              "parameters": [
                "self",
                "output_dir"
              ]
            },
            {
              "name": "_generate_analysis_report",
              "docstring": "Generate human-readable analysis report.",
              "line_range": [
                584,
                658
              ],
              "parameters": [
                "self",
                "report"
              ]
            },
            {
              "name": "_format_dict",
              "docstring": "Format dictionary for markdown display.",
              "line_range": [
                660,
                662
              ],
              "parameters": [
                "self",
                "d"
              ]
            },
            {
              "name": "_format_items_list",
              "docstring": "Format items list for markdown display.",
              "line_range": [
                664,
                677
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "_extract_json_tasks",
              "docstring": "Extract tasks from JSON tasks array.",
              "line_range": [
                679,
                684
              ],
              "parameters": [
                "self",
                "tasks_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_ideas",
              "docstring": "Extract ideas from JSON ideas array.",
              "line_range": [
                686,
                691
              ],
              "parameters": [
                "self",
                "ideas_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_sessions",
              "docstring": "Extract sessions from JSON sessions array.",
              "line_range": [
                693,
                698
              ],
              "parameters": [
                "self",
                "sessions_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_array",
              "docstring": "Extract items from JSON array.",
              "line_range": [
                700,
                711
              ],
              "parameters": [
                "self",
                "array_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._init_patterns",
          "Path"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "scan_all_directories": [
          "self._scan_directory",
          "self._scan_root_files",
          "self._enhance_items",
          "len",
          "self._parse_json_files",
          "logger.info"
        ],
        "_scan_directory": [
          "file_path.is_file",
          "dir_path.glob",
          "self._should_scan_file",
          "self._scan_file",
          "dir_path.exists",
          "logger.warning",
          "logger.info"
        ],
        "_scan_root_files": [
          "file_path.is_file",
          "self._should_scan_file",
          "self._scan_file"
        ],
        "_should_scan_file": [],
        "_scan_file": [
          "self._extract_from_json",
          "f.read",
          "logger.error",
          "self._extract_from_text",
          "open"
        ],
        "_extract_from_text": [
          "self._is_noise_checkbox",
          "match.start",
          "self._extract_innovation_concepts",
          "match.group",
          "self._create_simple_item",
          "self._create_checkbox_item",
          "self._create_item_from_match"
        ],
        "_extract_from_json": [
          "self._extract_json_tasks",
          "self._extract_json_ideas",
          "json.loads",
          "self._extract_json_array",
          "logger.warning",
          "self._extract_json_sessions",
          "isinstance"
        ],
        "_create_item_from_match": [
          "ProjectItem",
          "title.strip",
          "self._assess_strategic_value",
          "match.start",
          "self._detect_status",
          "self._detect_category",
          "self._estimate_effort",
          "str",
          "self._detect_priority",
          "match.group",
          "self._extract_tags",
          "self._extract_context",
          "datetime.now"
        ],
        "_create_checkbox_item": [
          "ProjectItem",
          "self._assess_strategic_value",
          "match.start",
          "self._estimate_effort",
          "self._detect_category",
          "str",
          "self._detect_priority",
          "match.group",
          "self._extract_tags",
          "self._extract_context",
          "datetime.now"
        ],
        "_create_simple_item": [
          "ProjectItem",
          "title.strip",
          "str",
          "self._extract_context",
          "datetime.now"
        ],
        "_detect_status": [
          "max"
        ],
        "_detect_priority": [
          "max"
        ],
        "_assess_strategic_value": [],
        "_extract_context": [
          "max",
          "len",
          "min"
        ],
        "_detect_category": [
          "title.lower",
          "any"
        ],
        "_estimate_effort": [
          "any"
        ],
        "_extract_tags": [
          "title.lower",
          "source_dir.replace",
          "tags.append"
        ],
        "_is_noise_checkbox": [
          "text.strip",
          "len",
          "text.lower",
          "any"
        ],
        "_parse_json_files": [
          "self._process_structured_json",
          "file_path.exists",
          "logger.error",
          "json.load",
          "open"
        ],
        "_process_structured_json": [
          "self._add_json_item",
          "isinstance"
        ],
        "_add_json_item": [
          "ProjectItem",
          "str",
          "self._assess_json_strategic_value",
          "len",
          "item.get",
          "datetime.now"
        ],
        "_assess_json_strategic_value": [
          "item.get"
        ],
        "_extract_innovation_concepts": [
          "ProjectItem",
          "innovation_lines.append",
          "source_dir.replace",
          "str",
          "line.strip",
          "content.find",
          "enumerate",
          "len",
          "content.split",
          "self._extract_context",
          "datetime.now"
        ],
        "_enhance_items": [
          "re.sub",
          "self._find_related_items",
          "logger.info"
        ],
        "_find_related_items": [
          "re.findall",
          "related.append",
          "ref_type.upper"
        ],
        "generate_comprehensive_report": [
          "asdict",
          "by_strategic_value.get",
          "by_source.get",
          "by_priority.get",
          "by_type.get",
          "by_status.get",
          "len",
          "datetime.now"
        ],
        "save_comprehensive_index": [
          "json.dump",
          "os.makedirs",
          "len",
          "f.write",
          "self._generate_analysis_report",
          "open",
          "self.generate_comprehensive_report",
          "logger.info"
        ],
        "_generate_analysis_report": [
          "self._format_dict",
          "len",
          "self._format_items_list"
        ],
        "_format_dict": [
          "d.items",
          "sorted"
        ],
        "_format_items_list": [
          "result.append"
        ],
        "_extract_json_tasks": [
          "self._add_json_item",
          "isinstance"
        ],
        "_extract_json_ideas": [
          "self._add_json_item",
          "isinstance"
        ],
        "_extract_json_sessions": [
          "self._add_json_item",
          "isinstance"
        ],
        "_extract_json_array": [
          "self._add_json_item",
          "str",
          "isinstance"
        ],
        "main": [
          "indexer.scan_all_directories",
          "print",
          "len",
          "by_strategic.get",
          "ComprehensiveIndexer",
          "indexer.save_comprehensive_index",
          "logger.info"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "4f1fcc5b-947c-4318-9b5d-9e393d4a8908"
    },
    {
      "module_id": "src.scripts.fix_github_script",
      "path": "src/scripts/fix_github_script.py",
      "category": "core",
      "module_doc": "Quick fix for GitHub issues creation script\n\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 JSON \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445",
      "functions": [
        {
          "name": "fix_json_loading",
          "docstring": "\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 JSON \u0434\u0430\u043d\u043d\u044b\u0445",
          "line_range": [
            11,
            42
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "fix_json_loading": [
          "print",
          "Path",
          "f.read",
          "content.replace",
          "f.write",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "27003dcd-8e5c-4bed-9037-84cdcefac056"
    },
    {
      "module_id": "src.scripts.github_sync_manager_enhanced",
      "path": "src/scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "module_doc": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout\n\u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442: processing results + GitHub API + token management + CLI fallback",
      "functions": [
        {
          "name": "print_info",
          "docstring": "",
          "line_range": [
            25,
            26
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_success",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_warning",
          "docstring": "",
          "line_range": [
            31,
            32
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_error",
          "docstring": "",
          "line_range": [
            34,
            35
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_step",
          "docstring": "",
          "line_range": [
            37,
            38
          ],
          "parameters": [
            "step",
            "total",
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Enhanced CLI interface",
          "line_range": [
            620,
            655
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            43,
            44
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            46,
            57
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_github_token",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
          "line_range": [
            59,
            73
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "check_gh_cli",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
          "line_range": [
            75,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_token_from_gh_cli",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
          "line_range": [
            84,
            93
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_github_token",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
          "line_range": [
            95,
            117
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            122,
            164
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "detect_repo_from_git",
          "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
          "line_range": [
            166,
            198
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results",
          "line_range": [
            200,
            211
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log",
          "line_range": [
            213,
            216
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Enhanced API request with CLI fallback",
          "line_range": [
            218,
            231
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_direct",
          "docstring": "Direct API request",
          "line_range": [
            233,
            261
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_via_cli",
          "docstring": "API request via GitHub CLI",
          "line_range": [
            263,
            293
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue_enhanced",
          "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
          "line_range": [
            295,
            359
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_acceptance_criteria",
          "docstring": "Format acceptance criteria from item metadata",
          "line_range": [
            361,
            380
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_implementation_notes",
          "docstring": "Format implementation notes",
          "line_range": [
            382,
            397
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Enhanced validation",
          "line_range": [
            399,
            434
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_enhanced_sync",
          "docstring": "Enhanced sync with full project rollout integration",
          "line_range": [
            436,
            494
          ],
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        },
        {
          "name": "sync_category_enhanced",
          "docstring": "Enhanced category sync",
          "line_range": [
            496,
            554
          ],
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced",
          "line_range": [
            556,
            560
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic_enhanced",
          "docstring": "Enhanced epic creation",
          "line_range": [
            562,
            607
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion_enhanced",
          "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
          "line_range": [
            609,
            618
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            18,
            23
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "GitHubTokenManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 GitHub \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 (\u0438\u0437 setup_github_token.sh)",
          "line_range": [
            40,
            117
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                43,
                44
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_env_file",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                46,
                57
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_github_token",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
              "line_range": [
                59,
                73
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "check_gh_cli",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
              "line_range": [
                75,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_token_from_gh_cli",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
              "line_range": [
                84,
                93
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_github_token",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
              "line_range": [
                95,
                117
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "EnhancedGitHubSyncManager",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 GitHub Sync Manager \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0432\u0441\u0435\u0445 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a",
          "line_range": [
            119,
            618
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                122,
                164
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "detect_repo_from_git",
              "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
              "line_range": [
                166,
                198
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results",
              "line_range": [
                200,
                211
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log",
              "line_range": [
                213,
                216
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Enhanced API request with CLI fallback",
              "line_range": [
                218,
                231
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_direct",
              "docstring": "Direct API request",
              "line_range": [
                233,
                261
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_via_cli",
              "docstring": "API request via GitHub CLI",
              "line_range": [
                263,
                293
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "create_github_issue_enhanced",
              "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
              "line_range": [
                295,
                359
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_acceptance_criteria",
              "docstring": "Format acceptance criteria from item metadata",
              "line_range": [
                361,
                380
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_implementation_notes",
              "docstring": "Format implementation notes",
              "line_range": [
                382,
                397
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Enhanced validation",
              "line_range": [
                399,
                434
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_enhanced_sync",
              "docstring": "Enhanced sync with full project rollout integration",
              "line_range": [
                436,
                494
              ],
              "parameters": [
                "self",
                "categories"
              ]
            },
            {
              "name": "sync_category_enhanced",
              "docstring": "Enhanced category sync",
              "line_range": [
                496,
                554
              ],
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced",
              "line_range": [
                556,
                560
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "create_github_epic_enhanced",
              "docstring": "Enhanced epic creation",
              "line_range": [
                562,
                607
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion_enhanced",
              "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
              "line_range": [
                609,
                618
              ],
              "parameters": [
                "self",
                "item"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "print_info": [
          "print"
        ],
        "print_success": [
          "print"
        ],
        "print_warning": [
          "print"
        ],
        "print_error": [
          "print"
        ],
        "print_step": [
          "print"
        ],
        "__init__": [
          "Path",
          "self.detect_repo_from_git",
          "print_info",
          "self.load_sync_log",
          "GitHubTokenManager"
        ],
        "load_env_file": [
          "line.startswith",
          "value.strip",
          "line.strip",
          "Path",
          "env_file.exists",
          "key.strip",
          "line.split",
          "open"
        ],
        "test_github_token": [
          "requests.get",
          "response.json"
        ],
        "check_gh_cli": [
          "subprocess.run"
        ],
        "get_token_from_gh_cli": [
          "subprocess.run"
        ],
        "get_github_token": [
          "self.test_github_token",
          "print_warning",
          "self.get_token_from_gh_cli",
          "self.check_gh_cli",
          "os.getenv"
        ],
        "detect_repo_from_git": [
          "path.split",
          "print_warning",
          "url.replace",
          "url.startswith",
          "subprocess.run",
          "url.endswith",
          "len",
          "print_info",
          "url.split"
        ],
        "load_sync_log": [
          "json.load",
          "open"
        ],
        "save_sync_log": [
          "json.dump",
          "open"
        ],
        "api_request": [
          "time.sleep",
          "self._api_request_via_cli",
          "print_error",
          "self._api_request_direct"
        ],
        "_api_request_direct": [
          "requests.post",
          "print_warning",
          "response.raise_for_status",
          "requests.get",
          "response.json",
          "method.upper",
          "int",
          "print_error",
          "ValueError",
          "requests.patch"
        ],
        "_api_request_via_cli": [
          "print_warning",
          "subprocess.run",
          "method.upper",
          "json.loads",
          "print_error",
          "json.dumps",
          "cmd.extend"
        ],
        "create_github_issue_enhanced": [
          "self.api_request",
          "labels.append",
          "processing_meta.get",
          "self._format_acceptance_criteria",
          "print_info",
          "self._format_implementation_notes",
          "print_success",
          "item.get"
        ],
        "_format_acceptance_criteria": [
          "criteria.append",
          "criteria.extend",
          "item.get"
        ],
        "_format_implementation_notes": [
          "processing_meta.get",
          "notes.append",
          "item.get"
        ],
        "validate_before_sync": [
          "self.api_request",
          "repo_info.get",
          "user_info.get",
          "file_path.exists",
          "print_error",
          "print_success",
          "print_step"
        ],
        "run_enhanced_sync": [
          "result.get",
          "print",
          "enumerate",
          "self.validate_before_sync",
          "print_info",
          "self.sync_category_enhanced",
          "self.save_sync_log",
          "print_success",
          "print_step",
          "datetime.now"
        ],
        "sync_category_enhanced": [
          "result.get",
          "print_warning",
          "self.item_already_synced",
          "self.create_github_epic_enhanced",
          "self.create_github_issue_enhanced",
          "self.create_github_discussion_enhanced",
          "file_path.exists",
          "data.get",
          "print_error",
          "print_info",
          "json.load",
          "datetime.now",
          "open",
          "item.get"
        ],
        "item_already_synced": [
          "item.get"
        ],
        "create_github_epic_enhanced": [
          "self.api_request",
          "print_success",
          "print_info",
          "item.get"
        ],
        "create_github_discussion_enhanced": [
          "print_warning",
          "print_info",
          "item.get"
        ],
        "main": [
          "result.get",
          "EnhancedGitHubSyncManager",
          "parser.add_argument",
          "parser.parse_args",
          "len",
          "manager.run_enhanced_sync",
          "print_error",
          "argparse.ArgumentParser",
          "print_success"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "0ead1447-70b6-4eb5-8e7f-c93aa4f052fd"
    },
    {
      "module_id": "src.scripts.fix_hardcoded_usernames",
      "path": "src/scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "module_doc": "Fix Hardcoded Usernames Script\nAutomatically detects and replaces hardcoded usernames with dynamic values from .env or git config.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            234,
            288
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            22,
            24
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_detect_user_info",
          "docstring": "Detect user info from .env, git config, or environment.",
          "line_range": [
            26,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_env",
          "docstring": "Load user info from .env file.",
          "line_range": [
            64,
            86
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_git",
          "docstring": "Load user info from git config.",
          "line_range": [
            88,
            120
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_environment",
          "docstring": "Load user info from environment variables.",
          "line_range": [
            122,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_user_info",
          "docstring": "Get detected user information.",
          "line_range": [
            130,
            132
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            138,
            148
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_files",
          "docstring": "Scan for files containing hardcoded usernames.",
          "line_range": [
            150,
            172
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "fix_file",
          "docstring": "Fix hardcoded usernames in a single file.",
          "line_range": [
            174,
            200
          ],
          "parameters": [
            "self",
            "file_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "fix_all_files",
          "docstring": "Fix hardcoded usernames in all project files.",
          "line_range": [
            202,
            214
          ],
          "parameters": [
            "self",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "generate_env_template",
          "docstring": "Generate .env template with required variables.",
          "line_range": [
            216,
            231
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "UserInfoDetector",
          "docstring": "Detect user information from various sources.",
          "line_range": [
            19,
            132
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                22,
                24
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_detect_user_info",
              "docstring": "Detect user info from .env, git config, or environment.",
              "line_range": [
                26,
                62
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_env",
              "docstring": "Load user info from .env file.",
              "line_range": [
                64,
                86
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_git",
              "docstring": "Load user info from git config.",
              "line_range": [
                88,
                120
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_environment",
              "docstring": "Load user info from environment variables.",
              "line_range": [
                122,
                128
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_user_info",
              "docstring": "Get detected user information.",
              "line_range": [
                130,
                132
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "HardcodeFixer",
          "docstring": "Fix hardcoded usernames in project files.",
          "line_range": [
            135,
            231
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                138,
                148
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_files",
              "docstring": "Scan for files containing hardcoded usernames.",
              "line_range": [
                150,
                172
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "fix_file",
              "docstring": "Fix hardcoded usernames in a single file.",
              "line_range": [
                174,
                200
              ],
              "parameters": [
                "self",
                "file_path",
                "dry_run"
              ]
            },
            {
              "name": "fix_all_files",
              "docstring": "Fix hardcoded usernames in all project files.",
              "line_range": [
                202,
                214
              ],
              "parameters": [
                "self",
                "dry_run"
              ]
            },
            {
              "name": "generate_env_template",
              "docstring": "Generate .env template with required variables.",
              "line_range": [
                216,
                231
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "UserInfoDetector",
          "Path"
        ],
        "_detect_user_info": [
          "env_info.items",
          "self._load_from_environment",
          "user_info.get",
          "self._load_from_git",
          "user_info.update",
          "self._load_from_env",
          "env_vars.items",
          "logger.info"
        ],
        "_load_from_env": [
          "env_vars.get",
          "line.startswith",
          "value.strip",
          "line.strip",
          "env_file.exists",
          "key.strip",
          "line.split",
          "logger.error",
          "open"
        ],
        "_load_from_git": [
          "logger.error",
          "re.search",
          "subprocess.run",
          "match.group"
        ],
        "_load_from_environment": [],
        "get_user_info": [],
        "scan_files": [
          "content.count",
          "any",
          "files_with_hardcode.append",
          "str",
          "f.read",
          "logger.warning",
          "open"
        ],
        "fix_file": [
          "content.count",
          "f.read",
          "logger.error",
          "content.replace",
          "f.write",
          "open",
          "logger.info"
        ],
        "fix_all_files": [
          "str",
          "self.scan_files",
          "self.fix_file",
          "len",
          "logger.info"
        ],
        "generate_env_template": [],
        "main": [
          "print",
          "results.items",
          "parser.add_argument",
          "fixer.scan_files",
          "parser.parse_args",
          "Path",
          "fixer.fix_all_files",
          "replacements.items",
          "len",
          "HardcodeFixer",
          "argparse.ArgumentParser",
          "f.write",
          "open",
          "logger.info",
          "fixer.generate_env_template"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "typing"
      ],
      "hash": null,
      "artifact_id": "4f543169-c66f-4f36-b155-77e203e0dc89"
    },
    {
      "module_id": "src.scripts.deploy_embedded_files",
      "path": "src/scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": [
            931,
            941
          ],
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": [
            944,
            950
          ],
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": [
            953,
            1007
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            1010,
            1011
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.warning",
          "RefResolver",
          "logger.error",
          "validate"
        ],
        "backup_files": [
          "target_dir.exists",
          "shutil.copytree",
          "logger.info",
          "datetime.now"
        ],
        "deploy_embedded_files": [
          "target_path.exists",
          "Path.cwd",
          "validate_json",
          "json.dump",
          "backup_files",
          "Path",
          "target_path.open",
          "logger.error",
          "f.write",
          "logger.warning",
          "EMBEDDED_FILES.get",
          "logger.info"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "7efc237f-f85e-4aa0-b9c1-e7cd5759b901"
    },
    {
      "module_id": "src.scripts.validate_epics",
      "path": "src/scripts/validate_epics.py",
      "category": "core",
      "module_doc": "Epic Data Validator\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c GitHub issues",
      "functions": [
        {
          "name": "validate_epic_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            12,
            35
          ],
          "parameters": [
            "epic"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "task",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "validate_priorities",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u0432",
          "line_range": [
            55,
            68
          ],
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_ids",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c ID \u0437\u0430\u0434\u0430\u0447",
          "line_range": [
            70,
            82
          ],
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438",
          "line_range": [
            84,
            131
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_epic_structure": [
          "errors.append",
          "isinstance"
        ],
        "validate_task_structure": [
          "errors.append",
          "task.get",
          "isinstance"
        ],
        "validate_priorities": [
          "epic.get",
          "data.get",
          "errors.append",
          "task.get"
        ],
        "validate_task_ids": [
          "seen_ids.add",
          "epic.get",
          "errors.append",
          "task.get",
          "set",
          "data.get"
        ],
        "main": [
          "validate_task_structure",
          "validate_epic_structure",
          "print",
          "sum",
          "epic.get",
          "sys.exit",
          "validate_priorities",
          "Path",
          "all_errors.extend",
          "len",
          "e.get",
          "json.load",
          "all_errors.append",
          "validate_task_ids",
          "open",
          "epics_file.exists",
          "isinstance"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "pathlib",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "83a0e23c-6814-4247-8009-01584fda7cfc"
    },
    {
      "module_id": "src.scripts.collector",
      "path": "src/scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": [
            13,
            29
          ],
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": [
            32,
            38
          ],
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": [
            41,
            88
          ],
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            91,
            92
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "filtered.append",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "files.append",
          "path.relative_to",
          "str",
          "root_dir.rglob",
          "path.is_file",
          "apply_filters"
        ],
        "generate_struct": [
          "uuid.uuid4",
          "existing.get",
          "json.dump",
          "str",
          "collect_files",
          "output_path.exists",
          "Path",
          "len",
          "output_path.open",
          "json.load",
          "logger.info"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "f30c6743-9fa3-4526-bd68-bf2b47cc6adf"
    },
    {
      "module_id": "src.scripts.create_tasks_index",
      "path": "src/scripts/create_tasks_index.py",
      "category": "core",
      "module_doc": "Tasks Index Creator\nScans all documentation files and creates comprehensive index of tasks, EPICs, TODOs, and other actionable items.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            469,
            515
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            42,
            44
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize regex patterns for task extraction.",
          "line_range": [
            46,
            73
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "extract_from_markdown",
          "docstring": "Extract tasks from markdown file.",
          "line_range": [
            75,
            107
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_status",
          "docstring": "Extract document status.",
          "line_range": [
            109,
            120
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_priority",
          "docstring": "Extract document priority.",
          "line_range": [
            122,
            135
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_date",
          "docstring": "Extract document date.",
          "line_range": [
            137,
            142
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_epics",
          "docstring": "Extract EPIC items.",
          "line_range": [
            144,
            168
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tasks",
          "docstring": "Extract explicit task items.",
          "line_range": [
            170,
            194
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_todos",
          "docstring": "Extract TODO items.",
          "line_range": [
            196,
            219
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_phases",
          "docstring": "Extract phase/step items.",
          "line_range": [
            221,
            245
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_checkboxes",
          "docstring": "Extract checkbox items as tasks.",
          "line_range": [
            247,
            275
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract surrounding context for a match.",
          "line_range": [
            277,
            286
          ],
          "parameters": [
            "self",
            "content",
            "start",
            "end",
            "context_lines"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            292,
            294
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_documentation",
          "docstring": "Scan all documentation files for tasks.",
          "line_range": [
            296,
            314
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_index",
          "docstring": "Generate comprehensive task index.",
          "line_range": [
            316,
            367
          ],
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "generate_summary_report",
          "docstring": "Generate human-readable summary report.",
          "line_range": [
            369,
            446
          ],
          "parameters": [
            "self",
            "index"
          ],
          "decorators": []
        },
        {
          "name": "save_index",
          "docstring": "Save index and summary to files.",
          "line_range": [
            448,
            466
          ],
          "parameters": [
            "self",
            "index",
            "summary",
            "output_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Task",
          "docstring": "Represents a single task or actionable item.",
          "line_range": [
            21,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "TaskExtractor",
          "docstring": "Extract tasks from various document formats.",
          "line_range": [
            39,
            286
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                42,
                44
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize regex patterns for task extraction.",
              "line_range": [
                46,
                73
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "extract_from_markdown",
              "docstring": "Extract tasks from markdown file.",
              "line_range": [
                75,
                107
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_status",
              "docstring": "Extract document status.",
              "line_range": [
                109,
                120
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_priority",
              "docstring": "Extract document priority.",
              "line_range": [
                122,
                135
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_date",
              "docstring": "Extract document date.",
              "line_range": [
                137,
                142
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_epics",
              "docstring": "Extract EPIC items.",
              "line_range": [
                144,
                168
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_tasks",
              "docstring": "Extract explicit task items.",
              "line_range": [
                170,
                194
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_todos",
              "docstring": "Extract TODO items.",
              "line_range": [
                196,
                219
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_phases",
              "docstring": "Extract phase/step items.",
              "line_range": [
                221,
                245
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_checkboxes",
              "docstring": "Extract checkbox items as tasks.",
              "line_range": [
                247,
                275
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract surrounding context for a match.",
              "line_range": [
                277,
                286
              ],
              "parameters": [
                "self",
                "content",
                "start",
                "end",
                "context_lines"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TaskIndexGenerator",
          "docstring": "Generate comprehensive task index.",
          "line_range": [
            289,
            466
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                292,
                294
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_documentation",
              "docstring": "Scan all documentation files for tasks.",
              "line_range": [
                296,
                314
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_index",
              "docstring": "Generate comprehensive task index.",
              "line_range": [
                316,
                367
              ],
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "generate_summary_report",
              "docstring": "Generate human-readable summary report.",
              "line_range": [
                369,
                446
              ],
              "parameters": [
                "self",
                "index"
              ]
            },
            {
              "name": "save_index",
              "docstring": "Save index and summary to files.",
              "line_range": [
                448,
                466
              ],
              "parameters": [
                "self",
                "index",
                "summary",
                "output_dir"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "TaskExtractor",
          "Path"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "extract_from_markdown": [
          "self._extract_status",
          "self._extract_todos",
          "self._extract_epics",
          "self._extract_date",
          "tasks.extend",
          "f.read",
          "self._extract_checkboxes",
          "logger.error",
          "self._extract_phases",
          "self._extract_priority",
          "self._extract_tasks",
          "open"
        ],
        "_extract_status": [
          "match.group"
        ],
        "_extract_priority": [
          "match.group"
        ],
        "_extract_date": [
          "datetime.now",
          "match.group"
        ],
        "_extract_epics": [
          "match.start",
          "match.end",
          "str",
          "match.group",
          "tasks.append",
          "self._extract_context",
          "Task"
        ],
        "_extract_tasks": [
          "match.start",
          "match.end",
          "str",
          "match.group",
          "tasks.append",
          "self._extract_context",
          "Task"
        ],
        "_extract_todos": [
          "match.start",
          "str",
          "match.group",
          "tasks.append",
          "Task"
        ],
        "_extract_phases": [
          "match.start",
          "match.end",
          "str",
          "match.group",
          "tasks.append",
          "self._extract_context",
          "Task"
        ],
        "_extract_checkboxes": [
          "task_title.upper",
          "any",
          "match.start",
          "str",
          "match.group",
          "tasks.append",
          "Task"
        ],
        "_extract_context": [
          "len",
          "content.split",
          "context.strip",
          "max",
          "min"
        ],
        "scan_documentation": [
          "docs_dir.exists",
          "all_tasks.extend",
          "docs_dir.glob",
          "logger.info"
        ],
        "generate_index": [
          "by_priority.items",
          "asdict",
          "len",
          "by_status.items",
          "by_file.items",
          "by_category.items",
          "datetime.now"
        ],
        "generate_summary_report": [
          "file_categories.items",
          "priority.upper",
          "category.upper",
          "Path",
          "status.upper",
          "len",
          "sorted"
        ],
        "save_index": [
          "output_path.mkdir",
          "json.dump",
          "Path",
          "f.write",
          "open",
          "logger.info"
        ],
        "main": [
          "by_category.get",
          "by_status.items",
          "generator.save_index",
          "print",
          "generator.generate_index",
          "parser.add_argument",
          "parser.parse_args",
          "by_status.get",
          "by_category.items",
          "len",
          "generator.generate_summary_report",
          "argparse.ArgumentParser",
          "TaskIndexGenerator",
          "generator.scan_documentation",
          "logger.info",
          "sorted"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c2e79761-23b5-4b2c-a1f3-5ecfbfaed155"
    },
    {
      "module_id": "src.scripts.export_to_github_projects",
      "path": "src/scripts/export_to_github_projects.py",
      "category": "core",
      "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            183,
            266
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            23,
            26
          ],
          "parameters": [
            "self",
            "config_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "check_github_cli",
          "docstring": "Check if GitHub CLI is installed and authenticated",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "list_projects",
          "docstring": "List available GitHub Projects (via gh-projects extension)",
          "line_range": [
            38,
            55
          ],
          "parameters": [
            "self",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "create_project_item",
          "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "project_number",
            "title",
            "body",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_tasks_to_project",
          "docstring": "Export tasks to GitHub Project",
          "line_range": [
            84,
            123
          ],
          "parameters": [
            "self",
            "tasks",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_ideas_to_project",
          "docstring": "Export ideas to GitHub Project",
          "line_range": [
            125,
            164
          ],
          "parameters": [
            "self",
            "ideas",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "filter_data",
          "docstring": "Filter data by status and priority",
          "line_range": [
            166,
            180
          ],
          "parameters": [
            "self",
            "data",
            "status_filter",
            "priority_filter"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExportScript",
          "docstring": "Extended exporter with command-line interface and GitHub CLI integration",
          "line_range": [
            20,
            180
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                23,
                26
              ],
              "parameters": [
                "self",
                "config_path",
                "dry_run"
              ]
            },
            {
              "name": "check_github_cli",
              "docstring": "Check if GitHub CLI is installed and authenticated",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "list_projects",
              "docstring": "List available GitHub Projects (via gh-projects extension)",
              "line_range": [
                38,
                55
              ],
              "parameters": [
                "self",
                "owner",
                "repo"
              ]
            },
            {
              "name": "create_project_item",
              "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "project_number",
                "title",
                "body",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_tasks_to_project",
              "docstring": "Export tasks to GitHub Project",
              "line_range": [
                84,
                123
              ],
              "parameters": [
                "self",
                "tasks",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_ideas_to_project",
              "docstring": "Export ideas to GitHub Project",
              "line_range": [
                125,
                164
              ],
              "parameters": [
                "self",
                "ideas",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "filter_data",
              "docstring": "Filter data by status and priority",
              "line_range": [
                166,
                180
              ],
              "parameters": [
                "self",
                "data",
                "status_filter",
                "priority_filter"
              ]
            }
          ],
          "bases": [
            "GitHubProjectsExporter"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "super"
        ],
        "check_github_cli": [
          "self._run_gh_command",
          "print"
        ],
        "list_projects": [
          "json.loads",
          "self._run_gh_command",
          "print",
          "isinstance"
        ],
        "create_project_item": [
          "print",
          "str",
          "self._run_gh_command",
          "output.strip"
        ],
        "export_tasks_to_project": [
          "self.format_task_for_github",
          "self.create_project_item",
          "print",
          "task.get",
          "len"
        ],
        "export_ideas_to_project": [
          "self.create_project_item",
          "print",
          "self.format_idea_for_github",
          "len",
          "idea.get"
        ],
        "filter_data": [
          "item.get"
        ],
        "main": [
          "print",
          "exporter.load_official_data",
          "exporter._save_mapping",
          "sys.exit",
          "parser.add_argument",
          "exporter.export_tasks_to_project",
          "parser.parse_args",
          "exporter.export_ideas_to_project",
          "exporter.filter_data",
          "exporter.check_github_cli",
          "argparse.ArgumentParser",
          "GitHubProjectsExportScript"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "GitHubProjectsExporter",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "datetime",
        "json",
        "llmstruct.gh_view",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "6328f770-74fd-483a-b01b-7f7409063710"
    },
    {
      "module_id": "src.scripts.auto_update_struct",
      "path": "src/scripts/auto_update_struct.py",
      "category": "core",
      "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.",
      "functions": [
        {
          "name": "detect_project_changes",
          "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.",
          "line_range": [
            44,
            81
          ],
          "parameters": [
            "root_dir",
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_struct_json",
          "docstring": "Create a backup of existing struct.json.",
          "line_range": [
            84,
            97
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_struct_json",
          "docstring": "Validate generated struct.json for basic structure.",
          "line_range": [
            100,
            128
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "update_struct_json",
          "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful",
          "line_range": [
            131,
            225
          ],
          "parameters": [
            "root_dir",
            "struct_path",
            "force",
            "config_override"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for auto-update script.",
          "line_range": [
            228,
            286
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "",
          "line_range": [
            24,
            25
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            26,
            27
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_config": [],
        "load_gitignore": [],
        "generate_json": [
          "ImportError"
        ],
        "detect_project_changes": [
          "subprocess.run",
          "Path",
          "logger.warning",
          "file_path.stat",
          "logger.info"
        ],
        "backup_struct_json": [
          "subprocess.run",
          "Path",
          "logger.error",
          "logger.info",
          "datetime.now"
        ],
        "validate_struct_json": [
          "json.load",
          "logger.error",
          "open",
          "logger.info"
        ],
        "update_struct_json": [
          "backup_struct_json",
          "os.getcwd",
          "config.update",
          "cli_config.get",
          "load_gitignore",
          "json.dump",
          "subprocess.run",
          "validate_struct_json",
          "logger.error",
          "config.get",
          "generate_json",
          "detect_project_changes",
          "open",
          "load_config",
          "logger.info"
        ],
        "main": [
          "update_struct_json",
          "os.getcwd",
          "print",
          "sys.exit",
          "parser.add_argument",
          "parser.parse_args",
          "logging.getLogger",
          "detect_project_changes",
          "argparse.ArgumentParser"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "generate_json",
        "json",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "5e524c88-b40a-41e4-8d62-5e393e249015"
    },
    {
      "module_id": "src.scripts.github_sync_manager",
      "path": "src/scripts/github_sync_manager.py",
      "category": "core",
      "module_doc": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub\nSupports: Issues, Epics (Projects), Discussions\nSafety: dry-run mode, logging, collision detection",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface",
          "line_range": [
            375,
            408
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            17,
            48
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results for idempotency",
          "line_range": [
            50,
            60
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log for future idempotency",
          "line_range": [
            62,
            65
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Safe GitHub API request with rate limiting",
          "line_range": [
            67,
            94
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_issues",
          "docstring": "Get existing GitHub issues for collision detection",
          "line_range": [
            96,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_discussions",
          "docstring": "Get existing GitHub discussions",
          "line_range": [
            114,
            118
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced (idempotency)",
          "line_range": [
            120,
            125
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "find_existing_by_title",
          "docstring": "Find existing GitHub item by title similarity",
          "line_range": [
            127,
            143
          ],
          "parameters": [
            "self",
            "title",
            "existing_items"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue",
          "docstring": "Create GitHub issue from processed item",
          "line_range": [
            145,
            182
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion",
          "docstring": "Create GitHub discussion from processed item",
          "line_range": [
            184,
            194
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic",
          "docstring": "Create GitHub epic (as Project or enhanced Issue)",
          "line_range": [
            196,
            214
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "sync_category",
          "docstring": "Sync specific category with GitHub",
          "line_range": [
            216,
            290
          ],
          "parameters": [
            "self",
            "category",
            "filename"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Pre-sync validation checks",
          "line_range": [
            292,
            322
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "Main sync execution",
          "line_range": [
            324,
            373
          ],
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubSyncManager",
          "docstring": "",
          "line_range": [
            16,
            373
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                17,
                48
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results for idempotency",
              "line_range": [
                50,
                60
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log for future idempotency",
              "line_range": [
                62,
                65
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Safe GitHub API request with rate limiting",
              "line_range": [
                67,
                94
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "get_existing_issues",
              "docstring": "Get existing GitHub issues for collision detection",
              "line_range": [
                96,
                112
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_existing_discussions",
              "docstring": "Get existing GitHub discussions",
              "line_range": [
                114,
                118
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced (idempotency)",
              "line_range": [
                120,
                125
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "find_existing_by_title",
              "docstring": "Find existing GitHub item by title similarity",
              "line_range": [
                127,
                143
              ],
              "parameters": [
                "self",
                "title",
                "existing_items"
              ]
            },
            {
              "name": "create_github_issue",
              "docstring": "Create GitHub issue from processed item",
              "line_range": [
                145,
                182
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion",
              "docstring": "Create GitHub discussion from processed item",
              "line_range": [
                184,
                194
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_epic",
              "docstring": "Create GitHub epic (as Project or enhanced Issue)",
              "line_range": [
                196,
                214
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "sync_category",
              "docstring": "Sync specific category with GitHub",
              "line_range": [
                216,
                290
              ],
              "parameters": [
                "self",
                "category",
                "filename"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Pre-sync validation checks",
              "line_range": [
                292,
                322
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "Main sync execution",
              "line_range": [
                324,
                373
              ],
              "parameters": [
                "self",
                "categories"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "print",
          "os.getenv",
          "self.load_sync_log",
          "Path"
        ],
        "load_sync_log": [
          "json.load",
          "open"
        ],
        "save_sync_log": [
          "json.dump",
          "open"
        ],
        "api_request": [
          "time.sleep",
          "requests.post",
          "print",
          "response.raise_for_status",
          "requests.get",
          "response.json",
          "method.upper",
          "int",
          "ValueError",
          "requests.patch"
        ],
        "get_existing_issues": [
          "self.api_request",
          "issues.extend",
          "len"
        ],
        "get_existing_discussions": [],
        "item_already_synced": [
          "item.get"
        ],
        "find_existing_by_title": [
          "title.lower",
          "len",
          "item.get"
        ],
        "create_github_issue": [
          "self.api_request",
          "print",
          "labels.append",
          "processing_meta.get",
          "item.get"
        ],
        "create_github_discussion": [
          "print",
          "item.get"
        ],
        "create_github_epic": [
          "self.api_request",
          "print",
          "item.get"
        ],
        "sync_category": [
          "result.get",
          "print",
          "self.create_github_issue",
          "self.item_already_synced",
          "existing.get",
          "self.create_github_epic",
          "self.find_existing_by_title",
          "self.get_existing_issues",
          "file_path.exists",
          "self.get_existing_discussions",
          "self.create_github_discussion",
          "data.get",
          "json.load",
          "datetime.now",
          "open",
          "item.get"
        ],
        "validate_before_sync": [
          "self.api_request",
          "print",
          "repo_info.get",
          "user_info.get",
          "core_limit.get",
          "rate_limit.get"
        ],
        "run_sync": [
          "print",
          "sum",
          "self.sync_category",
          "self.save_sync_log",
          "self.validate_before_sync",
          "r.get",
          "results.values",
          "datetime.now"
        ],
        "main": [
          "result.get",
          "print",
          "parser.add_argument",
          "parser.parse_args",
          "manager.run_sync",
          "len",
          "GitHubSyncManager",
          "argparse.ArgumentParser"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "7a3cbf2d-e749-4208-811f-40557e8a241c"
    },
    {
      "module_id": "src.scripts.session_cli",
      "path": "src/scripts/session_cli.py",
      "category": "core",
      "module_doc": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct.\nPart of the comprehensive session management system.",
      "functions": [
        {
          "name": "get_current_branch",
          "docstring": "Get current git branch.",
          "line_range": [
            24,
            31
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "save_json_file",
          "docstring": "Save JSON file with error handling.",
          "line_range": [
            42,
            51
          ],
          "parameters": [
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_current_timestamp",
          "docstring": "Get current timestamp in ISO format.",
          "line_range": [
            53,
            55
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log_event",
          "docstring": "Log an event to worklog.json.",
          "line_range": [
            57,
            88
          ],
          "parameters": [
            "event_message",
            "author"
          ],
          "decorators": []
        },
        {
          "name": "switch_session",
          "docstring": "Switch to a different session or create new one.",
          "line_range": [
            90,
            141
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "list_sessions",
          "docstring": "List all available sessions.",
          "line_range": [
            143,
            166
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_session",
          "docstring": "Show current session details.",
          "line_range": [
            168,
            183
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_worklog",
          "docstring": "Show recent worklog entries.",
          "line_range": [
            185,
            203
          ],
          "parameters": [
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main CLI interface.",
          "line_range": [
            205,
            244
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            16,
            22
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "get_current_branch": [
          "subprocess.run"
        ],
        "load_json_file": [
          "json.load",
          "print",
          "open"
        ],
        "save_json_file": [
          "print",
          "os.makedirs",
          "json.dump",
          "open"
        ],
        "get_current_timestamp": [
          "datetime.now"
        ],
        "log_event": [
          "print",
          "get_current_timestamp",
          "current_session.get",
          "load_json_file",
          "save_json_file",
          "get_current_branch"
        ],
        "switch_session": [
          "print",
          "get_current_timestamp",
          "log_event",
          "load_json_file",
          "save_json_file",
          "get_current_branch"
        ],
        "list_sessions": [
          "load_json_file",
          "current_session.get",
          "print"
        ],
        "show_current_session": [
          "load_json_file",
          "current_session.get",
          "print"
        ],
        "show_worklog": [
          "reversed",
          "load_json_file",
          "len",
          "print"
        ],
        "main": [
          "switch_session",
          "print",
          "list_sessions",
          "show_current_session",
          "log_event",
          "len",
          "int",
          "show_worklog"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "28171b00-6141-4f74-b594-b5fa55961ab3"
    },
    {
      "module_id": "src.scripts.create_github_issues",
      "path": "src/scripts/create_github_issues.py",
      "category": "core",
      "module_doc": "GitHub Issues Creator for AI-Dogfooding Project\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GitHub issues \u0438\u0437 \u043d\u0430\u0448\u0438\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447",
      "functions": [
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            16,
            28
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_epics_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438\u0437 JSON",
          "line_range": [
            205,
            213
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f issues",
          "line_range": [
            215,
            252
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "token",
            "use_cli"
          ],
          "decorators": []
        },
        {
          "name": "create_epic_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            45,
            83
          ],
          "parameters": [
            "self",
            "epic_data"
          ],
          "decorators": []
        },
        {
          "name": "create_task_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            85,
            128
          ],
          "parameters": [
            "self",
            "task_data",
            "epic_number"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_api",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
          "line_range": [
            130,
            150
          ],
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_cli",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
          "line_range": [
            152,
            186
          ],
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_format_criteria",
          "docstring": "",
          "line_range": [
            188,
            189
          ],
          "parameters": [
            "self",
            "criteria"
          ],
          "decorators": []
        },
        {
          "name": "_format_tasks",
          "docstring": "",
          "line_range": [
            191,
            200
          ],
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "_format_metrics",
          "docstring": "",
          "line_range": [
            202,
            203
          ],
          "parameters": [
            "self",
            "metrics"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubIssuesCreator",
          "docstring": "",
          "line_range": [
            33,
            203
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                34,
                43
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "token",
                "use_cli"
              ]
            },
            {
              "name": "create_epic_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
              "line_range": [
                45,
                83
              ],
              "parameters": [
                "self",
                "epic_data"
              ]
            },
            {
              "name": "create_task_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                85,
                128
              ],
              "parameters": [
                "self",
                "task_data",
                "epic_number"
              ]
            },
            {
              "name": "_create_issue_via_api",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
              "line_range": [
                130,
                150
              ],
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_create_issue_via_cli",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
              "line_range": [
                152,
                186
              ],
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_format_criteria",
              "docstring": "",
              "line_range": [
                188,
                189
              ],
              "parameters": [
                "self",
                "criteria"
              ]
            },
            {
              "name": "_format_tasks",
              "docstring": "",
              "line_range": [
                191,
                200
              ],
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "_format_metrics",
              "docstring": "",
              "line_range": [
                202,
                203
              ],
              "parameters": [
                "self",
                "metrics"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "load_env_file": [
          "print",
          "line.startswith",
          "value.strip",
          "line.strip",
          "Path",
          "env_file.exists",
          "key.strip",
          "line.split",
          "open"
        ],
        "__init__": [],
        "create_epic_issue": [
          "self._format_metrics",
          "self._format_criteria",
          "self._create_issue_via_cli",
          "self._format_tasks",
          "self._create_issue_via_api",
          "epic_data.get"
        ],
        "create_task_issue": [
          "self._create_issue_via_api",
          "self._create_issue_via_cli",
          "self._format_criteria",
          "task_data.get"
        ],
        "_create_issue_via_api": [
          "requests.post",
          "print",
          "response.json"
        ],
        "_create_issue_via_cli": [
          "print",
          "subprocess.run",
          "os.unlink",
          "os.getpid",
          "int",
          "f.write",
          "open",
          "issue_url.split"
        ],
        "_format_criteria": [],
        "_format_tasks": [],
        "_format_metrics": [
          "metrics.items"
        ],
        "load_epics_data": [
          "print",
          "Path",
          "json.load",
          "open",
          "epics_file.exists"
        ],
        "main": [
          "print",
          "epic_data.get",
          "GitHubIssuesCreator",
          "load_epics_data",
          "epics_data.get",
          "creator.create_task_issue",
          "len",
          "creator.create_epic_issue",
          "os.getenv"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f0d338d3-1b0e-46a2-be2b-f8549587d8e8"
    },
    {
      "module_id": "src.scripts.epic_roadmap_manager",
      "path": "src/scripts/epic_roadmap_manager.py",
      "category": "core",
      "module_doc": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u0438:\n- \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 roadmap \u0438 \u043f\u043b\u0430\u043d\u043e\u0432\n- \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439\n- \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441 GitHub epics\n- \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u0432",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            259,
            291
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            19,
            22
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_roadmap",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            24,
            31
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_roadmap",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "self",
            "roadmap"
          ],
          "decorators": []
        },
        {
          "name": "show_overview",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
          "line_range": [
            42,
            80
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "show_epic_details",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            82,
            125
          ],
          "parameters": [
            "self",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
          "line_range": [
            127,
            189
          ],
          "parameters": [
            "self",
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "complete_session",
          "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            191,
            257
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EpicRoadmapManager",
          "docstring": "",
          "line_range": [
            18,
            257
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                19,
                22
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_roadmap",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                24,
                31
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_roadmap",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
              "line_range": [
                33,
                40
              ],
              "parameters": [
                "self",
                "roadmap"
              ]
            },
            {
              "name": "show_overview",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
              "line_range": [
                42,
                80
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "show_epic_details",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
              "line_range": [
                82,
                125
              ],
              "parameters": [
                "self",
                "epic_id"
              ]
            },
            {
              "name": "start_session",
              "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
              "line_range": [
                127,
                189
              ],
              "parameters": [
                "self",
                "epic_id",
                "session_id"
              ]
            },
            {
              "name": "complete_session",
              "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                191,
                257
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "load_roadmap": [
          "open",
          "print",
          "json.load"
        ],
        "save_roadmap": [
          "print",
          "json.dump",
          "open",
          "datetime.now"
        ],
        "show_overview": [
          "epics.items",
          "print",
          "roadmap.get",
          "epic.get",
          "self.load_roadmap",
          "stats.get"
        ],
        "show_epic_details": [
          "print",
          "roadmap.get",
          "epic.get",
          "self.load_roadmap",
          "session.get",
          "len",
          "epic_data.get"
        ],
        "start_session": [
          "print",
          "roadmap.get",
          "self.save_roadmap",
          "epic.get",
          "json.dump",
          "self.load_roadmap",
          "session.get",
          "os.makedirs",
          "sess.get",
          "open",
          "epic_data.get",
          "datetime.now"
        ],
        "complete_session": [
          "all",
          "print",
          "roadmap.get",
          "self.save_roadmap",
          "epic.get",
          "current_session.get",
          "json.dump",
          "self.load_roadmap",
          "session.get",
          "os.makedirs",
          "sess.get",
          "json.load",
          "open",
          "os.remove",
          "sessions_log.append",
          "datetime.now"
        ],
        "main": [
          "manager.show_epic_details",
          "print",
          "EpicRoadmapManager",
          "manager.start_session",
          "manager.complete_session",
          "parser.add_argument",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "manager.show_overview"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "22d67ddc-d1ab-4cd7-b781-7f2818bdfc60"
    },
    {
      "module_id": "src.scripts.validate_refs",
      "path": "src/scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": [
            11,
            43
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            46,
            47
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "source_file.exists",
          "target_file.exists",
          "json.dump",
          "Path",
          "enumerate",
          "logger.error",
          "broken_links.append",
          "logger.warning",
          "json.load",
          "idea.get",
          "logger.info"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "fbf78d6d-6744-45e9-9921-79da85388523"
    },
    {
      "module_id": "src.scripts.validate_json",
      "path": "src/scripts/validate_json.py",
      "category": "core",
      "module_doc": "JSON Validation Script\nValidates JSON files against their respective schemas.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            13,
            23
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate a JSON file against a schema.",
          "line_range": [
            26,
            49
          ],
          "parameters": [
            "file_path",
            "schema_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "json.load",
          "print",
          "open"
        ],
        "validate_json": [
          "load_json",
          "print",
          "validator.validate",
          "str",
          "Path",
          "Draft7Validator"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "pathlib",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "dbf50116-85f6-4fcd-a5a6-cf28c4017c47"
    },
    {
      "module_id": "src.scripts.validate_schemas",
      "path": "src/scripts/validate_schemas.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "8dbdbc09-6c9d-4fbc-945a-082833ea8ab5"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "ea8a4614-727d-45b4-bb6c-754271bde11f"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": [
            12,
            40
          ],
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": [
            43,
            61
          ],
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "logging.error",
          "str",
          "validate",
          "Path",
          "json_file.exists",
          "schema_file.exists",
          "json.load",
          "logging.info",
          "open"
        ],
        "validate_directory": [
          "any",
          "str",
          "Path",
          "validate_struct_json",
          "json_file.match"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "6678cb74-522c-4ef2-ac05-8834adeaf492"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "c720a85d-3126-46fc-8a65-0551eee2233a"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_config",
      "path": "src/llmstruct/ARCHIVE/cli_config.py",
      "category": "core",
      "module_doc": "CLI configuration management.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize configuration manager.",
          "line_range": [
            20,
            24
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from llmstruct.toml.",
          "line_range": [
            26,
            34
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "Get cache configuration section.",
          "line_range": [
            36,
            38
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "Get Copilot configuration section.",
          "line_range": [
            40,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "Get queue configuration section.",
          "line_range": [
            44,
            46
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "Get context configuration section.",
          "line_range": [
            48,
            50
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_gitignore_patterns",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            52,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "Get directories to exclude from scanning.",
          "line_range": [
            68,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "Get file patterns to include.",
          "line_range": [
            84,
            89
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "Get file patterns to exclude.",
          "line_range": [
            91,
            96
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "Get maximum file size for processing (in bytes).",
          "line_range": [
            98,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_auto_update_config",
          "docstring": "Get auto-update configuration.",
          "line_range": [
            102,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_auto_update_enabled",
          "docstring": "Check if auto-update is enabled.",
          "line_range": [
            106,
            108
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "Get path to struct.json file.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "Get path to context file.",
          "line_range": [
            114,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "Save current configuration to file.",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_config",
          "docstring": "Update configuration value.",
          "line_range": [
            126,
            131
          ],
          "parameters": [
            "self",
            "section",
            "key",
            "value"
          ],
          "decorators": []
        },
        {
          "name": "reload_config",
          "docstring": "Reload configuration from file.",
          "line_range": [
            133,
            135
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIConfig",
          "docstring": "Manages CLI configuration from llmstruct.toml and other sources.",
          "line_range": [
            17,
            135
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize configuration manager.",
              "line_range": [
                20,
                24
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from llmstruct.toml.",
              "line_range": [
                26,
                34
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cache_config",
              "docstring": "Get cache configuration section.",
              "line_range": [
                36,
                38
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_copilot_config",
              "docstring": "Get Copilot configuration section.",
              "line_range": [
                40,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_queue_config",
              "docstring": "Get queue configuration section.",
              "line_range": [
                44,
                46
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_config",
              "docstring": "Get context configuration section.",
              "line_range": [
                48,
                50
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_gitignore_patterns",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": [
                52,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "Get directories to exclude from scanning.",
              "line_range": [
                68,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_include_patterns",
              "docstring": "Get file patterns to include.",
              "line_range": [
                84,
                89
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "Get file patterns to exclude.",
              "line_range": [
                91,
                96
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_max_file_size",
              "docstring": "Get maximum file size for processing (in bytes).",
              "line_range": [
                98,
                100
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_auto_update_config",
              "docstring": "Get auto-update configuration.",
              "line_range": [
                102,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_auto_update_enabled",
              "docstring": "Check if auto-update is enabled.",
              "line_range": [
                106,
                108
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_struct_file_path",
              "docstring": "Get path to struct.json file.",
              "line_range": [
                110,
                112
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_file_path",
              "docstring": "Get path to context file.",
              "line_range": [
                114,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_config",
              "docstring": "Save current configuration to file.",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_config",
              "docstring": "Update configuration value.",
              "line_range": [
                126,
                131
              ],
              "parameters": [
                "self",
                "section",
                "key",
                "value"
              ]
            },
            {
              "name": "reload_config",
              "docstring": "Reload configuration from file.",
              "line_range": [
                133,
                135
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path"
        ],
        "_load_config": [
          "toml.load",
          "logging.error"
        ],
        "get_cache_config": [],
        "get_copilot_config": [],
        "get_queue_config": [],
        "get_context_config": [],
        "get_gitignore_patterns": [
          "line.startswith",
          "gitignore_path.open",
          "logging.error",
          "line.strip",
          "Path",
          "gitignore_path.exists"
        ],
        "get_exclude_dirs": [
          "set",
          "list",
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_include_patterns": [
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_exclude_patterns": [
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_max_file_size": [],
        "get_auto_update_config": [],
        "is_auto_update_enabled": [
          "self.get_auto_update_config"
        ],
        "get_struct_file_path": [],
        "get_context_file_path": [],
        "save_config": [
          "toml.dump",
          "logging.error"
        ],
        "update_config": [
          "self.save_config"
        ],
        "reload_config": [
          "self._load_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "logging",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "1c400c00-8a5e-4b46-96eb-800255dfcc1a"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_core",
      "path": "src/llmstruct/ARCHIVE/cli_core.py",
      "category": "core",
      "module_doc": "Core CLI functionality and main loop.",
      "functions": [
        {
          "name": "create_cli_core",
          "docstring": "Factory function to create CLI core instance.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI core with root directory.",
          "line_range": [
            28,
            35
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_cache",
          "docstring": "Initialize cache if enabled in config.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_copilot",
          "docstring": "Initialize Copilot integration if enabled.",
          "line_range": [
            55,
            63
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive_mode",
          "docstring": "Run the interactive CLI mode.",
          "line_range": [
            65,
            97
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "Clean up resources.",
          "line_range": [
            99,
            107
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLICore",
          "docstring": "Core CLI class handling main loop and coordination.",
          "line_range": [
            25,
            107
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI core with root directory.",
              "line_range": [
                28,
                35
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "setup_cache",
              "docstring": "Initialize cache if enabled in config.",
              "line_range": [
                37,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_copilot",
              "docstring": "Initialize Copilot integration if enabled.",
              "line_range": [
                55,
                63
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_interactive_mode",
              "docstring": "Run the interactive CLI mode.",
              "line_range": [
                65,
                97
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources.",
              "line_range": [
                99,
                107
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CLIConfig",
          "CommandProcessor",
          "CLIUtils"
        ],
        "setup_cache": [
          "str",
          "Path",
          "cache_config.get",
          "JSONCache",
          "logging.info",
          "logging.warning",
          "cache_path.mkdir"
        ],
        "setup_copilot": [
          "logging.warning",
          "initialize_copilot",
          "copilot_config.get",
          "logging.info"
        ],
        "run_interactive_mode": [
          "print",
          "self.setup_cache",
          "logging.error",
          "input",
          "user_input.startswith",
          "self.setup_copilot",
          "user_input.lower",
          "self.cleanup"
        ],
        "cleanup": [
          "logging.info"
        ],
        "create_cli_core": [
          "CLICore"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "JSONCache",
        "Optional",
        "Path",
        "cli_commands",
        "cli_config",
        "cli_utils",
        "copilot",
        "initialize_copilot",
        "llmstruct.cache",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "953e9107-4d90-466c-9ce1-f41ac097dc5f"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_argument_parser",
      "path": "src/llmstruct/ARCHIVE/cli_argument_parser.py",
      "category": "core",
      "module_doc": "CLI argument parsing for LLMStruct.",
      "functions": [
        {
          "name": "create_argument_parser",
          "docstring": "Create and configure the main argument parser.",
          "line_range": [
            14,
            113
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "add_api_bot_commands",
          "docstring": "Add API and bot management commands to the parser.",
          "line_range": [
            116,
            126
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        },
        {
          "name": "create_full_argument_parser",
          "docstring": "Create the full argument parser with all commands.",
          "line_range": [
            129,
            137
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "create_argument_parser": [
          "query_parser.add_argument",
          "copilot_parser.add_argument",
          "subparsers.add_parser",
          "duplicates_parser.add_argument",
          "parse_parser.add_argument",
          "interactive_parser.add_argument",
          "audit_parser.add_argument",
          "review_parser.add_argument",
          "context_parser.add_argument",
          "argparse.ArgumentParser",
          "parser.add_subparsers",
          "dogfood_parser.add_argument"
        ],
        "add_api_bot_commands": [
          "add_bot_commands",
          "add_api_commands"
        ],
        "create_full_argument_parser": [
          "create_argument_parser",
          "add_api_bot_commands"
        ]
      },
      "dependencies": [
        "Path",
        "add_api_commands",
        "add_bot_commands",
        "api_commands",
        "argparse",
        "bot_commands",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "a5844cb1-a16f-4087-80a5-1a8e4f646fe3"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_utils",
      "path": "src/llmstruct/ARCHIVE/cli_utils.py",
      "category": "core",
      "module_doc": "CLI utility functions.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize utils with root directory.",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read file content with size limit.",
          "line_range": [
            28,
            50
          ],
          "parameters": [
            "self",
            "file_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "write_file_content",
          "docstring": "Write content to file.",
          "line_range": [
            52,
            70
          ],
          "parameters": [
            "self",
            "file_path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "get_directory_structure",
          "docstring": "Get directory structure using folder generator.",
          "line_range": [
            72,
            115
          ],
          "parameters": [
            "self",
            "path",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON content.",
          "line_range": [
            117,
            123
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "format_json",
          "docstring": "Format data as JSON string.",
          "line_range": [
            125,
            131
          ],
          "parameters": [
            "self",
            "data",
            "indent"
          ],
          "decorators": []
        },
        {
          "name": "generate_unique_id",
          "docstring": "Generate unique ID for commands, queues, etc.",
          "line_range": [
            133,
            137
          ],
          "parameters": [
            "self",
            "prefix"
          ],
          "decorators": []
        },
        {
          "name": "safe_path_join",
          "docstring": "Safely join path parts, preventing directory traversal.",
          "line_range": [
            139,
            149
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_exists",
          "docstring": "Check if file exists.",
          "line_range": [
            151,
            157
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "dir_exists",
          "docstring": "Check if directory exists.",
          "line_range": [
            159,
            165
          ],
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_size",
          "docstring": "Get file size in bytes.",
          "line_range": [
            167,
            173
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_file",
          "docstring": "Create backup of file with timestamp.",
          "line_range": [
            175,
            191
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_backups",
          "docstring": "Clean up old backup files, keeping only the most recent ones.",
          "line_range": [
            193,
            222
          ],
          "parameters": [
            "self",
            "file_path",
            "keep_count"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIUtils",
          "docstring": "Utility functions for CLI operations.",
          "line_range": [
            21,
            222
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize utils with root directory.",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "read_file_content",
              "docstring": "Read file content with size limit.",
              "line_range": [
                28,
                50
              ],
              "parameters": [
                "self",
                "file_path",
                "max_size"
              ]
            },
            {
              "name": "write_file_content",
              "docstring": "Write content to file.",
              "line_range": [
                52,
                70
              ],
              "parameters": [
                "self",
                "file_path",
                "content"
              ]
            },
            {
              "name": "get_directory_structure",
              "docstring": "Get directory structure using folder generator.",
              "line_range": [
                72,
                115
              ],
              "parameters": [
                "self",
                "path",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ]
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON content.",
              "line_range": [
                117,
                123
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "format_json",
              "docstring": "Format data as JSON string.",
              "line_range": [
                125,
                131
              ],
              "parameters": [
                "self",
                "data",
                "indent"
              ]
            },
            {
              "name": "generate_unique_id",
              "docstring": "Generate unique ID for commands, queues, etc.",
              "line_range": [
                133,
                137
              ],
              "parameters": [
                "self",
                "prefix"
              ]
            },
            {
              "name": "safe_path_join",
              "docstring": "Safely join path parts, preventing directory traversal.",
              "line_range": [
                139,
                149
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_exists",
              "docstring": "Check if file exists.",
              "line_range": [
                151,
                157
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "dir_exists",
              "docstring": "Check if directory exists.",
              "line_range": [
                159,
                165
              ],
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "get_file_size",
              "docstring": "Get file size in bytes.",
              "line_range": [
                167,
                173
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "backup_file",
              "docstring": "Create backup of file with timestamp.",
              "line_range": [
                175,
                191
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "cleanup_old_backups",
              "docstring": "Clean up old backup files, keeping only the most recent ones.",
              "line_range": [
                193,
                222
              ],
              "parameters": [
                "self",
                "file_path",
                "keep_count"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "read_file_content": [
          "os.stat",
          "logging.error",
          "f.read",
          "logging.warning",
          "open"
        ],
        "write_file_content": [
          "logging.error",
          "Path",
          "f.write",
          "logging.info",
          "open"
        ],
        "get_directory_structure": [
          "os.listdir",
          "get_folder_structure",
          "logging.error",
          "sorted"
        ],
        "validate_json": [
          "json.loads",
          "str"
        ],
        "format_json": [
          "str",
          "json.dumps",
          "logging.error"
        ],
        "generate_unique_id": [
          "uuid.uuid4",
          "time.time",
          "int",
          "str"
        ],
        "safe_path_join": [
          "resolved_path.startswith",
          "ValueError"
        ],
        "file_exists": [
          "self.safe_path_join"
        ],
        "dir_exists": [
          "self.safe_path_join"
        ],
        "get_file_size": [
          "self.safe_path_join"
        ],
        "backup_file": [
          "logging.error",
          "dst.write",
          "int",
          "self.safe_path_join",
          "time.time",
          "open",
          "src.read"
        ],
        "cleanup_old_backups": [
          "logging.warning",
          "filename.split",
          "os.listdir",
          "logging.error",
          "int",
          "filename.startswith",
          "os.remove",
          "self.safe_path_join",
          "logging.info",
          "backups.append",
          "backups.sort"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "b00daa88-b1de-4fdb-95ac-a29cda81046d"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_commands",
      "path": "src/llmstruct/ARCHIVE/cli_commands.py",
      "category": "core",
      "module_doc": "CLI command processing and handlers.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize command processor.",
          "line_range": [
            33,
            72
          ],
          "parameters": [
            "self",
            "root_dir",
            "config",
            "utils"
          ],
          "decorators": []
        },
        {
          "name": "set_cache",
          "docstring": "Set cache instance.",
          "line_range": [
            74,
            76
          ],
          "parameters": [
            "self",
            "cache"
          ],
          "decorators": []
        },
        {
          "name": "set_copilot",
          "docstring": "Set Copilot manager instance.",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "self",
            "copilot_manager"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "Process a command starting with /.",
          "line_range": [
            82,
            98
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "process_prompt",
          "docstring": "Process a regular user prompt (not a command).",
          "line_range": [
            100,
            152
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Show help information.",
          "line_range": [
            154,
            217
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace",
          "docstring": "Handle workspace state and permissions management.",
          "line_range": [
            219,
            334
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_mode",
          "docstring": "Handle context mode operations with workspace integration.",
          "line_range": [
            336,
            437
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_view",
          "docstring": "View file or directory contents.",
          "line_range": [
            439,
            478
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_write",
          "docstring": "Write content to a file.",
          "line_range": [
            480,
            505
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_queue",
          "docstring": "Handle queue operations.",
          "line_range": [
            507,
            549
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_cache",
          "docstring": "Handle cache operations.",
          "line_range": [
            551,
            590
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_copilot",
          "docstring": "Handle Copilot operations.",
          "line_range": [
            592,
            626
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_config",
          "docstring": "Handle configuration operations.",
          "line_range": [
            628,
            660
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Show system status.",
          "line_range": [
            662,
            676
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_backup",
          "docstring": "Create backup of a file.",
          "line_range": [
            678,
            693
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_parse",
          "docstring": "Parse project structure.",
          "line_range": [
            695,
            715
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_audit",
          "docstring": "Handle audit operations.",
          "line_range": [
            717,
            743
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_auto_update",
          "docstring": "Handle auto-update operations.",
          "line_range": [
            745,
            765
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_struct_status",
          "docstring": "Handle struct status operations.",
          "line_range": [
            767,
            791
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context",
          "docstring": "Handle context operations.",
          "line_range": [
            793,
            849
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_session",
          "docstring": "Handle session operations.",
          "line_range": [
            851,
            902
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CommandProcessor",
          "docstring": "Processes CLI commands and user prompts.",
          "line_range": [
            30,
            902
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize command processor.",
              "line_range": [
                33,
                72
              ],
              "parameters": [
                "self",
                "root_dir",
                "config",
                "utils"
              ]
            },
            {
              "name": "set_cache",
              "docstring": "Set cache instance.",
              "line_range": [
                74,
                76
              ],
              "parameters": [
                "self",
                "cache"
              ]
            },
            {
              "name": "set_copilot",
              "docstring": "Set Copilot manager instance.",
              "line_range": [
                78,
                80
              ],
              "parameters": [
                "self",
                "copilot_manager"
              ]
            },
            {
              "name": "process_command",
              "docstring": "Process a command starting with /.",
              "line_range": [
                82,
                98
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "process_prompt",
              "docstring": "Process a regular user prompt (not a command).",
              "line_range": [
                100,
                152
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Show help information.",
              "line_range": [
                154,
                217
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace",
              "docstring": "Handle workspace state and permissions management.",
              "line_range": [
                219,
                334
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_mode",
              "docstring": "Handle context mode operations with workspace integration.",
              "line_range": [
                336,
                437
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_view",
              "docstring": "View file or directory contents.",
              "line_range": [
                439,
                478
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_write",
              "docstring": "Write content to a file.",
              "line_range": [
                480,
                505
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_queue",
              "docstring": "Handle queue operations.",
              "line_range": [
                507,
                549
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_cache",
              "docstring": "Handle cache operations.",
              "line_range": [
                551,
                590
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_copilot",
              "docstring": "Handle Copilot operations.",
              "line_range": [
                592,
                626
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_config",
              "docstring": "Handle configuration operations.",
              "line_range": [
                628,
                660
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Show system status.",
              "line_range": [
                662,
                676
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_backup",
              "docstring": "Create backup of a file.",
              "line_range": [
                678,
                693
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_parse",
              "docstring": "Parse project structure.",
              "line_range": [
                695,
                715
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_audit",
              "docstring": "Handle audit operations.",
              "line_range": [
                717,
                743
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_auto_update",
              "docstring": "Handle auto-update operations.",
              "line_range": [
                745,
                765
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_struct_status",
              "docstring": "Handle struct status operations.",
              "line_range": [
                767,
                791
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context",
              "docstring": "Handle context operations.",
              "line_range": [
                793,
                849
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_session",
              "docstring": "Handle session operations.",
              "line_range": [
                851,
                902
              ],
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "print",
          "WorkspaceStateManager"
        ],
        "set_cache": [],
        "set_copilot": [],
        "process_command": [
          "print",
          "logging.error",
          "command_line.strip",
          "command_line.split",
          "len"
        ],
        "process_prompt": [
          "CopilotEvent",
          "print",
          "logging.error",
          "prompt.strip",
          "len",
          "context_info.get",
          "logging.info",
          "logging.warning",
          "get_optimized_context",
          "context_data.get"
        ],
        "cmd_help": [
          "print"
        ],
        "cmd_workspace": [
          "override.get",
          "permissions.get",
          "boundaries.get",
          "print",
          "result.get",
          "action_args.split",
          "args.strip",
          "entry.get",
          "logging.error",
          "len",
          "int",
          "state.get"
        ],
        "cmd_mode": [
          "re.findall",
          "result.get",
          "permissions.get",
          "print",
          "args.lower",
          "metrics.get",
          "args.strip",
          "len",
          "args.upper",
          "get_optimized_context",
          "context_data.get"
        ],
        "cmd_view": [
          "args.strip",
          "print",
          "os.listdir",
          "sorted"
        ],
        "cmd_write": [
          "print",
          "content.startswith",
          "len",
          "content.endswith",
          "args.split"
        ],
        "cmd_queue": [
          "print",
          "args.strip",
          "cmd.get",
          "len",
          "enumerate",
          "queue_data.get",
          "json.load",
          "open",
          "os.remove"
        ],
        "cmd_cache": [
          "print",
          "args.strip",
          "len",
          "os.listdir",
          "stats.get"
        ],
        "cmd_copilot": [
          "print",
          "args.strip",
          "json.load",
          "json.dumps",
          "open"
        ],
        "cmd_config": [
          "args.strip",
          "json.dumps",
          "print"
        ],
        "cmd_status": [
          "print"
        ],
        "cmd_backup": [
          "args.strip",
          "print"
        ],
        "cmd_parse": [
          "print",
          "generate_json"
        ],
        "cmd_audit": [
          "args.strip",
          "print"
        ],
        "handle_auto_update": [
          "print",
          "generate_json"
        ],
        "handle_struct_status": [
          "datetime.fromtimestamp",
          "print",
          "struct_data.get",
          "os.stat",
          "len",
          "json.load",
          "open"
        ],
        "cmd_context": [
          "print",
          "metrics.get",
          "args.strip",
          "len",
          "get_optimized_context",
          "context_data.get"
        ],
        "cmd_session": [
          "print",
          "args.strip",
          "len",
          "state.get",
          "datetime.now"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CopilotContextManager",
        "CopilotEvent",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "WorkspaceStateManager",
        "cli_config",
        "cli_utils",
        "copilot",
        "create_context_orchestrator",
        "datetime",
        "generate_json",
        "get_optimized_context",
        "get_optimized_context_for_scenario",
        "initialize_copilot",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "sys",
        "trigger_copilot_event",
        "typing",
        "workspace"
      ],
      "hash": null,
      "artifact_id": "d941e46e-8197-4bce-8c50-707897fdcdbf"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_main_commands",
      "path": "src/llmstruct/ARCHIVE/cli_main_commands.py",
      "category": "core",
      "module_doc": "Main CLI command handlers for LLMStruct.",
      "functions": [
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            33,
            68
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            71,
            127
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            130,
            136
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            139,
            146
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            149,
            175
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "basic_interactive_processing",
          "docstring": "Basic interactive processing without enhanced features.",
          "line_range": [
            178,
            230
          ],
          "parameters": [
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            233,
            235
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            238,
            240
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            243,
            245
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            248,
            366
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": [
            369,
            387
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": [
            390,
            495
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse": [
          "load_gitignore",
          "attach_to_llm_request",
          "logging.error",
          "JSONCache",
          "cache.close",
          "logging.info",
          "generate_json"
        ],
        "query": [
          "client.query",
          "LLMClient",
          "hasattr",
          "orchestrator.get_context_for_scenario",
          "json.dump",
          "logging.error",
          "Path",
          "create_context_orchestrator",
          "client.query_with_context",
          "JSONCache",
          "logging.info",
          "logging.warning",
          "cache.close"
        ],
        "interactive": [
          "logging.warning",
          "interactive_legacy",
          "interactive_modular"
        ],
        "interactive_modular": [
          "create_cli_core",
          "cli_core.run_interactive_mode",
          "logging.error",
          "interactive_legacy"
        ],
        "interactive_legacy": [
          "JSONCache",
          "basic_interactive_processing",
          "print",
          "logging.error",
          "Path",
          "LLMClient",
          "cache.close",
          "process_cli_queue_enhanced"
        ],
        "basic_interactive_processing": [
          "client.query",
          "print",
          "input",
          "f.read",
          "user_input.startswith",
          "user_input.lower",
          "open"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "copilot": [
          "initialize_copilot",
          "getattr",
          "shutil.copy",
          "manager.refresh_all_contexts",
          "template_path.exists",
          "config_path.exists",
          "smart_suggest",
          "manager.validate_change",
          "layers.split",
          "manager.load_context_layer",
          "manager.export_context",
          "manager.close",
          "hasattr",
          "manager.get_context_status",
          "print",
          "f.write",
          "logging.error",
          "Path",
          "enumerate",
          "logging.info",
          "open",
          "manager.unload_context_layer"
        ],
        "audit": [
          "hasattr",
          "print",
          "file_path.exists",
          "Path",
          "analyze_duplicates"
        ],
        "analyze_duplicates": [
          "f.get",
          "analysis.get",
          "print",
          "open",
          "getattr",
          "WorkflowOrchestrator",
          "json.dump",
          "logging.error",
          "func.get",
          "len",
          "json.dumps",
          "orchestrator.analyze_codebase_for_duplicates"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Optional",
        "Path",
        "WorkflowOrchestrator",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "cli",
        "cli_core",
        "context_orchestrator",
        "copilot",
        "create_cli_core",
        "create_context_orchestrator",
        "generate_json",
        "initialize_copilot",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "process_cli_queue_enhanced",
        "shutil",
        "smart_suggest",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": null,
      "artifact_id": "e2e17b9c-47d0-4f6d-9332-c135780fadd6"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": [
            13,
            20
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content.",
          "line_range": [
            72,
            79
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data.",
          "line_range": [
            82,
            154
          ],
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            26,
            29
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": [
            31,
            35
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": [
            37,
            43
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": [
            45,
            50
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": [
            52,
            57
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": [
            59,
            69
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": [
            23,
            69
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                29
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": [
                37,
                43
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": [
                45,
                50
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": [
                52,
                57
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": [
                59,
                69
              ],
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_AsyncFunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_Call": [
          "self.generic_visit",
          "isinstance"
        ],
        "compute_file_hash": [
          "f.read",
          "hashlib.sha256",
          "open",
          "logging.error"
        ],
        "analyze_module": [
          "functions.append",
          "compute_file_hash",
          "ast.parse",
          "visitor.visit",
          "ast.walk",
          "logging.error",
          "str",
          "list",
          "Path",
          "f.read",
          "CallVisitor",
          "ast.get_docstring",
          "infer_category",
          "ast.unparse",
          "classes.append",
          "open",
          "isinstance",
          "sorted"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c06a4b5f-9675-4dc3-b73b-bdd70d55bfa7"
    },
    {
      "module_id": "src.llmstruct.parsers.universal_converter",
      "path": "src/llmstruct/parsers/universal_converter.py",
      "category": "core",
      "module_doc": "Universal Code Converter - Orchestrates all language parsers\nConverts any codebase to llmstruct JSON format",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for universal converter",
          "line_range": [
            375,
            428
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            55,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            79,
            82
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "detect_language",
          "docstring": "Detect programming language from file extension",
          "line_range": [
            84,
            92
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "detect_project_languages",
          "docstring": "Detect all languages in project and count files",
          "line_range": [
            94,
            109
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "get_project_files",
          "docstring": "Get all relevant files for conversion",
          "line_range": [
            111,
            138
          ],
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_python_project",
          "docstring": "Convert Python project to llmstruct format",
          "line_range": [
            140,
            171
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_go_project",
          "docstring": "Convert Go project to llmstruct format",
          "line_range": [
            173,
            190
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_javascript_project",
          "docstring": "Convert JavaScript project to llmstruct format",
          "line_range": [
            192,
            223
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_project",
          "docstring": "Convert any project to llmstruct format",
          "line_range": [
            225,
            250
          ],
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_multi_language_project",
          "docstring": "Convert multi-language project with separate sections per language",
          "line_range": [
            252,
            282
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_build_project_structure",
          "docstring": "Build standard llmstruct project structure",
          "line_range": [
            284,
            312
          ],
          "parameters": [
            "self",
            "language",
            "project_path",
            "modules",
            "toc"
          ],
          "decorators": []
        },
        {
          "name": "_build_empty_project_structure",
          "docstring": "Build empty structure when conversion fails",
          "line_range": [
            314,
            329
          ],
          "parameters": [
            "self",
            "language",
            "project_path",
            "error"
          ],
          "decorators": []
        },
        {
          "name": "_merge_language_results",
          "docstring": "Merge multiple language results into unified structure",
          "line_range": [
            331,
            372
          ],
          "parameters": [
            "self",
            "project_path",
            "language_results"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Language",
          "docstring": "",
          "line_range": [
            33,
            42
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ConverterConfig",
          "docstring": "Configuration for universal converter",
          "line_range": [
            46,
            62
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                55,
                62
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "UniversalConverter",
          "docstring": "Universal code converter for any programming language",
          "line_range": [
            65,
            372
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                79,
                82
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "detect_language",
              "docstring": "Detect programming language from file extension",
              "line_range": [
                84,
                92
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "detect_project_languages",
              "docstring": "Detect all languages in project and count files",
              "line_range": [
                94,
                109
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "get_project_files",
              "docstring": "Get all relevant files for conversion",
              "line_range": [
                111,
                138
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_python_project",
              "docstring": "Convert Python project to llmstruct format",
              "line_range": [
                140,
                171
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_go_project",
              "docstring": "Convert Go project to llmstruct format",
              "line_range": [
                173,
                190
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_javascript_project",
              "docstring": "Convert JavaScript project to llmstruct format",
              "line_range": [
                192,
                223
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_project",
              "docstring": "Convert any project to llmstruct format",
              "line_range": [
                225,
                250
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_multi_language_project",
              "docstring": "Convert multi-language project with separate sections per language",
              "line_range": [
                252,
                282
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_build_project_structure",
              "docstring": "Build standard llmstruct project structure",
              "line_range": [
                284,
                312
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "modules",
                "toc"
              ]
            },
            {
              "name": "_build_empty_project_structure",
              "docstring": "Build empty structure when conversion fails",
              "line_range": [
                314,
                329
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "error"
              ]
            },
            {
              "name": "_merge_language_results",
              "docstring": "Merge multiple language results into unified structure",
              "line_range": [
                331,
                372
              ],
              "parameters": [
                "self",
                "project_path",
                "language_results"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "ConverterConfig",
          "GoAnalyzer",
          "JavaScriptParser"
        ],
        "detect_language": [
          "Path"
        ],
        "detect_project_languages": [
          "os.walk",
          "self.detect_language",
          "languages.get",
          "any"
        ],
        "get_project_files": [
          "os.walk",
          "self.detect_language",
          "files.append",
          "any"
        ],
        "convert_python_project": [
          "self.get_project_files",
          "modules.append",
          "self._build_project_structure",
          "analyze_python",
          "module_data.get",
          "toc.append",
          "len",
          "logger.warning",
          "logger.info"
        ],
        "convert_go_project": [
          "str",
          "self._build_empty_project_structure",
          "logger.error",
          "convert_to_llmstruct_format",
          "logger.info"
        ],
        "convert_javascript_project": [
          "self.get_project_files",
          "modules.append",
          "self._build_project_structure",
          "module_data.get",
          "toc.append",
          "len",
          "logger.warning",
          "logger.info"
        ],
        "convert_project": [
          "self.detect_project_languages",
          "self.convert_python_project",
          "self.convert_go_project",
          "ValueError",
          "languages.keys",
          "self.convert_javascript_project",
          "NotImplementedError",
          "max",
          "logger.info"
        ],
        "convert_multi_language_project": [
          "logger.warning",
          "self.detect_project_languages",
          "self.convert_python_project",
          "self.convert_go_project",
          "logger.error",
          "self._merge_language_results",
          "ValueError",
          "languages.keys",
          "self.convert_javascript_project",
          "logger.info"
        ],
        "_build_project_structure": [
          "language.title",
          "len",
          "sum",
          "m.get"
        ],
        "_build_empty_project_structure": [],
        "_merge_language_results": [
          "result.get",
          "all_modules.append",
          "all_toc.append",
          "list",
          "language_results.keys",
          "language_results.items",
          "stats.get"
        ],
        "main": [
          "result.get",
          "traceback.print_exc",
          "print",
          "exit",
          "parser.add_argument",
          "converter.convert_multi_language_project",
          "parser.parse_args",
          "UniversalConverter",
          "ConverterConfig",
          "logger.error",
          "converter.convert_project",
          "argparse.ArgumentParser",
          "f.write",
          "Language",
          "json.dumps",
          "open",
          "stats.get"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "GoAnalyzer",
        "JavaScriptParser",
        "List",
        "Optional",
        "Path",
        "Union",
        "analyze_module",
        "argparse",
        "convert_to_llmstruct_format",
        "dataclass",
        "dataclasses",
        "enum",
        "go_analyzer",
        "javascript_parser",
        "json",
        "logging",
        "os",
        "pathlib",
        "python_parser",
        "sys",
        "traceback",
        "typing"
      ],
      "hash": null,
      "artifact_id": "38c73e27-f21c-49fa-bcf6-b47bc99152f0"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "javascript_parser"
      ],
      "hash": null,
      "artifact_id": "a8464450-f4ba-4aa6-ba26-93148e465021"
    },
    {
      "module_id": "src.llmstruct.parsers.go_analyzer",
      "path": "src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "module_doc": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b: go/packages, go/analysis",
      "functions": [
        {
          "name": "convert_to_llmstruct_format",
          "docstring": "\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 llmstruct",
          "line_range": [
            203,
            337
          ],
          "parameters": [
            "analysis",
            "include_ranges",
            "goals"
          ],
          "decorators": []
        },
        {
          "name": "_compute_file_hash",
          "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 SHA-256 \u0445\u044d\u0448 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            339,
            345
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            347,
            402
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_setup_analyzer",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
          "line_range": [
            28,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cleanup",
          "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
          "line_range": [
            68,
            72
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_project",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            74,
            125
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_fallback_analysis",
          "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            127,
            201
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GoAnalyzer",
          "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 Go \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432",
          "line_range": [
            21,
            201
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_setup_analyzer",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
              "line_range": [
                28,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cleanup",
              "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
              "line_range": [
                68,
                72
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_project",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
              "line_range": [
                74,
                125
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_fallback_analysis",
              "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                127,
                201
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "_setup_analyzer": [
          "str",
          "subprocess.run",
          "Path",
          "analyzer_source.read_text",
          "analyzer_file.write_text",
          "logging.warning",
          "tempfile.mkdtemp"
        ],
        "_cleanup": [
          "shutil.rmtree",
          "Path"
        ],
        "analyze_project": [
          "self._cleanup",
          "self._fallback_analysis",
          "logging.error",
          "subprocess.run",
          "json.loads",
          "logging.info",
          "logging.warning",
          "self._setup_analyzer"
        ],
        "_fallback_analysis": [
          "line.startswith",
          "file_path.relative_to",
          "str",
          "line.strip",
          "list",
          "Path",
          "go_mod_path.exists",
          "file_path.read_text",
          "set",
          "line.split",
          "len",
          "packages.add",
          "content.split",
          "go_mod_path.read_text",
          "logging.info",
          "logging.warning",
          "sorted"
        ],
        "convert_to_llmstruct_format": [
          "analysis.get",
          "sum",
          "file_data.get",
          "iface.get",
          "uuid.uuid4",
          "modules.append",
          "path.replace",
          "str",
          "toc.append",
          "fn.get",
          "struct.get",
          "_compute_file_hash",
          "len",
          "classes.append",
          "functions.append",
          "module.get",
          "path.endswith"
        ],
        "_compute_file_hash": [
          "f.read",
          "hashlib.sha256",
          "open"
        ],
        "main": [
          "result.get",
          "traceback.print_exc",
          "print",
          "sys.exit",
          "GoAnalyzer",
          "parser.add_argument",
          "parser.parse_args",
          "Path",
          "analyzer.analyze_project",
          "len",
          "convert_to_llmstruct_format",
          "argparse.ArgumentParser",
          "f.write",
          "json.dumps",
          "open",
          "stats.get"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "subprocess",
        "sys",
        "tempfile",
        "traceback",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "95872282-402f-4e0b-bad4-4170760f4b67"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            9,
            13
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": [
            15,
            20
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": [
            22,
            41
          ],
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": [
            43,
            124
          ],
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": [
            8,
            124
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                9,
                13
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": [
                15,
                20
              ],
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": [
                22,
                41
              ],
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": [
                43,
                124
              ],
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "f.read",
          "hashlib.sha256",
          "open"
        ],
        "compute_file_metadata": [
          "os.stat",
          "sum",
          "open",
          "self.file_hash"
        ],
        "parse_module": [
          "self.compute_file_metadata",
          "str",
          "f.read",
          "esprima.parseModule",
          "open"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "74c9b130-d65f-4605-8346-8a35a286f4ad"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            15,
            89
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 include_dirs.",
          "line_range": [
            92,
            161
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs",
            "include_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 include_dirs.",
          "line_range": [
            164,
            233
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs",
            "include_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json_with_output_file",
          "docstring": "",
          "line_range": [
            236,
            261
          ],
          "parameters": [
            "root_dir",
            "output_file",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs",
            "include_ranges",
            "include_hashes",
            "goals"
          ],
          "decorators": []
        },
        {
          "name": "norm_dirname",
          "docstring": "",
          "line_range": [
            114,
            115
          ],
          "parameters": [
            "d"
          ],
          "decorators": []
        },
        {
          "name": "is_included_dir",
          "docstring": "",
          "line_range": [
            124,
            128
          ],
          "parameters": [
            "f"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "abs_dir_path.match",
          "any",
          "p.rstrip",
          "os.walk",
          "abs_dir_path.joinpath",
          "structure.append",
          "str",
          "uuid.uuid4",
          "file_path.match",
          "Path",
          "abs_dir_path.relative_to",
          "file_path.relative_to",
          "set",
          "p.endswith",
          "sorted"
        ],
        "build_toc_and_modules": [],
        "norm_dirname": [],
        "is_included_dir": [
          "norm_dirname",
          "any"
        ],
        "generate_json": [
          "build_toc_and_modules",
          "sum",
          "uuid.uuid4",
          "str",
          "list",
          "Path",
          "set",
          "len",
          "get_folder_structure"
        ],
        "generate_json_with_output_file": [
          "json.dump",
          "open",
          "generate_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "e7af0c01-4ddc-4022-acd6-c38b93d459fa"
    },
    {
      "module_id": "src.llmstruct.generators.go_json_generator",
      "path": "src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_go_folder_structure",
          "docstring": "Capture directory and file structure for Go projects with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            15,
            85
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_go_toc_and_modules",
          "docstring": "Build TOC and modules for Go projects with artifact_id and robust filtering.",
          "line_range": [
            88,
            143
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "extract_go_mod_info",
          "docstring": "Extract information from go.mod file.",
          "line_range": [
            146,
            182
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "generate_go_json",
          "docstring": "Generate JSON structure for Go project with artifact_id, summary, and tags.",
          "line_range": [
            185,
            259
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_go_folder_structure": [
          "any",
          "p.rstrip",
          "os.walk",
          "structure.append",
          "uuid.uuid4",
          "str",
          "file_path.match",
          "file_path.relative_to",
          "Path",
          "set",
          "p.endswith",
          "sorted"
        ],
        "build_go_toc_and_modules": [
          "any",
          "analyze_module",
          "modules.append",
          "p.rstrip",
          "uuid.uuid4",
          "f.match",
          "str",
          "Path",
          "toc.append",
          "set",
          "len",
          "p.endswith",
          "module.get"
        ],
        "extract_go_mod_info": [
          "line.startswith",
          "content.strip",
          "logging.error",
          "line.strip",
          "Path",
          "go_mod_path.exists",
          "f.read",
          "line.split",
          "len",
          "dependencies.append",
          "open"
        ],
        "generate_go_json": [
          "sum",
          "build_go_toc_and_modules",
          "go_mod_info.get",
          "uuid.uuid4",
          "str",
          "list",
          "Path",
          "set",
          "len",
          "extract_go_mod_info",
          "get_go_folder_structure",
          "m.get"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.go_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "b2d7edd0-90f2-4377-95b2-462ba9e6c60b"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "e22bcbb3-c33f-4d56-b2e2-956c16605949"
    },
    {
      "module_id": "src.llmstruct.api.auth",
      "path": "src/llmstruct/api/auth.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "verify_api_key",
          "docstring": "",
          "line_range": [
            5,
            11
          ],
          "parameters": [
            "authorization"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "verify_api_key": [
          "HTTPException",
          "authorization.startswith",
          "Header",
          "authorization.split"
        ]
      },
      "dependencies": [
        "HTTPException",
        "Header",
        "fastapi"
      ],
      "hash": null,
      "artifact_id": "fc536b00-cd13-4779-83c0-a9f846043d16"
    },
    {
      "module_id": "src.llmstruct.api.app",
      "path": "src/llmstruct/api/app.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "CORSMiddleware",
        "FastAPI",
        "chat",
        "fastapi",
        "fastapi.middleware.cors",
        "health",
        "routes"
      ],
      "hash": null,
      "artifact_id": "76c21985-a9ad-4851-be0b-54981d31bfef"
    },
    {
      "module_id": "src.llmstruct.api.deps",
      "path": "src/llmstruct/api/deps.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_api_key",
          "docstring": "",
          "line_range": [
            5,
            11
          ],
          "parameters": [
            "authorization"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_api_key": [
          "HTTPException",
          "authorization.startswith",
          "Header",
          "authorization.split"
        ]
      },
      "dependencies": [
        "HTTPException",
        "Header",
        "fastapi"
      ],
      "hash": null,
      "artifact_id": "d1dfc547-c4f3-45c8-a319-a8dfa052bb1a"
    },
    {
      "module_id": "src.llmstruct.api.routes",
      "path": "src/llmstruct/api/routes.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "health",
          "docstring": "",
          "line_range": [
            7,
            8
          ],
          "parameters": [],
          "decorators": [
            "router.get('/health')"
          ]
        },
        {
          "name": "chat_message",
          "docstring": "",
          "line_range": [
            11,
            17
          ],
          "parameters": [
            "request",
            "api_key"
          ],
          "decorators": [
            "router.post('/chat/message')"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "health": [
          "router.get"
        ],
        "chat_message": [
          "router.post",
          "data.get",
          "HTTPException",
          "Depends",
          "request.json"
        ]
      },
      "dependencies": [
        "APIRouter",
        "Depends",
        "HTTPException",
        "Request",
        "auth",
        "fastapi",
        "verify_api_key"
      ],
      "hash": null,
      "artifact_id": "4d917629-7edb-48df-9154-2f6f1d0aa8d0"
    },
    {
      "module_id": "src.llmstruct.api.models",
      "path": "src/llmstruct/api/models.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [
        {
          "name": "ChatRequest",
          "docstring": "",
          "line_range": [
            3,
            4
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ChatResponse",
          "docstring": "",
          "line_range": [
            6,
            7
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        }
      ],
      "callgraph": {},
      "dependencies": [
        "BaseModel",
        "pydantic"
      ],
      "hash": null,
      "artifact_id": "29d4add8-243b-4788-8b9b-e51720333962"
    },
    {
      "module_id": "src.llmstruct.modules.commands.services",
      "path": "src/llmstruct/modules/commands/services.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "add_api_bot_commands",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f API \u0438 Bot \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438",
          "line_range": [
            10,
            47
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        },
        {
          "name": "cmd_api_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 API \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c",
          "line_range": [
            49,
            111
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_bot_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430\u043c\u0438",
          "line_range": [
            113,
            190
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_services",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 (API + Bots)",
          "line_range": [
            192,
            233
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "add_api_bot_commands": [
          "metrics_report.add_argument",
          "api_parser.add_subparsers",
          "subparsers.add_parser",
          "metrics_subparsers.add_parser",
          "metrics_track.add_argument",
          "bot_subparsers.add_parser",
          "bot_start.add_argument",
          "api_subparsers.add_parser",
          "services_parser.add_subparsers",
          "services_subparsers.add_parser",
          "api_start.add_argument",
          "bot_parser.add_subparsers",
          "metrics_parser.add_subparsers",
          "metrics_analytics.add_argument"
        ],
        "cmd_api_management": [
          "pid_file.unlink",
          "requests.post",
          "print",
          "process.wait",
          "requests.get",
          "pid_file.exists",
          "str",
          "psutil.Process",
          "Path",
          "response.json",
          "f.read",
          "data.get",
          "subprocess.Popen",
          "int",
          "f.write",
          "process.terminate",
          "open",
          "venv_path.exists"
        ],
        "cmd_bot_management": [
          "pid_file.unlink",
          "print",
          "active_bots.append",
          "process.wait",
          "pid_file.exists",
          "process.is_running",
          "str",
          "psutil.Process",
          "Path",
          "f.read",
          "bot_scripts.get",
          "subprocess.Popen",
          "int",
          "f.write",
          "process.terminate",
          "open",
          "os.getenv"
        ],
        "cmd_services": [
          "time.sleep",
          "print",
          "type",
          "cmd_bot_management",
          "cmd_api_management"
        ]
      },
      "dependencies": [
        "Path",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "signal",
        "subprocess",
        "time"
      ],
      "hash": null,
      "artifact_id": "2e67a2e4-a7d4-403b-ad1e-88d49b6f26d6"
    },
    {
      "module_id": "src.llmstruct.modules.commands.__init__",
      "path": "src/llmstruct/modules/commands/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "17212136-6682-44a8-b73c-752c8231c476"
    },
    {
      "module_id": "src.llmstruct.modules.commands.metrics",
      "path": "src/llmstruct/modules/commands/metrics.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "metrics_status",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            1,
            20
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_summary",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0432\u043e\u0434\u043a\u0443 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            22,
            66
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_analytics",
          "docstring": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            68,
            104
          ],
          "parameters": [
            "output_file",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "metrics_report",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0435\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u043e\u0442\u0447\u0435\u0442",
          "line_range": [
            106,
            134
          ],
          "parameters": [
            "sessions",
            "output_file"
          ],
          "decorators": []
        },
        {
          "name": "metrics_track",
          "docstring": "\u0420\u0443\u0447\u043d\u043e\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": [
            136,
            145
          ],
          "parameters": [
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "metrics_tokens",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            147,
            185
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "cmd_metrics",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            187,
            205
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "metrics_status": [
          "print",
          "tracker.get_session_summary",
          "get_metrics_tracker"
        ],
        "metrics_summary": [
          "max",
          "print",
          "tracker.get_session_summary",
          "get_metrics_tracker"
        ],
        "metrics_analytics": [
          "tracker.get_analytics_data",
          "print",
          "json.dumps",
          "time.strftime",
          "json.dump",
          "get_metrics_tracker",
          "enumerate",
          "tracker.get_session_summary",
          "writer.writerow",
          "csv.writer",
          "open"
        ],
        "metrics_report": [
          "analytics.get",
          "tracker.get_analytics_data",
          "print",
          "sum",
          "time.strftime",
          "get_metrics_tracker",
          "len",
          "f.write",
          "open",
          "min"
        ],
        "metrics_track": [
          "track_workflow_event",
          "print"
        ],
        "metrics_tokens": [
          "print",
          "get_metrics_tracker",
          "enumerate",
          "get_token_summary",
          "summary.get",
          "interaction.get"
        ],
        "cmd_metrics": [
          "metrics_summary",
          "metrics_report",
          "print",
          "metrics_analytics",
          "metrics_status",
          "metrics_tokens",
          "metrics_track"
        ]
      },
      "dependencies": [
        "csv",
        "get_metrics_tracker",
        "get_token_summary",
        "json",
        "llmstruct.metrics_tracker",
        "time",
        "track_workflow_event"
      ],
      "hash": null,
      "artifact_id": "700bee1f-21c9-4718-8ae0-613744df4837"
    },
    {
      "module_id": "src.llmstruct.modules.commands.queue",
      "path": "src/llmstruct/modules/commands/queue.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": [
            9,
            208
          ],
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "process_cli_queue_enhanced": [
          "time.time",
          "read_file_content",
          "client.query",
          "print",
          "load_gitignore",
          "attach_to_llm_request",
          "logging.error",
          "options.get",
          "enumerate",
          "len",
          "get_folder_structure",
          "workflow.get",
          "json.load",
          "logging.info",
          "open",
          "write_to_file",
          "isinstance",
          "item.get"
        ]
      },
      "dependencies": [
        "attach_to_llm_request",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "fcf5188e-c917-4716-8aeb-62ab617f318d"
    },
    {
      "module_id": "src.llmstruct.modules.cli.dogfood",
      "path": "src/llmstruct/modules/cli/dogfood.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "dogfood": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "a49cfceb-7bdf-42f5-9530-60ab53f2d599"
    },
    {
      "module_id": "src.llmstruct.modules.cli.analyze_duplicates",
      "path": "src/llmstruct/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": [
            1,
            81
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "analyze_duplicates": [
          "filtered_duplicates.items",
          "hasattr",
          "print",
          "analysis.get",
          "duplicates.items",
          "getattr",
          "rec.get",
          "open",
          "traceback.print_exc",
          "WorkflowOrchestrator",
          "duplication_data.get",
          "json.dump",
          "len",
          "enumerate",
          "r.get",
          "json.dumps",
          "orchestrator.analyze_codebase_for_duplicates",
          "sorted"
        ]
      },
      "dependencies": [
        "WorkflowOrchestrator",
        "json",
        "llmstruct.workflow_orchestrator",
        "traceback"
      ],
      "hash": null,
      "artifact_id": "3394203c-e337-49ec-80be-675db25d47ab"
    },
    {
      "module_id": "src.llmstruct.modules.cli.parse",
      "path": "src/llmstruct/modules/cli/parse.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            9,
            93
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse": [
          "getattr",
          "cache.cache_json",
          "config.get",
          "ast_path.open",
          "logging.warning",
          "module.get",
          "generate_json",
          "cli_config.get",
          "mod_dir.mkdir",
          "struct_data.get",
          "func.get",
          "JSONCache",
          "cache.close",
          "parsing_config.get",
          "json.dump",
          "logging.error",
          "Path",
          "struct_path.open",
          "logging.info",
          "load_config"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "generate_json",
        "json",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "load_config",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "94434544-5d40-46d0-a73b-11cbcb77d6d1"
    },
    {
      "module_id": "src.llmstruct.modules.cli.utils",
      "path": "src/llmstruct/modules/cli/utils.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            6,
            20
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            22,
            32
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": [
            45,
            63
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            65,
            72
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "",
          "line_range": [
            74,
            75
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "",
          "line_range": [
            77,
            78
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "",
          "line_range": [
            80,
            81
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "",
          "line_range": [
            83,
            84
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "",
          "line_range": [
            86,
            93
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "",
          "line_range": [
            95,
            98
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "",
          "line_range": [
            100,
            103
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "",
          "line_range": [
            105,
            106
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "",
          "line_range": [
            108,
            109
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "",
          "line_range": [
            111,
            112
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "",
          "line_range": [
            114,
            121
          ],
          "parameters": [
            "config",
            "root_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.startswith",
          "gitignore_path.open",
          "logging.error",
          "line.strip",
          "Path",
          "gitignore_path.exists"
        ],
        "load_config": [
          "config_path.exists",
          "logging.error",
          "Path",
          "toml.load",
          "config_path.open"
        ],
        "read_file_content": [
          "logging.error",
          "Path",
          "path.open",
          "f.read",
          "path.is_file"
        ],
        "write_to_file": [
          "re.sub",
          "logging.error",
          "file_path.open",
          "file_path.exists",
          "Path",
          "str",
          "f.write",
          "logging.info",
          "logging.warning",
          "base_path.mkdir"
        ],
        "parse_files_from_response": [
          "re.findall",
          "files.append",
          "content.strip",
          "filename.strip"
        ],
        "get_cache_config": [
          "config.get"
        ],
        "get_copilot_config": [
          "config.get"
        ],
        "get_queue_config": [
          "config.get"
        ],
        "get_context_config": [
          "config.get"
        ],
        "get_exclude_dirs": [
          "cli_config.get",
          "parsing_config.get",
          "list",
          "set",
          "config.get"
        ],
        "get_include_patterns": [
          "cli_config.get",
          "config.get",
          "parsing_config.get"
        ],
        "get_exclude_patterns": [
          "cli_config.get",
          "config.get",
          "parsing_config.get"
        ],
        "get_max_file_size": [
          "config.get"
        ],
        "get_struct_file_path": [
          "config.get"
        ],
        "get_context_file_path": [
          "config.get"
        ],
        "save_config": [
          "toml.dump",
          "logging.error",
          "config_path.open",
          "Path"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "logging",
        "pathlib",
        "re",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "a308dca7-1689-4bf5-9337-e7f5a48e6552"
    },
    {
      "module_id": "src.llmstruct.modules.cli.context",
      "path": "src/llmstruct/modules/cli/context.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "context": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "aa37b457-da10-4c12-93cc-7c1b1aa8c532"
    },
    {
      "module_id": "src.llmstruct.modules.cli.query",
      "path": "src/llmstruct/modules/cli/query.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            8,
            64
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "query": [
          "client.query",
          "LLMClient",
          "hasattr",
          "orchestrator.get_context_for_scenario",
          "json.dump",
          "logging.error",
          "Path",
          "create_context_orchestrator",
          "client.query_with_context",
          "JSONCache",
          "logging.info",
          "logging.warning",
          "cache.close"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "create_context_orchestrator",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "04c34bc3-40d1-4aaf-929d-91fea49135d5"
    },
    {
      "module_id": "src.llmstruct.modules.cli.__init__",
      "path": "src/llmstruct/modules/cli/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "522e05e1-83be-4dc6-9069-328afa52db79"
    },
    {
      "module_id": "src.llmstruct.modules.cli.handlers",
      "path": "src/llmstruct/modules/cli/handlers.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            14,
            21
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            23,
            32
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive": [
          "logging.warning",
          "interactive_legacy",
          "interactive_modular"
        ],
        "interactive_modular": [
          "create_cli_core",
          "logging.info",
          "hasattr",
          "cli_core.run_interactive_mode"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "create_cli_core",
        "get_folder_structure",
        "interactive_legacy",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.cli_core",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.handlers_legacy",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "bd5a4328-cb97-4a65-87e0-98f51a038223"
    },
    {
      "module_id": "src.llmstruct.modules.cli.audit",
      "path": "src/llmstruct/modules/cli/audit.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": [
            4,
            17
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "audit": [
          "hasattr",
          "print",
          "file_path.exists",
          "Path",
          "analyze_duplicates"
        ]
      },
      "dependencies": [
        "Path",
        "analyze_duplicates",
        "llmstruct.cli",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "e78e0541-9ac8-44bc-91ca-ccef8b4d94cc"
    },
    {
      "module_id": "src.llmstruct.modules.cli.epic",
      "path": "src/llmstruct/modules/cli/epic.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": [
            5,
            7
          ],
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "show_links",
          "docstring": "",
          "line_range": [
            9,
            57
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "add_epic_cli_subparser",
          "docstring": "",
          "line_range": [
            59,
            67
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "json.load",
          "open"
        ],
        "show_links": [
          "load_json",
          "print",
          "epic.get",
          "link_map.items",
          "str",
          "results.items",
          "epic_path.exists",
          "Path",
          "data.get",
          "status_filter.lower",
          "t.upper",
          "json.dumps",
          "item.get"
        ],
        "add_epic_cli_subparser": [
          "epic_sub.add_parser",
          "subparsers.add_parser",
          "show_links_parser.add_argument",
          "show_links_parser.set_defaults",
          "epic_parser.add_subparsers"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "b5780fea-691a-43ed-9f14-219d8ff10316"
    },
    {
      "module_id": "src.llmstruct.modules.cli.handlers_legacy",
      "path": "src/llmstruct/modules/cli/handlers_legacy.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            14,
            149
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive_legacy": [
          "input",
          "read_file_content",
          "os.listdir",
          "write_to_file",
          "sorted",
          "user_input.lower",
          "m.group",
          "logging.warning",
          "client.query",
          "print",
          "user_input.startswith",
          "re.match",
          "JSONCache",
          "get_folder_structure",
          "args_str.strip",
          "cache.close",
          "load_gitignore",
          "attach_to_llm_request",
          "logging.error",
          "Path",
          "parse",
          "LLMClient",
          "json.dumps"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "63804ece-b1c7-4b4d-a074-85c9a9f07087"
    },
    {
      "module_id": "src.llmstruct.modules.cli.copilot",
      "path": "src/llmstruct/modules/cli/copilot.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            5,
            113
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "copilot": [
          "initialize_copilot",
          "getattr",
          "shutil.copy",
          "manager.refresh_all_contexts",
          "template_path.exists",
          "config_path.exists",
          "smart_suggest",
          "manager.validate_change",
          "layers.split",
          "manager.load_context_layer",
          "manager.export_context",
          "manager.close",
          "hasattr",
          "manager.get_context_status",
          "print",
          "f.write",
          "logging.error",
          "Path",
          "enumerate",
          "logging.info",
          "open",
          "manager.unload_context_layer"
        ]
      },
      "dependencies": [
        "Path",
        "initialize_copilot",
        "llmstruct.copilot",
        "logging",
        "pathlib",
        "shutil",
        "smart_suggest"
      ],
      "hash": null,
      "artifact_id": "d477ba86-ab44-4c2b-929e-a7c4111827bd"
    },
    {
      "module_id": "src.llmstruct.modules.cli.review",
      "path": "src/llmstruct/modules/cli/review.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "review": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "8db7cfd3-3d00-4238-a05d-e00fb3cfd3e3"
    },
    {
      "module_id": "src.llmstruct.api.routes.__init__",
      "path": "src/llmstruct/api/routes/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "5bab8788-65b5-4999-97d5-a57fef5a8964"
    },
    {
      "module_id": "src.llmstruct.api.routes.health",
      "path": "src/llmstruct/api/routes/health.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "health",
          "docstring": "Health-check endpoint.",
          "line_range": [
            6,
            8
          ],
          "parameters": [],
          "decorators": [
            "router.get('/health')"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "health": [
          "router.get"
        ]
      },
      "dependencies": [
        "APIRouter",
        "fastapi"
      ],
      "hash": null,
      "artifact_id": "da6e7f30-10f1-4eb9-867a-48a9996add91"
    },
    {
      "module_id": "src.llmstruct.api.routes.chat",
      "path": "src/llmstruct/api/routes/chat.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "chat_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0447\u0430\u0442\u0430: \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 (\u0437\u0430\u0433\u043b\u0443\u0448\u043a\u0430).",
          "line_range": [
            8,
            13
          ],
          "parameters": [
            "req",
            "api_key"
          ],
          "decorators": [
            "router.post('/chat/message', response_model=ChatResponse)"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "chat_message": [
          "ChatResponse",
          "router.post",
          "Depends"
        ]
      },
      "dependencies": [
        "APIRouter",
        "ChatRequest",
        "ChatResponse",
        "Depends",
        "deps",
        "fastapi",
        "get_api_key",
        "models"
      ],
      "hash": null,
      "artifact_id": "9b7245af-2e69-4be0-9c6a-ac8a103a5d56"
    },
    {
      "module_id": "src.scripts.team.__init__",
      "path": "src/scripts/team/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "8c20123a-a4af-4015-8544-4b5f91786e03"
    },
    {
      "module_id": "examples.telegram_bot.memory_manager",
      "path": "examples/telegram_bot/memory_manager.py",
      "category": "core",
      "module_doc": "Memory Manager for LLMStruct Telegram Bot\n\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0430\u043c\u044f\u0442\u044c\u044e, \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0438 \u043f\u0435\u0440\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u044b\u043c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            44,
            64
          ],
          "parameters": [
            "self",
            "storage_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            66,
            103
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u0430\u0439\u043b\u044b",
          "line_range": [
            105,
            136
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_or_create_session",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430",
          "line_range": [
            138,
            154
          ],
          "parameters": [
            "self",
            "chat_id",
            "user_id",
            "user_name"
          ],
          "decorators": []
        },
        {
          "name": "_create_new_session",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            156,
            170
          ],
          "parameters": [
            "self",
            "chat_id",
            "user_id",
            "user_name"
          ],
          "decorators": []
        },
        {
          "name": "add_message",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            172,
            198
          ],
          "parameters": [
            "self",
            "session",
            "role",
            "content",
            "user_name"
          ],
          "decorators": []
        },
        {
          "name": "get_conversation_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430 \u0434\u043b\u044f LLM",
          "line_range": [
            200,
            228
          ],
          "parameters": [
            "self",
            "session",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "_build_system_context",
          "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f LLM",
          "line_range": [
            230,
            266
          ],
          "parameters": [
            "self",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "_update_user_profile",
          "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            268,
            316
          ],
          "parameters": [
            "self",
            "user_id",
            "content",
            "role"
          ],
          "decorators": []
        },
        {
          "name": "_archive_session",
          "docstring": "\u0410\u0440\u0445\u0438\u0432\u0438\u0440\u0443\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            318,
            337
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_create_session_summary",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u0440\u0435\u0437\u044e\u043c\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            339,
            362
          ],
          "parameters": [
            "self",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "get_user_stats",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            364,
            382
          ],
          "parameters": [
            "self",
            "user_id"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_sessions",
          "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0441\u0442\u0430\u0440\u044b\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            384,
            399
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_memory_stats",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            401,
            412
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save",
          "docstring": "\u041f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            414,
            417
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ConversationMessage",
          "docstring": "\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0435",
          "line_range": [
            18,
            25
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ConversationSession",
          "docstring": "\u0421\u0435\u0441\u0441\u0438\u044f \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430",
          "line_range": [
            28,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "TelegramMemoryManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0434\u043b\u044f Telegram \u0431\u043e\u0442\u0430",
          "line_range": [
            41,
            417
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                44,
                64
              ],
              "parameters": [
                "self",
                "storage_dir"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                66,
                103
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u0430\u0439\u043b\u044b",
              "line_range": [
                105,
                136
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_or_create_session",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430",
              "line_range": [
                138,
                154
              ],
              "parameters": [
                "self",
                "chat_id",
                "user_id",
                "user_name"
              ]
            },
            {
              "name": "_create_new_session",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                156,
                170
              ],
              "parameters": [
                "self",
                "chat_id",
                "user_id",
                "user_name"
              ]
            },
            {
              "name": "add_message",
              "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                172,
                198
              ],
              "parameters": [
                "self",
                "session",
                "role",
                "content",
                "user_name"
              ]
            },
            {
              "name": "get_conversation_context",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430 \u0434\u043b\u044f LLM",
              "line_range": [
                200,
                228
              ],
              "parameters": [
                "self",
                "session",
                "max_tokens"
              ]
            },
            {
              "name": "_build_system_context",
              "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f LLM",
              "line_range": [
                230,
                266
              ],
              "parameters": [
                "self",
                "session"
              ]
            },
            {
              "name": "_update_user_profile",
              "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                268,
                316
              ],
              "parameters": [
                "self",
                "user_id",
                "content",
                "role"
              ]
            },
            {
              "name": "_archive_session",
              "docstring": "\u0410\u0440\u0445\u0438\u0432\u0438\u0440\u0443\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                318,
                337
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "_create_session_summary",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u0440\u0435\u0437\u044e\u043c\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                339,
                362
              ],
              "parameters": [
                "self",
                "session"
              ]
            },
            {
              "name": "get_user_stats",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                364,
                382
              ],
              "parameters": [
                "self",
                "user_id"
              ]
            },
            {
              "name": "cleanup_old_sessions",
              "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0441\u0442\u0430\u0440\u044b\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                384,
                399
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_memory_stats",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043f\u0430\u043c\u044f\u0442\u0438",
              "line_range": [
                401,
                412
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save",
              "docstring": "\u041f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
              "line_range": [
                414,
                417
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_data",
          "Path"
        ],
        "_load_data": [
          "session_data.get",
          "data.values",
          "int",
          "len",
          "logger.error",
          "ConversationSession",
          "json.load",
          "open",
          "ConversationMessage",
          "logger.info"
        ],
        "_save_data": [
          "asdict",
          "json.dump",
          "str",
          "logger.error",
          "open"
        ],
        "get_or_create_session": [
          "timedelta",
          "datetime.fromisoformat",
          "self._create_new_session",
          "self._archive_session",
          "datetime.now"
        ],
        "_create_new_session": [
          "ConversationSession",
          "datetime.now"
        ],
        "add_message": [
          "self._update_user_profile",
          "len",
          "self._save_data",
          "ConversationMessage",
          "datetime.now"
        ],
        "get_conversation_context": [
          "reversed",
          "messages.insert",
          "system_content.split",
          "len",
          "messages.append",
          "self._build_system_context"
        ],
        "_build_system_context": [
          "user_profile.get"
        ],
        "_update_user_profile": [
          "interests.add",
          "any",
          "content.lower",
          "list",
          "profile.get",
          "tech_keywords.items",
          "set",
          "len",
          "isinstance",
          "datetime.now"
        ],
        "_archive_session": [
          "self._create_session_summary",
          "time.time",
          "int",
          "datetime.now"
        ],
        "_create_session_summary": [
          "keywords.extend",
          "content_lower.split",
          "set",
          "len",
          "Counter"
        ],
        "get_user_stats": [
          "len"
        ],
        "cleanup_old_sessions": [
          "to_archive.append",
          "timedelta",
          "datetime.fromisoformat",
          "len",
          "self._save_data",
          "self._archive_session",
          "logger.info",
          "datetime.now"
        ],
        "get_memory_stats": [
          "str",
          "set",
          "len",
          "sum"
        ],
        "save": [
          "self._save_data",
          "logger.info"
        ]
      },
      "dependencies": [
        "Any",
        "Counter",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asdict",
        "collections",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f20b67be-ed5d-443b-9726-9055aeb8a777"
    },
    {
      "module_id": "examples.telegram_bot.test_bot",
      "path": "examples/telegram_bot/test_bot.py",
      "category": "test",
      "module_doc": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430 \u0431\u0435\u0437 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e Telegram",
      "functions": [
        {
          "name": "test_bot_functions",
          "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0431\u043e\u0442\u0430",
          "line_range": [
            15,
            98
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_api_status",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 API",
          "line_range": [
            100,
            119
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "mock_send_message",
          "docstring": "",
          "line_range": [
            83,
            85
          ],
          "parameters": [
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "test_commands_only",
          "docstring": "",
          "line_range": [
            136,
            142
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_bot_functions": [
          "print",
          "bot.chat_with_llm",
          "bot.execute_command",
          "len",
          "LLMStructTelegramBot"
        ],
        "mock_send_message": [
          "len",
          "print"
        ],
        "check_api_status": [
          "client.get",
          "print",
          "httpx.AsyncClient",
          "LLMStructTelegramBot"
        ],
        "test_commands_only": [
          "len",
          "print",
          "bot.execute_command",
          "LLMStructTelegramBot"
        ]
      },
      "dependencies": [
        "LLMStructTelegramBot",
        "asyncio",
        "bot",
        "httpx",
        "os",
        "sys"
      ],
      "hash": null,
      "artifact_id": "52dd5fc7-7bd9-4e63-96e8-fdef877b7501"
    },
    {
      "module_id": "examples.telegram_bot.bot",
      "path": "examples/telegram_bot/bot.py",
      "category": "core",
      "module_doc": "Telegram Bot for LLMStruct Integration\n\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0432 tmp \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438\n\u0421 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u0438 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0422\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430",
          "line_range": [
            310,
            335
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            21,
            37
          ],
          "parameters": [
            "self",
            "bot_token",
            "api_base"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
          "line_range": [
            39,
            55
          ],
          "parameters": [
            "self",
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "get_updates",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0442 Telegram",
          "line_range": [
            57,
            72
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "execute_command",
          "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e",
          "line_range": [
            74,
            101
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_llm",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 LLM \u0447\u0435\u0440\u0435\u0437 \u043d\u0430\u0448 API \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            103,
            141
          ],
          "parameters": [
            "self",
            "message",
            "context_mode",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u044c\u044e",
          "line_range": [
            143,
            281
          ],
          "parameters": [
            "self",
            "update"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0446\u0438\u043a\u043b \u0431\u043e\u0442\u0430",
          "line_range": [
            283,
            308
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMStructTelegramBot",
          "docstring": "",
          "line_range": [
            20,
            308
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                21,
                37
              ],
              "parameters": [
                "self",
                "bot_token",
                "api_base"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
              "line_range": [
                39,
                55
              ],
              "parameters": [
                "self",
                "chat_id",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "get_updates",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0442 Telegram",
              "line_range": [
                57,
                72
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "execute_command",
              "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e",
              "line_range": [
                74,
                101
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "chat_with_llm",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 LLM \u0447\u0435\u0440\u0435\u0437 \u043d\u0430\u0448 API \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043f\u0430\u043c\u044f\u0442\u0438",
              "line_range": [
                103,
                141
              ],
              "parameters": [
                "self",
                "message",
                "context_mode",
                "session"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u044c\u044e",
              "line_range": [
                143,
                281
              ],
              "parameters": [
                "self",
                "update"
              ]
            },
            {
              "name": "run",
              "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0446\u0438\u043a\u043b \u0431\u043e\u0442\u0430",
              "line_range": [
                283,
                308
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logging.getLogger",
          "logging.basicConfig",
          "TelegramMemoryManager"
        ],
        "send_message": [
          "response.json",
          "httpx.AsyncClient",
          "client.post"
        ],
        "get_updates": [
          "client.get",
          "httpx.AsyncClient",
          "response.json"
        ],
        "execute_command": [
          "str",
          "safe_commands.keys",
          "subprocess.run"
        ],
        "chat_with_llm": [
          "result.get",
          "chr",
          "httpx.AsyncClient",
          "str",
          "response.json",
          "len",
          "client.post",
          "recent_context.append"
        ],
        "handle_message": [
          "httpx.AsyncClient",
          "self.chat_with_llm",
          "message.get",
          "update.get",
          "str",
          "self.send_message",
          "range",
          "self.execute_command",
          "profile.get",
          "client.get",
          "len",
          "text.startswith",
          "enumerate"
        ],
        "run": [
          "asyncio.sleep",
          "updates.get",
          "self.handle_message",
          "self.get_updates"
        ],
        "main": [
          "print",
          "httpx.AsyncClient",
          "client.get",
          "bot.run",
          "os.getenv",
          "LLMStructTelegramBot"
        ]
      },
      "dependencies": [
        "Optional",
        "TelegramMemoryManager",
        "asyncio",
        "httpx",
        "json",
        "logging",
        "memory_manager",
        "os",
        "subprocess",
        "typing"
      ],
      "hash": null,
      "artifact_id": "84a2f488-4415-44f0-a34f-0e987678f6e7"
    },
    {
      "module_id": "integrations.telegram_bot.simple_bot",
      "path": "integrations/telegram_bot/simple_bot.py",
      "category": "core",
      "module_doc": "\u0423\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f LLMStruct \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\n\u0411\u0435\u0437 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439, \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            360,
            371
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            39,
            45
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            47,
            55
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            57,
            73
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "help_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
          "line_range": [
            75,
            93
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
          "line_range": [
            95,
            154
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "metrics_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics",
          "line_range": [
            156,
            188
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "struct_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /struct",
          "line_range": [
            190,
            223
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "parse_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /parse",
          "line_range": [
            225,
            270
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            272,
            321
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
          "line_range": [
            323,
            358
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "SimpleLLMStructBot",
          "docstring": "\u0423\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f LLMStruct",
          "line_range": [
            36,
            358
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                39,
                45
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                47,
                55
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                57,
                73
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "help_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
              "line_range": [
                75,
                93
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
              "line_range": [
                95,
                154
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "metrics_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics",
              "line_range": [
                156,
                188
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "struct_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /struct",
              "line_range": [
                190,
                223
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "parse_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /parse",
              "line_range": [
                225,
                270
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                272,
                321
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
              "line_range": [
                323,
                358
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "track_workflow_event",
          "self.setup_handlers",
          "Application.builder"
        ],
        "setup_handlers": [
          "CommandHandler",
          "MessageHandler"
        ],
        "start_command": [
          "track_workflow_event"
        ],
        "help_command": [
          "track_workflow_event"
        ],
        "status_command": [
          "struct_file.stat",
          "requests.get",
          "time.strftime",
          "str",
          "get_metrics_tracker",
          "Path",
          "int",
          "track_task_start",
          "tracker.get_session_summary",
          "track_task_complete",
          "track_workflow_event",
          "time.time",
          "struct_file.exists"
        ],
        "metrics_command": [
          "track_workflow_event",
          "tracker.get_session_summary",
          "get_metrics_tracker"
        ],
        "struct_command": [
          "struct_file.stat",
          "time.ctime",
          "Path",
          "track_workflow_event",
          "time.time",
          "struct_file.exists"
        ],
        "parse_command": [
          "str",
          "subprocess.run",
          "os.chdir",
          "int",
          "track_task_start",
          "track_task_complete",
          "track_workflow_event",
          "time.time"
        ],
        "handle_message": [
          "self.struct_command",
          "self.status_command",
          "user_message.split",
          "tracker.track_token_usage",
          "self.metrics_command",
          "str",
          "get_metrics_tracker",
          "len",
          "int",
          "track_task_start",
          "user_message.lower",
          "track_task_complete",
          "track_workflow_event",
          "time.time",
          "response.split"
        ],
        "run_sync": [
          "BotCommand",
          "tracker.save_session",
          "loop.run_until_complete",
          "str",
          "asyncio.set_event_loop",
          "get_metrics_tracker",
          "logger.error",
          "track_workflow_event",
          "asyncio.new_event_loop",
          "logger.info"
        ],
        "main": [
          "bot.run_sync",
          "SimpleLLMStructBot",
          "print",
          "os.getenv"
        ]
      },
      "dependencies": [
        "Application",
        "BotCommand",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "Optional",
        "Path",
        "Update",
        "asyncio",
        "filters",
        "get_metrics_tracker",
        "json",
        "logging",
        "os",
        "pathlib",
        "requests",
        "src.llmstruct.metrics_tracker",
        "subprocess",
        "sys",
        "telegram",
        "telegram.ext",
        "time",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d96ce158-84b9-44cd-b5cc-3d04fdba2f81"
    },
    {
      "module_id": "integrations.telegram_bot.memory_manager",
      "path": "integrations/telegram_bot/memory_manager.py",
      "category": "core",
      "module_doc": "Memory Manager for LLMStruct Telegram Bot\n\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0430\u043c\u044f\u0442\u044c\u044e, \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0438 \u043f\u0435\u0440\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u044b\u043c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            44,
            64
          ],
          "parameters": [
            "self",
            "storage_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            66,
            103
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u0430\u0439\u043b\u044b",
          "line_range": [
            105,
            136
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_or_create_session",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430",
          "line_range": [
            138,
            154
          ],
          "parameters": [
            "self",
            "chat_id",
            "user_id",
            "user_name"
          ],
          "decorators": []
        },
        {
          "name": "_create_new_session",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            156,
            170
          ],
          "parameters": [
            "self",
            "chat_id",
            "user_id",
            "user_name"
          ],
          "decorators": []
        },
        {
          "name": "add_message",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            172,
            210
          ],
          "parameters": [
            "self",
            "session",
            "role",
            "content",
            "user_name"
          ],
          "decorators": []
        },
        {
          "name": "get_conversation_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430 \u0434\u043b\u044f LLM",
          "line_range": [
            212,
            240
          ],
          "parameters": [
            "self",
            "session",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "_build_system_context",
          "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f LLM",
          "line_range": [
            242,
            278
          ],
          "parameters": [
            "self",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "_update_user_profile",
          "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            280,
            328
          ],
          "parameters": [
            "self",
            "user_id",
            "content",
            "role"
          ],
          "decorators": []
        },
        {
          "name": "_archive_session",
          "docstring": "\u0410\u0440\u0445\u0438\u0432\u0438\u0440\u0443\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            330,
            349
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_create_session_summary",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u0440\u0435\u0437\u044e\u043c\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            351,
            374
          ],
          "parameters": [
            "self",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "get_user_stats",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            376,
            394
          ],
          "parameters": [
            "self",
            "user_id"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_sessions",
          "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0441\u0442\u0430\u0440\u044b\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            396,
            411
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_memory_stats",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            413,
            424
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save",
          "docstring": "\u041f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            426,
            429
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ConversationMessage",
          "docstring": "\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0435",
          "line_range": [
            18,
            25
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ConversationSession",
          "docstring": "\u0421\u0435\u0441\u0441\u0438\u044f \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430",
          "line_range": [
            28,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "TelegramMemoryManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0434\u043b\u044f Telegram \u0431\u043e\u0442\u0430",
          "line_range": [
            41,
            429
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                44,
                64
              ],
              "parameters": [
                "self",
                "storage_dir"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                66,
                103
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u0430\u0439\u043b\u044b",
              "line_range": [
                105,
                136
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_or_create_session",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430",
              "line_range": [
                138,
                154
              ],
              "parameters": [
                "self",
                "chat_id",
                "user_id",
                "user_name"
              ]
            },
            {
              "name": "_create_new_session",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                156,
                170
              ],
              "parameters": [
                "self",
                "chat_id",
                "user_id",
                "user_name"
              ]
            },
            {
              "name": "add_message",
              "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                172,
                210
              ],
              "parameters": [
                "self",
                "session",
                "role",
                "content",
                "user_name"
              ]
            },
            {
              "name": "get_conversation_context",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430 \u0434\u043b\u044f LLM",
              "line_range": [
                212,
                240
              ],
              "parameters": [
                "self",
                "session",
                "max_tokens"
              ]
            },
            {
              "name": "_build_system_context",
              "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f LLM",
              "line_range": [
                242,
                278
              ],
              "parameters": [
                "self",
                "session"
              ]
            },
            {
              "name": "_update_user_profile",
              "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                280,
                328
              ],
              "parameters": [
                "self",
                "user_id",
                "content",
                "role"
              ]
            },
            {
              "name": "_archive_session",
              "docstring": "\u0410\u0440\u0445\u0438\u0432\u0438\u0440\u0443\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                330,
                349
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "_create_session_summary",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u0440\u0435\u0437\u044e\u043c\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                351,
                374
              ],
              "parameters": [
                "self",
                "session"
              ]
            },
            {
              "name": "get_user_stats",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                376,
                394
              ],
              "parameters": [
                "self",
                "user_id"
              ]
            },
            {
              "name": "cleanup_old_sessions",
              "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0441\u0442\u0430\u0440\u044b\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                396,
                411
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_memory_stats",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043f\u0430\u043c\u044f\u0442\u0438",
              "line_range": [
                413,
                424
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save",
              "docstring": "\u041f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
              "line_range": [
                426,
                429
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_data",
          "Path"
        ],
        "_load_data": [
          "session_data.get",
          "data.values",
          "int",
          "len",
          "logger.error",
          "ConversationSession",
          "json.load",
          "open",
          "ConversationMessage",
          "logger.info"
        ],
        "_save_data": [
          "asdict",
          "json.dump",
          "str",
          "logger.error",
          "open"
        ],
        "get_or_create_session": [
          "timedelta",
          "datetime.fromisoformat",
          "self._create_new_session",
          "self._archive_session",
          "datetime.now"
        ],
        "_create_new_session": [
          "ConversationSession",
          "datetime.now"
        ],
        "add_message": [
          "any",
          "important_messages.append",
          "content.lower",
          "self._update_user_profile",
          "len",
          "self._save_data",
          "ConversationMessage",
          "datetime.now"
        ],
        "get_conversation_context": [
          "reversed",
          "messages.insert",
          "system_content.split",
          "len",
          "messages.append",
          "self._build_system_context"
        ],
        "_build_system_context": [
          "user_profile.get"
        ],
        "_update_user_profile": [
          "interests.add",
          "any",
          "content.lower",
          "list",
          "profile.get",
          "tech_keywords.items",
          "set",
          "len",
          "isinstance",
          "datetime.now"
        ],
        "_archive_session": [
          "self._create_session_summary",
          "time.time",
          "int",
          "datetime.now"
        ],
        "_create_session_summary": [
          "keywords.extend",
          "content_lower.split",
          "set",
          "len",
          "Counter"
        ],
        "get_user_stats": [
          "len"
        ],
        "cleanup_old_sessions": [
          "to_archive.append",
          "timedelta",
          "datetime.fromisoformat",
          "len",
          "self._save_data",
          "self._archive_session",
          "logger.info",
          "datetime.now"
        ],
        "get_memory_stats": [
          "str",
          "set",
          "len",
          "sum"
        ],
        "save": [
          "self._save_data",
          "logger.info"
        ]
      },
      "dependencies": [
        "Any",
        "Counter",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asdict",
        "collections",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "3abe97ef-6bed-4e58-a1df-5bc50c914333"
    },
    {
      "module_id": "integrations.telegram_bot.test_bot",
      "path": "integrations/telegram_bot/test_bot.py",
      "category": "test",
      "module_doc": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430 \u0431\u0435\u0437 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e Telegram",
      "functions": [
        {
          "name": "test_bot_functions",
          "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0431\u043e\u0442\u0430",
          "line_range": [
            15,
            98
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_api_status",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 API",
          "line_range": [
            100,
            119
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "mock_send_message",
          "docstring": "",
          "line_range": [
            83,
            85
          ],
          "parameters": [
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "test_commands_only",
          "docstring": "",
          "line_range": [
            136,
            142
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_bot_functions": [
          "print",
          "bot.chat_with_llm",
          "bot.execute_command",
          "len",
          "LLMStructTelegramBot"
        ],
        "mock_send_message": [
          "len",
          "print"
        ],
        "check_api_status": [
          "client.get",
          "print",
          "httpx.AsyncClient",
          "LLMStructTelegramBot"
        ],
        "test_commands_only": [
          "len",
          "print",
          "bot.execute_command",
          "LLMStructTelegramBot"
        ]
      },
      "dependencies": [
        "LLMStructTelegramBot",
        "asyncio",
        "bot",
        "httpx",
        "os",
        "sys"
      ],
      "hash": null,
      "artifact_id": "5299615f-244d-4596-ab69-ba5ad2968dfe"
    },
    {
      "module_id": "integrations.telegram_bot.bot",
      "path": "integrations/telegram_bot/bot.py",
      "category": "core",
      "module_doc": "Telegram Bot for LLMStruct Integration\n\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0432 tmp \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438\n\u0421 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u0438 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0422\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430",
          "line_range": [
            406,
            431
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            34,
            61
          ],
          "parameters": [
            "self",
            "bot_token",
            "api_base"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
          "line_range": [
            63,
            79
          ],
          "parameters": [
            "self",
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "get_updates",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0442 Telegram",
          "line_range": [
            81,
            96
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "execute_command",
          "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e",
          "line_range": [
            98,
            125
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_llm",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 LLM \u0447\u0435\u0440\u0435\u0437 \u043d\u0430\u0448 API \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            127,
            165
          ],
          "parameters": [
            "self",
            "message",
            "context_mode",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u044c\u044e",
          "line_range": [
            167,
            350
          ],
          "parameters": [
            "self",
            "update"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0446\u0438\u043a\u043b \u0431\u043e\u0442\u0430",
          "line_range": [
            352,
            377
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_epic_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447",
          "line_range": [
            379,
            404
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMStructTelegramBot",
          "docstring": "",
          "line_range": [
            33,
            404
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                34,
                61
              ],
              "parameters": [
                "self",
                "bot_token",
                "api_base"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
              "line_range": [
                63,
                79
              ],
              "parameters": [
                "self",
                "chat_id",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "get_updates",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0442 Telegram",
              "line_range": [
                81,
                96
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "execute_command",
              "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e",
              "line_range": [
                98,
                125
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "chat_with_llm",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 LLM \u0447\u0435\u0440\u0435\u0437 \u043d\u0430\u0448 API \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043f\u0430\u043c\u044f\u0442\u0438",
              "line_range": [
                127,
                165
              ],
              "parameters": [
                "self",
                "message",
                "context_mode",
                "session"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u044c\u044e",
              "line_range": [
                167,
                350
              ],
              "parameters": [
                "self",
                "update"
              ]
            },
            {
              "name": "run",
              "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0446\u0438\u043a\u043b \u0431\u043e\u0442\u0430",
              "line_range": [
                352,
                377
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_epic_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447",
              "line_range": [
                379,
                404
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logging.basicConfig",
          "logging.getLogger",
          "WorkspaceStateManager",
          "TelegramMemoryManager"
        ],
        "send_message": [
          "response.json",
          "httpx.AsyncClient",
          "client.post"
        ],
        "get_updates": [
          "client.get",
          "httpx.AsyncClient",
          "response.json"
        ],
        "execute_command": [
          "str",
          "safe_commands.keys",
          "subprocess.run"
        ],
        "chat_with_llm": [
          "result.get",
          "chr",
          "httpx.AsyncClient",
          "str",
          "response.json",
          "len",
          "client.post",
          "recent_context.append"
        ],
        "handle_message": [
          "httpx.AsyncClient",
          "context_info.get",
          "self.chat_with_llm",
          "mention_text.lower",
          "message.get",
          "update.get",
          "str",
          "entity.get",
          "self.send_message",
          "self.execute_command",
          "profile.get",
          "self.get_epic_status",
          "client.get",
          "len",
          "text.startswith",
          "range",
          "enumerate",
          "text.replace"
        ],
        "run": [
          "asyncio.sleep",
          "updates.get",
          "self.handle_message",
          "self.get_updates"
        ],
        "get_epic_status": [
          "len",
          "str",
          "subprocess.run",
          "Path"
        ],
        "main": [
          "print",
          "httpx.AsyncClient",
          "client.get",
          "bot.run",
          "os.getenv",
          "LLMStructTelegramBot"
        ]
      },
      "dependencies": [
        "Optional",
        "Path",
        "TelegramMemoryManager",
        "WorkspaceStateManager",
        "asyncio",
        "httpx",
        "json",
        "llmstruct.workspace",
        "logging",
        "memory_manager",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "cb188a36-6eb5-4231-9081-eb034d59dd5f"
    },
    {
      "module_id": "integrations.telegram_bot.mp002_progress_bot",
      "path": "integrations/telegram_bot/mp002_progress_bot.py",
      "category": "core",
      "module_doc": "MP-002A Progress Bot - Telegram \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Smart Wrapper \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\n\u042d\u0442\u0430\u043f\u043d\u0430\u044f \u043e\u0442\u0447\u0435\u0442\u043d\u043e\u0441\u0442\u044c, \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430, \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435",
      "functions": [
        {
          "name": "start_mp002_bot",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a MP-002A \u0431\u043e\u0442\u0430",
          "line_range": [
            431,
            452
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            23,
            82
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "init_progress_tracking",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            84,
            109
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_progress",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            111,
            118
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_progress",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            120,
            123
          ],
          "parameters": [
            "self",
            "progress"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
          "line_range": [
            125,
            139
          ],
          "parameters": [
            "self",
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "report_phase_start",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435 \u0444\u0430\u0437\u044b",
          "line_range": [
            141,
            172
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id"
          ],
          "decorators": []
        },
        {
          "name": "report_task_completion",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            174,
            207
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id",
            "task_description",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "request_phase_approval",
          "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441 \u043e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0430\u0437\u044b",
          "line_range": [
            209,
            232
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id"
          ],
          "decorators": []
        },
        {
          "name": "report_issue",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0435",
          "line_range": [
            234,
            264
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id",
            "issue_description"
          ],
          "decorators": []
        },
        {
          "name": "get_overall_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            266,
            307
          ],
          "parameters": [
            "self",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            309,
            326
          ],
          "parameters": [
            "self",
            "update"
          ],
          "decorators": []
        },
        {
          "name": "handle_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            328,
            349
          ],
          "parameters": [
            "self",
            "chat_id",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "send_welcome",
          "docstring": "\u041f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
          "line_range": [
            351,
            367
          ],
          "parameters": [
            "self",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "approve_phase",
          "docstring": "\u041e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u0435 \u0444\u0430\u0437\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c",
          "line_range": [
            369,
            413
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id"
          ],
          "decorators": []
        },
        {
          "name": "handle_feedback",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043a\u0430\u043a feedback",
          "line_range": [
            415,
            427
          ],
          "parameters": [
            "self",
            "chat_id",
            "text"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "MP002ProgressBot",
          "docstring": "Telegram \u0431\u043e\u0442 \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 MP-002A Smart Wrapper",
          "line_range": [
            18,
            427
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                23,
                82
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "init_progress_tracking",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                84,
                109
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_progress",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                111,
                118
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_progress",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                120,
                123
              ],
              "parameters": [
                "self",
                "progress"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
              "line_range": [
                125,
                139
              ],
              "parameters": [
                "self",
                "chat_id",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "report_phase_start",
              "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435 \u0444\u0430\u0437\u044b",
              "line_range": [
                141,
                172
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id"
              ]
            },
            {
              "name": "report_task_completion",
              "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                174,
                207
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id",
                "task_description",
                "details"
              ]
            },
            {
              "name": "request_phase_approval",
              "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441 \u043e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0430\u0437\u044b",
              "line_range": [
                209,
                232
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id"
              ]
            },
            {
              "name": "report_issue",
              "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0435",
              "line_range": [
                234,
                264
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id",
                "issue_description"
              ]
            },
            {
              "name": "get_overall_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                266,
                307
              ],
              "parameters": [
                "self",
                "chat_id"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                309,
                326
              ],
              "parameters": [
                "self",
                "update"
              ]
            },
            {
              "name": "handle_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                328,
                349
              ],
              "parameters": [
                "self",
                "chat_id",
                "command"
              ]
            },
            {
              "name": "send_welcome",
              "docstring": "\u041f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
              "line_range": [
                351,
                367
              ],
              "parameters": [
                "self",
                "chat_id"
              ]
            },
            {
              "name": "approve_phase",
              "docstring": "\u041e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u0435 \u0444\u0430\u0437\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c",
              "line_range": [
                369,
                413
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id"
              ]
            },
            {
              "name": "handle_feedback",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043a\u0430\u043a feedback",
              "line_range": [
                415,
                427
              ],
              "parameters": [
                "self",
                "chat_id",
                "text"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.init_progress_tracking",
          "Path"
        ],
        "init_progress_tracking": [
          "json.dump",
          "open",
          "datetime.now"
        ],
        "load_progress": [
          "self.load_progress",
          "json.load",
          "self.init_progress_tracking",
          "open"
        ],
        "save_progress": [
          "json.dump",
          "open"
        ],
        "send_message": [
          "print",
          "httpx.AsyncClient",
          "str",
          "response.json",
          "client.post"
        ],
        "report_phase_start": [
          "phase_id.upper",
          "self.send_message",
          "enumerate",
          "self.save_progress",
          "self.load_progress",
          "datetime.now"
        ],
        "report_task_completion": [
          "self.send_message",
          "self.save_progress",
          "len",
          "self.load_progress",
          "self.request_phase_approval",
          "datetime.now"
        ],
        "request_phase_approval": [
          "phase_id.upper",
          "enumerate",
          "self.send_message"
        ],
        "report_issue": [
          "self.load_progress",
          "self.save_progress",
          "self.send_message",
          "datetime.now"
        ],
        "get_overall_status": [
          "phase_data.get",
          "self.send_message",
          "len",
          "progress.get",
          "self.load_progress"
        ],
        "handle_message": [
          "self.handle_feedback",
          "message.get",
          "text.startswith",
          "self.handle_command"
        ],
        "handle_command": [
          "self.approve_phase",
          "command.split",
          "self.continue_work",
          "self.get_overall_status",
          "self.send_message",
          "self.show_phase_details",
          "self.report_user_issues",
          "self.send_welcome",
          "len",
          "self.show_help"
        ],
        "send_welcome": [
          "self.send_message"
        ],
        "approve_phase": [
          "phases_list.index",
          "phase_id.upper",
          "self.report_phase_start",
          "list",
          "self.send_message",
          "len",
          "self.save_progress",
          "self.load_progress",
          "datetime.now"
        ],
        "handle_feedback": [
          "self.send_message",
          "self.save_progress",
          "progress.get",
          "self.load_progress",
          "datetime.now"
        ],
        "start_mp002_bot": [
          "print",
          "os.getenv",
          "MP002ProgressBot"
        ]
      },
      "dependencies": [
        "Path",
        "asyncio",
        "datetime",
        "httpx",
        "json",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "bc417216-bbda-438f-a528-ada76901ccbf"
    },
    {
      "module_id": "integrations.continue.test_continue_api",
      "path": "integrations/continue/test_continue_api.py",
      "category": "test",
      "module_doc": "Test Continue API Integration",
      "functions": [
        {
          "name": "test_continue_api",
          "docstring": "Test Continue API endpoints",
          "line_range": [
            11,
            90
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_continue_api": [
          "print",
          "httpx.AsyncClient",
          "response.json",
          "client.get",
          "len",
          "client.post"
        ]
      },
      "dependencies": [
        "asyncio",
        "httpx",
        "json",
        "sys"
      ],
      "hash": null,
      "artifact_id": "3abcf7e0-3cd7-40a0-be76-83d0afdd46d2"
    },
    {
      "module_id": "integrations.continue.setup_config",
      "path": "integrations/continue/setup_config.py",
      "category": "core",
      "module_doc": "Setup script for Continue VS Code extension configuration\n\u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432 config.template.json \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0437 .env",
      "functions": [
        {
          "name": "load_env_vars",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            13,
            33
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "substitute_variables",
          "docstring": "\u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 ${VAR:-default} \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0437 env_vars",
          "line_range": [
            35,
            58
          ],
          "parameters": [
            "config",
            "env_vars"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            60,
            95
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "replace_var",
          "docstring": "",
          "line_range": [
            45,
            52
          ],
          "parameters": [
            "match"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_env_vars": [
          "line.startswith",
          "value.strip",
          "line.strip",
          "env_vars.update",
          "Path",
          "env_file.exists",
          "key.strip",
          "line.split",
          "open"
        ],
        "substitute_variables": [
          "substitute_variables",
          "config.items",
          "isinstance"
        ],
        "replace_var": [
          "env_vars.get",
          "var_expr.split",
          "match.group"
        ],
        "main": [
          "substitute_variables",
          "env_vars.get",
          "print",
          "sys.exit",
          "json.dump",
          "template_file.exists",
          "Path",
          "load_env_vars",
          "json.load",
          "open"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Path",
        "json",
        "os",
        "pathlib",
        "re",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "75d4c276-8ba9-481b-afa6-3193b96b5530"
    }
  ]
}