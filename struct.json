{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-05-28T16:56:30.554952Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": {
      "goals": [
        "Create universal JSON format for codebase structure (modules, functions, classes, calls, metadata)",
        "Ensure extensibility for new languages and entity types",
        "Develop modular, plugin-based parsers for new languages",
        "Maintain an open, RFC-style documented format",
        "Integrate with LLMs by generating and attaching JSON structure to queries"
      ]
    },
    "stats": {
      "modules_count": 53,
      "functions_count": 396,
      "classes_count": 43,
      "call_edges_count": 1252
    },
    "artifact_id": "ca27b3a1-f9ab-4aec-ba6a-1fc43c75ea32",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "3cb9834a-0c25-468b-a8a2-bdb753e6a003",
        "metadata": {}
      },
      {
        "path": "AI_CLI_INSTRUCTIONS.md",
        "type": "file",
        "artifact_id": "fd626cd5-72cf-4d9f-b824-9107098228af",
        "metadata": {}
      },
      {
        "path": "AI_TESTING_INSTRUCTIONS.md",
        "type": "file",
        "artifact_id": "eb8ecdb6-a08a-48a0-b0e1-b5ba8e849c92",
        "metadata": {}
      },
      {
        "path": "AI_VSCODE_INSTRUCTIONS.md",
        "type": "file",
        "artifact_id": "5530da01-aea0-4d64-88b8-65b9bd28fbfc",
        "metadata": {}
      },
      {
        "path": "CHANGELOG.md",
        "type": "file",
        "artifact_id": "c9c984c0-c718-4965-b8a2-e582b733fff5",
        "metadata": {}
      },
      {
        "path": "CLEAN_COMMIT_MESSAGE.md",
        "type": "file",
        "artifact_id": "19ec205c-351c-4196-809d-eb9ad4eaf4a5",
        "metadata": {}
      },
      {
        "path": "CLEAN_CONTEXT_INIT.md",
        "type": "file",
        "artifact_id": "e07242d6-efdd-42cb-9ea4-14d08515ab87",
        "metadata": {}
      },
      {
        "path": "COMMIT_MESSAGE.md",
        "type": "file",
        "artifact_id": "98067691-ed86-4910-a620-37fe1f5df0d8",
        "metadata": {}
      },
      {
        "path": "COMPREHENSIVE_PROJECT_OVERVIEW.md",
        "type": "file",
        "artifact_id": "4d0ee76c-a5fb-4d0e-875b-205622712968",
        "metadata": {}
      },
      {
        "path": "CRITICAL_SESSION_STATE_2025-05-28.md",
        "type": "file",
        "artifact_id": "993c775f-4c82-40bf-9910-559f45cb1d4b",
        "metadata": {}
      },
      {
        "path": "CURSOR_EVALUATION_PLAN.md",
        "type": "file",
        "artifact_id": "a416aa19-3ed5-459b-bd79-ed18a13020c3",
        "metadata": {}
      },
      {
        "path": "GITHUB_PROJECTS_README.md",
        "type": "file",
        "artifact_id": "0bfd6041-1946-47f7-b254-52f5815a898e",
        "metadata": {}
      },
      {
        "path": "GROK_REVIEW_REQUEST.md",
        "type": "file",
        "artifact_id": "e43a40ab-a5c7-404b-9be6-505798922a74",
        "metadata": {}
      },
      {
        "path": "IDEAS_TASKS_ORGANIZATION_PLAN.md",
        "type": "file",
        "artifact_id": "b9d01179-3922-4b8a-99fc-2be7ea894aec",
        "metadata": {}
      },
      {
        "path": "LLM_CONTEXT_CAPABILITY_TESTING_COMPLETION_REPORT.md",
        "type": "file",
        "artifact_id": "3d41c5ea-fb1f-48fe-beb4-d3ccfcbc582d",
        "metadata": {}
      },
      {
        "path": "LLM_CONTEXT_CAPABILITY_TESTING_PLAN.md",
        "type": "file",
        "artifact_id": "2f5e9af5-aecb-416a-8cd0-554ec21df758",
        "metadata": {}
      },
      {
        "path": "META_SESSION_AI_IMPLEMENTATION.md",
        "type": "file",
        "artifact_id": "6d526d34-5895-4553-b453-3b81ae4d4823",
        "metadata": {}
      },
      {
        "path": "META_SESSION_PLAN.md",
        "type": "file",
        "artifact_id": "ec2a011e-69c1-4d55-ad3c-b1f8ece8e2d6",
        "metadata": {}
      },
      {
        "path": "META_WORKING_NOTE.md",
        "type": "file",
        "artifact_id": "7eef9e18-d225-4461-9f7e-456f8efa62a4",
        "metadata": {}
      },
      {
        "path": "MODULAR_CLI_COMPLETION_REPORT.md",
        "type": "file",
        "artifact_id": "ee572a91-68be-416e-97c8-c510f9da7869",
        "metadata": {}
      },
      {
        "path": "QUICK_START.md",
        "type": "file",
        "artifact_id": "d84c7441-2695-4a8a-a31d-8db173d26d5b",
        "metadata": {}
      },
      {
        "path": "README.md",
        "type": "file",
        "artifact_id": "93b6a96a-11cb-4e1b-9b64-360537c85b2e",
        "metadata": {}
      },
      {
        "path": "SECURITY_IMPLEMENTATION_SUMMARY.md",
        "type": "file",
        "artifact_id": "60078172-db33-4438-afaf-990d36cc691c",
        "metadata": {}
      },
      {
        "path": "SESSION_TASKS.md",
        "type": "file",
        "artifact_id": "b2affa49-a40e-4107-b996-bd830b363194",
        "metadata": {}
      },
      {
        "path": "TECHNICAL_ROADMAP.md",
        "type": "file",
        "artifact_id": "e518c9ed-a68f-4590-bfe4-d3d9be6d82b5",
        "metadata": {}
      },
      {
        "path": "board_cli.py",
        "type": "file",
        "artifact_id": "909370b5-b94a-45d6-9ce1-773a209529ec",
        "metadata": {}
      },
      {
        "path": "collector.py",
        "type": "file",
        "artifact_id": "ce716aa3-5471-468b-8f8b-84657b4fd50b",
        "metadata": {}
      },
      {
        "path": "concept_innovative.json",
        "type": "file",
        "artifact_id": "98f459af-e042-4da4-8e9f-72863a1de82a",
        "metadata": {}
      },
      {
        "path": "concept_v0.3.0.json",
        "type": "file",
        "artifact_id": "0744eed0-44e7-47a3-b466-aa43cb51e9d9",
        "metadata": {}
      },
      {
        "path": "cursor_integration_strategy.md",
        "type": "file",
        "artifact_id": "3864fb04-0863-46e2-b82a-e8d7af17de59",
        "metadata": {}
      },
      {
        "path": "data",
        "type": "directory",
        "artifact_id": "38130b11-b89c-494f-8746-f4d497f6e0c4",
        "metadata": {}
      },
      {
        "path": "data/ai_diagnostics_report.json",
        "type": "file",
        "artifact_id": "4218a05c-f99a-4ac1-87d9-381e2dafcdc1",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness",
        "type": "directory",
        "artifact_id": "deab9cd0-42dd-4f1d-a56a-1fb51bf5510f",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/capability_cache.json",
        "type": "file",
        "artifact_id": "2216feab-f59a-4bd9-a9b4-9348b03c816c",
        "metadata": {}
      },
      {
        "path": "data/artifacts",
        "type": "directory",
        "artifact_id": "a7e96076-9bc5-424b-a10f-73a16a25bdd0",
        "metadata": {}
      },
      {
        "path": "data/artifacts_index.json",
        "type": "file",
        "artifact_id": "cc556224-200d-4280-a14a-7cd4ac4b422b",
        "metadata": {}
      },
      {
        "path": "data/cli.json",
        "type": "file",
        "artifact_id": "059e5242-bdd5-4eca-a576-63c3b762acca",
        "metadata": {}
      },
      {
        "path": "data/cli_enhanced.json",
        "type": "file",
        "artifact_id": "88e9f40b-4c9b-44b5-bd4f-eced43bd68dd",
        "metadata": {}
      },
      {
        "path": "data/cli_queue.json",
        "type": "file",
        "artifact_id": "475c0014-f056-4660-90f5-683fccd276d6",
        "metadata": {}
      },
      {
        "path": "data/cli_queue_enhanced.json",
        "type": "file",
        "artifact_id": "6d1b9d70-33af-4cbf-88a8-bb9d0940acf8",
        "metadata": {}
      },
      {
        "path": "data/conflicts.json",
        "type": "file",
        "artifact_id": "ea47f97a-93ac-4f54-853c-7e1cb4fec851",
        "metadata": {}
      },
      {
        "path": "data/context_orchestration.json",
        "type": "file",
        "artifact_id": "496669f0-966a-46ad-924b-d585f7554bc1",
        "metadata": {}
      },
      {
        "path": "data/copilot",
        "type": "directory",
        "artifact_id": "1935c705-0f55-4c7d-b7e0-a71ce5495e4e",
        "metadata": {}
      },
      {
        "path": "data/copilot/ai_constraints.json",
        "type": "file",
        "artifact_id": "ad25dea2-fd11-4228-a925-1dcce18aacaf",
        "metadata": {}
      },
      {
        "path": "data/copilot/processing_queue.json",
        "type": "file",
        "artifact_id": "83f34ee8-45c6-4249-8766-6d130dc55b2c",
        "metadata": {}
      },
      {
        "path": "data/copilot/warnings.json",
        "type": "file",
        "artifact_id": "6da95287-4b45-4008-96ea-afa19664a428",
        "metadata": {}
      },
      {
        "path": "data/copilot_init.json",
        "type": "file",
        "artifact_id": "3c2cd5f6-de11-4ecc-bc97-0ba78dd9355f",
        "metadata": {}
      },
      {
        "path": "data/cursor",
        "type": "directory",
        "artifact_id": "65a3ffd5-8acb-439b-983c-960902115908",
        "metadata": {}
      },
      {
        "path": "data/cursor/cursor_context_config.json",
        "type": "file",
        "artifact_id": "d2d4b554-6865-455a-b624-5ef01694dd95",
        "metadata": {}
      },
      {
        "path": "data/cursor/cursor_personal_bridge.json",
        "type": "file",
        "artifact_id": "36414da9-a5e9-4952-bd3b-23931aad1ade",
        "metadata": {}
      },
      {
        "path": "data/cursor/cursor_session_memory.json",
        "type": "file",
        "artifact_id": "e75140cb-c2d9-4711-bb86-6232e73f0df6",
        "metadata": {}
      },
      {
        "path": "data/developer_onboarding.json",
        "type": "file",
        "artifact_id": "9ffba7e1-8ab5-4c10-9165-b743dafd8896",
        "metadata": {}
      },
      {
        "path": "data/docs.json",
        "type": "file",
        "artifact_id": "7d250401-2d95-4ff9-8cdb-e549906d20ef",
        "metadata": {}
      },
      {
        "path": "data/gh_mapping.json",
        "type": "file",
        "artifact_id": "6e3a4cc7-2a1f-44bf-92cc-b1d59aa7d224",
        "metadata": {}
      },
      {
        "path": "data/ideas.json",
        "type": "file",
        "artifact_id": "12517f71-428f-412f-ab6b-e8d9831a23bc",
        "metadata": {}
      },
      {
        "path": "data/ideas_cache.json",
        "type": "file",
        "artifact_id": "376c5d0d-489c-4850-8272-9a5b6bf1c12a",
        "metadata": {}
      },
      {
        "path": "data/init.json",
        "type": "file",
        "artifact_id": "f922a582-8a08-4edf-b281-760c74c8fe2e",
        "metadata": {}
      },
      {
        "path": "data/init_enhanced.json",
        "type": "file",
        "artifact_id": "830644ee-a87e-4197-885c-7d8a6221e14f",
        "metadata": {}
      },
      {
        "path": "data/init_enhanced_ai.json",
        "type": "file",
        "artifact_id": "1c47ae54-7104-490e-9d78-1cf360500785",
        "metadata": {}
      },
      {
        "path": "data/insights.json",
        "type": "file",
        "artifact_id": "d96c0319-4156-4d1a-bfd2-230c1dc98459",
        "metadata": {}
      },
      {
        "path": "data/metrics.json",
        "type": "file",
        "artifact_id": "6f9dc5da-5364-4a9d-a36e-175c8735f67e",
        "metadata": {}
      },
      {
        "path": "data/prs.json",
        "type": "file",
        "artifact_id": "2cab7ca2-a0aa-4518-bbeb-82b682ec0447",
        "metadata": {}
      },
      {
        "path": "data/references.json",
        "type": "file",
        "artifact_id": "97b77521-3a85-44ba-8f56-70106353a38f",
        "metadata": {}
      },
      {
        "path": "data/sessions",
        "type": "directory",
        "artifact_id": "c2f0917b-27ec-41d2-ae30-5880d49b63c7",
        "metadata": {}
      },
      {
        "path": "data/sessions/README.md",
        "type": "file",
        "artifact_id": "7e4831d1-62b3-4a8a-abb6-8f17e8b051e9",
        "metadata": {}
      },
      {
        "path": "data/sessions/ai_sessions.json",
        "type": "file",
        "artifact_id": "1a566728-69a5-4646-b0a3-8d1bcf570d0e",
        "metadata": {}
      },
      {
        "path": "data/sessions/current_session.json",
        "type": "file",
        "artifact_id": "025a82dc-bbb0-4dcf-866b-acf0f893251a",
        "metadata": {}
      },
      {
        "path": "data/sessions/worklog.json",
        "type": "file",
        "artifact_id": "b42e898b-f8b9-4318-805d-306929f1a205",
        "metadata": {}
      },
      {
        "path": "data/tasks.json",
        "type": "file",
        "artifact_id": "e797437e-7090-4842-a4f9-f9cf217c52b3",
        "metadata": {}
      },
      {
        "path": "data/vision.json",
        "type": "file",
        "artifact_id": "50fe7666-c594-44ea-b626-e54837e91f53",
        "metadata": {}
      },
      {
        "path": "data/weights.json",
        "type": "file",
        "artifact_id": "47f48971-12de-4f55-a50e-fbcc75d48783",
        "metadata": {}
      },
      {
        "path": "data/workflow_events.json",
        "type": "file",
        "artifact_id": "70cae867-f6ec-45e1-a8ab-181de65bf304",
        "metadata": {}
      },
      {
        "path": "data/workspace",
        "type": "directory",
        "artifact_id": "38b6c54f-171c-40cd-b8ff-fe5524ca958a",
        "metadata": {}
      },
      {
        "path": "data/workspace/workspace_state.json",
        "type": "file",
        "artifact_id": "267d0d23-0a8b-43c6-bb39-43c0474f6e09",
        "metadata": {}
      },
      {
        "path": "docker",
        "type": "directory",
        "artifact_id": "ee59f060-6337-4735-852e-86b752a9a1f0",
        "metadata": {}
      },
      {
        "path": "docker/parser_go",
        "type": "directory",
        "artifact_id": "024e2cf5-9005-49ac-be24-171255d26f0d",
        "metadata": {}
      },
      {
        "path": "docs",
        "type": "directory",
        "artifact_id": "c4ffc194-c893-4861-96a4-02ba94a576b9",
        "metadata": {}
      },
      {
        "path": "docs.json",
        "type": "file",
        "artifact_id": "5a3ad9b7-a953-485a-a4c2-e7b84c58f4a4",
        "metadata": {}
      },
      {
        "path": "docs/AI_SESSION_MOBILE_CONTROL.md",
        "type": "file",
        "artifact_id": "4aefb1cc-902c-40c0-b814-a2cb6e01d30a",
        "metadata": {}
      },
      {
        "path": "docs/CONTRIBUTING.md",
        "type": "file",
        "artifact_id": "b7777951-6819-4112-8732-cdaabfa06f39",
        "metadata": {}
      },
      {
        "path": "docs/LLM_instructions_api.md",
        "type": "file",
        "artifact_id": "e9e4b4a1-c5c6-4101-b192-c41e7bbd8afa",
        "metadata": {}
      },
      {
        "path": "docs/SECURITY.md",
        "type": "file",
        "artifact_id": "a24c2862-88a7-47cb-98fc-45375dd442c7",
        "metadata": {}
      },
      {
        "path": "docs/ai-constraints-implementation-report.md",
        "type": "file",
        "artifact_id": "9754020c-45df-4384-8e9d-29d1167ee459",
        "metadata": {}
      },
      {
        "path": "docs/ai-session-monitor",
        "type": "directory",
        "artifact_id": "b403d3f8-ca0a-482f-bd54-332f7bbbfefc",
        "metadata": {}
      },
      {
        "path": "docs/ai-session-monitor/README.md",
        "type": "file",
        "artifact_id": "76983cd7-63e8-48fc-ad21-3b0ef7997935",
        "metadata": {}
      },
      {
        "path": "docs/best_practices.md",
        "type": "file",
        "artifact_id": "44a1c0aa-208b-41d2-9ad5-6bbd90e14d5c",
        "metadata": {}
      },
      {
        "path": "docs/cache.py",
        "type": "file",
        "artifact_id": "d43c35a0-ffa1-4bda-a5d5-1c83dd969a3a",
        "metadata": {}
      },
      {
        "path": "docs/cli.py",
        "type": "file",
        "artifact_id": "935ce93a-a13f-430a-9c29-985c4792fbc5",
        "metadata": {}
      },
      {
        "path": "docs/cli_modular_architecture.md",
        "type": "file",
        "artifact_id": "4d8865c1-da05-4f14-ae66-1776d67f7c9b",
        "metadata": {}
      },
      {
        "path": "docs/context_orchestration_architecture.md",
        "type": "file",
        "artifact_id": "a4d67b47-dc64-4b69-bcc3-ad15a10d148c",
        "metadata": {}
      },
      {
        "path": "docs/copilot_integration.md",
        "type": "file",
        "artifact_id": "7c211f2a-1564-4813-9691-4d661570c171",
        "metadata": {}
      },
      {
        "path": "docs/examples",
        "type": "directory",
        "artifact_id": "02a92a47-7741-4a9c-bdf9-bf4f06931d19",
        "metadata": {}
      },
      {
        "path": "docs/examples/struct.json",
        "type": "file",
        "artifact_id": "e6a0cad3-7b98-4968-8f3f-a9ef35a76147",
        "metadata": {}
      },
      {
        "path": "docs/gh_view.md",
        "type": "file",
        "artifact_id": "453f365b-6c6b-42e2-9fb0-179c69eeaf94",
        "metadata": {}
      },
      {
        "path": "docs/github_projects_export.md",
        "type": "file",
        "artifact_id": "2e117186-6a10-4e4d-ab05-8519e66dafff",
        "metadata": {}
      },
      {
        "path": "docs/ideas_community.md",
        "type": "file",
        "artifact_id": "9cb5b310-200c-4a1d-95ef-d1f38cba876c",
        "metadata": {}
      },
      {
        "path": "docs/ideas_strategy.md",
        "type": "file",
        "artifact_id": "73b3bdec-a912-4fe8-92bf-4cb4564c019b",
        "metadata": {}
      },
      {
        "path": "docs/ideas_technical.md",
        "type": "file",
        "artifact_id": "5203de1d-658d-4ab6-b8ed-356a9b3f2593",
        "metadata": {}
      },
      {
        "path": "docs/incremental_indexing_plan.md",
        "type": "file",
        "artifact_id": "b19358ff-4297-4c20-9a1e-85df126d9bad",
        "metadata": {}
      },
      {
        "path": "docs/integration.md",
        "type": "file",
        "artifact_id": "31d4e112-00e2-4a4a-896e-79972a873667",
        "metadata": {}
      },
      {
        "path": "docs/interactions_diagram.ru.md",
        "type": "file",
        "artifact_id": "50535cc8-d285-45c0-a746-5fc4cce71ef9",
        "metadata": {}
      },
      {
        "path": "docs/internal",
        "type": "directory",
        "artifact_id": "8c758a11-3b42-4e61-8396-9dcd56f46ce3",
        "metadata": {}
      },
      {
        "path": "docs/internal/collaborative-decision-workflow.md",
        "type": "file",
        "artifact_id": "9bf6552b-097a-420a-88fb-9a4376d1de7c",
        "metadata": {}
      },
      {
        "path": "docs/internal/elastic-workflow-concept.md",
        "type": "file",
        "artifact_id": "5e7cdd74-5e8a-415d-8f31-4aa8c5da80a3",
        "metadata": {}
      },
      {
        "path": "docs/internal/mamay-scenario-onboarding-design.md",
        "type": "file",
        "artifact_id": "106b53d6-605a-4a63-8088-fcb12575d949",
        "metadata": {}
      },
      {
        "path": "docs/internal/notes",
        "type": "directory",
        "artifact_id": "066844fd-37a3-4abd-b20a-7f30afe104e4",
        "metadata": {}
      },
      {
        "path": "docs/internal/notes/session_integration.md",
        "type": "file",
        "artifact_id": "044361d9-0781-4604-ad7c-dbea260cbd22",
        "metadata": {}
      },
      {
        "path": "docs/internal/project-status-summary.md",
        "type": "file",
        "artifact_id": "c1c89152-b742-41d5-b5d0-e5f10bb37922",
        "metadata": {}
      },
      {
        "path": "docs/internal/roadmap.md",
        "type": "file",
        "artifact_id": "e744b4d5-ef12-4f78-ba32-9cc53de02f50",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru",
        "type": "directory",
        "artifact_id": "b62b060f-d84a-43c4-97f2-5dacdcc81e00",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/roadmap.md",
        "type": "file",
        "artifact_id": "ad916539-220a-42cf-b63a-91240e82fa45",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/ses-003_critical_analysis.md",
        "type": "file",
        "artifact_id": "74d5d1c5-45ff-4299-b975-5dcdaa017cdc",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/setup.md",
        "type": "file",
        "artifact_id": "65346e16-70af-43ff-9ab6-3b464ba0f9bd",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/team.md",
        "type": "file",
        "artifact_id": "1d253e67-798f-491f-b7cf-03187c160e22",
        "metadata": {}
      },
      {
        "path": "docs/internal/ses-004-implementation-decisions.md",
        "type": "file",
        "artifact_id": "334af190-d565-4aac-be42-88af9663d97a",
        "metadata": {}
      },
      {
        "path": "docs/internal/setup.md",
        "type": "file",
        "artifact_id": "fffd4492-a7bc-4aa4-8b77-60a39643aab2",
        "metadata": {}
      },
      {
        "path": "docs/internal/team.md",
        "type": "file",
        "artifact_id": "bf151ebb-488d-4524-ac35-1960da05fe00",
        "metadata": {}
      },
      {
        "path": "docs/internal/workspace-mode-design-clarifications.md",
        "type": "file",
        "artifact_id": "b318e7e4-2ffb-44c2-aaa4-1c19995b27cc",
        "metadata": {}
      },
      {
        "path": "docs/internal/workspace-state-mode-system-design.md",
        "type": "file",
        "artifact_id": "ec641998-8cff-4673-b147-0455d0435f50",
        "metadata": {}
      },
      {
        "path": "docs/json_selector.py",
        "type": "file",
        "artifact_id": "dbddd10a-7cbe-4543-833d-81b6b955d039",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_config.md",
        "type": "file",
        "artifact_id": "40e8839e-08ba-4df3-842f-76d62fa64c96",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_decision_checklist.md",
        "type": "file",
        "artifact_id": "e68ccf9f-153b-4934-b206-9d21e3793349",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_format.md",
        "type": "file",
        "artifact_id": "def555eb-afe5-4443-a66c-83240dd69de5",
        "metadata": {}
      },
      {
        "path": "docs/manifesto.md",
        "type": "file",
        "artifact_id": "350153a4-5d05-47fe-9061-e7615de02301",
        "metadata": {}
      },
      {
        "path": "docs/onboarding.md",
        "type": "file",
        "artifact_id": "ec13a00f-f8c6-4c4a-972a-c06d337e32f1",
        "metadata": {}
      },
      {
        "path": "docs/project_structure.md",
        "type": "file",
        "artifact_id": "01ec34c7-499b-4374-9497-dbd9dc02080c",
        "metadata": {}
      },
      {
        "path": "docs/ru",
        "type": "directory",
        "artifact_id": "819f4685-5bcb-4ad0-b77c-75c3caa55e73",
        "metadata": {}
      },
      {
        "path": "docs/ru/CONTRIBUTING.md",
        "type": "file",
        "artifact_id": "d30a90fe-a605-4c87-a874-e95df0eb0c07",
        "metadata": {}
      },
      {
        "path": "docs/ru/README.md",
        "type": "file",
        "artifact_id": "6575e435-d103-4bb7-b32c-34f60ee94a47",
        "metadata": {}
      },
      {
        "path": "docs/ru/best_practices.md",
        "type": "file",
        "artifact_id": "80baeda8-2d2e-48ad-93c1-a6ce49b0a3fe",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples",
        "type": "directory",
        "artifact_id": "afe74d39-1503-41f1-91d0-8cbd7dc91621",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples/struct.json",
        "type": "file",
        "artifact_id": "1ece5a8a-1685-4c57-9465-a9763b769ad7",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_community.md",
        "type": "file",
        "artifact_id": "43ca9d4b-f83e-4bd9-8735-fdda43abb4c6",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_strategy.md",
        "type": "file",
        "artifact_id": "04fa1b8e-9ec1-4df8-b2ee-8050836c613a",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_technical.md",
        "type": "file",
        "artifact_id": "fdd6cb9f-dc1e-4e5a-b45d-8537458cfcec",
        "metadata": {}
      },
      {
        "path": "docs/ru/integration.md",
        "type": "file",
        "artifact_id": "3eac6f9d-e425-4e17-b49d-a14a0806bb6b",
        "metadata": {}
      },
      {
        "path": "docs/ru/interactions_diagram.ru.md",
        "type": "file",
        "artifact_id": "25384d03-3ff9-41b4-915b-fa8c325966ec",
        "metadata": {}
      },
      {
        "path": "docs/ru/llmstruct_config.md",
        "type": "file",
        "artifact_id": "799fe721-9f66-4926-b0df-d44518926bf5",
        "metadata": {}
      },
      {
        "path": "docs/ru/llmstruct_format.md",
        "type": "file",
        "artifact_id": "a79b041f-da06-49ea-ac5e-49a4dfaf4275",
        "metadata": {}
      },
      {
        "path": "docs/ru/manifesto.md",
        "type": "file",
        "artifact_id": "824d697d-bed9-4b75-966b-687f8b4fa211",
        "metadata": {}
      },
      {
        "path": "docs/ru/onboarding.md",
        "type": "file",
        "artifact_id": "1f804d4c-aeda-4f87-8405-766dbb0c7821",
        "metadata": {}
      },
      {
        "path": "docs/ru/project_structure.md",
        "type": "file",
        "artifact_id": "34e092ce-26b8-45e0-a03b-fa0ad00d3f4f",
        "metadata": {}
      },
      {
        "path": "docs/self_run.py",
        "type": "file",
        "artifact_id": "d5bb9446-9fea-4a5b-ad8a-7bf5b7f1c6e4",
        "metadata": {}
      },
      {
        "path": "docs/struct_security.md",
        "type": "file",
        "artifact_id": "0ff49055-2d07-4462-8f83-613d5c8eb7b8",
        "metadata": {}
      },
      {
        "path": "examples",
        "type": "directory",
        "artifact_id": "ac64cc8c-fbff-4675-8e21-ab1690615edd",
        "metadata": {}
      },
      {
        "path": "examples/python_project_main.py",
        "type": "file",
        "artifact_id": "9529e789-6c51-424d-ba9a-4f3b7b1ba4b0",
        "metadata": {}
      },
      {
        "path": "examples/python_project_utils.py",
        "type": "file",
        "artifact_id": "bcb86303-9614-4777-82f8-3fa26cd86ed4",
        "metadata": {}
      },
      {
        "path": "final_system_check.py",
        "type": "file",
        "artifact_id": "6561caab-37fe-48a2-b433-bda37fcf3b5a",
        "metadata": {}
      },
      {
        "path": "final_system_validation.py",
        "type": "file",
        "artifact_id": "7014f736-6e72-4d78-92f3-91bf5a7b1a7c",
        "metadata": {}
      },
      {
        "path": "internal",
        "type": "directory",
        "artifact_id": "bc2ca004-5832-438c-8cae-f0a8d7aebb5b",
        "metadata": {}
      },
      {
        "path": "metrics.json",
        "type": "file",
        "artifact_id": "8850095a-ca23-431c-8f11-d678a1b30ca3",
        "metadata": {}
      },
      {
        "path": "project_context.json",
        "type": "file",
        "artifact_id": "fc7eafc4-7978-4390-8e5d-0ea244162b8e",
        "metadata": {}
      },
      {
        "path": "run_ai_diagnostics.py",
        "type": "file",
        "artifact_id": "ab0179ef-7d35-4614-bf90-58f3df0bf5df",
        "metadata": {}
      },
      {
        "path": "schema",
        "type": "directory",
        "artifact_id": "82d93348-6a8d-4f97-8a75-1675af0ae3e3",
        "metadata": {}
      },
      {
        "path": "schema/artifacts_simplified.json",
        "type": "file",
        "artifact_id": "687469bf-aed4-4f5f-a022-5879d0bf47da",
        "metadata": {}
      },
      {
        "path": "schema/cli_queue.json",
        "type": "file",
        "artifact_id": "4832de02-ce14-4c06-8b94-eac5bedcfbd8",
        "metadata": {}
      },
      {
        "path": "schema/cli_simplified.json",
        "type": "file",
        "artifact_id": "0b7366cc-667a-4820-bb82-f8ab7bb242da",
        "metadata": {}
      },
      {
        "path": "schema/common",
        "type": "directory",
        "artifact_id": "995a2a96-5e2f-463f-a428-0b04d93ec308",
        "metadata": {}
      },
      {
        "path": "schema/common/definitions.json",
        "type": "file",
        "artifact_id": "e5d51d19-f762-4534-bd94-9d45cbedcdf1",
        "metadata": {}
      },
      {
        "path": "schema/core.json",
        "type": "file",
        "artifact_id": "50b76aea-e727-4dad-8ba2-fb7863f209b2",
        "metadata": {}
      },
      {
        "path": "schema/core_simplified.json",
        "type": "file",
        "artifact_id": "278db545-77a9-4f77-b3c3-60f41fd4f203",
        "metadata": {}
      },
      {
        "path": "schema/insights_simplified.json",
        "type": "file",
        "artifact_id": "e1b9eeb1-d05d-4e45-b06e-7faecf236c84",
        "metadata": {}
      },
      {
        "path": "schema/llmstruct_schema.json",
        "type": "file",
        "artifact_id": "050091d6-d430-4d15-90a0-dce57b5d1888",
        "metadata": {}
      },
      {
        "path": "schema/llmstruct_schema_simplified.json",
        "type": "file",
        "artifact_id": "0c3b665f-4c7c-400c-8af9-de27ebee88e0",
        "metadata": {}
      },
      {
        "path": "schema/plugins",
        "type": "directory",
        "artifact_id": "fb191f84-2025-4b6c-861c-17ccdbcaab62",
        "metadata": {}
      },
      {
        "path": "schema/plugins/artifacts.json",
        "type": "file",
        "artifact_id": "d41d7d10-d29b-4ac6-ab5a-9d40ddfa0866",
        "metadata": {}
      },
      {
        "path": "schema/plugins/cli.json",
        "type": "file",
        "artifact_id": "fc02579b-5fd3-4a95-aedb-0d77670df732",
        "metadata": {}
      },
      {
        "path": "schema/plugins/data_sorter.json",
        "type": "file",
        "artifact_id": "bd32a623-4367-4624-947e-878630689a80",
        "metadata": {}
      },
      {
        "path": "schema/plugins/insights.json",
        "type": "file",
        "artifact_id": "71d140bc-4634-4e36-a4fd-e18bf7238861",
        "metadata": {}
      },
      {
        "path": "scripts",
        "type": "directory",
        "artifact_id": "48a5f5e1-0af3-476f-982c-7264ef6c77cd",
        "metadata": {}
      },
      {
        "path": "scripts/auto_update_struct.py",
        "type": "file",
        "artifact_id": "7d105768-ad5c-4639-bab5-c308335edb9a",
        "metadata": {}
      },
      {
        "path": "scripts/collector.py",
        "type": "file",
        "artifact_id": "a0acca29-4986-4767-a4fd-1fa872b8e1a6",
        "metadata": {}
      },
      {
        "path": "scripts/deploy_embedded_files.py",
        "type": "file",
        "artifact_id": "19c674ae-0c59-4c27-9666-e44a984856ac",
        "metadata": {}
      },
      {
        "path": "scripts/export_to_github_projects.py",
        "type": "file",
        "artifact_id": "559a263f-34ee-46ce-bd95-44ed5668e73a",
        "metadata": {}
      },
      {
        "path": "scripts/session_cli.py",
        "type": "file",
        "artifact_id": "ec65b0f4-50b2-42e5-9cf4-99d1b7ee512b",
        "metadata": {}
      },
      {
        "path": "scripts/validate_json.py",
        "type": "file",
        "artifact_id": "c9b85f5f-cf09-4806-a03c-0ecc74bef430",
        "metadata": {}
      },
      {
        "path": "scripts/validate_refs.py",
        "type": "file",
        "artifact_id": "f7888338-6c2e-43cc-b712-a1ff0e08e5cd",
        "metadata": {}
      },
      {
        "path": "scripts/validate_schemas.py",
        "type": "file",
        "artifact_id": "497a581a-fd9c-4ed3-b50e-b98c3ba06b45",
        "metadata": {}
      },
      {
        "path": "src",
        "type": "directory",
        "artifact_id": "2aa055a6-cb25-4ed6-98cc-cab2a7fbfd46",
        "metadata": {}
      },
      {
        "path": "src/llmstruct",
        "type": "directory",
        "artifact_id": "3298712a-9080-421f-89f3-81c88ccb14e8",
        "metadata": {}
      },
      {
        "path": "src/llmstruct.egg-info",
        "type": "directory",
        "artifact_id": "31f7b292-e10c-4242-86f0-8d97daa2c8a3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__init__.py",
        "type": "file",
        "artifact_id": "04e2d98b-12b3-4fcd-ab21-9c0252106c3c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__main__.py",
        "type": "file",
        "artifact_id": "444fa5e0-acb1-4d83-9e9e-1808aabe3151",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_cli_integration.py",
        "type": "file",
        "artifact_id": "c90a3c55-5825-4e69-9fb3-799f10c6f67a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_self_awareness.py",
        "type": "file",
        "artifact_id": "a233a7ca-955d-41c0-8134-5158d7f52821",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cache.py",
        "type": "file",
        "artifact_id": "9be35152-2c5d-41f6-a55f-25aaf96b76ad",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli.py",
        "type": "file",
        "artifact_id": "7da6e9a4-5bc8-4e1a-8e16-ecc774c34410",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_commands.py",
        "type": "file",
        "artifact_id": "ad9b43c0-f91e-4d08-95f5-8b84f98fac1a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_config.py",
        "type": "file",
        "artifact_id": "8eea54c2-2a72-480e-ac69-9155d8a17825",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_core.py",
        "type": "file",
        "artifact_id": "024cb37d-c66b-4376-9a17-6eb1d5e6d1e3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_utils.py",
        "type": "file",
        "artifact_id": "e512e863-e11f-421e-addc-2d4745255a90",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/context_orchestrator.py",
        "type": "file",
        "artifact_id": "283523d7-e006-4819-8a6f-15bbc5da8ce2",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/copilot.py",
        "type": "file",
        "artifact_id": "4cea963b-6351-4818-8509-27f7acb93699",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cursor_integration.py",
        "type": "file",
        "artifact_id": "8da34f61-356e-45ba-833c-61a1c8086023",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators",
        "type": "directory",
        "artifact_id": "5411dc26-9efc-468a-8a41-1842b42ce5a3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/__init__.py",
        "type": "file",
        "artifact_id": "f537ba55-cf3f-4273-9e50-d72e46d1fcdc",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/go_json_generator.py",
        "type": "file",
        "artifact_id": "5670d580-bfcb-4fa5-a130-8bcf43221875",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/json_generator.py",
        "type": "file",
        "artifact_id": "24fd383f-e8a4-4e79-a875-a639db6e28ec",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/gh_view.py",
        "type": "file",
        "artifact_id": "1c25242d-1672-49fd-a578-3299783e59e2",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/grok.py",
        "type": "file",
        "artifact_id": "9c8820d6-185c-400d-9432-3fd7679a295c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/json_selector.py",
        "type": "file",
        "artifact_id": "bf7fb552-fa5c-43ea-a96c-4b036b22824f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/llm_client.py",
        "type": "file",
        "artifact_id": "e93e3b8d-b3a6-4fc9-99f9-8e6b30235b0e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers",
        "type": "directory",
        "artifact_id": "1ef7fbf6-2afe-44bb-b4c2-75248c6caf95",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/__init__.py",
        "type": "file",
        "artifact_id": "21f9b6b3-0b1f-4f7d-b4f3-ef97194fa641",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/go_analyzer.py",
        "type": "file",
        "artifact_id": "6c684fba-e628-4c44-80b0-8e0f50c7c3a6",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/javascript_parser.py",
        "type": "file",
        "artifact_id": "6fb37c8d-68bf-4eed-9e78-67445e4c492d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/python_parser.py",
        "type": "file",
        "artifact_id": "5555c69f-4e2a-425e-9662-b20e8692706b",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/self_run.py",
        "type": "file",
        "artifact_id": "18f502bb-39c2-4e87-b46e-e4fc7e8fc693",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates",
        "type": "directory",
        "artifact_id": "0f02f14a-7618-47e8-90c5-3e95ad4361b7",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates/__init__.py",
        "type": "file",
        "artifact_id": "a91006cb-cb24-45c9-ba51-beb4d74b3c8c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators",
        "type": "directory",
        "artifact_id": "0cd3f3b5-7c1c-41b3-ac72-886e9d6cb890",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/__init__.py",
        "type": "file",
        "artifact_id": "62443fcf-bb03-409a-9f56-54f635ef7be0",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/json_validator.py",
        "type": "file",
        "artifact_id": "b3375391-893e-4425-ab4e-ffcdd0c729bc",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/workspace.py",
        "type": "file",
        "artifact_id": "2492f6aa-4877-4c23-b3a7-58b1edf3595d",
        "metadata": {}
      },
      {
        "path": "start_development.py",
        "type": "file",
        "artifact_id": "0b2d4d19-c24c-4824-9506-c210f806e572",
        "metadata": {}
      },
      {
        "path": "struct.json",
        "type": "file",
        "artifact_id": "5b035bd1-b59a-4aca-ac86-28916f89de1c",
        "metadata": {}
      },
      {
        "path": "struct_ci_test.json",
        "type": "file",
        "artifact_id": "0ab045a1-1465-4afa-a4cb-84044234ca74",
        "metadata": {}
      },
      {
        "path": "struct_final_test.json",
        "type": "file",
        "artifact_id": "afe1a699-c561-495d-8a11-7a48a7ae4f33",
        "metadata": {}
      },
      {
        "path": "struct_fresh.json",
        "type": "file",
        "artifact_id": "a62db59f-b622-49b5-825b-2563bf7752e1",
        "metadata": {}
      },
      {
        "path": "struct_test.json",
        "type": "file",
        "artifact_id": "f7130780-7e1a-4f43-9b62-329bf0e11caa",
        "metadata": {}
      },
      {
        "path": "temp",
        "type": "directory",
        "artifact_id": "dc8cb4b4-5586-46a2-a8d1-0336cf5c6206",
        "metadata": {}
      },
      {
        "path": "temp/discussion_notes.md",
        "type": "file",
        "artifact_id": "efa94d8a-42ba-48cd-b95d-11ed6a61f2af",
        "metadata": {}
      },
      {
        "path": "temp/pause_recovery.md",
        "type": "file",
        "artifact_id": "6d20b8dc-d443-4554-b709-f4c193ff19e4",
        "metadata": {}
      },
      {
        "path": "test_results.json",
        "type": "file",
        "artifact_id": "c17e3528-f04c-4f90-971d-f281529b6807",
        "metadata": {}
      },
      {
        "path": "test_simple.json",
        "type": "file",
        "artifact_id": "1a912c38-09db-4f43-b226-61727e720097",
        "metadata": {}
      },
      {
        "path": "test_struct_quick.json",
        "type": "file",
        "artifact_id": "0c859e12-12ab-456d-90c5-14bc829ca354",
        "metadata": {}
      },
      {
        "path": "tests",
        "type": "directory",
        "artifact_id": "74c64000-d7cf-4235-9b37-02960ebd4237",
        "metadata": {}
      },
      {
        "path": "tests/__init__.py",
        "type": "file",
        "artifact_id": "be692400-1f97-46d6-9067-b1186096bb12",
        "metadata": {}
      },
      {
        "path": "validate_schemas.py",
        "type": "file",
        "artifact_id": "054da7cd-53c5-4845-8e1e-26605d4230a7",
        "metadata": {}
      },
      {
        "path": "validate_sessions.py",
        "type": "file",
        "artifact_id": "bb33f79a-037d-42d3-8cf4-2f4c49a58348",
        "metadata": {}
      },
      {
        "path": "verify_llm_response.py",
        "type": "file",
        "artifact_id": "d7ccd549-31f1-4308-b609-028ccbb86030",
        "metadata": {}
      },
      {
        "path": "workspace_state.json",
        "type": "file",
        "artifact_id": "254815d0-343c-49f1-928d-77effe66988c",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "start_development",
      "path": "start_development.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "LLMStruct Development Startup Script",
      "artifact_id": "11337eee-b8c3-494e-aae4-07515faced51"
    },
    {
      "module_id": "run_ai_diagnostics",
      "path": "run_ai_diagnostics.py",
      "category": "core",
      "functions": 19,
      "classes": 0,
      "summary": "Comprehensive AI Self-Awareness Diagnostics Runner",
      "artifact_id": "b7bdfc47-7fce-442b-8a5a-d3861347bdcc"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "16ef78a5-6af6-4bd1-bda4-b33a3c282ad2"
    },
    {
      "module_id": "final_system_check",
      "path": "final_system_check.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final System Status Check - LLMStruct Modular CLI Integration",
      "artifact_id": "2dbffa2b-1e54-451d-bc14-79e1a047c28d"
    },
    {
      "module_id": "board_cli",
      "path": "board_cli.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "CLI Kanban Board for llmstruct tasks and ideas",
      "artifact_id": "9ea095d3-dc06-4581-98d8-d496dabfd795"
    },
    {
      "module_id": "final_system_validation",
      "path": "final_system_validation.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final system validation script for LLMStruct Modular CLI Integration",
      "artifact_id": "a8204866-b6d6-466d-9189-94db555e6dc1"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "JSON Schema Validation Script for llmstruct",
      "artifact_id": "3e182f4b-8ecd-4c36-a5da-f684e0a1ccb1"
    },
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "Session Schema Validation Script for llmstruct",
      "artifact_id": "e58d1ae1-8eab-4f66-a08b-023a090c6e65"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "f01e080b-b154-42f5-83fa-a7ae123d1b66"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project.",
      "artifact_id": "96c5e941-388f-4d0a-a6d2-01792fd43214"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project.",
      "artifact_id": "c47f85a4-7b12-4348-ae00-940db402efd2"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "f212de44-b231-4713-a34e-ada43165df53"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "ecbee7c2-c03b-40fa-a142-79d826895943"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "b4024f11-3c92-4526-9014-a0b6072d0ad3"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "7397ae68-3b51-4665-9723-11cc3ee29d4c"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "CLI configuration management.",
      "artifact_id": "013984c8-bd50-463f-8b6e-4c6fee91a3bb"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "368e944b-579e-4fd9-aa51-c06d6cd03fed"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "functions": 22,
      "classes": 1,
      "summary": "CLI command processing and handlers.",
      "artifact_id": "fa72a940-3f9e-417a-b02f-e116b1510ed4"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "functions": 20,
      "classes": 5,
      "summary": "Smart Context Orchestration for LLMStruct",
      "artifact_id": "63e58b89-e605-4d9a-8e24-dca4cede8ddb"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "abffe721-c7ee-42d2-a9bb-2d444aefcb0f"
    },
    {
      "module_id": "src.llmstruct.ai_cli_integration",
      "path": "src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "functions": 14,
      "classes": 1,
      "summary": "AI Self-Awareness CLI Integration Module",
      "artifact_id": "895ad5d0-b132-4b0b-ba3a-4e1fe766ce3b"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "34502c76-6551-48bd-9153-904b9af9cce3"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "CLI utility functions.",
      "artifact_id": "faffc725-6bff-4486-b6e8-6a02bcb397a8"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "functions": 26,
      "classes": 5,
      "summary": "LLMStruct Copilot Integration Module",
      "artifact_id": "00825df9-6cb8-4349-ab48-fa8a164c9316"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "GitHub visualization/graph feature (gh-view-v1)",
      "artifact_id": "d4da88e1-b882-4523-85a3-a702082aac37"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "89787972-6df7-45f9-8f60-1e86246d816f"
    },
    {
      "module_id": "src.llmstruct.ai_self_awareness",
      "path": "src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "functions": 47,
      "classes": 8,
      "summary": "AI Self-Awareness Enhancement Module",
      "artifact_id": "c3490871-5a3c-4287-9be9-b672ecbec65b"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "1e2ca3e5-87b3-453a-99e7-24bc1ae1ca7b"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "1046ebef-7a65-4ae4-94cf-9a6d8de13bbf"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "75276f1b-f2fa-4d94-be27-d47e933d82c7"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "functions": 17,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "artifact_id": "99784dc5-e8f2-43a4-a925-9b7a13779cf5"
    },
    {
      "module_id": "src.llmstruct.cursor_integration",
      "path": "src/llmstruct/cursor_integration.py",
      "category": "core",
      "functions": 22,
      "classes": 6,
      "summary": "Cursor IDE Integration Module",
      "artifact_id": "f03054fc-0fa8-4c6f-9653-484a302fbfa9"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Core CLI functionality and main loop.",
      "artifact_id": "7ee625d3-051f-4f62-aa15-d0411cf48a4d"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "functions": 20,
      "classes": 1,
      "summary": "Workspace State & Mode Management System",
      "artifact_id": "e2a686cb-f9b4-41b4-8886-c3dac67eafb0"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "373529b0-fe08-4685-aa64-79e2683fb90d"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "0e0ffb68-0a77-4ebd-9cab-7edd995edbd3"
    },
    {
      "module_id": "src.llmstruct.parsers.go_analyzer",
      "path": "src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430",
      "artifact_id": "73019a77-707a-46f2-80e8-80386a684d3d"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "",
      "artifact_id": "675fd92c-0257-4c99-a9fe-92e998f02b85"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "35306b6f-2044-4388-8bb8-1b295a8d7471"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "13e7e02e-aa8a-43cd-b250-5d0acd351b14"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "d960c845-e7f0-44b6-8e5f-b31428109430"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "a8207ea1-b11d-48d3-bbd5-810674bde871"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "f77297df-b6bf-4dce-99d5-ee5ebb7f2785"
    },
    {
      "module_id": "src.llmstruct.generators.go_json_generator",
      "path": "src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "418bb625-0026-442c-a983-27bd4d9b8894"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "artifact_id": "277ddf96-d0a3-49be-919b-72f5a2afd5aa"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "a423abdb-ec73-49ef-a0a0-3ed86f596aa7"
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Session Management CLI",
      "artifact_id": "0ee3647e-1a67-4328-bcb0-9afa507953f9"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Automatic struct.json update script",
      "artifact_id": "9f012b89-9b45-4071-a0cb-af941097a7ff"
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "d67ef6bb-5c2f-4f6b-a1db-481596255eee"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Export script for GitHub Projects integration",
      "artifact_id": "fbf1daf3-7999-4381-879c-94d9a3ffb60d"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "eae7a731-eb61-42b0-a43f-7fe31cc76e6a"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "98d4db2c-e42d-4bc2-89b7-b3ac4c982e4b"
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "JSON Validation Script",
      "artifact_id": "a7598fe7-efcc-43b9-8bda-b67dfa4ad8a4"
    }
  ],
  "modules": [
    {
      "module_id": "start_development",
      "path": "start_development.py",
      "category": "core",
      "module_doc": "LLMStruct Development Startup Script\nConvenient one-command startup for daily development workflow.",
      "functions": [
        {
          "name": "print_header",
          "docstring": "Print startup header.",
          "line_range": [
            13,
            17
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_environment",
          "docstring": "Check if development environment is properly set up.",
          "line_range": [
            19,
            50
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_system_health_check",
          "docstring": "Run comprehensive system health check.",
          "line_range": [
            52,
            73
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_optimization_suggestions",
          "docstring": "Get AI optimization suggestions.",
          "line_range": [
            75,
            104
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_git_status",
          "docstring": "Check git repository status.",
          "line_range": [
            106,
            152
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_context",
          "docstring": "Show current project context and priorities.",
          "line_range": [
            154,
            195
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_useful_commands",
          "docstring": "Show useful commands for development.",
          "line_range": [
            197,
            212
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main startup routine.",
          "line_range": [
            214,
            249
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "print_header": [
          "print"
        ],
        "check_environment": [
          "missing_files.append",
          "Path",
          "print",
          "hasattr"
        ],
        "run_system_health_check": [
          "subprocess.run",
          "print"
        ],
        "get_optimization_suggestions": [
          "subprocess.run",
          "suggestions.append",
          "line.strip",
          "print"
        ],
        "check_git_status": [
          "subprocess.run",
          "len",
          "changes.split",
          "print"
        ],
        "show_current_context": [
          "init_file.exists",
          "json.load",
          "print",
          "init_data.get",
          "vision.get",
          "enumerate",
          "Path",
          "open",
          "bridge_file.exists",
          "bridge_data.get",
          "business_obj.get"
        ],
        "show_useful_commands": [
          "print"
        ],
        "main": [
          "show_current_context",
          "print",
          "show_useful_commands",
          "check_git_status",
          "check_environment",
          "get_optimization_suggestions",
          "print_header",
          "run_system_health_check"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "11337eee-b8c3-494e-aae4-07515faced51"
    },
    {
      "module_id": "run_ai_diagnostics",
      "path": "run_ai_diagnostics.py",
      "category": "core",
      "module_doc": "Comprehensive AI Self-Awareness Diagnostics Runner\nEnhanced with Cursor integration testing, multi-AI orchestration validation,\npersonal planning bridge testing, and real-time performance metrics.",
      "functions": [
        {
          "name": "print_section",
          "docstring": "Print a formatted section header.",
          "line_range": [
            20,
            23
          ],
          "parameters": [
            "title",
            "emoji"
          ],
          "decorators": []
        },
        {
          "name": "print_subsection",
          "docstring": "Print a formatted subsection header.",
          "line_range": [
            25,
            28
          ],
          "parameters": [
            "title",
            "emoji"
          ],
          "decorators": []
        },
        {
          "name": "test_basic_ai_awareness",
          "docstring": "Test basic AI self-awareness capabilities.",
          "line_range": [
            30,
            51
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_cursor_integration",
          "docstring": "Test Cursor IDE integration capabilities.",
          "line_range": [
            53,
            124
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_real_time_metrics",
          "docstring": "Test real-time metrics calculation.",
          "line_range": [
            126,
            146
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_personal_planning_bridge",
          "docstring": "Test personal planning bridge functionality.",
          "line_range": [
            148,
            196
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_session_management",
          "docstring": "Test session management capabilities.",
          "line_range": [
            198,
            233
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_configuration_loading",
          "docstring": "Test configuration file loading.",
          "line_range": [
            235,
            255
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_performance_benchmark",
          "docstring": "Run performance benchmarks for AI operations.",
          "line_range": [
            257,
            287
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_diagnostic_report",
          "docstring": "Generate a comprehensive diagnostic report.",
          "line_range": [
            289,
            333
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "continuous_monitoring_mode",
          "docstring": "Run continuous monitoring of AI system health.",
          "line_range": [
            335,
            382
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_specific_component",
          "docstring": "Test a specific AI component in detail.",
          "line_range": [
            384,
            423
          ],
          "parameters": [
            "component_name"
          ],
          "decorators": []
        },
        {
          "name": "test_cli_commands",
          "docstring": "Test CLI command processing capabilities.",
          "line_range": [
            425,
            447
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_context_scenarios",
          "docstring": "Test context orchestrator scenarios.",
          "line_range": [
            449,
            466
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_copilot_features",
          "docstring": "Test copilot manager features.",
          "line_range": [
            468,
            485
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_integration_health_check",
          "docstring": "Run comprehensive integration health check.",
          "line_range": [
            487,
            524
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_optimization_suggestions",
          "docstring": "Generate automated optimization suggestions based on diagnostics.",
          "line_range": [
            526,
            597
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_stress_test",
          "docstring": "Run stress test on AI system.",
          "line_range": [
            599,
            651
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run comprehensive AI diagnostics.",
          "line_range": [
            653,
            738
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "print_section": [
          "len",
          "print"
        ],
        "print_subsection": [
          "len",
          "print"
        ],
        "test_basic_ai_awareness": [
          "SystemCapabilityDiscovery",
          "print",
          "discovery.get_enhanced_capabilities_summary",
          "discovery.get_comprehensive_ai_status",
          "len",
          "discovery.discover_all_capabilities",
          "print_section"
        ],
        "test_cursor_integration": [
          "print",
          "print_subsection",
          "cursor_integration.get_comprehensive_cursor_response",
          "delegation.get",
          "response.get",
          "create_cursor_integration",
          "len",
          "context_data.get",
          "print_section"
        ],
        "test_real_time_metrics": [
          "SystemCapabilityDiscovery",
          "print",
          "discovery._get_real_system_load",
          "discovery.get_cursor_status_report",
          "discovery._calculate_real_cache_hit_rate",
          "print_section"
        ],
        "test_personal_planning_bridge": [
          "print",
          "guidance.get",
          "top_feature.get",
          "enumerate",
          "bridge.get_priority_guidance",
          "len",
          "bridge.get_goal_aligned_suggestions",
          "PersonalPlanningCursorBridge",
          "print_section"
        ],
        "test_session_management": [
          "session_manager.start_session",
          "CursorSessionManager",
          "print",
          "session_manager.save_session_context",
          "print_section"
        ],
        "test_configuration_loading": [
          "json.load",
          "print",
          "Path",
          "open",
          "len",
          "config_path.exists",
          "print_section"
        ],
        "run_performance_benchmark": [
          "SystemCapabilityDiscovery",
          "print",
          "time.time",
          "create_cursor_integration",
          "discovery.discover_all_capabilities",
          "print_section"
        ],
        "generate_diagnostic_report": [
          "json.dump",
          "SystemCapabilityDiscovery",
          "time.strftime",
          "print",
          "Path",
          "open",
          "len",
          "discovery.discover_all_capabilities",
          "print_section"
        ],
        "continuous_monitoring_mode": [
          "SystemCapabilityDiscovery",
          "time.strftime",
          "print",
          "discovery._get_real_system_load",
          "len",
          "discovery._calculate_real_cache_hit_rate",
          "time.sleep",
          "discovery.discover_all_capabilities",
          "print_section"
        ],
        "test_specific_component": [
          "component_name.upper",
          "test_context_scenarios",
          "SystemCapabilityDiscovery",
          "print",
          "enumerate",
          "test_copilot_features",
          "len",
          "test_cli_commands",
          "list",
          "discovery.discover_all_capabilities",
          "print_section"
        ],
        "test_cli_commands": [
          "CLIConfig",
          "print",
          "CLIUtils",
          "CommandProcessor"
        ],
        "test_context_scenarios": [
          "create_context_orchestrator",
          "print"
        ],
        "test_copilot_features": [
          "initialize_copilot",
          "feature.replace",
          "print",
          "hasattr"
        ],
        "run_integration_health_check": [
          "print",
          "cursor_integration.get_comprehensive_cursor_response",
          "response.get",
          "create_cursor_integration",
          "print_section"
        ],
        "generate_optimization_suggestions": [
          "SystemCapabilityDiscovery",
          "print",
          "enumerate",
          "len",
          "suggestions.append",
          "discovery.discover_all_capabilities",
          "print_section"
        ],
        "run_stress_test": [
          "SystemCapabilityDiscovery",
          "print",
          "enumerate",
          "delegation.get",
          "range",
          "create_cursor_integration",
          "time.time",
          "context_data.get",
          "discovery.discover_all_capabilities",
          "print_section"
        ],
        "main": [
          "generate_optimization_suggestions",
          "print",
          "test_func",
          "run_integration_health_check",
          "time.time",
          "len",
          "continuous_monitoring_mode",
          "test_specific_component",
          "run_stress_test",
          "print_section"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CursorSessionManager",
        "Path",
        "PersonalPlanningCursorBridge",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "create_cursor_integration",
        "initialize_copilot",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.cursor_integration",
        "os",
        "pathlib",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "b7bdfc47-7fce-442b-8a5a-d3861347bdcc"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            13,
            17
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_text_file",
          "docstring": "Check if file is likely a text file based on extension.",
          "line_range": [
            20,
            31
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": [
            34,
            66
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "gitignore_parser.parse_gitignore",
          "gitignore_path.exists"
        ],
        "is_text_file": [],
        "collect_project": [
          "json.dump",
          "Path",
          "file_path.is_file",
          "root_dir.rglob",
          "str",
          "gitignore",
          "open",
          "logger.error",
          "f.read",
          "logger.info",
          "logger.warning",
          "len",
          "any",
          "load_gitignore",
          "doc_files.items",
          "is_text_file"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "16ef78a5-6af6-4bd1-bda4-b33a3c282ad2"
    },
    {
      "module_id": "final_system_check",
      "path": "final_system_check.py",
      "category": "core",
      "module_doc": "Final System Status Check - LLMStruct Modular CLI Integration\nComprehensive validation of all completed components",
      "functions": [
        {
          "name": "check_system_status",
          "docstring": "Comprehensive system status check",
          "line_range": [
            12,
            155
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_system_status": [
          "i.get",
          "json.load",
          "print",
          "open",
          "data.get",
          "len",
          "t.get"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "2dbffa2b-1e54-451d-bc14-79e1a047c28d"
    },
    {
      "module_id": "board_cli",
      "path": "board_cli.py",
      "category": "core",
      "module_doc": "CLI Kanban Board for llmstruct tasks and ideas\n- Reads data/tasks.json and data/ideas.json\n- Shows board in terminal: columns by status, rows by priority\n- Supports filtering, sorting, and shows links between tasks/ideas",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": [
            26,
            28
          ],
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "group_by_status_and_priority",
          "docstring": "",
          "line_range": [
            30,
            36
          ],
          "parameters": [
            "items",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "render_board",
          "docstring": "",
          "line_range": [
            38,
            64
          ],
          "parameters": [
            "board",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            66,
            74
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "open",
          "json.load"
        ],
        "group_by_status_and_priority": [
          "item.get",
          "defaultdict"
        ],
        "render_board": [
          "item.get",
          "links.append",
          "links.extend",
          "console.print",
          "table.add_column",
          "Panel",
          "kind.capitalize",
          "Table",
          "table.add_row"
        ],
        "main": [
          "console.rule",
          "render_board",
          "tasks_data.get",
          "group_by_status_and_priority",
          "load_json",
          "ideas_data.get"
        ]
      },
      "dependencies": [
        "Console",
        "Panel",
        "Path",
        "Table",
        "box",
        "collections",
        "defaultdict",
        "json",
        "os",
        "pathlib",
        "rich",
        "rich.console",
        "rich.panel",
        "rich.table"
      ],
      "hash": null,
      "artifact_id": "9ea095d3-dc06-4581-98d8-d496dabfd795"
    },
    {
      "module_id": "final_system_validation",
      "path": "final_system_validation.py",
      "category": "core",
      "module_doc": "Final system validation script for LLMStruct Modular CLI Integration",
      "functions": [
        {
          "name": "main",
          "docstring": "Run comprehensive system validation",
          "line_range": [
            13,
            238
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "subprocess.run",
          "json.load",
          "__import__",
          "print",
          "open",
          "task.get",
          "create_cli_core",
          "len",
          "status.upper",
          "getattr",
          "next"
        ]
      },
      "dependencies": [
        "Path",
        "create_cli_core",
        "json",
        "llmstruct.cli_core",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "a8204866-b6d6-466d-9189-94db555e6dc1"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "module_doc": "JSON Schema Validation Script for llmstruct\nValidates all enhanced JSON files against their appropriate schemas.\nPart of TSK-130 implementation.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            24,
            34
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            56,
            193
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            15,
            21
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "open",
          "print",
          "json.load"
        ],
        "validate_json_against_schema": [
          "str",
          "print",
          "validate"
        ],
        "main": [
          "validate_json_against_schema",
          "load_json",
          "print",
          "errors.append"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "3e182f4b-8ecd-4c36-a5da-f684e0a1ccb1"
    },
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "module_doc": "Session Schema Validation Script for llmstruct\nValidates session management JSON files against their schemas.\nFocused validation for session system only.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            21,
            31
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": [
            33,
            52
          ],
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            54,
            124
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            13,
            19
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "open",
          "print",
          "json.load"
        ],
        "validate_json_against_schema": [
          "print",
          "validator.iter_errors",
          "str",
          "len",
          "Draft7Validator",
          "list"
        ],
        "main": [
          "validate_json_against_schema",
          "load_json",
          "print",
          "errors.append"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "e58d1ae1-8eab-4f66-a08b-023a090c6e65"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json_file",
          "docstring": "Load a JSON file and return its contents.",
          "line_range": [
            15,
            25
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_with_struct",
          "docstring": "Verify llm_response.json against struct.json.",
          "line_range": [
            28,
            71
          ],
          "parameters": [
            "response_text",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_without_struct",
          "docstring": "Verify llm_response.json based on LLMstruct principles.",
          "line_range": [
            74,
            108
          ],
          "parameters": [
            "response_text"
          ],
          "decorators": []
        },
        {
          "name": "generate_metrics",
          "docstring": "Generate metrics for the response per EXT-004.",
          "line_range": [
            111,
            141
          ],
          "parameters": [
            "response_data",
            "server_log"
          ],
          "decorators": []
        },
        {
          "name": "update_tasks_json",
          "docstring": "Append a new task to tasks.json.",
          "line_range": [
            144,
            151
          ],
          "parameters": [
            "tasks_file",
            "new_task"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            154,
            225
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json_file": [
          "logging.error",
          "open",
          "json.load"
        ],
        "verify_response_with_struct": [
          "re.findall",
          "expected_goals.issubset",
          "expected_files.issubset",
          "e.startswith",
          "set",
          "expected_extensions.issubset",
          "logging.info",
          "logging.error",
          "struct_data.get"
        ],
        "verify_response_without_struct": [
          "re.findall",
          "expected_goals.issubset",
          "expected_files.issubset",
          "response_text.lower",
          "set",
          "expected_extensions.issubset",
          "logging.info",
          "principle.lower",
          "logging.error"
        ],
        "generate_metrics": [
          "re.findall",
          "server_log.get",
          "len",
          "response_text.split",
          "datetime.utcnow"
        ],
        "update_tasks_json": [
          "json.dump",
          "tasks.get",
          "logging.info",
          "open",
          "load_json_file"
        ],
        "main": [
          "parser.parse_args",
          "verify_response_without_struct",
          "json.dump",
          "verify_response_with_struct",
          "argparse.ArgumentParser",
          "parser.add_argument",
          "logging.info",
          "open",
          "update_tasks_json",
          "generate_metrics",
          "load_json_file"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "argparse",
        "datetime",
        "json",
        "logging",
        "os",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f01e080b-b154-42f5-83fa-a7ae123d1b66"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": [
            6,
            8
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": [
            11,
            13
          ],
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "96c5e941-388f-4d0a-a6d2-01792fd43214"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": [
            6,
            9
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": [
            15,
            17
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": [
            12,
            17
          ],
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": [
                15,
                17
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "utils.helper",
          "print"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": null,
      "artifact_id": "c47f85a4-7b12-4348-ae00-940db402efd2"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            18,
            22
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            24,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            44,
            64
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            66,
            79
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            81,
            94
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            96,
            98
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            17,
            98
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                18,
                22
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                24,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                44,
                64
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                66,
                79
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                81,
                94
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                96,
                98
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "json.dumps",
          "hashlib.sha256",
          "logging.info",
          "Path",
          "open",
          "content.encode",
          "str",
          "f.read",
          "json_file.exists",
          "logging.error"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "logging.error",
          "cursor.fetchone",
          "open",
          "json.load"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f212de44-b231-4713-a34e-ada43165df53"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": [
            17,
            35
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            37,
            74
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "prompt.lower",
          "module.get",
          "struct.get",
          "any",
          "filter_json"
        ],
        "attach_to_llm_request": [
          "prompt.lower",
          "context_file.exists",
          "cache.get_full_json",
          "select_json",
          "json.dumps",
          "logging.info",
          "cache.get_metadata",
          "Path",
          "cache.cache_json",
          "filter_struct",
          "logging.error",
          "filter_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ecbee7c2-c03b-40fa-a142-79d826895943"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            17,
            29
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            31,
            72
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "item.get",
          "filtered.append",
          "isinstance",
          "data.get"
        ],
        "select_json": [
          "prefix.startswith",
          "json.load",
          "Path",
          "open",
          "current_item.get",
          "f.seek",
          "ijson.parse",
          "filtered.append",
          "json_file.exists",
          "logging.error",
          "filter_json",
          "path.append"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b4024f11-3c92-4526-9014-a0b6072d0ad3"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            26,
            36
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            38,
            47
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            49,
            58
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": [
            60,
            74
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            76,
            83
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            85,
            195
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            197,
            237
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            239,
            260
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            262,
            264
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            266,
            268
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            270,
            272
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            274,
            334
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.startswith",
          "Path",
          "line.strip",
          "gitignore_path.exists",
          "logging.error",
          "gitignore_path.open"
        ],
        "load_config": [
          "logging.error",
          "Path",
          "config_path.exists",
          "config_path\u30aa\u30fc\u30d7\u30f3",
          "toml.load"
        ],
        "read_file_content": [
          "path.open",
          "Path",
          "f.read",
          "path.is_file",
          "logging.error"
        ],
        "write_to_file": [
          "file_path.open",
          "logging.info",
          "logging.warning",
          "Path",
          "str",
          "base_path.mkdir",
          "logging.error",
          "file_path.exists",
          "f.write"
        ],
        "parse_files_from_response": [
          "re.findall",
          "content.strip",
          "files.append",
          "filename.strip"
        ],
        "interactive": [
          "cache.close",
          "read_file_content",
          "attach_to_llm_request",
          "user_input.lower",
          "JSONCache",
          "input",
          "get_folder_structure",
          "print",
          "logging.warning",
          "client.query",
          "logging.error",
          "write_to_file",
          "parse_files_from_response",
          "os.listdir",
          "write_dir.startswith",
          "parse",
          "sorted",
          "scan_match.group",
          "LLMClient",
          "write_match.group",
          "Path",
          "files_to_write.append",
          "json.dumps",
          "load_gitignore",
          "re.search"
        ],
        "parse": [
          "cache.close",
          "json.dump",
          "logging.info",
          "logging.warning",
          "generate_json",
          "load_config",
          "Path",
          "cache.cache_json",
          "JSONCache",
          "logging.error",
          "load_gitignore",
          "config.get"
        ],
        "query": [
          "json.dump",
          "LLMClient",
          "logging.info",
          "Path",
          "client.query",
          "logging.error",
          "cache.close",
          "JSONCache"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "parser.add_subparsers",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "context_parser.add_argument",
          "review_parser.add_argument",
          "interactive",
          "subparsers.add_parser",
          "interactive_parser.add_argument",
          "query",
          "dogfood",
          "parse_parser.add_argument",
          "asyncio.run",
          "query_parser.add_argument",
          "context",
          "review",
          "dogfood_parser.add_argument",
          "parse"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "7397ae68-3b51-4665-9723-11cc3ee29d4c"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "module_doc": "CLI configuration management.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize configuration manager.",
          "line_range": [
            20,
            24
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from llmstruct.toml.",
          "line_range": [
            26,
            34
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "Get cache configuration section.",
          "line_range": [
            36,
            38
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "Get Copilot configuration section.",
          "line_range": [
            40,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "Get queue configuration section.",
          "line_range": [
            44,
            46
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "Get context configuration section.",
          "line_range": [
            48,
            50
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_gitignore_patterns",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            52,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "Get directories to exclude from scanning.",
          "line_range": [
            68,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "Get file patterns to include.",
          "line_range": [
            84,
            89
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "Get file patterns to exclude.",
          "line_range": [
            91,
            96
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "Get maximum file size for processing (in bytes).",
          "line_range": [
            98,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_auto_update_config",
          "docstring": "Get auto-update configuration.",
          "line_range": [
            102,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_auto_update_enabled",
          "docstring": "Check if auto-update is enabled.",
          "line_range": [
            106,
            108
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "Get path to struct.json file.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "Get path to context file.",
          "line_range": [
            114,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "Save current configuration to file.",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_config",
          "docstring": "Update configuration value.",
          "line_range": [
            126,
            131
          ],
          "parameters": [
            "self",
            "section",
            "key",
            "value"
          ],
          "decorators": []
        },
        {
          "name": "reload_config",
          "docstring": "Reload configuration from file.",
          "line_range": [
            133,
            135
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIConfig",
          "docstring": "Manages CLI configuration from llmstruct.toml and other sources.",
          "line_range": [
            17,
            135
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize configuration manager.",
              "line_range": [
                20,
                24
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from llmstruct.toml.",
              "line_range": [
                26,
                34
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cache_config",
              "docstring": "Get cache configuration section.",
              "line_range": [
                36,
                38
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_copilot_config",
              "docstring": "Get Copilot configuration section.",
              "line_range": [
                40,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_queue_config",
              "docstring": "Get queue configuration section.",
              "line_range": [
                44,
                46
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_config",
              "docstring": "Get context configuration section.",
              "line_range": [
                48,
                50
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_gitignore_patterns",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": [
                52,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "Get directories to exclude from scanning.",
              "line_range": [
                68,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_include_patterns",
              "docstring": "Get file patterns to include.",
              "line_range": [
                84,
                89
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "Get file patterns to exclude.",
              "line_range": [
                91,
                96
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_max_file_size",
              "docstring": "Get maximum file size for processing (in bytes).",
              "line_range": [
                98,
                100
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_auto_update_config",
              "docstring": "Get auto-update configuration.",
              "line_range": [
                102,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_auto_update_enabled",
              "docstring": "Check if auto-update is enabled.",
              "line_range": [
                106,
                108
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_struct_file_path",
              "docstring": "Get path to struct.json file.",
              "line_range": [
                110,
                112
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_file_path",
              "docstring": "Get path to context file.",
              "line_range": [
                114,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_config",
              "docstring": "Save current configuration to file.",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_config",
              "docstring": "Update configuration value.",
              "line_range": [
                126,
                131
              ],
              "parameters": [
                "self",
                "section",
                "key",
                "value"
              ]
            },
            {
              "name": "reload_config",
              "docstring": "Reload configuration from file.",
              "line_range": [
                133,
                135
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path"
        ],
        "_load_config": [
          "toml.load",
          "logging.error"
        ],
        "get_cache_config": [],
        "get_copilot_config": [],
        "get_queue_config": [],
        "get_context_config": [],
        "get_gitignore_patterns": [
          "line.startswith",
          "Path",
          "line.strip",
          "gitignore_path.exists",
          "logging.error",
          "gitignore_path.open"
        ],
        "get_exclude_dirs": [
          "set",
          "list",
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_include_patterns": [
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_exclude_patterns": [
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_max_file_size": [],
        "get_auto_update_config": [],
        "is_auto_update_enabled": [
          "self.get_auto_update_config"
        ],
        "get_struct_file_path": [],
        "get_context_file_path": [],
        "save_config": [
          "logging.error",
          "toml.dump"
        ],
        "update_config": [
          "self.save_config"
        ],
        "reload_config": [
          "self._load_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "logging",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "013984c8-bd50-463f-8b6e-4c6fee91a3bb"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": [
            24,
            30
          ],
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            6,
            11
          ],
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": [
            13,
            21
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": [
            5,
            21
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                6,
                11
              ],
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": [
                13,
                21
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "response.raise_for_status",
          "len",
          "response.json",
          "prompt.split"
        ],
        "test_grok": [
          "client.generate",
          "time.perf_counter",
          "GrokClient"
        ]
      },
      "dependencies": [
        "requests",
        "time"
      ],
      "hash": null,
      "artifact_id": "368e944b-579e-4fd9-aa51-c06d6cd03fed"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "module_doc": "CLI command processing and handlers.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize command processor.",
          "line_range": [
            33,
            72
          ],
          "parameters": [
            "self",
            "root_dir",
            "config",
            "utils"
          ],
          "decorators": []
        },
        {
          "name": "set_cache",
          "docstring": "Set cache instance.",
          "line_range": [
            74,
            76
          ],
          "parameters": [
            "self",
            "cache"
          ],
          "decorators": []
        },
        {
          "name": "set_copilot",
          "docstring": "Set Copilot manager instance.",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "self",
            "copilot_manager"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "Process a command starting with /.",
          "line_range": [
            82,
            98
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "process_prompt",
          "docstring": "Process a regular user prompt (not a command).",
          "line_range": [
            100,
            152
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Show help information.",
          "line_range": [
            154,
            217
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace",
          "docstring": "Handle workspace state and permissions management.",
          "line_range": [
            219,
            334
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_mode",
          "docstring": "Handle context mode operations with workspace integration.",
          "line_range": [
            336,
            437
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_view",
          "docstring": "View file or directory contents.",
          "line_range": [
            439,
            478
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_write",
          "docstring": "Write content to a file.",
          "line_range": [
            480,
            505
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_queue",
          "docstring": "Handle queue operations.",
          "line_range": [
            507,
            549
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_cache",
          "docstring": "Handle cache operations.",
          "line_range": [
            551,
            590
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_copilot",
          "docstring": "Handle Copilot operations.",
          "line_range": [
            592,
            626
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_config",
          "docstring": "Handle configuration operations.",
          "line_range": [
            628,
            660
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Show system status.",
          "line_range": [
            662,
            676
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_backup",
          "docstring": "Create backup of a file.",
          "line_range": [
            678,
            693
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_parse",
          "docstring": "Parse project structure.",
          "line_range": [
            695,
            715
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_audit",
          "docstring": "Handle audit operations.",
          "line_range": [
            717,
            743
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_auto_update",
          "docstring": "Handle auto-update operations.",
          "line_range": [
            745,
            765
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_struct_status",
          "docstring": "Handle struct status operations.",
          "line_range": [
            767,
            791
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context",
          "docstring": "Handle context operations.",
          "line_range": [
            793,
            849
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_session",
          "docstring": "Handle session operations.",
          "line_range": [
            851,
            902
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CommandProcessor",
          "docstring": "Processes CLI commands and user prompts.",
          "line_range": [
            30,
            902
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize command processor.",
              "line_range": [
                33,
                72
              ],
              "parameters": [
                "self",
                "root_dir",
                "config",
                "utils"
              ]
            },
            {
              "name": "set_cache",
              "docstring": "Set cache instance.",
              "line_range": [
                74,
                76
              ],
              "parameters": [
                "self",
                "cache"
              ]
            },
            {
              "name": "set_copilot",
              "docstring": "Set Copilot manager instance.",
              "line_range": [
                78,
                80
              ],
              "parameters": [
                "self",
                "copilot_manager"
              ]
            },
            {
              "name": "process_command",
              "docstring": "Process a command starting with /.",
              "line_range": [
                82,
                98
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "process_prompt",
              "docstring": "Process a regular user prompt (not a command).",
              "line_range": [
                100,
                152
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Show help information.",
              "line_range": [
                154,
                217
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace",
              "docstring": "Handle workspace state and permissions management.",
              "line_range": [
                219,
                334
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_mode",
              "docstring": "Handle context mode operations with workspace integration.",
              "line_range": [
                336,
                437
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_view",
              "docstring": "View file or directory contents.",
              "line_range": [
                439,
                478
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_write",
              "docstring": "Write content to a file.",
              "line_range": [
                480,
                505
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_queue",
              "docstring": "Handle queue operations.",
              "line_range": [
                507,
                549
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_cache",
              "docstring": "Handle cache operations.",
              "line_range": [
                551,
                590
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_copilot",
              "docstring": "Handle Copilot operations.",
              "line_range": [
                592,
                626
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_config",
              "docstring": "Handle configuration operations.",
              "line_range": [
                628,
                660
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Show system status.",
              "line_range": [
                662,
                676
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_backup",
              "docstring": "Create backup of a file.",
              "line_range": [
                678,
                693
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_parse",
              "docstring": "Parse project structure.",
              "line_range": [
                695,
                715
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_audit",
              "docstring": "Handle audit operations.",
              "line_range": [
                717,
                743
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_auto_update",
              "docstring": "Handle auto-update operations.",
              "line_range": [
                745,
                765
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_struct_status",
              "docstring": "Handle struct status operations.",
              "line_range": [
                767,
                791
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context",
              "docstring": "Handle context operations.",
              "line_range": [
                793,
                849
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_session",
              "docstring": "Handle session operations.",
              "line_range": [
                851,
                902
              ],
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "print",
          "WorkspaceStateManager"
        ],
        "set_cache": [],
        "set_copilot": [],
        "process_command": [
          "print",
          "command_line.strip",
          "len",
          "command_line.split",
          "logging.error"
        ],
        "process_prompt": [
          "prompt.strip",
          "CopilotEvent",
          "print",
          "context_info.get",
          "logging.info",
          "logging.warning",
          "len",
          "logging.error",
          "context_data.get",
          "get_optimized_context"
        ],
        "cmd_help": [
          "print"
        ],
        "cmd_workspace": [
          "permissions.get",
          "print",
          "entry.get",
          "boundaries.get",
          "override.get",
          "args.strip",
          "result.get",
          "len",
          "int",
          "action_args.split",
          "logging.error",
          "state.get"
        ],
        "cmd_mode": [
          "re.findall",
          "permissions.get",
          "args.upper",
          "print",
          "args.strip",
          "result.get",
          "len",
          "metrics.get",
          "args.lower",
          "context_data.get",
          "get_optimized_context"
        ],
        "cmd_view": [
          "os.listdir",
          "sorted",
          "print",
          "args.strip"
        ],
        "cmd_write": [
          "content.endswith",
          "print",
          "len",
          "content.startswith",
          "args.split"
        ],
        "cmd_queue": [
          "json.load",
          "print",
          "cmd.get",
          "enumerate",
          "open",
          "args.strip",
          "len",
          "queue_data.get",
          "os.remove"
        ],
        "cmd_cache": [
          "print",
          "args.strip",
          "stats.get",
          "len",
          "os.listdir"
        ],
        "cmd_copilot": [
          "json.load",
          "print",
          "open",
          "args.strip",
          "json.dumps"
        ],
        "cmd_config": [
          "json.dumps",
          "print",
          "args.strip"
        ],
        "cmd_status": [
          "print"
        ],
        "cmd_backup": [
          "print",
          "args.strip"
        ],
        "cmd_parse": [
          "generate_json",
          "print"
        ],
        "cmd_audit": [
          "print",
          "args.strip"
        ],
        "handle_auto_update": [
          "generate_json",
          "print"
        ],
        "handle_struct_status": [
          "json.load",
          "print",
          "datetime.fromtimestamp",
          "open",
          "len",
          "os.stat",
          "struct_data.get"
        ],
        "cmd_context": [
          "print",
          "args.strip",
          "len",
          "metrics.get",
          "context_data.get",
          "get_optimized_context"
        ],
        "cmd_session": [
          "print",
          "args.strip",
          "datetime.now",
          "len",
          "state.get"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CopilotContextManager",
        "CopilotEvent",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "WorkspaceStateManager",
        "cli_config",
        "cli_utils",
        "copilot",
        "create_context_orchestrator",
        "datetime",
        "generate_json",
        "get_optimized_context",
        "get_optimized_context_for_scenario",
        "initialize_copilot",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "sys",
        "trigger_copilot_event",
        "typing",
        "workspace"
      ],
      "hash": null,
      "artifact_id": "fa72a940-3f9e-417a-b02f-e116b1510ed4"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "module_doc": "Smart Context Orchestration for LLMStruct\nOptimizes context loading for different LLM usage scenarios",
      "functions": [
        {
          "name": "create_context_orchestrator",
          "docstring": "Factory function to create context orchestrator.",
          "line_range": [
            506,
            508
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context for scenario - convenience function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (cli_direct, vscode_copilot, session_work)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            511,
            543
          ],
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            57,
            75
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load context orchestration configuration.",
          "line_range": [
            77,
            119
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_scenario",
          "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            121,
            161
          ],
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "custom_budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_budget_for_scenario",
          "docstring": "Create budget configuration for scenario.",
          "line_range": [
            163,
            172
          ],
          "parameters": [
            "self",
            "scenario_config"
          ],
          "decorators": []
        },
        {
          "name": "_load_full_context",
          "docstring": "Load complete context without token restrictions.",
          "line_range": [
            174,
            187
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_extract_relationship_summary",
          "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438",
          "line_range": [
            189,
            216
          ],
          "parameters": [
            "self",
            "max_modules"
          ],
          "decorators": []
        },
        {
          "name": "_load_focused_context",
          "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441",
          "line_range": [
            218,
            275
          ],
          "parameters": [
            "self",
            "file_path",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load session-specific context.",
          "line_range": [
            277,
            299
          ],
          "parameters": [
            "self",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_minimal_context",
          "docstring": "Load minimal context for quick operations.",
          "line_range": [
            301,
            319
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_source_with_filtering",
          "docstring": "Load source with optional filtering based on budget.",
          "line_range": [
            321,
            344
          ],
          "parameters": [
            "self",
            "source_name",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_file_context",
          "docstring": "Get context specific to a file.",
          "line_range": [
            346,
            357
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_essential_parts",
          "docstring": "Extract essential parts of data to fit token budget.",
          "line_range": [
            359,
            381
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_filter_for_current_session",
          "docstring": "Filter data to items relevant to current session.",
          "line_range": [
            383,
            422
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_summary",
          "docstring": "Extract summary information from data.",
          "line_range": [
            424,
            443
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_apply_section_filtering",
          "docstring": "Apply section filtering to exclude specified sections.",
          "line_range": [
            445,
            457
          ],
          "parameters": [
            "self",
            "data",
            "exclude_sections"
          ],
          "decorators": []
        },
        {
          "name": "_update_metrics",
          "docstring": "Update performance metrics.",
          "line_range": [
            459,
            477
          ],
          "parameters": [
            "self",
            "scenario",
            "context",
            "load_time"
          ],
          "decorators": []
        },
        {
          "name": "get_metrics_summary",
          "docstring": "Get summary of context loading metrics.",
          "line_range": [
            479,
            494
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_metrics",
          "docstring": "Save metrics to file for analysis.",
          "line_range": [
            496,
            501
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextMode",
          "docstring": "Context loading modes for different scenarios.",
          "line_range": [
            17,
            22
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLevel",
          "docstring": "Progressive context levels with token budgets.",
          "line_range": [
            25,
            30
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextBudget",
          "docstring": "Token budget configuration for context loading.",
          "line_range": [
            34,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextMetrics",
          "docstring": "Metrics for context loading performance.",
          "line_range": [
            43,
            48
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SmartContextOrchestrator",
          "docstring": "Orchestrates context loading based on usage scenario and token budget.\nProvides optimized context for different LLM integration patterns.",
          "line_range": [
            51,
            501
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                57,
                75
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load context orchestration configuration.",
              "line_range": [
                77,
                119
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_scenario",
              "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
              "line_range": [
                121,
                161
              ],
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "custom_budget"
              ]
            },
            {
              "name": "_get_budget_for_scenario",
              "docstring": "Create budget configuration for scenario.",
              "line_range": [
                163,
                172
              ],
              "parameters": [
                "self",
                "scenario_config"
              ]
            },
            {
              "name": "_load_full_context",
              "docstring": "Load complete context without token restrictions.",
              "line_range": [
                174,
                187
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_extract_relationship_summary",
              "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438",
              "line_range": [
                189,
                216
              ],
              "parameters": [
                "self",
                "max_modules"
              ]
            },
            {
              "name": "_load_focused_context",
              "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441",
              "line_range": [
                218,
                275
              ],
              "parameters": [
                "self",
                "file_path",
                "budget"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load session-specific context.",
              "line_range": [
                277,
                299
              ],
              "parameters": [
                "self",
                "budget"
              ]
            },
            {
              "name": "_load_minimal_context",
              "docstring": "Load minimal context for quick operations.",
              "line_range": [
                301,
                319
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_source_with_filtering",
              "docstring": "Load source with optional filtering based on budget.",
              "line_range": [
                321,
                344
              ],
              "parameters": [
                "self",
                "source_name",
                "budget"
              ]
            },
            {
              "name": "_get_file_context",
              "docstring": "Get context specific to a file.",
              "line_range": [
                346,
                357
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_essential_parts",
              "docstring": "Extract essential parts of data to fit token budget.",
              "line_range": [
                359,
                381
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_filter_for_current_session",
              "docstring": "Filter data to items relevant to current session.",
              "line_range": [
                383,
                422
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_extract_summary",
              "docstring": "Extract summary information from data.",
              "line_range": [
                424,
                443
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_apply_section_filtering",
              "docstring": "Apply section filtering to exclude specified sections.",
              "line_range": [
                445,
                457
              ],
              "parameters": [
                "self",
                "data",
                "exclude_sections"
              ]
            },
            {
              "name": "_update_metrics",
              "docstring": "Update performance metrics.",
              "line_range": [
                459,
                477
              ],
              "parameters": [
                "self",
                "scenario",
                "context",
                "load_time"
              ]
            },
            {
              "name": "get_metrics_summary",
              "docstring": "Get summary of context loading metrics.",
              "line_range": [
                479,
                494
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_metrics",
              "docstring": "Save metrics to file for analysis.",
              "line_range": [
                496,
                501
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path"
        ],
        "_load_config": [
          "config_path.exists",
          "json.load",
          "open"
        ],
        "get_context_for_scenario": [
          "time.time",
          "ContextMode",
          "self._load_minimal_context",
          "self._update_metrics",
          "self._load_session_context",
          "self._load_focused_context",
          "scenario_config.get",
          "self._get_budget_for_scenario",
          "self._load_full_context"
        ],
        "_get_budget_for_scenario": [
          "budget_config.get",
          "scenario_config.get",
          "ContextBudget"
        ],
        "_load_full_context": [
          "open",
          "full_path.exists",
          "json.load",
          "logger.warning"
        ],
        "_extract_relationship_summary": [
          "m.get",
          "json.load",
          "summary.append",
          "struct.get",
          "open",
          "logger.warning",
          "struct_path.exists"
        ],
        "_load_focused_context": [
          "json.load",
          "init_path.exists",
          "open",
          "self._get_file_context",
          "session_path.exists",
          "self._extract_relationship_summary",
          "len",
          "logger.warning",
          "file_path.endswith",
          "self._extract_summary",
          "json.dumps"
        ],
        "_load_session_context": [
          "self._filter_for_current_session",
          "self._load_source_with_filtering"
        ],
        "_load_minimal_context": [
          "json.load",
          "open",
          "source_path.exists",
          "logger.warning",
          "self._extract_summary"
        ],
        "_load_source_with_filtering": [
          "json.load",
          "open",
          "self._apply_section_filtering",
          "source_path.exists",
          "logger.warning"
        ],
        "_get_file_context": [
          "Path"
        ],
        "_extract_essential_parts": [
          "task.get",
          "isinstance"
        ],
        "_filter_for_current_session": [
          "current_session_path.exists",
          "data.items",
          "json.load",
          "open",
          "task.get",
          "current_session.get",
          "logger.warning",
          "idea.get"
        ],
        "_extract_summary": [
          "len",
          "t.get",
          "isinstance"
        ],
        "_apply_section_filtering": [
          "data.items"
        ],
        "_update_metrics": [
          "context.get",
          "len",
          "ContextMetrics"
        ],
        "get_metrics_summary": [
          "len",
          "sum"
        ],
        "save_metrics": [
          "self.get_metrics_summary",
          "json.dump",
          "open"
        ],
        "create_context_orchestrator": [
          "SmartContextOrchestrator"
        ],
        "get_optimized_context": [
          "create_context_orchestrator",
          "ContextBudget",
          "orchestrator.get_context_for_scenario"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Union",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "63e58b89-e605-4d9a-8e24-dca4cede8ddb"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "LLMClient",
        "SystemCapabilityDiscovery",
        "ai_cli_integration",
        "ai_self_awareness",
        "llm_client"
      ],
      "hash": null,
      "artifact_id": "abffe721-c7ee-42d2-a9bb-2d444aefcb0f"
    },
    {
      "module_id": "src.llmstruct.ai_cli_integration",
      "path": "src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "module_doc": "AI Self-Awareness CLI Integration Module\nIntegrates unused CLI functions into the AI self-awareness system.",
      "functions": [
        {
          "name": "create_ai_cli_integration",
          "docstring": "Factory function to create AI CLI integration instance.",
          "line_range": [
            304,
            306
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_enhanced_cli_summary",
          "docstring": "Get a formatted summary of AI CLI integration capabilities.",
          "line_range": [
            309,
            346
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI integration system.",
          "line_range": [
            21,
            25
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_discover_available_commands",
          "docstring": "Discover which unused CLI commands are available for integration.",
          "line_range": [
            27,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_status_command",
          "docstring": "Integrate cmd_status for real-time AI system status awareness.",
          "line_range": [
            71,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_audit_command",
          "docstring": "Integrate cmd_audit for system health analysis awareness.",
          "line_range": [
            102,
            131
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_context_command",
          "docstring": "Integrate cmd_context for context mode awareness.",
          "line_range": [
            133,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_queue_command",
          "docstring": "Integrate cmd_queue for workflow queue monitoring.",
          "line_range": [
            164,
            193
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_integration_summary",
          "docstring": "Get summary of CLI command integrations for AI awareness.",
          "line_range": [
            195,
            215
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_ai_enhancement_impact",
          "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
          "line_range": [
            217,
            241
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_status",
          "docstring": "Create fallback status information if cmd_status is not available.",
          "line_range": [
            243,
            256
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_audit",
          "docstring": "Create fallback audit information if cmd_audit is not available.",
          "line_range": [
            258,
            271
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_context",
          "docstring": "Create fallback context information if cmd_context is not available.",
          "line_range": [
            273,
            286
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_queue",
          "docstring": "Create fallback queue information if cmd_queue is not available.",
          "line_range": [
            288,
            301
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AISelfAwarenessCLIIntegration",
          "docstring": "Integrates unused CLI functions to enhance AI self-awareness capabilities.\nTransforms 21 unused CLI commands into useful AI interaction tools.",
          "line_range": [
            15,
            301
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI integration system.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_discover_available_commands",
              "docstring": "Discover which unused CLI commands are available for integration.",
              "line_range": [
                27,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_status_command",
              "docstring": "Integrate cmd_status for real-time AI system status awareness.",
              "line_range": [
                71,
                100
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_audit_command",
              "docstring": "Integrate cmd_audit for system health analysis awareness.",
              "line_range": [
                102,
                131
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_context_command",
              "docstring": "Integrate cmd_context for context mode awareness.",
              "line_range": [
                133,
                162
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_queue_command",
              "docstring": "Integrate cmd_queue for workflow queue monitoring.",
              "line_range": [
                164,
                193
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_integration_summary",
              "docstring": "Get summary of CLI command integrations for AI awareness.",
              "line_range": [
                195,
                215
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_ai_enhancement_impact",
              "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
              "line_range": [
                217,
                241
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_status",
              "docstring": "Create fallback status information if cmd_status is not available.",
              "line_range": [
                243,
                256
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_audit",
              "docstring": "Create fallback audit information if cmd_audit is not available.",
              "line_range": [
                258,
                271
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_context",
              "docstring": "Create fallback context information if cmd_context is not available.",
              "line_range": [
                273,
                286
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_queue",
              "docstring": "Create fallback queue information if cmd_queue is not available.",
              "line_range": [
                288,
                301
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._discover_available_commands",
          "Path"
        ],
        "_discover_available_commands": [
          "getattr",
          "logger.error",
          "unused_command_mapping.items",
          "hasattr"
        ],
        "integrate_ai_status_command": [
          "logger.error",
          "str",
          "self._create_fallback_status",
          "cmd_status"
        ],
        "integrate_ai_audit_command": [
          "logger.error",
          "cmd_audit",
          "str",
          "self._create_fallback_audit"
        ],
        "integrate_ai_context_command": [
          "logger.error",
          "self._create_fallback_context",
          "cmd_context",
          "str"
        ],
        "integrate_ai_queue_command": [
          "self._create_fallback_queue",
          "cmd_queue",
          "str",
          "logger.error"
        ],
        "get_integration_summary": [
          "cmd.get",
          "self._calculate_ai_enhancement_impact",
          "info.get",
          "len",
          "sum"
        ],
        "_calculate_ai_enhancement_impact": [
          "info.get",
          "len",
          "enhanced_categories.append",
          "any",
          "capability_categories.items"
        ],
        "_create_fallback_status": [
          "str"
        ],
        "_create_fallback_audit": [
          "str"
        ],
        "_create_fallback_context": [],
        "_create_fallback_queue": [],
        "create_ai_cli_integration": [
          "AISelfAwarenessCLIIntegration"
        ],
        "get_ai_enhanced_cli_summary": [
          "integration.integrate_ai_status_command",
          "integration.integrate_ai_queue_command",
          "integration.integrate_ai_audit_command",
          "create_ai_cli_integration",
          "integration.get_integration_summary",
          "integration.integrate_ai_context_command"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "cli_commands",
        "json",
        "llmstruct",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "895ad5d0-b132-4b0b-ba3a-4e1fe766ce3b"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "llmstruct.cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "34502c76-6551-48bd-9153-904b9af9cce3"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "module_doc": "CLI utility functions.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize utils with root directory.",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read file content with size limit.",
          "line_range": [
            28,
            50
          ],
          "parameters": [
            "self",
            "file_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "write_file_content",
          "docstring": "Write content to file.",
          "line_range": [
            52,
            70
          ],
          "parameters": [
            "self",
            "file_path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "get_directory_structure",
          "docstring": "Get directory structure using folder generator.",
          "line_range": [
            72,
            115
          ],
          "parameters": [
            "self",
            "path",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON content.",
          "line_range": [
            117,
            123
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "format_json",
          "docstring": "Format data as JSON string.",
          "line_range": [
            125,
            131
          ],
          "parameters": [
            "self",
            "data",
            "indent"
          ],
          "decorators": []
        },
        {
          "name": "generate_unique_id",
          "docstring": "Generate unique ID for commands, queues, etc.",
          "line_range": [
            133,
            137
          ],
          "parameters": [
            "self",
            "prefix"
          ],
          "decorators": []
        },
        {
          "name": "safe_path_join",
          "docstring": "Safely join path parts, preventing directory traversal.",
          "line_range": [
            139,
            149
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_exists",
          "docstring": "Check if file exists.",
          "line_range": [
            151,
            157
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "dir_exists",
          "docstring": "Check if directory exists.",
          "line_range": [
            159,
            165
          ],
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_size",
          "docstring": "Get file size in bytes.",
          "line_range": [
            167,
            173
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_file",
          "docstring": "Create backup of file with timestamp.",
          "line_range": [
            175,
            191
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_backups",
          "docstring": "Clean up old backup files, keeping only the most recent ones.",
          "line_range": [
            193,
            222
          ],
          "parameters": [
            "self",
            "file_path",
            "keep_count"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIUtils",
          "docstring": "Utility functions for CLI operations.",
          "line_range": [
            21,
            222
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize utils with root directory.",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "read_file_content",
              "docstring": "Read file content with size limit.",
              "line_range": [
                28,
                50
              ],
              "parameters": [
                "self",
                "file_path",
                "max_size"
              ]
            },
            {
              "name": "write_file_content",
              "docstring": "Write content to file.",
              "line_range": [
                52,
                70
              ],
              "parameters": [
                "self",
                "file_path",
                "content"
              ]
            },
            {
              "name": "get_directory_structure",
              "docstring": "Get directory structure using folder generator.",
              "line_range": [
                72,
                115
              ],
              "parameters": [
                "self",
                "path",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ]
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON content.",
              "line_range": [
                117,
                123
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "format_json",
              "docstring": "Format data as JSON string.",
              "line_range": [
                125,
                131
              ],
              "parameters": [
                "self",
                "data",
                "indent"
              ]
            },
            {
              "name": "generate_unique_id",
              "docstring": "Generate unique ID for commands, queues, etc.",
              "line_range": [
                133,
                137
              ],
              "parameters": [
                "self",
                "prefix"
              ]
            },
            {
              "name": "safe_path_join",
              "docstring": "Safely join path parts, preventing directory traversal.",
              "line_range": [
                139,
                149
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_exists",
              "docstring": "Check if file exists.",
              "line_range": [
                151,
                157
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "dir_exists",
              "docstring": "Check if directory exists.",
              "line_range": [
                159,
                165
              ],
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "get_file_size",
              "docstring": "Get file size in bytes.",
              "line_range": [
                167,
                173
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "backup_file",
              "docstring": "Create backup of file with timestamp.",
              "line_range": [
                175,
                191
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "cleanup_old_backups",
              "docstring": "Clean up old backup files, keeping only the most recent ones.",
              "line_range": [
                193,
                222
              ],
              "parameters": [
                "self",
                "file_path",
                "keep_count"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "read_file_content": [
          "logging.warning",
          "open",
          "f.read",
          "logging.error",
          "os.stat"
        ],
        "write_file_content": [
          "logging.info",
          "Path",
          "open",
          "logging.error",
          "f.write"
        ],
        "get_directory_structure": [
          "get_folder_structure",
          "os.listdir",
          "sorted",
          "logging.error"
        ],
        "validate_json": [
          "json.loads",
          "str"
        ],
        "format_json": [
          "json.dumps",
          "str",
          "logging.error"
        ],
        "generate_unique_id": [
          "time.time",
          "uuid.uuid4",
          "int",
          "str"
        ],
        "safe_path_join": [
          "resolved_path.startswith",
          "ValueError"
        ],
        "file_exists": [
          "self.safe_path_join"
        ],
        "dir_exists": [
          "self.safe_path_join"
        ],
        "get_file_size": [
          "self.safe_path_join"
        ],
        "backup_file": [
          "src.read",
          "dst.write",
          "self.safe_path_join",
          "open",
          "time.time",
          "int",
          "logging.error"
        ],
        "cleanup_old_backups": [
          "self.safe_path_join",
          "backups.append",
          "logging.error",
          "logging.info",
          "logging.warning",
          "filename.split",
          "filename.startswith",
          "os.listdir",
          "int",
          "backups.sort",
          "os.remove"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "faffc725-6bff-4486-b6e8-6a02bcb397a8"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "module_doc": "LLMStruct Copilot Integration Module\nProvides context-aware development assistance with hybrid copilot capabilities.",
      "functions": [
        {
          "name": "initialize_copilot",
          "docstring": "Initialize copilot context manager for the project.\n\nArgs:\n    project_root: Project root directory\n\nReturns:\n    Configured CopilotContextManager instance",
          "line_range": [
            649,
            659
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "trigger_copilot_event",
          "docstring": "Trigger a copilot event and get relevant context.\n\nArgs:\n    manager: CopilotContextManager instance\n    event_type: Type of event\n    file_path: Optional file path\n    **kwargs: Additional event metadata\n\nReturns:\n    Dict with event context",
          "line_range": [
            662,
            679
          ],
          "parameters": [
            "manager",
            "event_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "smart_suggest",
          "docstring": "Get smart suggestions based on query and context.\n\nArgs:\n    manager: CopilotContextManager instance\n    query: Query string\n    context: Context type (code, workflow, task, etc.)\n\nReturns:\n    List of suggestions",
          "line_range": [
            682,
            702
          ],
          "parameters": [
            "manager",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context_for_scenario",
          "docstring": "Get optimized context for specific scenario - standalone function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            705,
            728
          ],
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
          "line_range": [
            68,
            90
          ],
          "parameters": [
            "self",
            "project_root",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load copilot configuration from JSON file.",
          "line_range": [
            92,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_layers",
          "docstring": "Initialize context layers from configuration.",
          "line_range": [
            106,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_context_layer",
          "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
          "line_range": [
            118,
            160
          ],
          "parameters": [
            "self",
            "layer_name",
            "force"
          ],
          "decorators": []
        },
        {
          "name": "unload_context_layer",
          "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
          "line_range": [
            162,
            180
          ],
          "parameters": [
            "self",
            "layer_name"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            182,
            225
          ],
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_context",
          "docstring": "Fallback to legacy context loading.",
          "line_range": [
            227,
            235
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_vscode",
          "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
          "line_range": [
            237,
            251
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_event",
          "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
          "line_range": [
            252,
            296
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_event_context",
          "docstring": "Legacy event context loading as fallback.",
          "line_range": [
            298,
            350
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "suggest_completion",
          "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
          "line_range": [
            352,
            397
          ],
          "parameters": [
            "self",
            "current_code",
            "file_path",
            "cursor_position"
          ],
          "decorators": []
        },
        {
          "name": "validate_change",
          "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
          "line_range": [
            399,
            445
          ],
          "parameters": [
            "self",
            "file_path",
            "change_type"
          ],
          "decorators": []
        },
        {
          "name": "_matches_scope",
          "docstring": "Check if file matches scope pattern.",
          "line_range": [
            447,
            452
          ],
          "parameters": [
            "self",
            "file_path",
            "scope"
          ],
          "decorators": []
        },
        {
          "name": "_matches_trigger",
          "docstring": "Check if change type matches trigger.",
          "line_range": [
            454,
            463
          ],
          "parameters": [
            "self",
            "change_type",
            "trigger"
          ],
          "decorators": []
        },
        {
          "name": "_validate_json_schema",
          "docstring": "Validate JSON file against schema.",
          "line_range": [
            465,
            480
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_check_circular_dependencies",
          "docstring": "Check for circular dependencies.",
          "line_range": [
            482,
            507
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_validate_task_references",
          "docstring": "Validate task references in tasks.json.",
          "line_range": [
            509,
            536
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
          "line_range": [
            538,
            568
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "refresh_all_contexts",
          "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
          "line_range": [
            570,
            584
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_status",
          "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
          "line_range": [
            586,
            607
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "export_context",
          "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
          "line_range": [
            609,
            631
          ],
          "parameters": [
            "self",
            "layers",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Clean up resources.",
          "line_range": [
            633,
            643
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextLayer",
          "docstring": "Context layer priorities for copilot integration.",
          "line_range": [
            22,
            28
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AttachMode",
          "docstring": "Context attachment modes.",
          "line_range": [
            31,
            37
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLayerConfig",
          "docstring": "Configuration for a context layer.",
          "line_range": [
            41,
            49
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotEvent",
          "docstring": "Represents a copilot event for context triggering.",
          "line_range": [
            53,
            59
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotContextManager",
          "docstring": "Manages context layers and integration with GitHub Copilot.\nProvides intelligent context loading and workflow assistance.",
          "line_range": [
            62,
            643
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
              "line_range": [
                68,
                90
              ],
              "parameters": [
                "self",
                "project_root",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load copilot configuration from JSON file.",
              "line_range": [
                92,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_initialize_layers",
              "docstring": "Initialize context layers from configuration.",
              "line_range": [
                106,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_context_layer",
              "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
              "line_range": [
                118,
                160
              ],
              "parameters": [
                "self",
                "layer_name",
                "force"
              ]
            },
            {
              "name": "unload_context_layer",
              "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
              "line_range": [
                162,
                180
              ],
              "parameters": [
                "self",
                "layer_name"
              ]
            },
            {
              "name": "get_optimized_context",
              "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
              "line_range": [
                182,
                225
              ],
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "max_tokens"
              ]
            },
            {
              "name": "_get_legacy_context",
              "docstring": "Fallback to legacy context loading.",
              "line_range": [
                227,
                235
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_vscode",
              "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
              "line_range": [
                237,
                251
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_context_for_event",
              "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
              "line_range": [
                252,
                296
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_get_legacy_event_context",
              "docstring": "Legacy event context loading as fallback.",
              "line_range": [
                298,
                350
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "suggest_completion",
              "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
              "line_range": [
                352,
                397
              ],
              "parameters": [
                "self",
                "current_code",
                "file_path",
                "cursor_position"
              ]
            },
            {
              "name": "validate_change",
              "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
              "line_range": [
                399,
                445
              ],
              "parameters": [
                "self",
                "file_path",
                "change_type"
              ]
            },
            {
              "name": "_matches_scope",
              "docstring": "Check if file matches scope pattern.",
              "line_range": [
                447,
                452
              ],
              "parameters": [
                "self",
                "file_path",
                "scope"
              ]
            },
            {
              "name": "_matches_trigger",
              "docstring": "Check if change type matches trigger.",
              "line_range": [
                454,
                463
              ],
              "parameters": [
                "self",
                "change_type",
                "trigger"
              ]
            },
            {
              "name": "_validate_json_schema",
              "docstring": "Validate JSON file against schema.",
              "line_range": [
                465,
                480
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_check_circular_dependencies",
              "docstring": "Check for circular dependencies.",
              "line_range": [
                482,
                507
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_validate_task_references",
              "docstring": "Validate task references in tasks.json.",
              "line_range": [
                509,
                536
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
              "line_range": [
                538,
                568
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "refresh_all_contexts",
              "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
              "line_range": [
                570,
                584
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_status",
              "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
              "line_range": [
                586,
                607
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "export_context",
              "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
              "line_range": [
                609,
                631
              ],
              "parameters": [
                "self",
                "layers",
                "format"
              ]
            },
            {
              "name": "close",
              "docstring": "Clean up resources.",
              "line_range": [
                633,
                643
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._initialize_layers",
          "os.getcwd",
          "Path",
          "str",
          "create_context_orchestrator",
          "self._load_config",
          "JSONCache"
        ],
        "_load_config": [
          "json.load",
          "Path",
          "open",
          "logger.info",
          "logger.error",
          "logger.warning"
        ],
        "_initialize_layers": [
          "layer_config.get",
          "layers_config.items",
          "ContextLayerConfig"
        ],
        "load_context_layer": [
          "logger.debug",
          "json.load",
          "open",
          "logger.info",
          "logger.error",
          "time.time",
          "source_path.exists",
          "logger.warning"
        ],
        "unload_context_layer": [
          "logger.info"
        ],
        "get_optimized_context": [
          "logger.error",
          "scenario_mapping.get",
          "self._get_legacy_context"
        ],
        "_get_legacy_context": [
          "self.load_context_layer"
        ],
        "get_context_for_vscode": [
          "self.get_optimized_context"
        ],
        "get_context_for_event": [
          "self.get_optimized_context",
          "scenario_mapping.get",
          "self._get_legacy_event_context",
          "logger.error"
        ],
        "_get_legacy_event_context": [
          "code_triggers.get",
          "file_triggers.get",
          "self.load_context_layer",
          "json.load",
          "triggers.get",
          "workflow_triggers.get",
          "open",
          "logger.error",
          "source_path.exists"
        ],
        "suggest_completion": [
          "self.load_context_layer",
          "func.get",
          "module.get",
          "Path",
          "str",
          "suggestions.append",
          "current_module.get",
          "struct_context.get"
        ],
        "validate_change": [
          "rule.get",
          "self._matches_scope",
          "result.get",
          "self._check_circular_dependencies",
          "self._validate_json_schema",
          "len",
          "safety_features.get",
          "self._matches_trigger",
          "self._validate_task_references"
        ],
        "_matches_scope": [
          "fnmatch",
          "Path",
          "str"
        ],
        "_matches_trigger": [
          "trigger_map.get"
        ],
        "_validate_json_schema": [
          "open",
          "file_path.endswith",
          "json.load"
        ],
        "_check_circular_dependencies": [
          "self.load_context_layer",
          "module.get",
          "Path",
          "str",
          "len",
          "struct_data.get"
        ],
        "_validate_task_references": [
          "json.load",
          "set",
          "tasks_data.get",
          "open",
          "task.get",
          "task_ids.add",
          "file_path.endswith"
        ],
        "get_workflow_suggestions": [
          "self.load_context_layer",
          "workflow.get",
          "workflows.items",
          "command.lower",
          "suggestions.append",
          "suggestions.extend"
        ],
        "refresh_all_contexts": [
          "list",
          "self.load_context_layer",
          "logger.info"
        ],
        "get_context_status": [
          "list"
        ],
        "export_context": [
          "json.dumps",
          "list",
          "str"
        ],
        "close": [
          "logger.info",
          "hasattr"
        ],
        "initialize_copilot": [
          "CopilotContextManager"
        ],
        "trigger_copilot_event": [
          "CopilotEvent",
          "manager.get_context_for_event"
        ],
        "smart_suggest": [
          "manager.get_workflow_suggestions"
        ],
        "get_optimized_context_for_scenario": [
          "initialize_copilot",
          "locals",
          "manager.close",
          "manager.get_optimized_context"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "Union",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "fnmatch",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "00825df9-6cb8-4349-ab48-fa8a164c9316"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "module_doc": "GitHub visualization/graph feature (gh-view-v1)\nExport consolidated tasks/ideas from JSON files to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for GitHub Projects export",
          "line_range": [
            177,
            208
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize exporter with configuration",
          "line_range": [
            19,
            25
          ],
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from TOML file",
          "line_range": [
            27,
            35
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_mapping",
          "docstring": "Load existing ID mapping between local and GitHub",
          "line_range": [
            37,
            45
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_mapping",
          "docstring": "Save ID mapping to file",
          "line_range": [
            47,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_run_gh_command",
          "docstring": "Run GitHub CLI command and return success status and output",
          "line_range": [
            55,
            68
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "load_official_data",
          "docstring": "Load tasks and ideas from official JSON files",
          "line_range": [
            70,
            98
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "format_task_for_github",
          "docstring": "Format task data for GitHub Project card",
          "line_range": [
            100,
            137
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "format_idea_for_github",
          "docstring": "Format idea data for GitHub Project card",
          "line_range": [
            139,
            174
          ],
          "parameters": [
            "self",
            "idea"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExporter",
          "docstring": "Export tasks and ideas to GitHub Projects as cards",
          "line_range": [
            16,
            174
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize exporter with configuration",
              "line_range": [
                19,
                25
              ],
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from TOML file",
              "line_range": [
                27,
                35
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_mapping",
              "docstring": "Load existing ID mapping between local and GitHub",
              "line_range": [
                37,
                45
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_mapping",
              "docstring": "Save ID mapping to file",
              "line_range": [
                47,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_run_gh_command",
              "docstring": "Run GitHub CLI command and return success status and output",
              "line_range": [
                55,
                68
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "load_official_data",
              "docstring": "Load tasks and ideas from official JSON files",
              "line_range": [
                70,
                98
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "format_task_for_github",
              "docstring": "Format task data for GitHub Project card",
              "line_range": [
                100,
                137
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "format_idea_for_github",
              "docstring": "Format idea data for GitHub Project card",
              "line_range": [
                139,
                174
              ],
              "parameters": [
                "self",
                "idea"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path",
          "self._load_mapping"
        ],
        "_load_config": [
          "toml.load",
          "config.get",
          "open",
          "print"
        ],
        "_load_mapping": [
          "open",
          "json.load"
        ],
        "_save_mapping": [
          "json.dump",
          "open",
          "print"
        ],
        "_run_gh_command": [
          "subprocess.run"
        ],
        "load_official_data": [
          "json.load",
          "print",
          "ideas_file.exists",
          "tasks_file.exists",
          "tasks_data.get",
          "open",
          "len",
          "ideas_data.get"
        ],
        "format_task_for_github": [
          "status_map.get",
          "task.get",
          "body_parts.append"
        ],
        "format_idea_for_github": [
          "status_map.get",
          "idea.get",
          "body_parts.append"
        ],
        "main": [
          "sys.exit",
          "print",
          "exporter.load_official_data",
          "len",
          "GitHubProjectsExporter",
          "exporter.format_task_for_github",
          "exporter.format_idea_for_github"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "pathlib",
        "subprocess",
        "sys",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d4da88e1-b882-4523-85a3-a702082aac37"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": [
            38,
            86
          ],
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": [
            88,
            115
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": [
            117,
            141
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": [
            143,
            156
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": [
            158,
            172
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": [
            27,
            172
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": [
                38,
                86
              ],
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": [
                88,
                115
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": [
                117,
                141
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": [
                143,
                156
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": [
                158,
                172
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logging.info",
          "int",
          "os.getenv"
        ],
        "query": [
          "self._query_hybrid",
          "self._query_ollama",
          "json.load",
          "json.dumps",
          "self._query_anthropic",
          "logging.info",
          "logging.warning",
          "Path",
          "asyncio.sleep",
          "range",
          "self._query_grok",
          "logging.error"
        ],
        "_query_grok": [
          "logging.info",
          "session.post",
          "result.get",
          "aiohttp.ClientSession",
          "logging.error",
          "response.json"
        ],
        "_query_anthropic": [
          "logging.info",
          "session.post",
          "result.get",
          "aiohttp.ClientSession",
          "logging.error",
          "response.json"
        ],
        "_query_ollama": [
          "logging.debug",
          "logging.error",
          "logging.info",
          "result.get",
          "aiohttp.ClientSession",
          "session.post",
          "response.json"
        ],
        "_query_hybrid": [
          "self._query_ollama",
          "self._query_anthropic",
          "logging.info",
          "isinstance",
          "self._query_grok",
          "len",
          "asyncio.gather"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "89787972-6df7-45f9-8f60-1e86246d816f"
    },
    {
      "module_id": "src.llmstruct.ai_self_awareness",
      "path": "src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "module_doc": "AI Self-Awareness Enhancement Module\nProvides comprehensive system introspection and capability discovery for llmstruct AI systems.\nEnhanced with Cursor IDE integration and real-time metrics.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize the capability discovery system with CLI integration.",
          "line_range": [
            101,
            107
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_ensure_directories",
          "docstring": "Ensure required directories exist.",
          "line_range": [
            109,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "discover_all_capabilities",
          "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
          "line_range": [
            113,
            154
          ],
          "parameters": [
            "self",
            "force_refresh"
          ],
          "decorators": []
        },
        {
          "name": "_get_integration_metrics",
          "docstring": "Get metrics about unused function integration success.",
          "line_range": [
            156,
            163
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_enhanced_capabilities_summary",
          "docstring": "Get enhanced capabilities summary including unused function integration.",
          "line_range": [
            165,
            203
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_ai_status",
          "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
          "line_range": [
            205,
            246
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_tools",
          "docstring": "Discover and check health of all available tools.",
          "line_range": [
            248,
            260
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cli_processor",
          "docstring": "Check CLI processor health.",
          "line_range": [
            262,
            297
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_copilot_manager",
          "docstring": "Check Copilot manager health.",
          "line_range": [
            299,
            336
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_context_orchestrator",
          "docstring": "Check context orchestrator health.",
          "line_range": [
            338,
            393
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cache_system",
          "docstring": "Check cache system health.",
          "line_range": [
            395,
            438
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_struct_parser",
          "docstring": "Check struct.json parser health.",
          "line_range": [
            440,
            484
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_docs_system",
          "docstring": "Check docs.json system health.",
          "line_range": [
            486,
            517
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_capabilities",
          "docstring": "Discover available context capabilities.",
          "line_range": [
            519,
            556
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_integration_health",
          "docstring": "Check health of all system integrations.",
          "line_range": [
            558,
            567
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_component_status",
          "docstring": "Check status of a specific component.",
          "line_range": [
            569,
            574
          ],
          "parameters": [
            "self",
            "component_name"
          ],
          "decorators": []
        },
        {
          "name": "_discover_vscode_capabilities",
          "docstring": "Discover VS Code specific capabilities.",
          "line_range": [
            576,
            585
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_cache_hit_rate",
          "docstring": "Calculate cache hit rate using real metrics.",
          "line_range": [
            587,
            589
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_system_load",
          "docstring": "Estimate current system load using real metrics.",
          "line_range": [
            591,
            593
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_cache_valid",
          "docstring": "Check if cached capabilities are still valid.",
          "line_range": [
            595,
            602
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cached_capabilities",
          "docstring": "Load capabilities from cache.",
          "line_range": [
            604,
            618
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cache_capabilities",
          "docstring": "Cache capabilities to disk.",
          "line_range": [
            620,
            630
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "get_capabilities_summary",
          "docstring": "Get a human-readable summary of current capabilities.",
          "line_range": [
            632,
            691
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_project_structure",
          "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
          "line_range": [
            693,
            739
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_directory_structure",
          "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
          "line_range": [
            741,
            760
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_unused_capabilities",
          "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
          "line_range": [
            762,
            819
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_discover_config_capabilities",
          "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
          "line_range": [
            821,
            849
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_scenarios",
          "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
          "line_range": [
            851,
            890
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_command",
          "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
          "line_range": [
            892,
            898
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_config",
          "docstring": "Determine if a config function would be useful for AI configuration awareness.",
          "line_range": [
            900,
            906
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_utility",
          "docstring": "Determine if a utility function would be useful for AI operations.",
          "line_range": [
            908,
            914
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_prioritize_integrations",
          "docstring": "Prioritize which unused functions should be integrated first.",
          "line_range": [
            916,
            932
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_basic_directory_scan",
          "docstring": "Basic directory scan for fallback scenarios.",
          "line_range": [
            934,
            946
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_status_report",
          "docstring": "Generate Cursor-specific status optimized for IDE integration.",
          "line_range": [
            949,
            967
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "optimize_context_for_cursor",
          "docstring": "Provide perfectly sized context for Cursor interactions.",
          "line_range": [
            969,
            1001
          ],
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals from personal bridge.",
          "line_range": [
            1003,
            1038
          ],
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_real_cache_hit_rate",
          "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
          "line_range": [
            1040,
            1066
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_real_system_load",
          "docstring": "Get actual system performance metrics.",
          "line_range": [
            1068,
            1090
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": [
            1092,
            1102
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": [
            1104,
            1114
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_query_type",
          "docstring": "Analyze query to determine optimal context type.",
          "line_range": [
            1116,
            1144
          ],
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": [
            1146,
            1163
          ],
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": [
            1165,
            1177
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_get_overall_health_emoji",
          "docstring": "Get emoji representing overall system health.",
          "line_range": [
            1179,
            1202
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_status_emoji",
          "docstring": "Get emoji for context engine status.",
          "line_range": [
            1204,
            1214
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_ai_integration_emoji",
          "docstring": "Get emoji for AI integration status.",
          "line_range": [
            1216,
            1224
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_goal_alignment_status",
          "docstring": "Get goal alignment status.",
          "line_range": [
            1226,
            1235
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CapabilityStatus",
          "docstring": "Status of system capabilities.",
          "line_range": [
            22,
            27
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextMode",
          "docstring": "Available context modes.",
          "line_range": [
            30,
            35
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ToolHealth",
          "docstring": "Health status of a specific tool.",
          "line_range": [
            39,
            46
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextCapabilities",
          "docstring": "Available context capabilities.",
          "line_range": [
            50,
            57
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "IntegrationHealth",
          "docstring": "Status of system integrations.",
          "line_range": [
            61,
            68
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "VSCodeCapabilities",
          "docstring": "VS Code specific capabilities.",
          "line_range": [
            72,
            79
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilities",
          "docstring": "Complete system capabilities overview.",
          "line_range": [
            83,
            91
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilityDiscovery",
          "docstring": "Discovers and monitors system capabilities in real-time.\nProvides AI with comprehensive understanding of available tools and systems.\nEnhanced with unused function integration for maximum AI self-awareness.",
          "line_range": [
            94,
            1235
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the capability discovery system with CLI integration.",
              "line_range": [
                101,
                107
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_ensure_directories",
              "docstring": "Ensure required directories exist.",
              "line_range": [
                109,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "discover_all_capabilities",
              "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
              "line_range": [
                113,
                154
              ],
              "parameters": [
                "self",
                "force_refresh"
              ]
            },
            {
              "name": "_get_integration_metrics",
              "docstring": "Get metrics about unused function integration success.",
              "line_range": [
                156,
                163
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_enhanced_capabilities_summary",
              "docstring": "Get enhanced capabilities summary including unused function integration.",
              "line_range": [
                165,
                203
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_comprehensive_ai_status",
              "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
              "line_range": [
                205,
                246
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_tools",
              "docstring": "Discover and check health of all available tools.",
              "line_range": [
                248,
                260
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cli_processor",
              "docstring": "Check CLI processor health.",
              "line_range": [
                262,
                297
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_copilot_manager",
              "docstring": "Check Copilot manager health.",
              "line_range": [
                299,
                336
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_context_orchestrator",
              "docstring": "Check context orchestrator health.",
              "line_range": [
                338,
                393
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cache_system",
              "docstring": "Check cache system health.",
              "line_range": [
                395,
                438
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_struct_parser",
              "docstring": "Check struct.json parser health.",
              "line_range": [
                440,
                484
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_docs_system",
              "docstring": "Check docs.json system health.",
              "line_range": [
                486,
                517
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_capabilities",
              "docstring": "Discover available context capabilities.",
              "line_range": [
                519,
                556
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_integration_health",
              "docstring": "Check health of all system integrations.",
              "line_range": [
                558,
                567
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_component_status",
              "docstring": "Check status of a specific component.",
              "line_range": [
                569,
                574
              ],
              "parameters": [
                "self",
                "component_name"
              ]
            },
            {
              "name": "_discover_vscode_capabilities",
              "docstring": "Discover VS Code specific capabilities.",
              "line_range": [
                576,
                585
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_cache_hit_rate",
              "docstring": "Calculate cache hit rate using real metrics.",
              "line_range": [
                587,
                589
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_estimate_system_load",
              "docstring": "Estimate current system load using real metrics.",
              "line_range": [
                591,
                593
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_cache_valid",
              "docstring": "Check if cached capabilities are still valid.",
              "line_range": [
                595,
                602
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cached_capabilities",
              "docstring": "Load capabilities from cache.",
              "line_range": [
                604,
                618
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cache_capabilities",
              "docstring": "Cache capabilities to disk.",
              "line_range": [
                620,
                630
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "get_capabilities_summary",
              "docstring": "Get a human-readable summary of current capabilities.",
              "line_range": [
                632,
                691
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_project_structure",
              "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
              "line_range": [
                693,
                739
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_enhanced_directory_structure",
              "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
              "line_range": [
                741,
                760
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_unused_capabilities",
              "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
              "line_range": [
                762,
                819
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_discover_config_capabilities",
              "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
              "line_range": [
                821,
                849
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_scenarios",
              "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
              "line_range": [
                851,
                890
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_ai_useful_command",
              "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
              "line_range": [
                892,
                898
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_config",
              "docstring": "Determine if a config function would be useful for AI configuration awareness.",
              "line_range": [
                900,
                906
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_utility",
              "docstring": "Determine if a utility function would be useful for AI operations.",
              "line_range": [
                908,
                914
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_prioritize_integrations",
              "docstring": "Prioritize which unused functions should be integrated first.",
              "line_range": [
                916,
                932
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_basic_directory_scan",
              "docstring": "Basic directory scan for fallback scenarios.",
              "line_range": [
                934,
                946
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cursor_status_report",
              "docstring": "Generate Cursor-specific status optimized for IDE integration.",
              "line_range": [
                949,
                967
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "optimize_context_for_cursor",
              "docstring": "Provide perfectly sized context for Cursor interactions.",
              "line_range": [
                969,
                1001
              ],
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals from personal bridge.",
              "line_range": [
                1003,
                1038
              ],
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "_calculate_real_cache_hit_rate",
              "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
              "line_range": [
                1040,
                1066
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_real_system_load",
              "docstring": "Get actual system performance metrics.",
              "line_range": [
                1068,
                1090
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": [
                1092,
                1102
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": [
                1104,
                1114
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_query_type",
              "docstring": "Analyze query to determine optimal context type.",
              "line_range": [
                1116,
                1144
              ],
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": [
                1146,
                1163
              ],
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": [
                1165,
                1177
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_get_overall_health_emoji",
              "docstring": "Get emoji representing overall system health.",
              "line_range": [
                1179,
                1202
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_get_context_status_emoji",
              "docstring": "Get emoji for context engine status.",
              "line_range": [
                1204,
                1214
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_get_ai_integration_emoji",
              "docstring": "Get emoji for AI integration status.",
              "line_range": [
                1216,
                1224
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_goal_alignment_status",
              "docstring": "Get goal alignment status.",
              "line_range": [
                1226,
                1235
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._ensure_directories",
          "Path",
          "create_ai_cli_integration"
        ],
        "_ensure_directories": [],
        "discover_all_capabilities": [
          "self._get_integration_metrics",
          "SystemCapabilities",
          "self._cache_capabilities",
          "self._check_integration_health",
          "self._calculate_cache_hit_rate",
          "logger.info",
          "time.time",
          "datetime.now",
          "self._load_cached_capabilities",
          "self._discover_context_capabilities",
          "self._is_cache_valid",
          "self._discover_vscode_capabilities",
          "self._estimate_system_load",
          "self._discover_tools",
          "self._analyze_project_structure"
        ],
        "_get_integration_metrics": [],
        "get_enhanced_capabilities_summary": [
          "str",
          "self.get_capabilities_summary",
          "enhanced_info.append",
          "hasattr"
        ],
        "get_comprehensive_ai_status": [
          "get_ai_enhanced_cli_summary",
          "self.get_enhanced_capabilities_summary",
          "str"
        ],
        "_discover_tools": [
          "self._check_copilot_manager",
          "self._check_context_orchestrator",
          "self._check_cache_system",
          "self._check_docs_system",
          "self._check_cli_processor",
          "self._check_struct_parser"
        ],
        "_check_cli_processor": [
          "CLIConfig",
          "ToolHealth",
          "CommandProcessor",
          "str",
          "time.time",
          "datetime.now",
          "CLIUtils"
        ],
        "_check_copilot_manager": [
          "ToolHealth",
          "str",
          "time.time",
          "datetime.now",
          "manager.get_context_status",
          "hasattr",
          "initialize_copilot"
        ],
        "_check_context_orchestrator": [
          "ToolHealth",
          "str",
          "time.time",
          "datetime.now",
          "create_context_orchestrator",
          "logger.warning",
          "hasattr",
          "get_optimized_context"
        ],
        "_check_cache_system": [
          "ToolHealth",
          "cache.get_full_json",
          "struct_file.exists",
          "str",
          "time.time",
          "datetime.now",
          "cache.cache_json",
          "cache.close",
          "JSONCache"
        ],
        "_check_struct_parser": [
          "ToolHealth",
          "json.load",
          "struct_file.exists",
          "open",
          "str",
          "time.time",
          "missing_keys.append",
          "datetime.now",
          "FileNotFoundError",
          "struct_data.get"
        ],
        "_check_docs_system": [
          "ToolHealth",
          "json.load",
          "docs_file.exists",
          "open",
          "str",
          "time.time",
          "datetime.now",
          "FileNotFoundError"
        ],
        "_discover_context_capabilities": [
          "ContextCapabilities",
          "scenario_mappings.keys",
          "str",
          "isinstance",
          "logger.error",
          "create_context_orchestrator",
          "list",
          "config.get"
        ],
        "_check_integration_health": [
          "IntegrationHealth",
          "self._check_component_status"
        ],
        "_check_component_status": [
          "hasattr"
        ],
        "_discover_vscode_capabilities": [
          "VSCodeCapabilities"
        ],
        "_calculate_cache_hit_rate": [
          "self._calculate_real_cache_hit_rate"
        ],
        "_estimate_system_load": [
          "self._get_real_system_load"
        ],
        "_is_cache_valid": [
          "time.time"
        ],
        "_load_cached_capabilities": [
          "logger.error",
          "open",
          "json.load"
        ],
        "_cache_capabilities": [
          "logger.error",
          "json.dump",
          "open",
          "asdict"
        ],
        "get_capabilities_summary": [
          "str",
          "len",
          "chr",
          "self.discover_all_capabilities"
        ],
        "_analyze_project_structure": [
          "json.load",
          "module.get",
          "self._get_enhanced_directory_structure",
          "struct_file.exists",
          "open",
          "self._discover_context_scenarios",
          "str",
          "self._analyze_unused_capabilities",
          "len",
          "sum",
          "self._discover_config_capabilities",
          "struct_data.get"
        ],
        "_get_enhanced_directory_structure": [
          "get_directory_structure",
          "str",
          "self._basic_directory_scan"
        ],
        "_analyze_unused_capabilities": [
          "min",
          "cli_module.get",
          "self._is_ai_useful_command",
          "self._is_ai_useful_config",
          "f.startswith",
          "config_module.get",
          "modules.get",
          "self._is_ai_useful_utility",
          "str",
          "len",
          "self._prioritize_integrations",
          "utils_module.get",
          "struct_data.get"
        ],
        "_discover_config_capabilities": [
          "get_context_config",
          "get_copilot_config",
          "str",
          "is_auto_update_enabled",
          "get_queue_config"
        ],
        "_discover_context_scenarios": [
          "get_metrics_summary",
          "get_context_for_scenario",
          "str"
        ],
        "_is_ai_useful_command": [],
        "_is_ai_useful_config": [],
        "_is_ai_useful_utility": [],
        "_prioritize_integrations": [
          "priorities.append"
        ],
        "_basic_directory_scan": [
          "logger.error",
          "item.is_dir",
          "str",
          "item.is_file"
        ],
        "get_cursor_status_report": [
          "self._get_context_status_emoji",
          "self.discover_all_capabilities",
          "self._get_goal_alignment_status",
          "str",
          "self._get_ai_integration_emoji",
          "self._get_overall_health_emoji",
          "self._load_cursor_config"
        ],
        "optimize_context_for_cursor": [
          "cursor_config.get",
          "self._load_cursor_config",
          "json.load",
          "self._analyze_query_type",
          "context_rules.get",
          "open",
          "str",
          "logger.error",
          "self._apply_privacy_filter",
          "file_path.exists",
          "optimal_config.get"
        ],
        "get_goal_aligned_suggestions": [
          "technical_context.lower",
          "logger.error",
          "personal_bridge.get",
          "any",
          "self._load_personal_bridge",
          "suggestions.extend"
        ],
        "_calculate_real_cache_hit_rate": [
          "cache_dir.glob",
          "cache_dir.exists",
          "cache_file.stat",
          "time.time",
          "logger.error",
          "len",
          "list"
        ],
        "_get_real_system_load": [
          "min",
          "psutil.cpu_percent",
          "str",
          "logger.error",
          "psutil.disk_usage",
          "psutil.virtual_memory"
        ],
        "_load_cursor_config": [
          "logger.error",
          "config_path.exists",
          "json.load",
          "open"
        ],
        "_load_personal_bridge": [
          "logger.error",
          "bridge_path.exists",
          "open",
          "json.load"
        ],
        "_analyze_query_type": [
          "any",
          "query_analysis.get"
        ],
        "_apply_privacy_filter": [
          "context_data.items",
          "isinstance",
          "self._filter_sensitive_dict"
        ],
        "_filter_sensitive_dict": [
          "data.items",
          "key.lower",
          "isinstance",
          "self._filter_sensitive_dict",
          "any"
        ],
        "_get_overall_health_emoji": [],
        "_get_context_status_emoji": [
          "len"
        ],
        "_get_ai_integration_emoji": [
          "hasattr"
        ],
        "_get_goal_alignment_status": [
          "self._load_personal_bridge"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "asdict",
        "create_ai_cli_integration",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "get_ai_enhanced_cli_summary",
        "get_auto_update_config",
        "get_context_config",
        "get_context_for_scenario",
        "get_copilot_config",
        "get_directory_structure",
        "get_metrics_summary",
        "get_optimized_context",
        "get_queue_config",
        "initialize_copilot",
        "is_auto_update_enabled",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cache",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "logging",
        "os",
        "pathlib",
        "psutil",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c3490871-5a3c-4287-9be9-b672ecbec65b"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            21,
            25
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            27,
            49
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            51,
            90
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            92,
            108
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            110,
            126
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            128,
            130
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            20,
            130
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                27,
                49
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                51,
                90
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                92,
                108
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                110,
                126
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                128,
                130
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "json.dumps",
          "hashlib.sha256",
          "logging.info",
          "Path",
          "open",
          "content.encode",
          "str",
          "f.read",
          "json_file.exists",
          "logging.error"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "logging.error",
          "cursor.fetchone",
          "open",
          "json.load"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "1e2ca3e5-87b3-453a-99e7-24bc1ae1ca7b"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
          "line_range": [
            20,
            71
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            74,
            114
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "item.get",
          "prompt.lower",
          "struct.get",
          "module.get",
          "str",
          "isinstance",
          "any",
          "filter_json"
        ],
        "attach_to_llm_request": [
          "prompt.lower",
          "context_file.exists",
          "cache.get_full_json",
          "select_json",
          "json.dumps",
          "logging.info",
          "cache.get_metadata",
          "Path",
          "cache.cache_json",
          "filter_struct",
          "logging.error",
          "filter_json"
        ]
      },
      "dependencies": [
        "Any",
        "JSONCache",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "1046ebef-7a65-4ae4-94cf-9a6d8de13bbf"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            20,
            46
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            49,
            116
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "item.get",
          "filtered.append",
          "isinstance",
          "data.get"
        ],
        "select_json": [
          "prefix.startswith",
          "json.load",
          "Path",
          "open",
          "current_item.get",
          "f.seek",
          "ijson.parse",
          "filtered.append",
          "json_file.exists",
          "logging.error",
          "filter_json",
          "path.append"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "75276f1b-f2fa-4d94-be27-d47e933d82c7"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            43,
            57
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            60,
            69
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            72,
            81
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": [
            84,
            104
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            107,
            114
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            117,
            127
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            130,
            144
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            147,
            503
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": [
            506,
            705
          ],
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            708,
            759
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            762,
            818
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            821,
            823
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            826,
            828
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            831,
            833
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            836,
            954
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "audit",
          "docstring": "Handle audit command for recovering lost ideas/tasks.",
          "line_range": [
            957,
            980
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            983,
            1198
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.startswith",
          "Path",
          "line.strip",
          "gitignore_path.exists",
          "logging.error",
          "gitignore_path.open"
        ],
        "load_config": [
          "logging.error",
          "Path",
          "config_path.exists",
          "config_path.open",
          "toml.load"
        ],
        "read_file_content": [
          "path.open",
          "Path",
          "f.read",
          "path.is_file",
          "logging.error"
        ],
        "write_to_file": [
          "re.sub",
          "file_path.open",
          "logging.info",
          "logging.warning",
          "Path",
          "str",
          "base_path.mkdir",
          "logging.error",
          "file_path.exists",
          "f.write"
        ],
        "parse_files_from_response": [
          "re.findall",
          "content.strip",
          "files.append",
          "filename.strip"
        ],
        "interactive": [
          "interactive_modular",
          "interactive_legacy",
          "logging.warning"
        ],
        "interactive_modular": [
          "logging.info",
          "cli_core.run_interactive_mode",
          "hasattr",
          "create_cli_core"
        ],
        "interactive_legacy": [
          "cache.close",
          "json.dump",
          "read_file_content",
          "process_cli_queue_enhanced",
          "events_data.append",
          "attach_to_llm_request",
          "os.makedirs",
          "int",
          "user_input.lower",
          "cache.get_stats",
          "cache.list_keys",
          "JSONCache",
          "input",
          "struct_data.get",
          "get_folder_structure",
          "json.load",
          "print",
          "args_str.strip",
          "logging.warning",
          "user_input.startswith",
          "workflow.get",
          "time.time",
          "m.group",
          "client.query",
          "logging.error",
          "subprocess.run",
          "time.ctime",
          "write_to_file",
          "open",
          "isinstance",
          "os.listdir",
          "len",
          "parse",
          "sorted",
          "re.match",
          "LLMClient",
          "Path",
          "json.dumps",
          "load_gitignore",
          "cache.clear",
          "os.stat"
        ],
        "process_cli_queue_enhanced": [
          "item.get",
          "get_folder_structure",
          "read_file_content",
          "json.load",
          "print",
          "logging.info",
          "workflow.get",
          "enumerate",
          "write_to_file",
          "open",
          "isinstance",
          "attach_to_llm_request",
          "time.time",
          "len",
          "client.query",
          "logging.error",
          "load_gitignore",
          "options.get"
        ],
        "parse": [
          "cache.close",
          "json.dump",
          "config.get",
          "logging.info",
          "logging.warning",
          "generate_json",
          "load_config",
          "Path",
          "cache.cache_json",
          "JSONCache",
          "logging.error",
          "load_gitignore",
          "parsing_config.get",
          "cli_config.get"
        ],
        "query": [
          "json.dump",
          "LLMClient",
          "logging.info",
          "logging.warning",
          "Path",
          "client.query_with_context",
          "orchestrator.get_context_for_scenario",
          "create_context_orchestrator",
          "client.query",
          "hasattr",
          "logging.error",
          "cache.close",
          "JSONCache"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "copilot": [
          "manager.close",
          "shutil.copy",
          "config_path.exists",
          "manager.get_context_status",
          "manager.load_context_layer",
          "manager.refresh_all_contexts",
          "print",
          "manager.validate_change",
          "manager.unload_context_layer",
          "logging.error",
          "getattr",
          "logging.info",
          "open",
          "manager.export_context",
          "hasattr",
          "initialize_copilot",
          "f.write",
          "enumerate",
          "template_path.exists",
          "Path",
          "smart_suggest",
          "layers.split"
        ],
        "audit": [
          "CLIConfig",
          "os.getcwd",
          "CommandProcessor",
          "processor.cmd_audit",
          "logging.error",
          "CLIUtils"
        ],
        "main": [
          "parser.add_subparsers",
          "interactive",
          "interactive_parser.add_argument",
          "query",
          "asyncio.run",
          "dogfood_parser.add_argument",
          "audit",
          "argparse.ArgumentParser",
          "subparsers.add_parser",
          "parse_parser.add_argument",
          "query_parser.add_argument",
          "audit_parser.add_argument",
          "parse",
          "context",
          "parser.parse_args",
          "copilot_parser.add_argument",
          "context_parser.add_argument",
          "review_parser.add_argument",
          "dogfood",
          "copilot",
          "review"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "cli_commands",
        "cli_config",
        "cli_core",
        "cli_utils",
        "context_orchestrator",
        "copilot",
        "create_cli_core",
        "create_context_orchestrator",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "shutil",
        "smart_suggest",
        "subprocess",
        "sys",
        "time",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "99784dc5-e8f2-43a4-a925-9b7a13779cf5"
    },
    {
      "module_id": "src.llmstruct.cursor_integration",
      "path": "src/llmstruct/cursor_integration.py",
      "category": "core",
      "module_doc": "Cursor IDE Integration Module\nProvides seamless integration between llmstruct AI capabilities and Cursor IDE.",
      "functions": [
        {
          "name": "create_cursor_integration",
          "docstring": "Create a Cursor integration manager for the project.",
          "line_range": [
            435,
            437
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            31,
            35
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_optimized_context",
          "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
          "line_range": [
            37,
            71
          ],
          "parameters": [
            "self",
            "query_type",
            "file_context"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": [
            73,
            83
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": [
            85,
            101
          ],
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": [
            103,
            115
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            121,
            124
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "delegate_to_optimal_ai",
          "docstring": "Route tasks to best AI model based on preferences.",
          "line_range": [
            126,
            160
          ],
          "parameters": [
            "self",
            "task_type",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_delegation_confidence",
          "docstring": "Calculate confidence in AI delegation decision.",
          "line_range": [
            162,
            175
          ],
          "parameters": [
            "self",
            "task_type",
            "selected_ai"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor configuration.",
          "line_range": [
            177,
            187
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            193,
            195
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals.",
          "line_range": [
            197,
            242
          ],
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "get_priority_guidance",
          "docstring": "Provide priority guidance based on business objectives.",
          "line_range": [
            244,
            270
          ],
          "parameters": [
            "self",
            "feature_options"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_feature_score",
          "docstring": "Calculate priority score for a feature.",
          "line_range": [
            272,
            292
          ],
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_get_scoring_reasoning",
          "docstring": "Get reasoning for feature scoring.",
          "line_range": [
            294,
            307
          ],
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": [
            309,
            319
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            325,
            328
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "Start a new Cursor session.",
          "line_range": [
            330,
            349
          ],
          "parameters": [
            "self",
            "session_id",
            "user_preferences"
          ],
          "decorators": []
        },
        {
          "name": "save_session_context",
          "docstring": "Save important context for next session.",
          "line_range": [
            351,
            377
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load context from previous sessions.",
          "line_range": [
            379,
            388
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            394,
            400
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_cursor_response",
          "docstring": "Get comprehensive response optimized for Cursor.",
          "line_range": [
            402,
            431
          ],
          "parameters": [
            "self",
            "query",
            "file_context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorSession",
          "docstring": "Represents a Cursor IDE session with context and preferences.",
          "line_range": [
            19,
            25
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CursorContextManager",
          "docstring": "Manages context optimization specifically for Cursor interactions.",
          "line_range": [
            28,
            115
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_cursor_optimized_context",
              "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
              "line_range": [
                37,
                71
              ],
              "parameters": [
                "self",
                "query_type",
                "file_context"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": [
                73,
                83
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": [
                85,
                101
              ],
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": [
                103,
                115
              ],
              "parameters": [
                "self",
                "data"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorMultiAIOrchestrator",
          "docstring": "Coordinates different AI models through Cursor interface.",
          "line_range": [
            118,
            187
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                121,
                124
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "delegate_to_optimal_ai",
              "docstring": "Route tasks to best AI model based on preferences.",
              "line_range": [
                126,
                160
              ],
              "parameters": [
                "self",
                "task_type",
                "context"
              ]
            },
            {
              "name": "_calculate_delegation_confidence",
              "docstring": "Calculate confidence in AI delegation decision.",
              "line_range": [
                162,
                175
              ],
              "parameters": [
                "self",
                "task_type",
                "selected_ai"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor configuration.",
              "line_range": [
                177,
                187
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "PersonalPlanningCursorBridge",
          "docstring": "Bridge between personal planning and Cursor without exposing sensitive data.",
          "line_range": [
            190,
            319
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                193,
                195
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals.",
              "line_range": [
                197,
                242
              ],
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "get_priority_guidance",
              "docstring": "Provide priority guidance based on business objectives.",
              "line_range": [
                244,
                270
              ],
              "parameters": [
                "self",
                "feature_options"
              ]
            },
            {
              "name": "_calculate_feature_score",
              "docstring": "Calculate priority score for a feature.",
              "line_range": [
                272,
                292
              ],
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_get_scoring_reasoning",
              "docstring": "Get reasoning for feature scoring.",
              "line_range": [
                294,
                307
              ],
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": [
                309,
                319
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorSessionManager",
          "docstring": "Maintains context across Cursor sessions for better continuity.",
          "line_range": [
            322,
            388
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                325,
                328
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "start_session",
              "docstring": "Start a new Cursor session.",
              "line_range": [
                330,
                349
              ],
              "parameters": [
                "self",
                "session_id",
                "user_preferences"
              ]
            },
            {
              "name": "save_session_context",
              "docstring": "Save important context for next session.",
              "line_range": [
                351,
                377
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load context from previous sessions.",
              "line_range": [
                379,
                388
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorIntegrationManager",
          "docstring": "Main integration manager that coordinates all Cursor-specific features.",
          "line_range": [
            391,
            431
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                394,
                400
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_comprehensive_cursor_response",
              "docstring": "Get comprehensive response optimized for Cursor.",
              "line_range": [
                402,
                431
              ],
              "parameters": [
                "self",
                "query",
                "file_context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "SystemCapabilityDiscovery",
          "CursorSessionManager",
          "CursorMultiAIOrchestrator",
          "CursorContextManager",
          "PersonalPlanningCursorBridge"
        ],
        "get_cursor_optimized_context": [
          "json.load",
          "context_rules.get",
          "open",
          "str",
          "logger.error",
          "self._apply_privacy_filter",
          "file_path.exists",
          "optimal_config.get"
        ],
        "_load_cursor_config": [
          "json.load",
          "Path",
          "open",
          "logger.error",
          "config_path.exists"
        ],
        "_apply_privacy_filter": [
          "context_data.items",
          "isinstance",
          "self._filter_sensitive_dict"
        ],
        "_filter_sensitive_dict": [
          "data.items",
          "key.lower",
          "isinstance",
          "self._filter_sensitive_dict",
          "any"
        ],
        "delegate_to_optimal_ai": [
          "Path",
          "str",
          "delegation_rules.get",
          "self._calculate_delegation_confidence",
          "logger.error"
        ],
        "_calculate_delegation_confidence": [
          "delegation_rules.get"
        ],
        "get_goal_aligned_suggestions": [
          "any",
          "technical_context.lower",
          "suggestions.extend",
          "logger.error"
        ],
        "get_priority_guidance": [
          "self._calculate_feature_score",
          "scored_features.sort",
          "decision_guidance.get",
          "str",
          "logger.error",
          "self._get_scoring_reasoning",
          "scored_features.append"
        ],
        "_calculate_feature_score": [
          "any",
          "feature.lower",
          "float",
          "prioritization.get"
        ],
        "_get_scoring_reasoning": [
          "any",
          "feature.lower",
          "reasons.append"
        ],
        "_load_personal_bridge": [
          "logger.error",
          "bridge_path.exists",
          "open",
          "json.load"
        ],
        "start_session": [
          "logger.error",
          "self._load_session_context",
          "previous_context.get",
          "CursorSession"
        ],
        "save_session_context": [
          "json.dump",
          "Path",
          "open",
          "str",
          "logger.error",
          "session_data.get"
        ],
        "_load_session_context": [
          "logger.error",
          "open",
          "json.load"
        ],
        "get_comprehensive_cursor_response": [
          "logger.error",
          "str"
        ],
        "create_cursor_integration": [
          "CursorIntegrationManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.context_orchestrator",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f03054fc-0fa8-4c6f-9653-484a302fbfa9"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "module_doc": "Core CLI functionality and main loop.",
      "functions": [
        {
          "name": "create_cli_core",
          "docstring": "Factory function to create CLI core instance.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI core with root directory.",
          "line_range": [
            28,
            35
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_cache",
          "docstring": "Initialize cache if enabled in config.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_copilot",
          "docstring": "Initialize Copilot integration if enabled.",
          "line_range": [
            55,
            63
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive_mode",
          "docstring": "Run the interactive CLI mode.",
          "line_range": [
            65,
            97
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "Clean up resources.",
          "line_range": [
            99,
            107
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLICore",
          "docstring": "Core CLI class handling main loop and coordination.",
          "line_range": [
            25,
            107
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI core with root directory.",
              "line_range": [
                28,
                35
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "setup_cache",
              "docstring": "Initialize cache if enabled in config.",
              "line_range": [
                37,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_copilot",
              "docstring": "Initialize Copilot integration if enabled.",
              "line_range": [
                55,
                63
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_interactive_mode",
              "docstring": "Run the interactive CLI mode.",
              "line_range": [
                65,
                97
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources.",
              "line_range": [
                99,
                107
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CLIConfig",
          "CLIUtils",
          "CommandProcessor"
        ],
        "setup_cache": [
          "logging.info",
          "logging.warning",
          "Path",
          "str",
          "cache_config.get",
          "cache_path.mkdir",
          "JSONCache"
        ],
        "setup_copilot": [
          "initialize_copilot",
          "logging.warning",
          "logging.info",
          "copilot_config.get"
        ],
        "run_interactive_mode": [
          "self.setup_copilot",
          "print",
          "user_input.startswith",
          "self.setup_cache",
          "self.cleanup",
          "user_input.lower",
          "logging.error",
          "input"
        ],
        "cleanup": [
          "logging.info"
        ],
        "create_cli_core": [
          "CLICore"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "JSONCache",
        "Optional",
        "Path",
        "cli_commands",
        "cli_config",
        "cli_utils",
        "copilot",
        "initialize_copilot",
        "llmstruct.cache",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "7ee625d3-051f-4f62-aa15-d0411cf48a4d"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "module_doc": "Workspace State & Mode Management System\nEnhanced AI-Human Collaboration with Context Boundaries",
      "functions": [
        {
          "name": "create_workspace_manager",
          "docstring": "Factory function to create workspace manager",
          "line_range": [
            461,
            463
          ],
          "parameters": [
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_or_create_state",
          "docstring": "Load existing workspace state or create default",
          "line_range": [
            38,
            75
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_permission_templates",
          "docstring": "Load permission templates for different modes",
          "line_range": [
            77,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "set_mode",
          "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
          "line_range": [
            130,
            176
          ],
          "parameters": [
            "self",
            "modes",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_parse_modes_from_string",
          "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
          "line_range": [
            178,
            182
          ],
          "parameters": [
            "self",
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "_combine_mode_permissions",
          "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
          "line_range": [
            184,
            216
          ],
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "_get_mode_combination_name",
          "docstring": "Get descriptive name for mode combination",
          "line_range": [
            218,
            232
          ],
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "get_current_state",
          "docstring": "Get current workspace state",
          "line_range": [
            234,
            236
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "check_permission",
          "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
          "line_range": [
            238,
            302
          ],
          "parameters": [
            "self",
            "operation",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "_get_required_capability",
          "docstring": "Map operations to required capabilities",
          "line_range": [
            304,
            320
          ],
          "parameters": [
            "self",
            "operation"
          ],
          "decorators": []
        },
        {
          "name": "_is_restricted_target",
          "docstring": "Check if target matches any file restrictions",
          "line_range": [
            322,
            334
          ],
          "parameters": [
            "self",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "set_emergency_override",
          "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
          "line_range": [
            336,
            365
          ],
          "parameters": [
            "self",
            "level",
            "reason",
            "duration_minutes"
          ],
          "decorators": []
        },
        {
          "name": "_check_emergency_override",
          "docstring": "Check if emergency override is active and not expired",
          "line_range": [
            367,
            381
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_strict_mode",
          "docstring": "Integration with existing strict mode system",
          "line_range": [
            383,
            387
          ],
          "parameters": [
            "self",
            "strict_tags"
          ],
          "decorators": []
        },
        {
          "name": "add_decision_workflow",
          "docstring": "Add decision to workflow tracking (for [decide] mode)",
          "line_range": [
            389,
            396
          ],
          "parameters": [
            "self",
            "decision_id",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "get_workspace_status",
          "docstring": "Get comprehensive workspace status for debugging and display",
          "line_range": [
            398,
            420
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_override_time_remaining",
          "docstring": "Get formatted time remaining for emergency override",
          "line_range": [
            422,
            437
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_state",
          "docstring": "Save current state to file",
          "line_range": [
            439,
            442
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_mode_status",
          "docstring": "Get formatted status string for CLI display",
          "line_range": [
            444,
            458
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WorkspaceStateManager",
          "docstring": "Core workspace state management with mode-based permissions and context boundaries.\n\nFeatures:\n- Multi-dimensional mode system ([code][debug], [discuss][meta])\n- Hybrid permission system (capabilities + file restrictions)\n- Smart mode combinations with context awareness\n- Emergency override protocols with time-boxing\n- Integration with existing strict mode system",
          "line_range": [
            16,
            458
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "workspace_dir"
              ]
            },
            {
              "name": "_load_or_create_state",
              "docstring": "Load existing workspace state or create default",
              "line_range": [
                38,
                75
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_permission_templates",
              "docstring": "Load permission templates for different modes",
              "line_range": [
                77,
                128
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "set_mode",
              "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
              "line_range": [
                130,
                176
              ],
              "parameters": [
                "self",
                "modes",
                "session_id"
              ]
            },
            {
              "name": "_parse_modes_from_string",
              "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
              "line_range": [
                178,
                182
              ],
              "parameters": [
                "self",
                "mode_string"
              ]
            },
            {
              "name": "_combine_mode_permissions",
              "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
              "line_range": [
                184,
                216
              ],
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "_get_mode_combination_name",
              "docstring": "Get descriptive name for mode combination",
              "line_range": [
                218,
                232
              ],
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "get_current_state",
              "docstring": "Get current workspace state",
              "line_range": [
                234,
                236
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "check_permission",
              "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
              "line_range": [
                238,
                302
              ],
              "parameters": [
                "self",
                "operation",
                "target"
              ]
            },
            {
              "name": "_get_required_capability",
              "docstring": "Map operations to required capabilities",
              "line_range": [
                304,
                320
              ],
              "parameters": [
                "self",
                "operation"
              ]
            },
            {
              "name": "_is_restricted_target",
              "docstring": "Check if target matches any file restrictions",
              "line_range": [
                322,
                334
              ],
              "parameters": [
                "self",
                "target"
              ]
            },
            {
              "name": "set_emergency_override",
              "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
              "line_range": [
                336,
                365
              ],
              "parameters": [
                "self",
                "level",
                "reason",
                "duration_minutes"
              ]
            },
            {
              "name": "_check_emergency_override",
              "docstring": "Check if emergency override is active and not expired",
              "line_range": [
                367,
                381
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_strict_mode",
              "docstring": "Integration with existing strict mode system",
              "line_range": [
                383,
                387
              ],
              "parameters": [
                "self",
                "strict_tags"
              ]
            },
            {
              "name": "add_decision_workflow",
              "docstring": "Add decision to workflow tracking (for [decide] mode)",
              "line_range": [
                389,
                396
              ],
              "parameters": [
                "self",
                "decision_id",
                "decision_data"
              ]
            },
            {
              "name": "get_workspace_status",
              "docstring": "Get comprehensive workspace status for debugging and display",
              "line_range": [
                398,
                420
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_override_time_remaining",
              "docstring": "Get formatted time remaining for emergency override",
              "line_range": [
                422,
                437
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_state",
              "docstring": "Save current state to file",
              "line_range": [
                439,
                442
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_mode_status",
              "docstring": "Get formatted status string for CLI display",
              "line_range": [
                444,
                458
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_or_create_state",
          "Path",
          "self._load_permission_templates"
        ],
        "_load_or_create_state": [
          "datetime.now",
          "open",
          "json.load",
          "self._save_state"
        ],
        "_load_permission_templates": [],
        "set_mode": [
          "combined_permissions.get",
          "self._combine_mode_permissions",
          "isinstance",
          "datetime.now",
          "self._save_state",
          "len",
          "self._get_mode_combination_name",
          "self._parse_modes_from_string"
        ],
        "_parse_modes_from_string": [
          "re.findall"
        ],
        "_combine_mode_permissions": [
          "template.get",
          "set",
          "logger.info",
          "list",
          "sorted"
        ],
        "_get_mode_combination_name": [
          "combination_names.get",
          "sorted"
        ],
        "get_current_state": [],
        "check_permission": [
          "permissions.get",
          "self._get_required_capability",
          "self._check_emergency_override",
          "self._is_restricted_target"
        ],
        "_get_required_capability": [
          "capability_map.items",
          "operation.startswith"
        ],
        "_is_restricted_target": [
          "fnmatch.fnmatch",
          "restriction.startswith",
          "target.startswith"
        ],
        "set_emergency_override": [
          "datetime.now",
          "self._save_state",
          "expires_at.isoformat",
          "timedelta"
        ],
        "_check_emergency_override": [
          "datetime.now",
          "override.get",
          "datetime.fromisoformat",
          "self._save_state"
        ],
        "integrate_strict_mode": [
          "datetime.now",
          "self._save_state"
        ],
        "add_decision_workflow": [
          "datetime.now",
          "self._save_state"
        ],
        "get_workspace_status": [
          "self._get_override_time_remaining",
          "self._get_mode_combination_name",
          "len",
          "override.get"
        ],
        "_get_override_time_remaining": [
          "datetime.fromisoformat",
          "override.get",
          "datetime.now",
          "int",
          "remaining.total_seconds"
        ],
        "_save_state": [
          "json.dump",
          "open"
        ],
        "get_mode_status": [
          "self._get_mode_combination_name",
          "override.get"
        ],
        "create_workspace_manager": [
          "WorkspaceStateManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "Union",
        "datetime",
        "fnmatch",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "timedelta",
        "timezone",
        "typing"
      ],
      "hash": null,
      "artifact_id": "e2a686cb-f9b4-41b4-8886-c3dac67eafb0"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "javascript_parser"
      ],
      "hash": null,
      "artifact_id": "373529b0-fe08-4685-aa64-79e2683fb90d"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            9,
            13
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": [
            15,
            20
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": [
            22,
            41
          ],
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": [
            43,
            124
          ],
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": [
            8,
            124
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                9,
                13
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": [
                15,
                20
              ],
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": [
                22,
                41
              ],
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": [
                43,
                124
              ],
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "f.read",
          "open",
          "hashlib.sha256"
        ],
        "compute_file_metadata": [
          "self.file_hash",
          "sum",
          "open",
          "os.stat"
        ],
        "parse_module": [
          "self.compute_file_metadata",
          "open",
          "str",
          "f.read",
          "esprima.parseModule"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "0e0ffb68-0a77-4ebd-9cab-7edd995edbd3"
    },
    {
      "module_id": "src.llmstruct.parsers.go_analyzer",
      "path": "src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "module_doc": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b: go/packages, go/analysis",
      "functions": [
        {
          "name": "convert_to_llmstruct_format",
          "docstring": "\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 llmstruct",
          "line_range": [
            203,
            337
          ],
          "parameters": [
            "analysis",
            "include_ranges",
            "goals"
          ],
          "decorators": []
        },
        {
          "name": "_compute_file_hash",
          "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 SHA-256 \u0445\u044d\u0448 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            339,
            345
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            347,
            402
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_setup_analyzer",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
          "line_range": [
            28,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cleanup",
          "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
          "line_range": [
            68,
            72
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_project",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            74,
            125
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_fallback_analysis",
          "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            127,
            201
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GoAnalyzer",
          "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 Go \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432",
          "line_range": [
            21,
            201
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_setup_analyzer",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
              "line_range": [
                28,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cleanup",
              "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
              "line_range": [
                68,
                72
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_project",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
              "line_range": [
                74,
                125
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_fallback_analysis",
              "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                127,
                201
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "_setup_analyzer": [
          "analyzer_file.write_text",
          "subprocess.run",
          "logging.warning",
          "Path",
          "str",
          "analyzer_source.read_text",
          "tempfile.mkdtemp"
        ],
        "_cleanup": [
          "Path",
          "shutil.rmtree"
        ],
        "analyze_project": [
          "subprocess.run",
          "self._setup_analyzer",
          "self._fallback_analysis",
          "logging.info",
          "logging.warning",
          "self._cleanup",
          "logging.error",
          "json.loads"
        ],
        "_fallback_analysis": [
          "packages.add",
          "content.split",
          "logging.info",
          "set",
          "line.split",
          "Path",
          "line.strip",
          "line.startswith",
          "str",
          "logging.warning",
          "sorted",
          "go_mod_path.read_text",
          "len",
          "file_path.relative_to",
          "go_mod_path.exists",
          "list",
          "file_path.read_text"
        ],
        "convert_to_llmstruct_format": [
          "sum",
          "iface.get",
          "_compute_file_hash",
          "functions.append",
          "struct.get",
          "path.endswith",
          "module.get",
          "fn.get",
          "str",
          "toc.append",
          "classes.append",
          "uuid.uuid4",
          "len",
          "analysis.get",
          "file_data.get",
          "modules.append",
          "path.replace"
        ],
        "_compute_file_hash": [
          "f.read",
          "open",
          "hashlib.sha256"
        ],
        "main": [
          "traceback.print_exc",
          "parser.parse_args",
          "analyzer.analyze_project",
          "print",
          "argparse.ArgumentParser",
          "parser.add_argument",
          "sys.exit",
          "convert_to_llmstruct_format",
          "Path",
          "open",
          "result.get",
          "stats.get",
          "len",
          "json.dumps",
          "GoAnalyzer",
          "f.write"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "subprocess",
        "sys",
        "tempfile",
        "traceback",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "73019a77-707a-46f2-80e8-80386a684d3d"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": [
            13,
            20
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content.",
          "line_range": [
            72,
            79
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data.",
          "line_range": [
            82,
            154
          ],
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            26,
            29
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": [
            31,
            35
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": [
            37,
            43
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": [
            45,
            50
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": [
            52,
            57
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": [
            59,
            69
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": [
            23,
            69
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                29
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": [
                37,
                43
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": [
                45,
                50
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": [
                52,
                57
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": [
                59,
                69
              ],
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_AsyncFunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_Call": [
          "self.generic_visit",
          "isinstance"
        ],
        "compute_file_hash": [
          "logging.error",
          "f.read",
          "open",
          "hashlib.sha256"
        ],
        "analyze_module": [
          "functions.append",
          "infer_category",
          "Path",
          "open",
          "CallVisitor",
          "str",
          "ast.walk",
          "isinstance",
          "classes.append",
          "f.read",
          "visitor.visit",
          "sorted",
          "ast.unparse",
          "ast.parse",
          "compute_file_hash",
          "logging.error",
          "list",
          "ast.get_docstring"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "675fd92c-0257-4c99-a9fe-92e998f02b85"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "35306b6f-2044-4388-8bb8-1b295a8d7471"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "13e7e02e-aa8a-43cd-b250-5d0acd351b14"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": [
            12,
            40
          ],
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": [
            43,
            61
          ],
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "json.load",
          "validate",
          "logging.info",
          "Path",
          "open",
          "str",
          "schema_file.exists",
          "logging.error",
          "json_file.exists"
        ],
        "validate_directory": [
          "validate_struct_json",
          "Path",
          "str",
          "any",
          "json_file.match"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "d960c845-e7f0-44b6-8e5f-b31428109430"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            15,
            88
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering.",
          "line_range": [
            91,
            148
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.",
          "line_range": [
            151,
            218
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "os.walk",
          "file_path.match",
          "set",
          "p.rstrip",
          "Path",
          "str",
          "p.endswith",
          "structure.append",
          "uuid.uuid4",
          "any",
          "file_path.relative_to",
          "sorted"
        ],
        "build_toc_and_modules": [
          "modules.append",
          "f.match",
          "set",
          "p.rstrip",
          "Path",
          "str",
          "p.endswith",
          "toc.append",
          "uuid.uuid4",
          "len",
          "any",
          "analyze_module"
        ],
        "generate_json": [
          "get_folder_structure",
          "list",
          "set",
          "Path",
          "str",
          "uuid.uuid4",
          "len",
          "build_toc_and_modules",
          "sum"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "a8207ea1-b11d-48d3-bbd5-810674bde871"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "f77297df-b6bf-4dce-99d5-ee5ebb7f2785"
    },
    {
      "module_id": "src.llmstruct.generators.go_json_generator",
      "path": "src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_go_folder_structure",
          "docstring": "Capture directory and file structure for Go projects with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            15,
            85
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_go_toc_and_modules",
          "docstring": "Build TOC and modules for Go projects with artifact_id and robust filtering.",
          "line_range": [
            88,
            143
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "extract_go_mod_info",
          "docstring": "Extract information from go.mod file.",
          "line_range": [
            146,
            182
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "generate_go_json",
          "docstring": "Generate JSON structure for Go project with artifact_id, summary, and tags.",
          "line_range": [
            185,
            259
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_go_folder_structure": [
          "os.walk",
          "file_path.match",
          "set",
          "p.rstrip",
          "Path",
          "str",
          "p.endswith",
          "structure.append",
          "uuid.uuid4",
          "any",
          "file_path.relative_to",
          "sorted"
        ],
        "build_go_toc_and_modules": [
          "modules.append",
          "f.match",
          "module.get",
          "set",
          "p.rstrip",
          "Path",
          "str",
          "p.endswith",
          "toc.append",
          "uuid.uuid4",
          "len",
          "any",
          "analyze_module"
        ],
        "extract_go_mod_info": [
          "content.strip",
          "dependencies.append",
          "line.split",
          "Path",
          "open",
          "line.strip",
          "line.startswith",
          "f.read",
          "len",
          "logging.error",
          "go_mod_path.exists"
        ],
        "generate_go_json": [
          "list",
          "extract_go_mod_info",
          "m.get",
          "set",
          "Path",
          "build_go_toc_and_modules",
          "str",
          "uuid.uuid4",
          "len",
          "go_mod_info.get",
          "sum",
          "get_go_folder_structure"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.go_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "418bb625-0026-442c-a983-27bd4d9b8894"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "277ddf96-d0a3-49be-919b-72f5a2afd5aa"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": [
            13,
            29
          ],
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": [
            32,
            38
          ],
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": [
            41,
            88
          ],
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            91,
            92
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "fnmatch.fnmatch",
          "pattern.startswith",
          "filtered.append"
        ],
        "collect_files": [
          "files.append",
          "str",
          "root_dir.rglob",
          "path.relative_to",
          "path.is_file",
          "apply_filters"
        ],
        "generate_struct": [
          "json.dump",
          "output_path.open",
          "json.load",
          "Path",
          "str",
          "logger.info",
          "uuid.uuid4",
          "len",
          "output_path.exists",
          "existing.get",
          "collect_files"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "a423abdb-ec73-49ef-a0a0-3ed86f596aa7"
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "module_doc": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct.\nPart of the comprehensive session management system.",
      "functions": [
        {
          "name": "get_current_branch",
          "docstring": "Get current git branch.",
          "line_range": [
            24,
            31
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "save_json_file",
          "docstring": "Save JSON file with error handling.",
          "line_range": [
            42,
            51
          ],
          "parameters": [
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_current_timestamp",
          "docstring": "Get current timestamp in ISO format.",
          "line_range": [
            53,
            55
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log_event",
          "docstring": "Log an event to worklog.json.",
          "line_range": [
            57,
            88
          ],
          "parameters": [
            "event_message",
            "author"
          ],
          "decorators": []
        },
        {
          "name": "switch_session",
          "docstring": "Switch to a different session or create new one.",
          "line_range": [
            90,
            141
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "list_sessions",
          "docstring": "List all available sessions.",
          "line_range": [
            143,
            166
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_session",
          "docstring": "Show current session details.",
          "line_range": [
            168,
            183
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_worklog",
          "docstring": "Show recent worklog entries.",
          "line_range": [
            185,
            203
          ],
          "parameters": [
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main CLI interface.",
          "line_range": [
            205,
            244
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            16,
            22
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "get_current_branch": [
          "subprocess.run"
        ],
        "load_json_file": [
          "open",
          "print",
          "json.load"
        ],
        "save_json_file": [
          "os.makedirs",
          "json.dump",
          "open",
          "print"
        ],
        "get_current_timestamp": [
          "datetime.now"
        ],
        "log_event": [
          "print",
          "get_current_timestamp",
          "save_json_file",
          "get_current_branch",
          "current_session.get",
          "load_json_file"
        ],
        "switch_session": [
          "log_event",
          "print",
          "get_current_timestamp",
          "save_json_file",
          "get_current_branch",
          "load_json_file"
        ],
        "list_sessions": [
          "current_session.get",
          "print",
          "load_json_file"
        ],
        "show_current_session": [
          "current_session.get",
          "print",
          "load_json_file"
        ],
        "show_worklog": [
          "len",
          "print",
          "load_json_file",
          "reversed"
        ],
        "main": [
          "log_event",
          "print",
          "switch_session",
          "len",
          "int",
          "show_worklog",
          "show_current_session",
          "list_sessions"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "0ee3647e-1a67-4328-bcb0-9afa507953f9"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.",
      "functions": [
        {
          "name": "detect_project_changes",
          "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.",
          "line_range": [
            44,
            81
          ],
          "parameters": [
            "root_dir",
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_struct_json",
          "docstring": "Create a backup of existing struct.json.",
          "line_range": [
            84,
            97
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_struct_json",
          "docstring": "Validate generated struct.json for basic structure.",
          "line_range": [
            100,
            128
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "update_struct_json",
          "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful",
          "line_range": [
            131,
            225
          ],
          "parameters": [
            "root_dir",
            "struct_path",
            "force",
            "config_override"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for auto-update script.",
          "line_range": [
            228,
            286
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "",
          "line_range": [
            24,
            25
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            26,
            27
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_config": [],
        "load_gitignore": [],
        "generate_json": [
          "ImportError"
        ],
        "detect_project_changes": [
          "subprocess.run",
          "file_path.stat",
          "Path",
          "logger.info",
          "logger.warning"
        ],
        "backup_struct_json": [
          "subprocess.run",
          "Path",
          "logger.info",
          "datetime.now",
          "logger.error"
        ],
        "validate_struct_json": [
          "logger.error",
          "open",
          "json.load",
          "logger.info"
        ],
        "update_struct_json": [
          "subprocess.run",
          "json.dump",
          "validate_struct_json",
          "os.getcwd",
          "backup_struct_json",
          "generate_json",
          "load_config",
          "config.update",
          "open",
          "logger.info",
          "logger.error",
          "load_gitignore",
          "detect_project_changes",
          "config.get",
          "cli_config.get"
        ],
        "main": [
          "parser.parse_args",
          "os.getcwd",
          "print",
          "argparse.ArgumentParser",
          "parser.add_argument",
          "sys.exit",
          "update_struct_json",
          "logging.getLogger",
          "detect_project_changes"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "generate_json",
        "json",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9f012b89-9b45-4071-a0cb-af941097a7ff"
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "d67ef6bb-5c2f-4f6b-a1db-481596255eee"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            183,
            266
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            23,
            26
          ],
          "parameters": [
            "self",
            "config_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "check_github_cli",
          "docstring": "Check if GitHub CLI is installed and authenticated",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "list_projects",
          "docstring": "List available GitHub Projects (via gh-projects extension)",
          "line_range": [
            38,
            55
          ],
          "parameters": [
            "self",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "create_project_item",
          "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "project_number",
            "title",
            "body",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_tasks_to_project",
          "docstring": "Export tasks to GitHub Project",
          "line_range": [
            84,
            123
          ],
          "parameters": [
            "self",
            "tasks",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_ideas_to_project",
          "docstring": "Export ideas to GitHub Project",
          "line_range": [
            125,
            164
          ],
          "parameters": [
            "self",
            "ideas",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "filter_data",
          "docstring": "Filter data by status and priority",
          "line_range": [
            166,
            180
          ],
          "parameters": [
            "self",
            "data",
            "status_filter",
            "priority_filter"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExportScript",
          "docstring": "Extended exporter with command-line interface and GitHub CLI integration",
          "line_range": [
            20,
            180
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                23,
                26
              ],
              "parameters": [
                "self",
                "config_path",
                "dry_run"
              ]
            },
            {
              "name": "check_github_cli",
              "docstring": "Check if GitHub CLI is installed and authenticated",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "list_projects",
              "docstring": "List available GitHub Projects (via gh-projects extension)",
              "line_range": [
                38,
                55
              ],
              "parameters": [
                "self",
                "owner",
                "repo"
              ]
            },
            {
              "name": "create_project_item",
              "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "project_number",
                "title",
                "body",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_tasks_to_project",
              "docstring": "Export tasks to GitHub Project",
              "line_range": [
                84,
                123
              ],
              "parameters": [
                "self",
                "tasks",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_ideas_to_project",
              "docstring": "Export ideas to GitHub Project",
              "line_range": [
                125,
                164
              ],
              "parameters": [
                "self",
                "ideas",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "filter_data",
              "docstring": "Filter data by status and priority",
              "line_range": [
                166,
                180
              ],
              "parameters": [
                "self",
                "data",
                "status_filter",
                "priority_filter"
              ]
            }
          ],
          "bases": [
            "GitHubProjectsExporter"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "super"
        ],
        "check_github_cli": [
          "self._run_gh_command",
          "print"
        ],
        "list_projects": [
          "json.loads",
          "self._run_gh_command",
          "print",
          "isinstance"
        ],
        "create_project_item": [
          "output.strip",
          "self._run_gh_command",
          "str",
          "print"
        ],
        "export_tasks_to_project": [
          "print",
          "task.get",
          "len",
          "self.format_task_for_github",
          "self.create_project_item"
        ],
        "export_ideas_to_project": [
          "print",
          "self.format_idea_for_github",
          "len",
          "idea.get",
          "self.create_project_item"
        ],
        "filter_data": [
          "item.get"
        ],
        "main": [
          "exporter.check_github_cli",
          "parser.parse_args",
          "print",
          "argparse.ArgumentParser",
          "parser.add_argument",
          "sys.exit",
          "exporter.export_tasks_to_project",
          "exporter.load_official_data",
          "exporter._save_mapping",
          "exporter.filter_data",
          "exporter.export_ideas_to_project",
          "GitHubProjectsExportScript"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "GitHubProjectsExporter",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "datetime",
        "json",
        "llmstruct.gh_view",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "fbf1daf3-7999-4381-879c-94d9a3ffb60d"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": [
            11,
            43
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            46,
            47
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "json.dump",
          "json.load",
          "target_file.exists",
          "enumerate",
          "Path",
          "source_file.exists",
          "logger.info",
          "logger.error",
          "logger.warning",
          "idea.get",
          "broken_links.append"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "eae7a731-eb61-42b0-a43f-7fe31cc76e6a"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": [
            931,
            941
          ],
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": [
            944,
            950
          ],
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": [
            953,
            1007
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            1010,
            1011
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.error",
          "logger.warning",
          "RefResolver",
          "validate"
        ],
        "backup_files": [
          "datetime.now",
          "shutil.copytree",
          "target_dir.exists",
          "logger.info"
        ],
        "deploy_embedded_files": [
          "json.dump",
          "EMBEDDED_FILES.get",
          "Path",
          "logger.info",
          "Path.cwd",
          "logger.error",
          "validate_json",
          "logger.warning",
          "backup_files",
          "f.write",
          "target_path.open",
          "target_path.exists"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "98d4db2c-e42d-4bc2-89b7-b3ac4c982e4b"
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "module_doc": "JSON Validation Script\nValidates JSON files against their respective schemas.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            13,
            23
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate a JSON file against a schema.",
          "line_range": [
            26,
            49
          ],
          "parameters": [
            "file_path",
            "schema_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "open",
          "print",
          "json.load"
        ],
        "validate_json": [
          "print",
          "Path",
          "str",
          "Draft7Validator",
          "load_json",
          "validator.validate"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "pathlib",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "a7598fe7-efcc-43b9-8bda-b67dfa4ad8a4"
    }
  ]
}