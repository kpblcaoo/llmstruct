{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-05-29T12:57:26.587738Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": {
      "goals": [
        "Create universal JSON format for codebase structure (modules, functions, classes, calls, metadata)",
        "Ensure extensibility for new languages and entity types",
        "Develop modular, plugin-based parsers for new languages",
        "Maintain an open, RFC-style documented format",
        "Integrate with LLMs by generating and attaching JSON structure to queries"
      ]
    },
    "stats": {
      "modules_count": 214,
      "functions_count": 1597,
      "classes_count": 172,
      "call_edges_count": 5194
    },
    "artifact_id": "d20c763c-41d8-4ac6-aa00-2ba5ce28a122",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "88803057-6ba1-44f8-a566-9270c386a549",
        "metadata": {}
      },
      {
        "path": ".github",
        "type": "directory",
        "artifact_id": "03eeec4e-1a16-449e-b1c9-e312a9e6d6c3",
        "metadata": {}
      },
      {
        "path": ".github/ISSUE_TEMPLATE",
        "type": "directory",
        "artifact_id": "8cefca55-de57-4978-970f-74719125d0ef",
        "metadata": {}
      },
      {
        "path": ".github/workflows",
        "type": "directory",
        "artifact_id": "3e6cf358-343f-4ddb-8263-10a8043d1e5a",
        "metadata": {}
      },
      {
        "path": ".llmstruct_cache",
        "type": "directory",
        "artifact_id": "a3b7b636-e794-463f-9778-86eb4346d196",
        "metadata": {}
      },
      {
        "path": ".personal",
        "type": "directory",
        "artifact_id": "dc080613-9f77-40e3-94aa-7df68880cb17",
        "metadata": {}
      },
      {
        "path": "backup_before_separation_20250529_152219",
        "type": "directory",
        "artifact_id": "2cdd54a0-2a6c-47af-919b-1a061e9602a6",
        "metadata": {}
      },
      {
        "path": "bak",
        "type": "directory",
        "artifact_id": "bfeb00ae-03cb-488b-8c20-67e2c1f4ac00",
        "metadata": {}
      },
      {
        "path": "board_cli.py",
        "type": "file",
        "artifact_id": "0998bd16-91e2-448d-8ca2-0099b975125d",
        "metadata": {}
      },
      {
        "path": "collector.py",
        "type": "file",
        "artifact_id": "39ad3b34-8790-4133-a24c-e5524c0a489f",
        "metadata": {}
      },
      {
        "path": "data",
        "type": "directory",
        "artifact_id": "f28e51cf-3860-43bb-bd29-c99d77f43c9d",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness",
        "type": "directory",
        "artifact_id": "171e8c42-4c87-4971-b208-b1c217701a48",
        "metadata": {}
      },
      {
        "path": "data/artifacts",
        "type": "directory",
        "artifact_id": "7e648c52-3c3e-427f-a314-2a751a7400ad",
        "metadata": {}
      },
      {
        "path": "data/copilot",
        "type": "directory",
        "artifact_id": "fafbbd3c-0f8a-4d3d-b6ce-5eb6fc3328e4",
        "metadata": {}
      },
      {
        "path": "data/cursor",
        "type": "directory",
        "artifact_id": "d550cc27-1c91-4e97-973c-78b8b653d314",
        "metadata": {}
      },
      {
        "path": "data/sessions",
        "type": "directory",
        "artifact_id": "22bb5cdf-5447-4222-b631-f2f201c2910b",
        "metadata": {}
      },
      {
        "path": "data/workspace",
        "type": "directory",
        "artifact_id": "96a9319c-10fc-4bc6-af52-ae371af6a6ba",
        "metadata": {}
      },
      {
        "path": "debug_terminal.py",
        "type": "file",
        "artifact_id": "37d671be-c203-40cf-972d-8bfe770f9258",
        "metadata": {}
      },
      {
        "path": "docker",
        "type": "directory",
        "artifact_id": "c93560da-a9ed-4536-bd73-1cdcbaa3f99a",
        "metadata": {}
      },
      {
        "path": "docker/parser_go",
        "type": "directory",
        "artifact_id": "55a66a4b-006f-4a19-aba8-72460d646c27",
        "metadata": {}
      },
      {
        "path": "docs",
        "type": "directory",
        "artifact_id": "8c3b9b38-00a2-4275-b9ba-982d329ec6ed",
        "metadata": {}
      },
      {
        "path": "docs/ai",
        "type": "directory",
        "artifact_id": "678f9075-e33b-4ba5-a43e-79c109315a0f",
        "metadata": {}
      },
      {
        "path": "docs/ai-session-monitor",
        "type": "directory",
        "artifact_id": "699113f7-c776-4fc6-af47-72865269715a",
        "metadata": {}
      },
      {
        "path": "docs/cache.py",
        "type": "file",
        "artifact_id": "a73d4ff5-7845-4eac-940d-e7b7f1412a08",
        "metadata": {}
      },
      {
        "path": "docs/cli.py",
        "type": "file",
        "artifact_id": "b46d88eb-969c-4461-907a-91277ff37be3",
        "metadata": {}
      },
      {
        "path": "docs/examples",
        "type": "directory",
        "artifact_id": "654e5a7e-1968-4f73-b7ae-a2695785ad02",
        "metadata": {}
      },
      {
        "path": "docs/internal",
        "type": "directory",
        "artifact_id": "227f2863-f6c8-453b-a150-d036183e2d8f",
        "metadata": {}
      },
      {
        "path": "docs/internal/notes",
        "type": "directory",
        "artifact_id": "bbcebf60-24bf-4e5b-908e-39ff5de6f653",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru",
        "type": "directory",
        "artifact_id": "69c5d88b-84bb-4289-b640-4efc5a8ea22c",
        "metadata": {}
      },
      {
        "path": "docs/json_selector.py",
        "type": "file",
        "artifact_id": "0bb4e06c-2195-4506-ab5f-bd15fed0aa09",
        "metadata": {}
      },
      {
        "path": "docs/management",
        "type": "directory",
        "artifact_id": "f1f67f1d-831a-4371-b4fb-a1cceae62a3b",
        "metadata": {}
      },
      {
        "path": "docs/ru",
        "type": "directory",
        "artifact_id": "69cc6bcb-530f-474e-a20e-174008e81bd3",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples",
        "type": "directory",
        "artifact_id": "8d49f799-5942-443b-baaf-a9b7d55d3a3b",
        "metadata": {}
      },
      {
        "path": "docs/self_run.py",
        "type": "file",
        "artifact_id": "f87b807a-87d3-4815-8222-399344b0fc84",
        "metadata": {}
      },
      {
        "path": "epics",
        "type": "directory",
        "artifact_id": "6da58314-73eb-445c-bf02-61ace12042b0",
        "metadata": {}
      },
      {
        "path": "examples",
        "type": "directory",
        "artifact_id": "6909507d-ce30-4f5a-a2a8-8f414712baec",
        "metadata": {}
      },
      {
        "path": "examples/python_project_main.py",
        "type": "file",
        "artifact_id": "6cfc54fe-2044-4026-a41c-e39cbeb159f6",
        "metadata": {}
      },
      {
        "path": "examples/python_project_utils.py",
        "type": "file",
        "artifact_id": "6003c14a-786a-476c-9e45-0abcf502a2c3",
        "metadata": {}
      },
      {
        "path": "final_system_check.py",
        "type": "file",
        "artifact_id": "6de2b52d-6b39-404c-a8a0-8d3e80989305",
        "metadata": {}
      },
      {
        "path": "final_system_validation.py",
        "type": "file",
        "artifact_id": "58502cd6-f5aa-45a9-9879-e9d140a0dcd6",
        "metadata": {}
      },
      {
        "path": "force_ai_integration.py",
        "type": "file",
        "artifact_id": "7bcbbec6-690c-45ac-803d-79d25e262e1b",
        "metadata": {}
      },
      {
        "path": "internal",
        "type": "directory",
        "artifact_id": "55b7f260-98f0-4c9d-a29f-9b4d0775b137",
        "metadata": {}
      },
      {
        "path": "monitor_system.py",
        "type": "file",
        "artifact_id": "fe6e334d-f160-43f7-b47c-631474aa2ca2",
        "metadata": {}
      },
      {
        "path": "processing_results",
        "type": "directory",
        "artifact_id": "d51ad1ac-6b11-4d7a-a14c-224e4b0e96b6",
        "metadata": {}
      },
      {
        "path": "run_ai_diagnostics.py",
        "type": "file",
        "artifact_id": "9aa83889-890f-4edb-988d-481c18e4b6d0",
        "metadata": {}
      },
      {
        "path": "schema",
        "type": "directory",
        "artifact_id": "408457e7-b829-4a39-9185-c47013bf7acc",
        "metadata": {}
      },
      {
        "path": "schema/common",
        "type": "directory",
        "artifact_id": "3fd60b62-b454-4e9d-865c-3b4a1a4e1307",
        "metadata": {}
      },
      {
        "path": "schema/plugins",
        "type": "directory",
        "artifact_id": "f29de38b-c06c-49b1-9624-5c1d717a3142",
        "metadata": {}
      },
      {
        "path": "scripts",
        "type": "directory",
        "artifact_id": "62593419-14eb-4f22-9802-33d24d42e3ce",
        "metadata": {}
      },
      {
        "path": "scripts/auto_update_struct.py",
        "type": "file",
        "artifact_id": "8c11ae77-60d4-4beb-9dc0-c30efdbd01e8",
        "metadata": {}
      },
      {
        "path": "scripts/collector.py",
        "type": "file",
        "artifact_id": "941618bd-c847-43c7-afef-3173b2dc161f",
        "metadata": {}
      },
      {
        "path": "scripts/create_comprehensive_index.py",
        "type": "file",
        "artifact_id": "4d3f2489-608e-4999-844b-3b02f5d64035",
        "metadata": {}
      },
      {
        "path": "scripts/create_github_issues.py",
        "type": "file",
        "artifact_id": "f072dfca-3de8-49ff-bd70-abd1d79e5fdb",
        "metadata": {}
      },
      {
        "path": "scripts/create_tasks_index.py",
        "type": "file",
        "artifact_id": "8793cee5-c32f-47a2-8f4c-5ba7662720ca",
        "metadata": {}
      },
      {
        "path": "scripts/deploy_embedded_files.py",
        "type": "file",
        "artifact_id": "e94c9de3-8a7f-432b-9db9-1d0973c1116d",
        "metadata": {}
      },
      {
        "path": "scripts/epic_roadmap_manager.py",
        "type": "file",
        "artifact_id": "d24fb46c-3799-4fc9-94d6-01a9070cbb73",
        "metadata": {}
      },
      {
        "path": "scripts/export_to_github_projects.py",
        "type": "file",
        "artifact_id": "9131283b-ed12-4c2c-b660-b57a3cdd6841",
        "metadata": {}
      },
      {
        "path": "scripts/fix_github_script.py",
        "type": "file",
        "artifact_id": "0dcfc3a1-1931-4cae-9834-6feca09d7d78",
        "metadata": {}
      },
      {
        "path": "scripts/fix_hardcoded_usernames.py",
        "type": "file",
        "artifact_id": "b5277bb3-b30c-4249-8649-7fb4519ca625",
        "metadata": {}
      },
      {
        "path": "scripts/github_sync_manager.py",
        "type": "file",
        "artifact_id": "255a1dcf-55fa-4db5-9a58-703989d78a47",
        "metadata": {}
      },
      {
        "path": "scripts/github_sync_manager_enhanced.py",
        "type": "file",
        "artifact_id": "d9d30a12-0aff-40e1-a48e-3db4d1ae79a2",
        "metadata": {}
      },
      {
        "path": "scripts/old",
        "type": "directory",
        "artifact_id": "d5120151-048f-443b-aa2d-fb2ce42a1f47",
        "metadata": {}
      },
      {
        "path": "scripts/process_926_items.py",
        "type": "file",
        "artifact_id": "094ac3ba-d613-4817-bf6d-23e1e9312ce6",
        "metadata": {}
      },
      {
        "path": "scripts/session_cli.py",
        "type": "file",
        "artifact_id": "c248eca9-462f-4868-b47a-d6c72f58ac57",
        "metadata": {}
      },
      {
        "path": "scripts/team",
        "type": "directory",
        "artifact_id": "6e9ef234-8c5e-4edc-a05f-30b890451410",
        "metadata": {}
      },
      {
        "path": "scripts/team/__init__.py",
        "type": "file",
        "artifact_id": "aff9b55c-5db6-4b99-b538-e7b59ce526e3",
        "metadata": {}
      },
      {
        "path": "scripts/validate_epics.py",
        "type": "file",
        "artifact_id": "3e213e1f-65f6-478e-9c78-ce9363b25aeb",
        "metadata": {}
      },
      {
        "path": "scripts/validate_json.py",
        "type": "file",
        "artifact_id": "e94f1aa0-a093-41e5-bc2a-0fe4dbfa5db5",
        "metadata": {}
      },
      {
        "path": "scripts/validate_refs.py",
        "type": "file",
        "artifact_id": "20a4c910-c7e8-41ff-805d-3c61334f97de",
        "metadata": {}
      },
      {
        "path": "scripts/validate_schemas.py",
        "type": "file",
        "artifact_id": "6e66a7d1-675a-44e4-870b-b6e691bf5609",
        "metadata": {}
      },
      {
        "path": "sorting_workspace",
        "type": "directory",
        "artifact_id": "bf4a28d9-c142-4ad9-a51a-646b0e4bedee",
        "metadata": {}
      },
      {
        "path": "src",
        "type": "directory",
        "artifact_id": "13b77742-2e0e-41ec-8e5f-6ff61e4093cc",
        "metadata": {}
      },
      {
        "path": "src/llmstruct",
        "type": "directory",
        "artifact_id": "e48aebdf-684b-4b1d-b734-15617d0b2a20",
        "metadata": {}
      },
      {
        "path": "src/llmstruct.egg-info",
        "type": "directory",
        "artifact_id": "d7704dda-1d9d-49aa-a2e9-39df715c5ac3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__init__.py",
        "type": "file",
        "artifact_id": "00121cc2-3904-4db0-9490-b9a999f52bf8",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__main__.py",
        "type": "file",
        "artifact_id": "7683ee25-4707-457b-b08d-868a0a156420",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_cli_integration.py",
        "type": "file",
        "artifact_id": "426db8bd-18d9-4a69-9989-34172d9ff123",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_self_awareness.py",
        "type": "file",
        "artifact_id": "b4d45797-8ba4-46e5-8977-514bc74378d5",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_self_monitor.py",
        "type": "file",
        "artifact_id": "68477a16-b14a-455d-af65-0fe1be1f212a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_workflow_middleware.py",
        "type": "file",
        "artifact_id": "0999c641-e9be-4152-8d27-51074b3e3dea",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cache.py",
        "type": "file",
        "artifact_id": "2f87a7a6-62d6-40c5-a42a-969bdd688a6c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli.py",
        "type": "file",
        "artifact_id": "6f051041-6118-4fba-a001-f1da5d07c4a2",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_commands.py",
        "type": "file",
        "artifact_id": "ff5ed555-8bd6-4ec8-94c6-0bba8a45aefe",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_config.py",
        "type": "file",
        "artifact_id": "49ce14d5-f437-4c3d-a7b7-93ff9dd0b2f6",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_core.py",
        "type": "file",
        "artifact_id": "e2bab432-20e6-451b-bea6-dae21736a865",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_utils.py",
        "type": "file",
        "artifact_id": "c6538457-9569-46d9-8dc7-bff80aabf345",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/context_orchestrator.py",
        "type": "file",
        "artifact_id": "ed81b71f-abd7-44cb-832b-dd30ee847edb",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/copilot.py",
        "type": "file",
        "artifact_id": "b24271a1-f7a9-435d-9a0f-2ff499b511da",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cursor_ai_bridge.py",
        "type": "file",
        "artifact_id": "1996e85b-5f6e-4d6c-94a5-640a27670407",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cursor_integration.py",
        "type": "file",
        "artifact_id": "5716e892-8fb5-4e3d-9c08-912ff5fe31a3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators",
        "type": "directory",
        "artifact_id": "496cc867-aff0-4dcc-8082-50b123ecf429",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/__init__.py",
        "type": "file",
        "artifact_id": "cb6c5560-f938-4946-9a67-ee3f2b75cedf",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/go_json_generator.py",
        "type": "file",
        "artifact_id": "76e8634c-9108-44a5-825d-cc45e807e720",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/json_generator.py",
        "type": "file",
        "artifact_id": "6b1bbacd-7cd8-4edc-b659-18aa6329ad6a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/gh_view.py",
        "type": "file",
        "artifact_id": "c872e522-baa0-40b6-83d7-2f50fa0b97e3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/grok.py",
        "type": "file",
        "artifact_id": "081211f2-bb37-459e-81fa-500aaa3835ac",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/json_selector.py",
        "type": "file",
        "artifact_id": "7db27a85-0135-4aa5-9175-e570cc38fad2",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/llm_client.py",
        "type": "file",
        "artifact_id": "845ae61b-2e0c-4886-a00c-047f160bde12",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers",
        "type": "directory",
        "artifact_id": "29eb4a4a-3512-4b1b-a9cd-e10a8259c928",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/__init__.py",
        "type": "file",
        "artifact_id": "1c408b96-11b8-462d-b7f7-537b03fa2e68",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/go_analyzer.py",
        "type": "file",
        "artifact_id": "fd7f052d-adb4-47ca-960e-8b81cf6e7335",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/javascript_parser.py",
        "type": "file",
        "artifact_id": "241fae56-944a-4bf3-8f5f-830d231bfcb7",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/python_parser.py",
        "type": "file",
        "artifact_id": "0e172372-f615-4683-9bc4-26cf44145388",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/universal_converter.py",
        "type": "file",
        "artifact_id": "1724cb80-f3d3-4337-a2e7-7c75d889c6ff",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/self_run.py",
        "type": "file",
        "artifact_id": "a93aa3ae-c14e-4d1f-ad7e-d2972bb730db",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates",
        "type": "directory",
        "artifact_id": "0a522926-9915-41aa-ad48-f1b97f910873",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates/__init__.py",
        "type": "file",
        "artifact_id": "9896f00e-5513-4ce3-8942-954f7f85f83c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/transpiler.py",
        "type": "file",
        "artifact_id": "f1edf542-8a4c-4467-a155-a0579021a103",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators",
        "type": "directory",
        "artifact_id": "cf687890-b273-4ae9-8e5e-6a1445e3a09a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/__init__.py",
        "type": "file",
        "artifact_id": "e71ba21b-162a-4ceb-8725-e1dff5e88d07",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/json_validator.py",
        "type": "file",
        "artifact_id": "4c97a343-23ac-4bcc-b482-90d67b3a4969",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/workflow_orchestrator.py",
        "type": "file",
        "artifact_id": "419cd63e-7677-406b-b9e7-8b963a56bc45",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/workspace.py",
        "type": "file",
        "artifact_id": "ac3b230b-3204-4422-a12a-ac0a68d616a2",
        "metadata": {}
      },
      {
        "path": "start_development.py",
        "type": "file",
        "artifact_id": "d982b63a-4793-437f-b8db-4b36faae9deb",
        "metadata": {}
      },
      {
        "path": "temp",
        "type": "directory",
        "artifact_id": "39444a54-58e5-4a76-8829-b96f7cc01ca7",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox",
        "type": "directory",
        "artifact_id": "4cb6dcb7-39f9-49e3-a54d-6a929a9315d0",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/docs",
        "type": "directory",
        "artifact_id": "d234bd36-40bd-4b78-8448-4be3d8e61876",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/install_wizard.py",
        "type": "file",
        "artifact_id": "348a4da9-e697-477b-a097-1d147007ad1b",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/logging_setup.py",
        "type": "file",
        "artifact_id": "75f5d50e-b8b1-49a0-b00f-df9f4ae82f81",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/modules",
        "type": "directory",
        "artifact_id": "dc4652b0-ff01-4d1c-8e31-7ac23ff8d374",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/modules/__init__.py",
        "type": "file",
        "artifact_id": "a64da057-4fb7-4288-bec2-3c0c03b519d1",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/modules/config_fetch.py",
        "type": "file",
        "artifact_id": "165977a1-04a0-4efe-8d5e-513f9e328e57",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/modules/config_generate.py",
        "type": "file",
        "artifact_id": "58bd2527-877f-4835-bf2b-abcd96951004",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/modules/module_installer.py",
        "type": "file",
        "artifact_id": "7ee4ab34-1905-4297-a7d1-c63f60dfaa9b",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/modules/protocol_validation.py",
        "type": "file",
        "artifact_id": "8e364a99-c38e-4544-8c79-545b7337b416",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/modules/server_management.py",
        "type": "file",
        "artifact_id": "a3754336-f6e6-41cd-b666-a5d2e82502dd",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/modules/service_manage.py",
        "type": "file",
        "artifact_id": "3081f734-ea7c-415d-b7f2-5e1d93741c31",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/modules/utils.py",
        "type": "file",
        "artifact_id": "c16b27a0-0d0a-4c6d-b0cf-344c3b05021c",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/tests",
        "type": "directory",
        "artifact_id": "53ce381e-1172-436a-b6e5-cf8aba3b0129",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/update_singbox.py",
        "type": "file",
        "artifact_id": "360c4531-8b94-4502-907d-6172febadbca",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/utils",
        "type": "directory",
        "artifact_id": "abb54c3a-0359-43cc-a1f4-4efdafb9577d",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/utils/callgraph.py",
        "type": "file",
        "artifact_id": "03cf76c5-e83b-41d5-9b2f-0114f86109ef",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/utils/genstruct.py",
        "type": "file",
        "artifact_id": "c248456d-f4d4-494f-bc28-27ab3107b880",
        "metadata": {}
      },
      {
        "path": "temp_workfiles",
        "type": "directory",
        "artifact_id": "23db1c76-2fbd-450a-aa11-1600588180a1",
        "metadata": {}
      },
      {
        "path": "tests",
        "type": "directory",
        "artifact_id": "02fa4429-6f9d-4d60-9be9-7b36c525fe5f",
        "metadata": {}
      },
      {
        "path": "tests/__init__.py",
        "type": "file",
        "artifact_id": "0a8e1af7-8a78-4236-9811-34e0f67b3b36",
        "metadata": {}
      },
      {
        "path": "tmp",
        "type": "directory",
        "artifact_id": "6379f873-fafa-4810-8022-30824fe3980c",
        "metadata": {}
      },
      {
        "path": "validate_schemas.py",
        "type": "file",
        "artifact_id": "0b484df8-ef64-437b-b37f-e617baf23c49",
        "metadata": {}
      },
      {
        "path": "validate_sessions.py",
        "type": "file",
        "artifact_id": "08ea6923-9fcf-414e-95a3-c092de21eb72",
        "metadata": {}
      },
      {
        "path": "verify_llm_response.py",
        "type": "file",
        "artifact_id": "bc13ccff-fa46-4049-b4bd-c76dbe039074",
        "metadata": {}
      },
      {
        "path": "workflow_archive",
        "type": "directory",
        "artifact_id": "bf1ab732-ff34-4797-913c-062b5c985465",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "start_development",
      "path": "start_development.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "LLMStruct Development Startup Script",
      "artifact_id": "f6f555d6-2b17-4511-a402-e851100896d1"
    },
    {
      "module_id": "run_ai_diagnostics",
      "path": "run_ai_diagnostics.py",
      "category": "core",
      "functions": 19,
      "classes": 0,
      "summary": "Comprehensive AI Self-Awareness Diagnostics Runner",
      "artifact_id": "5e6800ce-7977-4d1c-91da-e2f5d2ab8d2c"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "092982af-c875-4747-9229-c608396dbbc4"
    },
    {
      "module_id": "debug_terminal",
      "path": "debug_terminal.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Debug Terminal Script - Fallback for when terminal output is not visible",
      "artifact_id": "03f4b944-5305-4045-9ed7-4fc1f46e65be"
    },
    {
      "module_id": "final_system_check",
      "path": "final_system_check.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final System Status Check - LLMStruct Modular CLI Integration",
      "artifact_id": "7c0027fb-a833-4643-ba0b-9d495f3c833b"
    },
    {
      "module_id": "monitor_system",
      "path": "monitor_system.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "System Monitor - Continuous logging for debugging terminal issues",
      "artifact_id": "539a87f4-7ab9-43be-9673-931ab1e4dcb7"
    },
    {
      "module_id": "board_cli",
      "path": "board_cli.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "CLI Kanban Board for llmstruct tasks and ideas",
      "artifact_id": "89b97581-73f7-4484-acea-531668e55aea"
    },
    {
      "module_id": "final_system_validation",
      "path": "final_system_validation.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final system validation script for LLMStruct Modular CLI Integration",
      "artifact_id": "d47c429a-569a-486b-adfe-87e913ee7667"
    },
    {
      "module_id": "force_ai_integration",
      "path": "force_ai_integration.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Force AI Integration Script",
      "artifact_id": "083af710-8911-4066-9276-6bbad1c9ca9e"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "JSON Schema Validation Script for llmstruct",
      "artifact_id": "5799dfd0-4550-4382-b7f7-d2357407a06b"
    },
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "Session Schema Validation Script for llmstruct",
      "artifact_id": "cfae0428-c2ea-498d-8a0e-5154cabdf420"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "0138ec8a-2f29-47b2-83f9-06c6c8229d2c"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project.",
      "artifact_id": "2380bd4e-f65d-45ab-baea-e7066fe4153d"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project.",
      "artifact_id": "bc310230-963d-4181-a97a-0ea4aa6c0ab2"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "5dc11b4e-2c72-4121-8b7c-b9544b351358"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "ab7a37b9-04a6-401f-a8c7-98a204dad715"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "3b2397ac-31d9-4bfc-98a3-e4c598bd05a4"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "d4156881-3cc9-4916-9022-ab0f70c99ed5"
    },
    {
      "module_id": "temp.update-singbox.logging_setup",
      "path": "temp/update-singbox/logging_setup.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "70d44c93-d50a-42ad-b16a-7279145885dc"
    },
    {
      "module_id": "temp.update-singbox.install_wizard",
      "path": "temp/update-singbox/install_wizard.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "",
      "artifact_id": "e4ba231e-ce70-4b70-b25b-79c470c15535"
    },
    {
      "module_id": "temp.update-singbox.update_singbox",
      "path": "temp/update-singbox/update_singbox.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "Update sing-box configuration from a remote JSON source.",
      "artifact_id": "8212ce7b-4108-4716-9705-c9f048927fc0"
    },
    {
      "module_id": "temp.update-singbox.utils.callgraph",
      "path": "temp/update-singbox/utils/callgraph.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "683c8439-9fb0-4314-8c9b-573e31bc59c8"
    },
    {
      "module_id": "temp.update-singbox.utils.genstruct",
      "path": "temp/update-singbox/utils/genstruct.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b Python-\u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 JSON \u0441 \u0440\u0435\u0436\u0438\u043c\u0430\u043c\u0438 compact \u0438 detailed.",
      "artifact_id": "5c764b10-6c89-40b8-a51f-f7cee53de587"
    },
    {
      "module_id": "temp.update-singbox.modules.config_fetch",
      "path": "temp/update-singbox/modules/config_fetch.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "0f60b183-06be-4b19-92a3-8e3953376224"
    },
    {
      "module_id": "temp.update-singbox.modules.__init__",
      "path": "temp/update-singbox/modules/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "901e9896-8ac1-47f6-89a9-a20dee5543db"
    },
    {
      "module_id": "temp.update-singbox.modules.protocol_validation",
      "path": "temp/update-singbox/modules/protocol_validation.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "9614a84a-20a3-4082-8b5f-351576ad00f1"
    },
    {
      "module_id": "temp.update-singbox.modules.config_generate",
      "path": "temp/update-singbox/modules/config_generate.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "96691ae0-3041-4fca-976b-a404c7ab482c"
    },
    {
      "module_id": "temp.update-singbox.modules.utils",
      "path": "temp/update-singbox/modules/utils.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "a075dba5-7c56-4629-a6e4-6e5ce5370d51"
    },
    {
      "module_id": "temp.update-singbox.modules.server_management",
      "path": "temp/update-singbox/modules/server_management.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "71d872ee-3b71-4cfb-bb36-22fc0b02e15f"
    },
    {
      "module_id": "temp.update-singbox.modules.service_manage",
      "path": "temp/update-singbox/modules/service_manage.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "2c63e2e1-a84e-48dd-badb-5fc2b432b45c"
    },
    {
      "module_id": "temp.update-singbox.modules.module_installer",
      "path": "temp/update-singbox/modules/module_installer.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "a00f49a1-7d22-4ff2-a958-5d65d6fe9b0a"
    },
    {
      "module_id": ".personal.boss.scripts.boss_cli",
      "path": ".personal/boss/scripts/boss_cli.py",
      "category": "core",
      "functions": 25,
      "classes": 1,
      "summary": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f",
      "artifact_id": "a92acc22-a3a1-406c-b9a4-523c41c8c898"
    },
    {
      "module_id": ".personal.boss.scripts.team_management",
      "path": ".personal/boss/scripts/team_management.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "Team Management Module",
      "artifact_id": "0c6ad396-bbd6-419e-8754-463e92b3aaad"
    },
    {
      "module_id": ".personal.boss.scripts.business_planning",
      "path": ".personal/boss/scripts/business_planning.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "Business Planning Module",
      "artifact_id": "8a27a169-4bb6-449f-b8f8-d8cf27e7489f"
    },
    {
      "module_id": ".personal.boss.scripts.__init__",
      "path": ".personal/boss/scripts/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "5519a6b5-29e6-49da-b98f-91305f81600d"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.docs.cache",
      "path": "backup_before_separation_20250529_152219/docs/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "4cbe0c21-5834-462e-a281-9f7102874be5"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.docs.self_run",
      "path": "backup_before_separation_20250529_152219/docs/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "c8e5ca42-b4f4-435c-af45-a88896925fa3"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.docs.json_selector",
      "path": "backup_before_separation_20250529_152219/docs/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "831b0148-7bd2-43b1-ba7e-e9e1cbd339e0"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.docs.cli",
      "path": "backup_before_separation_20250529_152219/docs/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "fd83e87f-0f79-4a04-9fdf-af3c39a29647"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.workflow_orchestrator",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/workflow_orchestrator.py",
      "category": "core",
      "functions": 27,
      "classes": 5,
      "summary": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture",
      "artifact_id": "68b453ff-1f5d-4ca7-adb6-6cbb123348e4"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.cli_config",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/cli_config.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "CLI configuration management.",
      "artifact_id": "b81d23ee-f2f2-419a-9be8-05a8c9868aae"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.ai_self_monitor",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/ai_self_monitor.py",
      "category": "core",
      "functions": 16,
      "classes": 4,
      "summary": "AI Self-Monitoring System",
      "artifact_id": "20974aa5-9212-4764-9fcb-6edcd627625d"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.grok",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "3004eaa4-0195-4756-b677-a1fb579839d9"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.cli_commands",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/cli_commands.py",
      "category": "core",
      "functions": 22,
      "classes": 1,
      "summary": "CLI command processing and handlers.",
      "artifact_id": "38a6eea3-8c22-499e-ad29-983c28771f9b"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.context_orchestrator",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/context_orchestrator.py",
      "category": "core",
      "functions": 20,
      "classes": 5,
      "summary": "Smart Context Orchestration for LLMStruct",
      "artifact_id": "d94feb58-bf72-4acf-a0b6-2421fdbd2374"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.__init__",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "72807b85-fa3d-43d6-a55b-78c54e151101"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.ai_cli_integration",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "functions": 14,
      "classes": 1,
      "summary": "AI Self-Awareness CLI Integration Module",
      "artifact_id": "37d5ea6f-2dd3-4581-9251-dc5366e790b1"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.__main__",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "44178e8d-afff-4003-8d7e-45ade7673d20"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.cli_utils",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/cli_utils.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "CLI utility functions.",
      "artifact_id": "cfb0a05e-6de9-48be-b3a2-f3f963b4af03"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.copilot",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/copilot.py",
      "category": "core",
      "functions": 26,
      "classes": 5,
      "summary": "LLMStruct Copilot Integration Module",
      "artifact_id": "89615336-1b58-42ef-b709-d22cace41dd1"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.gh_view",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/gh_view.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "GitHub visualization/graph feature (gh-view-v1)",
      "artifact_id": "dcaa5b1a-6cb1-4daf-b181-faa23996ec42"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.llm_client",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "e898518b-aa85-4413-9485-75d0330c7909"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.ai_workflow_middleware",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/ai_workflow_middleware.py",
      "category": "core",
      "functions": 22,
      "classes": 4,
      "summary": "AI Workflow Middleware - Forces AI Integration with LLMStruct",
      "artifact_id": "453a677f-5059-4f55-ad6e-dd7eb95e9a78"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.ai_self_awareness",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "functions": 47,
      "classes": 8,
      "summary": "AI Self-Awareness Enhancement Module",
      "artifact_id": "53faa270-bd06-4539-b298-59fbb5621bc5"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.cache",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "bbf7be2b-dc34-499a-b8fb-24e6387b70c0"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.self_run",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "d97f1df1-be73-4cc1-b136-ade846c7bb5e"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.cursor_ai_bridge",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/cursor_ai_bridge.py",
      "category": "core",
      "functions": 21,
      "classes": 1,
      "summary": "Cursor AI Bridge - API Layer for AI Assistant Integration",
      "artifact_id": "b7b0cc88-7aa0-4e53-85a4-9ffb36ccc391"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.transpiler",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/transpiler.py",
      "category": "core",
      "functions": 10,
      "classes": 3,
      "summary": "AI-Powered Universal Transpiler",
      "artifact_id": "084bfada-2288-4cb5-a03f-730affec6f14"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.json_selector",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "2655eb39-215a-4d59-9ea4-d9d2ec709c4f"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.cli",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/cli.py",
      "category": "core",
      "functions": 18,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "artifact_id": "7314e135-e955-4441-91b4-fb8cc047ce22"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.cursor_integration",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/cursor_integration.py",
      "category": "core",
      "functions": 22,
      "classes": 6,
      "summary": "Cursor IDE Integration Module",
      "artifact_id": "c988fe8e-1696-415d-8060-a197830b9261"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.cli_core",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/cli_core.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Core CLI functionality and main loop.",
      "artifact_id": "ae56f55f-9520-4329-a44a-61fc3f80bf17"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.workspace",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/workspace.py",
      "category": "core",
      "functions": 20,
      "classes": 1,
      "summary": "Workspace State & Mode Management System",
      "artifact_id": "c9d7e704-e06c-4425-92d6-412ee7ca8277"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.parsers.__init__",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "e15f6d14-bf2b-4aad-97aa-1a7a016e8e4f"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.parsers.javascript_parser",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "d463efe2-1acd-409b-841b-c7c7e1727c0a"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.parsers.universal_converter",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/parsers/universal_converter.py",
      "category": "core",
      "functions": 14,
      "classes": 3,
      "summary": "Universal Code Converter - Orchestrates all language parsers",
      "artifact_id": "63ef2912-0bcb-403b-b8d9-cef42c5ae091"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.parsers.go_analyzer",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430",
      "artifact_id": "35a53b35-e5d7-4c62-b18e-7afcac84d794"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.parsers.python_parser",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "",
      "artifact_id": "f594a1da-62da-49e4-9090-f98c919329cc"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.templates.__init__",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "610146ed-655b-4acd-a071-e12084ca3a1d"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.validators.__init__",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "141ed983-c8c2-4f4a-8ad7-0d85e5fe6387"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.validators.json_validator",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "2124ba52-69bb-4423-8edd-3fc85d7302e8"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.generators.json_generator",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "cf013136-c8b4-4e5e-8683-d65e4ac1536f"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.generators.__init__",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "54e4af66-0133-44e1-bf33-6c35db96d115"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.generators.go_json_generator",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "b12b8131-b560-4296-9fae-144a121dd4c0"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.github_sync_manager",
      "path": "backup_before_separation_20250529_152219/scripts/github_sync_manager.py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub",
      "artifact_id": "ccfe4330-bea6-40f5-9d9f-beae8082d7b6"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.process_926_items",
      "path": "backup_before_separation_20250529_152219/scripts/process_926_items.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "926 Items Processing Script - Updated Implementation",
      "artifact_id": "9be53dc7-b3dc-4d58-a379-d627c594d951"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.github_sync_manager_enhanced",
      "path": "backup_before_separation_20250529_152219/scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "functions": 28,
      "classes": 3,
      "summary": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout",
      "artifact_id": "ffc98435-77f9-421c-b1f4-df1952a6bf0a"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.fix_github_script",
      "path": "backup_before_separation_20250529_152219/scripts/fix_github_script.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Quick fix for GitHub issues creation script",
      "artifact_id": "46db7226-c922-4f36-9980-f196890eac61"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.collector",
      "path": "backup_before_separation_20250529_152219/scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "7dc9eb5d-3845-4875-8f03-b909e87665e2"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.create_github_issues",
      "path": "backup_before_separation_20250529_152219/scripts/create_github_issues.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "GitHub Issues Creator for AI-Dogfooding Project",
      "artifact_id": "f1e329b0-dac7-4fbb-bcb6-3a17154229c1"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.session_cli",
      "path": "backup_before_separation_20250529_152219/scripts/session_cli.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Session Management CLI",
      "artifact_id": "405601b1-7987-40bc-b196-5413f6331a80"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.epic_roadmap_manager",
      "path": "backup_before_separation_20250529_152219/scripts/epic_roadmap_manager.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439",
      "artifact_id": "9399e4cd-6780-460b-94a7-9df3f8282a74"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.auto_update_struct",
      "path": "backup_before_separation_20250529_152219/scripts/auto_update_struct.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Automatic struct.json update script",
      "artifact_id": "f05b062d-3259-428f-9e51-7ec480d34ba6"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.create_comprehensive_index",
      "path": "backup_before_separation_20250529_152219/scripts/create_comprehensive_index.py",
      "category": "core",
      "functions": 37,
      "classes": 2,
      "summary": "Comprehensive Project Index Creator",
      "artifact_id": "f2c63434-19fd-4ae6-b247-0d3cef6999ca"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.validate_schemas",
      "path": "backup_before_separation_20250529_152219/scripts/validate_schemas.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "11b6fb32-c914-4393-8262-3337f8b8034a"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.export_to_github_projects",
      "path": "backup_before_separation_20250529_152219/scripts/export_to_github_projects.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Export script for GitHub Projects integration",
      "artifact_id": "943a40cf-7912-43d4-b882-39685619cebe"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.validate_refs",
      "path": "backup_before_separation_20250529_152219/scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "3c30a36c-ae58-492a-8367-21e6e1a3d40c"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.fix_hardcoded_usernames",
      "path": "backup_before_separation_20250529_152219/scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "functions": 12,
      "classes": 2,
      "summary": "Fix Hardcoded Usernames Script",
      "artifact_id": "c7d19e50-87cd-49e7-a8db-8986b337f846"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.deploy_embedded_files",
      "path": "backup_before_separation_20250529_152219/scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "908123db-4ab6-4400-91d1-88b008f25bcf"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.validate_epics",
      "path": "backup_before_separation_20250529_152219/scripts/validate_epics.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "Epic Data Validator",
      "artifact_id": "5c5212ae-f119-4ee8-b4fe-9930be6eb03d"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.validate_json",
      "path": "backup_before_separation_20250529_152219/scripts/validate_json.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "JSON Validation Script",
      "artifact_id": "068ee8fb-2c38-4962-a2ac-9105d329fe5c"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.create_tasks_index",
      "path": "backup_before_separation_20250529_152219/scripts/create_tasks_index.py",
      "category": "core",
      "functions": 18,
      "classes": 3,
      "summary": "Tasks Index Creator",
      "artifact_id": "a165ba07-a02e-46cd-a747-013de7f7529c"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.team.__init__",
      "path": "backup_before_separation_20250529_152219/scripts/team/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "1035dd5d-7821-42a8-9454-61784880f126"
    },
    {
      "module_id": "src.llmstruct.workflow_orchestrator",
      "path": "src/llmstruct/workflow_orchestrator.py",
      "category": "core",
      "functions": 27,
      "classes": 5,
      "summary": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture",
      "artifact_id": "90a2228d-f505-43e8-b365-b494759e6b55"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "CLI configuration management.",
      "artifact_id": "b3744fcc-1737-4b86-a6c7-9674dac548ac"
    },
    {
      "module_id": "src.llmstruct.ai_self_monitor",
      "path": "src/llmstruct/ai_self_monitor.py",
      "category": "core",
      "functions": 16,
      "classes": 4,
      "summary": "AI Self-Monitoring System",
      "artifact_id": "e3bace2e-781f-4967-815d-3b4dda368b49"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "9703846d-307f-4acd-b28f-c031d3eeb757"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "functions": 22,
      "classes": 1,
      "summary": "CLI command processing and handlers.",
      "artifact_id": "d97e586c-eb51-46e7-80f6-57a55ea4f949"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "functions": 20,
      "classes": 5,
      "summary": "Smart Context Orchestration for LLMStruct",
      "artifact_id": "bfac1f21-865e-4913-8834-3516aabeafec"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "4b299c2b-0b12-4e82-842b-7ebfab66e85e"
    },
    {
      "module_id": "src.llmstruct.ai_cli_integration",
      "path": "src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "functions": 14,
      "classes": 1,
      "summary": "AI Self-Awareness CLI Integration Module",
      "artifact_id": "881d90ae-ec5e-4e82-ae11-d7c7fa4faef2"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "10e4ef9e-10d7-448b-9917-636c21005979"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "CLI utility functions.",
      "artifact_id": "7298f5bb-f3d5-4757-bc5f-8adf1b93b3df"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "functions": 26,
      "classes": 5,
      "summary": "LLMStruct Copilot Integration Module",
      "artifact_id": "476c77c6-0e2c-4f93-aacd-40a68a66be66"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "GitHub visualization/graph feature (gh-view-v1)",
      "artifact_id": "e40c09f2-aff2-47c7-9ad8-c8b23cb9eed8"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "fab6967d-e1f2-47a5-b57c-ae8488d7fabc"
    },
    {
      "module_id": "src.llmstruct.ai_workflow_middleware",
      "path": "src/llmstruct/ai_workflow_middleware.py",
      "category": "core",
      "functions": 22,
      "classes": 4,
      "summary": "AI Workflow Middleware - Forces AI Integration with LLMStruct",
      "artifact_id": "52e4c9d7-64b7-45f9-bfe0-6ed36feb1c74"
    },
    {
      "module_id": "src.llmstruct.ai_self_awareness",
      "path": "src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "functions": 47,
      "classes": 8,
      "summary": "AI Self-Awareness Enhancement Module",
      "artifact_id": "06eb708d-34e2-4f56-850b-03cf2c9cac9f"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "30e0800b-fa3d-4c64-b700-5026c37fec36"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "491e72b4-1b5b-4a22-974e-986e91f85430"
    },
    {
      "module_id": "src.llmstruct.cursor_ai_bridge",
      "path": "src/llmstruct/cursor_ai_bridge.py",
      "category": "core",
      "functions": 21,
      "classes": 1,
      "summary": "Cursor AI Bridge - API Layer for AI Assistant Integration",
      "artifact_id": "7e68bbe7-72d9-49b2-b990-09fd3fe9d243"
    },
    {
      "module_id": "src.llmstruct.transpiler",
      "path": "src/llmstruct/transpiler.py",
      "category": "core",
      "functions": 10,
      "classes": 3,
      "summary": "AI-Powered Universal Transpiler",
      "artifact_id": "056c0c75-8ccf-4590-82c4-5dcd05412d25"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "97487690-7241-40c0-973c-7f245d93f5f0"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "functions": 18,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "artifact_id": "bfe709ee-10fa-48c7-9221-b06becfe197f"
    },
    {
      "module_id": "src.llmstruct.cursor_integration",
      "path": "src/llmstruct/cursor_integration.py",
      "category": "core",
      "functions": 22,
      "classes": 6,
      "summary": "Cursor IDE Integration Module",
      "artifact_id": "c569b0ce-34c4-4646-a50c-bc86b5ccb34c"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Core CLI functionality and main loop.",
      "artifact_id": "752638ce-bf58-4409-a5dc-944d04e03803"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "functions": 20,
      "classes": 1,
      "summary": "Workspace State & Mode Management System",
      "artifact_id": "58d2339e-345d-447d-9429-dcb24352d625"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "d9dbaf84-febc-4cb8-af64-fa10ab2c993e"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "0daa893c-53fb-4185-976e-21b5ad9598df"
    },
    {
      "module_id": "src.llmstruct.parsers.universal_converter",
      "path": "src/llmstruct/parsers/universal_converter.py",
      "category": "core",
      "functions": 14,
      "classes": 3,
      "summary": "Universal Code Converter - Orchestrates all language parsers",
      "artifact_id": "44d930f4-86f0-49d3-91fd-a0a78fe1ce4b"
    },
    {
      "module_id": "src.llmstruct.parsers.go_analyzer",
      "path": "src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430",
      "artifact_id": "0f880be7-59a3-4bc7-9971-ec27038aa49c"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "",
      "artifact_id": "6f47826d-f6ea-4a2d-a47f-b9df8d54ef0a"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "9bcc492e-955c-46fa-aa25-0147c949dbc5"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "f6089e31-3946-4762-aa93-36774590209f"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "15c356fc-a8c2-429e-9515-24b371f3f66a"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "86a97c76-5af0-408b-9c42-4461538e17e7"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "e3f1a4d3-639d-4f6b-b039-0921c74298b2"
    },
    {
      "module_id": "src.llmstruct.generators.go_json_generator",
      "path": "src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "ca63e6af-0b99-43be-b526-5127acc7fcb4"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_self_run",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "d4e74055-e8a9-4806-9b88-2685d910bd1d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector (1).py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "11406f67-689a-4bec-808e-639d1edd57b8"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files (1).py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "08690024-669a-427a-a12c-f39a05ebcbcb"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_json_selector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "379d54f5-3416-43bf-9484-64e55e86d5bc"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "0d0a07a6-5347-4102-b0a1-c48c35354f74"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "70f1fbda-2590-4cc1-8b37-473a0d01b89d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "6c11fc67-275a-4aec-83ce-354ff33ac1b2"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli_parser",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli_parser.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "30641867-9a92-4db8-82fe-6f6290564701"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "73db327c-9040-4d21-8f49-06884da35a8d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cache.py",
      "category": "core",
      "functions": 7,
      "classes": 1,
      "summary": "",
      "artifact_id": "7550481c-7091-4c7b-ace4-d7a4ab4dda94"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "cf9ca86c-1ad6-4d65-bf19-88a021662ed5"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "b471dce4-087c-4991-888b-241c6ee1eb82"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "48ad843f-72ee-42b7-ae39-49f348e99e89"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "4d180427-e046-4ebd-8b78-f69781833952"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.extract_artifacts",
      "path": "temp_workfiles/unsorted_mess/22.05.25/extract_artifacts.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "c667a77c-2615-450b-acc9-ac301a70b698"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.dumper",
      "path": "temp_workfiles/unsorted_mess/dump/dumper.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "02914777-75d9-4b55-9e7c-7a236bb46cfb"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "351e4bef-7720-4a3c-86d7-ecfaadcffd0d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_utils",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project.",
      "artifact_id": "8f522b15-ea46-40b8-b3fd-b85ca34183c4"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ideas_tree",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ideas_tree.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "987f5f73-6c08-496a-b0be-05d3ca757ea2"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "LLMStruct: A tool for generating JSON-based code structures for LLM integration.",
      "artifact_id": "1c50bf3a-625b-4ff9-b070-590b59414e5c"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.grok",
      "path": "temp_workfiles/unsorted_mess/dump/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "a2716889-c1d8-485c-bc50-1503096b93c7"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___main__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___main__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "4e92ff9d-7368-44e0-8758-9f365601d514"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs (1).py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "206b4fef-76c8-4f98-abd8-d50075b01726"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "5032a974-bae8-40bb-9bbf-0f16f48237aa"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_engines",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_engines.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "83aa32b2-8cfc-400c-935c-1a74da961055"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_config",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_config.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "99ba2e7b-3fc1-4ca7-af92-3f49f038c13f"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "",
      "artifact_id": "effee8d4-d956-4c81-8ec3-8a5a28613076"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "47c973af-b2aa-4450-b281-87537903944a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "Generate JSON for workspace based on user instructions template.",
      "artifact_id": "66c24485-4ad9-4fe4-9951-388caa9b67c1"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs (1).py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "9a638e70-44fd-4827-b7d8-571936d3eeb6"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "3f64b05b-47e6-4ebf-a523-9df4424a5d1c"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collector",
      "path": "temp_workfiles/unsorted_mess/dump/collector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "a20acea9-5ad6-4a3f-b6d8-a761c0568577"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs (1).py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "6fae6739-919e-48a7-97a6-f07d009f4564"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "0a96f508-d615-42a9-804f-8613c57f15dc"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.refactored_structure",
      "path": "temp_workfiles/unsorted_mess/dump/refactored_structure.py",
      "category": "core",
      "functions": 5,
      "classes": 3,
      "summary": "",
      "artifact_id": "8e9d1fce-79a9-4735-8acb-c539edcd3d74"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser (1).py",
      "category": "core",
      "functions": 4,
      "classes": 1,
      "summary": "",
      "artifact_id": "7f7d705e-3e63-48d0-9356-10ddb9783d1b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_templates___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_templates___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "59d1dc32-0a33-4bc4-951f-7a24f3e0472d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "966f0190-a643-415a-8882-b066f628ccd4"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_main",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project.",
      "artifact_id": "06a006d1-9361-4d57-b89c-6db15c8e837b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.filter_llmstruct_json",
      "path": "temp_workfiles/unsorted_mess/dump/filter_llmstruct_json.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "7b2da02f-ed85-41de-9a01-8088a4a4b834"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_internal_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_internal_docs.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "a46cccef-cdfa-4237-a118-122763196fce"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "f72cd523-dfe4-467e-813c-5d01380617dc"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client (3)",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client (3).py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "7dd6d003-504e-4c7a-834e-7a1d2ebc67ef"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.tests___init__",
      "path": "temp_workfiles/unsorted_mess/dump/tests___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "artifact_id": "86858883-c88e-4a72-b64d-6194484458d0"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.check_docs",
      "path": "temp_workfiles/unsorted_mess/dump/check_docs.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "f94a4ae3-fb09-4f6b-be18-f954d5c080a9"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.javascript_parser",
      "path": "temp_workfiles/unsorted_mess/dump/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "05ae4599-6b56-4567-9bb7-63b175c28bab"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.self_run",
      "path": "temp_workfiles/unsorted_mess/dump/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "547c5190-2c5d-4829-a336-6e348b30baf0"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator (1).py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "81395d56-b372-4d57-bbbd-678768e51f2e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/python_parser.py",
      "category": "core",
      "functions": 6,
      "classes": 2,
      "summary": "",
      "artifact_id": "38ac28b9-3f2c-4665-aa03-80139b0c62f7"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "144efde0-b168-4e2c-b24a-2f8529e60fcb"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli (1).py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "f3f9df07-f2e3-4f05-a60f-0bfb8222e3bf"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.scripts_setup_github",
      "path": "temp_workfiles/unsorted_mess/dump/scripts_setup_github.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "44ca0096-6971-441c-98fb-b541fa04e189"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__ (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__ (1).py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "e65f7f12-55e3-429a-9537-900ebb6c4c5b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.cli",
      "path": "temp_workfiles/unsorted_mess/dump/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "c2145b8f-bfa9-424f-9098-6cc2ca0d4944"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_validators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_validators___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "54f41104-f1aa-47ee-979e-fb756e40bc1b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct (1).py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "Generate JSON for workspace based on user instructions template.",
      "artifact_id": "d0c882c7-325e-4478-9622-e27cb7093bb1"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_validator",
      "path": "temp_workfiles/unsorted_mess/dump/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "0cae8952-5727-4509-86c7-1bfdf78397de"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.validate_json",
      "path": "temp_workfiles/unsorted_mess/dump/validate_json.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "203a0cc4-92ab-41df-8429-c7feb853bb23"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "006d7a6c-e4cf-430c-8c3a-3ab4dd67fac9"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.clean.internal_cleaner",
      "path": "temp_workfiles/unsorted_mess/dump/clean/internal_cleaner.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "19d7016d-9dbb-40fe-99bf-bce066dc8aa7"
    },
    {
      "module_id": "bak.20250522_102827.scripts.collector",
      "path": "bak/20250522_102827/scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "9b1cc69b-c894-496c-b400-ea12276eb527"
    },
    {
      "module_id": "bak.20250522_102827.scripts.validate_refs",
      "path": "bak/20250522_102827/scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "f6b71cf8-9dfa-480b-9956-d3695a8a83c7"
    },
    {
      "module_id": "bak.20250522_102827.scripts.deploy_embedded_files",
      "path": "bak/20250522_102827/scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "593c6319-2bd0-4df3-a9bc-43b6e8b518c9"
    },
    {
      "module_id": "bak.20250522_131121.scripts.collector",
      "path": "bak/20250522_131121/scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "3c67957d-a10c-4fca-a6dc-d6f28741eb2a"
    },
    {
      "module_id": "bak.20250522_131121.scripts.validate_refs",
      "path": "bak/20250522_131121/scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "4947cfff-4630-4572-b91e-21b25fab767a"
    },
    {
      "module_id": "bak.20250522_131121.scripts.deploy_embedded_files",
      "path": "bak/20250522_131121/scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "40cb182a-ef6a-45f5-8129-5597a26be611"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "artifact_id": "ae062c8d-567a-4445-bfc4-90ab4945a75e"
    },
    {
      "module_id": "scripts.github_sync_manager",
      "path": "scripts/github_sync_manager.py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub",
      "artifact_id": "ed0097fb-24a9-4a74-8257-e0e9bd851175"
    },
    {
      "module_id": "scripts.process_926_items",
      "path": "scripts/process_926_items.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "926 Items Processing Script - Updated Implementation",
      "artifact_id": "d306a706-730c-49cc-8a35-def5bd272ca6"
    },
    {
      "module_id": "scripts.github_sync_manager_enhanced",
      "path": "scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "functions": 28,
      "classes": 3,
      "summary": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout",
      "artifact_id": "09008040-8a92-41f2-b56e-0347ae8c580b"
    },
    {
      "module_id": "scripts.fix_github_script",
      "path": "scripts/fix_github_script.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Quick fix for GitHub issues creation script",
      "artifact_id": "fec2018c-99ab-48ee-bfe8-d68ad2fa6a1d"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "3c83e24f-f8f9-4ea2-8fac-a4c23facf99e"
    },
    {
      "module_id": "scripts.create_github_issues",
      "path": "scripts/create_github_issues.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "GitHub Issues Creator for AI-Dogfooding Project",
      "artifact_id": "828b6e86-e935-4db0-be54-06bfd702b81d"
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Session Management CLI",
      "artifact_id": "ccf38523-6fa8-4e55-9aee-eea2d47dee4e"
    },
    {
      "module_id": "scripts.epic_roadmap_manager",
      "path": "scripts/epic_roadmap_manager.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439",
      "artifact_id": "6d53f12e-cf5d-4042-87e1-33f81e8b0320"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Automatic struct.json update script",
      "artifact_id": "4e46b18b-324e-4b3c-aef5-9bceed2b40a4"
    },
    {
      "module_id": "scripts.create_comprehensive_index",
      "path": "scripts/create_comprehensive_index.py",
      "category": "core",
      "functions": 37,
      "classes": 2,
      "summary": "Comprehensive Project Index Creator",
      "artifact_id": "1e8b9384-3400-4eca-8091-fc4e1f4acbb7"
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "9c2c5563-2c94-4268-87ab-c02ac8c64ae2"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Export script for GitHub Projects integration",
      "artifact_id": "81f35d11-3a6c-4a1c-b7f7-261f48d02bc3"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "0010c3a6-89aa-4448-a66d-44b0e1e4f1ca"
    },
    {
      "module_id": "scripts.fix_hardcoded_usernames",
      "path": "scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "functions": 12,
      "classes": 2,
      "summary": "Fix Hardcoded Usernames Script",
      "artifact_id": "b44485b5-05f6-45fd-bd2a-4dd6d198c156"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "a27f4f48-264b-4dd7-9cdb-13fd5d95712c"
    },
    {
      "module_id": "scripts.validate_epics",
      "path": "scripts/validate_epics.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "Epic Data Validator",
      "artifact_id": "972b0b8c-197d-4b51-ae56-1255c2229d37"
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "JSON Validation Script",
      "artifact_id": "9e79490b-cdb7-43f4-919a-a039b800438d"
    },
    {
      "module_id": "scripts.create_tasks_index",
      "path": "scripts/create_tasks_index.py",
      "category": "core",
      "functions": 18,
      "classes": 3,
      "summary": "Tasks Index Creator",
      "artifact_id": "d9b7da8a-ab2c-46f7-9939-4c8fac38bbe4"
    },
    {
      "module_id": "scripts.team.__init__",
      "path": "scripts/team/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "6f510ab8-b41a-4f3a-bc6c-8e995be79187"
    }
  ],
  "modules": [
    {
      "module_id": "start_development",
      "path": "start_development.py",
      "category": "core",
      "module_doc": "LLMStruct Development Startup Script\nConvenient one-command startup for daily development workflow.\nEnhanced with AI Workflow Middleware and Self-Monitoring for seamless llmstruct integration.",
      "functions": [
        {
          "name": "print_header",
          "docstring": "Print startup header.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_ai_integration_layer",
          "docstring": "Initialize AI integration layer - this is the NEW seamless integration",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_environment",
          "docstring": "Check if development environment is properly set up.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_workflow_orchestrator",
          "docstring": "Initialize and test WorkflowOrchestrator integration.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_cursor_ai_bridge",
          "docstring": "Initialize and test CursorAIBridge integration.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "sync_architecture_components",
          "docstring": "Sync with existing llmstruct architecture components and AI integration.",
          "line_range": null,
          "parameters": [
            "orchestrator",
            "ai_integration"
          ],
          "decorators": []
        },
        {
          "name": "run_system_health_check",
          "docstring": "Run comprehensive system health check.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_optimization_suggestions",
          "docstring": "Get AI optimization suggestions with WorkflowOrchestrator integration.",
          "line_range": null,
          "parameters": [
            "orchestrator"
          ],
          "decorators": []
        },
        {
          "name": "check_git_status",
          "docstring": "Check git repository status.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_context",
          "docstring": "Show current project context and priorities.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_useful_commands",
          "docstring": "Show useful commands for development.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main startup routine with AI Workflow Middleware and WorkflowOrchestrator integration.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "print_header": [
          "print"
        ],
        "initialize_ai_integration_layer": [
          "initialize_ai_monitor",
          "Path",
          "middleware.process_ai_request",
          "record_ai_usage",
          "initialize_ai_middleware",
          "str",
          "print"
        ],
        "check_environment": [
          "missing_files.append",
          "hasattr",
          "Path",
          "print"
        ],
        "initialize_workflow_orchestrator": [
          "len",
          "context.get",
          "WorkflowOrchestrator",
          "struct_analysis.get",
          "orchestrator.get_current_context",
          "copilot_status.get",
          "system_caps.get",
          "stats.get",
          "dup_analysis.get",
          "print"
        ],
        "initialize_cursor_ai_bridge": [
          "len",
          "CursorAIBridge",
          "context.get",
          "task_analysis.get",
          "bridge.ai_get_context",
          "bridge.ai_analyze_task",
          "project_state.get",
          "ai_rec.get",
          "print"
        ],
        "sync_architecture_components": [
          "ai_integration.get",
          "sync_results.items",
          "orchestrator.sync_with_existing_architecture",
          "middleware.get_middleware_stats",
          "print"
        ],
        "run_system_health_check": [
          "subprocess.run",
          "print"
        ],
        "get_optimization_suggestions": [
          "line.strip",
          "subprocess.run",
          "suggestions.append",
          "enumerate",
          "orchestrator.analyze_codebase_for_duplicates",
          "duplication_analysis.get",
          "r.get",
          "print"
        ],
        "check_git_status": [
          "len",
          "subprocess.run",
          "changes.split",
          "print"
        ],
        "show_current_context": [
          "open",
          "json.load",
          "vision.get",
          "init_file.exists",
          "Path",
          "enumerate",
          "bridge_file.exists",
          "bridge_data.get",
          "business_obj.get",
          "init_data.get",
          "print"
        ],
        "show_useful_commands": [
          "print"
        ],
        "main": [
          "initialize_cursor_ai_bridge",
          "initialize_workflow_orchestrator",
          "print_header",
          "show_current_context",
          "show_useful_commands",
          "ai_integration.get",
          "monitor.analyze_behavior_trends",
          "initialize_ai_integration_layer",
          "sync_architecture_components",
          "middleware.get_middleware_stats",
          "check_git_status",
          "run_system_health_check",
          "get_optimization_suggestions",
          "check_environment",
          "print"
        ]
      },
      "dependencies": [
        "AIWorkflowMode",
        "CursorAIBridge",
        "Path",
        "WorkflowOrchestrator",
        "initialize_ai_middleware",
        "initialize_ai_monitor",
        "json",
        "llmstruct.ai_self_monitor",
        "llmstruct.ai_workflow_middleware",
        "llmstruct.cursor_ai_bridge",
        "llmstruct.workflow_orchestrator",
        "os",
        "pathlib",
        "record_ai_usage",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "f6f555d6-2b17-4511-a402-e851100896d1"
    },
    {
      "module_id": "run_ai_diagnostics",
      "path": "run_ai_diagnostics.py",
      "category": "core",
      "module_doc": "Comprehensive AI Self-Awareness Diagnostics Runner\nEnhanced with Cursor integration testing, multi-AI orchestration validation,\npersonal planning bridge testing, and real-time performance metrics.",
      "functions": [
        {
          "name": "print_section",
          "docstring": "Print a formatted section header.",
          "line_range": null,
          "parameters": [
            "title",
            "emoji"
          ],
          "decorators": []
        },
        {
          "name": "print_subsection",
          "docstring": "Print a formatted subsection header.",
          "line_range": null,
          "parameters": [
            "title",
            "emoji"
          ],
          "decorators": []
        },
        {
          "name": "test_basic_ai_awareness",
          "docstring": "Test basic AI self-awareness capabilities.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_cursor_integration",
          "docstring": "Test Cursor IDE integration capabilities.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_real_time_metrics",
          "docstring": "Test real-time metrics calculation.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_personal_planning_bridge",
          "docstring": "Test personal planning bridge functionality.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_session_management",
          "docstring": "Test session management capabilities.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_configuration_loading",
          "docstring": "Test configuration file loading.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_performance_benchmark",
          "docstring": "Run performance benchmarks for AI operations.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_diagnostic_report",
          "docstring": "Generate a comprehensive diagnostic report.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "continuous_monitoring_mode",
          "docstring": "Run continuous monitoring of AI system health.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_specific_component",
          "docstring": "Test a specific AI component in detail.",
          "line_range": null,
          "parameters": [
            "component_name"
          ],
          "decorators": []
        },
        {
          "name": "test_cli_commands",
          "docstring": "Test CLI command processing capabilities.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_context_scenarios",
          "docstring": "Test context orchestrator scenarios.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_copilot_features",
          "docstring": "Test copilot manager features.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_integration_health_check",
          "docstring": "Run comprehensive integration health check.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_optimization_suggestions",
          "docstring": "Generate automated optimization suggestions based on diagnostics.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_stress_test",
          "docstring": "Run stress test on AI system.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run comprehensive AI diagnostics.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "print_section": [
          "len",
          "print"
        ],
        "print_subsection": [
          "len",
          "print"
        ],
        "test_basic_ai_awareness": [
          "len",
          "discovery.discover_all_capabilities",
          "print_section",
          "discovery.get_comprehensive_ai_status",
          "discovery.get_enhanced_capabilities_summary",
          "SystemCapabilityDiscovery",
          "print"
        ],
        "test_cursor_integration": [
          "len",
          "print_subsection",
          "print_section",
          "context_data.get",
          "cursor_integration.get_comprehensive_cursor_response",
          "delegation.get",
          "response.get",
          "create_cursor_integration",
          "print"
        ],
        "test_real_time_metrics": [
          "discovery._get_real_system_load",
          "print_section",
          "discovery._calculate_real_cache_hit_rate",
          "discovery.get_cursor_status_report",
          "SystemCapabilityDiscovery",
          "print"
        ],
        "test_personal_planning_bridge": [
          "len",
          "top_feature.get",
          "print_section",
          "enumerate",
          "bridge.get_priority_guidance",
          "guidance.get",
          "bridge.get_goal_aligned_suggestions",
          "PersonalPlanningCursorBridge",
          "print"
        ],
        "test_session_management": [
          "print_section",
          "CursorSessionManager",
          "session_manager.start_session",
          "session_manager.save_session_context",
          "print"
        ],
        "test_configuration_loading": [
          "open",
          "len",
          "json.load",
          "print_section",
          "Path",
          "config_path.exists",
          "print"
        ],
        "run_performance_benchmark": [
          "discovery.discover_all_capabilities",
          "print_section",
          "SystemCapabilityDiscovery",
          "create_cursor_integration",
          "time.time",
          "print"
        ],
        "generate_diagnostic_report": [
          "SystemCapabilityDiscovery",
          "len",
          "open",
          "discovery.discover_all_capabilities",
          "print_section",
          "Path",
          "json.dump",
          "time.strftime",
          "print"
        ],
        "continuous_monitoring_mode": [
          "len",
          "discovery._get_real_system_load",
          "discovery.discover_all_capabilities",
          "print_section",
          "discovery._calculate_real_cache_hit_rate",
          "SystemCapabilityDiscovery",
          "time.strftime",
          "time.sleep",
          "print"
        ],
        "test_specific_component": [
          "len",
          "test_copilot_features",
          "discovery.discover_all_capabilities",
          "list",
          "print_section",
          "test_cli_commands",
          "component_name.upper",
          "test_context_scenarios",
          "enumerate",
          "SystemCapabilityDiscovery",
          "print"
        ],
        "test_cli_commands": [
          "CommandProcessor",
          "CLIConfig",
          "CLIUtils",
          "print"
        ],
        "test_context_scenarios": [
          "print",
          "create_context_orchestrator"
        ],
        "test_copilot_features": [
          "initialize_copilot",
          "feature.replace",
          "hasattr",
          "print"
        ],
        "run_integration_health_check": [
          "print_section",
          "cursor_integration.get_comprehensive_cursor_response",
          "response.get",
          "create_cursor_integration",
          "print"
        ],
        "generate_optimization_suggestions": [
          "len",
          "discovery.discover_all_capabilities",
          "print_section",
          "enumerate",
          "SystemCapabilityDiscovery",
          "suggestions.append",
          "print"
        ],
        "run_stress_test": [
          "discovery.discover_all_capabilities",
          "print_section",
          "enumerate",
          "context_data.get",
          "range",
          "SystemCapabilityDiscovery",
          "delegation.get",
          "create_cursor_integration",
          "time.time",
          "print"
        ],
        "main": [
          "len",
          "test_func",
          "generate_optimization_suggestions",
          "print_section",
          "run_stress_test",
          "test_specific_component",
          "print",
          "continuous_monitoring_mode",
          "time.time",
          "run_integration_health_check"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CursorSessionManager",
        "Path",
        "PersonalPlanningCursorBridge",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "create_cursor_integration",
        "initialize_copilot",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.cursor_integration",
        "os",
        "pathlib",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "5e6800ce-7977-4d1c-91da-e2f5d2ab8d2c"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_text_file",
          "docstring": "Check if file is likely a text file based on extension.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_parser.parse_gitignore",
          "gitignore_path.exists",
          "Path"
        ],
        "is_text_file": [],
        "collect_project": [
          "gitignore",
          "open",
          "doc_files.items",
          "logger.info",
          "len",
          "file_path.is_file",
          "f.read",
          "is_text_file",
          "logger.warning",
          "Path",
          "load_gitignore",
          "logger.error",
          "json.dump",
          "any",
          "str",
          "root_dir.rglob"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "092982af-c875-4747-9229-c608396dbbc4"
    },
    {
      "module_id": "debug_terminal",
      "path": "debug_terminal.py",
      "category": "core",
      "module_doc": "Debug Terminal Script - Fallback for when terminal output is not visible\nSaves all output to files for manual inspection",
      "functions": [
        {
          "name": "run_with_output_capture",
          "docstring": "Run command and capture output to both console and file.",
          "line_range": null,
          "parameters": [
            "command",
            "description"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run common diagnostic commands with output capture.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "run_with_output_capture": [
          "open",
          "len",
          "subprocess.run",
          "f.write",
          "print"
        ],
        "main": [
          "run_with_output_capture",
          "results.append",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "03f4b944-5305-4045-9ed7-4fc1f46e65be"
    },
    {
      "module_id": "final_system_check",
      "path": "final_system_check.py",
      "category": "core",
      "module_doc": "Final System Status Check - LLMStruct Modular CLI Integration\nComprehensive validation of all completed components",
      "functions": [
        {
          "name": "check_system_status",
          "docstring": "Comprehensive system status check",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_system_status": [
          "open",
          "len",
          "json.load",
          "data.get",
          "i.get",
          "t.get",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "7c0027fb-a833-4643-ba0b-9d495f3c833b"
    },
    {
      "module_id": "monitor_system",
      "path": "monitor_system.py",
      "category": "core",
      "module_doc": "System Monitor - Continuous logging for debugging terminal issues\nRuns in background and logs system status to files",
      "functions": [
        {
          "name": "log_system_status",
          "docstring": "Log current system status to file.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run continuous monitoring.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "log_system_status": [
          "len",
          "open",
          "context.get",
          "timestamp.isoformat",
          "WorkflowOrchestrator",
          "Path",
          "wo.get_current_context",
          "json.dumps",
          "f.write",
          "str",
          "timestamp.strftime"
        ],
        "main": [
          "len",
          "time.sleep",
          "log_system_status",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "WorkflowOrchestrator",
        "datetime",
        "json",
        "llmstruct.workflow_orchestrator",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "539a87f4-7ab9-43be-9673-931ab1e4dcb7"
    },
    {
      "module_id": "board_cli",
      "path": "board_cli.py",
      "category": "core",
      "module_doc": "CLI Kanban Board for llmstruct tasks and ideas\n- Reads data/tasks.json and data/ideas.json\n- Shows board in terminal: columns by status, rows by priority\n- Supports filtering, sorting, and shows links between tasks/ideas",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "group_by_status_and_priority",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "items",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "render_board",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "board",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "open",
          "json.load"
        ],
        "group_by_status_and_priority": [
          "defaultdict",
          "item.get"
        ],
        "render_board": [
          "kind.capitalize",
          "links.extend",
          "console.print",
          "Panel",
          "links.append",
          "Table",
          "item.get",
          "table.add_column",
          "table.add_row"
        ],
        "main": [
          "load_json",
          "render_board",
          "group_by_status_and_priority",
          "tasks_data.get",
          "ideas_data.get",
          "console.rule"
        ]
      },
      "dependencies": [
        "Console",
        "Panel",
        "Path",
        "Table",
        "box",
        "collections",
        "defaultdict",
        "json",
        "os",
        "pathlib",
        "rich",
        "rich.console",
        "rich.panel",
        "rich.table"
      ],
      "hash": null,
      "artifact_id": "89b97581-73f7-4484-acea-531668e55aea"
    },
    {
      "module_id": "final_system_validation",
      "path": "final_system_validation.py",
      "category": "core",
      "module_doc": "Final system validation script for LLMStruct Modular CLI Integration",
      "functions": [
        {
          "name": "main",
          "docstring": "Run comprehensive system validation",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "open",
          "len",
          "json.load",
          "task.get",
          "next",
          "subprocess.run",
          "__import__",
          "create_cli_core",
          "status.upper",
          "getattr",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "create_cli_core",
        "json",
        "llmstruct.cli_core",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "d47c429a-569a-486b-adfe-87e913ee7667"
    },
    {
      "module_id": "force_ai_integration",
      "path": "force_ai_integration.py",
      "category": "core",
      "module_doc": "Force AI Integration Script\nInitializes middleware and monitoring to ensure AI uses llmstruct system.",
      "functions": [
        {
          "name": "force_ai_integration",
          "docstring": "Force AI to use llmstruct system.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_integration_status",
          "docstring": "Check current AI integration status.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "force_ai_integration": [
          "open",
          "initialize_ai_monitor",
          "Path",
          "json.dump",
          "monitor.get_real_time_guidance",
          "middleware.process_ai_request",
          "record_ai_usage",
          "config_file.exists",
          "initialize_ai_middleware",
          "str",
          "print"
        ],
        "check_integration_status": [
          "get_ai_monitor",
          "monitor.analyze_behavior_trends",
          "get_ai_middleware",
          "middleware.get_middleware_stats",
          "print"
        ]
      },
      "dependencies": [
        "AIWorkflowMode",
        "Path",
        "get_ai_middleware",
        "get_ai_monitor",
        "initialize_ai_middleware",
        "initialize_ai_monitor",
        "json",
        "llmstruct.ai_self_monitor",
        "llmstruct.ai_workflow_middleware",
        "pathlib",
        "record_ai_usage",
        "sys"
      ],
      "hash": null,
      "artifact_id": "083af710-8911-4066-9276-6bbad1c9ca9e"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "module_doc": "JSON Schema Validation Script for llmstruct\nValidates all enhanced JSON files against their appropriate schemas.\nPart of TSK-130 implementation.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": null,
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "open",
          "json.load",
          "print"
        ],
        "validate_json_against_schema": [
          "validate",
          "str",
          "print"
        ],
        "main": [
          "errors.append",
          "validate_json_against_schema",
          "load_json",
          "print"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "5799dfd0-4550-4382-b7f7-d2357407a06b"
    },
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "module_doc": "Session Schema Validation Script for llmstruct\nValidates session management JSON files against their schemas.\nFocused validation for session system only.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": null,
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "open",
          "json.load",
          "print"
        ],
        "validate_json_against_schema": [
          "len",
          "list",
          "validator.iter_errors",
          "Draft7Validator",
          "str",
          "print"
        ],
        "main": [
          "errors.append",
          "validate_json_against_schema",
          "load_json",
          "print"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "cfae0428-c2ea-498d-8a0e-5154cabdf420"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json_file",
          "docstring": "Load a JSON file and return its contents.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_with_struct",
          "docstring": "Verify llm_response.json against struct.json.",
          "line_range": null,
          "parameters": [
            "response_text",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_without_struct",
          "docstring": "Verify llm_response.json based on LLMstruct principles.",
          "line_range": null,
          "parameters": [
            "response_text"
          ],
          "decorators": []
        },
        {
          "name": "generate_metrics",
          "docstring": "Generate metrics for the response per EXT-004.",
          "line_range": null,
          "parameters": [
            "response_data",
            "server_log"
          ],
          "decorators": []
        },
        {
          "name": "update_tasks_json",
          "docstring": "Append a new task to tasks.json.",
          "line_range": null,
          "parameters": [
            "tasks_file",
            "new_task"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json_file": [
          "open",
          "json.load",
          "logging.error"
        ],
        "verify_response_with_struct": [
          "struct_data.get",
          "set",
          "logging.error",
          "e.startswith",
          "logging.info",
          "expected_files.issubset",
          "expected_goals.issubset",
          "re.findall",
          "expected_extensions.issubset"
        ],
        "verify_response_without_struct": [
          "principle.lower",
          "response_text.lower",
          "set",
          "logging.error",
          "logging.info",
          "expected_files.issubset",
          "expected_goals.issubset",
          "re.findall",
          "expected_extensions.issubset"
        ],
        "generate_metrics": [
          "len",
          "response_text.split",
          "datetime.utcnow",
          "server_log.get",
          "re.findall"
        ],
        "update_tasks_json": [
          "open",
          "logging.info",
          "load_json_file",
          "json.dump",
          "tasks.get"
        ],
        "main": [
          "open",
          "generate_metrics",
          "argparse.ArgumentParser",
          "logging.info",
          "load_json_file",
          "verify_response_with_struct",
          "json.dump",
          "update_tasks_json",
          "verify_response_without_struct",
          "parser.parse_args",
          "parser.add_argument"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "argparse",
        "datetime",
        "json",
        "logging",
        "os",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "0138ec8a-2f29-47b2-83f9-06c6c8229d2c"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": null,
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "2380bd4e-f65d-45ab-baea-e7066fe4153d"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": null,
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "utils.helper",
          "print"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": null,
      "artifact_id": "bc310230-963d-4181-a97a-0ea4aa6c0ab2"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": null,
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": null,
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "open",
          "logging.error",
          "str",
          "logging.info",
          "f.read",
          "Path",
          "json_file.exists",
          "hashlib.sha256",
          "content.encode",
          "json.dumps"
        ],
        "get_metadata": [
          "cursor.fetchone",
          "json.loads"
        ],
        "get_full_json": [
          "open",
          "cursor.fetchone",
          "logging.error",
          "json.load"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "5dc11b4e-2c72-4121-8b7c-b9544b351358"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "prompt.lower",
          "struct.get",
          "filter_json",
          "module.get",
          "any"
        ],
        "attach_to_llm_request": [
          "logging.error",
          "logging.info",
          "prompt.lower",
          "filter_struct",
          "cache.cache_json",
          "Path",
          "select_json",
          "cache.get_metadata",
          "cache.get_full_json",
          "context_file.exists",
          "filter_json",
          "json.dumps"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ab7a37b9-04a6-401f-a8c7-98a204dad715"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": null,
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": null,
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "isinstance",
          "filtered.append",
          "data.get",
          "item.get"
        ],
        "select_json": [
          "open",
          "f.seek",
          "ijson.parse",
          "current_item.get",
          "logging.error",
          "json.load",
          "Path",
          "json_file.exists",
          "prefix.startswith",
          "filtered.append",
          "path.append",
          "filter_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "3b2397ac-31d9-4bfc-98a3-e4c598bd05a4"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.strip",
          "gitignore_path.exists",
          "gitignore_path.open",
          "logging.error",
          "Path",
          "line.startswith"
        ],
        "load_config": [
          "config_path\u30aa\u30fc\u30d7\u30f3",
          "logging.error",
          "toml.load",
          "Path",
          "config_path.exists"
        ],
        "read_file_content": [
          "logging.error",
          "f.read",
          "path.is_file",
          "Path",
          "path.open"
        ],
        "write_to_file": [
          "logging.warning",
          "logging.info",
          "logging.error",
          "file_path.open",
          "Path",
          "base_path.mkdir",
          "f.write",
          "file_path.exists",
          "str"
        ],
        "parse_files_from_response": [
          "content.strip",
          "filename.strip",
          "re.findall",
          "files.append"
        ],
        "interactive": [
          "attach_to_llm_request",
          "cache.close",
          "sorted",
          "os.listdir",
          "write_match.group",
          "logging.warning",
          "Path",
          "load_gitignore",
          "write_dir.startswith",
          "scan_match.group",
          "files_to_write.append",
          "JSONCache",
          "client.query",
          "print",
          "write_to_file",
          "read_file_content",
          "parse",
          "user_input.lower",
          "json.dumps",
          "input",
          "logging.error",
          "parse_files_from_response",
          "re.search",
          "LLMClient",
          "get_folder_structure"
        ],
        "parse": [
          "logging.warning",
          "logging.info",
          "cache.cache_json",
          "cache.close",
          "logging.error",
          "Path",
          "load_gitignore",
          "load_config",
          "json.dump",
          "config.get",
          "JSONCache",
          "generate_json"
        ],
        "query": [
          "logging.error",
          "logging.info",
          "client.query",
          "cache.close",
          "Path",
          "json.dump",
          "LLMClient",
          "JSONCache"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "parse_parser.add_argument",
          "parser.add_subparsers",
          "dogfood_parser.add_argument",
          "argparse.ArgumentParser",
          "interactive_parser.add_argument",
          "interactive",
          "review_parser.add_argument",
          "dogfood",
          "query_parser.add_argument",
          "context_parser.add_argument",
          "parse",
          "query",
          "subparsers.add_parser",
          "review",
          "parser.parse_args",
          "asyncio.run",
          "context"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "d4156881-3cc9-4916-9022-ab0f70c99ed5"
    },
    {
      "module_id": "temp.update-singbox.logging_setup",
      "path": "temp/update-singbox/logging_setup.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "setup_logging",
          "docstring": "Configure logging with file and syslog handlers.",
          "line_range": null,
          "parameters": [
            "debug_level",
            "log_file",
            "max_log_size"
          ],
          "decorators": []
        },
        {
          "name": "rotate_logs",
          "docstring": "Rotate log file if it exceeds max_log_size.",
          "line_range": null,
          "parameters": [
            "log_file",
            "max_log_size"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "setup_logging": [
          "logging.FileHandler",
          "logging.warning",
          "file_handler.setFormatter",
          "logger.setLevel",
          "logger.addHandler",
          "rotate_logs",
          "logging.Formatter",
          "syslog_handler.setFormatter",
          "logging.getLogger"
        ],
        "rotate_logs": [
          "open",
          "os.rename",
          "range"
        ]
      },
      "dependencies": [
        "logging",
        "logging.handlers",
        "os"
      ],
      "hash": null,
      "artifact_id": "70d44c93-d50a-42ad-b16a-7279145885dc"
    },
    {
      "module_id": "temp.update-singbox.install_wizard",
      "path": "temp/update-singbox/install_wizard.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "check_inquirer_version",
          "docstring": "Check if python-inquirer is installed and log its version.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "create_dedicated_user",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "username"
          ],
          "decorators": []
        },
        {
          "name": "set_directory_permissions",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "username",
            "directories"
          ],
          "decorators": []
        },
        {
          "name": "create_virtualenv",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "activate_virtualenv",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "venv_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_hash",
          "docstring": "Compute SHA-256 hash of a file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "copy_files_to_installation_path",
          "docstring": "Copy files to destination, overwriting if contents differ.",
          "line_range": null,
          "parameters": [
            "source_files",
            "destination_path"
          ],
          "decorators": []
        },
        {
          "name": "get_server_list",
          "docstring": "Fetch server list using update_singbox.py -l.",
          "line_range": null,
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "get_server_list_with_exclusions",
          "docstring": "Fetch server list and mark exclusions.",
          "line_range": null,
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "parse_arguments",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "validate_url",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "ensure_install_path",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "setup_systemd_service",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "install_path",
            "timer_frequency",
            "service_verbosity",
            "install_link"
          ],
          "decorators": []
        },
        {
          "name": "display_exclusions_table",
          "docstring": "Display exclusions in a table format (Name, ID, Reason).",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_installation_wizard",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "render_choice",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "choice",
            "pointer"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CustomRender",
          "docstring": "Custom renderer to visually distinguish excluded servers.",
          "line_range": null,
          "methods": [
            {
              "name": "render_choice",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "choice",
                "pointer"
              ]
            }
          ],
          "bases": [
            "ConsoleRender"
          ]
        }
      ],
      "callgraph": {
        "check_inquirer_version": [
          "logging.error",
          "print",
          "logging.info",
          "logging.warning"
        ],
        "render_choice": [],
        "create_dedicated_user": [
          "open",
          "subprocess.run",
          "sudoers_file.write",
          "print"
        ],
        "set_directory_permissions": [
          "subprocess.run",
          "print"
        ],
        "create_virtualenv": [
          "subprocess.run",
          "print"
        ],
        "activate_virtualenv": [
          "subprocess.run"
        ],
        "get_file_hash": [
          "open",
          "f.read",
          "iter",
          "hashlib.sha256",
          "sha256.hexdigest",
          "sha256.update"
        ],
        "copy_files_to_installation_path": [
          "get_file_hash",
          "os.walk",
          "shutil.copy",
          "shutil.copytree",
          "os.makedirs",
          "print"
        ],
        "get_server_list": [
          "len",
          "set",
          "line.split",
          "logging.info",
          "logging.error",
          "logging.warning",
          "server_list.append",
          "subprocess.run",
          "re.sub",
          "seen_names.add",
          "print"
        ],
        "get_server_list_with_exclusions": [
          "check_inquirer_version",
          "get_server_list",
          "load_exclusions"
        ],
        "parse_arguments": [
          "parser.parse_args",
          "argparse.ArgumentParser",
          "parser.add_argument",
          "range"
        ],
        "validate_url": [
          "re.compile",
          "re.match"
        ],
        "ensure_install_path": [
          "os.makedirs",
          "print"
        ],
        "setup_systemd_service": [
          "open",
          "timer_file.write",
          "service_file.write",
          "subprocess.run",
          "print"
        ],
        "display_exclusions_table": [
          "ex.get",
          "print",
          "exclusion_choices.append",
          "load_exclusions"
        ],
        "run_installation_wizard": [
          "CustomRender",
          "selected_indices.append",
          "get_server_list",
          "parse_arguments",
          "create_virtualenv",
          "setup_systemd_service",
          "validate_url",
          "inquirer.prompt",
          "subprocess.run",
          "inquirer.List",
          "re.sub",
          "map",
          "display_exclusions_table",
          "print",
          "inquirer.Checkbox",
          "get_server_list_with_exclusions",
          "inquirer.Text",
          "activate_virtualenv",
          "logging.info",
          "logging.error",
          "all_servers.index",
          "copy_files_to_installation_path",
          "save_exclusions",
          "ensure_install_path"
        ]
      },
      "dependencies": [
        "ConsoleRender",
        "argparse",
        "exclude_servers",
        "get_server_list",
        "hashlib",
        "importlib.metadata",
        "inquirer",
        "inquirer.render.console",
        "load_exclusions",
        "logging",
        "modules.server_management",
        "os",
        "re",
        "save_exclusions",
        "shutil",
        "subprocess",
        "sys",
        "view_exclusions"
      ],
      "hash": null,
      "artifact_id": "e4ba231e-ce70-4b70-b25b-79c470c15535"
    },
    {
      "module_id": "temp.update-singbox.update_singbox",
      "path": "temp/update-singbox/update_singbox.py",
      "category": "core",
      "module_doc": "Update sing-box configuration from a remote JSON source.\n\nThis script fetches proxy configurations from a specified URL, validates the\nselected protocol, generates a sing-box configuration file, and manages the\nsing-box service. It supports protocols like VLESS, Shadowsocks, VMess, Trojan,\nTUIC, and Hysteria2. By default, it enables auto-selection of servers using urltest.\nIf a specific server is selected by remarks or index, only that server is included.\n\nUsage:\n    python3 update_singbox.py -u <URL> [-r <remarks> | -i <index>] [-d]\n    Example: python3 update_singbox.py -u https://example.com/config -r \"Server1\"\n    Example: python3 update_singbox.py -u https://example.com/config -i 2 -d\n\nEnvironment Variables:\n    SINGBOX_LOG_FILE: Path to log file (default: /var/log/update_singbox.log)\n    SINGBOX_CONFIG_FILE: Path to config file (default: /etc/sing-box/config.json)\n    SINGBOX_BACKUP_FILE: Path to backup file (default: /etc/sing-box/config.json.bak)\n    SINGBOX_TEMPLATE_FILE: Path to template file (default: ./config.template.json)\n    SINGBOX_MAX_LOG_SIZE: Max log size in bytes (default: 1048576)\n    SINGBOX_URL: URL for proxy configuration (optional)\n    SINGBOX_REMARKS: Select server by remarks\n    SINGBOX_INDEX: Select server by index\n    SINGBOX_DEBUG: Set debug level: 0 for minimal, 1 for detailed, 2 for verbose\n    SINGBOX_PROXY: Proxy URL (e.g., socks5://127.0.0.1:1080 or https://proxy.example.com)",
      "functions": [
        {
          "name": "main",
          "docstring": "Main function to update sing-box configuration.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_config_after_exclusion",
          "docstring": "Generate configuration after applying exclusions.",
          "line_range": null,
          "parameters": [
            "json_data",
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "parse_comma_separated_values",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "value"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [],
        "parse_comma_separated_values": [
          "value.split",
          "v.strip",
          "int"
        ],
        "generate_config_after_exclusion": [
          "chr",
          "len",
          "logging.warning",
          "logging.info",
          "load_exclusions",
          "generate_config",
          "outbounds.append",
          "apply_exclusions",
          "excluded_ips.append",
          "enumerate",
          "isinstance",
          "validate_protocol",
          "outbound.get"
        ]
      },
      "dependencies": [
        "apply_exclusions",
        "argparse",
        "clear_exclusions",
        "exclude_servers",
        "fetch_json",
        "generate_config",
        "generate_server_id",
        "json",
        "list_servers",
        "load_exclusions",
        "load_selected_config",
        "logging",
        "logging_setup",
        "manage_service",
        "modules.config_fetch",
        "modules.config_generate",
        "modules.protocol_validation",
        "modules.server_management",
        "modules.service_manage",
        "os",
        "remove_exclusions",
        "save_selected_config",
        "select_config",
        "setup_logging",
        "sys",
        "validate_protocol",
        "view_exclusions"
      ],
      "hash": null,
      "artifact_id": "8212ce7b-4108-4716-9705-c9f048927fc0"
    },
    {
      "module_id": "temp.update-singbox.utils.callgraph",
      "path": "temp/update-singbox/utils/callgraph.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "analyze_calls",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "build_callgraph",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "analyze_calls": [
          "open",
          "CallVisitor",
          "sorted",
          "f.read",
          "visitor.visit",
          "ast.parse",
          "isinstance"
        ],
        "build_callgraph": [
          "analyze_calls",
          "dirpath.split",
          "os.walk",
          "filename.endswith",
          "any"
        ],
        "main": [
          "open",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "json.dump",
          "build_callgraph",
          "parser.add_argument",
          "print"
        ]
      },
      "dependencies": [
        "argparse",
        "ast",
        "json",
        "os"
      ],
      "hash": null,
      "artifact_id": "683c8439-9fb0-4314-8c9b-573e31bc59c8"
    },
    {
      "module_id": "temp.update-singbox.utils.genstruct",
      "path": "temp/update-singbox/utils/genstruct.py",
      "category": "core",
      "module_doc": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b Python-\u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 JSON \u0441 \u0440\u0435\u0436\u0438\u043c\u0430\u043c\u0438 compact \u0438 detailed.",
      "functions": [
        {
          "name": "extract_compact",
          "docstring": "\u0418\u0437\u0432\u043b\u0435\u0447\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0431\u0435\u0437 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "extract_detailed",
          "docstring": "\u0418\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u043c\u0435\u043d\u0430, \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u044b, \u0434\u043e\u043a\u0441\u0442\u0440\u0438\u043d\u0433\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u0434\u043e\u043a\u0441\u0442\u0440\u0438\u043d\u0433 \u043c\u043e\u0434\u0443\u043b\u044f.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "build_struct_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_signature",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "func_node"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "extract_compact": [
          "open",
          "ast.walk",
          "classes.append",
          "ast.parse",
          "file.read",
          "isinstance",
          "functions.append"
        ],
        "extract_detailed": [
          "open",
          "file.read",
          "ast.get_docstring",
          "ast.parse"
        ],
        "get_signature": [
          "args.append"
        ],
        "build_struct_json": [
          "extract_compact",
          "dirpath.split",
          "extract_detailed",
          "os.walk",
          "filename.endswith",
          "any"
        ],
        "main": [
          "open",
          "argparse.ArgumentParser",
          "json.dump",
          "build_struct_json",
          "parser.parse_args",
          "parser.add_argument",
          "print"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Tuple",
        "argparse",
        "ast",
        "json",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "5c764b10-6c89-40b8-a51f-f7cee53de587"
    },
    {
      "module_id": "temp.update-singbox.modules.config_fetch",
      "path": "temp/update-singbox/modules/config_fetch.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "fetch_json",
          "docstring": "Fetch JSON from URL with optional proxy.",
          "line_range": null,
          "parameters": [
            "url",
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "select_config",
          "docstring": "Select proxy configuration by remarks or index.",
          "line_range": null,
          "parameters": [
            "json_data",
            "remarks",
            "index"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "fetch_json": [
          "error",
          "response.raise_for_status",
          "requests.get",
          "response.json"
        ],
        "select_config": [
          "isinstance",
          "outbound.get",
          "item.get",
          "ValueError"
        ]
      },
      "dependencies": [
        "error",
        "json",
        "logging",
        "requests"
      ],
      "hash": null,
      "artifact_id": "0f60b183-06be-4b19-92a3-8e3953376224"
    },
    {
      "module_id": "temp.update-singbox.modules.__init__",
      "path": "temp/update-singbox/modules/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "901e9896-8ac1-47f6-89a9-a20dee5543db"
    },
    {
      "module_id": "temp.update-singbox.modules.protocol_validation",
      "path": "temp/update-singbox/modules/protocol_validation.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_protocol",
          "docstring": "Validate protocol and extract parameters.",
          "line_range": null,
          "parameters": [
            "config",
            "supported_protocols"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_protocol": [
          "outbound.update",
          "ValueError",
          "error",
          "config.get",
          "outbound.get"
        ]
      },
      "dependencies": [
        "error",
        "logging",
        "warning"
      ],
      "hash": null,
      "artifact_id": "9614a84a-20a3-4082-8b5f-351576ad00f1"
    },
    {
      "module_id": "temp.update-singbox.modules.config_generate",
      "path": "temp/update-singbox/modules/config_generate.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "generate_config",
          "docstring": "Generate sing-box configuration from template.",
          "line_range": null,
          "parameters": [
            "outbounds",
            "template_file",
            "config_file",
            "backup_file",
            "excluded_ips"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "generate_config": [
          "open",
          "config.strip",
          "len",
          "json.load",
          "rule.get",
          "next",
          "subprocess.run",
          "os.rename",
          "FileNotFoundError",
          "error",
          "enumerate",
          "info",
          "o.get",
          "f.write",
          "current_config_file.read",
          "outbound.get",
          "current_config.strip",
          "json.dumps"
        ]
      },
      "dependencies": [
        "error",
        "info",
        "json",
        "logging",
        "os",
        "subprocess"
      ],
      "hash": null,
      "artifact_id": "96691ae0-3041-4fca-976b-a404c7ab482c"
    },
    {
      "module_id": "temp.update-singbox.modules.utils",
      "path": "temp/update-singbox/modules/utils.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "handle_temp_file",
          "docstring": "Write content to a temporary file, validate, and move to target path.",
          "line_range": null,
          "parameters": [
            "content",
            "target_path",
            "validate_fn"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "handle_temp_file": [
          "open",
          "shutil.move",
          "error",
          "ValueError",
          "tempfile.gettempdir",
          "f.write",
          "validate_fn",
          "json.dumps"
        ]
      },
      "dependencies": [
        "error",
        "json",
        "logging",
        "os",
        "shutil",
        "tempfile"
      ],
      "hash": null,
      "artifact_id": "a075dba5-7c56-4629-a6e4-6e5ce5370d51"
    },
    {
      "module_id": "temp.update-singbox.modules.server_management",
      "path": "temp/update-singbox/modules/server_management.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "list_servers",
          "docstring": "List all supported outbounds with indices and details.",
          "line_range": null,
          "parameters": [
            "json_data",
            "supported_protocols",
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "generate_server_id",
          "docstring": "Generate a unique ID for a server based on tag, protocol, and port.",
          "line_range": null,
          "parameters": [
            "server"
          ],
          "decorators": []
        },
        {
          "name": "handle_temp_file",
          "docstring": "Handle temporary file creation and validation.",
          "line_range": null,
          "parameters": [
            "content",
            "target_path",
            "validate_fn"
          ],
          "decorators": []
        },
        {
          "name": "load_exclusions",
          "docstring": "Load exclusions from the exclusion file.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "save_exclusions",
          "docstring": "Save exclusions to the exclusion file.",
          "line_range": null,
          "parameters": [
            "exclusions"
          ],
          "decorators": []
        },
        {
          "name": "load_selected_config",
          "docstring": "Load selected configuration from file.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "save_selected_config",
          "docstring": "Save selected configuration to file.",
          "line_range": null,
          "parameters": [
            "selected"
          ],
          "decorators": []
        },
        {
          "name": "apply_exclusions",
          "docstring": "Apply exclusions to the list of server configurations.",
          "line_range": null,
          "parameters": [
            "configs",
            "excluded_ids",
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "exclude_servers",
          "docstring": "Exclude servers by index or name, supporting wildcards.",
          "line_range": null,
          "parameters": [
            "json_data",
            "exclude_list",
            "supported_protocols",
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "remove_exclusions",
          "docstring": "Remove exclusions by index or name.",
          "line_range": null,
          "parameters": [
            "exclude_list",
            "json_data",
            "supported_protocols",
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "view_exclusions",
          "docstring": "View current exclusions in a table format.",
          "line_range": null,
          "parameters": [
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "clear_exclusions",
          "docstring": "Clear all current exclusions.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "list_servers": [
          "isinstance",
          "server.get",
          "print"
        ],
        "generate_server_id": [
          "server.get",
          "identifier.encode",
          "hashlib.sha256"
        ],
        "handle_temp_file": [
          "open",
          "shutil.move",
          "ValueError",
          "tempfile.gettempdir",
          "f.write",
          "validate_fn",
          "json.dumps"
        ],
        "load_exclusions": [
          "open",
          "json.load"
        ],
        "save_exclusions": [
          "handle_temp_file"
        ],
        "load_selected_config": [
          "open",
          "json.load"
        ],
        "save_selected_config": [
          "handle_temp_file"
        ],
        "apply_exclusions": [
          "enumerate",
          "config.get",
          "generate_server_id",
          "valid_configs.append",
          "print"
        ],
        "exclude_servers": [
          "len",
          "json_data.get",
          "int",
          "fnmatch.fnmatch",
          "load_exclusions",
          "new_exclusions.append",
          "save_exclusions",
          "item.isdigit",
          "enumerate",
          "server.get",
          "print",
          "any",
          "generate_server_id"
        ],
        "remove_exclusions": [
          "len",
          "json_data.get",
          "int",
          "load_exclusions",
          "item.startswith",
          "enumerate",
          "server.get",
          "save_exclusions",
          "print",
          "generate_server_id"
        ],
        "view_exclusions": [
          "exclusion.get",
          "print",
          "json.dumps",
          "load_exclusions"
        ],
        "clear_exclusions": [
          "print",
          "os.remove"
        ]
      },
      "dependencies": [
        "datetime",
        "fnmatch",
        "hashlib",
        "json",
        "os",
        "shutil",
        "tempfile"
      ],
      "hash": null,
      "artifact_id": "71d872ee-3b71-4cfb-bb36-22fc0b02e15f"
    },
    {
      "module_id": "temp.update-singbox.modules.service_manage",
      "path": "temp/update-singbox/modules/service_manage.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "manage_service",
          "docstring": "Restart or start sing-box service.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "manage_service": [
          "subprocess.run",
          "error",
          "info",
          "EnvironmentError",
          "shutil.which"
        ]
      },
      "dependencies": [
        "error",
        "info",
        "logging",
        "shutil",
        "subprocess"
      ],
      "hash": null,
      "artifact_id": "2c63e2e1-a84e-48dd-badb-5fc2b432b45c"
    },
    {
      "module_id": "temp.update-singbox.modules.module_installer",
      "path": "temp/update-singbox/modules/module_installer.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "install_dependencies",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "install_dependencies": [
          "subprocess.run",
          "print"
        ]
      },
      "dependencies": [
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "a00f49a1-7d22-4ff2-a958-5d65d6fe9b0a"
    },
    {
      "module_id": ".personal.boss.scripts.boss_cli",
      "path": ".personal/boss/scripts/boss_cli.py",
      "category": "core",
      "module_doc": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u043e\u0434\u0443\u043b\u0438",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": null,
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_status",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_audit",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_context",
          "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_queue",
          "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_summary",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_roadmap",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_financial_plan",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_summary",
          "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_strategy",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_hiring_plan",
          "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_report",
          "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_technical",
          "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context_full",
          "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace_override",
          "docstring": "Emergency workspace overrides.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_capabilities",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_boss_status",
          "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BossCLI",
          "docstring": "Boss CLI - \u043f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f.\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u0444\u0443\u043d\u043a\u0446\u0438\u0438.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "run_interactive",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": null,
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "cmd_ai_status",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_audit",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_context",
              "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_queue",
              "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_summary",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_roadmap",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_financial_plan",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_summary",
              "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_strategy",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_hiring_plan",
              "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_report",
              "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_technical",
              "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context_full",
              "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace_override",
              "docstring": "Emergency workspace overrides.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_capabilities",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_boss_status",
              "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CommandProcessor",
          "BusinessPlanningManager",
          "TeamManagementSystem",
          "Path",
          "CLIConfig",
          "AISelfAwarenessCLIIntegration",
          "CLIUtils",
          "str"
        ],
        "run_interactive": [
          "self.process_command",
          "user_input.lower",
          "input",
          "print"
        ],
        "process_command": [
          "len",
          "command_line.split",
          "cmd.startswith",
          "print"
        ],
        "cmd_ai_status": [
          "json.dumps",
          "print"
        ],
        "cmd_ai_audit": [
          "json.dumps",
          "print"
        ],
        "cmd_ai_context": [
          "json.dumps",
          "print"
        ],
        "cmd_ai_queue": [
          "json.dumps",
          "print"
        ],
        "cmd_ai_summary": [
          "json.dumps",
          "print"
        ],
        "cmd_business_roadmap": [
          "json.dumps",
          "print"
        ],
        "cmd_financial_plan": [
          "json.dumps",
          "print"
        ],
        "cmd_strategic_decision": [
          "json.dumps",
          "print"
        ],
        "cmd_business_analysis": [
          "json.dumps",
          "print"
        ],
        "cmd_business_summary": [
          "json.dumps",
          "print"
        ],
        "cmd_team_strategy": [
          "json.dumps",
          "print"
        ],
        "cmd_team_evaluation": [
          "json.dumps",
          "print"
        ],
        "cmd_hiring_plan": [
          "json.dumps",
          "print"
        ],
        "cmd_team_analysis": [
          "json.dumps",
          "print"
        ],
        "cmd_team_report": [
          "json.dumps",
          "print"
        ],
        "cmd_technical": [
          "print"
        ],
        "cmd_context_full": [
          "print"
        ],
        "cmd_workspace_override": [
          "print"
        ],
        "cmd_capabilities": [
          "json.dumps",
          "bool",
          "print"
        ],
        "cmd_boss_status": [
          "json.dumps",
          "print"
        ],
        "cmd_help": [
          "print"
        ],
        "main": [
          "argparse.ArgumentParser",
          "boss_cli.process_command",
          "boss_cli.run_interactive",
          "BossCLI",
          "parser.parse_args",
          "parser.add_argument"
        ]
      },
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "Any",
        "BusinessPlanningManager",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "Dict",
        "Optional",
        "Path",
        "TeamManagementSystem",
        "argparse",
        "business_planning",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "os",
        "pathlib",
        "sys",
        "team_management",
        "typing"
      ],
      "hash": null,
      "artifact_id": "a92acc22-a3a1-406c-b9a4-523c41c8c898"
    },
    {
      "module_id": ".personal.boss.scripts.team_management",
      "path": ".personal/boss/scripts/team_management.py",
      "category": "core",
      "module_doc": "Team Management Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439, \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
      "functions": [
        {
          "name": "create_team_management_system",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": null,
          "parameters": [
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": null,
          "parameters": [
            "self",
            "boss_data_dir"
          ],
          "decorators": []
        },
        {
          "name": "create_team_strategy",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": null,
          "parameters": [
            "self",
            "strategy_data"
          ],
          "decorators": []
        },
        {
          "name": "record_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": null,
          "parameters": [
            "self",
            "evaluation_data"
          ],
          "decorators": []
        },
        {
          "name": "create_hiring_plan",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": null,
          "parameters": [
            "self",
            "plan_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_team_performance",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_team_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_team_report",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_strategy",
          "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.",
          "line_range": null,
          "parameters": [
            "self",
            "strategy"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_evaluations",
          "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.",
          "line_range": null,
          "parameters": [
            "self",
            "evaluations"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.",
          "line_range": null,
          "parameters": [
            "self",
            "strategy",
            "evaluations"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TeamManagementSystem",
          "docstring": "\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
              "line_range": null,
              "parameters": [
                "self",
                "boss_data_dir"
              ]
            },
            {
              "name": "create_team_strategy",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
              "line_range": null,
              "parameters": [
                "self",
                "strategy_data"
              ]
            },
            {
              "name": "record_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": null,
              "parameters": [
                "self",
                "evaluation_data"
              ]
            },
            {
              "name": "create_hiring_plan",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": null,
              "parameters": [
                "self",
                "plan_data"
              ]
            },
            {
              "name": "analyze_team_performance",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_team_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_team_report",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_summarize_strategy",
              "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.",
              "line_range": null,
              "parameters": [
                "self",
                "strategy"
              ]
            },
            {
              "name": "_summarize_evaluations",
              "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.",
              "line_range": null,
              "parameters": [
                "self",
                "evaluations"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.",
              "line_range": null,
              "parameters": [
                "self",
                "strategy",
                "evaluations"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "default"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "create_team_strategy": [
          "logger.info",
          "self._save_data",
          "datetime.now",
          "logger.error"
        ],
        "record_team_evaluation": [
          "logger.info",
          "datetime.now",
          "evaluations.append",
          "logger.error",
          "isinstance",
          "self._save_data",
          "self._load_data"
        ],
        "create_hiring_plan": [
          "logger.info",
          "self._save_data",
          "datetime.now",
          "logger.error"
        ],
        "analyze_team_performance": [
          "len",
          "datetime.now",
          "logger.error",
          "bool",
          "isinstance",
          "self._load_data"
        ],
        "get_team_summary": [
          "len",
          "datetime.now",
          "logger.error",
          "strategy.get",
          "bool",
          "hiring_plans.get",
          "isinstance",
          "self._load_data"
        ],
        "generate_team_report": [
          "datetime.now",
          "logger.error",
          "self._summarize_strategy",
          "self._summarize_evaluations",
          "self._generate_recommendations",
          "self._load_data"
        ],
        "_summarize_strategy": [
          "strategy.get"
        ],
        "_summarize_evaluations": [
          "len",
          "isinstance"
        ],
        "_generate_recommendations": [
          "len",
          "recommendations.append"
        ],
        "_load_data": [
          "logger.error",
          "file_path.open",
          "file_path.exists",
          "json.load"
        ],
        "_save_data": [
          "logger.error",
          "json.dump",
          "file_path.open"
        ],
        "create_team_management_system": [
          "TeamManagementSystem"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "0c6ad396-bbd6-419e-8754-463e92b3aaad"
    },
    {
      "module_id": ".personal.boss.scripts.business_planning",
      "path": ".personal/boss/scripts/business_planning.py",
      "category": "core",
      "module_doc": "Business Planning Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
      "functions": [
        {
          "name": "create_business_planning_manager",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
          "line_range": null,
          "parameters": [
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
          "line_range": null,
          "parameters": [
            "self",
            "boss_data_dir"
          ],
          "decorators": []
        },
        {
          "name": "create_business_roadmap",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.",
          "line_range": null,
          "parameters": [
            "self",
            "roadmap_data"
          ],
          "decorators": []
        },
        {
          "name": "create_financial_plan",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.",
          "line_range": null,
          "parameters": [
            "self",
            "plan_data"
          ],
          "decorators": []
        },
        {
          "name": "record_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.",
          "line_range": null,
          "parameters": [
            "self",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_business_metrics",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_business_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BusinessPlanningManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
              "line_range": null,
              "parameters": [
                "self",
                "boss_data_dir"
              ]
            },
            {
              "name": "create_business_roadmap",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.",
              "line_range": null,
              "parameters": [
                "self",
                "roadmap_data"
              ]
            },
            {
              "name": "create_financial_plan",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.",
              "line_range": null,
              "parameters": [
                "self",
                "plan_data"
              ]
            },
            {
              "name": "record_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.",
              "line_range": null,
              "parameters": [
                "self",
                "decision_data"
              ]
            },
            {
              "name": "analyze_business_metrics",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_business_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "default"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "create_business_roadmap": [
          "logger.info",
          "self._save_data",
          "datetime.now",
          "logger.error"
        ],
        "create_financial_plan": [
          "logger.info",
          "self._save_data",
          "datetime.now",
          "logger.error"
        ],
        "record_strategic_decision": [
          "logger.info",
          "datetime.now",
          "logger.error",
          "decisions.append",
          "decision_data.get",
          "isinstance",
          "self._save_data",
          "self._load_data"
        ],
        "analyze_business_metrics": [
          "len",
          "datetime.now",
          "logger.error",
          "isinstance",
          "self._load_data"
        ],
        "get_business_summary": [
          "len",
          "datetime.now",
          "logger.error",
          "financial.get",
          "bool",
          "roadmap.get",
          "isinstance",
          "self._load_data"
        ],
        "_load_data": [
          "logger.error",
          "file_path.open",
          "file_path.exists",
          "json.load"
        ],
        "_save_data": [
          "logger.error",
          "json.dump",
          "file_path.open"
        ],
        "create_business_planning_manager": [
          "BusinessPlanningManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "8a27a169-4bb6-449f-b8f8-d8cf27e7489f"
    },
    {
      "module_id": ".personal.boss.scripts.__init__",
      "path": ".personal/boss/scripts/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "5519a6b5-29e6-49da-b98f-91305f81600d"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.docs.cache",
      "path": "backup_before_separation_20250529_152219/docs/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": null,
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": null,
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "open",
          "logging.error",
          "str",
          "logging.info",
          "f.read",
          "Path",
          "json_file.exists",
          "hashlib.sha256",
          "content.encode",
          "json.dumps"
        ],
        "get_metadata": [
          "cursor.fetchone",
          "json.loads"
        ],
        "get_full_json": [
          "open",
          "cursor.fetchone",
          "logging.error",
          "json.load"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "4cbe0c21-5834-462e-a281-9f7102874be5"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.docs.self_run",
      "path": "backup_before_separation_20250529_152219/docs/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "prompt.lower",
          "struct.get",
          "filter_json",
          "module.get",
          "any"
        ],
        "attach_to_llm_request": [
          "logging.error",
          "logging.info",
          "prompt.lower",
          "filter_struct",
          "cache.cache_json",
          "Path",
          "select_json",
          "cache.get_metadata",
          "cache.get_full_json",
          "context_file.exists",
          "filter_json",
          "json.dumps"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c8e5ca42-b4f4-435c-af45-a88896925fa3"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.docs.json_selector",
      "path": "backup_before_separation_20250529_152219/docs/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": null,
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": null,
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "isinstance",
          "filtered.append",
          "data.get",
          "item.get"
        ],
        "select_json": [
          "open",
          "f.seek",
          "ijson.parse",
          "current_item.get",
          "logging.error",
          "json.load",
          "Path",
          "json_file.exists",
          "prefix.startswith",
          "filtered.append",
          "path.append",
          "filter_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "831b0148-7bd2-43b1-ba7e-e9e1cbd339e0"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.docs.cli",
      "path": "backup_before_separation_20250529_152219/docs/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.strip",
          "gitignore_path.exists",
          "gitignore_path.open",
          "logging.error",
          "Path",
          "line.startswith"
        ],
        "load_config": [
          "config_path\u30aa\u30fc\u30d7\u30f3",
          "logging.error",
          "toml.load",
          "Path",
          "config_path.exists"
        ],
        "read_file_content": [
          "logging.error",
          "f.read",
          "path.is_file",
          "Path",
          "path.open"
        ],
        "write_to_file": [
          "logging.warning",
          "logging.info",
          "logging.error",
          "file_path.open",
          "Path",
          "base_path.mkdir",
          "f.write",
          "file_path.exists",
          "str"
        ],
        "parse_files_from_response": [
          "content.strip",
          "filename.strip",
          "re.findall",
          "files.append"
        ],
        "interactive": [
          "attach_to_llm_request",
          "cache.close",
          "sorted",
          "os.listdir",
          "write_match.group",
          "logging.warning",
          "Path",
          "load_gitignore",
          "write_dir.startswith",
          "scan_match.group",
          "files_to_write.append",
          "JSONCache",
          "client.query",
          "print",
          "write_to_file",
          "read_file_content",
          "parse",
          "user_input.lower",
          "json.dumps",
          "input",
          "logging.error",
          "parse_files_from_response",
          "re.search",
          "LLMClient",
          "get_folder_structure"
        ],
        "parse": [
          "logging.warning",
          "logging.info",
          "cache.cache_json",
          "cache.close",
          "logging.error",
          "Path",
          "load_gitignore",
          "load_config",
          "json.dump",
          "config.get",
          "JSONCache",
          "generate_json"
        ],
        "query": [
          "logging.error",
          "logging.info",
          "client.query",
          "cache.close",
          "Path",
          "json.dump",
          "LLMClient",
          "JSONCache"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "parse_parser.add_argument",
          "parser.add_subparsers",
          "dogfood_parser.add_argument",
          "argparse.ArgumentParser",
          "interactive_parser.add_argument",
          "interactive",
          "review_parser.add_argument",
          "dogfood",
          "query_parser.add_argument",
          "context_parser.add_argument",
          "parse",
          "query",
          "subparsers.add_parser",
          "review",
          "parser.parse_args",
          "asyncio.run",
          "context"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "fd83e87f-0f79-4a04-9fdf-af3c39a29647"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.workflow_orchestrator",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/workflow_orchestrator.py",
      "category": "core",
      "module_doc": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture\nExtends CopilotContextManager and SmartContextOrchestrator instead of duplicating",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface that integrates with existing llmstruct architecture",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root",
            "debug"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_onboarding_guide",
          "docstring": "Generate comprehensive AI onboarding guide using existing architecture",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_project_overview_from_struct",
          "docstring": "Get project overview from struct.json analysis",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_existing_architecture_guide",
          "docstring": "Guide to existing llmstruct architecture",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_copilot_integration_guide",
          "docstring": "Guide for proper CopilotContextManager usage",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_orchestration_guide",
          "docstring": "Guide for SmartContextOrchestrator usage",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_analysis_guide",
          "docstring": "Guide for proper struct.json analysis approach",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_current_context",
          "docstring": "Get comprehensive current context using existing architecture",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_analysis",
          "docstring": "Analyze struct.json for current codebase state",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_architecture_from_struct",
          "docstring": "Analyze architecture patterns from struct.json",
          "line_range": null,
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_function_duplication",
          "docstring": "Analyze function duplication across modules",
          "line_range": null,
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_metrics",
          "docstring": "Calculate complexity metrics from struct.json",
          "line_range": null,
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_score",
          "docstring": "Calculate overall complexity score",
          "line_range": null,
          "parameters": [
            "self",
            "stats"
          ],
          "decorators": []
        },
        {
          "name": "_get_orchestrator_state",
          "docstring": "Get SmartContextOrchestrator state",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_codebase_for_duplicates",
          "docstring": "Analyze codebase for duplicate functions using struct.json",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "sync_with_existing_architecture",
          "docstring": "Sync with existing llmstruct architecture instead of duplicating",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "create_task",
          "docstring": "Create new task (this is new functionality, not duplication)",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "description",
            "priority",
            "tags",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_active_tasks",
          "docstring": "Get all active tasks",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_json_safe",
          "docstring": "Safe JSON loading with error handling",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_save_json_safe",
          "docstring": "Safe JSON saving with error handling",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_get_active_session_context",
          "docstring": "Get current session context",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_identify_key_components",
          "docstring": "Identify key components from struct analysis",
          "line_range": null,
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_patterns",
          "docstring": "Define workflow patterns that integrate with existing architecture",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_available_commands",
          "docstring": "Available commands that work with existing architecture",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskStatus",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "SessionType",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "Task",
          "docstring": "Structured task representation",
          "line_range": null,
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "Session",
          "docstring": "AI work session with context and goals",
          "line_range": null,
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "WorkflowOrchestrator",
          "docstring": "Integration layer that extends existing llmstruct architecture\nUses CopilotContextManager, SmartContextOrchestrator, and struct.json analysis",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root",
                "debug"
              ]
            },
            {
              "name": "get_ai_onboarding_guide",
              "docstring": "Generate comprehensive AI onboarding guide using existing architecture",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_project_overview_from_struct",
              "docstring": "Get project overview from struct.json analysis",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_existing_architecture_guide",
              "docstring": "Guide to existing llmstruct architecture",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_copilot_integration_guide",
              "docstring": "Guide for proper CopilotContextManager usage",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_context_orchestration_guide",
              "docstring": "Guide for SmartContextOrchestrator usage",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_analysis_guide",
              "docstring": "Guide for proper struct.json analysis approach",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_current_context",
              "docstring": "Get comprehensive current context using existing architecture",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_analysis",
              "docstring": "Analyze struct.json for current codebase state",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_architecture_from_struct",
              "docstring": "Analyze architecture patterns from struct.json",
              "line_range": null,
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_analyze_function_duplication",
              "docstring": "Analyze function duplication across modules",
              "line_range": null,
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_calculate_complexity_metrics",
              "docstring": "Calculate complexity metrics from struct.json",
              "line_range": null,
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_calculate_complexity_score",
              "docstring": "Calculate overall complexity score",
              "line_range": null,
              "parameters": [
                "self",
                "stats"
              ]
            },
            {
              "name": "_get_orchestrator_state",
              "docstring": "Get SmartContextOrchestrator state",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_codebase_for_duplicates",
              "docstring": "Analyze codebase for duplicate functions using struct.json",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "sync_with_existing_architecture",
              "docstring": "Sync with existing llmstruct architecture instead of duplicating",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "create_task",
              "docstring": "Create new task (this is new functionality, not duplication)",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "description",
                "priority",
                "tags",
                "dependencies"
              ]
            },
            {
              "name": "get_active_tasks",
              "docstring": "Get all active tasks",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_json_safe",
              "docstring": "Safe JSON loading with error handling",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_save_json_safe",
              "docstring": "Safe JSON saving with error handling",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            },
            {
              "name": "_get_active_session_context",
              "docstring": "Get current session context",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_identify_key_components",
              "docstring": "Identify key components from struct analysis",
              "line_range": null,
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_get_workflow_patterns",
              "docstring": "Define workflow patterns that integrate with existing architecture",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_available_commands",
              "docstring": "Available commands that work with existing architecture",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "time.time",
          "SmartContextOrchestrator",
          "CopilotContextManager",
          "Path",
          "CLIConfig",
          "UniversalConverter",
          "SystemCapabilityDiscovery",
          "str",
          "print"
        ],
        "get_ai_onboarding_guide": [
          "self._get_copilot_integration_guide",
          "self._get_struct_analysis_guide",
          "self._get_existing_architecture_guide",
          "self._get_available_commands",
          "self._get_project_overview_from_struct",
          "self._get_context_orchestration_guide",
          "self._get_workflow_patterns"
        ],
        "_get_project_overview_from_struct": [
          "open",
          "struct_data.get",
          "struct_path.exists",
          "len",
          "json.load",
          "self._identify_key_components",
          "logger.warning",
          "self._analyze_architecture_from_struct"
        ],
        "_get_existing_architecture_guide": [],
        "_get_copilot_integration_guide": [],
        "_get_context_orchestration_guide": [],
        "_get_struct_analysis_guide": [],
        "get_current_context": [
          "self._get_struct_analysis",
          "time.time",
          "self._get_active_session_context",
          "logger.warning",
          "isinstance",
          "self.get_active_tasks",
          "self._get_orchestrator_state",
          "str",
          "print"
        ],
        "_get_struct_analysis": [
          "open",
          "len",
          "struct_path.exists",
          "struct_data.get",
          "json.load",
          "self._calculate_complexity_metrics",
          "str",
          "logger.error",
          "self._analyze_function_duplication",
          "self._analyze_architecture_from_struct",
          "time.time",
          "print"
        ],
        "_analyze_architecture_from_struct": [
          "struct_data.get",
          "len",
          "list",
          "directories.keys",
          "directories.items",
          "Path"
        ],
        "_analyze_function_duplication": [
          "struct_data.get",
          "module.get",
          "function_names.items",
          "len"
        ],
        "_calculate_complexity_metrics": [
          "struct_data.get",
          "len",
          "round",
          "m.get",
          "sum",
          "self._calculate_complexity_score",
          "stats.get"
        ],
        "_calculate_complexity_score": [
          "round",
          "stats.get"
        ],
        "_get_orchestrator_state": [
          "str"
        ],
        "analyze_codebase_for_duplicates": [
          "self._get_struct_analysis",
          "len",
          "struct_analysis.get",
          "duplication.get",
          "recommendations.append",
          "time.time",
          "print"
        ],
        "sync_with_existing_architecture": [
          "open",
          "json.dump",
          "logger.error",
          "str"
        ],
        "create_task": [
          "logger.info",
          "self._load_json_safe",
          "uuid.uuid4",
          "self._save_json_safe",
          "asdict",
          "Task",
          "str"
        ],
        "get_active_tasks": [
          "self._load_json_safe",
          "t.get"
        ],
        "_load_json_safe": [
          "open",
          "logger.error",
          "file_path.exists",
          "json.load"
        ],
        "_save_json_safe": [
          "open",
          "json.dump",
          "logger.error"
        ],
        "_get_active_session_context": [
          "asdict"
        ],
        "_identify_key_components": [
          "struct_data.get",
          "key_components.append",
          "module.get",
          "len"
        ],
        "_get_workflow_patterns": [],
        "_get_available_commands": [],
        "main": [
          "len",
          "argparse.ArgumentParser",
          "context.get",
          "WorkflowOrchestrator",
          "results.items",
          "orchestrator.get_current_context",
          "json.dumps",
          "orchestrator.analyze_codebase_for_duplicates",
          "orchestrator.get_ai_onboarding_guide",
          "orchestrator.sync_with_existing_architecture",
          "parser.parse_args",
          "parser.add_argument",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "SystemCapabilityDiscovery",
        "Union",
        "UniversalConverter",
        "ai_self_awareness",
        "argparse",
        "asdict",
        "cli_config",
        "context_orchestrator",
        "copilot",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "os",
        "parsers.universal_converter",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "68b453ff-1f5d-4ca7-adb6-6cbb123348e4"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.cli_config",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/cli_config.py",
      "category": "core",
      "module_doc": "CLI configuration management.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize configuration manager.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from llmstruct.toml.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "Get cache configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "Get Copilot configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "Get queue configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "Get context configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_gitignore_patterns",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "Get directories to exclude from scanning.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "Get file patterns to include.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "Get file patterns to exclude.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "Get maximum file size for processing (in bytes).",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_auto_update_config",
          "docstring": "Get auto-update configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_auto_update_enabled",
          "docstring": "Check if auto-update is enabled.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "Get path to struct.json file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "Get path to context file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "Save current configuration to file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_config",
          "docstring": "Update configuration value.",
          "line_range": null,
          "parameters": [
            "self",
            "section",
            "key",
            "value"
          ],
          "decorators": []
        },
        {
          "name": "reload_config",
          "docstring": "Reload configuration from file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIConfig",
          "docstring": "Manages CLI configuration from llmstruct.toml and other sources.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize configuration manager.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from llmstruct.toml.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cache_config",
              "docstring": "Get cache configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_copilot_config",
              "docstring": "Get Copilot configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_queue_config",
              "docstring": "Get queue configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_config",
              "docstring": "Get context configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_gitignore_patterns",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "Get directories to exclude from scanning.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_include_patterns",
              "docstring": "Get file patterns to include.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "Get file patterns to exclude.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_max_file_size",
              "docstring": "Get maximum file size for processing (in bytes).",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_auto_update_config",
              "docstring": "Get auto-update configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_auto_update_enabled",
              "docstring": "Check if auto-update is enabled.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_struct_file_path",
              "docstring": "Get path to struct.json file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_file_path",
              "docstring": "Get path to context file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_config",
              "docstring": "Save current configuration to file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_config",
              "docstring": "Update configuration value.",
              "line_range": null,
              "parameters": [
                "self",
                "section",
                "key",
                "value"
              ]
            },
            {
              "name": "reload_config",
              "docstring": "Reload configuration from file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path"
        ],
        "_load_config": [
          "toml.load",
          "logging.error"
        ],
        "get_cache_config": [],
        "get_copilot_config": [],
        "get_queue_config": [],
        "get_context_config": [],
        "get_gitignore_patterns": [
          "line.strip",
          "gitignore_path.exists",
          "gitignore_path.open",
          "logging.error",
          "Path",
          "line.startswith"
        ],
        "get_exclude_dirs": [
          "parsing_config.get",
          "set",
          "list",
          "cli_config.get"
        ],
        "get_include_patterns": [
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_exclude_patterns": [
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_max_file_size": [],
        "get_auto_update_config": [],
        "is_auto_update_enabled": [
          "self.get_auto_update_config"
        ],
        "get_struct_file_path": [],
        "get_context_file_path": [],
        "save_config": [
          "toml.dump",
          "logging.error"
        ],
        "update_config": [
          "self.save_config"
        ],
        "reload_config": [
          "self._load_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "logging",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b81d23ee-f2f2-419a-9be8-05a8c9868aae"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.ai_self_monitor",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/ai_self_monitor.py",
      "category": "core",
      "module_doc": "AI Self-Monitoring System\nTracks AI usage patterns and ensures proper llmstruct integration.",
      "functions": [
        {
          "name": "initialize_ai_monitor",
          "docstring": "Initialize global AI monitor.",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_monitor",
          "docstring": "Get current AI monitor instance.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "record_ai_usage",
          "docstring": "Global function to record AI usage.",
          "line_range": null,
          "parameters": [
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "record_ai_interaction",
          "docstring": "Record an AI interaction for monitoring.",
          "line_range": null,
          "parameters": [
            "self",
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_interaction_patterns",
          "docstring": "Analyze patterns in AI interaction.",
          "line_range": null,
          "parameters": [
            "self",
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_effectiveness_score",
          "docstring": "Calculate effectiveness score for interaction.",
          "line_range": null,
          "parameters": [
            "self",
            "patterns",
            "tools_used",
            "used_llmstruct"
          ],
          "decorators": []
        },
        {
          "name": "_check_immediate_feedback",
          "docstring": "Check if immediate feedback/correction is needed.",
          "line_range": null,
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_log_immediate_feedback",
          "docstring": "Log immediate feedback message.",
          "line_range": null,
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "analyze_behavior_trends",
          "docstring": "Analyze AI behavior trends over specified period.",
          "line_range": null,
          "parameters": [
            "self",
            "days"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "Generate specific recommendations for improvement.",
          "line_range": null,
          "parameters": [
            "self",
            "llmstruct_usage",
            "context_awareness",
            "tool_diversity",
            "effectiveness"
          ],
          "decorators": []
        },
        {
          "name": "get_real_time_guidance",
          "docstring": "Get real-time guidance for current query.",
          "line_range": null,
          "parameters": [
            "self",
            "current_query"
          ],
          "decorators": []
        },
        {
          "name": "_load_events",
          "docstring": "Load events from disk.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_events",
          "docstring": "Save events to disk.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_analysis",
          "docstring": "Save behavior analysis to disk.",
          "line_range": null,
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "get_monitoring_report",
          "docstring": "Get comprehensive monitoring report.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AIBehaviorPattern",
          "docstring": "AI behavior patterns to monitor.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AIUsageEvent",
          "docstring": "Single AI usage event.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "AIBehaviorAnalysis",
          "docstring": "Analysis of AI behavior patterns.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "AISelfMonitor",
          "docstring": "Monitors AI behavior and ensures proper llmstruct integration.\nProvides feedback and corrective guidance.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "record_ai_interaction",
              "docstring": "Record an AI interaction for monitoring.",
              "line_range": null,
              "parameters": [
                "self",
                "query",
                "tools_used",
                "used_llmstruct",
                "context_tags",
                "metadata"
              ]
            },
            {
              "name": "_analyze_interaction_patterns",
              "docstring": "Analyze patterns in AI interaction.",
              "line_range": null,
              "parameters": [
                "self",
                "query",
                "tools_used",
                "used_llmstruct",
                "context_tags"
              ]
            },
            {
              "name": "_calculate_effectiveness_score",
              "docstring": "Calculate effectiveness score for interaction.",
              "line_range": null,
              "parameters": [
                "self",
                "patterns",
                "tools_used",
                "used_llmstruct"
              ]
            },
            {
              "name": "_check_immediate_feedback",
              "docstring": "Check if immediate feedback/correction is needed.",
              "line_range": null,
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_log_immediate_feedback",
              "docstring": "Log immediate feedback message.",
              "line_range": null,
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "analyze_behavior_trends",
              "docstring": "Analyze AI behavior trends over specified period.",
              "line_range": null,
              "parameters": [
                "self",
                "days"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "Generate specific recommendations for improvement.",
              "line_range": null,
              "parameters": [
                "self",
                "llmstruct_usage",
                "context_awareness",
                "tool_diversity",
                "effectiveness"
              ]
            },
            {
              "name": "get_real_time_guidance",
              "docstring": "Get real-time guidance for current query.",
              "line_range": null,
              "parameters": [
                "self",
                "current_query"
              ]
            },
            {
              "name": "_load_events",
              "docstring": "Load events from disk.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_events",
              "docstring": "Save events to disk.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_analysis",
              "docstring": "Save behavior analysis to disk.",
              "line_range": null,
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "get_monitoring_report",
              "docstring": "Get comprehensive monitoring report.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logger.info",
          "Path",
          "self._load_events"
        ],
        "record_ai_interaction": [
          "len",
          "datetime.now",
          "self._check_immediate_feedback",
          "AIUsageEvent",
          "self._analyze_interaction_patterns",
          "self._calculate_effectiveness_score",
          "self._save_events"
        ],
        "_analyze_interaction_patterns": [
          "any",
          "patterns.append",
          "query.lower"
        ],
        "_calculate_effectiveness_score": [
          "min",
          "set",
          "pattern_scores.get",
          "len"
        ],
        "_check_immediate_feedback": [
          "self._log_immediate_feedback",
          "any"
        ],
        "_log_immediate_feedback": [
          "logger.warning",
          "print"
        ],
        "analyze_behavior_trends": [
          "len",
          "set",
          "timedelta",
          "datetime.now",
          "AIBehaviorAnalysis",
          "improvements.append",
          "self._save_analysis",
          "all_tools.update",
          "datetime.fromisoformat",
          "self._generate_recommendations",
          "sum",
          "strengths.append",
          "any"
        ],
        "_generate_recommendations": [
          "recommendations.append",
          "recommendations.extend"
        ],
        "get_real_time_guidance": [
          "guidance.append",
          "any",
          "current_query.lower"
        ],
        "_load_events": [
          "open",
          "len",
          "logger.info",
          "json.load",
          "AIUsageEvent",
          "logger.error"
        ],
        "_save_events": [
          "open",
          "json.dump",
          "logger.error",
          "asdict"
        ],
        "_save_analysis": [
          "open",
          "json.dump",
          "logger.error",
          "asdict"
        ],
        "get_monitoring_report": [
          "self.analyze_behavior_trends",
          "datetime.now",
          "len",
          "chr"
        ],
        "initialize_ai_monitor": [
          "AISelfMonitor"
        ],
        "get_ai_monitor": [],
        "record_ai_usage": [
          "_monitor_instance.record_ai_interaction"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "20974aa5-9212-4764-9fcb-6edcd627625d"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.grok",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "len",
          "prompt.split",
          "response.raise_for_status",
          "response.json"
        ],
        "test_grok": [
          "GrokClient",
          "client.generate",
          "time.perf_counter"
        ]
      },
      "dependencies": [
        "requests",
        "time"
      ],
      "hash": null,
      "artifact_id": "3004eaa4-0195-4756-b677-a1fb579839d9"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.cli_commands",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/cli_commands.py",
      "category": "core",
      "module_doc": "CLI command processing and handlers.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize command processor.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir",
            "config",
            "utils"
          ],
          "decorators": []
        },
        {
          "name": "set_cache",
          "docstring": "Set cache instance.",
          "line_range": null,
          "parameters": [
            "self",
            "cache"
          ],
          "decorators": []
        },
        {
          "name": "set_copilot",
          "docstring": "Set Copilot manager instance.",
          "line_range": null,
          "parameters": [
            "self",
            "copilot_manager"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "Process a command starting with /.",
          "line_range": null,
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "process_prompt",
          "docstring": "Process a regular user prompt (not a command).",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Show help information.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace",
          "docstring": "Handle workspace state and permissions management.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_mode",
          "docstring": "Handle context mode operations with workspace integration.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_view",
          "docstring": "View file or directory contents.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_write",
          "docstring": "Write content to a file.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_queue",
          "docstring": "Handle queue operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_cache",
          "docstring": "Handle cache operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_copilot",
          "docstring": "Handle Copilot operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_config",
          "docstring": "Handle configuration operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Show system status.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_backup",
          "docstring": "Create backup of a file.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_parse",
          "docstring": "Parse project structure.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_audit",
          "docstring": "Handle audit operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_auto_update",
          "docstring": "Handle auto-update operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_struct_status",
          "docstring": "Handle struct status operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context",
          "docstring": "Handle context operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_session",
          "docstring": "Handle session operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CommandProcessor",
          "docstring": "Processes CLI commands and user prompts.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize command processor.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir",
                "config",
                "utils"
              ]
            },
            {
              "name": "set_cache",
              "docstring": "Set cache instance.",
              "line_range": null,
              "parameters": [
                "self",
                "cache"
              ]
            },
            {
              "name": "set_copilot",
              "docstring": "Set Copilot manager instance.",
              "line_range": null,
              "parameters": [
                "self",
                "copilot_manager"
              ]
            },
            {
              "name": "process_command",
              "docstring": "Process a command starting with /.",
              "line_range": null,
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "process_prompt",
              "docstring": "Process a regular user prompt (not a command).",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Show help information.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace",
              "docstring": "Handle workspace state and permissions management.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_mode",
              "docstring": "Handle context mode operations with workspace integration.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_view",
              "docstring": "View file or directory contents.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_write",
              "docstring": "Write content to a file.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_queue",
              "docstring": "Handle queue operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_cache",
              "docstring": "Handle cache operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_copilot",
              "docstring": "Handle Copilot operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_config",
              "docstring": "Handle configuration operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Show system status.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_backup",
              "docstring": "Create backup of a file.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_parse",
              "docstring": "Parse project structure.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_audit",
              "docstring": "Handle audit operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_auto_update",
              "docstring": "Handle auto-update operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_struct_status",
              "docstring": "Handle struct status operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context",
              "docstring": "Handle context operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_session",
              "docstring": "Handle session operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "WorkspaceStateManager",
          "print"
        ],
        "set_cache": [],
        "set_copilot": [],
        "process_command": [
          "len",
          "command_line.strip",
          "logging.error",
          "command_line.split",
          "print"
        ],
        "process_prompt": [
          "CopilotEvent",
          "len",
          "logging.warning",
          "logging.info",
          "context_info.get",
          "logging.error",
          "get_optimized_context",
          "context_data.get",
          "print",
          "prompt.strip"
        ],
        "cmd_help": [
          "print"
        ],
        "cmd_workspace": [
          "len",
          "action_args.split",
          "int",
          "logging.error",
          "override.get",
          "state.get",
          "result.get",
          "boundaries.get",
          "entry.get",
          "args.strip",
          "permissions.get",
          "print"
        ],
        "cmd_mode": [
          "len",
          "args.lower",
          "metrics.get",
          "get_optimized_context",
          "result.get",
          "context_data.get",
          "args.upper",
          "re.findall",
          "args.strip",
          "permissions.get",
          "print"
        ],
        "cmd_view": [
          "os.listdir",
          "args.strip",
          "sorted",
          "print"
        ],
        "cmd_write": [
          "len",
          "content.startswith",
          "content.endswith",
          "args.split",
          "print"
        ],
        "cmd_queue": [
          "open",
          "len",
          "json.load",
          "queue_data.get",
          "cmd.get",
          "os.remove",
          "enumerate",
          "args.strip",
          "print"
        ],
        "cmd_cache": [
          "len",
          "os.listdir",
          "print",
          "args.strip",
          "stats.get"
        ],
        "cmd_copilot": [
          "open",
          "json.load",
          "print",
          "args.strip",
          "json.dumps"
        ],
        "cmd_config": [
          "json.dumps",
          "args.strip",
          "print"
        ],
        "cmd_status": [
          "print"
        ],
        "cmd_backup": [
          "args.strip",
          "print"
        ],
        "cmd_parse": [
          "generate_json",
          "print"
        ],
        "cmd_audit": [
          "args.strip",
          "print"
        ],
        "handle_auto_update": [
          "generate_json",
          "print"
        ],
        "handle_struct_status": [
          "open",
          "len",
          "struct_data.get",
          "json.load",
          "os.stat",
          "datetime.fromtimestamp",
          "print"
        ],
        "cmd_context": [
          "len",
          "metrics.get",
          "get_optimized_context",
          "context_data.get",
          "args.strip",
          "print"
        ],
        "cmd_session": [
          "len",
          "datetime.now",
          "state.get",
          "args.strip",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CopilotContextManager",
        "CopilotEvent",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "WorkspaceStateManager",
        "cli_config",
        "cli_utils",
        "copilot",
        "create_context_orchestrator",
        "datetime",
        "generate_json",
        "get_optimized_context",
        "get_optimized_context_for_scenario",
        "initialize_copilot",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "sys",
        "trigger_copilot_event",
        "typing",
        "workspace"
      ],
      "hash": null,
      "artifact_id": "38a6eea3-8c22-499e-ad29-983c28771f9b"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.context_orchestrator",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/context_orchestrator.py",
      "category": "core",
      "module_doc": "Smart Context Orchestration for LLMStruct\nOptimizes context loading for different LLM usage scenarios",
      "functions": [
        {
          "name": "create_context_orchestrator",
          "docstring": "Factory function to create context orchestrator.",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context for scenario - convenience function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (cli_direct, vscode_copilot, session_work)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": null,
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load context orchestration configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_scenario",
          "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
          "line_range": null,
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "custom_budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_budget_for_scenario",
          "docstring": "Create budget configuration for scenario.",
          "line_range": null,
          "parameters": [
            "self",
            "scenario_config"
          ],
          "decorators": []
        },
        {
          "name": "_load_full_context",
          "docstring": "Load complete context without token restrictions.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_extract_relationship_summary",
          "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438",
          "line_range": null,
          "parameters": [
            "self",
            "max_modules"
          ],
          "decorators": []
        },
        {
          "name": "_load_focused_context",
          "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load session-specific context.",
          "line_range": null,
          "parameters": [
            "self",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_minimal_context",
          "docstring": "Load minimal context for quick operations.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_source_with_filtering",
          "docstring": "Load source with optional filtering based on budget.",
          "line_range": null,
          "parameters": [
            "self",
            "source_name",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_file_context",
          "docstring": "Get context specific to a file.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_essential_parts",
          "docstring": "Extract essential parts of data to fit token budget.",
          "line_range": null,
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_filter_for_current_session",
          "docstring": "Filter data to items relevant to current session.",
          "line_range": null,
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_summary",
          "docstring": "Extract summary information from data.",
          "line_range": null,
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_apply_section_filtering",
          "docstring": "Apply section filtering to exclude specified sections.",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "exclude_sections"
          ],
          "decorators": []
        },
        {
          "name": "_update_metrics",
          "docstring": "Update performance metrics.",
          "line_range": null,
          "parameters": [
            "self",
            "scenario",
            "context",
            "load_time"
          ],
          "decorators": []
        },
        {
          "name": "get_metrics_summary",
          "docstring": "Get summary of context loading metrics.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_metrics",
          "docstring": "Save metrics to file for analysis.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextMode",
          "docstring": "Context loading modes for different scenarios.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLevel",
          "docstring": "Progressive context levels with token budgets.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextBudget",
          "docstring": "Token budget configuration for context loading.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextMetrics",
          "docstring": "Metrics for context loading performance.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "SmartContextOrchestrator",
          "docstring": "Orchestrates context loading based on usage scenario and token budget.\nProvides optimized context for different LLM integration patterns.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load context orchestration configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_scenario",
              "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
              "line_range": null,
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "custom_budget"
              ]
            },
            {
              "name": "_get_budget_for_scenario",
              "docstring": "Create budget configuration for scenario.",
              "line_range": null,
              "parameters": [
                "self",
                "scenario_config"
              ]
            },
            {
              "name": "_load_full_context",
              "docstring": "Load complete context without token restrictions.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_extract_relationship_summary",
              "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438",
              "line_range": null,
              "parameters": [
                "self",
                "max_modules"
              ]
            },
            {
              "name": "_load_focused_context",
              "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "budget"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load session-specific context.",
              "line_range": null,
              "parameters": [
                "self",
                "budget"
              ]
            },
            {
              "name": "_load_minimal_context",
              "docstring": "Load minimal context for quick operations.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_source_with_filtering",
              "docstring": "Load source with optional filtering based on budget.",
              "line_range": null,
              "parameters": [
                "self",
                "source_name",
                "budget"
              ]
            },
            {
              "name": "_get_file_context",
              "docstring": "Get context specific to a file.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_essential_parts",
              "docstring": "Extract essential parts of data to fit token budget.",
              "line_range": null,
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_filter_for_current_session",
              "docstring": "Filter data to items relevant to current session.",
              "line_range": null,
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_extract_summary",
              "docstring": "Extract summary information from data.",
              "line_range": null,
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_apply_section_filtering",
              "docstring": "Apply section filtering to exclude specified sections.",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "exclude_sections"
              ]
            },
            {
              "name": "_update_metrics",
              "docstring": "Update performance metrics.",
              "line_range": null,
              "parameters": [
                "self",
                "scenario",
                "context",
                "load_time"
              ]
            },
            {
              "name": "get_metrics_summary",
              "docstring": "Get summary of context loading metrics.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_metrics",
              "docstring": "Save metrics to file for analysis.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path"
        ],
        "_load_config": [
          "open",
          "config_path.exists",
          "json.load"
        ],
        "get_context_for_scenario": [
          "self._load_full_context",
          "self._load_session_context",
          "self._get_budget_for_scenario",
          "self._load_minimal_context",
          "scenario_config.get",
          "self._update_metrics",
          "self._load_focused_context",
          "ContextMode",
          "time.time"
        ],
        "_get_budget_for_scenario": [
          "scenario_config.get",
          "budget_config.get",
          "ContextBudget"
        ],
        "_load_full_context": [
          "open",
          "logger.warning",
          "json.load",
          "full_path.exists"
        ],
        "_extract_relationship_summary": [
          "open",
          "struct_path.exists",
          "summary.append",
          "json.load",
          "logger.warning",
          "m.get",
          "struct.get"
        ],
        "_load_focused_context": [
          "open",
          "len",
          "json.load",
          "session_path.exists",
          "file_path.endswith",
          "logger.warning",
          "self._get_file_context",
          "self._extract_summary",
          "init_path.exists",
          "self._extract_relationship_summary",
          "json.dumps"
        ],
        "_load_session_context": [
          "self._filter_for_current_session",
          "self._load_source_with_filtering"
        ],
        "_load_minimal_context": [
          "open",
          "json.load",
          "source_path.exists",
          "logger.warning",
          "self._extract_summary"
        ],
        "_load_source_with_filtering": [
          "open",
          "json.load",
          "source_path.exists",
          "logger.warning",
          "self._apply_section_filtering"
        ],
        "_get_file_context": [
          "Path"
        ],
        "_extract_essential_parts": [
          "isinstance",
          "task.get"
        ],
        "_filter_for_current_session": [
          "open",
          "data.items",
          "current_session_path.exists",
          "json.load",
          "task.get",
          "logger.warning",
          "current_session.get",
          "idea.get"
        ],
        "_extract_summary": [
          "len",
          "isinstance",
          "t.get"
        ],
        "_apply_section_filtering": [
          "data.items"
        ],
        "_update_metrics": [
          "len",
          "ContextMetrics",
          "context.get"
        ],
        "get_metrics_summary": [
          "len",
          "sum"
        ],
        "save_metrics": [
          "open",
          "json.dump",
          "self.get_metrics_summary"
        ],
        "create_context_orchestrator": [
          "SmartContextOrchestrator"
        ],
        "get_optimized_context": [
          "orchestrator.get_context_for_scenario",
          "ContextBudget",
          "create_context_orchestrator"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Union",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d94feb58-bf72-4acf-a0b6-2421fdbd2374"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.__init__",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "LLMClient",
        "SystemCapabilityDiscovery",
        "ai_cli_integration",
        "ai_self_awareness",
        "llm_client"
      ],
      "hash": null,
      "artifact_id": "72807b85-fa3d-43d6-a55b-78c54e151101"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.ai_cli_integration",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "module_doc": "AI Self-Awareness CLI Integration Module\nIntegrates unused CLI functions into the AI self-awareness system.",
      "functions": [
        {
          "name": "create_ai_cli_integration",
          "docstring": "Factory function to create AI CLI integration instance.",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_enhanced_cli_summary",
          "docstring": "Get a formatted summary of AI CLI integration capabilities.",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI integration system.",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_discover_available_commands",
          "docstring": "Discover which unused CLI commands are available for integration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_status_command",
          "docstring": "Integrate cmd_status for real-time AI system status awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_audit_command",
          "docstring": "Integrate cmd_audit for system health analysis awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_context_command",
          "docstring": "Integrate cmd_context for context mode awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_queue_command",
          "docstring": "Integrate cmd_queue for workflow queue monitoring.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_integration_summary",
          "docstring": "Get summary of CLI command integrations for AI awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_ai_enhancement_impact",
          "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_status",
          "docstring": "Create fallback status information if cmd_status is not available.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_audit",
          "docstring": "Create fallback audit information if cmd_audit is not available.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_context",
          "docstring": "Create fallback context information if cmd_context is not available.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_queue",
          "docstring": "Create fallback queue information if cmd_queue is not available.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AISelfAwarenessCLIIntegration",
          "docstring": "Integrates unused CLI functions to enhance AI self-awareness capabilities.\nTransforms 21 unused CLI commands into useful AI interaction tools.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI integration system.",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_discover_available_commands",
              "docstring": "Discover which unused CLI commands are available for integration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_status_command",
              "docstring": "Integrate cmd_status for real-time AI system status awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_audit_command",
              "docstring": "Integrate cmd_audit for system health analysis awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_context_command",
              "docstring": "Integrate cmd_context for context mode awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_queue_command",
              "docstring": "Integrate cmd_queue for workflow queue monitoring.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_integration_summary",
              "docstring": "Get summary of CLI command integrations for AI awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_ai_enhancement_impact",
              "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_status",
              "docstring": "Create fallback status information if cmd_status is not available.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_audit",
              "docstring": "Create fallback audit information if cmd_audit is not available.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_context",
              "docstring": "Create fallback context information if cmd_context is not available.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_queue",
              "docstring": "Create fallback queue information if cmd_queue is not available.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._discover_available_commands",
          "Path"
        ],
        "_discover_available_commands": [
          "logger.error",
          "hasattr",
          "unused_command_mapping.items",
          "getattr"
        ],
        "integrate_ai_status_command": [
          "logger.error",
          "cmd_status",
          "self._create_fallback_status",
          "str"
        ],
        "integrate_ai_audit_command": [
          "logger.error",
          "cmd_audit",
          "str",
          "self._create_fallback_audit"
        ],
        "integrate_ai_context_command": [
          "logger.error",
          "self._create_fallback_context",
          "str",
          "cmd_context"
        ],
        "integrate_ai_queue_command": [
          "cmd_queue",
          "logger.error",
          "self._create_fallback_queue",
          "str"
        ],
        "get_integration_summary": [
          "len",
          "cmd.get",
          "info.get",
          "sum",
          "self._calculate_ai_enhancement_impact"
        ],
        "_calculate_ai_enhancement_impact": [
          "len",
          "enhanced_categories.append",
          "capability_categories.items",
          "info.get",
          "any"
        ],
        "_create_fallback_status": [
          "str"
        ],
        "_create_fallback_audit": [
          "str"
        ],
        "_create_fallback_context": [],
        "_create_fallback_queue": [],
        "create_ai_cli_integration": [
          "AISelfAwarenessCLIIntegration"
        ],
        "get_ai_enhanced_cli_summary": [
          "integration.integrate_ai_audit_command",
          "integration.get_integration_summary",
          "integration.integrate_ai_queue_command",
          "create_ai_cli_integration",
          "integration.integrate_ai_status_command",
          "integration.integrate_ai_context_command"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "cli_commands",
        "json",
        "llmstruct",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "37d5ea6f-2dd3-4581-9251-dc5366e790b1"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.__main__",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "llmstruct.cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "44178e8d-afff-4003-8d7e-45ade7673d20"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.cli_utils",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/cli_utils.py",
      "category": "core",
      "module_doc": "CLI utility functions.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize utils with root directory.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read file content with size limit.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "write_file_content",
          "docstring": "Write content to file.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "get_directory_structure",
          "docstring": "Get directory structure using folder generator.",
          "line_range": null,
          "parameters": [
            "self",
            "path",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON content.",
          "line_range": null,
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "format_json",
          "docstring": "Format data as JSON string.",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "indent"
          ],
          "decorators": []
        },
        {
          "name": "generate_unique_id",
          "docstring": "Generate unique ID for commands, queues, etc.",
          "line_range": null,
          "parameters": [
            "self",
            "prefix"
          ],
          "decorators": []
        },
        {
          "name": "safe_path_join",
          "docstring": "Safely join path parts, preventing directory traversal.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_exists",
          "docstring": "Check if file exists.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "dir_exists",
          "docstring": "Check if directory exists.",
          "line_range": null,
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_size",
          "docstring": "Get file size in bytes.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_file",
          "docstring": "Create backup of file with timestamp.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_backups",
          "docstring": "Clean up old backup files, keeping only the most recent ones.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "keep_count"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIUtils",
          "docstring": "Utility functions for CLI operations.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize utils with root directory.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "read_file_content",
              "docstring": "Read file content with size limit.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "max_size"
              ]
            },
            {
              "name": "write_file_content",
              "docstring": "Write content to file.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "content"
              ]
            },
            {
              "name": "get_directory_structure",
              "docstring": "Get directory structure using folder generator.",
              "line_range": null,
              "parameters": [
                "self",
                "path",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ]
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON content.",
              "line_range": null,
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "format_json",
              "docstring": "Format data as JSON string.",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "indent"
              ]
            },
            {
              "name": "generate_unique_id",
              "docstring": "Generate unique ID for commands, queues, etc.",
              "line_range": null,
              "parameters": [
                "self",
                "prefix"
              ]
            },
            {
              "name": "safe_path_join",
              "docstring": "Safely join path parts, preventing directory traversal.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_exists",
              "docstring": "Check if file exists.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "dir_exists",
              "docstring": "Check if directory exists.",
              "line_range": null,
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "get_file_size",
              "docstring": "Get file size in bytes.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "backup_file",
              "docstring": "Create backup of file with timestamp.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "cleanup_old_backups",
              "docstring": "Clean up old backup files, keeping only the most recent ones.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "keep_count"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "read_file_content": [
          "open",
          "logging.error",
          "logging.warning",
          "f.read",
          "os.stat"
        ],
        "write_file_content": [
          "open",
          "logging.info",
          "logging.error",
          "Path",
          "f.write"
        ],
        "get_directory_structure": [
          "os.listdir",
          "get_folder_structure",
          "logging.error",
          "sorted"
        ],
        "validate_json": [
          "str",
          "json.loads"
        ],
        "format_json": [
          "logging.error",
          "str",
          "json.dumps"
        ],
        "generate_unique_id": [
          "uuid.uuid4",
          "int",
          "str",
          "time.time"
        ],
        "safe_path_join": [
          "ValueError",
          "resolved_path.startswith"
        ],
        "file_exists": [
          "self.safe_path_join"
        ],
        "dir_exists": [
          "self.safe_path_join"
        ],
        "get_file_size": [
          "self.safe_path_join"
        ],
        "backup_file": [
          "open",
          "src.read",
          "int",
          "logging.error",
          "self.safe_path_join",
          "dst.write",
          "time.time"
        ],
        "cleanup_old_backups": [
          "int",
          "filename.split",
          "logging.info",
          "logging.warning",
          "backups.sort",
          "logging.error",
          "os.listdir",
          "self.safe_path_join",
          "os.remove",
          "filename.startswith",
          "backups.append"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "cfb0a05e-6de9-48be-b3a2-f3f963b4af03"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.copilot",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/copilot.py",
      "category": "core",
      "module_doc": "LLMStruct Copilot Integration Module\nProvides context-aware development assistance with hybrid copilot capabilities.",
      "functions": [
        {
          "name": "initialize_copilot",
          "docstring": "Initialize copilot context manager for the project.\n\nArgs:\n    project_root: Project root directory\n\nReturns:\n    Configured CopilotContextManager instance",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "trigger_copilot_event",
          "docstring": "Trigger a copilot event and get relevant context.\n\nArgs:\n    manager: CopilotContextManager instance\n    event_type: Type of event\n    file_path: Optional file path\n    **kwargs: Additional event metadata\n\nReturns:\n    Dict with event context",
          "line_range": null,
          "parameters": [
            "manager",
            "event_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "smart_suggest",
          "docstring": "Get smart suggestions based on query and context.\n\nArgs:\n    manager: CopilotContextManager instance\n    query: Query string\n    context: Context type (code, workflow, task, etc.)\n\nReturns:\n    List of suggestions",
          "line_range": null,
          "parameters": [
            "manager",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context_for_scenario",
          "docstring": "Get optimized context for specific scenario - standalone function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": null,
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
          "line_range": null,
          "parameters": [
            "self",
            "project_root",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load copilot configuration from JSON file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_layers",
          "docstring": "Initialize context layers from configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_context_layer",
          "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
          "line_range": null,
          "parameters": [
            "self",
            "layer_name",
            "force"
          ],
          "decorators": []
        },
        {
          "name": "unload_context_layer",
          "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
          "line_range": null,
          "parameters": [
            "self",
            "layer_name"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": null,
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_context",
          "docstring": "Fallback to legacy context loading.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_vscode",
          "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_event",
          "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
          "line_range": null,
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_event_context",
          "docstring": "Legacy event context loading as fallback.",
          "line_range": null,
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "suggest_completion",
          "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
          "line_range": null,
          "parameters": [
            "self",
            "current_code",
            "file_path",
            "cursor_position"
          ],
          "decorators": []
        },
        {
          "name": "validate_change",
          "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "change_type"
          ],
          "decorators": []
        },
        {
          "name": "_matches_scope",
          "docstring": "Check if file matches scope pattern.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "scope"
          ],
          "decorators": []
        },
        {
          "name": "_matches_trigger",
          "docstring": "Check if change type matches trigger.",
          "line_range": null,
          "parameters": [
            "self",
            "change_type",
            "trigger"
          ],
          "decorators": []
        },
        {
          "name": "_validate_json_schema",
          "docstring": "Validate JSON file against schema.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_check_circular_dependencies",
          "docstring": "Check for circular dependencies.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_validate_task_references",
          "docstring": "Validate task references in tasks.json.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
          "line_range": null,
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "refresh_all_contexts",
          "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_status",
          "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "export_context",
          "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
          "line_range": null,
          "parameters": [
            "self",
            "layers",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Clean up resources.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextLayer",
          "docstring": "Context layer priorities for copilot integration.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AttachMode",
          "docstring": "Context attachment modes.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLayerConfig",
          "docstring": "Configuration for a context layer.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotEvent",
          "docstring": "Represents a copilot event for context triggering.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotContextManager",
          "docstring": "Manages context layers and integration with GitHub Copilot.\nProvides intelligent context loading and workflow assistance.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
              "line_range": null,
              "parameters": [
                "self",
                "project_root",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load copilot configuration from JSON file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_initialize_layers",
              "docstring": "Initialize context layers from configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_context_layer",
              "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
              "line_range": null,
              "parameters": [
                "self",
                "layer_name",
                "force"
              ]
            },
            {
              "name": "unload_context_layer",
              "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
              "line_range": null,
              "parameters": [
                "self",
                "layer_name"
              ]
            },
            {
              "name": "get_optimized_context",
              "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
              "line_range": null,
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "max_tokens"
              ]
            },
            {
              "name": "_get_legacy_context",
              "docstring": "Fallback to legacy context loading.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_vscode",
              "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_context_for_event",
              "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
              "line_range": null,
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_get_legacy_event_context",
              "docstring": "Legacy event context loading as fallback.",
              "line_range": null,
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "suggest_completion",
              "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
              "line_range": null,
              "parameters": [
                "self",
                "current_code",
                "file_path",
                "cursor_position"
              ]
            },
            {
              "name": "validate_change",
              "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "change_type"
              ]
            },
            {
              "name": "_matches_scope",
              "docstring": "Check if file matches scope pattern.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "scope"
              ]
            },
            {
              "name": "_matches_trigger",
              "docstring": "Check if change type matches trigger.",
              "line_range": null,
              "parameters": [
                "self",
                "change_type",
                "trigger"
              ]
            },
            {
              "name": "_validate_json_schema",
              "docstring": "Validate JSON file against schema.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_check_circular_dependencies",
              "docstring": "Check for circular dependencies.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_validate_task_references",
              "docstring": "Validate task references in tasks.json.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
              "line_range": null,
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "refresh_all_contexts",
              "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_status",
              "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "export_context",
              "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
              "line_range": null,
              "parameters": [
                "self",
                "layers",
                "format"
              ]
            },
            {
              "name": "close",
              "docstring": "Clean up resources.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "create_context_orchestrator",
          "Path",
          "self._initialize_layers",
          "os.getcwd",
          "JSONCache",
          "str"
        ],
        "_load_config": [
          "open",
          "logger.info",
          "json.load",
          "logger.error",
          "logger.warning",
          "Path"
        ],
        "_initialize_layers": [
          "layers_config.items",
          "layer_config.get",
          "ContextLayerConfig"
        ],
        "load_context_layer": [
          "open",
          "logger.info",
          "logger.debug",
          "json.load",
          "source_path.exists",
          "logger.error",
          "logger.warning",
          "time.time"
        ],
        "unload_context_layer": [
          "logger.info"
        ],
        "get_optimized_context": [
          "logger.error",
          "self._get_legacy_context",
          "scenario_mapping.get"
        ],
        "_get_legacy_context": [
          "self.load_context_layer"
        ],
        "get_context_for_vscode": [
          "self.get_optimized_context"
        ],
        "get_context_for_event": [
          "logger.error",
          "self.get_optimized_context",
          "scenario_mapping.get",
          "self._get_legacy_event_context"
        ],
        "_get_legacy_event_context": [
          "open",
          "json.load",
          "code_triggers.get",
          "self.load_context_layer",
          "source_path.exists",
          "logger.error",
          "workflow_triggers.get",
          "triggers.get",
          "file_triggers.get"
        ],
        "suggest_completion": [
          "struct_context.get",
          "self.load_context_layer",
          "Path",
          "func.get",
          "module.get",
          "suggestions.append",
          "str",
          "current_module.get"
        ],
        "validate_change": [
          "len",
          "self._validate_task_references",
          "safety_features.get",
          "rule.get",
          "self._matches_trigger",
          "self._matches_scope",
          "result.get",
          "self._validate_json_schema",
          "self._check_circular_dependencies"
        ],
        "_matches_scope": [
          "Path",
          "str",
          "fnmatch"
        ],
        "_matches_trigger": [
          "trigger_map.get"
        ],
        "_validate_json_schema": [
          "file_path.endswith",
          "open",
          "json.load"
        ],
        "_check_circular_dependencies": [
          "struct_data.get",
          "len",
          "self.load_context_layer",
          "Path",
          "module.get",
          "str"
        ],
        "_validate_task_references": [
          "open",
          "set",
          "json.load",
          "task.get",
          "file_path.endswith",
          "task_ids.add",
          "tasks_data.get"
        ],
        "get_workflow_suggestions": [
          "workflows.items",
          "self.load_context_layer",
          "workflow.get",
          "command.lower",
          "suggestions.extend",
          "suggestions.append"
        ],
        "refresh_all_contexts": [
          "logger.info",
          "list",
          "self.load_context_layer"
        ],
        "get_context_status": [
          "list"
        ],
        "export_context": [
          "list",
          "str",
          "json.dumps"
        ],
        "close": [
          "logger.info",
          "hasattr"
        ],
        "initialize_copilot": [
          "CopilotContextManager"
        ],
        "trigger_copilot_event": [
          "CopilotEvent",
          "manager.get_context_for_event"
        ],
        "smart_suggest": [
          "manager.get_workflow_suggestions"
        ],
        "get_optimized_context_for_scenario": [
          "initialize_copilot",
          "locals",
          "manager.close",
          "manager.get_optimized_context"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "Union",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "fnmatch",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "89615336-1b58-42ef-b709-d22cace41dd1"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.gh_view",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/gh_view.py",
      "category": "core",
      "module_doc": "GitHub visualization/graph feature (gh-view-v1)\nExport consolidated tasks/ideas from JSON files to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for GitHub Projects export",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize exporter with configuration",
          "line_range": null,
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from TOML file",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_mapping",
          "docstring": "Load existing ID mapping between local and GitHub",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_mapping",
          "docstring": "Save ID mapping to file",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_run_gh_command",
          "docstring": "Run GitHub CLI command and return success status and output",
          "line_range": null,
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "load_official_data",
          "docstring": "Load tasks and ideas from official JSON files",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "format_task_for_github",
          "docstring": "Format task data for GitHub Project card",
          "line_range": null,
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "format_idea_for_github",
          "docstring": "Format idea data for GitHub Project card",
          "line_range": null,
          "parameters": [
            "self",
            "idea"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExporter",
          "docstring": "Export tasks and ideas to GitHub Projects as cards",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize exporter with configuration",
              "line_range": null,
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from TOML file",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_mapping",
              "docstring": "Load existing ID mapping between local and GitHub",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_mapping",
              "docstring": "Save ID mapping to file",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_run_gh_command",
              "docstring": "Run GitHub CLI command and return success status and output",
              "line_range": null,
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "load_official_data",
              "docstring": "Load tasks and ideas from official JSON files",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "format_task_for_github",
              "docstring": "Format task data for GitHub Project card",
              "line_range": null,
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "format_idea_for_github",
              "docstring": "Format idea data for GitHub Project card",
              "line_range": null,
              "parameters": [
                "self",
                "idea"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_mapping",
          "self._load_config",
          "Path"
        ],
        "_load_config": [
          "open",
          "config.get",
          "toml.load",
          "print"
        ],
        "_load_mapping": [
          "open",
          "json.load"
        ],
        "_save_mapping": [
          "open",
          "json.dump",
          "print"
        ],
        "_run_gh_command": [
          "subprocess.run"
        ],
        "load_official_data": [
          "open",
          "len",
          "json.load",
          "tasks_data.get",
          "ideas_file.exists",
          "tasks_file.exists",
          "ideas_data.get",
          "print"
        ],
        "format_task_for_github": [
          "status_map.get",
          "body_parts.append",
          "task.get"
        ],
        "format_idea_for_github": [
          "status_map.get",
          "body_parts.append",
          "idea.get"
        ],
        "main": [
          "len",
          "exporter.load_official_data",
          "GitHubProjectsExporter",
          "exporter.format_idea_for_github",
          "sys.exit",
          "exporter.format_task_for_github",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "pathlib",
        "subprocess",
        "sys",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "dcaa5b1a-6cb1-4daf-b181-faa23996ec42"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.llm_client",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": null,
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": null,
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getenv",
          "int",
          "logging.info"
        ],
        "query": [
          "json.load",
          "logging.error",
          "logging.info",
          "logging.warning",
          "self._query_ollama",
          "Path",
          "self._query_hybrid",
          "self._query_anthropic",
          "self._query_grok",
          "range",
          "asyncio.sleep",
          "json.dumps"
        ],
        "_query_grok": [
          "aiohttp.ClientSession",
          "logging.info",
          "logging.error",
          "response.json",
          "result.get",
          "session.post"
        ],
        "_query_anthropic": [
          "aiohttp.ClientSession",
          "logging.info",
          "logging.error",
          "response.json",
          "result.get",
          "session.post"
        ],
        "_query_ollama": [
          "aiohttp.ClientSession",
          "logging.info",
          "logging.error",
          "response.json",
          "logging.debug",
          "result.get",
          "session.post"
        ],
        "_query_hybrid": [
          "len",
          "logging.info",
          "self._query_ollama",
          "self._query_anthropic",
          "self._query_grok",
          "isinstance",
          "asyncio.gather"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "e898518b-aa85-4413-9485-75d0330c7909"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.ai_workflow_middleware",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/ai_workflow_middleware.py",
      "category": "core",
      "module_doc": "AI Workflow Middleware - Forces AI Integration with LLMStruct\nIntercepts all AI requests and ensures they go through our orchestration system.",
      "functions": [
        {
          "name": "initialize_ai_middleware",
          "docstring": "Initialize global AI middleware.",
          "line_range": null,
          "parameters": [
            "project_root",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_middleware",
          "docstring": "Get current AI middleware instance.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "process_ai_query",
          "docstring": "Global function to process AI queries through middleware.",
          "line_range": null,
          "parameters": [
            "query",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "ensure_llmstruct_integration",
          "docstring": "Decorator that ensures function uses llmstruct system.",
          "line_range": null,
          "parameters": [
            "func"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "_load_middleware_config",
          "docstring": "Load middleware configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_ai_request",
          "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration",
          "line_range": null,
          "parameters": [
            "self",
            "raw_query",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_parse_ai_request",
          "docstring": "Parse raw query into structured AI request.",
          "line_range": null,
          "parameters": [
            "self",
            "raw_query"
          ],
          "decorators": []
        },
        {
          "name": "_should_use_llmstruct",
          "docstring": "Determine if request should use llmstruct system.",
          "line_range": null,
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_process_with_llmstruct",
          "docstring": "Process request through full llmstruct system.",
          "line_range": null,
          "parameters": [
            "self",
            "request",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_process_bypass",
          "docstring": "Process request without llmstruct system.",
          "line_range": null,
          "parameters": [
            "self",
            "request",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_optimize_context",
          "docstring": "Optimize context using orchestrator.",
          "line_range": null,
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_ai_delegation",
          "docstring": "Analyze which AI should handle this request.",
          "line_range": null,
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_context",
          "docstring": "Get enhanced context with project awareness.",
          "line_range": null,
          "parameters": [
            "self",
            "request",
            "context_result"
          ],
          "decorators": []
        },
        {
          "name": "_get_capability_summary",
          "docstring": "Get current system capabilities.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_generate_usage_guidance",
          "docstring": "Generate guidance for AI on how to use llmstruct system.",
          "line_range": null,
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_map_tags_to_scenario",
          "docstring": "Map context tags to orchestrator scenarios.",
          "line_range": null,
          "parameters": [
            "self",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "_default_ai_processing",
          "docstring": "Default AI processing when no custom handler provided.",
          "line_range": null,
          "parameters": [
            "self",
            "request",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_middleware_stats",
          "docstring": "Get middleware usage statistics.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "force_llmstruct_mode",
          "docstring": "Force all future requests to use llmstruct system.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enable_guidance_mode",
          "docstring": "Enable guided mode with llmstruct suggestions.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "wrapper",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AIWorkflowMode",
          "docstring": "AI workflow enforcement modes.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AIRequest",
          "docstring": "Standardized AI request structure.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "AIResponse",
          "docstring": "Standardized AI response structure.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "AIWorkflowMiddleware",
          "docstring": "Middleware that ensures ALL AI interactions go through LLMStruct system.\nThis solves the problem of AI not using its own infrastructure.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root",
                "mode"
              ]
            },
            {
              "name": "_load_middleware_config",
              "docstring": "Load middleware configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_ai_request",
              "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration",
              "line_range": null,
              "parameters": [
                "self",
                "raw_query",
                "ai_handler"
              ]
            },
            {
              "name": "_parse_ai_request",
              "docstring": "Parse raw query into structured AI request.",
              "line_range": null,
              "parameters": [
                "self",
                "raw_query"
              ]
            },
            {
              "name": "_should_use_llmstruct",
              "docstring": "Determine if request should use llmstruct system.",
              "line_range": null,
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_process_with_llmstruct",
              "docstring": "Process request through full llmstruct system.",
              "line_range": null,
              "parameters": [
                "self",
                "request",
                "ai_handler"
              ]
            },
            {
              "name": "_process_bypass",
              "docstring": "Process request without llmstruct system.",
              "line_range": null,
              "parameters": [
                "self",
                "request",
                "ai_handler"
              ]
            },
            {
              "name": "_optimize_context",
              "docstring": "Optimize context using orchestrator.",
              "line_range": null,
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_analyze_ai_delegation",
              "docstring": "Analyze which AI should handle this request.",
              "line_range": null,
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_get_enhanced_context",
              "docstring": "Get enhanced context with project awareness.",
              "line_range": null,
              "parameters": [
                "self",
                "request",
                "context_result"
              ]
            },
            {
              "name": "_get_capability_summary",
              "docstring": "Get current system capabilities.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_generate_usage_guidance",
              "docstring": "Generate guidance for AI on how to use llmstruct system.",
              "line_range": null,
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_map_tags_to_scenario",
              "docstring": "Map context tags to orchestrator scenarios.",
              "line_range": null,
              "parameters": [
                "self",
                "tags"
              ]
            },
            {
              "name": "_default_ai_processing",
              "docstring": "Default AI processing when no custom handler provided.",
              "line_range": null,
              "parameters": [
                "self",
                "request",
                "context"
              ]
            },
            {
              "name": "get_middleware_stats",
              "docstring": "Get middleware usage statistics.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "force_llmstruct_mode",
              "docstring": "Force all future requests to use llmstruct system.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enable_guidance_mode",
              "docstring": "Enable guided mode with llmstruct suggestions.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logger.info",
          "CursorAIBridge",
          "create_context_orchestrator",
          "Path",
          "self._load_middleware_config",
          "SystemCapabilityDiscovery",
          "str"
        ],
        "_load_middleware_config": [
          "open",
          "config_path.exists",
          "json.load"
        ],
        "process_ai_request": [
          "self._process_with_llmstruct",
          "str",
          "logger.error",
          "self._process_bypass",
          "AIResponse",
          "self._should_use_llmstruct",
          "self._parse_ai_request",
          "time.time"
        ],
        "_parse_ai_request": [
          "AIRequest",
          "context_tags.extend",
          "re.sub",
          "re.findall",
          "time.time"
        ],
        "_should_use_llmstruct": [],
        "_process_with_llmstruct": [
          "self._analyze_ai_delegation",
          "ai_handler",
          "AIResponse",
          "self._get_enhanced_context",
          "enhanced_context.get",
          "self._optimize_context",
          "self._default_ai_processing",
          "time.time"
        ],
        "_process_bypass": [
          "ai_handler",
          "AIResponse"
        ],
        "_optimize_context": [
          "len",
          "self._map_tags_to_scenario",
          "context.get",
          "logger.error",
          "str"
        ],
        "_analyze_ai_delegation": [
          "delegation.get",
          "logger.error",
          "str"
        ],
        "_get_enhanced_context": [
          "self._get_capability_summary",
          "self._generate_usage_guidance"
        ],
        "_get_capability_summary": [
          "str"
        ],
        "_generate_usage_guidance": [
          "guidance.append"
        ],
        "_map_tags_to_scenario": [],
        "_default_ai_processing": [],
        "get_middleware_stats": [],
        "force_llmstruct_mode": [
          "logger.info"
        ],
        "enable_guidance_mode": [
          "logger.info"
        ],
        "initialize_ai_middleware": [
          "AIWorkflowMiddleware"
        ],
        "get_ai_middleware": [],
        "process_ai_query": [
          "RuntimeError",
          "_middleware_instance.process_ai_request"
        ],
        "ensure_llmstruct_integration": [],
        "wrapper": [
          "func",
          "logger.warning",
          "kwargs.get",
          "middleware.process_ai_request",
          "get_ai_middleware",
          "str"
        ]
      },
      "dependencies": [
        "Any",
        "Callable",
        "CursorAIBridge",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.context_orchestrator",
        "llmstruct.cursor_ai_bridge",
        "logging",
        "pathlib",
        "re",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "453a677f-5059-4f55-ad6e-dd7eb95e9a78"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.ai_self_awareness",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "module_doc": "AI Self-Awareness Enhancement Module\nProvides comprehensive system introspection and capability discovery for llmstruct AI systems.\nEnhanced with Cursor IDE integration and real-time metrics.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize the capability discovery system with CLI integration.",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_ensure_directories",
          "docstring": "Ensure required directories exist.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "discover_all_capabilities",
          "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
          "line_range": null,
          "parameters": [
            "self",
            "force_refresh"
          ],
          "decorators": []
        },
        {
          "name": "_get_integration_metrics",
          "docstring": "Get metrics about unused function integration success.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_enhanced_capabilities_summary",
          "docstring": "Get enhanced capabilities summary including unused function integration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_ai_status",
          "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_tools",
          "docstring": "Discover and check health of all available tools.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cli_processor",
          "docstring": "Check CLI processor health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_copilot_manager",
          "docstring": "Check Copilot manager health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_context_orchestrator",
          "docstring": "Check context orchestrator health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cache_system",
          "docstring": "Check cache system health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_struct_parser",
          "docstring": "Check struct.json parser health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_docs_system",
          "docstring": "Check docs.json system health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_capabilities",
          "docstring": "Discover available context capabilities.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_integration_health",
          "docstring": "Check health of all system integrations.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_component_status",
          "docstring": "Check status of a specific component.",
          "line_range": null,
          "parameters": [
            "self",
            "component_name"
          ],
          "decorators": []
        },
        {
          "name": "_discover_vscode_capabilities",
          "docstring": "Discover VS Code specific capabilities.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_cache_hit_rate",
          "docstring": "Calculate cache hit rate using real metrics.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_system_load",
          "docstring": "Estimate current system load using real metrics.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_cache_valid",
          "docstring": "Check if cached capabilities are still valid.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cached_capabilities",
          "docstring": "Load capabilities from cache.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cache_capabilities",
          "docstring": "Cache capabilities to disk.",
          "line_range": null,
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "get_capabilities_summary",
          "docstring": "Get a human-readable summary of current capabilities.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_project_structure",
          "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_directory_structure",
          "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_unused_capabilities",
          "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
          "line_range": null,
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_discover_config_capabilities",
          "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_scenarios",
          "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_command",
          "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
          "line_range": null,
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_config",
          "docstring": "Determine if a config function would be useful for AI configuration awareness.",
          "line_range": null,
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_utility",
          "docstring": "Determine if a utility function would be useful for AI operations.",
          "line_range": null,
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_prioritize_integrations",
          "docstring": "Prioritize which unused functions should be integrated first.",
          "line_range": null,
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_basic_directory_scan",
          "docstring": "Basic directory scan for fallback scenarios.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_status_report",
          "docstring": "Generate Cursor-specific status optimized for IDE integration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "optimize_context_for_cursor",
          "docstring": "Provide perfectly sized context for Cursor interactions.",
          "line_range": null,
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals from personal bridge.",
          "line_range": null,
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_real_cache_hit_rate",
          "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_real_system_load",
          "docstring": "Get actual system performance metrics.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_query_type",
          "docstring": "Analyze query to determine optimal context type.",
          "line_range": null,
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": null,
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": null,
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_get_overall_health_emoji",
          "docstring": "Get emoji representing overall system health.",
          "line_range": null,
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_status_emoji",
          "docstring": "Get emoji for context engine status.",
          "line_range": null,
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_ai_integration_emoji",
          "docstring": "Get emoji for AI integration status.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_goal_alignment_status",
          "docstring": "Get goal alignment status.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CapabilityStatus",
          "docstring": "Status of system capabilities.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextMode",
          "docstring": "Available context modes.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ToolHealth",
          "docstring": "Health status of a specific tool.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextCapabilities",
          "docstring": "Available context capabilities.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "IntegrationHealth",
          "docstring": "Status of system integrations.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "VSCodeCapabilities",
          "docstring": "VS Code specific capabilities.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilities",
          "docstring": "Complete system capabilities overview.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilityDiscovery",
          "docstring": "Discovers and monitors system capabilities in real-time.\nProvides AI with comprehensive understanding of available tools and systems.\nEnhanced with unused function integration for maximum AI self-awareness.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the capability discovery system with CLI integration.",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_ensure_directories",
              "docstring": "Ensure required directories exist.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "discover_all_capabilities",
              "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
              "line_range": null,
              "parameters": [
                "self",
                "force_refresh"
              ]
            },
            {
              "name": "_get_integration_metrics",
              "docstring": "Get metrics about unused function integration success.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_enhanced_capabilities_summary",
              "docstring": "Get enhanced capabilities summary including unused function integration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_comprehensive_ai_status",
              "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_tools",
              "docstring": "Discover and check health of all available tools.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cli_processor",
              "docstring": "Check CLI processor health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_copilot_manager",
              "docstring": "Check Copilot manager health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_context_orchestrator",
              "docstring": "Check context orchestrator health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cache_system",
              "docstring": "Check cache system health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_struct_parser",
              "docstring": "Check struct.json parser health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_docs_system",
              "docstring": "Check docs.json system health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_capabilities",
              "docstring": "Discover available context capabilities.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_integration_health",
              "docstring": "Check health of all system integrations.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_component_status",
              "docstring": "Check status of a specific component.",
              "line_range": null,
              "parameters": [
                "self",
                "component_name"
              ]
            },
            {
              "name": "_discover_vscode_capabilities",
              "docstring": "Discover VS Code specific capabilities.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_cache_hit_rate",
              "docstring": "Calculate cache hit rate using real metrics.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_estimate_system_load",
              "docstring": "Estimate current system load using real metrics.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_cache_valid",
              "docstring": "Check if cached capabilities are still valid.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cached_capabilities",
              "docstring": "Load capabilities from cache.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cache_capabilities",
              "docstring": "Cache capabilities to disk.",
              "line_range": null,
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "get_capabilities_summary",
              "docstring": "Get a human-readable summary of current capabilities.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_project_structure",
              "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_enhanced_directory_structure",
              "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_unused_capabilities",
              "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
              "line_range": null,
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_discover_config_capabilities",
              "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_scenarios",
              "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_ai_useful_command",
              "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
              "line_range": null,
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_config",
              "docstring": "Determine if a config function would be useful for AI configuration awareness.",
              "line_range": null,
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_utility",
              "docstring": "Determine if a utility function would be useful for AI operations.",
              "line_range": null,
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_prioritize_integrations",
              "docstring": "Prioritize which unused functions should be integrated first.",
              "line_range": null,
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_basic_directory_scan",
              "docstring": "Basic directory scan for fallback scenarios.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cursor_status_report",
              "docstring": "Generate Cursor-specific status optimized for IDE integration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "optimize_context_for_cursor",
              "docstring": "Provide perfectly sized context for Cursor interactions.",
              "line_range": null,
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals from personal bridge.",
              "line_range": null,
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "_calculate_real_cache_hit_rate",
              "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_real_system_load",
              "docstring": "Get actual system performance metrics.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_query_type",
              "docstring": "Analyze query to determine optimal context type.",
              "line_range": null,
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": null,
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": null,
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_get_overall_health_emoji",
              "docstring": "Get emoji representing overall system health.",
              "line_range": null,
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_get_context_status_emoji",
              "docstring": "Get emoji for context engine status.",
              "line_range": null,
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_get_ai_integration_emoji",
              "docstring": "Get emoji for AI integration status.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_goal_alignment_status",
              "docstring": "Get goal alignment status.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "create_ai_cli_integration",
          "Path",
          "self._ensure_directories"
        ],
        "_ensure_directories": [],
        "discover_all_capabilities": [
          "logger.info",
          "self._discover_context_capabilities",
          "datetime.now",
          "self._analyze_project_structure",
          "self._estimate_system_load",
          "self._load_cached_capabilities",
          "SystemCapabilities",
          "self._is_cache_valid",
          "self._discover_tools",
          "self._check_integration_health",
          "self._cache_capabilities",
          "self._get_integration_metrics",
          "self._discover_vscode_capabilities",
          "self._calculate_cache_hit_rate",
          "time.time"
        ],
        "_get_integration_metrics": [],
        "get_enhanced_capabilities_summary": [
          "self.get_capabilities_summary",
          "enhanced_info.append",
          "str",
          "hasattr"
        ],
        "get_comprehensive_ai_status": [
          "self.get_enhanced_capabilities_summary",
          "str",
          "get_ai_enhanced_cli_summary"
        ],
        "_discover_tools": [
          "self._check_copilot_manager",
          "self._check_cli_processor",
          "self._check_struct_parser",
          "self._check_context_orchestrator",
          "self._check_cache_system",
          "self._check_docs_system"
        ],
        "_check_cli_processor": [
          "CommandProcessor",
          "ToolHealth",
          "str",
          "datetime.now",
          "CLIConfig",
          "CLIUtils",
          "time.time"
        ],
        "_check_copilot_manager": [
          "time.time",
          "hasattr",
          "ToolHealth",
          "datetime.now",
          "manager.get_context_status",
          "initialize_copilot",
          "str"
        ],
        "_check_context_orchestrator": [
          "time.time",
          "hasattr",
          "ToolHealth",
          "datetime.now",
          "create_context_orchestrator",
          "logger.warning",
          "get_optimized_context",
          "str"
        ],
        "_check_cache_system": [
          "time.time",
          "datetime.now",
          "ToolHealth",
          "cache.cache_json",
          "struct_file.exists",
          "cache.close",
          "cache.get_full_json",
          "JSONCache",
          "str"
        ],
        "_check_struct_parser": [
          "open",
          "struct_data.get",
          "datetime.now",
          "json.load",
          "ToolHealth",
          "struct_file.exists",
          "str",
          "FileNotFoundError",
          "missing_keys.append",
          "time.time"
        ],
        "_check_docs_system": [
          "open",
          "docs_file.exists",
          "json.load",
          "ToolHealth",
          "datetime.now",
          "str",
          "FileNotFoundError",
          "time.time"
        ],
        "_discover_context_capabilities": [
          "list",
          "ContextCapabilities",
          "create_context_orchestrator",
          "scenario_mappings.keys",
          "logger.error",
          "config.get",
          "isinstance",
          "str"
        ],
        "_check_integration_health": [
          "self._check_component_status",
          "IntegrationHealth"
        ],
        "_check_component_status": [
          "hasattr"
        ],
        "_discover_vscode_capabilities": [
          "VSCodeCapabilities"
        ],
        "_calculate_cache_hit_rate": [
          "self._calculate_real_cache_hit_rate"
        ],
        "_estimate_system_load": [
          "self._get_real_system_load"
        ],
        "_is_cache_valid": [
          "time.time"
        ],
        "_load_cached_capabilities": [
          "open",
          "logger.error",
          "json.load"
        ],
        "_cache_capabilities": [
          "open",
          "asdict",
          "logger.error",
          "json.dump"
        ],
        "get_capabilities_summary": [
          "self.discover_all_capabilities",
          "chr",
          "str",
          "len"
        ],
        "_analyze_project_structure": [
          "open",
          "struct_data.get",
          "len",
          "json.load",
          "str",
          "struct_file.exists",
          "self._get_enhanced_directory_structure",
          "self._analyze_unused_capabilities",
          "sum",
          "module.get",
          "self._discover_config_capabilities",
          "self._discover_context_scenarios"
        ],
        "_get_enhanced_directory_structure": [
          "get_directory_structure",
          "self._basic_directory_scan",
          "str"
        ],
        "_analyze_unused_capabilities": [
          "struct_data.get",
          "len",
          "self._is_ai_useful_command",
          "self._is_ai_useful_config",
          "self._is_ai_useful_utility",
          "min",
          "config_module.get",
          "cli_module.get",
          "f.startswith",
          "self._prioritize_integrations",
          "utils_module.get",
          "str",
          "modules.get"
        ],
        "_discover_config_capabilities": [
          "get_queue_config",
          "is_auto_update_enabled",
          "get_copilot_config",
          "get_context_config",
          "str"
        ],
        "_discover_context_scenarios": [
          "get_context_for_scenario",
          "str",
          "get_metrics_summary"
        ],
        "_is_ai_useful_command": [],
        "_is_ai_useful_config": [],
        "_is_ai_useful_utility": [],
        "_prioritize_integrations": [
          "priorities.append"
        ],
        "_basic_directory_scan": [
          "logger.error",
          "item.is_file",
          "item.is_dir",
          "str"
        ],
        "get_cursor_status_report": [
          "self.discover_all_capabilities",
          "self._get_context_status_emoji",
          "self._get_ai_integration_emoji",
          "self._load_cursor_config",
          "self._get_goal_alignment_status",
          "self._get_overall_health_emoji",
          "str"
        ],
        "optimize_context_for_cursor": [
          "open",
          "cursor_config.get",
          "context_rules.get",
          "json.load",
          "self._analyze_query_type",
          "logger.error",
          "self._load_cursor_config",
          "self._apply_privacy_filter",
          "optimal_config.get",
          "file_path.exists",
          "str"
        ],
        "get_goal_aligned_suggestions": [
          "self._load_personal_bridge",
          "personal_bridge.get",
          "logger.error",
          "suggestions.extend",
          "any",
          "technical_context.lower"
        ],
        "_calculate_real_cache_hit_rate": [
          "len",
          "list",
          "cache_dir.exists",
          "cache_file.stat",
          "logger.error",
          "cache_dir.glob",
          "time.time"
        ],
        "_get_real_system_load": [
          "logger.error",
          "min",
          "psutil.disk_usage",
          "psutil.cpu_percent",
          "str",
          "psutil.virtual_memory"
        ],
        "_load_cursor_config": [
          "open",
          "logger.error",
          "config_path.exists",
          "json.load"
        ],
        "_load_personal_bridge": [
          "open",
          "logger.error",
          "json.load",
          "bridge_path.exists"
        ],
        "_analyze_query_type": [
          "any",
          "query_analysis.get"
        ],
        "_apply_privacy_filter": [
          "self._filter_sensitive_dict",
          "context_data.items",
          "isinstance"
        ],
        "_filter_sensitive_dict": [
          "data.items",
          "self._filter_sensitive_dict",
          "isinstance",
          "any",
          "key.lower"
        ],
        "_get_overall_health_emoji": [],
        "_get_context_status_emoji": [
          "len"
        ],
        "_get_ai_integration_emoji": [
          "hasattr"
        ],
        "_get_goal_alignment_status": [
          "self._load_personal_bridge"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "asdict",
        "create_ai_cli_integration",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "get_ai_enhanced_cli_summary",
        "get_auto_update_config",
        "get_context_config",
        "get_context_for_scenario",
        "get_copilot_config",
        "get_directory_structure",
        "get_metrics_summary",
        "get_optimized_context",
        "get_queue_config",
        "initialize_copilot",
        "is_auto_update_enabled",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cache",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "logging",
        "os",
        "pathlib",
        "psutil",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "53faa270-bd06-4539-b298-59fbb5621bc5"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.cache",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": null,
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": null,
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "open",
          "logging.error",
          "str",
          "logging.info",
          "f.read",
          "Path",
          "json_file.exists",
          "hashlib.sha256",
          "content.encode",
          "json.dumps"
        ],
        "get_metadata": [
          "cursor.fetchone",
          "json.loads"
        ],
        "get_full_json": [
          "open",
          "cursor.fetchone",
          "logging.error",
          "json.load"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "bbf7be2b-dc34-499a-b8fb-24e6387b70c0"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.self_run",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "prompt.lower",
          "item.get",
          "struct.get",
          "isinstance",
          "module.get",
          "any",
          "filter_json",
          "str"
        ],
        "attach_to_llm_request": [
          "logging.error",
          "logging.info",
          "prompt.lower",
          "filter_struct",
          "cache.cache_json",
          "Path",
          "select_json",
          "cache.get_metadata",
          "cache.get_full_json",
          "context_file.exists",
          "filter_json",
          "json.dumps"
        ]
      },
      "dependencies": [
        "Any",
        "JSONCache",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d97f1df1-be73-4cc1-b136-ade846c7bb5e"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.cursor_ai_bridge",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/cursor_ai_bridge.py",
      "category": "core",
      "module_doc": "Cursor AI Bridge - API Layer for AI Assistant Integration\nProvides CLI and HTTP endpoints so Cursor AI can use WorkflowOrchestrator",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for Cursor AI Bridge.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "ai_get_context",
          "docstring": "Get AI-optimized context for current development state.",
          "line_range": null,
          "parameters": [
            "self",
            "query_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "ai_analyze_task",
          "docstring": "Analyze a task and provide AI-optimized guidance.",
          "line_range": null,
          "parameters": [
            "self",
            "task_description"
          ],
          "decorators": []
        },
        {
          "name": "ai_create_task",
          "docstring": "Create a task through AI interface.",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "description",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "ai_get_onboarding_guide",
          "docstring": "Get comprehensive AI onboarding guide.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "ai_check_duplicates",
          "docstring": "Check for code duplicates with AI-friendly output.",
          "line_range": null,
          "parameters": [
            "self",
            "threshold"
          ],
          "decorators": []
        },
        {
          "name": "ai_suggest",
          "docstring": "Get AI suggestions based on context.",
          "line_range": null,
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_task_complexity",
          "docstring": "Estimate task complexity based on codebase analysis.",
          "line_range": null,
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_suggest_approach",
          "docstring": "Suggest approach based on task and codebase state.",
          "line_range": null,
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_find_relevant_modules",
          "docstring": "Find modules relevant to the task.",
          "line_range": null,
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_check_potential_duplicates",
          "docstring": "Check if task might create duplicates.",
          "line_range": null,
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_recommend_ai_for_task",
          "docstring": "Recommend which AI to use for the task.",
          "line_range": null,
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_generate_workflow_steps",
          "docstring": "Generate workflow steps for the task.",
          "line_range": null,
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_determine_context_requirements",
          "docstring": "Determine what context is needed for the task.",
          "line_range": null,
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on context.",
          "line_range": null,
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_available_ai_commands",
          "docstring": "Get available AI commands.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_identify_high_priority_duplicates",
          "docstring": "Identify high-priority duplicates for refactoring.",
          "line_range": null,
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_generate_refactoring_suggestions",
          "docstring": "Generate refactoring suggestions.",
          "line_range": null,
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_classify_task_type",
          "docstring": "Classify task type for AI delegation.",
          "line_range": null,
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_generate_next_steps",
          "docstring": "Generate next steps based on context.",
          "line_range": null,
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorAIBridge",
          "docstring": "Bridge that allows Cursor AI assistant to use WorkflowOrchestrator\nthrough CLI commands and structured JSON responses.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "ai_get_context",
              "docstring": "Get AI-optimized context for current development state.",
              "line_range": null,
              "parameters": [
                "self",
                "query_type",
                "file_path"
              ]
            },
            {
              "name": "ai_analyze_task",
              "docstring": "Analyze a task and provide AI-optimized guidance.",
              "line_range": null,
              "parameters": [
                "self",
                "task_description"
              ]
            },
            {
              "name": "ai_create_task",
              "docstring": "Create a task through AI interface.",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "description",
                "priority"
              ]
            },
            {
              "name": "ai_get_onboarding_guide",
              "docstring": "Get comprehensive AI onboarding guide.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "ai_check_duplicates",
              "docstring": "Check for code duplicates with AI-friendly output.",
              "line_range": null,
              "parameters": [
                "self",
                "threshold"
              ]
            },
            {
              "name": "ai_suggest",
              "docstring": "Get AI suggestions based on context.",
              "line_range": null,
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_estimate_task_complexity",
              "docstring": "Estimate task complexity based on codebase analysis.",
              "line_range": null,
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_suggest_approach",
              "docstring": "Suggest approach based on task and codebase state.",
              "line_range": null,
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_find_relevant_modules",
              "docstring": "Find modules relevant to the task.",
              "line_range": null,
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_check_potential_duplicates",
              "docstring": "Check if task might create duplicates.",
              "line_range": null,
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_recommend_ai_for_task",
              "docstring": "Recommend which AI to use for the task.",
              "line_range": null,
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_generate_workflow_steps",
              "docstring": "Generate workflow steps for the task.",
              "line_range": null,
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_determine_context_requirements",
              "docstring": "Determine what context is needed for the task.",
              "line_range": null,
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on context.",
              "line_range": null,
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_get_available_ai_commands",
              "docstring": "Get available AI commands.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_identify_high_priority_duplicates",
              "docstring": "Identify high-priority duplicates for refactoring.",
              "line_range": null,
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_generate_refactoring_suggestions",
              "docstring": "Generate refactoring suggestions.",
              "line_range": null,
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_classify_task_type",
              "docstring": "Classify task type for AI delegation.",
              "line_range": null,
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_generate_next_steps",
              "docstring": "Generate next steps based on context.",
              "line_range": null,
              "parameters": [
                "self",
                "context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "WorkflowOrchestrator",
          "CursorIntegrationManager",
          "Path",
          "str"
        ],
        "ai_get_context": [
          "len",
          "self._get_workflow_suggestions",
          "context.get",
          "datetime.utcnow",
          "cursor_context.get",
          "str",
          "self._get_available_ai_commands"
        ],
        "ai_analyze_task": [
          "self._check_potential_duplicates",
          "self._recommend_ai_for_task",
          "context.get",
          "self._generate_workflow_steps",
          "self._find_relevant_modules",
          "self._suggest_approach",
          "self._estimate_task_complexity",
          "self._determine_context_requirements",
          "str"
        ],
        "ai_create_task": [
          "self.ai_analyze_task",
          "datetime.utcnow",
          "str"
        ],
        "ai_get_onboarding_guide": [
          "str"
        ],
        "ai_check_duplicates": [
          "self._identify_high_priority_duplicates",
          "analysis.get",
          "self._generate_refactoring_suggestions",
          "str"
        ],
        "ai_suggest": [
          "self._get_workflow_suggestions",
          "self._generate_next_steps",
          "self._classify_task_type",
          "delegation.get",
          "str"
        ],
        "_estimate_task_complexity": [
          "task.lower",
          "complexity_keywords.items",
          "any"
        ],
        "_suggest_approach": [
          "task.lower",
          "approaches.append"
        ],
        "_find_relevant_modules": [
          "relevant.append",
          "struct_analysis.get",
          "task.lower",
          "module.get",
          "any"
        ],
        "_check_potential_duplicates": [],
        "_recommend_ai_for_task": [
          "task.lower",
          "any"
        ],
        "_generate_workflow_steps": [],
        "_determine_context_requirements": [
          "task.lower",
          "requirements.append"
        ],
        "_get_workflow_suggestions": [],
        "_get_available_ai_commands": [],
        "_identify_high_priority_duplicates": [],
        "_generate_refactoring_suggestions": [],
        "_classify_task_type": [
          "any",
          "context.lower"
        ],
        "_generate_next_steps": [],
        "main": [
          "CursorAIBridge",
          "argparse.ArgumentParser",
          "bridge.ai_suggest",
          "bridge.ai_check_duplicates",
          "bridge.ai_get_context",
          "bridge.ai_analyze_task",
          "json.dumps",
          "bridge.ai_onboarding_guide",
          "bridge.ai_create_task",
          "parser.parse_args",
          "parser.add_argument",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "CursorIntegrationManager",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "WorkflowOrchestrator",
        "ai_self_awareness",
        "argparse",
        "cursor_integration",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": null,
      "artifact_id": "b7b0cc88-7aa0-4e53-85a4-9ffb36ccc391"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.transpiler",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/transpiler.py",
      "category": "core",
      "module_doc": "AI-Powered Universal Transpiler\nConverts entire codebases from one language to another using LLM analysis",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for AI transpiler",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "analyze_source_project",
          "docstring": "Analyze source project structure",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "create_target_project_structure",
          "docstring": "Create target project directory structure",
          "line_range": null,
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_generate_structure_info",
          "docstring": "Generate structure information for README",
          "line_range": null,
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "transpile_module",
          "docstring": "Transpile a single module using AI",
          "line_range": null,
          "parameters": [
            "self",
            "module",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_format_functions",
          "docstring": "Format functions for prompt",
          "line_range": null,
          "parameters": [
            "self",
            "functions"
          ],
          "decorators": []
        },
        {
          "name": "_format_classes",
          "docstring": "Format classes for prompt",
          "line_range": null,
          "parameters": [
            "self",
            "classes"
          ],
          "decorators": []
        },
        {
          "name": "determine_target_path",
          "docstring": "Determine target file path for transpiled module",
          "line_range": null,
          "parameters": [
            "self",
            "module"
          ],
          "decorators": []
        },
        {
          "name": "transpile_project",
          "docstring": "Transpile entire project",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TranspilerConfig",
          "docstring": "Configuration for AI transpiler",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "LanguageTemplates",
          "docstring": "Templates and patterns for different target languages",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "AITranspiler",
          "docstring": "AI-powered code transpiler",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "analyze_source_project",
              "docstring": "Analyze source project structure",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "create_target_project_structure",
              "docstring": "Create target project directory structure",
              "line_range": null,
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_generate_structure_info",
              "docstring": "Generate structure information for README",
              "line_range": null,
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "transpile_module",
              "docstring": "Transpile a single module using AI",
              "line_range": null,
              "parameters": [
                "self",
                "module",
                "context"
              ]
            },
            {
              "name": "_format_functions",
              "docstring": "Format functions for prompt",
              "line_range": null,
              "parameters": [
                "self",
                "functions"
              ]
            },
            {
              "name": "_format_classes",
              "docstring": "Format classes for prompt",
              "line_range": null,
              "parameters": [
                "self",
                "classes"
              ]
            },
            {
              "name": "determine_target_path",
              "docstring": "Determine target file path for transpiled module",
              "line_range": null,
              "parameters": [
                "self",
                "module"
              ]
            },
            {
              "name": "transpile_project",
              "docstring": "Transpile entire project",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "UniversalConverter",
          "ConverterConfig",
          "LLMClient"
        ],
        "analyze_source_project": [
          "logger.info"
        ],
        "create_target_project_structure": [
          "shutil.rmtree",
          "logger.warning",
          "output_path.mkdir",
          "Path",
          "self._generate_structure_info",
          "output_path.exists",
          "src_dir.mkdir"
        ],
        "_generate_structure_info": [
          "len",
          "categories.items",
          "category.title",
          "module.get",
          "analysis.get",
          "stats.get"
        ],
        "transpile_module": [
          "len",
          "response.strip",
          "self._format_functions",
          "logger.error",
          "target_lang.upper",
          "ctx_module.get",
          "module.get",
          "target_lang.lower",
          "str",
          "self._format_classes"
        ],
        "_format_functions": [
          "len",
          "func.get"
        ],
        "_format_classes": [
          "len",
          "cls.get"
        ],
        "determine_target_path": [
          "len",
          "module.get",
          "Path",
          "module_id.split"
        ],
        "transpile_project": [
          "logger.info",
          "len",
          "report_path.write_text",
          "str",
          "self.create_target_project_structure",
          "logger.error",
          "self.analyze_source_project",
          "Path",
          "full_target_path.write_text",
          "range",
          "self.determine_target_path",
          "errors.append",
          "transpiled_files.append",
          "analysis.get",
          "self.transpile_module",
          "json.dumps"
        ],
        "main": [
          "transpiler.transpile_project",
          "len",
          "argparse.ArgumentParser",
          "Language",
          "logger.error",
          "TranspilerConfig",
          "traceback.print_exc",
          "AITranspiler",
          "exit",
          "parser.parse_args",
          "parser.add_argument",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "ConverterConfig",
        "Dict",
        "Enum",
        "LLMClient",
        "Language",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "UniversalConverter",
        "argparse",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "llm_client",
        "logging",
        "os",
        "parsers.universal_converter",
        "pathlib",
        "shutil",
        "traceback",
        "typing"
      ],
      "hash": null,
      "artifact_id": "084bfada-2288-4cb5-a03f-730affec6f14"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.json_selector",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": null,
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": null,
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "isinstance",
          "filtered.append",
          "data.get",
          "item.get"
        ],
        "select_json": [
          "open",
          "f.seek",
          "ijson.parse",
          "current_item.get",
          "logging.error",
          "json.load",
          "Path",
          "json_file.exists",
          "prefix.startswith",
          "filtered.append",
          "path.append",
          "filter_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "2655eb39-215a-4d59-9ea4-d9d2ec709c4f"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.cli",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.strip",
          "gitignore_path.exists",
          "gitignore_path.open",
          "logging.error",
          "Path",
          "line.startswith"
        ],
        "load_config": [
          "config_path.open",
          "logging.error",
          "toml.load",
          "Path",
          "config_path.exists"
        ],
        "read_file_content": [
          "logging.error",
          "f.read",
          "path.is_file",
          "Path",
          "path.open"
        ],
        "write_to_file": [
          "logging.error",
          "logging.warning",
          "logging.info",
          "file_path.open",
          "Path",
          "re.sub",
          "base_path.mkdir",
          "f.write",
          "file_path.exists",
          "str"
        ],
        "parse_files_from_response": [
          "content.strip",
          "filename.strip",
          "re.findall",
          "files.append"
        ],
        "interactive": [
          "interactive_modular",
          "interactive_legacy",
          "logging.warning"
        ],
        "interactive_modular": [
          "create_cli_core",
          "hasattr",
          "cli_core.run_interactive_mode",
          "logging.info"
        ],
        "interactive_legacy": [
          "attach_to_llm_request",
          "cache.close",
          "sorted",
          "m.group",
          "workflow.get",
          "os.listdir",
          "time.ctime",
          "isinstance",
          "re.match",
          "struct_data.get",
          "logging.warning",
          "subprocess.run",
          "Path",
          "load_gitignore",
          "cache.clear",
          "args_str.strip",
          "JSONCache",
          "cache.list_keys",
          "client.query",
          "os.makedirs",
          "print",
          "write_to_file",
          "open",
          "read_file_content",
          "len",
          "json.load",
          "parse",
          "cache.get_stats",
          "user_input.lower",
          "time.time",
          "json.dumps",
          "input",
          "int",
          "logging.error",
          "user_input.startswith",
          "process_cli_queue_enhanced",
          "os.stat",
          "json.dump",
          "LLMClient",
          "events_data.append",
          "get_folder_structure"
        ],
        "process_cli_queue_enhanced": [
          "open",
          "len",
          "write_to_file",
          "read_file_content",
          "json.load",
          "logging.info",
          "logging.error",
          "workflow.get",
          "attach_to_llm_request",
          "client.query",
          "load_gitignore",
          "enumerate",
          "item.get",
          "isinstance",
          "options.get",
          "get_folder_structure",
          "time.time",
          "print"
        ],
        "parse": [
          "logging.warning",
          "logging.info",
          "cache.cache_json",
          "cache.close",
          "logging.error",
          "Path",
          "load_config",
          "load_gitignore",
          "cli_config.get",
          "json.dump",
          "config.get",
          "parsing_config.get",
          "JSONCache",
          "generate_json"
        ],
        "query": [
          "hasattr",
          "logging.error",
          "logging.info",
          "create_context_orchestrator",
          "logging.warning",
          "client.query",
          "cache.close",
          "Path",
          "json.dump",
          "LLMClient",
          "orchestrator.get_context_for_scenario",
          "JSONCache",
          "client.query_with_context"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "copilot": [
          "manager.unload_context_layer",
          "getattr",
          "manager.validate_change",
          "f.write",
          "smart_suggest",
          "Path",
          "manager.close",
          "initialize_copilot",
          "shutil.copy",
          "config_path.exists",
          "print",
          "open",
          "layers.split",
          "hasattr",
          "manager.export_context",
          "enumerate",
          "logging.info",
          "logging.error",
          "manager.get_context_status",
          "manager.refresh_all_contexts",
          "manager.load_context_layer",
          "template_path.exists"
        ],
        "audit": [
          "hasattr",
          "analyze_duplicates",
          "Path",
          "file_path.exists",
          "print"
        ],
        "analyze_duplicates": [
          "len",
          "open",
          "hasattr",
          "sorted",
          "WorkflowOrchestrator",
          "traceback.print_exc",
          "duplication_data.get",
          "filtered_duplicates.items",
          "json.dump",
          "json.dumps",
          "enumerate",
          "rec.get",
          "getattr",
          "orchestrator.analyze_codebase_for_duplicates",
          "duplicates.items",
          "r.get",
          "analysis.get",
          "print"
        ],
        "main": [
          "interactive",
          "dogfood_parser.add_argument",
          "copilot_parser.add_argument",
          "audit",
          "query_parser.add_argument",
          "query",
          "parser.parse_args",
          "asyncio.run",
          "parser.add_subparsers",
          "analyze_duplicates",
          "dogfood",
          "context_parser.add_argument",
          "parse",
          "subparsers.add_parser",
          "review",
          "context",
          "parse_parser.add_argument",
          "duplicates_parser.add_argument",
          "argparse.ArgumentParser",
          "interactive_parser.add_argument",
          "review_parser.add_argument",
          "audit_parser.add_argument",
          "copilot"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "WorkflowOrchestrator",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "cli_core",
        "context_orchestrator",
        "copilot",
        "create_cli_core",
        "create_context_orchestrator",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "shutil",
        "smart_suggest",
        "subprocess",
        "sys",
        "time",
        "toml",
        "traceback",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": null,
      "artifact_id": "7314e135-e955-4441-91b4-fb8cc047ce22"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.cursor_integration",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/cursor_integration.py",
      "category": "core",
      "module_doc": "Cursor IDE Integration Module\nProvides seamless integration between llmstruct AI capabilities and Cursor IDE.",
      "functions": [
        {
          "name": "create_cursor_integration",
          "docstring": "Create a Cursor integration manager for the project.",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_optimized_context",
          "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
          "line_range": null,
          "parameters": [
            "self",
            "query_type",
            "file_context"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": null,
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": null,
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "delegate_to_optimal_ai",
          "docstring": "Route tasks to best AI model based on preferences.",
          "line_range": null,
          "parameters": [
            "self",
            "task_type",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_delegation_confidence",
          "docstring": "Calculate confidence in AI delegation decision.",
          "line_range": null,
          "parameters": [
            "self",
            "task_type",
            "selected_ai"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals.",
          "line_range": null,
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "get_priority_guidance",
          "docstring": "Provide priority guidance based on business objectives.",
          "line_range": null,
          "parameters": [
            "self",
            "feature_options"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_feature_score",
          "docstring": "Calculate priority score for a feature.",
          "line_range": null,
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_get_scoring_reasoning",
          "docstring": "Get reasoning for feature scoring.",
          "line_range": null,
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "Start a new Cursor session.",
          "line_range": null,
          "parameters": [
            "self",
            "session_id",
            "user_preferences"
          ],
          "decorators": []
        },
        {
          "name": "save_session_context",
          "docstring": "Save important context for next session.",
          "line_range": null,
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load context from previous sessions.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_cursor_response",
          "docstring": "Get comprehensive response optimized for Cursor.",
          "line_range": null,
          "parameters": [
            "self",
            "query",
            "file_context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorSession",
          "docstring": "Represents a Cursor IDE session with context and preferences.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "CursorContextManager",
          "docstring": "Manages context optimization specifically for Cursor interactions.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_cursor_optimized_context",
              "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
              "line_range": null,
              "parameters": [
                "self",
                "query_type",
                "file_context"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": null,
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": null,
              "parameters": [
                "self",
                "data"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorMultiAIOrchestrator",
          "docstring": "Coordinates different AI models through Cursor interface.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "delegate_to_optimal_ai",
              "docstring": "Route tasks to best AI model based on preferences.",
              "line_range": null,
              "parameters": [
                "self",
                "task_type",
                "context"
              ]
            },
            {
              "name": "_calculate_delegation_confidence",
              "docstring": "Calculate confidence in AI delegation decision.",
              "line_range": null,
              "parameters": [
                "self",
                "task_type",
                "selected_ai"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "PersonalPlanningCursorBridge",
          "docstring": "Bridge between personal planning and Cursor without exposing sensitive data.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals.",
              "line_range": null,
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "get_priority_guidance",
              "docstring": "Provide priority guidance based on business objectives.",
              "line_range": null,
              "parameters": [
                "self",
                "feature_options"
              ]
            },
            {
              "name": "_calculate_feature_score",
              "docstring": "Calculate priority score for a feature.",
              "line_range": null,
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_get_scoring_reasoning",
              "docstring": "Get reasoning for feature scoring.",
              "line_range": null,
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorSessionManager",
          "docstring": "Maintains context across Cursor sessions for better continuity.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "start_session",
              "docstring": "Start a new Cursor session.",
              "line_range": null,
              "parameters": [
                "self",
                "session_id",
                "user_preferences"
              ]
            },
            {
              "name": "save_session_context",
              "docstring": "Save important context for next session.",
              "line_range": null,
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load context from previous sessions.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorIntegrationManager",
          "docstring": "Main integration manager that coordinates all Cursor-specific features.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_comprehensive_cursor_response",
              "docstring": "Get comprehensive response optimized for Cursor.",
              "line_range": null,
              "parameters": [
                "self",
                "query",
                "file_context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CursorMultiAIOrchestrator",
          "CursorSessionManager",
          "CursorContextManager",
          "SystemCapabilityDiscovery",
          "PersonalPlanningCursorBridge"
        ],
        "get_cursor_optimized_context": [
          "open",
          "context_rules.get",
          "json.load",
          "logger.error",
          "self._apply_privacy_filter",
          "optimal_config.get",
          "file_path.exists",
          "str"
        ],
        "_load_cursor_config": [
          "open",
          "json.load",
          "logger.error",
          "Path",
          "config_path.exists"
        ],
        "_apply_privacy_filter": [
          "self._filter_sensitive_dict",
          "context_data.items",
          "isinstance"
        ],
        "_filter_sensitive_dict": [
          "data.items",
          "self._filter_sensitive_dict",
          "isinstance",
          "any",
          "key.lower"
        ],
        "delegate_to_optimal_ai": [
          "logger.error",
          "Path",
          "self._calculate_delegation_confidence",
          "delegation_rules.get",
          "str"
        ],
        "_calculate_delegation_confidence": [
          "delegation_rules.get"
        ],
        "get_goal_aligned_suggestions": [
          "logger.error",
          "any",
          "technical_context.lower",
          "suggestions.extend"
        ],
        "get_priority_guidance": [
          "decision_guidance.get",
          "scored_features.append",
          "self._get_scoring_reasoning",
          "logger.error",
          "scored_features.sort",
          "self._calculate_feature_score",
          "str"
        ],
        "_calculate_feature_score": [
          "feature.lower",
          "any",
          "prioritization.get",
          "float"
        ],
        "_get_scoring_reasoning": [
          "feature.lower",
          "any",
          "reasons.append"
        ],
        "_load_personal_bridge": [
          "open",
          "logger.error",
          "json.load",
          "bridge_path.exists"
        ],
        "start_session": [
          "logger.error",
          "self._load_session_context",
          "CursorSession",
          "previous_context.get"
        ],
        "save_session_context": [
          "open",
          "logger.error",
          "session_data.get",
          "Path",
          "json.dump",
          "str"
        ],
        "_load_session_context": [
          "open",
          "logger.error",
          "json.load"
        ],
        "get_comprehensive_cursor_response": [
          "logger.error",
          "str"
        ],
        "create_cursor_integration": [
          "CursorIntegrationManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.context_orchestrator",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c988fe8e-1696-415d-8060-a197830b9261"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.cli_core",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/cli_core.py",
      "category": "core",
      "module_doc": "Core CLI functionality and main loop.",
      "functions": [
        {
          "name": "create_cli_core",
          "docstring": "Factory function to create CLI core instance.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI core with root directory.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_cache",
          "docstring": "Initialize cache if enabled in config.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_copilot",
          "docstring": "Initialize Copilot integration if enabled.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive_mode",
          "docstring": "Run the interactive CLI mode.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "Clean up resources.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLICore",
          "docstring": "Core CLI class handling main loop and coordination.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI core with root directory.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "setup_cache",
              "docstring": "Initialize cache if enabled in config.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_copilot",
              "docstring": "Initialize Copilot integration if enabled.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_interactive_mode",
              "docstring": "Run the interactive CLI mode.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CommandProcessor",
          "CLIConfig",
          "CLIUtils"
        ],
        "setup_cache": [
          "logging.info",
          "logging.warning",
          "cache_config.get",
          "Path",
          "cache_path.mkdir",
          "JSONCache",
          "str"
        ],
        "setup_copilot": [
          "initialize_copilot",
          "logging.info",
          "copilot_config.get",
          "logging.warning"
        ],
        "run_interactive_mode": [
          "input",
          "logging.error",
          "user_input.startswith",
          "self.cleanup",
          "self.setup_cache",
          "self.setup_copilot",
          "user_input.lower",
          "print"
        ],
        "cleanup": [
          "logging.info"
        ],
        "create_cli_core": [
          "CLICore"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "JSONCache",
        "Optional",
        "Path",
        "cli_commands",
        "cli_config",
        "cli_utils",
        "copilot",
        "initialize_copilot",
        "llmstruct.cache",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ae56f55f-9520-4329-a44a-61fc3f80bf17"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.workspace",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/workspace.py",
      "category": "core",
      "module_doc": "Workspace State & Mode Management System\nEnhanced AI-Human Collaboration with Context Boundaries",
      "functions": [
        {
          "name": "create_workspace_manager",
          "docstring": "Factory function to create workspace manager",
          "line_range": null,
          "parameters": [
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_or_create_state",
          "docstring": "Load existing workspace state or create default",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_permission_templates",
          "docstring": "Load permission templates for different modes",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "set_mode",
          "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
          "line_range": null,
          "parameters": [
            "self",
            "modes",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_parse_modes_from_string",
          "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
          "line_range": null,
          "parameters": [
            "self",
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "_combine_mode_permissions",
          "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
          "line_range": null,
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "_get_mode_combination_name",
          "docstring": "Get descriptive name for mode combination",
          "line_range": null,
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "get_current_state",
          "docstring": "Get current workspace state",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "check_permission",
          "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
          "line_range": null,
          "parameters": [
            "self",
            "operation",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "_get_required_capability",
          "docstring": "Map operations to required capabilities",
          "line_range": null,
          "parameters": [
            "self",
            "operation"
          ],
          "decorators": []
        },
        {
          "name": "_is_restricted_target",
          "docstring": "Check if target matches any file restrictions",
          "line_range": null,
          "parameters": [
            "self",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "set_emergency_override",
          "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
          "line_range": null,
          "parameters": [
            "self",
            "level",
            "reason",
            "duration_minutes"
          ],
          "decorators": []
        },
        {
          "name": "_check_emergency_override",
          "docstring": "Check if emergency override is active and not expired",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_strict_mode",
          "docstring": "Integration with existing strict mode system",
          "line_range": null,
          "parameters": [
            "self",
            "strict_tags"
          ],
          "decorators": []
        },
        {
          "name": "add_decision_workflow",
          "docstring": "Add decision to workflow tracking (for [decide] mode)",
          "line_range": null,
          "parameters": [
            "self",
            "decision_id",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "get_workspace_status",
          "docstring": "Get comprehensive workspace status for debugging and display",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_override_time_remaining",
          "docstring": "Get formatted time remaining for emergency override",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_state",
          "docstring": "Save current state to file",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_mode_status",
          "docstring": "Get formatted status string for CLI display",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WorkspaceStateManager",
          "docstring": "Core workspace state management with mode-based permissions and context boundaries.\n\nFeatures:\n- Multi-dimensional mode system ([code][debug], [discuss][meta])\n- Hybrid permission system (capabilities + file restrictions)\n- Smart mode combinations with context awareness\n- Emergency override protocols with time-boxing\n- Integration with existing strict mode system",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "workspace_dir"
              ]
            },
            {
              "name": "_load_or_create_state",
              "docstring": "Load existing workspace state or create default",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_permission_templates",
              "docstring": "Load permission templates for different modes",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "set_mode",
              "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
              "line_range": null,
              "parameters": [
                "self",
                "modes",
                "session_id"
              ]
            },
            {
              "name": "_parse_modes_from_string",
              "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
              "line_range": null,
              "parameters": [
                "self",
                "mode_string"
              ]
            },
            {
              "name": "_combine_mode_permissions",
              "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
              "line_range": null,
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "_get_mode_combination_name",
              "docstring": "Get descriptive name for mode combination",
              "line_range": null,
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "get_current_state",
              "docstring": "Get current workspace state",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "check_permission",
              "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
              "line_range": null,
              "parameters": [
                "self",
                "operation",
                "target"
              ]
            },
            {
              "name": "_get_required_capability",
              "docstring": "Map operations to required capabilities",
              "line_range": null,
              "parameters": [
                "self",
                "operation"
              ]
            },
            {
              "name": "_is_restricted_target",
              "docstring": "Check if target matches any file restrictions",
              "line_range": null,
              "parameters": [
                "self",
                "target"
              ]
            },
            {
              "name": "set_emergency_override",
              "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
              "line_range": null,
              "parameters": [
                "self",
                "level",
                "reason",
                "duration_minutes"
              ]
            },
            {
              "name": "_check_emergency_override",
              "docstring": "Check if emergency override is active and not expired",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_strict_mode",
              "docstring": "Integration with existing strict mode system",
              "line_range": null,
              "parameters": [
                "self",
                "strict_tags"
              ]
            },
            {
              "name": "add_decision_workflow",
              "docstring": "Add decision to workflow tracking (for [decide] mode)",
              "line_range": null,
              "parameters": [
                "self",
                "decision_id",
                "decision_data"
              ]
            },
            {
              "name": "get_workspace_status",
              "docstring": "Get comprehensive workspace status for debugging and display",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_override_time_remaining",
              "docstring": "Get formatted time remaining for emergency override",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_state",
              "docstring": "Save current state to file",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_mode_status",
              "docstring": "Get formatted status string for CLI display",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_or_create_state",
          "Path",
          "self._load_permission_templates"
        ],
        "_load_or_create_state": [
          "open",
          "datetime.now",
          "json.load",
          "self._save_state"
        ],
        "_load_permission_templates": [],
        "set_mode": [
          "len",
          "datetime.now",
          "combined_permissions.get",
          "self._combine_mode_permissions",
          "self._save_state",
          "self._get_mode_combination_name",
          "self._parse_modes_from_string",
          "isinstance"
        ],
        "_parse_modes_from_string": [
          "re.findall"
        ],
        "_combine_mode_permissions": [
          "logger.info",
          "set",
          "template.get",
          "list",
          "sorted"
        ],
        "_get_mode_combination_name": [
          "combination_names.get",
          "sorted"
        ],
        "get_current_state": [],
        "check_permission": [
          "self._check_emergency_override",
          "self._get_required_capability",
          "self._is_restricted_target",
          "permissions.get"
        ],
        "_get_required_capability": [
          "capability_map.items",
          "operation.startswith"
        ],
        "_is_restricted_target": [
          "target.startswith",
          "restriction.startswith",
          "fnmatch.fnmatch"
        ],
        "set_emergency_override": [
          "self._save_state",
          "timedelta",
          "datetime.now",
          "expires_at.isoformat"
        ],
        "_check_emergency_override": [
          "datetime.fromisoformat",
          "datetime.now",
          "self._save_state",
          "override.get"
        ],
        "integrate_strict_mode": [
          "datetime.now",
          "self._save_state"
        ],
        "add_decision_workflow": [
          "datetime.now",
          "self._save_state"
        ],
        "get_workspace_status": [
          "len",
          "override.get",
          "self._get_override_time_remaining",
          "self._get_mode_combination_name"
        ],
        "_get_override_time_remaining": [
          "remaining.total_seconds",
          "datetime.now",
          "int",
          "override.get",
          "datetime.fromisoformat"
        ],
        "_save_state": [
          "open",
          "json.dump"
        ],
        "get_mode_status": [
          "override.get",
          "self._get_mode_combination_name"
        ],
        "create_workspace_manager": [
          "WorkspaceStateManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "Union",
        "datetime",
        "fnmatch",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "timedelta",
        "timezone",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c9d7e704-e06c-4425-92d6-412ee7ca8277"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.parsers.__init__",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "javascript_parser"
      ],
      "hash": null,
      "artifact_id": "e15f6d14-bf2b-4aad-97aa-1a7a016e8e4f"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.parsers.javascript_parser",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "open",
          "f.read",
          "hashlib.sha256"
        ],
        "compute_file_metadata": [
          "open",
          "self.file_hash",
          "os.stat",
          "sum"
        ],
        "parse_module": [
          "open",
          "self.compute_file_metadata",
          "f.read",
          "esprima.parseModule",
          "str"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d463efe2-1acd-409b-841b-c7c7e1727c0a"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.parsers.universal_converter",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/parsers/universal_converter.py",
      "category": "core",
      "module_doc": "Universal Code Converter - Orchestrates all language parsers\nConverts any codebase to llmstruct JSON format",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for universal converter",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "detect_language",
          "docstring": "Detect programming language from file extension",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "detect_project_languages",
          "docstring": "Detect all languages in project and count files",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "get_project_files",
          "docstring": "Get all relevant files for conversion",
          "line_range": null,
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_python_project",
          "docstring": "Convert Python project to llmstruct format",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_go_project",
          "docstring": "Convert Go project to llmstruct format",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_javascript_project",
          "docstring": "Convert JavaScript project to llmstruct format",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_project",
          "docstring": "Convert any project to llmstruct format",
          "line_range": null,
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_multi_language_project",
          "docstring": "Convert multi-language project with separate sections per language",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_build_project_structure",
          "docstring": "Build standard llmstruct project structure",
          "line_range": null,
          "parameters": [
            "self",
            "language",
            "project_path",
            "modules",
            "toc"
          ],
          "decorators": []
        },
        {
          "name": "_build_empty_project_structure",
          "docstring": "Build empty structure when conversion fails",
          "line_range": null,
          "parameters": [
            "self",
            "language",
            "project_path",
            "error"
          ],
          "decorators": []
        },
        {
          "name": "_merge_language_results",
          "docstring": "Merge multiple language results into unified structure",
          "line_range": null,
          "parameters": [
            "self",
            "project_path",
            "language_results"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Language",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ConverterConfig",
          "docstring": "Configuration for universal converter",
          "line_range": null,
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "UniversalConverter",
          "docstring": "Universal code converter for any programming language",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "detect_language",
              "docstring": "Detect programming language from file extension",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "detect_project_languages",
              "docstring": "Detect all languages in project and count files",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "get_project_files",
              "docstring": "Get all relevant files for conversion",
              "line_range": null,
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_python_project",
              "docstring": "Convert Python project to llmstruct format",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_go_project",
              "docstring": "Convert Go project to llmstruct format",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_javascript_project",
              "docstring": "Convert JavaScript project to llmstruct format",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_project",
              "docstring": "Convert any project to llmstruct format",
              "line_range": null,
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_multi_language_project",
              "docstring": "Convert multi-language project with separate sections per language",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_build_project_structure",
              "docstring": "Build standard llmstruct project structure",
              "line_range": null,
              "parameters": [
                "self",
                "language",
                "project_path",
                "modules",
                "toc"
              ]
            },
            {
              "name": "_build_empty_project_structure",
              "docstring": "Build empty structure when conversion fails",
              "line_range": null,
              "parameters": [
                "self",
                "language",
                "project_path",
                "error"
              ]
            },
            {
              "name": "_merge_language_results",
              "docstring": "Merge multiple language results into unified structure",
              "line_range": null,
              "parameters": [
                "self",
                "project_path",
                "language_results"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "JavaScriptParser",
          "ConverterConfig",
          "GoAnalyzer"
        ],
        "detect_language": [
          "Path"
        ],
        "detect_project_languages": [
          "languages.get",
          "any",
          "self.detect_language",
          "os.walk"
        ],
        "get_project_files": [
          "files.append",
          "any",
          "self.detect_language",
          "os.walk"
        ],
        "convert_python_project": [
          "logger.info",
          "analyze_python",
          "self.get_project_files",
          "len",
          "module_data.get",
          "self._build_project_structure",
          "logger.warning",
          "modules.append",
          "toc.append"
        ],
        "convert_go_project": [
          "logger.info",
          "self._build_empty_project_structure",
          "logger.error",
          "convert_to_llmstruct_format",
          "str"
        ],
        "convert_javascript_project": [
          "logger.info",
          "self.get_project_files",
          "module_data.get",
          "len",
          "self._build_project_structure",
          "logger.warning",
          "modules.append",
          "toc.append"
        ],
        "convert_project": [
          "languages.keys",
          "logger.info",
          "NotImplementedError",
          "self.convert_go_project",
          "max",
          "self.detect_project_languages",
          "ValueError",
          "self.convert_javascript_project",
          "self.convert_python_project"
        ],
        "convert_multi_language_project": [
          "logger.info",
          "languages.keys",
          "logger.error",
          "self.convert_go_project",
          "logger.warning",
          "self.detect_project_languages",
          "self._merge_language_results",
          "ValueError",
          "self.convert_javascript_project",
          "self.convert_python_project"
        ],
        "_build_project_structure": [
          "len",
          "language.title",
          "m.get",
          "sum"
        ],
        "_build_empty_project_structure": [],
        "_merge_language_results": [
          "all_modules.append",
          "list",
          "language_results.keys",
          "result.get",
          "all_toc.append",
          "language_results.items",
          "stats.get"
        ],
        "main": [
          "open",
          "print",
          "argparse.ArgumentParser",
          "ConverterConfig",
          "Language",
          "logger.error",
          "converter.convert_multi_language_project",
          "converter.convert_project",
          "traceback.print_exc",
          "result.get",
          "UniversalConverter",
          "stats.get",
          "f.write",
          "exit",
          "parser.parse_args",
          "parser.add_argument",
          "json.dumps"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "GoAnalyzer",
        "JavaScriptParser",
        "List",
        "Optional",
        "Path",
        "Union",
        "analyze_module",
        "argparse",
        "convert_to_llmstruct_format",
        "dataclass",
        "dataclasses",
        "enum",
        "go_analyzer",
        "javascript_parser",
        "json",
        "logging",
        "os",
        "pathlib",
        "python_parser",
        "sys",
        "traceback",
        "typing"
      ],
      "hash": null,
      "artifact_id": "63ef2912-0bcb-403b-b8d9-cef42c5ae091"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.parsers.go_analyzer",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "module_doc": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b: go/packages, go/analysis",
      "functions": [
        {
          "name": "convert_to_llmstruct_format",
          "docstring": "\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 llmstruct",
          "line_range": null,
          "parameters": [
            "analysis",
            "include_ranges",
            "goals"
          ],
          "decorators": []
        },
        {
          "name": "_compute_file_hash",
          "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 SHA-256 \u0445\u044d\u0448 \u0444\u0430\u0439\u043b\u0430",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_setup_analyzer",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cleanup",
          "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_project",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_fallback_analysis",
          "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GoAnalyzer",
          "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 Go \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_setup_analyzer",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cleanup",
              "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_project",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_fallback_analysis",
              "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "_setup_analyzer": [
          "analyzer_source.read_text",
          "logging.warning",
          "subprocess.run",
          "Path",
          "tempfile.mkdtemp",
          "str",
          "analyzer_file.write_text"
        ],
        "_cleanup": [
          "shutil.rmtree",
          "Path"
        ],
        "analyze_project": [
          "logging.error",
          "logging.info",
          "logging.warning",
          "json.loads",
          "self._cleanup",
          "subprocess.run",
          "self._setup_analyzer",
          "self._fallback_analysis"
        ],
        "_fallback_analysis": [
          "set",
          "content.split",
          "line.strip",
          "line.split",
          "list",
          "logging.info",
          "len",
          "packages.add",
          "logging.warning",
          "sorted",
          "go_mod_path.exists",
          "Path",
          "line.startswith",
          "file_path.read_text",
          "file_path.relative_to",
          "go_mod_path.read_text",
          "str"
        ],
        "convert_to_llmstruct_format": [
          "len",
          "classes.append",
          "analysis.get",
          "uuid.uuid4",
          "file_data.get",
          "_compute_file_hash",
          "iface.get",
          "path.replace",
          "modules.append",
          "fn.get",
          "path.endswith",
          "sum",
          "struct.get",
          "module.get",
          "toc.append",
          "functions.append",
          "str"
        ],
        "_compute_file_hash": [
          "open",
          "f.read",
          "hashlib.sha256"
        ],
        "main": [
          "open",
          "len",
          "argparse.ArgumentParser",
          "GoAnalyzer",
          "traceback.print_exc",
          "Path",
          "convert_to_llmstruct_format",
          "result.get",
          "sys.exit",
          "analyzer.analyze_project",
          "json.dumps",
          "stats.get",
          "f.write",
          "parser.parse_args",
          "parser.add_argument",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "subprocess",
        "sys",
        "tempfile",
        "traceback",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "35a53b35-e5d7-4c62-b18e-7afcac84d794"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.parsers.python_parser",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data.",
          "line_range": null,
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_AsyncFunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "compute_file_hash": [
          "open",
          "logging.error",
          "f.read",
          "hashlib.sha256"
        ],
        "analyze_module": [
          "open",
          "ast.walk",
          "CallVisitor",
          "classes.append",
          "list",
          "logging.error",
          "sorted",
          "f.read",
          "visitor.visit",
          "Path",
          "ast.parse",
          "ast.unparse",
          "compute_file_hash",
          "ast.get_docstring",
          "infer_category",
          "isinstance",
          "functions.append",
          "str"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f594a1da-62da-49e4-9090-f98c919329cc"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.templates.__init__",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "610146ed-655b-4acd-a071-e12084ca3a1d"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.validators.__init__",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "141ed983-c8c2-4f4a-8ad7-0d85e5fe6387"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.validators.json_validator",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": null,
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": null,
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "open",
          "validate",
          "json.load",
          "logging.error",
          "logging.info",
          "schema_file.exists",
          "Path",
          "json_file.exists",
          "str"
        ],
        "validate_directory": [
          "validate_struct_json",
          "Path",
          "json_file.match",
          "any",
          "str"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "2124ba52-69bb-4423-8edd-3fc85d7302e8"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.generators.json_generator",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "set",
          "uuid.uuid4",
          "file_path.match",
          "sorted",
          "p.rstrip",
          "Path",
          "p.endswith",
          "os.walk",
          "file_path.relative_to",
          "structure.append",
          "any",
          "str"
        ],
        "build_toc_and_modules": [
          "set",
          "len",
          "uuid.uuid4",
          "p.rstrip",
          "Path",
          "modules.append",
          "p.endswith",
          "f.match",
          "analyze_module",
          "toc.append",
          "any",
          "str"
        ],
        "generate_json": [
          "set",
          "len",
          "uuid.uuid4",
          "list",
          "get_folder_structure",
          "Path",
          "sum",
          "build_toc_and_modules",
          "str"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "cf013136-c8b4-4e5e-8683-d65e4ac1536f"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.generators.__init__",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "54e4af66-0133-44e1-bf33-6c35db96d115"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.src.llmstruct.generators.go_json_generator",
      "path": "backup_before_separation_20250529_152219/src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_go_folder_structure",
          "docstring": "Capture directory and file structure for Go projects with artifact_id, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_go_toc_and_modules",
          "docstring": "Build TOC and modules for Go projects with artifact_id and robust filtering.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "extract_go_mod_info",
          "docstring": "Extract information from go.mod file.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "generate_go_json",
          "docstring": "Generate JSON structure for Go project with artifact_id, summary, and tags.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_go_folder_structure": [
          "set",
          "uuid.uuid4",
          "file_path.match",
          "sorted",
          "p.rstrip",
          "Path",
          "p.endswith",
          "os.walk",
          "file_path.relative_to",
          "structure.append",
          "any",
          "str"
        ],
        "build_go_toc_and_modules": [
          "set",
          "len",
          "uuid.uuid4",
          "p.rstrip",
          "Path",
          "modules.append",
          "p.endswith",
          "f.match",
          "analyze_module",
          "module.get",
          "toc.append",
          "any",
          "str"
        ],
        "extract_go_mod_info": [
          "open",
          "len",
          "line.strip",
          "line.split",
          "logging.error",
          "dependencies.append",
          "f.read",
          "go_mod_path.exists",
          "Path",
          "line.startswith",
          "content.strip"
        ],
        "generate_go_json": [
          "extract_go_mod_info",
          "len",
          "set",
          "uuid.uuid4",
          "build_go_toc_and_modules",
          "list",
          "get_go_folder_structure",
          "Path",
          "m.get",
          "go_mod_info.get",
          "sum",
          "str"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.go_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "b12b8131-b560-4296-9fae-144a121dd4c0"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.github_sync_manager",
      "path": "backup_before_separation_20250529_152219/scripts/github_sync_manager.py",
      "category": "core",
      "module_doc": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub\nSupports: Issues, Epics (Projects), Discussions\nSafety: dry-run mode, logging, collision detection",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results for idempotency",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log for future idempotency",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Safe GitHub API request with rate limiting",
          "line_range": null,
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_issues",
          "docstring": "Get existing GitHub issues for collision detection",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_discussions",
          "docstring": "Get existing GitHub discussions",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced (idempotency)",
          "line_range": null,
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "find_existing_by_title",
          "docstring": "Find existing GitHub item by title similarity",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "existing_items"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue",
          "docstring": "Create GitHub issue from processed item",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion",
          "docstring": "Create GitHub discussion from processed item",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic",
          "docstring": "Create GitHub epic (as Project or enhanced Issue)",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "sync_category",
          "docstring": "Sync specific category with GitHub",
          "line_range": null,
          "parameters": [
            "self",
            "category",
            "filename"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Pre-sync validation checks",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "Main sync execution",
          "line_range": null,
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubSyncManager",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results for idempotency",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log for future idempotency",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Safe GitHub API request with rate limiting",
              "line_range": null,
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "get_existing_issues",
              "docstring": "Get existing GitHub issues for collision detection",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_existing_discussions",
              "docstring": "Get existing GitHub discussions",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced (idempotency)",
              "line_range": null,
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "find_existing_by_title",
              "docstring": "Find existing GitHub item by title similarity",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "existing_items"
              ]
            },
            {
              "name": "create_github_issue",
              "docstring": "Create GitHub issue from processed item",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion",
              "docstring": "Create GitHub discussion from processed item",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_epic",
              "docstring": "Create GitHub epic (as Project or enhanced Issue)",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "sync_category",
              "docstring": "Sync specific category with GitHub",
              "line_range": null,
              "parameters": [
                "self",
                "category",
                "filename"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Pre-sync validation checks",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "Main sync execution",
              "line_range": null,
              "parameters": [
                "self",
                "categories"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getenv",
          "Path",
          "self.load_sync_log",
          "print"
        ],
        "load_sync_log": [
          "open",
          "json.load"
        ],
        "save_sync_log": [
          "open",
          "json.dump"
        ],
        "api_request": [
          "response.raise_for_status",
          "int",
          "requests.post",
          "ValueError",
          "response.json",
          "method.upper",
          "time.sleep",
          "requests.get",
          "requests.patch",
          "print"
        ],
        "get_existing_issues": [
          "len",
          "issues.extend",
          "self.api_request"
        ],
        "get_existing_discussions": [],
        "item_already_synced": [
          "item.get"
        ],
        "find_existing_by_title": [
          "len",
          "item.get",
          "title.lower"
        ],
        "create_github_issue": [
          "self.api_request",
          "processing_meta.get",
          "labels.append",
          "item.get",
          "print"
        ],
        "create_github_discussion": [
          "print",
          "item.get"
        ],
        "create_github_epic": [
          "print",
          "self.api_request",
          "item.get"
        ],
        "sync_category": [
          "open",
          "existing.get",
          "self.create_github_discussion",
          "json.load",
          "self.create_github_issue",
          "data.get",
          "datetime.now",
          "self.item_already_synced",
          "self.create_github_epic",
          "self.find_existing_by_title",
          "result.get",
          "self.get_existing_discussions",
          "item.get",
          "self.get_existing_issues",
          "file_path.exists",
          "print"
        ],
        "validate_before_sync": [
          "self.api_request",
          "repo_info.get",
          "rate_limit.get",
          "user_info.get",
          "core_limit.get",
          "print"
        ],
        "run_sync": [
          "datetime.now",
          "self.sync_category",
          "self.validate_before_sync",
          "self.save_sync_log",
          "sum",
          "r.get",
          "results.values",
          "print"
        ],
        "main": [
          "len",
          "GitHubSyncManager",
          "argparse.ArgumentParser",
          "result.get",
          "manager.run_sync",
          "parser.parse_args",
          "parser.add_argument",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ccfe4330-bea6-40f5-9d9f-beae8082d7b6"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.process_926_items",
      "path": "backup_before_separation_20250529_152219/scripts/process_926_items.py",
      "category": "core",
      "module_doc": "926 Items Processing Script - Updated Implementation\nProcesses items according to GitHub roadmap + personal management vision\nImplements all decisions from 926_items_processing_execution_plan.md",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_comprehensive_index",
          "docstring": "Load the 926 items from comprehensive index",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "calculate_confidence_score",
          "docstring": "Calculate confidence score for categorization decision",
          "line_range": null,
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "check_t_pot_related",
          "docstring": "Enhanced T-Pot detection",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_team_implementable",
          "docstring": "Check if team can implement without architecture review",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_personal_vs_team_vs_business",
          "docstring": "Classify as personal/team/business",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "identify_epic_candidates",
          "docstring": "Identify items that should be grouped into epics",
          "line_range": null,
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "extract_epic_name",
          "docstring": "Extract epic name from item",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "categorize_item",
          "docstring": "Main categorization logic with confidence scoring",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "find_duplicates",
          "docstring": "Enhanced duplicate detection with T-Pot special handling",
          "line_range": null,
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "calculate_similarity",
          "docstring": "Enhanced similarity calculation",
          "line_range": null,
          "parameters": [
            "self",
            "title1",
            "title2"
          ],
          "decorators": []
        },
        {
          "name": "suggest_merge_strategy",
          "docstring": "Enhanced merge strategy with T-Pot consideration",
          "line_range": null,
          "parameters": [
            "self",
            "item1",
            "item2"
          ],
          "decorators": []
        },
        {
          "name": "process_items",
          "docstring": "Main processing workflow implementing execution plan",
          "line_range": null,
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "save_results",
          "docstring": "Save categorized results with enhanced metadata",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_category_description",
          "docstring": "Category descriptions per execution plan",
          "line_range": null,
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Main execution workflow per execution plan",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskProcessor926",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_comprehensive_index",
              "docstring": "Load the 926 items from comprehensive index",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "calculate_confidence_score",
              "docstring": "Calculate confidence score for categorization decision",
              "line_range": null,
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "check_t_pot_related",
              "docstring": "Enhanced T-Pot detection",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_team_implementable",
              "docstring": "Check if team can implement without architecture review",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_personal_vs_team_vs_business",
              "docstring": "Classify as personal/team/business",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "identify_epic_candidates",
              "docstring": "Identify items that should be grouped into epics",
              "line_range": null,
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "extract_epic_name",
              "docstring": "Extract epic name from item",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "categorize_item",
              "docstring": "Main categorization logic with confidence scoring",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "find_duplicates",
              "docstring": "Enhanced duplicate detection with T-Pot special handling",
              "line_range": null,
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "calculate_similarity",
              "docstring": "Enhanced similarity calculation",
              "line_range": null,
              "parameters": [
                "self",
                "title1",
                "title2"
              ]
            },
            {
              "name": "suggest_merge_strategy",
              "docstring": "Enhanced merge strategy with T-Pot consideration",
              "line_range": null,
              "parameters": [
                "self",
                "item1",
                "item2"
              ]
            },
            {
              "name": "process_items",
              "docstring": "Main processing workflow implementing execution plan",
              "line_range": null,
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "save_results",
              "docstring": "Save categorized results with enhanced metadata",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_category_description",
              "docstring": "Category descriptions per execution plan",
              "line_range": null,
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "run",
              "docstring": "Main execution workflow per execution plan",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "datetime.now",
          "Path"
        ],
        "load_comprehensive_index": [
          "open",
          "set",
          "data.items",
          "len",
          "json.load",
          "value.items",
          "hash",
          "index_path.exists",
          "item_content.lower",
          "unique_items.append",
          "items.append",
          "items.extend",
          "seen_items.add",
          "item.get",
          "isinstance",
          "any",
          "str",
          "print"
        ],
        "calculate_confidence_score": [
          "sum",
          "min",
          "self.check_t_pot_related",
          "item.get",
          "str"
        ],
        "check_t_pot_related": [
          "any",
          "str"
        ],
        "check_team_implementable": [
          "str",
          "sum"
        ],
        "check_personal_vs_team_vs_business": [
          "sum",
          "max",
          "str",
          "item.get"
        ],
        "identify_epic_candidates": [
          "len",
          "item.get",
          "self.extract_epic_name",
          "epic_groups.items",
          "any",
          "str"
        ],
        "extract_epic_name": [
          "title.split",
          "item.get"
        ],
        "categorize_item": [
          "self.check_team_implementable",
          "self.calculate_confidence_score",
          "self.check_personal_vs_team_vs_business",
          "self.check_t_pot_related",
          "any",
          "str"
        ],
        "find_duplicates": [
          "duplicates.append",
          "self.suggest_merge_strategy",
          "self.calculate_similarity",
          "self.check_t_pot_related",
          "item.get",
          "seen_items.items"
        ],
        "calculate_similarity": [
          "set",
          "len",
          "title1.split",
          "words1.union",
          "title2.split",
          "min",
          "words1.intersection"
        ],
        "suggest_merge_strategy": [
          "len",
          "str",
          "self.check_t_pot_related",
          "item2.get",
          "item1.get"
        ],
        "process_items": [
          "len",
          "self.find_duplicates",
          "set",
          "datetime.now",
          "self.check_team_implementable",
          "id",
          "self.categorize_item",
          "duplicate_item_ids.add",
          "self.check_t_pot_related",
          "self.extract_epic_name",
          "category.startswith",
          "low_confidence_items.append",
          "any",
          "processed_item.copy",
          "str",
          "print"
        ],
        "save_results": [
          "len",
          "open",
          "datetime.now",
          "item.get",
          "json.dump",
          "self.get_category_description",
          "sum",
          "print"
        ],
        "get_category_description": [
          "descriptions.get"
        ],
        "run": [
          "self.load_comprehensive_index",
          "self.save_results",
          "self.process_items",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9be53dc7-b3dc-4d58-a379-d627c594d951"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.github_sync_manager_enhanced",
      "path": "backup_before_separation_20250529_152219/scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "module_doc": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout\n\u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442: processing results + GitHub API + token management + CLI fallback",
      "functions": [
        {
          "name": "print_info",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_success",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_warning",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_error",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_step",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "step",
            "total",
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Enhanced CLI interface",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_github_token",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
          "line_range": null,
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "check_gh_cli",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_token_from_gh_cli",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_github_token",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "detect_repo_from_git",
          "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Enhanced API request with CLI fallback",
          "line_range": null,
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_direct",
          "docstring": "Direct API request",
          "line_range": null,
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_via_cli",
          "docstring": "API request via GitHub CLI",
          "line_range": null,
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue_enhanced",
          "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_acceptance_criteria",
          "docstring": "Format acceptance criteria from item metadata",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_implementation_notes",
          "docstring": "Format implementation notes",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Enhanced validation",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_enhanced_sync",
          "docstring": "Enhanced sync with full project rollout integration",
          "line_range": null,
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        },
        {
          "name": "sync_category_enhanced",
          "docstring": "Enhanced category sync",
          "line_range": null,
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced",
          "line_range": null,
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic_enhanced",
          "docstring": "Enhanced epic creation",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion_enhanced",
          "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "GitHubTokenManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 GitHub \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 (\u0438\u0437 setup_github_token.sh)",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_env_file",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_github_token",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
              "line_range": null,
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "check_gh_cli",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_token_from_gh_cli",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_github_token",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "EnhancedGitHubSyncManager",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 GitHub Sync Manager \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0432\u0441\u0435\u0445 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "detect_repo_from_git",
              "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Enhanced API request with CLI fallback",
              "line_range": null,
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_direct",
              "docstring": "Direct API request",
              "line_range": null,
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_via_cli",
              "docstring": "API request via GitHub CLI",
              "line_range": null,
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "create_github_issue_enhanced",
              "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_acceptance_criteria",
              "docstring": "Format acceptance criteria from item metadata",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_implementation_notes",
              "docstring": "Format implementation notes",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Enhanced validation",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_enhanced_sync",
              "docstring": "Enhanced sync with full project rollout integration",
              "line_range": null,
              "parameters": [
                "self",
                "categories"
              ]
            },
            {
              "name": "sync_category_enhanced",
              "docstring": "Enhanced category sync",
              "line_range": null,
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced",
              "line_range": null,
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "create_github_epic_enhanced",
              "docstring": "Enhanced epic creation",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion_enhanced",
              "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "print_info": [
          "print"
        ],
        "print_success": [
          "print"
        ],
        "print_warning": [
          "print"
        ],
        "print_error": [
          "print"
        ],
        "print_step": [
          "print"
        ],
        "__init__": [
          "GitHubTokenManager",
          "print_info",
          "self.detect_repo_from_git",
          "Path",
          "self.load_sync_log"
        ],
        "load_env_file": [
          "open",
          "value.strip",
          "line.strip",
          "line.split",
          "env_file.exists",
          "Path",
          "line.startswith",
          "key.strip"
        ],
        "test_github_token": [
          "requests.get",
          "response.json"
        ],
        "check_gh_cli": [
          "subprocess.run"
        ],
        "get_token_from_gh_cli": [
          "subprocess.run"
        ],
        "get_github_token": [
          "print_warning",
          "self.get_token_from_gh_cli",
          "os.getenv",
          "self.check_gh_cli",
          "self.test_github_token"
        ],
        "detect_repo_from_git": [
          "len",
          "url.split",
          "url.replace",
          "subprocess.run",
          "print_info",
          "print_warning",
          "url.endswith",
          "path.split",
          "url.startswith"
        ],
        "load_sync_log": [
          "open",
          "json.load"
        ],
        "save_sync_log": [
          "open",
          "json.dump"
        ],
        "api_request": [
          "time.sleep",
          "self._api_request_direct",
          "print_error",
          "self._api_request_via_cli"
        ],
        "_api_request_direct": [
          "response.raise_for_status",
          "int",
          "print_error",
          "requests.post",
          "ValueError",
          "print_warning",
          "response.json",
          "method.upper",
          "requests.get",
          "requests.patch"
        ],
        "_api_request_via_cli": [
          "print_error",
          "json.loads",
          "subprocess.run",
          "print_warning",
          "method.upper",
          "cmd.extend",
          "json.dumps"
        ],
        "create_github_issue_enhanced": [
          "self.api_request",
          "print_info",
          "labels.append",
          "item.get",
          "print_success",
          "self._format_acceptance_criteria",
          "self._format_implementation_notes",
          "processing_meta.get"
        ],
        "_format_acceptance_criteria": [
          "criteria.append",
          "criteria.extend",
          "item.get"
        ],
        "_format_implementation_notes": [
          "processing_meta.get",
          "notes.append",
          "item.get"
        ],
        "validate_before_sync": [
          "self.api_request",
          "print_error",
          "repo_info.get",
          "print_step",
          "user_info.get",
          "print_success",
          "file_path.exists"
        ],
        "run_enhanced_sync": [
          "datetime.now",
          "print_info",
          "print_step",
          "enumerate",
          "result.get",
          "self.validate_before_sync",
          "self.save_sync_log",
          "print_success",
          "self.sync_category_enhanced",
          "print"
        ],
        "sync_category_enhanced": [
          "open",
          "print_error",
          "json.load",
          "datetime.now",
          "data.get",
          "self.create_github_discussion_enhanced",
          "print_info",
          "self.create_github_epic_enhanced",
          "self.item_already_synced",
          "print_warning",
          "result.get",
          "item.get",
          "self.create_github_issue_enhanced",
          "file_path.exists"
        ],
        "item_already_synced": [
          "item.get"
        ],
        "create_github_epic_enhanced": [
          "print_success",
          "print_info",
          "self.api_request",
          "item.get"
        ],
        "create_github_discussion_enhanced": [
          "print_info",
          "print_warning",
          "item.get"
        ],
        "main": [
          "len",
          "print_error",
          "argparse.ArgumentParser",
          "EnhancedGitHubSyncManager",
          "result.get",
          "print_success",
          "parser.parse_args",
          "manager.run_enhanced_sync",
          "parser.add_argument"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ffc98435-77f9-421c-b1f4-df1952a6bf0a"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.fix_github_script",
      "path": "backup_before_separation_20250529_152219/scripts/fix_github_script.py",
      "category": "core",
      "module_doc": "Quick fix for GitHub issues creation script\n\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 JSON \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445",
      "functions": [
        {
          "name": "fix_json_loading",
          "docstring": "\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 JSON \u0434\u0430\u043d\u043d\u044b\u0445",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "fix_json_loading": [
          "open",
          "f.read",
          "Path",
          "content.replace",
          "f.write",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "46db7226-c922-4f36-9980-f196890eac61"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.collector",
      "path": "backup_before_separation_20250529_152219/scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "fnmatch.fnmatch",
          "filtered.append",
          "pattern.startswith"
        ],
        "collect_files": [
          "str",
          "apply_filters",
          "path.is_file",
          "path.relative_to",
          "files.append",
          "root_dir.rglob"
        ],
        "generate_struct": [
          "existing.get",
          "len",
          "uuid.uuid4",
          "collect_files",
          "json.load",
          "logger.info",
          "output_path.open",
          "Path",
          "json.dump",
          "output_path.exists",
          "str"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "7dc9eb5d-3845-4875-8f03-b909e87665e2"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.create_github_issues",
      "path": "backup_before_separation_20250529_152219/scripts/create_github_issues.py",
      "category": "core",
      "module_doc": "GitHub Issues Creator for AI-Dogfooding Project\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GitHub issues \u0438\u0437 \u043d\u0430\u0448\u0438\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447",
      "functions": [
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_epics_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438\u0437 JSON",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f issues",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "token",
            "use_cli"
          ],
          "decorators": []
        },
        {
          "name": "create_epic_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": null,
          "parameters": [
            "self",
            "epic_data"
          ],
          "decorators": []
        },
        {
          "name": "create_task_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": null,
          "parameters": [
            "self",
            "task_data",
            "epic_number"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_api",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_cli",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_format_criteria",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "criteria"
          ],
          "decorators": []
        },
        {
          "name": "_format_tasks",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "_format_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "metrics"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubIssuesCreator",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "token",
                "use_cli"
              ]
            },
            {
              "name": "create_epic_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
              "line_range": null,
              "parameters": [
                "self",
                "epic_data"
              ]
            },
            {
              "name": "create_task_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": null,
              "parameters": [
                "self",
                "task_data",
                "epic_number"
              ]
            },
            {
              "name": "_create_issue_via_api",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_create_issue_via_cli",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_format_criteria",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "criteria"
              ]
            },
            {
              "name": "_format_tasks",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "_format_metrics",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "metrics"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "load_env_file": [
          "open",
          "value.strip",
          "line.strip",
          "line.split",
          "env_file.exists",
          "Path",
          "line.startswith",
          "key.strip",
          "print"
        ],
        "__init__": [],
        "create_epic_issue": [
          "self._format_tasks",
          "epic_data.get",
          "self._format_metrics",
          "self._format_criteria",
          "self._create_issue_via_api",
          "self._create_issue_via_cli"
        ],
        "create_task_issue": [
          "self._create_issue_via_cli",
          "self._format_criteria",
          "task_data.get",
          "self._create_issue_via_api"
        ],
        "_create_issue_via_api": [
          "print",
          "requests.post",
          "response.json"
        ],
        "_create_issue_via_cli": [
          "os.getpid",
          "open",
          "os.unlink",
          "int",
          "subprocess.run",
          "issue_url.split",
          "f.write",
          "print"
        ],
        "_format_criteria": [],
        "_format_tasks": [],
        "_format_metrics": [
          "metrics.items"
        ],
        "load_epics_data": [
          "open",
          "json.load",
          "epics_file.exists",
          "Path",
          "print"
        ],
        "main": [
          "len",
          "load_epics_data",
          "epic_data.get",
          "GitHubIssuesCreator",
          "creator.create_task_issue",
          "os.getenv",
          "epics_data.get",
          "creator.create_epic_issue",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f1e329b0-dac7-4fbb-bcb6-3a17154229c1"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.session_cli",
      "path": "backup_before_separation_20250529_152219/scripts/session_cli.py",
      "category": "core",
      "module_doc": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct.\nPart of the comprehensive session management system.",
      "functions": [
        {
          "name": "get_current_branch",
          "docstring": "Get current git branch.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "save_json_file",
          "docstring": "Save JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_current_timestamp",
          "docstring": "Get current timestamp in ISO format.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log_event",
          "docstring": "Log an event to worklog.json.",
          "line_range": null,
          "parameters": [
            "event_message",
            "author"
          ],
          "decorators": []
        },
        {
          "name": "switch_session",
          "docstring": "Switch to a different session or create new one.",
          "line_range": null,
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "list_sessions",
          "docstring": "List all available sessions.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_session",
          "docstring": "Show current session details.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_worklog",
          "docstring": "Show recent worklog entries.",
          "line_range": null,
          "parameters": [
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main CLI interface.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "get_current_branch": [
          "subprocess.run"
        ],
        "load_json_file": [
          "open",
          "json.load",
          "print"
        ],
        "save_json_file": [
          "open",
          "json.dump",
          "os.makedirs",
          "print"
        ],
        "get_current_timestamp": [
          "datetime.now"
        ],
        "log_event": [
          "save_json_file",
          "load_json_file",
          "get_current_branch",
          "get_current_timestamp",
          "current_session.get",
          "print"
        ],
        "switch_session": [
          "log_event",
          "save_json_file",
          "load_json_file",
          "get_current_branch",
          "get_current_timestamp",
          "print"
        ],
        "list_sessions": [
          "load_json_file",
          "current_session.get",
          "print"
        ],
        "show_current_session": [
          "load_json_file",
          "current_session.get",
          "print"
        ],
        "show_worklog": [
          "len",
          "load_json_file",
          "reversed",
          "print"
        ],
        "main": [
          "len",
          "log_event",
          "int",
          "switch_session",
          "list_sessions",
          "show_worklog",
          "print",
          "show_current_session"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "405601b1-7987-40bc-b196-5413f6331a80"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.epic_roadmap_manager",
      "path": "backup_before_separation_20250529_152219/scripts/epic_roadmap_manager.py",
      "category": "core",
      "module_doc": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u0438:\n- \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 roadmap \u0438 \u043f\u043b\u0430\u043d\u043e\u0432\n- \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439\n- \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441 GitHub epics\n- \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u0432",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_roadmap",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_roadmap",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
          "line_range": null,
          "parameters": [
            "self",
            "roadmap"
          ],
          "decorators": []
        },
        {
          "name": "show_overview",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "show_epic_details",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
          "line_range": null,
          "parameters": [
            "self",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
          "line_range": null,
          "parameters": [
            "self",
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "complete_session",
          "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": null,
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EpicRoadmapManager",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_roadmap",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_roadmap",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
              "line_range": null,
              "parameters": [
                "self",
                "roadmap"
              ]
            },
            {
              "name": "show_overview",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "show_epic_details",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
              "line_range": null,
              "parameters": [
                "self",
                "epic_id"
              ]
            },
            {
              "name": "start_session",
              "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
              "line_range": null,
              "parameters": [
                "self",
                "epic_id",
                "session_id"
              ]
            },
            {
              "name": "complete_session",
              "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": null,
              "parameters": [
                "self",
                "session_id"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "load_roadmap": [
          "open",
          "json.load",
          "print"
        ],
        "save_roadmap": [
          "open",
          "json.dump",
          "datetime.now",
          "print"
        ],
        "show_overview": [
          "print",
          "roadmap.get",
          "self.load_roadmap",
          "epics.items",
          "epic.get",
          "stats.get"
        ],
        "show_epic_details": [
          "len",
          "epic_data.get",
          "session.get",
          "roadmap.get",
          "self.load_roadmap",
          "epic.get",
          "print"
        ],
        "start_session": [
          "open",
          "epic.get",
          "datetime.now",
          "epic_data.get",
          "session.get",
          "json.dump",
          "self.save_roadmap",
          "roadmap.get",
          "self.load_roadmap",
          "os.makedirs",
          "sess.get",
          "print"
        ],
        "complete_session": [
          "open",
          "datetime.now",
          "json.load",
          "sessions_log.append",
          "sess.get",
          "session.get",
          "all",
          "os.remove",
          "json.dump",
          "self.save_roadmap",
          "current_session.get",
          "roadmap.get",
          "self.load_roadmap",
          "os.makedirs",
          "epic.get",
          "print"
        ],
        "main": [
          "manager.show_epic_details",
          "argparse.ArgumentParser",
          "manager.start_session",
          "manager.show_overview",
          "manager.complete_session",
          "EpicRoadmapManager",
          "parser.parse_args",
          "parser.add_argument",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "9399e4cd-6780-460b-94a7-9df3f8282a74"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.auto_update_struct",
      "path": "backup_before_separation_20250529_152219/scripts/auto_update_struct.py",
      "category": "core",
      "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.",
      "functions": [
        {
          "name": "detect_project_changes",
          "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_struct_json",
          "docstring": "Create a backup of existing struct.json.",
          "line_range": null,
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_struct_json",
          "docstring": "Validate generated struct.json for basic structure.",
          "line_range": null,
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "update_struct_json",
          "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful",
          "line_range": null,
          "parameters": [
            "root_dir",
            "struct_path",
            "force",
            "config_override"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for auto-update script.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_config": [],
        "load_gitignore": [],
        "generate_json": [
          "ImportError"
        ],
        "detect_project_changes": [
          "logger.info",
          "subprocess.run",
          "logger.warning",
          "Path",
          "file_path.stat"
        ],
        "backup_struct_json": [
          "logger.info",
          "datetime.now",
          "logger.error",
          "subprocess.run",
          "Path"
        ],
        "validate_struct_json": [
          "open",
          "logger.error",
          "json.load",
          "logger.info"
        ],
        "update_struct_json": [
          "logger.info",
          "open",
          "validate_struct_json",
          "detect_project_changes",
          "backup_struct_json",
          "logger.error",
          "subprocess.run",
          "load_config",
          "load_gitignore",
          "cli_config.get",
          "json.dump",
          "config.get",
          "os.getcwd",
          "generate_json",
          "config.update"
        ],
        "main": [
          "argparse.ArgumentParser",
          "detect_project_changes",
          "update_struct_json",
          "sys.exit",
          "os.getcwd",
          "parser.parse_args",
          "logging.getLogger",
          "parser.add_argument",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "generate_json",
        "json",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f05b062d-3259-428f-9e51-7ec480d34ba6"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.create_comprehensive_index",
      "path": "backup_before_separation_20250529_152219/scripts/create_comprehensive_index.py",
      "category": "core",
      "module_doc": "Comprehensive Project Index Creator\nScans ALL project directories for tasks, ideas, sessions, and concepts.\nProvides complete visibility into project state and unaccounted innovations.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize comprehensive extraction patterns.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "scan_all_directories",
          "docstring": "Scan all configured directories comprehensively.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_scan_directory",
          "docstring": "Scan a specific directory according to its configuration.",
          "line_range": null,
          "parameters": [
            "self",
            "directory",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_scan_root_files",
          "docstring": "Scan root-level files.",
          "line_range": null,
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_should_scan_file",
          "docstring": "Check if file should be scanned based on extension.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "allowed_types"
          ],
          "decorators": []
        },
        {
          "name": "_scan_file",
          "docstring": "Scan individual file for project items.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_text",
          "docstring": "Extract items from text/markdown files.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_json",
          "docstring": "Extract items from JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_item_from_match",
          "docstring": "Create ProjectItem from regex match.",
          "line_range": null,
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_checkbox_item",
          "docstring": "Create ProjectItem from checkbox match.",
          "line_range": null,
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_simple_item",
          "docstring": "Create simple ProjectItem.",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_status",
          "docstring": "Detect item status from surrounding content.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_priority",
          "docstring": "Detect item priority from surrounding content.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "position",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_assess_strategic_value",
          "docstring": "Assess strategic value of item.",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract context around position.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "position",
            "length"
          ],
          "decorators": []
        },
        {
          "name": "_detect_category",
          "docstring": "Detect item category.",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_effort",
          "docstring": "Estimate effort required.",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tags",
          "docstring": "Extract relevant tags.",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "content",
            "source_dir"
          ],
          "decorators": []
        },
        {
          "name": "_is_noise_checkbox",
          "docstring": "Check if checkbox is noise (navigation, etc).",
          "line_range": null,
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "_parse_json_files",
          "docstring": "Parse structured JSON files for existing data.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_process_structured_json",
          "docstring": "Process structured JSON data.",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_add_json_item",
          "docstring": "Add item from JSON structure.",
          "line_range": null,
          "parameters": [
            "self",
            "item",
            "file_path",
            "item_type"
          ],
          "decorators": []
        },
        {
          "name": "_assess_json_strategic_value",
          "docstring": "Assess strategic value from JSON item.",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_extract_innovation_concepts",
          "docstring": "Extract innovation concepts from content.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_enhance_items",
          "docstring": "Post-process items to enhance metadata and find relationships.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_find_related_items",
          "docstring": "Find related items based on content similarity.",
          "line_range": null,
          "parameters": [
            "self",
            "item",
            "id_map",
            "title_map"
          ],
          "decorators": []
        },
        {
          "name": "generate_comprehensive_report",
          "docstring": "Generate comprehensive analysis report.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_comprehensive_index",
          "docstring": "Save comprehensive index and reports.",
          "line_range": null,
          "parameters": [
            "self",
            "output_dir"
          ],
          "decorators": []
        },
        {
          "name": "_generate_analysis_report",
          "docstring": "Generate human-readable analysis report.",
          "line_range": null,
          "parameters": [
            "self",
            "report"
          ],
          "decorators": []
        },
        {
          "name": "_format_dict",
          "docstring": "Format dictionary for markdown display.",
          "line_range": null,
          "parameters": [
            "self",
            "d"
          ],
          "decorators": []
        },
        {
          "name": "_format_items_list",
          "docstring": "Format items list for markdown display.",
          "line_range": null,
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_tasks",
          "docstring": "Extract tasks from JSON tasks array.",
          "line_range": null,
          "parameters": [
            "self",
            "tasks_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_ideas",
          "docstring": "Extract ideas from JSON ideas array.",
          "line_range": null,
          "parameters": [
            "self",
            "ideas_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_sessions",
          "docstring": "Extract sessions from JSON sessions array.",
          "line_range": null,
          "parameters": [
            "self",
            "sessions_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_array",
          "docstring": "Extract items from JSON array.",
          "line_range": null,
          "parameters": [
            "self",
            "array_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ProjectItem",
          "docstring": "Unified representation of any project item (task, idea, session, concept).",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "ComprehensiveIndexer",
          "docstring": "Comprehensive indexer for all project content.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize comprehensive extraction patterns.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "scan_all_directories",
              "docstring": "Scan all configured directories comprehensively.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_scan_directory",
              "docstring": "Scan a specific directory according to its configuration.",
              "line_range": null,
              "parameters": [
                "self",
                "directory",
                "config"
              ]
            },
            {
              "name": "_scan_root_files",
              "docstring": "Scan root-level files.",
              "line_range": null,
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "_should_scan_file",
              "docstring": "Check if file should be scanned based on extension.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "allowed_types"
              ]
            },
            {
              "name": "_scan_file",
              "docstring": "Scan individual file for project items.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_text",
              "docstring": "Extract items from text/markdown files.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_json",
              "docstring": "Extract items from JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_item_from_match",
              "docstring": "Create ProjectItem from regex match.",
              "line_range": null,
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_checkbox_item",
              "docstring": "Create ProjectItem from checkbox match.",
              "line_range": null,
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_simple_item",
              "docstring": "Create simple ProjectItem.",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority",
                "position"
              ]
            },
            {
              "name": "_detect_status",
              "docstring": "Detect item status from surrounding content.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "position"
              ]
            },
            {
              "name": "_detect_priority",
              "docstring": "Detect item priority from surrounding content.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "position",
                "default"
              ]
            },
            {
              "name": "_assess_strategic_value",
              "docstring": "Assess strategic value of item.",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract context around position.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "position",
                "length"
              ]
            },
            {
              "name": "_detect_category",
              "docstring": "Detect item category.",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_estimate_effort",
              "docstring": "Estimate effort required.",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_tags",
              "docstring": "Extract relevant tags.",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "content",
                "source_dir"
              ]
            },
            {
              "name": "_is_noise_checkbox",
              "docstring": "Check if checkbox is noise (navigation, etc).",
              "line_range": null,
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "_parse_json_files",
              "docstring": "Parse structured JSON files for existing data.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_process_structured_json",
              "docstring": "Process structured JSON data.",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "file_path"
              ]
            },
            {
              "name": "_add_json_item",
              "docstring": "Add item from JSON structure.",
              "line_range": null,
              "parameters": [
                "self",
                "item",
                "file_path",
                "item_type"
              ]
            },
            {
              "name": "_assess_json_strategic_value",
              "docstring": "Assess strategic value from JSON item.",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_extract_innovation_concepts",
              "docstring": "Extract innovation concepts from content.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_enhance_items",
              "docstring": "Post-process items to enhance metadata and find relationships.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_find_related_items",
              "docstring": "Find related items based on content similarity.",
              "line_range": null,
              "parameters": [
                "self",
                "item",
                "id_map",
                "title_map"
              ]
            },
            {
              "name": "generate_comprehensive_report",
              "docstring": "Generate comprehensive analysis report.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_comprehensive_index",
              "docstring": "Save comprehensive index and reports.",
              "line_range": null,
              "parameters": [
                "self",
                "output_dir"
              ]
            },
            {
              "name": "_generate_analysis_report",
              "docstring": "Generate human-readable analysis report.",
              "line_range": null,
              "parameters": [
                "self",
                "report"
              ]
            },
            {
              "name": "_format_dict",
              "docstring": "Format dictionary for markdown display.",
              "line_range": null,
              "parameters": [
                "self",
                "d"
              ]
            },
            {
              "name": "_format_items_list",
              "docstring": "Format items list for markdown display.",
              "line_range": null,
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "_extract_json_tasks",
              "docstring": "Extract tasks from JSON tasks array.",
              "line_range": null,
              "parameters": [
                "self",
                "tasks_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_ideas",
              "docstring": "Extract ideas from JSON ideas array.",
              "line_range": null,
              "parameters": [
                "self",
                "ideas_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_sessions",
              "docstring": "Extract sessions from JSON sessions array.",
              "line_range": null,
              "parameters": [
                "self",
                "sessions_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_array",
              "docstring": "Extract items from JSON array.",
              "line_range": null,
              "parameters": [
                "self",
                "array_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._init_patterns"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "scan_all_directories": [
          "logger.info",
          "len",
          "self._parse_json_files",
          "self._scan_directory",
          "self._scan_root_files",
          "self._enhance_items"
        ],
        "_scan_directory": [
          "logger.info",
          "self._scan_file",
          "self._should_scan_file",
          "file_path.is_file",
          "dir_path.glob",
          "logger.warning",
          "dir_path.exists"
        ],
        "_scan_root_files": [
          "file_path.is_file",
          "self._scan_file",
          "self._should_scan_file"
        ],
        "_should_scan_file": [],
        "_scan_file": [
          "open",
          "logger.error",
          "f.read",
          "self._extract_from_text",
          "self._extract_from_json"
        ],
        "_extract_from_text": [
          "self._create_checkbox_item",
          "self._extract_innovation_concepts",
          "self._create_simple_item",
          "match.group",
          "self._create_item_from_match",
          "match.start",
          "self._is_noise_checkbox"
        ],
        "_extract_from_json": [
          "self._extract_json_array",
          "self._extract_json_tasks",
          "json.loads",
          "logger.warning",
          "self._extract_json_sessions",
          "isinstance",
          "self._extract_json_ideas"
        ],
        "_create_item_from_match": [
          "ProjectItem",
          "datetime.now",
          "str",
          "self._assess_strategic_value",
          "self._extract_context",
          "self._extract_tags",
          "self._estimate_effort",
          "match.group",
          "title.strip",
          "self._detect_priority",
          "match.start",
          "self._detect_category",
          "self._detect_status"
        ],
        "_create_checkbox_item": [
          "ProjectItem",
          "datetime.now",
          "str",
          "self._assess_strategic_value",
          "self._extract_context",
          "self._estimate_effort",
          "self._detect_priority",
          "match.group",
          "self._extract_tags",
          "match.start",
          "self._detect_category"
        ],
        "_create_simple_item": [
          "ProjectItem",
          "datetime.now",
          "self._extract_context",
          "title.strip",
          "str"
        ],
        "_detect_status": [
          "max"
        ],
        "_detect_priority": [
          "max"
        ],
        "_assess_strategic_value": [],
        "_extract_context": [
          "min",
          "max",
          "len"
        ],
        "_detect_category": [
          "any",
          "title.lower"
        ],
        "_estimate_effort": [
          "any"
        ],
        "_extract_tags": [
          "source_dir.replace",
          "tags.append",
          "title.lower"
        ],
        "_is_noise_checkbox": [
          "len",
          "text.strip",
          "any",
          "text.lower"
        ],
        "_parse_json_files": [
          "open",
          "json.load",
          "logger.error",
          "self._process_structured_json",
          "file_path.exists"
        ],
        "_process_structured_json": [
          "isinstance",
          "self._add_json_item"
        ],
        "_add_json_item": [
          "len",
          "ProjectItem",
          "self._assess_json_strategic_value",
          "datetime.now",
          "item.get",
          "str"
        ],
        "_assess_json_strategic_value": [
          "item.get"
        ],
        "_extract_innovation_concepts": [
          "len",
          "content.split",
          "line.strip",
          "ProjectItem",
          "content.find",
          "datetime.now",
          "self._extract_context",
          "enumerate",
          "source_dir.replace",
          "innovation_lines.append",
          "str"
        ],
        "_enhance_items": [
          "logger.info",
          "re.sub",
          "self._find_related_items"
        ],
        "_find_related_items": [
          "re.findall",
          "related.append",
          "ref_type.upper"
        ],
        "generate_comprehensive_report": [
          "len",
          "by_type.get",
          "datetime.now",
          "by_strategic_value.get",
          "by_status.get",
          "asdict",
          "by_source.get",
          "by_priority.get"
        ],
        "save_comprehensive_index": [
          "open",
          "logger.info",
          "len",
          "json.dump",
          "f.write",
          "self.generate_comprehensive_report",
          "os.makedirs",
          "self._generate_analysis_report"
        ],
        "_generate_analysis_report": [
          "len",
          "self._format_items_list",
          "self._format_dict"
        ],
        "_format_dict": [
          "d.items",
          "sorted"
        ],
        "_format_items_list": [
          "result.append"
        ],
        "_extract_json_tasks": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_ideas": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_sessions": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_array": [
          "isinstance",
          "self._add_json_item",
          "str"
        ],
        "main": [
          "logger.info",
          "len",
          "by_strategic.get",
          "indexer.save_comprehensive_index",
          "ComprehensiveIndexer",
          "indexer.scan_all_directories",
          "print"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f2c63434-19fd-4ae6-b247-0d3cef6999ca"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.validate_schemas",
      "path": "backup_before_separation_20250529_152219/scripts/validate_schemas.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "11b6fb32-c914-4393-8262-3337f8b8034a"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.export_to_github_projects",
      "path": "backup_before_separation_20250529_152219/scripts/export_to_github_projects.py",
      "category": "core",
      "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "config_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "check_github_cli",
          "docstring": "Check if GitHub CLI is installed and authenticated",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "list_projects",
          "docstring": "List available GitHub Projects (via gh-projects extension)",
          "line_range": null,
          "parameters": [
            "self",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "create_project_item",
          "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
          "line_range": null,
          "parameters": [
            "self",
            "project_number",
            "title",
            "body",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_tasks_to_project",
          "docstring": "Export tasks to GitHub Project",
          "line_range": null,
          "parameters": [
            "self",
            "tasks",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_ideas_to_project",
          "docstring": "Export ideas to GitHub Project",
          "line_range": null,
          "parameters": [
            "self",
            "ideas",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "filter_data",
          "docstring": "Filter data by status and priority",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "status_filter",
            "priority_filter"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExportScript",
          "docstring": "Extended exporter with command-line interface and GitHub CLI integration",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "config_path",
                "dry_run"
              ]
            },
            {
              "name": "check_github_cli",
              "docstring": "Check if GitHub CLI is installed and authenticated",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "list_projects",
              "docstring": "List available GitHub Projects (via gh-projects extension)",
              "line_range": null,
              "parameters": [
                "self",
                "owner",
                "repo"
              ]
            },
            {
              "name": "create_project_item",
              "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
              "line_range": null,
              "parameters": [
                "self",
                "project_number",
                "title",
                "body",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_tasks_to_project",
              "docstring": "Export tasks to GitHub Project",
              "line_range": null,
              "parameters": [
                "self",
                "tasks",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_ideas_to_project",
              "docstring": "Export ideas to GitHub Project",
              "line_range": null,
              "parameters": [
                "self",
                "ideas",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "filter_data",
              "docstring": "Filter data by status and priority",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "status_filter",
                "priority_filter"
              ]
            }
          ],
          "bases": [
            "GitHubProjectsExporter"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "super"
        ],
        "check_github_cli": [
          "self._run_gh_command",
          "print"
        ],
        "list_projects": [
          "isinstance",
          "json.loads",
          "self._run_gh_command",
          "print"
        ],
        "create_project_item": [
          "output.strip",
          "self._run_gh_command",
          "str",
          "print"
        ],
        "export_tasks_to_project": [
          "len",
          "task.get",
          "self.create_project_item",
          "self.format_task_for_github",
          "print"
        ],
        "export_ideas_to_project": [
          "len",
          "self.create_project_item",
          "self.format_idea_for_github",
          "idea.get",
          "print"
        ],
        "filter_data": [
          "item.get"
        ],
        "main": [
          "exporter.export_tasks_to_project",
          "argparse.ArgumentParser",
          "exporter.export_ideas_to_project",
          "GitHubProjectsExportScript",
          "exporter.filter_data",
          "exporter.load_official_data",
          "exporter.check_github_cli",
          "sys.exit",
          "exporter._save_mapping",
          "parser.parse_args",
          "parser.add_argument",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "GitHubProjectsExporter",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "datetime",
        "json",
        "llmstruct.gh_view",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "943a40cf-7912-43d4-b882-39685619cebe"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.validate_refs",
      "path": "backup_before_separation_20250529_152219/scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "logger.info",
          "json.load",
          "broken_links.append",
          "logger.error",
          "logger.warning",
          "Path",
          "target_file.exists",
          "enumerate",
          "json.dump",
          "source_file.exists",
          "idea.get"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "3c30a36c-ae58-492a-8367-21e6e1a3d40c"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.fix_hardcoded_usernames",
      "path": "backup_before_separation_20250529_152219/scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "module_doc": "Fix Hardcoded Usernames Script\nAutomatically detects and replaces hardcoded usernames with dynamic values from .env or git config.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_detect_user_info",
          "docstring": "Detect user info from .env, git config, or environment.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_env",
          "docstring": "Load user info from .env file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_git",
          "docstring": "Load user info from git config.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_environment",
          "docstring": "Load user info from environment variables.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_user_info",
          "docstring": "Get detected user information.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_files",
          "docstring": "Scan for files containing hardcoded usernames.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "fix_file",
          "docstring": "Fix hardcoded usernames in a single file.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "fix_all_files",
          "docstring": "Fix hardcoded usernames in all project files.",
          "line_range": null,
          "parameters": [
            "self",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "generate_env_template",
          "docstring": "Generate .env template with required variables.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "UserInfoDetector",
          "docstring": "Detect user information from various sources.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_detect_user_info",
              "docstring": "Detect user info from .env, git config, or environment.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_env",
              "docstring": "Load user info from .env file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_git",
              "docstring": "Load user info from git config.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_environment",
              "docstring": "Load user info from environment variables.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_user_info",
              "docstring": "Get detected user information.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "HardcodeFixer",
          "docstring": "Fix hardcoded usernames in project files.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_files",
              "docstring": "Scan for files containing hardcoded usernames.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "fix_file",
              "docstring": "Fix hardcoded usernames in a single file.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "dry_run"
              ]
            },
            {
              "name": "fix_all_files",
              "docstring": "Fix hardcoded usernames in all project files.",
              "line_range": null,
              "parameters": [
                "self",
                "dry_run"
              ]
            },
            {
              "name": "generate_env_template",
              "docstring": "Generate .env template with required variables.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "UserInfoDetector"
        ],
        "_detect_user_info": [
          "logger.info",
          "self._load_from_environment",
          "self._load_from_git",
          "env_info.items",
          "env_vars.items",
          "user_info.update",
          "self._load_from_env",
          "user_info.get"
        ],
        "_load_from_env": [
          "open",
          "value.strip",
          "line.strip",
          "line.split",
          "env_file.exists",
          "env_vars.get",
          "logger.error",
          "line.startswith",
          "key.strip"
        ],
        "_load_from_git": [
          "logger.error",
          "subprocess.run",
          "re.search",
          "match.group"
        ],
        "_load_from_environment": [],
        "get_user_info": [],
        "scan_files": [
          "open",
          "f.read",
          "content.count",
          "logger.warning",
          "files_with_hardcode.append",
          "any",
          "str"
        ],
        "fix_file": [
          "open",
          "logger.info",
          "f.read",
          "content.count",
          "logger.error",
          "content.replace",
          "f.write"
        ],
        "fix_all_files": [
          "logger.info",
          "len",
          "self.fix_file",
          "self.scan_files",
          "str"
        ],
        "generate_env_template": [],
        "main": [
          "open",
          "logger.info",
          "len",
          "argparse.ArgumentParser",
          "replacements.items",
          "fixer.fix_all_files",
          "results.items",
          "Path",
          "fixer.generate_env_template",
          "HardcodeFixer",
          "f.write",
          "parser.parse_args",
          "fixer.scan_files",
          "parser.add_argument",
          "print"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c7d19e50-87cd-49e7-a8db-8986b337f846"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.deploy_embedded_files",
      "path": "backup_before_separation_20250529_152219/scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.error",
          "validate",
          "logger.warning",
          "RefResolver"
        ],
        "backup_files": [
          "shutil.copytree",
          "target_dir.exists",
          "datetime.now",
          "logger.info"
        ],
        "deploy_embedded_files": [
          "logger.info",
          "backup_files",
          "target_path.exists",
          "logger.error",
          "logger.warning",
          "validate_json",
          "Path",
          "EMBEDDED_FILES.get",
          "json.dump",
          "Path.cwd",
          "target_path.open",
          "f.write"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "908123db-4ab6-4400-91d1-88b008f25bcf"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.validate_epics",
      "path": "backup_before_separation_20250529_152219/scripts/validate_epics.py",
      "category": "core",
      "module_doc": "Epic Data Validator\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c GitHub issues",
      "functions": [
        {
          "name": "validate_epic_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u044d\u043f\u0438\u043a\u0430",
          "line_range": null,
          "parameters": [
            "epic"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": null,
          "parameters": [
            "task",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "validate_priorities",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u0432",
          "line_range": null,
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_ids",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c ID \u0437\u0430\u0434\u0430\u0447",
          "line_range": null,
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_epic_structure": [
          "errors.append",
          "isinstance"
        ],
        "validate_task_structure": [
          "errors.append",
          "isinstance",
          "task.get"
        ],
        "validate_priorities": [
          "errors.append",
          "epic.get",
          "data.get",
          "task.get"
        ],
        "validate_task_ids": [
          "set",
          "data.get",
          "task.get",
          "seen_ids.add",
          "errors.append",
          "epic.get"
        ],
        "main": [
          "open",
          "len",
          "all_errors.append",
          "json.load",
          "e.get",
          "epics_file.exists",
          "all_errors.extend",
          "sum",
          "Path",
          "validate_priorities",
          "sys.exit",
          "validate_task_structure",
          "isinstance",
          "validate_task_ids",
          "epic.get",
          "validate_epic_structure",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "pathlib",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "5c5212ae-f119-4ee8-b4fe-9930be6eb03d"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.validate_json",
      "path": "backup_before_separation_20250529_152219/scripts/validate_json.py",
      "category": "core",
      "module_doc": "JSON Validation Script\nValidates JSON files against their respective schemas.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate a JSON file against a schema.",
          "line_range": null,
          "parameters": [
            "file_path",
            "schema_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "open",
          "json.load",
          "print"
        ],
        "validate_json": [
          "load_json",
          "str",
          "Path",
          "Draft7Validator",
          "validator.validate",
          "print"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "pathlib",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "068ee8fb-2c38-4962-a2ac-9105d329fe5c"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.create_tasks_index",
      "path": "backup_before_separation_20250529_152219/scripts/create_tasks_index.py",
      "category": "core",
      "module_doc": "Tasks Index Creator\nScans all documentation files and creates comprehensive index of tasks, EPICs, TODOs, and other actionable items.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize regex patterns for task extraction.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "extract_from_markdown",
          "docstring": "Extract tasks from markdown file.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_status",
          "docstring": "Extract document status.",
          "line_range": null,
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_priority",
          "docstring": "Extract document priority.",
          "line_range": null,
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_date",
          "docstring": "Extract document date.",
          "line_range": null,
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_epics",
          "docstring": "Extract EPIC items.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tasks",
          "docstring": "Extract explicit task items.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_todos",
          "docstring": "Extract TODO items.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_phases",
          "docstring": "Extract phase/step items.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_checkboxes",
          "docstring": "Extract checkbox items as tasks.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract surrounding context for a match.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "start",
            "end",
            "context_lines"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_documentation",
          "docstring": "Scan all documentation files for tasks.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_index",
          "docstring": "Generate comprehensive task index.",
          "line_range": null,
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "generate_summary_report",
          "docstring": "Generate human-readable summary report.",
          "line_range": null,
          "parameters": [
            "self",
            "index"
          ],
          "decorators": []
        },
        {
          "name": "save_index",
          "docstring": "Save index and summary to files.",
          "line_range": null,
          "parameters": [
            "self",
            "index",
            "summary",
            "output_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Task",
          "docstring": "Represents a single task or actionable item.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "TaskExtractor",
          "docstring": "Extract tasks from various document formats.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize regex patterns for task extraction.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "extract_from_markdown",
              "docstring": "Extract tasks from markdown file.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_status",
              "docstring": "Extract document status.",
              "line_range": null,
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_priority",
              "docstring": "Extract document priority.",
              "line_range": null,
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_date",
              "docstring": "Extract document date.",
              "line_range": null,
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_epics",
              "docstring": "Extract EPIC items.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_tasks",
              "docstring": "Extract explicit task items.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_todos",
              "docstring": "Extract TODO items.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_phases",
              "docstring": "Extract phase/step items.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_checkboxes",
              "docstring": "Extract checkbox items as tasks.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract surrounding context for a match.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "start",
                "end",
                "context_lines"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TaskIndexGenerator",
          "docstring": "Generate comprehensive task index.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_documentation",
              "docstring": "Scan all documentation files for tasks.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_index",
              "docstring": "Generate comprehensive task index.",
              "line_range": null,
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "generate_summary_report",
              "docstring": "Generate human-readable summary report.",
              "line_range": null,
              "parameters": [
                "self",
                "index"
              ]
            },
            {
              "name": "save_index",
              "docstring": "Save index and summary to files.",
              "line_range": null,
              "parameters": [
                "self",
                "index",
                "summary",
                "output_dir"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "TaskExtractor"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "extract_from_markdown": [
          "open",
          "f.read",
          "logger.error",
          "self._extract_checkboxes",
          "self._extract_phases",
          "self._extract_date",
          "self._extract_status",
          "self._extract_epics",
          "self._extract_priority",
          "self._extract_tasks",
          "tasks.extend",
          "self._extract_todos"
        ],
        "_extract_status": [
          "match.group"
        ],
        "_extract_priority": [
          "match.group"
        ],
        "_extract_date": [
          "datetime.now",
          "match.group"
        ],
        "_extract_epics": [
          "tasks.append",
          "self._extract_context",
          "match.group",
          "Task",
          "match.start",
          "str",
          "match.end"
        ],
        "_extract_tasks": [
          "tasks.append",
          "self._extract_context",
          "match.group",
          "Task",
          "match.start",
          "str",
          "match.end"
        ],
        "_extract_todos": [
          "tasks.append",
          "match.group",
          "Task",
          "match.start",
          "str"
        ],
        "_extract_phases": [
          "tasks.append",
          "self._extract_context",
          "match.group",
          "Task",
          "match.start",
          "str",
          "match.end"
        ],
        "_extract_checkboxes": [
          "task_title.upper",
          "match.start",
          "tasks.append",
          "match.group",
          "Task",
          "any",
          "str"
        ],
        "_extract_context": [
          "len",
          "content.split",
          "max",
          "context.strip",
          "min"
        ],
        "scan_documentation": [
          "logger.info",
          "docs_dir.exists",
          "all_tasks.extend",
          "docs_dir.glob"
        ],
        "generate_index": [
          "len",
          "by_category.items",
          "datetime.now",
          "by_priority.items",
          "asdict",
          "by_status.items",
          "by_file.items"
        ],
        "generate_summary_report": [
          "len",
          "file_categories.items",
          "sorted",
          "priority.upper",
          "Path",
          "status.upper",
          "category.upper"
        ],
        "save_index": [
          "open",
          "logger.info",
          "output_path.mkdir",
          "Path",
          "json.dump",
          "f.write"
        ],
        "main": [
          "logger.info",
          "len",
          "by_category.items",
          "argparse.ArgumentParser",
          "sorted",
          "by_category.get",
          "generator.generate_summary_report",
          "generator.generate_index",
          "generator.save_index",
          "by_status.items",
          "print",
          "by_status.get",
          "parser.parse_args",
          "TaskIndexGenerator",
          "parser.add_argument",
          "generator.scan_documentation"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "a165ba07-a02e-46cd-a747-013de7f7529c"
    },
    {
      "module_id": "backup_before_separation_20250529_152219.scripts.team.__init__",
      "path": "backup_before_separation_20250529_152219/scripts/team/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "1035dd5d-7821-42a8-9454-61784880f126"
    },
    {
      "module_id": "src.llmstruct.workflow_orchestrator",
      "path": "src/llmstruct/workflow_orchestrator.py",
      "category": "core",
      "module_doc": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture\nExtends CopilotContextManager and SmartContextOrchestrator instead of duplicating",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface that integrates with existing llmstruct architecture",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root",
            "debug"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_onboarding_guide",
          "docstring": "Generate comprehensive AI onboarding guide using existing architecture",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_project_overview_from_struct",
          "docstring": "Get project overview from struct.json analysis",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_existing_architecture_guide",
          "docstring": "Guide to existing llmstruct architecture",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_copilot_integration_guide",
          "docstring": "Guide for proper CopilotContextManager usage",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_orchestration_guide",
          "docstring": "Guide for SmartContextOrchestrator usage",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_analysis_guide",
          "docstring": "Guide for proper struct.json analysis approach",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_current_context",
          "docstring": "Get comprehensive current context using existing architecture",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_analysis",
          "docstring": "Analyze struct.json for current codebase state",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_architecture_from_struct",
          "docstring": "Analyze architecture patterns from struct.json",
          "line_range": null,
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_function_duplication",
          "docstring": "Analyze function duplication across modules",
          "line_range": null,
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_metrics",
          "docstring": "Calculate complexity metrics from struct.json",
          "line_range": null,
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_score",
          "docstring": "Calculate overall complexity score",
          "line_range": null,
          "parameters": [
            "self",
            "stats"
          ],
          "decorators": []
        },
        {
          "name": "_get_orchestrator_state",
          "docstring": "Get SmartContextOrchestrator state",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_codebase_for_duplicates",
          "docstring": "Analyze codebase for duplicate functions using struct.json",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "sync_with_existing_architecture",
          "docstring": "Sync with existing llmstruct architecture instead of duplicating",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "create_task",
          "docstring": "Create new task (this is new functionality, not duplication)",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "description",
            "priority",
            "tags",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_active_tasks",
          "docstring": "Get all active tasks",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_json_safe",
          "docstring": "Safe JSON loading with error handling",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_save_json_safe",
          "docstring": "Safe JSON saving with error handling",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_get_active_session_context",
          "docstring": "Get current session context",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_identify_key_components",
          "docstring": "Identify key components from struct analysis",
          "line_range": null,
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_patterns",
          "docstring": "Define workflow patterns that integrate with existing architecture",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_available_commands",
          "docstring": "Available commands that work with existing architecture",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskStatus",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "SessionType",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "Task",
          "docstring": "Structured task representation",
          "line_range": null,
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "Session",
          "docstring": "AI work session with context and goals",
          "line_range": null,
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "WorkflowOrchestrator",
          "docstring": "Integration layer that extends existing llmstruct architecture\nUses CopilotContextManager, SmartContextOrchestrator, and struct.json analysis",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root",
                "debug"
              ]
            },
            {
              "name": "get_ai_onboarding_guide",
              "docstring": "Generate comprehensive AI onboarding guide using existing architecture",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_project_overview_from_struct",
              "docstring": "Get project overview from struct.json analysis",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_existing_architecture_guide",
              "docstring": "Guide to existing llmstruct architecture",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_copilot_integration_guide",
              "docstring": "Guide for proper CopilotContextManager usage",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_context_orchestration_guide",
              "docstring": "Guide for SmartContextOrchestrator usage",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_analysis_guide",
              "docstring": "Guide for proper struct.json analysis approach",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_current_context",
              "docstring": "Get comprehensive current context using existing architecture",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_analysis",
              "docstring": "Analyze struct.json for current codebase state",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_architecture_from_struct",
              "docstring": "Analyze architecture patterns from struct.json",
              "line_range": null,
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_analyze_function_duplication",
              "docstring": "Analyze function duplication across modules",
              "line_range": null,
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_calculate_complexity_metrics",
              "docstring": "Calculate complexity metrics from struct.json",
              "line_range": null,
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_calculate_complexity_score",
              "docstring": "Calculate overall complexity score",
              "line_range": null,
              "parameters": [
                "self",
                "stats"
              ]
            },
            {
              "name": "_get_orchestrator_state",
              "docstring": "Get SmartContextOrchestrator state",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_codebase_for_duplicates",
              "docstring": "Analyze codebase for duplicate functions using struct.json",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "sync_with_existing_architecture",
              "docstring": "Sync with existing llmstruct architecture instead of duplicating",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "create_task",
              "docstring": "Create new task (this is new functionality, not duplication)",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "description",
                "priority",
                "tags",
                "dependencies"
              ]
            },
            {
              "name": "get_active_tasks",
              "docstring": "Get all active tasks",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_json_safe",
              "docstring": "Safe JSON loading with error handling",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_save_json_safe",
              "docstring": "Safe JSON saving with error handling",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            },
            {
              "name": "_get_active_session_context",
              "docstring": "Get current session context",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_identify_key_components",
              "docstring": "Identify key components from struct analysis",
              "line_range": null,
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_get_workflow_patterns",
              "docstring": "Define workflow patterns that integrate with existing architecture",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_available_commands",
              "docstring": "Available commands that work with existing architecture",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "time.time",
          "SmartContextOrchestrator",
          "CopilotContextManager",
          "Path",
          "CLIConfig",
          "UniversalConverter",
          "SystemCapabilityDiscovery",
          "str",
          "print"
        ],
        "get_ai_onboarding_guide": [
          "self._get_copilot_integration_guide",
          "self._get_struct_analysis_guide",
          "self._get_existing_architecture_guide",
          "self._get_available_commands",
          "self._get_project_overview_from_struct",
          "self._get_context_orchestration_guide",
          "self._get_workflow_patterns"
        ],
        "_get_project_overview_from_struct": [
          "open",
          "struct_data.get",
          "struct_path.exists",
          "len",
          "json.load",
          "self._identify_key_components",
          "logger.warning",
          "self._analyze_architecture_from_struct"
        ],
        "_get_existing_architecture_guide": [],
        "_get_copilot_integration_guide": [],
        "_get_context_orchestration_guide": [],
        "_get_struct_analysis_guide": [],
        "get_current_context": [
          "self._get_struct_analysis",
          "time.time",
          "self._get_active_session_context",
          "logger.warning",
          "isinstance",
          "self.get_active_tasks",
          "self._get_orchestrator_state",
          "str",
          "print"
        ],
        "_get_struct_analysis": [
          "open",
          "len",
          "struct_path.exists",
          "struct_data.get",
          "json.load",
          "self._calculate_complexity_metrics",
          "str",
          "logger.error",
          "self._analyze_function_duplication",
          "self._analyze_architecture_from_struct",
          "time.time",
          "print"
        ],
        "_analyze_architecture_from_struct": [
          "struct_data.get",
          "len",
          "list",
          "directories.keys",
          "directories.items",
          "Path"
        ],
        "_analyze_function_duplication": [
          "struct_data.get",
          "module.get",
          "function_names.items",
          "len"
        ],
        "_calculate_complexity_metrics": [
          "struct_data.get",
          "len",
          "round",
          "m.get",
          "sum",
          "self._calculate_complexity_score",
          "stats.get"
        ],
        "_calculate_complexity_score": [
          "round",
          "stats.get"
        ],
        "_get_orchestrator_state": [
          "str"
        ],
        "analyze_codebase_for_duplicates": [
          "self._get_struct_analysis",
          "len",
          "struct_analysis.get",
          "duplication.get",
          "recommendations.append",
          "time.time",
          "print"
        ],
        "sync_with_existing_architecture": [
          "open",
          "json.dump",
          "logger.error",
          "str"
        ],
        "create_task": [
          "logger.info",
          "self._load_json_safe",
          "uuid.uuid4",
          "self._save_json_safe",
          "asdict",
          "Task",
          "str"
        ],
        "get_active_tasks": [
          "self._load_json_safe",
          "t.get"
        ],
        "_load_json_safe": [
          "open",
          "logger.error",
          "file_path.exists",
          "json.load"
        ],
        "_save_json_safe": [
          "open",
          "json.dump",
          "logger.error"
        ],
        "_get_active_session_context": [
          "asdict"
        ],
        "_identify_key_components": [
          "struct_data.get",
          "key_components.append",
          "module.get",
          "len"
        ],
        "_get_workflow_patterns": [],
        "_get_available_commands": [],
        "main": [
          "len",
          "argparse.ArgumentParser",
          "context.get",
          "WorkflowOrchestrator",
          "results.items",
          "orchestrator.get_current_context",
          "json.dumps",
          "orchestrator.analyze_codebase_for_duplicates",
          "orchestrator.get_ai_onboarding_guide",
          "orchestrator.sync_with_existing_architecture",
          "parser.parse_args",
          "parser.add_argument",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "SystemCapabilityDiscovery",
        "Union",
        "UniversalConverter",
        "ai_self_awareness",
        "argparse",
        "asdict",
        "cli_config",
        "context_orchestrator",
        "copilot",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "os",
        "parsers.universal_converter",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "90a2228d-f505-43e8-b365-b494759e6b55"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "module_doc": "CLI configuration management.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize configuration manager.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from llmstruct.toml.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "Get cache configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "Get Copilot configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "Get queue configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "Get context configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_gitignore_patterns",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "Get directories to exclude from scanning.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "Get file patterns to include.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "Get file patterns to exclude.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "Get maximum file size for processing (in bytes).",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_auto_update_config",
          "docstring": "Get auto-update configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_auto_update_enabled",
          "docstring": "Check if auto-update is enabled.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "Get path to struct.json file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "Get path to context file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "Save current configuration to file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_config",
          "docstring": "Update configuration value.",
          "line_range": null,
          "parameters": [
            "self",
            "section",
            "key",
            "value"
          ],
          "decorators": []
        },
        {
          "name": "reload_config",
          "docstring": "Reload configuration from file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIConfig",
          "docstring": "Manages CLI configuration from llmstruct.toml and other sources.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize configuration manager.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from llmstruct.toml.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cache_config",
              "docstring": "Get cache configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_copilot_config",
              "docstring": "Get Copilot configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_queue_config",
              "docstring": "Get queue configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_config",
              "docstring": "Get context configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_gitignore_patterns",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "Get directories to exclude from scanning.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_include_patterns",
              "docstring": "Get file patterns to include.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "Get file patterns to exclude.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_max_file_size",
              "docstring": "Get maximum file size for processing (in bytes).",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_auto_update_config",
              "docstring": "Get auto-update configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_auto_update_enabled",
              "docstring": "Check if auto-update is enabled.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_struct_file_path",
              "docstring": "Get path to struct.json file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_file_path",
              "docstring": "Get path to context file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_config",
              "docstring": "Save current configuration to file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_config",
              "docstring": "Update configuration value.",
              "line_range": null,
              "parameters": [
                "self",
                "section",
                "key",
                "value"
              ]
            },
            {
              "name": "reload_config",
              "docstring": "Reload configuration from file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path"
        ],
        "_load_config": [
          "toml.load",
          "logging.error"
        ],
        "get_cache_config": [],
        "get_copilot_config": [],
        "get_queue_config": [],
        "get_context_config": [],
        "get_gitignore_patterns": [
          "line.strip",
          "gitignore_path.exists",
          "gitignore_path.open",
          "logging.error",
          "Path",
          "line.startswith"
        ],
        "get_exclude_dirs": [
          "parsing_config.get",
          "set",
          "list",
          "cli_config.get"
        ],
        "get_include_patterns": [
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_exclude_patterns": [
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_max_file_size": [],
        "get_auto_update_config": [],
        "is_auto_update_enabled": [
          "self.get_auto_update_config"
        ],
        "get_struct_file_path": [],
        "get_context_file_path": [],
        "save_config": [
          "toml.dump",
          "logging.error"
        ],
        "update_config": [
          "self.save_config"
        ],
        "reload_config": [
          "self._load_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "logging",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b3744fcc-1737-4b86-a6c7-9674dac548ac"
    },
    {
      "module_id": "src.llmstruct.ai_self_monitor",
      "path": "src/llmstruct/ai_self_monitor.py",
      "category": "core",
      "module_doc": "AI Self-Monitoring System\nTracks AI usage patterns and ensures proper llmstruct integration.",
      "functions": [
        {
          "name": "initialize_ai_monitor",
          "docstring": "Initialize global AI monitor.",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_monitor",
          "docstring": "Get current AI monitor instance.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "record_ai_usage",
          "docstring": "Global function to record AI usage.",
          "line_range": null,
          "parameters": [
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "record_ai_interaction",
          "docstring": "Record an AI interaction for monitoring.",
          "line_range": null,
          "parameters": [
            "self",
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_interaction_patterns",
          "docstring": "Analyze patterns in AI interaction.",
          "line_range": null,
          "parameters": [
            "self",
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_effectiveness_score",
          "docstring": "Calculate effectiveness score for interaction.",
          "line_range": null,
          "parameters": [
            "self",
            "patterns",
            "tools_used",
            "used_llmstruct"
          ],
          "decorators": []
        },
        {
          "name": "_check_immediate_feedback",
          "docstring": "Check if immediate feedback/correction is needed.",
          "line_range": null,
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_log_immediate_feedback",
          "docstring": "Log immediate feedback message.",
          "line_range": null,
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "analyze_behavior_trends",
          "docstring": "Analyze AI behavior trends over specified period.",
          "line_range": null,
          "parameters": [
            "self",
            "days"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "Generate specific recommendations for improvement.",
          "line_range": null,
          "parameters": [
            "self",
            "llmstruct_usage",
            "context_awareness",
            "tool_diversity",
            "effectiveness"
          ],
          "decorators": []
        },
        {
          "name": "get_real_time_guidance",
          "docstring": "Get real-time guidance for current query.",
          "line_range": null,
          "parameters": [
            "self",
            "current_query"
          ],
          "decorators": []
        },
        {
          "name": "_load_events",
          "docstring": "Load events from disk.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_events",
          "docstring": "Save events to disk.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_analysis",
          "docstring": "Save behavior analysis to disk.",
          "line_range": null,
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "get_monitoring_report",
          "docstring": "Get comprehensive monitoring report.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AIBehaviorPattern",
          "docstring": "AI behavior patterns to monitor.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AIUsageEvent",
          "docstring": "Single AI usage event.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "AIBehaviorAnalysis",
          "docstring": "Analysis of AI behavior patterns.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "AISelfMonitor",
          "docstring": "Monitors AI behavior and ensures proper llmstruct integration.\nProvides feedback and corrective guidance.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "record_ai_interaction",
              "docstring": "Record an AI interaction for monitoring.",
              "line_range": null,
              "parameters": [
                "self",
                "query",
                "tools_used",
                "used_llmstruct",
                "context_tags",
                "metadata"
              ]
            },
            {
              "name": "_analyze_interaction_patterns",
              "docstring": "Analyze patterns in AI interaction.",
              "line_range": null,
              "parameters": [
                "self",
                "query",
                "tools_used",
                "used_llmstruct",
                "context_tags"
              ]
            },
            {
              "name": "_calculate_effectiveness_score",
              "docstring": "Calculate effectiveness score for interaction.",
              "line_range": null,
              "parameters": [
                "self",
                "patterns",
                "tools_used",
                "used_llmstruct"
              ]
            },
            {
              "name": "_check_immediate_feedback",
              "docstring": "Check if immediate feedback/correction is needed.",
              "line_range": null,
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_log_immediate_feedback",
              "docstring": "Log immediate feedback message.",
              "line_range": null,
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "analyze_behavior_trends",
              "docstring": "Analyze AI behavior trends over specified period.",
              "line_range": null,
              "parameters": [
                "self",
                "days"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "Generate specific recommendations for improvement.",
              "line_range": null,
              "parameters": [
                "self",
                "llmstruct_usage",
                "context_awareness",
                "tool_diversity",
                "effectiveness"
              ]
            },
            {
              "name": "get_real_time_guidance",
              "docstring": "Get real-time guidance for current query.",
              "line_range": null,
              "parameters": [
                "self",
                "current_query"
              ]
            },
            {
              "name": "_load_events",
              "docstring": "Load events from disk.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_events",
              "docstring": "Save events to disk.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_analysis",
              "docstring": "Save behavior analysis to disk.",
              "line_range": null,
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "get_monitoring_report",
              "docstring": "Get comprehensive monitoring report.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logger.info",
          "Path",
          "self._load_events"
        ],
        "record_ai_interaction": [
          "len",
          "datetime.now",
          "self._check_immediate_feedback",
          "AIUsageEvent",
          "self._analyze_interaction_patterns",
          "self._calculate_effectiveness_score",
          "self._save_events"
        ],
        "_analyze_interaction_patterns": [
          "any",
          "patterns.append",
          "query.lower"
        ],
        "_calculate_effectiveness_score": [
          "min",
          "set",
          "pattern_scores.get",
          "len"
        ],
        "_check_immediate_feedback": [
          "self._log_immediate_feedback",
          "any"
        ],
        "_log_immediate_feedback": [
          "logger.warning",
          "print"
        ],
        "analyze_behavior_trends": [
          "len",
          "set",
          "timedelta",
          "datetime.now",
          "AIBehaviorAnalysis",
          "improvements.append",
          "self._save_analysis",
          "all_tools.update",
          "datetime.fromisoformat",
          "self._generate_recommendations",
          "sum",
          "strengths.append",
          "any"
        ],
        "_generate_recommendations": [
          "recommendations.append",
          "recommendations.extend"
        ],
        "get_real_time_guidance": [
          "guidance.append",
          "any",
          "current_query.lower"
        ],
        "_load_events": [
          "open",
          "len",
          "logger.info",
          "json.load",
          "AIUsageEvent",
          "logger.error"
        ],
        "_save_events": [
          "open",
          "json.dump",
          "logger.error",
          "asdict"
        ],
        "_save_analysis": [
          "open",
          "json.dump",
          "logger.error",
          "asdict"
        ],
        "get_monitoring_report": [
          "self.analyze_behavior_trends",
          "datetime.now",
          "len",
          "chr"
        ],
        "initialize_ai_monitor": [
          "AISelfMonitor"
        ],
        "get_ai_monitor": [],
        "record_ai_usage": [
          "_monitor_instance.record_ai_interaction"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "e3bace2e-781f-4967-815d-3b4dda368b49"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "len",
          "prompt.split",
          "response.raise_for_status",
          "response.json"
        ],
        "test_grok": [
          "GrokClient",
          "client.generate",
          "time.perf_counter"
        ]
      },
      "dependencies": [
        "requests",
        "time"
      ],
      "hash": null,
      "artifact_id": "9703846d-307f-4acd-b28f-c031d3eeb757"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "module_doc": "CLI command processing and handlers.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize command processor.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir",
            "config",
            "utils"
          ],
          "decorators": []
        },
        {
          "name": "set_cache",
          "docstring": "Set cache instance.",
          "line_range": null,
          "parameters": [
            "self",
            "cache"
          ],
          "decorators": []
        },
        {
          "name": "set_copilot",
          "docstring": "Set Copilot manager instance.",
          "line_range": null,
          "parameters": [
            "self",
            "copilot_manager"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "Process a command starting with /.",
          "line_range": null,
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "process_prompt",
          "docstring": "Process a regular user prompt (not a command).",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Show help information.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace",
          "docstring": "Handle workspace state and permissions management.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_mode",
          "docstring": "Handle context mode operations with workspace integration.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_view",
          "docstring": "View file or directory contents.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_write",
          "docstring": "Write content to a file.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_queue",
          "docstring": "Handle queue operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_cache",
          "docstring": "Handle cache operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_copilot",
          "docstring": "Handle Copilot operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_config",
          "docstring": "Handle configuration operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Show system status.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_backup",
          "docstring": "Create backup of a file.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_parse",
          "docstring": "Parse project structure.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_audit",
          "docstring": "Handle audit operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_auto_update",
          "docstring": "Handle auto-update operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_struct_status",
          "docstring": "Handle struct status operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context",
          "docstring": "Handle context operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_session",
          "docstring": "Handle session operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CommandProcessor",
          "docstring": "Processes CLI commands and user prompts.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize command processor.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir",
                "config",
                "utils"
              ]
            },
            {
              "name": "set_cache",
              "docstring": "Set cache instance.",
              "line_range": null,
              "parameters": [
                "self",
                "cache"
              ]
            },
            {
              "name": "set_copilot",
              "docstring": "Set Copilot manager instance.",
              "line_range": null,
              "parameters": [
                "self",
                "copilot_manager"
              ]
            },
            {
              "name": "process_command",
              "docstring": "Process a command starting with /.",
              "line_range": null,
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "process_prompt",
              "docstring": "Process a regular user prompt (not a command).",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Show help information.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace",
              "docstring": "Handle workspace state and permissions management.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_mode",
              "docstring": "Handle context mode operations with workspace integration.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_view",
              "docstring": "View file or directory contents.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_write",
              "docstring": "Write content to a file.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_queue",
              "docstring": "Handle queue operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_cache",
              "docstring": "Handle cache operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_copilot",
              "docstring": "Handle Copilot operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_config",
              "docstring": "Handle configuration operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Show system status.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_backup",
              "docstring": "Create backup of a file.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_parse",
              "docstring": "Parse project structure.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_audit",
              "docstring": "Handle audit operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_auto_update",
              "docstring": "Handle auto-update operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_struct_status",
              "docstring": "Handle struct status operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context",
              "docstring": "Handle context operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_session",
              "docstring": "Handle session operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "WorkspaceStateManager",
          "print"
        ],
        "set_cache": [],
        "set_copilot": [],
        "process_command": [
          "len",
          "command_line.strip",
          "logging.error",
          "command_line.split",
          "print"
        ],
        "process_prompt": [
          "CopilotEvent",
          "len",
          "logging.warning",
          "logging.info",
          "context_info.get",
          "logging.error",
          "get_optimized_context",
          "context_data.get",
          "print",
          "prompt.strip"
        ],
        "cmd_help": [
          "print"
        ],
        "cmd_workspace": [
          "len",
          "action_args.split",
          "int",
          "logging.error",
          "override.get",
          "state.get",
          "result.get",
          "boundaries.get",
          "entry.get",
          "args.strip",
          "permissions.get",
          "print"
        ],
        "cmd_mode": [
          "len",
          "args.lower",
          "metrics.get",
          "get_optimized_context",
          "result.get",
          "context_data.get",
          "args.upper",
          "re.findall",
          "args.strip",
          "permissions.get",
          "print"
        ],
        "cmd_view": [
          "os.listdir",
          "args.strip",
          "sorted",
          "print"
        ],
        "cmd_write": [
          "len",
          "content.startswith",
          "content.endswith",
          "args.split",
          "print"
        ],
        "cmd_queue": [
          "open",
          "len",
          "json.load",
          "queue_data.get",
          "cmd.get",
          "os.remove",
          "enumerate",
          "args.strip",
          "print"
        ],
        "cmd_cache": [
          "len",
          "os.listdir",
          "print",
          "args.strip",
          "stats.get"
        ],
        "cmd_copilot": [
          "open",
          "json.load",
          "print",
          "args.strip",
          "json.dumps"
        ],
        "cmd_config": [
          "json.dumps",
          "args.strip",
          "print"
        ],
        "cmd_status": [
          "print"
        ],
        "cmd_backup": [
          "args.strip",
          "print"
        ],
        "cmd_parse": [
          "generate_json",
          "print"
        ],
        "cmd_audit": [
          "args.strip",
          "print"
        ],
        "handle_auto_update": [
          "generate_json",
          "print"
        ],
        "handle_struct_status": [
          "open",
          "len",
          "struct_data.get",
          "json.load",
          "os.stat",
          "datetime.fromtimestamp",
          "print"
        ],
        "cmd_context": [
          "len",
          "metrics.get",
          "get_optimized_context",
          "context_data.get",
          "args.strip",
          "print"
        ],
        "cmd_session": [
          "len",
          "datetime.now",
          "state.get",
          "args.strip",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CopilotContextManager",
        "CopilotEvent",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "WorkspaceStateManager",
        "cli_config",
        "cli_utils",
        "copilot",
        "create_context_orchestrator",
        "datetime",
        "generate_json",
        "get_optimized_context",
        "get_optimized_context_for_scenario",
        "initialize_copilot",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "sys",
        "trigger_copilot_event",
        "typing",
        "workspace"
      ],
      "hash": null,
      "artifact_id": "d97e586c-eb51-46e7-80f6-57a55ea4f949"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "module_doc": "Smart Context Orchestration for LLMStruct\nOptimizes context loading for different LLM usage scenarios",
      "functions": [
        {
          "name": "create_context_orchestrator",
          "docstring": "Factory function to create context orchestrator.",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context for scenario - convenience function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (cli_direct, vscode_copilot, session_work)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": null,
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load context orchestration configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_scenario",
          "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
          "line_range": null,
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "custom_budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_budget_for_scenario",
          "docstring": "Create budget configuration for scenario.",
          "line_range": null,
          "parameters": [
            "self",
            "scenario_config"
          ],
          "decorators": []
        },
        {
          "name": "_load_full_context",
          "docstring": "Load complete context without token restrictions.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_extract_relationship_summary",
          "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438",
          "line_range": null,
          "parameters": [
            "self",
            "max_modules"
          ],
          "decorators": []
        },
        {
          "name": "_load_focused_context",
          "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load session-specific context.",
          "line_range": null,
          "parameters": [
            "self",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_minimal_context",
          "docstring": "Load minimal context for quick operations.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_source_with_filtering",
          "docstring": "Load source with optional filtering based on budget.",
          "line_range": null,
          "parameters": [
            "self",
            "source_name",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_file_context",
          "docstring": "Get context specific to a file.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_essential_parts",
          "docstring": "Extract essential parts of data to fit token budget.",
          "line_range": null,
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_filter_for_current_session",
          "docstring": "Filter data to items relevant to current session.",
          "line_range": null,
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_summary",
          "docstring": "Extract summary information from data.",
          "line_range": null,
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_apply_section_filtering",
          "docstring": "Apply section filtering to exclude specified sections.",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "exclude_sections"
          ],
          "decorators": []
        },
        {
          "name": "_update_metrics",
          "docstring": "Update performance metrics.",
          "line_range": null,
          "parameters": [
            "self",
            "scenario",
            "context",
            "load_time"
          ],
          "decorators": []
        },
        {
          "name": "get_metrics_summary",
          "docstring": "Get summary of context loading metrics.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_metrics",
          "docstring": "Save metrics to file for analysis.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextMode",
          "docstring": "Context loading modes for different scenarios.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLevel",
          "docstring": "Progressive context levels with token budgets.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextBudget",
          "docstring": "Token budget configuration for context loading.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextMetrics",
          "docstring": "Metrics for context loading performance.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "SmartContextOrchestrator",
          "docstring": "Orchestrates context loading based on usage scenario and token budget.\nProvides optimized context for different LLM integration patterns.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load context orchestration configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_scenario",
              "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
              "line_range": null,
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "custom_budget"
              ]
            },
            {
              "name": "_get_budget_for_scenario",
              "docstring": "Create budget configuration for scenario.",
              "line_range": null,
              "parameters": [
                "self",
                "scenario_config"
              ]
            },
            {
              "name": "_load_full_context",
              "docstring": "Load complete context without token restrictions.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_extract_relationship_summary",
              "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438",
              "line_range": null,
              "parameters": [
                "self",
                "max_modules"
              ]
            },
            {
              "name": "_load_focused_context",
              "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "budget"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load session-specific context.",
              "line_range": null,
              "parameters": [
                "self",
                "budget"
              ]
            },
            {
              "name": "_load_minimal_context",
              "docstring": "Load minimal context for quick operations.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_source_with_filtering",
              "docstring": "Load source with optional filtering based on budget.",
              "line_range": null,
              "parameters": [
                "self",
                "source_name",
                "budget"
              ]
            },
            {
              "name": "_get_file_context",
              "docstring": "Get context specific to a file.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_essential_parts",
              "docstring": "Extract essential parts of data to fit token budget.",
              "line_range": null,
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_filter_for_current_session",
              "docstring": "Filter data to items relevant to current session.",
              "line_range": null,
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_extract_summary",
              "docstring": "Extract summary information from data.",
              "line_range": null,
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_apply_section_filtering",
              "docstring": "Apply section filtering to exclude specified sections.",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "exclude_sections"
              ]
            },
            {
              "name": "_update_metrics",
              "docstring": "Update performance metrics.",
              "line_range": null,
              "parameters": [
                "self",
                "scenario",
                "context",
                "load_time"
              ]
            },
            {
              "name": "get_metrics_summary",
              "docstring": "Get summary of context loading metrics.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_metrics",
              "docstring": "Save metrics to file for analysis.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path"
        ],
        "_load_config": [
          "open",
          "config_path.exists",
          "json.load"
        ],
        "get_context_for_scenario": [
          "self._load_full_context",
          "self._load_session_context",
          "self._get_budget_for_scenario",
          "self._load_minimal_context",
          "scenario_config.get",
          "self._update_metrics",
          "self._load_focused_context",
          "ContextMode",
          "time.time"
        ],
        "_get_budget_for_scenario": [
          "scenario_config.get",
          "budget_config.get",
          "ContextBudget"
        ],
        "_load_full_context": [
          "open",
          "logger.warning",
          "json.load",
          "full_path.exists"
        ],
        "_extract_relationship_summary": [
          "open",
          "struct_path.exists",
          "summary.append",
          "json.load",
          "logger.warning",
          "m.get",
          "struct.get"
        ],
        "_load_focused_context": [
          "open",
          "len",
          "json.load",
          "session_path.exists",
          "file_path.endswith",
          "logger.warning",
          "self._get_file_context",
          "self._extract_summary",
          "init_path.exists",
          "self._extract_relationship_summary",
          "json.dumps"
        ],
        "_load_session_context": [
          "self._filter_for_current_session",
          "self._load_source_with_filtering"
        ],
        "_load_minimal_context": [
          "open",
          "json.load",
          "source_path.exists",
          "logger.warning",
          "self._extract_summary"
        ],
        "_load_source_with_filtering": [
          "open",
          "json.load",
          "source_path.exists",
          "logger.warning",
          "self._apply_section_filtering"
        ],
        "_get_file_context": [
          "Path"
        ],
        "_extract_essential_parts": [
          "isinstance",
          "task.get"
        ],
        "_filter_for_current_session": [
          "open",
          "data.items",
          "current_session_path.exists",
          "json.load",
          "task.get",
          "logger.warning",
          "current_session.get",
          "idea.get"
        ],
        "_extract_summary": [
          "len",
          "isinstance",
          "t.get"
        ],
        "_apply_section_filtering": [
          "data.items"
        ],
        "_update_metrics": [
          "len",
          "ContextMetrics",
          "context.get"
        ],
        "get_metrics_summary": [
          "len",
          "sum"
        ],
        "save_metrics": [
          "open",
          "json.dump",
          "self.get_metrics_summary"
        ],
        "create_context_orchestrator": [
          "SmartContextOrchestrator"
        ],
        "get_optimized_context": [
          "orchestrator.get_context_for_scenario",
          "ContextBudget",
          "create_context_orchestrator"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Union",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "bfac1f21-865e-4913-8834-3516aabeafec"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "LLMClient",
        "SystemCapabilityDiscovery",
        "ai_cli_integration",
        "ai_self_awareness",
        "llm_client"
      ],
      "hash": null,
      "artifact_id": "4b299c2b-0b12-4e82-842b-7ebfab66e85e"
    },
    {
      "module_id": "src.llmstruct.ai_cli_integration",
      "path": "src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "module_doc": "AI Self-Awareness CLI Integration Module\nIntegrates unused CLI functions into the AI self-awareness system.",
      "functions": [
        {
          "name": "create_ai_cli_integration",
          "docstring": "Factory function to create AI CLI integration instance.",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_enhanced_cli_summary",
          "docstring": "Get a formatted summary of AI CLI integration capabilities.",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI integration system.",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_discover_available_commands",
          "docstring": "Discover which unused CLI commands are available for integration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_status_command",
          "docstring": "Integrate cmd_status for real-time AI system status awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_audit_command",
          "docstring": "Integrate cmd_audit for system health analysis awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_context_command",
          "docstring": "Integrate cmd_context for context mode awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_queue_command",
          "docstring": "Integrate cmd_queue for workflow queue monitoring.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_integration_summary",
          "docstring": "Get summary of CLI command integrations for AI awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_ai_enhancement_impact",
          "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_status",
          "docstring": "Create fallback status information if cmd_status is not available.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_audit",
          "docstring": "Create fallback audit information if cmd_audit is not available.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_context",
          "docstring": "Create fallback context information if cmd_context is not available.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_queue",
          "docstring": "Create fallback queue information if cmd_queue is not available.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AISelfAwarenessCLIIntegration",
          "docstring": "Integrates unused CLI functions to enhance AI self-awareness capabilities.\nTransforms 21 unused CLI commands into useful AI interaction tools.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI integration system.",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_discover_available_commands",
              "docstring": "Discover which unused CLI commands are available for integration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_status_command",
              "docstring": "Integrate cmd_status for real-time AI system status awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_audit_command",
              "docstring": "Integrate cmd_audit for system health analysis awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_context_command",
              "docstring": "Integrate cmd_context for context mode awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_queue_command",
              "docstring": "Integrate cmd_queue for workflow queue monitoring.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_integration_summary",
              "docstring": "Get summary of CLI command integrations for AI awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_ai_enhancement_impact",
              "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_status",
              "docstring": "Create fallback status information if cmd_status is not available.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_audit",
              "docstring": "Create fallback audit information if cmd_audit is not available.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_context",
              "docstring": "Create fallback context information if cmd_context is not available.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_queue",
              "docstring": "Create fallback queue information if cmd_queue is not available.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._discover_available_commands",
          "Path"
        ],
        "_discover_available_commands": [
          "logger.error",
          "hasattr",
          "unused_command_mapping.items",
          "getattr"
        ],
        "integrate_ai_status_command": [
          "logger.error",
          "cmd_status",
          "self._create_fallback_status",
          "str"
        ],
        "integrate_ai_audit_command": [
          "logger.error",
          "cmd_audit",
          "str",
          "self._create_fallback_audit"
        ],
        "integrate_ai_context_command": [
          "logger.error",
          "self._create_fallback_context",
          "str",
          "cmd_context"
        ],
        "integrate_ai_queue_command": [
          "cmd_queue",
          "logger.error",
          "self._create_fallback_queue",
          "str"
        ],
        "get_integration_summary": [
          "len",
          "cmd.get",
          "info.get",
          "sum",
          "self._calculate_ai_enhancement_impact"
        ],
        "_calculate_ai_enhancement_impact": [
          "len",
          "enhanced_categories.append",
          "capability_categories.items",
          "info.get",
          "any"
        ],
        "_create_fallback_status": [
          "str"
        ],
        "_create_fallback_audit": [
          "str"
        ],
        "_create_fallback_context": [],
        "_create_fallback_queue": [],
        "create_ai_cli_integration": [
          "AISelfAwarenessCLIIntegration"
        ],
        "get_ai_enhanced_cli_summary": [
          "integration.integrate_ai_audit_command",
          "integration.get_integration_summary",
          "integration.integrate_ai_queue_command",
          "create_ai_cli_integration",
          "integration.integrate_ai_status_command",
          "integration.integrate_ai_context_command"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "cli_commands",
        "json",
        "llmstruct",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "881d90ae-ec5e-4e82-ae11-d7c7fa4faef2"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "llmstruct.cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "10e4ef9e-10d7-448b-9917-636c21005979"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "module_doc": "CLI utility functions.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize utils with root directory.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read file content with size limit.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "write_file_content",
          "docstring": "Write content to file.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "get_directory_structure",
          "docstring": "Get directory structure using folder generator.",
          "line_range": null,
          "parameters": [
            "self",
            "path",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON content.",
          "line_range": null,
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "format_json",
          "docstring": "Format data as JSON string.",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "indent"
          ],
          "decorators": []
        },
        {
          "name": "generate_unique_id",
          "docstring": "Generate unique ID for commands, queues, etc.",
          "line_range": null,
          "parameters": [
            "self",
            "prefix"
          ],
          "decorators": []
        },
        {
          "name": "safe_path_join",
          "docstring": "Safely join path parts, preventing directory traversal.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_exists",
          "docstring": "Check if file exists.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "dir_exists",
          "docstring": "Check if directory exists.",
          "line_range": null,
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_size",
          "docstring": "Get file size in bytes.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_file",
          "docstring": "Create backup of file with timestamp.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_backups",
          "docstring": "Clean up old backup files, keeping only the most recent ones.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "keep_count"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIUtils",
          "docstring": "Utility functions for CLI operations.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize utils with root directory.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "read_file_content",
              "docstring": "Read file content with size limit.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "max_size"
              ]
            },
            {
              "name": "write_file_content",
              "docstring": "Write content to file.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "content"
              ]
            },
            {
              "name": "get_directory_structure",
              "docstring": "Get directory structure using folder generator.",
              "line_range": null,
              "parameters": [
                "self",
                "path",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ]
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON content.",
              "line_range": null,
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "format_json",
              "docstring": "Format data as JSON string.",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "indent"
              ]
            },
            {
              "name": "generate_unique_id",
              "docstring": "Generate unique ID for commands, queues, etc.",
              "line_range": null,
              "parameters": [
                "self",
                "prefix"
              ]
            },
            {
              "name": "safe_path_join",
              "docstring": "Safely join path parts, preventing directory traversal.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_exists",
              "docstring": "Check if file exists.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "dir_exists",
              "docstring": "Check if directory exists.",
              "line_range": null,
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "get_file_size",
              "docstring": "Get file size in bytes.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "backup_file",
              "docstring": "Create backup of file with timestamp.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "cleanup_old_backups",
              "docstring": "Clean up old backup files, keeping only the most recent ones.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "keep_count"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "read_file_content": [
          "open",
          "logging.error",
          "logging.warning",
          "f.read",
          "os.stat"
        ],
        "write_file_content": [
          "open",
          "logging.info",
          "logging.error",
          "Path",
          "f.write"
        ],
        "get_directory_structure": [
          "os.listdir",
          "get_folder_structure",
          "logging.error",
          "sorted"
        ],
        "validate_json": [
          "str",
          "json.loads"
        ],
        "format_json": [
          "logging.error",
          "str",
          "json.dumps"
        ],
        "generate_unique_id": [
          "uuid.uuid4",
          "int",
          "str",
          "time.time"
        ],
        "safe_path_join": [
          "ValueError",
          "resolved_path.startswith"
        ],
        "file_exists": [
          "self.safe_path_join"
        ],
        "dir_exists": [
          "self.safe_path_join"
        ],
        "get_file_size": [
          "self.safe_path_join"
        ],
        "backup_file": [
          "open",
          "src.read",
          "int",
          "logging.error",
          "self.safe_path_join",
          "dst.write",
          "time.time"
        ],
        "cleanup_old_backups": [
          "int",
          "filename.split",
          "logging.info",
          "logging.warning",
          "backups.sort",
          "logging.error",
          "os.listdir",
          "self.safe_path_join",
          "os.remove",
          "filename.startswith",
          "backups.append"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "7298f5bb-f3d5-4757-bc5f-8adf1b93b3df"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "module_doc": "LLMStruct Copilot Integration Module\nProvides context-aware development assistance with hybrid copilot capabilities.",
      "functions": [
        {
          "name": "initialize_copilot",
          "docstring": "Initialize copilot context manager for the project.\n\nArgs:\n    project_root: Project root directory\n\nReturns:\n    Configured CopilotContextManager instance",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "trigger_copilot_event",
          "docstring": "Trigger a copilot event and get relevant context.\n\nArgs:\n    manager: CopilotContextManager instance\n    event_type: Type of event\n    file_path: Optional file path\n    **kwargs: Additional event metadata\n\nReturns:\n    Dict with event context",
          "line_range": null,
          "parameters": [
            "manager",
            "event_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "smart_suggest",
          "docstring": "Get smart suggestions based on query and context.\n\nArgs:\n    manager: CopilotContextManager instance\n    query: Query string\n    context: Context type (code, workflow, task, etc.)\n\nReturns:\n    List of suggestions",
          "line_range": null,
          "parameters": [
            "manager",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context_for_scenario",
          "docstring": "Get optimized context for specific scenario - standalone function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": null,
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
          "line_range": null,
          "parameters": [
            "self",
            "project_root",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load copilot configuration from JSON file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_layers",
          "docstring": "Initialize context layers from configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_context_layer",
          "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
          "line_range": null,
          "parameters": [
            "self",
            "layer_name",
            "force"
          ],
          "decorators": []
        },
        {
          "name": "unload_context_layer",
          "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
          "line_range": null,
          "parameters": [
            "self",
            "layer_name"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": null,
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_context",
          "docstring": "Fallback to legacy context loading.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_vscode",
          "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_event",
          "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
          "line_range": null,
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_event_context",
          "docstring": "Legacy event context loading as fallback.",
          "line_range": null,
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "suggest_completion",
          "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
          "line_range": null,
          "parameters": [
            "self",
            "current_code",
            "file_path",
            "cursor_position"
          ],
          "decorators": []
        },
        {
          "name": "validate_change",
          "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "change_type"
          ],
          "decorators": []
        },
        {
          "name": "_matches_scope",
          "docstring": "Check if file matches scope pattern.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "scope"
          ],
          "decorators": []
        },
        {
          "name": "_matches_trigger",
          "docstring": "Check if change type matches trigger.",
          "line_range": null,
          "parameters": [
            "self",
            "change_type",
            "trigger"
          ],
          "decorators": []
        },
        {
          "name": "_validate_json_schema",
          "docstring": "Validate JSON file against schema.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_check_circular_dependencies",
          "docstring": "Check for circular dependencies.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_validate_task_references",
          "docstring": "Validate task references in tasks.json.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
          "line_range": null,
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "refresh_all_contexts",
          "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_status",
          "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "export_context",
          "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
          "line_range": null,
          "parameters": [
            "self",
            "layers",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Clean up resources.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextLayer",
          "docstring": "Context layer priorities for copilot integration.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AttachMode",
          "docstring": "Context attachment modes.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLayerConfig",
          "docstring": "Configuration for a context layer.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotEvent",
          "docstring": "Represents a copilot event for context triggering.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotContextManager",
          "docstring": "Manages context layers and integration with GitHub Copilot.\nProvides intelligent context loading and workflow assistance.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
              "line_range": null,
              "parameters": [
                "self",
                "project_root",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load copilot configuration from JSON file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_initialize_layers",
              "docstring": "Initialize context layers from configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_context_layer",
              "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
              "line_range": null,
              "parameters": [
                "self",
                "layer_name",
                "force"
              ]
            },
            {
              "name": "unload_context_layer",
              "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
              "line_range": null,
              "parameters": [
                "self",
                "layer_name"
              ]
            },
            {
              "name": "get_optimized_context",
              "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
              "line_range": null,
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "max_tokens"
              ]
            },
            {
              "name": "_get_legacy_context",
              "docstring": "Fallback to legacy context loading.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_vscode",
              "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_context_for_event",
              "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
              "line_range": null,
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_get_legacy_event_context",
              "docstring": "Legacy event context loading as fallback.",
              "line_range": null,
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "suggest_completion",
              "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
              "line_range": null,
              "parameters": [
                "self",
                "current_code",
                "file_path",
                "cursor_position"
              ]
            },
            {
              "name": "validate_change",
              "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "change_type"
              ]
            },
            {
              "name": "_matches_scope",
              "docstring": "Check if file matches scope pattern.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "scope"
              ]
            },
            {
              "name": "_matches_trigger",
              "docstring": "Check if change type matches trigger.",
              "line_range": null,
              "parameters": [
                "self",
                "change_type",
                "trigger"
              ]
            },
            {
              "name": "_validate_json_schema",
              "docstring": "Validate JSON file against schema.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_check_circular_dependencies",
              "docstring": "Check for circular dependencies.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_validate_task_references",
              "docstring": "Validate task references in tasks.json.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
              "line_range": null,
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "refresh_all_contexts",
              "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_status",
              "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "export_context",
              "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
              "line_range": null,
              "parameters": [
                "self",
                "layers",
                "format"
              ]
            },
            {
              "name": "close",
              "docstring": "Clean up resources.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "create_context_orchestrator",
          "Path",
          "self._initialize_layers",
          "os.getcwd",
          "JSONCache",
          "str"
        ],
        "_load_config": [
          "open",
          "logger.info",
          "json.load",
          "logger.error",
          "logger.warning",
          "Path"
        ],
        "_initialize_layers": [
          "layers_config.items",
          "layer_config.get",
          "ContextLayerConfig"
        ],
        "load_context_layer": [
          "open",
          "logger.info",
          "logger.debug",
          "json.load",
          "source_path.exists",
          "logger.error",
          "logger.warning",
          "time.time"
        ],
        "unload_context_layer": [
          "logger.info"
        ],
        "get_optimized_context": [
          "logger.error",
          "self._get_legacy_context",
          "scenario_mapping.get"
        ],
        "_get_legacy_context": [
          "self.load_context_layer"
        ],
        "get_context_for_vscode": [
          "self.get_optimized_context"
        ],
        "get_context_for_event": [
          "logger.error",
          "self.get_optimized_context",
          "scenario_mapping.get",
          "self._get_legacy_event_context"
        ],
        "_get_legacy_event_context": [
          "open",
          "json.load",
          "code_triggers.get",
          "self.load_context_layer",
          "source_path.exists",
          "logger.error",
          "workflow_triggers.get",
          "triggers.get",
          "file_triggers.get"
        ],
        "suggest_completion": [
          "struct_context.get",
          "self.load_context_layer",
          "Path",
          "func.get",
          "module.get",
          "suggestions.append",
          "str",
          "current_module.get"
        ],
        "validate_change": [
          "len",
          "self._validate_task_references",
          "safety_features.get",
          "rule.get",
          "self._matches_trigger",
          "self._matches_scope",
          "result.get",
          "self._validate_json_schema",
          "self._check_circular_dependencies"
        ],
        "_matches_scope": [
          "Path",
          "str",
          "fnmatch"
        ],
        "_matches_trigger": [
          "trigger_map.get"
        ],
        "_validate_json_schema": [
          "file_path.endswith",
          "open",
          "json.load"
        ],
        "_check_circular_dependencies": [
          "struct_data.get",
          "len",
          "self.load_context_layer",
          "Path",
          "module.get",
          "str"
        ],
        "_validate_task_references": [
          "open",
          "set",
          "json.load",
          "task.get",
          "file_path.endswith",
          "task_ids.add",
          "tasks_data.get"
        ],
        "get_workflow_suggestions": [
          "workflows.items",
          "self.load_context_layer",
          "workflow.get",
          "command.lower",
          "suggestions.extend",
          "suggestions.append"
        ],
        "refresh_all_contexts": [
          "logger.info",
          "list",
          "self.load_context_layer"
        ],
        "get_context_status": [
          "list"
        ],
        "export_context": [
          "list",
          "str",
          "json.dumps"
        ],
        "close": [
          "logger.info",
          "hasattr"
        ],
        "initialize_copilot": [
          "CopilotContextManager"
        ],
        "trigger_copilot_event": [
          "CopilotEvent",
          "manager.get_context_for_event"
        ],
        "smart_suggest": [
          "manager.get_workflow_suggestions"
        ],
        "get_optimized_context_for_scenario": [
          "initialize_copilot",
          "locals",
          "manager.close",
          "manager.get_optimized_context"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "Union",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "fnmatch",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "476c77c6-0e2c-4f93-aacd-40a68a66be66"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "module_doc": "GitHub visualization/graph feature (gh-view-v1)\nExport consolidated tasks/ideas from JSON files to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for GitHub Projects export",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize exporter with configuration",
          "line_range": null,
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from TOML file",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_mapping",
          "docstring": "Load existing ID mapping between local and GitHub",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_mapping",
          "docstring": "Save ID mapping to file",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_run_gh_command",
          "docstring": "Run GitHub CLI command and return success status and output",
          "line_range": null,
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "load_official_data",
          "docstring": "Load tasks and ideas from official JSON files",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "format_task_for_github",
          "docstring": "Format task data for GitHub Project card",
          "line_range": null,
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "format_idea_for_github",
          "docstring": "Format idea data for GitHub Project card",
          "line_range": null,
          "parameters": [
            "self",
            "idea"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExporter",
          "docstring": "Export tasks and ideas to GitHub Projects as cards",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize exporter with configuration",
              "line_range": null,
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from TOML file",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_mapping",
              "docstring": "Load existing ID mapping between local and GitHub",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_mapping",
              "docstring": "Save ID mapping to file",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_run_gh_command",
              "docstring": "Run GitHub CLI command and return success status and output",
              "line_range": null,
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "load_official_data",
              "docstring": "Load tasks and ideas from official JSON files",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "format_task_for_github",
              "docstring": "Format task data for GitHub Project card",
              "line_range": null,
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "format_idea_for_github",
              "docstring": "Format idea data for GitHub Project card",
              "line_range": null,
              "parameters": [
                "self",
                "idea"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_mapping",
          "self._load_config",
          "Path"
        ],
        "_load_config": [
          "open",
          "config.get",
          "toml.load",
          "print"
        ],
        "_load_mapping": [
          "open",
          "json.load"
        ],
        "_save_mapping": [
          "open",
          "json.dump",
          "print"
        ],
        "_run_gh_command": [
          "subprocess.run"
        ],
        "load_official_data": [
          "open",
          "len",
          "json.load",
          "tasks_data.get",
          "ideas_file.exists",
          "tasks_file.exists",
          "ideas_data.get",
          "print"
        ],
        "format_task_for_github": [
          "status_map.get",
          "body_parts.append",
          "task.get"
        ],
        "format_idea_for_github": [
          "status_map.get",
          "body_parts.append",
          "idea.get"
        ],
        "main": [
          "len",
          "exporter.load_official_data",
          "GitHubProjectsExporter",
          "exporter.format_idea_for_github",
          "sys.exit",
          "exporter.format_task_for_github",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "pathlib",
        "subprocess",
        "sys",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "e40c09f2-aff2-47c7-9ad8-c8b23cb9eed8"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": null,
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": null,
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getenv",
          "int",
          "logging.info"
        ],
        "query": [
          "json.load",
          "logging.error",
          "logging.info",
          "logging.warning",
          "self._query_ollama",
          "Path",
          "self._query_hybrid",
          "self._query_anthropic",
          "self._query_grok",
          "range",
          "asyncio.sleep",
          "json.dumps"
        ],
        "_query_grok": [
          "aiohttp.ClientSession",
          "logging.info",
          "logging.error",
          "response.json",
          "result.get",
          "session.post"
        ],
        "_query_anthropic": [
          "aiohttp.ClientSession",
          "logging.info",
          "logging.error",
          "response.json",
          "result.get",
          "session.post"
        ],
        "_query_ollama": [
          "aiohttp.ClientSession",
          "logging.info",
          "logging.error",
          "response.json",
          "logging.debug",
          "result.get",
          "session.post"
        ],
        "_query_hybrid": [
          "len",
          "logging.info",
          "self._query_ollama",
          "self._query_anthropic",
          "self._query_grok",
          "isinstance",
          "asyncio.gather"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "fab6967d-e1f2-47a5-b57c-ae8488d7fabc"
    },
    {
      "module_id": "src.llmstruct.ai_workflow_middleware",
      "path": "src/llmstruct/ai_workflow_middleware.py",
      "category": "core",
      "module_doc": "AI Workflow Middleware - Forces AI Integration with LLMStruct\nIntercepts all AI requests and ensures they go through our orchestration system.",
      "functions": [
        {
          "name": "initialize_ai_middleware",
          "docstring": "Initialize global AI middleware.",
          "line_range": null,
          "parameters": [
            "project_root",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_middleware",
          "docstring": "Get current AI middleware instance.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "process_ai_query",
          "docstring": "Global function to process AI queries through middleware.",
          "line_range": null,
          "parameters": [
            "query",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "ensure_llmstruct_integration",
          "docstring": "Decorator that ensures function uses llmstruct system.",
          "line_range": null,
          "parameters": [
            "func"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "_load_middleware_config",
          "docstring": "Load middleware configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_ai_request",
          "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration",
          "line_range": null,
          "parameters": [
            "self",
            "raw_query",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_parse_ai_request",
          "docstring": "Parse raw query into structured AI request.",
          "line_range": null,
          "parameters": [
            "self",
            "raw_query"
          ],
          "decorators": []
        },
        {
          "name": "_should_use_llmstruct",
          "docstring": "Determine if request should use llmstruct system.",
          "line_range": null,
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_process_with_llmstruct",
          "docstring": "Process request through full llmstruct system.",
          "line_range": null,
          "parameters": [
            "self",
            "request",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_process_bypass",
          "docstring": "Process request without llmstruct system.",
          "line_range": null,
          "parameters": [
            "self",
            "request",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_optimize_context",
          "docstring": "Optimize context using orchestrator.",
          "line_range": null,
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_ai_delegation",
          "docstring": "Analyze which AI should handle this request.",
          "line_range": null,
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_context",
          "docstring": "Get enhanced context with project awareness.",
          "line_range": null,
          "parameters": [
            "self",
            "request",
            "context_result"
          ],
          "decorators": []
        },
        {
          "name": "_get_capability_summary",
          "docstring": "Get current system capabilities.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_generate_usage_guidance",
          "docstring": "Generate guidance for AI on how to use llmstruct system.",
          "line_range": null,
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_map_tags_to_scenario",
          "docstring": "Map context tags to orchestrator scenarios.",
          "line_range": null,
          "parameters": [
            "self",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "_default_ai_processing",
          "docstring": "Default AI processing when no custom handler provided.",
          "line_range": null,
          "parameters": [
            "self",
            "request",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_middleware_stats",
          "docstring": "Get middleware usage statistics.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "force_llmstruct_mode",
          "docstring": "Force all future requests to use llmstruct system.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enable_guidance_mode",
          "docstring": "Enable guided mode with llmstruct suggestions.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "wrapper",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AIWorkflowMode",
          "docstring": "AI workflow enforcement modes.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AIRequest",
          "docstring": "Standardized AI request structure.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "AIResponse",
          "docstring": "Standardized AI response structure.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "AIWorkflowMiddleware",
          "docstring": "Middleware that ensures ALL AI interactions go through LLMStruct system.\nThis solves the problem of AI not using its own infrastructure.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root",
                "mode"
              ]
            },
            {
              "name": "_load_middleware_config",
              "docstring": "Load middleware configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_ai_request",
              "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration",
              "line_range": null,
              "parameters": [
                "self",
                "raw_query",
                "ai_handler"
              ]
            },
            {
              "name": "_parse_ai_request",
              "docstring": "Parse raw query into structured AI request.",
              "line_range": null,
              "parameters": [
                "self",
                "raw_query"
              ]
            },
            {
              "name": "_should_use_llmstruct",
              "docstring": "Determine if request should use llmstruct system.",
              "line_range": null,
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_process_with_llmstruct",
              "docstring": "Process request through full llmstruct system.",
              "line_range": null,
              "parameters": [
                "self",
                "request",
                "ai_handler"
              ]
            },
            {
              "name": "_process_bypass",
              "docstring": "Process request without llmstruct system.",
              "line_range": null,
              "parameters": [
                "self",
                "request",
                "ai_handler"
              ]
            },
            {
              "name": "_optimize_context",
              "docstring": "Optimize context using orchestrator.",
              "line_range": null,
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_analyze_ai_delegation",
              "docstring": "Analyze which AI should handle this request.",
              "line_range": null,
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_get_enhanced_context",
              "docstring": "Get enhanced context with project awareness.",
              "line_range": null,
              "parameters": [
                "self",
                "request",
                "context_result"
              ]
            },
            {
              "name": "_get_capability_summary",
              "docstring": "Get current system capabilities.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_generate_usage_guidance",
              "docstring": "Generate guidance for AI on how to use llmstruct system.",
              "line_range": null,
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_map_tags_to_scenario",
              "docstring": "Map context tags to orchestrator scenarios.",
              "line_range": null,
              "parameters": [
                "self",
                "tags"
              ]
            },
            {
              "name": "_default_ai_processing",
              "docstring": "Default AI processing when no custom handler provided.",
              "line_range": null,
              "parameters": [
                "self",
                "request",
                "context"
              ]
            },
            {
              "name": "get_middleware_stats",
              "docstring": "Get middleware usage statistics.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "force_llmstruct_mode",
              "docstring": "Force all future requests to use llmstruct system.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enable_guidance_mode",
              "docstring": "Enable guided mode with llmstruct suggestions.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logger.info",
          "CursorAIBridge",
          "create_context_orchestrator",
          "Path",
          "self._load_middleware_config",
          "SystemCapabilityDiscovery",
          "str"
        ],
        "_load_middleware_config": [
          "open",
          "config_path.exists",
          "json.load"
        ],
        "process_ai_request": [
          "self._process_with_llmstruct",
          "str",
          "logger.error",
          "self._process_bypass",
          "AIResponse",
          "self._should_use_llmstruct",
          "self._parse_ai_request",
          "time.time"
        ],
        "_parse_ai_request": [
          "AIRequest",
          "context_tags.extend",
          "re.sub",
          "re.findall",
          "time.time"
        ],
        "_should_use_llmstruct": [],
        "_process_with_llmstruct": [
          "self._analyze_ai_delegation",
          "ai_handler",
          "AIResponse",
          "self._get_enhanced_context",
          "enhanced_context.get",
          "self._optimize_context",
          "self._default_ai_processing",
          "time.time"
        ],
        "_process_bypass": [
          "ai_handler",
          "AIResponse"
        ],
        "_optimize_context": [
          "len",
          "self._map_tags_to_scenario",
          "context.get",
          "logger.error",
          "str"
        ],
        "_analyze_ai_delegation": [
          "delegation.get",
          "logger.error",
          "str"
        ],
        "_get_enhanced_context": [
          "self._get_capability_summary",
          "self._generate_usage_guidance"
        ],
        "_get_capability_summary": [
          "str"
        ],
        "_generate_usage_guidance": [
          "guidance.append"
        ],
        "_map_tags_to_scenario": [],
        "_default_ai_processing": [],
        "get_middleware_stats": [],
        "force_llmstruct_mode": [
          "logger.info"
        ],
        "enable_guidance_mode": [
          "logger.info"
        ],
        "initialize_ai_middleware": [
          "AIWorkflowMiddleware"
        ],
        "get_ai_middleware": [],
        "process_ai_query": [
          "RuntimeError",
          "_middleware_instance.process_ai_request"
        ],
        "ensure_llmstruct_integration": [],
        "wrapper": [
          "func",
          "logger.warning",
          "kwargs.get",
          "middleware.process_ai_request",
          "get_ai_middleware",
          "str"
        ]
      },
      "dependencies": [
        "Any",
        "Callable",
        "CursorAIBridge",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.context_orchestrator",
        "llmstruct.cursor_ai_bridge",
        "logging",
        "pathlib",
        "re",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "52e4c9d7-64b7-45f9-bfe0-6ed36feb1c74"
    },
    {
      "module_id": "src.llmstruct.ai_self_awareness",
      "path": "src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "module_doc": "AI Self-Awareness Enhancement Module\nProvides comprehensive system introspection and capability discovery for llmstruct AI systems.\nEnhanced with Cursor IDE integration and real-time metrics.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize the capability discovery system with CLI integration.",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_ensure_directories",
          "docstring": "Ensure required directories exist.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "discover_all_capabilities",
          "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
          "line_range": null,
          "parameters": [
            "self",
            "force_refresh"
          ],
          "decorators": []
        },
        {
          "name": "_get_integration_metrics",
          "docstring": "Get metrics about unused function integration success.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_enhanced_capabilities_summary",
          "docstring": "Get enhanced capabilities summary including unused function integration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_ai_status",
          "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_tools",
          "docstring": "Discover and check health of all available tools.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cli_processor",
          "docstring": "Check CLI processor health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_copilot_manager",
          "docstring": "Check Copilot manager health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_context_orchestrator",
          "docstring": "Check context orchestrator health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cache_system",
          "docstring": "Check cache system health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_struct_parser",
          "docstring": "Check struct.json parser health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_docs_system",
          "docstring": "Check docs.json system health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_capabilities",
          "docstring": "Discover available context capabilities.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_integration_health",
          "docstring": "Check health of all system integrations.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_component_status",
          "docstring": "Check status of a specific component.",
          "line_range": null,
          "parameters": [
            "self",
            "component_name"
          ],
          "decorators": []
        },
        {
          "name": "_discover_vscode_capabilities",
          "docstring": "Discover VS Code specific capabilities.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_cache_hit_rate",
          "docstring": "Calculate cache hit rate using real metrics.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_system_load",
          "docstring": "Estimate current system load using real metrics.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_cache_valid",
          "docstring": "Check if cached capabilities are still valid.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cached_capabilities",
          "docstring": "Load capabilities from cache.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cache_capabilities",
          "docstring": "Cache capabilities to disk.",
          "line_range": null,
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "get_capabilities_summary",
          "docstring": "Get a human-readable summary of current capabilities.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_project_structure",
          "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_directory_structure",
          "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_unused_capabilities",
          "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
          "line_range": null,
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_discover_config_capabilities",
          "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_scenarios",
          "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_command",
          "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
          "line_range": null,
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_config",
          "docstring": "Determine if a config function would be useful for AI configuration awareness.",
          "line_range": null,
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_utility",
          "docstring": "Determine if a utility function would be useful for AI operations.",
          "line_range": null,
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_prioritize_integrations",
          "docstring": "Prioritize which unused functions should be integrated first.",
          "line_range": null,
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_basic_directory_scan",
          "docstring": "Basic directory scan for fallback scenarios.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_status_report",
          "docstring": "Generate Cursor-specific status optimized for IDE integration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "optimize_context_for_cursor",
          "docstring": "Provide perfectly sized context for Cursor interactions.",
          "line_range": null,
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals from personal bridge.",
          "line_range": null,
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_real_cache_hit_rate",
          "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_real_system_load",
          "docstring": "Get actual system performance metrics.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_query_type",
          "docstring": "Analyze query to determine optimal context type.",
          "line_range": null,
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": null,
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": null,
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_get_overall_health_emoji",
          "docstring": "Get emoji representing overall system health.",
          "line_range": null,
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_status_emoji",
          "docstring": "Get emoji for context engine status.",
          "line_range": null,
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_ai_integration_emoji",
          "docstring": "Get emoji for AI integration status.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_goal_alignment_status",
          "docstring": "Get goal alignment status.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CapabilityStatus",
          "docstring": "Status of system capabilities.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextMode",
          "docstring": "Available context modes.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ToolHealth",
          "docstring": "Health status of a specific tool.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextCapabilities",
          "docstring": "Available context capabilities.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "IntegrationHealth",
          "docstring": "Status of system integrations.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "VSCodeCapabilities",
          "docstring": "VS Code specific capabilities.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilities",
          "docstring": "Complete system capabilities overview.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilityDiscovery",
          "docstring": "Discovers and monitors system capabilities in real-time.\nProvides AI with comprehensive understanding of available tools and systems.\nEnhanced with unused function integration for maximum AI self-awareness.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the capability discovery system with CLI integration.",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_ensure_directories",
              "docstring": "Ensure required directories exist.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "discover_all_capabilities",
              "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
              "line_range": null,
              "parameters": [
                "self",
                "force_refresh"
              ]
            },
            {
              "name": "_get_integration_metrics",
              "docstring": "Get metrics about unused function integration success.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_enhanced_capabilities_summary",
              "docstring": "Get enhanced capabilities summary including unused function integration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_comprehensive_ai_status",
              "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_tools",
              "docstring": "Discover and check health of all available tools.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cli_processor",
              "docstring": "Check CLI processor health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_copilot_manager",
              "docstring": "Check Copilot manager health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_context_orchestrator",
              "docstring": "Check context orchestrator health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cache_system",
              "docstring": "Check cache system health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_struct_parser",
              "docstring": "Check struct.json parser health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_docs_system",
              "docstring": "Check docs.json system health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_capabilities",
              "docstring": "Discover available context capabilities.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_integration_health",
              "docstring": "Check health of all system integrations.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_component_status",
              "docstring": "Check status of a specific component.",
              "line_range": null,
              "parameters": [
                "self",
                "component_name"
              ]
            },
            {
              "name": "_discover_vscode_capabilities",
              "docstring": "Discover VS Code specific capabilities.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_cache_hit_rate",
              "docstring": "Calculate cache hit rate using real metrics.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_estimate_system_load",
              "docstring": "Estimate current system load using real metrics.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_cache_valid",
              "docstring": "Check if cached capabilities are still valid.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cached_capabilities",
              "docstring": "Load capabilities from cache.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cache_capabilities",
              "docstring": "Cache capabilities to disk.",
              "line_range": null,
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "get_capabilities_summary",
              "docstring": "Get a human-readable summary of current capabilities.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_project_structure",
              "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_enhanced_directory_structure",
              "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_unused_capabilities",
              "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
              "line_range": null,
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_discover_config_capabilities",
              "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_scenarios",
              "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_ai_useful_command",
              "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
              "line_range": null,
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_config",
              "docstring": "Determine if a config function would be useful for AI configuration awareness.",
              "line_range": null,
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_utility",
              "docstring": "Determine if a utility function would be useful for AI operations.",
              "line_range": null,
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_prioritize_integrations",
              "docstring": "Prioritize which unused functions should be integrated first.",
              "line_range": null,
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_basic_directory_scan",
              "docstring": "Basic directory scan for fallback scenarios.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cursor_status_report",
              "docstring": "Generate Cursor-specific status optimized for IDE integration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "optimize_context_for_cursor",
              "docstring": "Provide perfectly sized context for Cursor interactions.",
              "line_range": null,
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals from personal bridge.",
              "line_range": null,
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "_calculate_real_cache_hit_rate",
              "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_real_system_load",
              "docstring": "Get actual system performance metrics.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_query_type",
              "docstring": "Analyze query to determine optimal context type.",
              "line_range": null,
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": null,
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": null,
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_get_overall_health_emoji",
              "docstring": "Get emoji representing overall system health.",
              "line_range": null,
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_get_context_status_emoji",
              "docstring": "Get emoji for context engine status.",
              "line_range": null,
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_get_ai_integration_emoji",
              "docstring": "Get emoji for AI integration status.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_goal_alignment_status",
              "docstring": "Get goal alignment status.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "create_ai_cli_integration",
          "Path",
          "self._ensure_directories"
        ],
        "_ensure_directories": [],
        "discover_all_capabilities": [
          "logger.info",
          "self._discover_context_capabilities",
          "datetime.now",
          "self._analyze_project_structure",
          "self._estimate_system_load",
          "self._load_cached_capabilities",
          "SystemCapabilities",
          "self._is_cache_valid",
          "self._discover_tools",
          "self._check_integration_health",
          "self._cache_capabilities",
          "self._get_integration_metrics",
          "self._discover_vscode_capabilities",
          "self._calculate_cache_hit_rate",
          "time.time"
        ],
        "_get_integration_metrics": [],
        "get_enhanced_capabilities_summary": [
          "self.get_capabilities_summary",
          "enhanced_info.append",
          "str",
          "hasattr"
        ],
        "get_comprehensive_ai_status": [
          "self.get_enhanced_capabilities_summary",
          "str",
          "get_ai_enhanced_cli_summary"
        ],
        "_discover_tools": [
          "self._check_copilot_manager",
          "self._check_cli_processor",
          "self._check_struct_parser",
          "self._check_context_orchestrator",
          "self._check_cache_system",
          "self._check_docs_system"
        ],
        "_check_cli_processor": [
          "CommandProcessor",
          "ToolHealth",
          "str",
          "datetime.now",
          "CLIConfig",
          "CLIUtils",
          "time.time"
        ],
        "_check_copilot_manager": [
          "time.time",
          "hasattr",
          "ToolHealth",
          "datetime.now",
          "manager.get_context_status",
          "initialize_copilot",
          "str"
        ],
        "_check_context_orchestrator": [
          "time.time",
          "hasattr",
          "ToolHealth",
          "datetime.now",
          "create_context_orchestrator",
          "logger.warning",
          "get_optimized_context",
          "str"
        ],
        "_check_cache_system": [
          "time.time",
          "datetime.now",
          "ToolHealth",
          "cache.cache_json",
          "struct_file.exists",
          "cache.close",
          "cache.get_full_json",
          "JSONCache",
          "str"
        ],
        "_check_struct_parser": [
          "open",
          "struct_data.get",
          "datetime.now",
          "json.load",
          "ToolHealth",
          "struct_file.exists",
          "str",
          "FileNotFoundError",
          "missing_keys.append",
          "time.time"
        ],
        "_check_docs_system": [
          "open",
          "docs_file.exists",
          "json.load",
          "ToolHealth",
          "datetime.now",
          "str",
          "FileNotFoundError",
          "time.time"
        ],
        "_discover_context_capabilities": [
          "list",
          "ContextCapabilities",
          "create_context_orchestrator",
          "scenario_mappings.keys",
          "logger.error",
          "config.get",
          "isinstance",
          "str"
        ],
        "_check_integration_health": [
          "self._check_component_status",
          "IntegrationHealth"
        ],
        "_check_component_status": [
          "hasattr"
        ],
        "_discover_vscode_capabilities": [
          "VSCodeCapabilities"
        ],
        "_calculate_cache_hit_rate": [
          "self._calculate_real_cache_hit_rate"
        ],
        "_estimate_system_load": [
          "self._get_real_system_load"
        ],
        "_is_cache_valid": [
          "time.time"
        ],
        "_load_cached_capabilities": [
          "open",
          "logger.error",
          "json.load"
        ],
        "_cache_capabilities": [
          "open",
          "asdict",
          "logger.error",
          "json.dump"
        ],
        "get_capabilities_summary": [
          "self.discover_all_capabilities",
          "chr",
          "str",
          "len"
        ],
        "_analyze_project_structure": [
          "open",
          "struct_data.get",
          "len",
          "json.load",
          "str",
          "struct_file.exists",
          "self._get_enhanced_directory_structure",
          "self._analyze_unused_capabilities",
          "sum",
          "module.get",
          "self._discover_config_capabilities",
          "self._discover_context_scenarios"
        ],
        "_get_enhanced_directory_structure": [
          "get_directory_structure",
          "self._basic_directory_scan",
          "str"
        ],
        "_analyze_unused_capabilities": [
          "struct_data.get",
          "len",
          "self._is_ai_useful_command",
          "self._is_ai_useful_config",
          "self._is_ai_useful_utility",
          "min",
          "config_module.get",
          "cli_module.get",
          "f.startswith",
          "self._prioritize_integrations",
          "utils_module.get",
          "str",
          "modules.get"
        ],
        "_discover_config_capabilities": [
          "get_queue_config",
          "is_auto_update_enabled",
          "get_copilot_config",
          "get_context_config",
          "str"
        ],
        "_discover_context_scenarios": [
          "get_context_for_scenario",
          "str",
          "get_metrics_summary"
        ],
        "_is_ai_useful_command": [],
        "_is_ai_useful_config": [],
        "_is_ai_useful_utility": [],
        "_prioritize_integrations": [
          "priorities.append"
        ],
        "_basic_directory_scan": [
          "logger.error",
          "item.is_file",
          "item.is_dir",
          "str"
        ],
        "get_cursor_status_report": [
          "self.discover_all_capabilities",
          "self._get_context_status_emoji",
          "self._get_ai_integration_emoji",
          "self._load_cursor_config",
          "self._get_goal_alignment_status",
          "self._get_overall_health_emoji",
          "str"
        ],
        "optimize_context_for_cursor": [
          "open",
          "cursor_config.get",
          "context_rules.get",
          "json.load",
          "self._analyze_query_type",
          "logger.error",
          "self._load_cursor_config",
          "self._apply_privacy_filter",
          "optimal_config.get",
          "file_path.exists",
          "str"
        ],
        "get_goal_aligned_suggestions": [
          "self._load_personal_bridge",
          "personal_bridge.get",
          "logger.error",
          "suggestions.extend",
          "any",
          "technical_context.lower"
        ],
        "_calculate_real_cache_hit_rate": [
          "len",
          "list",
          "cache_dir.exists",
          "cache_file.stat",
          "logger.error",
          "cache_dir.glob",
          "time.time"
        ],
        "_get_real_system_load": [
          "logger.error",
          "min",
          "psutil.disk_usage",
          "psutil.cpu_percent",
          "str",
          "psutil.virtual_memory"
        ],
        "_load_cursor_config": [
          "open",
          "logger.error",
          "config_path.exists",
          "json.load"
        ],
        "_load_personal_bridge": [
          "open",
          "logger.error",
          "json.load",
          "bridge_path.exists"
        ],
        "_analyze_query_type": [
          "any",
          "query_analysis.get"
        ],
        "_apply_privacy_filter": [
          "self._filter_sensitive_dict",
          "context_data.items",
          "isinstance"
        ],
        "_filter_sensitive_dict": [
          "data.items",
          "self._filter_sensitive_dict",
          "isinstance",
          "any",
          "key.lower"
        ],
        "_get_overall_health_emoji": [],
        "_get_context_status_emoji": [
          "len"
        ],
        "_get_ai_integration_emoji": [
          "hasattr"
        ],
        "_get_goal_alignment_status": [
          "self._load_personal_bridge"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "asdict",
        "create_ai_cli_integration",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "get_ai_enhanced_cli_summary",
        "get_auto_update_config",
        "get_context_config",
        "get_context_for_scenario",
        "get_copilot_config",
        "get_directory_structure",
        "get_metrics_summary",
        "get_optimized_context",
        "get_queue_config",
        "initialize_copilot",
        "is_auto_update_enabled",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cache",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "logging",
        "os",
        "pathlib",
        "psutil",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "06eb708d-34e2-4f56-850b-03cf2c9cac9f"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": null,
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": null,
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "open",
          "logging.error",
          "str",
          "logging.info",
          "f.read",
          "Path",
          "json_file.exists",
          "hashlib.sha256",
          "content.encode",
          "json.dumps"
        ],
        "get_metadata": [
          "cursor.fetchone",
          "json.loads"
        ],
        "get_full_json": [
          "open",
          "cursor.fetchone",
          "logging.error",
          "json.load"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "30e0800b-fa3d-4c64-b700-5026c37fec36"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "prompt.lower",
          "item.get",
          "struct.get",
          "isinstance",
          "module.get",
          "any",
          "filter_json",
          "str"
        ],
        "attach_to_llm_request": [
          "logging.error",
          "logging.info",
          "prompt.lower",
          "filter_struct",
          "cache.cache_json",
          "Path",
          "select_json",
          "cache.get_metadata",
          "cache.get_full_json",
          "context_file.exists",
          "filter_json",
          "json.dumps"
        ]
      },
      "dependencies": [
        "Any",
        "JSONCache",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "491e72b4-1b5b-4a22-974e-986e91f85430"
    },
    {
      "module_id": "src.llmstruct.cursor_ai_bridge",
      "path": "src/llmstruct/cursor_ai_bridge.py",
      "category": "core",
      "module_doc": "Cursor AI Bridge - API Layer for AI Assistant Integration\nProvides CLI and HTTP endpoints so Cursor AI can use WorkflowOrchestrator",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for Cursor AI Bridge.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "ai_get_context",
          "docstring": "Get AI-optimized context for current development state.",
          "line_range": null,
          "parameters": [
            "self",
            "query_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "ai_analyze_task",
          "docstring": "Analyze a task and provide AI-optimized guidance.",
          "line_range": null,
          "parameters": [
            "self",
            "task_description"
          ],
          "decorators": []
        },
        {
          "name": "ai_create_task",
          "docstring": "Create a task through AI interface.",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "description",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "ai_get_onboarding_guide",
          "docstring": "Get comprehensive AI onboarding guide.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "ai_check_duplicates",
          "docstring": "Check for code duplicates with AI-friendly output.",
          "line_range": null,
          "parameters": [
            "self",
            "threshold"
          ],
          "decorators": []
        },
        {
          "name": "ai_suggest",
          "docstring": "Get AI suggestions based on context.",
          "line_range": null,
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_task_complexity",
          "docstring": "Estimate task complexity based on codebase analysis.",
          "line_range": null,
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_suggest_approach",
          "docstring": "Suggest approach based on task and codebase state.",
          "line_range": null,
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_find_relevant_modules",
          "docstring": "Find modules relevant to the task.",
          "line_range": null,
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_check_potential_duplicates",
          "docstring": "Check if task might create duplicates.",
          "line_range": null,
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_recommend_ai_for_task",
          "docstring": "Recommend which AI to use for the task.",
          "line_range": null,
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_generate_workflow_steps",
          "docstring": "Generate workflow steps for the task.",
          "line_range": null,
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_determine_context_requirements",
          "docstring": "Determine what context is needed for the task.",
          "line_range": null,
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on context.",
          "line_range": null,
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_available_ai_commands",
          "docstring": "Get available AI commands.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_identify_high_priority_duplicates",
          "docstring": "Identify high-priority duplicates for refactoring.",
          "line_range": null,
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_generate_refactoring_suggestions",
          "docstring": "Generate refactoring suggestions.",
          "line_range": null,
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_classify_task_type",
          "docstring": "Classify task type for AI delegation.",
          "line_range": null,
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_generate_next_steps",
          "docstring": "Generate next steps based on context.",
          "line_range": null,
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorAIBridge",
          "docstring": "Bridge that allows Cursor AI assistant to use WorkflowOrchestrator\nthrough CLI commands and structured JSON responses.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "ai_get_context",
              "docstring": "Get AI-optimized context for current development state.",
              "line_range": null,
              "parameters": [
                "self",
                "query_type",
                "file_path"
              ]
            },
            {
              "name": "ai_analyze_task",
              "docstring": "Analyze a task and provide AI-optimized guidance.",
              "line_range": null,
              "parameters": [
                "self",
                "task_description"
              ]
            },
            {
              "name": "ai_create_task",
              "docstring": "Create a task through AI interface.",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "description",
                "priority"
              ]
            },
            {
              "name": "ai_get_onboarding_guide",
              "docstring": "Get comprehensive AI onboarding guide.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "ai_check_duplicates",
              "docstring": "Check for code duplicates with AI-friendly output.",
              "line_range": null,
              "parameters": [
                "self",
                "threshold"
              ]
            },
            {
              "name": "ai_suggest",
              "docstring": "Get AI suggestions based on context.",
              "line_range": null,
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_estimate_task_complexity",
              "docstring": "Estimate task complexity based on codebase analysis.",
              "line_range": null,
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_suggest_approach",
              "docstring": "Suggest approach based on task and codebase state.",
              "line_range": null,
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_find_relevant_modules",
              "docstring": "Find modules relevant to the task.",
              "line_range": null,
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_check_potential_duplicates",
              "docstring": "Check if task might create duplicates.",
              "line_range": null,
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_recommend_ai_for_task",
              "docstring": "Recommend which AI to use for the task.",
              "line_range": null,
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_generate_workflow_steps",
              "docstring": "Generate workflow steps for the task.",
              "line_range": null,
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_determine_context_requirements",
              "docstring": "Determine what context is needed for the task.",
              "line_range": null,
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on context.",
              "line_range": null,
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_get_available_ai_commands",
              "docstring": "Get available AI commands.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_identify_high_priority_duplicates",
              "docstring": "Identify high-priority duplicates for refactoring.",
              "line_range": null,
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_generate_refactoring_suggestions",
              "docstring": "Generate refactoring suggestions.",
              "line_range": null,
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_classify_task_type",
              "docstring": "Classify task type for AI delegation.",
              "line_range": null,
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_generate_next_steps",
              "docstring": "Generate next steps based on context.",
              "line_range": null,
              "parameters": [
                "self",
                "context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "WorkflowOrchestrator",
          "CursorIntegrationManager",
          "Path",
          "str"
        ],
        "ai_get_context": [
          "len",
          "self._get_workflow_suggestions",
          "context.get",
          "datetime.utcnow",
          "cursor_context.get",
          "str",
          "self._get_available_ai_commands"
        ],
        "ai_analyze_task": [
          "self._check_potential_duplicates",
          "self._recommend_ai_for_task",
          "context.get",
          "self._generate_workflow_steps",
          "self._find_relevant_modules",
          "self._suggest_approach",
          "self._estimate_task_complexity",
          "self._determine_context_requirements",
          "str"
        ],
        "ai_create_task": [
          "self.ai_analyze_task",
          "datetime.utcnow",
          "str"
        ],
        "ai_get_onboarding_guide": [
          "str"
        ],
        "ai_check_duplicates": [
          "self._identify_high_priority_duplicates",
          "analysis.get",
          "self._generate_refactoring_suggestions",
          "str"
        ],
        "ai_suggest": [
          "self._get_workflow_suggestions",
          "self._generate_next_steps",
          "self._classify_task_type",
          "delegation.get",
          "str"
        ],
        "_estimate_task_complexity": [
          "task.lower",
          "complexity_keywords.items",
          "any"
        ],
        "_suggest_approach": [
          "task.lower",
          "approaches.append"
        ],
        "_find_relevant_modules": [
          "relevant.append",
          "struct_analysis.get",
          "task.lower",
          "module.get",
          "any"
        ],
        "_check_potential_duplicates": [],
        "_recommend_ai_for_task": [
          "task.lower",
          "any"
        ],
        "_generate_workflow_steps": [],
        "_determine_context_requirements": [
          "task.lower",
          "requirements.append"
        ],
        "_get_workflow_suggestions": [],
        "_get_available_ai_commands": [],
        "_identify_high_priority_duplicates": [],
        "_generate_refactoring_suggestions": [],
        "_classify_task_type": [
          "any",
          "context.lower"
        ],
        "_generate_next_steps": [],
        "main": [
          "CursorAIBridge",
          "argparse.ArgumentParser",
          "bridge.ai_suggest",
          "bridge.ai_check_duplicates",
          "bridge.ai_get_context",
          "bridge.ai_analyze_task",
          "json.dumps",
          "bridge.ai_onboarding_guide",
          "bridge.ai_create_task",
          "parser.parse_args",
          "parser.add_argument",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "CursorIntegrationManager",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "WorkflowOrchestrator",
        "ai_self_awareness",
        "argparse",
        "cursor_integration",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": null,
      "artifact_id": "7e68bbe7-72d9-49b2-b990-09fd3fe9d243"
    },
    {
      "module_id": "src.llmstruct.transpiler",
      "path": "src/llmstruct/transpiler.py",
      "category": "core",
      "module_doc": "AI-Powered Universal Transpiler\nConverts entire codebases from one language to another using LLM analysis",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for AI transpiler",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "analyze_source_project",
          "docstring": "Analyze source project structure",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "create_target_project_structure",
          "docstring": "Create target project directory structure",
          "line_range": null,
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_generate_structure_info",
          "docstring": "Generate structure information for README",
          "line_range": null,
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "transpile_module",
          "docstring": "Transpile a single module using AI",
          "line_range": null,
          "parameters": [
            "self",
            "module",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_format_functions",
          "docstring": "Format functions for prompt",
          "line_range": null,
          "parameters": [
            "self",
            "functions"
          ],
          "decorators": []
        },
        {
          "name": "_format_classes",
          "docstring": "Format classes for prompt",
          "line_range": null,
          "parameters": [
            "self",
            "classes"
          ],
          "decorators": []
        },
        {
          "name": "determine_target_path",
          "docstring": "Determine target file path for transpiled module",
          "line_range": null,
          "parameters": [
            "self",
            "module"
          ],
          "decorators": []
        },
        {
          "name": "transpile_project",
          "docstring": "Transpile entire project",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TranspilerConfig",
          "docstring": "Configuration for AI transpiler",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "LanguageTemplates",
          "docstring": "Templates and patterns for different target languages",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "AITranspiler",
          "docstring": "AI-powered code transpiler",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "analyze_source_project",
              "docstring": "Analyze source project structure",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "create_target_project_structure",
              "docstring": "Create target project directory structure",
              "line_range": null,
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_generate_structure_info",
              "docstring": "Generate structure information for README",
              "line_range": null,
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "transpile_module",
              "docstring": "Transpile a single module using AI",
              "line_range": null,
              "parameters": [
                "self",
                "module",
                "context"
              ]
            },
            {
              "name": "_format_functions",
              "docstring": "Format functions for prompt",
              "line_range": null,
              "parameters": [
                "self",
                "functions"
              ]
            },
            {
              "name": "_format_classes",
              "docstring": "Format classes for prompt",
              "line_range": null,
              "parameters": [
                "self",
                "classes"
              ]
            },
            {
              "name": "determine_target_path",
              "docstring": "Determine target file path for transpiled module",
              "line_range": null,
              "parameters": [
                "self",
                "module"
              ]
            },
            {
              "name": "transpile_project",
              "docstring": "Transpile entire project",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "UniversalConverter",
          "ConverterConfig",
          "LLMClient"
        ],
        "analyze_source_project": [
          "logger.info"
        ],
        "create_target_project_structure": [
          "shutil.rmtree",
          "logger.warning",
          "output_path.mkdir",
          "Path",
          "self._generate_structure_info",
          "output_path.exists",
          "src_dir.mkdir"
        ],
        "_generate_structure_info": [
          "len",
          "categories.items",
          "category.title",
          "module.get",
          "analysis.get",
          "stats.get"
        ],
        "transpile_module": [
          "len",
          "response.strip",
          "self._format_functions",
          "logger.error",
          "target_lang.upper",
          "ctx_module.get",
          "module.get",
          "target_lang.lower",
          "str",
          "self._format_classes"
        ],
        "_format_functions": [
          "len",
          "func.get"
        ],
        "_format_classes": [
          "len",
          "cls.get"
        ],
        "determine_target_path": [
          "len",
          "module.get",
          "Path",
          "module_id.split"
        ],
        "transpile_project": [
          "logger.info",
          "len",
          "report_path.write_text",
          "str",
          "self.create_target_project_structure",
          "logger.error",
          "self.analyze_source_project",
          "Path",
          "full_target_path.write_text",
          "range",
          "self.determine_target_path",
          "errors.append",
          "transpiled_files.append",
          "analysis.get",
          "self.transpile_module",
          "json.dumps"
        ],
        "main": [
          "transpiler.transpile_project",
          "len",
          "argparse.ArgumentParser",
          "Language",
          "logger.error",
          "TranspilerConfig",
          "traceback.print_exc",
          "AITranspiler",
          "exit",
          "parser.parse_args",
          "parser.add_argument",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "ConverterConfig",
        "Dict",
        "Enum",
        "LLMClient",
        "Language",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "UniversalConverter",
        "argparse",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "llm_client",
        "logging",
        "os",
        "parsers.universal_converter",
        "pathlib",
        "shutil",
        "traceback",
        "typing"
      ],
      "hash": null,
      "artifact_id": "056c0c75-8ccf-4590-82c4-5dcd05412d25"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": null,
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": null,
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "isinstance",
          "filtered.append",
          "data.get",
          "item.get"
        ],
        "select_json": [
          "open",
          "f.seek",
          "ijson.parse",
          "current_item.get",
          "logging.error",
          "json.load",
          "Path",
          "json_file.exists",
          "prefix.startswith",
          "filtered.append",
          "path.append",
          "filter_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "97487690-7241-40c0-973c-7f245d93f5f0"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.strip",
          "gitignore_path.exists",
          "gitignore_path.open",
          "logging.error",
          "Path",
          "line.startswith"
        ],
        "load_config": [
          "config_path.open",
          "logging.error",
          "toml.load",
          "Path",
          "config_path.exists"
        ],
        "read_file_content": [
          "logging.error",
          "f.read",
          "path.is_file",
          "Path",
          "path.open"
        ],
        "write_to_file": [
          "logging.error",
          "logging.warning",
          "logging.info",
          "file_path.open",
          "Path",
          "re.sub",
          "base_path.mkdir",
          "f.write",
          "file_path.exists",
          "str"
        ],
        "parse_files_from_response": [
          "content.strip",
          "filename.strip",
          "re.findall",
          "files.append"
        ],
        "interactive": [
          "interactive_modular",
          "interactive_legacy",
          "logging.warning"
        ],
        "interactive_modular": [
          "create_cli_core",
          "hasattr",
          "cli_core.run_interactive_mode",
          "logging.info"
        ],
        "interactive_legacy": [
          "attach_to_llm_request",
          "cache.close",
          "sorted",
          "m.group",
          "workflow.get",
          "os.listdir",
          "time.ctime",
          "isinstance",
          "re.match",
          "struct_data.get",
          "logging.warning",
          "subprocess.run",
          "Path",
          "load_gitignore",
          "cache.clear",
          "args_str.strip",
          "JSONCache",
          "cache.list_keys",
          "client.query",
          "os.makedirs",
          "print",
          "write_to_file",
          "open",
          "read_file_content",
          "len",
          "json.load",
          "parse",
          "cache.get_stats",
          "user_input.lower",
          "time.time",
          "json.dumps",
          "input",
          "int",
          "logging.error",
          "user_input.startswith",
          "process_cli_queue_enhanced",
          "os.stat",
          "json.dump",
          "LLMClient",
          "events_data.append",
          "get_folder_structure"
        ],
        "process_cli_queue_enhanced": [
          "open",
          "len",
          "write_to_file",
          "read_file_content",
          "json.load",
          "logging.info",
          "logging.error",
          "workflow.get",
          "attach_to_llm_request",
          "client.query",
          "load_gitignore",
          "enumerate",
          "item.get",
          "isinstance",
          "options.get",
          "get_folder_structure",
          "time.time",
          "print"
        ],
        "parse": [
          "logging.warning",
          "logging.info",
          "cache.cache_json",
          "cache.close",
          "logging.error",
          "Path",
          "load_config",
          "load_gitignore",
          "cli_config.get",
          "json.dump",
          "config.get",
          "parsing_config.get",
          "JSONCache",
          "generate_json"
        ],
        "query": [
          "hasattr",
          "logging.error",
          "logging.info",
          "create_context_orchestrator",
          "logging.warning",
          "client.query",
          "cache.close",
          "Path",
          "json.dump",
          "LLMClient",
          "orchestrator.get_context_for_scenario",
          "JSONCache",
          "client.query_with_context"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "copilot": [
          "manager.unload_context_layer",
          "getattr",
          "manager.validate_change",
          "f.write",
          "smart_suggest",
          "Path",
          "manager.close",
          "initialize_copilot",
          "shutil.copy",
          "config_path.exists",
          "print",
          "open",
          "layers.split",
          "hasattr",
          "manager.export_context",
          "enumerate",
          "logging.info",
          "logging.error",
          "manager.get_context_status",
          "manager.refresh_all_contexts",
          "manager.load_context_layer",
          "template_path.exists"
        ],
        "audit": [
          "hasattr",
          "analyze_duplicates",
          "Path",
          "file_path.exists",
          "print"
        ],
        "analyze_duplicates": [
          "len",
          "open",
          "hasattr",
          "sorted",
          "WorkflowOrchestrator",
          "traceback.print_exc",
          "duplication_data.get",
          "filtered_duplicates.items",
          "json.dump",
          "json.dumps",
          "enumerate",
          "rec.get",
          "getattr",
          "orchestrator.analyze_codebase_for_duplicates",
          "duplicates.items",
          "r.get",
          "analysis.get",
          "print"
        ],
        "main": [
          "interactive",
          "dogfood_parser.add_argument",
          "copilot_parser.add_argument",
          "audit",
          "query_parser.add_argument",
          "query",
          "parser.parse_args",
          "asyncio.run",
          "parser.add_subparsers",
          "analyze_duplicates",
          "dogfood",
          "context_parser.add_argument",
          "parse",
          "subparsers.add_parser",
          "review",
          "context",
          "parse_parser.add_argument",
          "duplicates_parser.add_argument",
          "argparse.ArgumentParser",
          "interactive_parser.add_argument",
          "review_parser.add_argument",
          "audit_parser.add_argument",
          "copilot"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "WorkflowOrchestrator",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "cli_core",
        "context_orchestrator",
        "copilot",
        "create_cli_core",
        "create_context_orchestrator",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "shutil",
        "smart_suggest",
        "subprocess",
        "sys",
        "time",
        "toml",
        "traceback",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": null,
      "artifact_id": "bfe709ee-10fa-48c7-9221-b06becfe197f"
    },
    {
      "module_id": "src.llmstruct.cursor_integration",
      "path": "src/llmstruct/cursor_integration.py",
      "category": "core",
      "module_doc": "Cursor IDE Integration Module\nProvides seamless integration between llmstruct AI capabilities and Cursor IDE.",
      "functions": [
        {
          "name": "create_cursor_integration",
          "docstring": "Create a Cursor integration manager for the project.",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_optimized_context",
          "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
          "line_range": null,
          "parameters": [
            "self",
            "query_type",
            "file_context"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": null,
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": null,
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "delegate_to_optimal_ai",
          "docstring": "Route tasks to best AI model based on preferences.",
          "line_range": null,
          "parameters": [
            "self",
            "task_type",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_delegation_confidence",
          "docstring": "Calculate confidence in AI delegation decision.",
          "line_range": null,
          "parameters": [
            "self",
            "task_type",
            "selected_ai"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals.",
          "line_range": null,
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "get_priority_guidance",
          "docstring": "Provide priority guidance based on business objectives.",
          "line_range": null,
          "parameters": [
            "self",
            "feature_options"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_feature_score",
          "docstring": "Calculate priority score for a feature.",
          "line_range": null,
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_get_scoring_reasoning",
          "docstring": "Get reasoning for feature scoring.",
          "line_range": null,
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "Start a new Cursor session.",
          "line_range": null,
          "parameters": [
            "self",
            "session_id",
            "user_preferences"
          ],
          "decorators": []
        },
        {
          "name": "save_session_context",
          "docstring": "Save important context for next session.",
          "line_range": null,
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load context from previous sessions.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_cursor_response",
          "docstring": "Get comprehensive response optimized for Cursor.",
          "line_range": null,
          "parameters": [
            "self",
            "query",
            "file_context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorSession",
          "docstring": "Represents a Cursor IDE session with context and preferences.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "CursorContextManager",
          "docstring": "Manages context optimization specifically for Cursor interactions.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_cursor_optimized_context",
              "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
              "line_range": null,
              "parameters": [
                "self",
                "query_type",
                "file_context"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": null,
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": null,
              "parameters": [
                "self",
                "data"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorMultiAIOrchestrator",
          "docstring": "Coordinates different AI models through Cursor interface.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "delegate_to_optimal_ai",
              "docstring": "Route tasks to best AI model based on preferences.",
              "line_range": null,
              "parameters": [
                "self",
                "task_type",
                "context"
              ]
            },
            {
              "name": "_calculate_delegation_confidence",
              "docstring": "Calculate confidence in AI delegation decision.",
              "line_range": null,
              "parameters": [
                "self",
                "task_type",
                "selected_ai"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "PersonalPlanningCursorBridge",
          "docstring": "Bridge between personal planning and Cursor without exposing sensitive data.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals.",
              "line_range": null,
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "get_priority_guidance",
              "docstring": "Provide priority guidance based on business objectives.",
              "line_range": null,
              "parameters": [
                "self",
                "feature_options"
              ]
            },
            {
              "name": "_calculate_feature_score",
              "docstring": "Calculate priority score for a feature.",
              "line_range": null,
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_get_scoring_reasoning",
              "docstring": "Get reasoning for feature scoring.",
              "line_range": null,
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorSessionManager",
          "docstring": "Maintains context across Cursor sessions for better continuity.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "start_session",
              "docstring": "Start a new Cursor session.",
              "line_range": null,
              "parameters": [
                "self",
                "session_id",
                "user_preferences"
              ]
            },
            {
              "name": "save_session_context",
              "docstring": "Save important context for next session.",
              "line_range": null,
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load context from previous sessions.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorIntegrationManager",
          "docstring": "Main integration manager that coordinates all Cursor-specific features.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_comprehensive_cursor_response",
              "docstring": "Get comprehensive response optimized for Cursor.",
              "line_range": null,
              "parameters": [
                "self",
                "query",
                "file_context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CursorMultiAIOrchestrator",
          "CursorSessionManager",
          "CursorContextManager",
          "SystemCapabilityDiscovery",
          "PersonalPlanningCursorBridge"
        ],
        "get_cursor_optimized_context": [
          "open",
          "context_rules.get",
          "json.load",
          "logger.error",
          "self._apply_privacy_filter",
          "optimal_config.get",
          "file_path.exists",
          "str"
        ],
        "_load_cursor_config": [
          "open",
          "json.load",
          "logger.error",
          "Path",
          "config_path.exists"
        ],
        "_apply_privacy_filter": [
          "self._filter_sensitive_dict",
          "context_data.items",
          "isinstance"
        ],
        "_filter_sensitive_dict": [
          "data.items",
          "self._filter_sensitive_dict",
          "isinstance",
          "any",
          "key.lower"
        ],
        "delegate_to_optimal_ai": [
          "logger.error",
          "Path",
          "self._calculate_delegation_confidence",
          "delegation_rules.get",
          "str"
        ],
        "_calculate_delegation_confidence": [
          "delegation_rules.get"
        ],
        "get_goal_aligned_suggestions": [
          "logger.error",
          "any",
          "technical_context.lower",
          "suggestions.extend"
        ],
        "get_priority_guidance": [
          "decision_guidance.get",
          "scored_features.append",
          "self._get_scoring_reasoning",
          "logger.error",
          "scored_features.sort",
          "self._calculate_feature_score",
          "str"
        ],
        "_calculate_feature_score": [
          "feature.lower",
          "any",
          "prioritization.get",
          "float"
        ],
        "_get_scoring_reasoning": [
          "feature.lower",
          "any",
          "reasons.append"
        ],
        "_load_personal_bridge": [
          "open",
          "logger.error",
          "json.load",
          "bridge_path.exists"
        ],
        "start_session": [
          "logger.error",
          "self._load_session_context",
          "CursorSession",
          "previous_context.get"
        ],
        "save_session_context": [
          "open",
          "logger.error",
          "session_data.get",
          "Path",
          "json.dump",
          "str"
        ],
        "_load_session_context": [
          "open",
          "logger.error",
          "json.load"
        ],
        "get_comprehensive_cursor_response": [
          "logger.error",
          "str"
        ],
        "create_cursor_integration": [
          "CursorIntegrationManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.context_orchestrator",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c569b0ce-34c4-4646-a50c-bc86b5ccb34c"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "module_doc": "Core CLI functionality and main loop.",
      "functions": [
        {
          "name": "create_cli_core",
          "docstring": "Factory function to create CLI core instance.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI core with root directory.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_cache",
          "docstring": "Initialize cache if enabled in config.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_copilot",
          "docstring": "Initialize Copilot integration if enabled.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive_mode",
          "docstring": "Run the interactive CLI mode.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "Clean up resources.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLICore",
          "docstring": "Core CLI class handling main loop and coordination.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI core with root directory.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "setup_cache",
              "docstring": "Initialize cache if enabled in config.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_copilot",
              "docstring": "Initialize Copilot integration if enabled.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_interactive_mode",
              "docstring": "Run the interactive CLI mode.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CommandProcessor",
          "CLIConfig",
          "CLIUtils"
        ],
        "setup_cache": [
          "logging.info",
          "logging.warning",
          "cache_config.get",
          "Path",
          "cache_path.mkdir",
          "JSONCache",
          "str"
        ],
        "setup_copilot": [
          "initialize_copilot",
          "logging.info",
          "copilot_config.get",
          "logging.warning"
        ],
        "run_interactive_mode": [
          "input",
          "logging.error",
          "user_input.startswith",
          "self.cleanup",
          "self.setup_cache",
          "self.setup_copilot",
          "user_input.lower",
          "print"
        ],
        "cleanup": [
          "logging.info"
        ],
        "create_cli_core": [
          "CLICore"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "JSONCache",
        "Optional",
        "Path",
        "cli_commands",
        "cli_config",
        "cli_utils",
        "copilot",
        "initialize_copilot",
        "llmstruct.cache",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "752638ce-bf58-4409-a5dc-944d04e03803"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "module_doc": "Workspace State & Mode Management System\nEnhanced AI-Human Collaboration with Context Boundaries",
      "functions": [
        {
          "name": "create_workspace_manager",
          "docstring": "Factory function to create workspace manager",
          "line_range": null,
          "parameters": [
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_or_create_state",
          "docstring": "Load existing workspace state or create default",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_permission_templates",
          "docstring": "Load permission templates for different modes",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "set_mode",
          "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
          "line_range": null,
          "parameters": [
            "self",
            "modes",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_parse_modes_from_string",
          "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
          "line_range": null,
          "parameters": [
            "self",
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "_combine_mode_permissions",
          "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
          "line_range": null,
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "_get_mode_combination_name",
          "docstring": "Get descriptive name for mode combination",
          "line_range": null,
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "get_current_state",
          "docstring": "Get current workspace state",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "check_permission",
          "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
          "line_range": null,
          "parameters": [
            "self",
            "operation",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "_get_required_capability",
          "docstring": "Map operations to required capabilities",
          "line_range": null,
          "parameters": [
            "self",
            "operation"
          ],
          "decorators": []
        },
        {
          "name": "_is_restricted_target",
          "docstring": "Check if target matches any file restrictions",
          "line_range": null,
          "parameters": [
            "self",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "set_emergency_override",
          "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
          "line_range": null,
          "parameters": [
            "self",
            "level",
            "reason",
            "duration_minutes"
          ],
          "decorators": []
        },
        {
          "name": "_check_emergency_override",
          "docstring": "Check if emergency override is active and not expired",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_strict_mode",
          "docstring": "Integration with existing strict mode system",
          "line_range": null,
          "parameters": [
            "self",
            "strict_tags"
          ],
          "decorators": []
        },
        {
          "name": "add_decision_workflow",
          "docstring": "Add decision to workflow tracking (for [decide] mode)",
          "line_range": null,
          "parameters": [
            "self",
            "decision_id",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "get_workspace_status",
          "docstring": "Get comprehensive workspace status for debugging and display",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_override_time_remaining",
          "docstring": "Get formatted time remaining for emergency override",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_state",
          "docstring": "Save current state to file",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_mode_status",
          "docstring": "Get formatted status string for CLI display",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WorkspaceStateManager",
          "docstring": "Core workspace state management with mode-based permissions and context boundaries.\n\nFeatures:\n- Multi-dimensional mode system ([code][debug], [discuss][meta])\n- Hybrid permission system (capabilities + file restrictions)\n- Smart mode combinations with context awareness\n- Emergency override protocols with time-boxing\n- Integration with existing strict mode system",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "workspace_dir"
              ]
            },
            {
              "name": "_load_or_create_state",
              "docstring": "Load existing workspace state or create default",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_permission_templates",
              "docstring": "Load permission templates for different modes",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "set_mode",
              "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
              "line_range": null,
              "parameters": [
                "self",
                "modes",
                "session_id"
              ]
            },
            {
              "name": "_parse_modes_from_string",
              "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
              "line_range": null,
              "parameters": [
                "self",
                "mode_string"
              ]
            },
            {
              "name": "_combine_mode_permissions",
              "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
              "line_range": null,
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "_get_mode_combination_name",
              "docstring": "Get descriptive name for mode combination",
              "line_range": null,
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "get_current_state",
              "docstring": "Get current workspace state",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "check_permission",
              "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
              "line_range": null,
              "parameters": [
                "self",
                "operation",
                "target"
              ]
            },
            {
              "name": "_get_required_capability",
              "docstring": "Map operations to required capabilities",
              "line_range": null,
              "parameters": [
                "self",
                "operation"
              ]
            },
            {
              "name": "_is_restricted_target",
              "docstring": "Check if target matches any file restrictions",
              "line_range": null,
              "parameters": [
                "self",
                "target"
              ]
            },
            {
              "name": "set_emergency_override",
              "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
              "line_range": null,
              "parameters": [
                "self",
                "level",
                "reason",
                "duration_minutes"
              ]
            },
            {
              "name": "_check_emergency_override",
              "docstring": "Check if emergency override is active and not expired",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_strict_mode",
              "docstring": "Integration with existing strict mode system",
              "line_range": null,
              "parameters": [
                "self",
                "strict_tags"
              ]
            },
            {
              "name": "add_decision_workflow",
              "docstring": "Add decision to workflow tracking (for [decide] mode)",
              "line_range": null,
              "parameters": [
                "self",
                "decision_id",
                "decision_data"
              ]
            },
            {
              "name": "get_workspace_status",
              "docstring": "Get comprehensive workspace status for debugging and display",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_override_time_remaining",
              "docstring": "Get formatted time remaining for emergency override",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_state",
              "docstring": "Save current state to file",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_mode_status",
              "docstring": "Get formatted status string for CLI display",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_or_create_state",
          "Path",
          "self._load_permission_templates"
        ],
        "_load_or_create_state": [
          "open",
          "datetime.now",
          "json.load",
          "self._save_state"
        ],
        "_load_permission_templates": [],
        "set_mode": [
          "len",
          "datetime.now",
          "combined_permissions.get",
          "self._combine_mode_permissions",
          "self._save_state",
          "self._get_mode_combination_name",
          "self._parse_modes_from_string",
          "isinstance"
        ],
        "_parse_modes_from_string": [
          "re.findall"
        ],
        "_combine_mode_permissions": [
          "logger.info",
          "set",
          "template.get",
          "list",
          "sorted"
        ],
        "_get_mode_combination_name": [
          "combination_names.get",
          "sorted"
        ],
        "get_current_state": [],
        "check_permission": [
          "self._check_emergency_override",
          "self._get_required_capability",
          "self._is_restricted_target",
          "permissions.get"
        ],
        "_get_required_capability": [
          "capability_map.items",
          "operation.startswith"
        ],
        "_is_restricted_target": [
          "target.startswith",
          "restriction.startswith",
          "fnmatch.fnmatch"
        ],
        "set_emergency_override": [
          "self._save_state",
          "timedelta",
          "datetime.now",
          "expires_at.isoformat"
        ],
        "_check_emergency_override": [
          "datetime.fromisoformat",
          "datetime.now",
          "self._save_state",
          "override.get"
        ],
        "integrate_strict_mode": [
          "datetime.now",
          "self._save_state"
        ],
        "add_decision_workflow": [
          "datetime.now",
          "self._save_state"
        ],
        "get_workspace_status": [
          "len",
          "override.get",
          "self._get_override_time_remaining",
          "self._get_mode_combination_name"
        ],
        "_get_override_time_remaining": [
          "remaining.total_seconds",
          "datetime.now",
          "int",
          "override.get",
          "datetime.fromisoformat"
        ],
        "_save_state": [
          "open",
          "json.dump"
        ],
        "get_mode_status": [
          "override.get",
          "self._get_mode_combination_name"
        ],
        "create_workspace_manager": [
          "WorkspaceStateManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "Union",
        "datetime",
        "fnmatch",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "timedelta",
        "timezone",
        "typing"
      ],
      "hash": null,
      "artifact_id": "58d2339e-345d-447d-9429-dcb24352d625"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "javascript_parser"
      ],
      "hash": null,
      "artifact_id": "d9dbaf84-febc-4cb8-af64-fa10ab2c993e"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "open",
          "f.read",
          "hashlib.sha256"
        ],
        "compute_file_metadata": [
          "open",
          "self.file_hash",
          "os.stat",
          "sum"
        ],
        "parse_module": [
          "open",
          "self.compute_file_metadata",
          "f.read",
          "esprima.parseModule",
          "str"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "0daa893c-53fb-4185-976e-21b5ad9598df"
    },
    {
      "module_id": "src.llmstruct.parsers.universal_converter",
      "path": "src/llmstruct/parsers/universal_converter.py",
      "category": "core",
      "module_doc": "Universal Code Converter - Orchestrates all language parsers\nConverts any codebase to llmstruct JSON format",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for universal converter",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "detect_language",
          "docstring": "Detect programming language from file extension",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "detect_project_languages",
          "docstring": "Detect all languages in project and count files",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "get_project_files",
          "docstring": "Get all relevant files for conversion",
          "line_range": null,
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_python_project",
          "docstring": "Convert Python project to llmstruct format",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_go_project",
          "docstring": "Convert Go project to llmstruct format",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_javascript_project",
          "docstring": "Convert JavaScript project to llmstruct format",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_project",
          "docstring": "Convert any project to llmstruct format",
          "line_range": null,
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_multi_language_project",
          "docstring": "Convert multi-language project with separate sections per language",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_build_project_structure",
          "docstring": "Build standard llmstruct project structure",
          "line_range": null,
          "parameters": [
            "self",
            "language",
            "project_path",
            "modules",
            "toc"
          ],
          "decorators": []
        },
        {
          "name": "_build_empty_project_structure",
          "docstring": "Build empty structure when conversion fails",
          "line_range": null,
          "parameters": [
            "self",
            "language",
            "project_path",
            "error"
          ],
          "decorators": []
        },
        {
          "name": "_merge_language_results",
          "docstring": "Merge multiple language results into unified structure",
          "line_range": null,
          "parameters": [
            "self",
            "project_path",
            "language_results"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Language",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ConverterConfig",
          "docstring": "Configuration for universal converter",
          "line_range": null,
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "UniversalConverter",
          "docstring": "Universal code converter for any programming language",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "detect_language",
              "docstring": "Detect programming language from file extension",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "detect_project_languages",
              "docstring": "Detect all languages in project and count files",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "get_project_files",
              "docstring": "Get all relevant files for conversion",
              "line_range": null,
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_python_project",
              "docstring": "Convert Python project to llmstruct format",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_go_project",
              "docstring": "Convert Go project to llmstruct format",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_javascript_project",
              "docstring": "Convert JavaScript project to llmstruct format",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_project",
              "docstring": "Convert any project to llmstruct format",
              "line_range": null,
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_multi_language_project",
              "docstring": "Convert multi-language project with separate sections per language",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_build_project_structure",
              "docstring": "Build standard llmstruct project structure",
              "line_range": null,
              "parameters": [
                "self",
                "language",
                "project_path",
                "modules",
                "toc"
              ]
            },
            {
              "name": "_build_empty_project_structure",
              "docstring": "Build empty structure when conversion fails",
              "line_range": null,
              "parameters": [
                "self",
                "language",
                "project_path",
                "error"
              ]
            },
            {
              "name": "_merge_language_results",
              "docstring": "Merge multiple language results into unified structure",
              "line_range": null,
              "parameters": [
                "self",
                "project_path",
                "language_results"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "JavaScriptParser",
          "ConverterConfig",
          "GoAnalyzer"
        ],
        "detect_language": [
          "Path"
        ],
        "detect_project_languages": [
          "languages.get",
          "any",
          "self.detect_language",
          "os.walk"
        ],
        "get_project_files": [
          "files.append",
          "any",
          "self.detect_language",
          "os.walk"
        ],
        "convert_python_project": [
          "logger.info",
          "analyze_python",
          "self.get_project_files",
          "len",
          "module_data.get",
          "self._build_project_structure",
          "logger.warning",
          "modules.append",
          "toc.append"
        ],
        "convert_go_project": [
          "logger.info",
          "self._build_empty_project_structure",
          "logger.error",
          "convert_to_llmstruct_format",
          "str"
        ],
        "convert_javascript_project": [
          "logger.info",
          "self.get_project_files",
          "module_data.get",
          "len",
          "self._build_project_structure",
          "logger.warning",
          "modules.append",
          "toc.append"
        ],
        "convert_project": [
          "languages.keys",
          "logger.info",
          "NotImplementedError",
          "self.convert_go_project",
          "max",
          "self.detect_project_languages",
          "ValueError",
          "self.convert_javascript_project",
          "self.convert_python_project"
        ],
        "convert_multi_language_project": [
          "logger.info",
          "languages.keys",
          "logger.error",
          "self.convert_go_project",
          "logger.warning",
          "self.detect_project_languages",
          "self._merge_language_results",
          "ValueError",
          "self.convert_javascript_project",
          "self.convert_python_project"
        ],
        "_build_project_structure": [
          "len",
          "language.title",
          "m.get",
          "sum"
        ],
        "_build_empty_project_structure": [],
        "_merge_language_results": [
          "all_modules.append",
          "list",
          "language_results.keys",
          "result.get",
          "all_toc.append",
          "language_results.items",
          "stats.get"
        ],
        "main": [
          "open",
          "print",
          "argparse.ArgumentParser",
          "ConverterConfig",
          "Language",
          "logger.error",
          "converter.convert_multi_language_project",
          "converter.convert_project",
          "traceback.print_exc",
          "result.get",
          "UniversalConverter",
          "stats.get",
          "f.write",
          "exit",
          "parser.parse_args",
          "parser.add_argument",
          "json.dumps"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "GoAnalyzer",
        "JavaScriptParser",
        "List",
        "Optional",
        "Path",
        "Union",
        "analyze_module",
        "argparse",
        "convert_to_llmstruct_format",
        "dataclass",
        "dataclasses",
        "enum",
        "go_analyzer",
        "javascript_parser",
        "json",
        "logging",
        "os",
        "pathlib",
        "python_parser",
        "sys",
        "traceback",
        "typing"
      ],
      "hash": null,
      "artifact_id": "44d930f4-86f0-49d3-91fd-a0a78fe1ce4b"
    },
    {
      "module_id": "src.llmstruct.parsers.go_analyzer",
      "path": "src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "module_doc": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b: go/packages, go/analysis",
      "functions": [
        {
          "name": "convert_to_llmstruct_format",
          "docstring": "\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 llmstruct",
          "line_range": null,
          "parameters": [
            "analysis",
            "include_ranges",
            "goals"
          ],
          "decorators": []
        },
        {
          "name": "_compute_file_hash",
          "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 SHA-256 \u0445\u044d\u0448 \u0444\u0430\u0439\u043b\u0430",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_setup_analyzer",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cleanup",
          "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_project",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_fallback_analysis",
          "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GoAnalyzer",
          "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 Go \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_setup_analyzer",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cleanup",
              "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_project",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_fallback_analysis",
              "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "_setup_analyzer": [
          "analyzer_source.read_text",
          "logging.warning",
          "subprocess.run",
          "Path",
          "tempfile.mkdtemp",
          "str",
          "analyzer_file.write_text"
        ],
        "_cleanup": [
          "shutil.rmtree",
          "Path"
        ],
        "analyze_project": [
          "logging.error",
          "logging.info",
          "logging.warning",
          "json.loads",
          "self._cleanup",
          "subprocess.run",
          "self._setup_analyzer",
          "self._fallback_analysis"
        ],
        "_fallback_analysis": [
          "set",
          "content.split",
          "line.strip",
          "line.split",
          "list",
          "logging.info",
          "len",
          "packages.add",
          "logging.warning",
          "sorted",
          "go_mod_path.exists",
          "Path",
          "line.startswith",
          "file_path.read_text",
          "file_path.relative_to",
          "go_mod_path.read_text",
          "str"
        ],
        "convert_to_llmstruct_format": [
          "len",
          "classes.append",
          "analysis.get",
          "uuid.uuid4",
          "file_data.get",
          "_compute_file_hash",
          "iface.get",
          "path.replace",
          "modules.append",
          "fn.get",
          "path.endswith",
          "sum",
          "struct.get",
          "module.get",
          "toc.append",
          "functions.append",
          "str"
        ],
        "_compute_file_hash": [
          "open",
          "f.read",
          "hashlib.sha256"
        ],
        "main": [
          "open",
          "len",
          "argparse.ArgumentParser",
          "GoAnalyzer",
          "traceback.print_exc",
          "Path",
          "convert_to_llmstruct_format",
          "result.get",
          "sys.exit",
          "analyzer.analyze_project",
          "json.dumps",
          "stats.get",
          "f.write",
          "parser.parse_args",
          "parser.add_argument",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "subprocess",
        "sys",
        "tempfile",
        "traceback",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "0f880be7-59a3-4bc7-9971-ec27038aa49c"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data.",
          "line_range": null,
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_AsyncFunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "compute_file_hash": [
          "open",
          "logging.error",
          "f.read",
          "hashlib.sha256"
        ],
        "analyze_module": [
          "open",
          "ast.walk",
          "CallVisitor",
          "classes.append",
          "list",
          "logging.error",
          "sorted",
          "f.read",
          "visitor.visit",
          "Path",
          "ast.parse",
          "ast.unparse",
          "compute_file_hash",
          "ast.get_docstring",
          "infer_category",
          "isinstance",
          "functions.append",
          "str"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "6f47826d-f6ea-4a2d-a47f-b9df8d54ef0a"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "9bcc492e-955c-46fa-aa25-0147c949dbc5"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "f6089e31-3946-4762-aa93-36774590209f"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": null,
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": null,
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "open",
          "validate",
          "json.load",
          "logging.error",
          "logging.info",
          "schema_file.exists",
          "Path",
          "json_file.exists",
          "str"
        ],
        "validate_directory": [
          "validate_struct_json",
          "Path",
          "json_file.match",
          "any",
          "str"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "15c356fc-a8c2-429e-9515-24b371f3f66a"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "set",
          "uuid.uuid4",
          "file_path.match",
          "sorted",
          "p.rstrip",
          "Path",
          "p.endswith",
          "os.walk",
          "file_path.relative_to",
          "structure.append",
          "any",
          "str"
        ],
        "build_toc_and_modules": [
          "set",
          "len",
          "uuid.uuid4",
          "p.rstrip",
          "Path",
          "modules.append",
          "p.endswith",
          "f.match",
          "analyze_module",
          "toc.append",
          "any",
          "str"
        ],
        "generate_json": [
          "set",
          "len",
          "uuid.uuid4",
          "list",
          "get_folder_structure",
          "Path",
          "sum",
          "build_toc_and_modules",
          "str"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "86a97c76-5af0-408b-9c42-4461538e17e7"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "e3f1a4d3-639d-4f6b-b039-0921c74298b2"
    },
    {
      "module_id": "src.llmstruct.generators.go_json_generator",
      "path": "src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_go_folder_structure",
          "docstring": "Capture directory and file structure for Go projects with artifact_id, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_go_toc_and_modules",
          "docstring": "Build TOC and modules for Go projects with artifact_id and robust filtering.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "extract_go_mod_info",
          "docstring": "Extract information from go.mod file.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "generate_go_json",
          "docstring": "Generate JSON structure for Go project with artifact_id, summary, and tags.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_go_folder_structure": [
          "set",
          "uuid.uuid4",
          "file_path.match",
          "sorted",
          "p.rstrip",
          "Path",
          "p.endswith",
          "os.walk",
          "file_path.relative_to",
          "structure.append",
          "any",
          "str"
        ],
        "build_go_toc_and_modules": [
          "set",
          "len",
          "uuid.uuid4",
          "p.rstrip",
          "Path",
          "modules.append",
          "p.endswith",
          "f.match",
          "analyze_module",
          "module.get",
          "toc.append",
          "any",
          "str"
        ],
        "extract_go_mod_info": [
          "open",
          "len",
          "line.strip",
          "line.split",
          "logging.error",
          "dependencies.append",
          "f.read",
          "go_mod_path.exists",
          "Path",
          "line.startswith",
          "content.strip"
        ],
        "generate_go_json": [
          "extract_go_mod_info",
          "len",
          "set",
          "uuid.uuid4",
          "build_go_toc_and_modules",
          "list",
          "get_go_folder_structure",
          "Path",
          "m.get",
          "go_mod_info.get",
          "sum",
          "str"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.go_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "ca63e6af-0b99-43be-b526-5127acc7fcb4"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_self_run",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "prompt.lower",
          "struct.get",
          "filter_json",
          "module.get",
          "any"
        ],
        "attach_to_llm_request": [
          "logging.error",
          "logging.info",
          "prompt.lower",
          "filter_struct",
          "cache.cache_json",
          "Path",
          "select_json",
          "cache.get_metadata",
          "cache.get_full_json",
          "context_file.exists",
          "filter_json",
          "json.dumps"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d4e74055-e8a9-4806-9b88-2685d910bd1d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "fnmatch.fnmatch",
          "filtered.append",
          "pattern.startswith"
        ],
        "collect_files": [
          "str",
          "apply_filters",
          "path.is_file",
          "path.relative_to",
          "files.append",
          "root_dir.rglob"
        ],
        "generate_struct": [
          "existing.get",
          "len",
          "uuid.uuid4",
          "collect_files",
          "json.load",
          "logger.info",
          "output_path.open",
          "Path",
          "json.dump",
          "output_path.exists",
          "str"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "11406f67-689a-4bec-808e-639d1edd57b8"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "validate",
          "logger.warning"
        ],
        "backup_files": [
          "shutil.copytree",
          "target_dir.exists",
          "datetime.now",
          "logger.info"
        ],
        "deploy_embedded_files": [
          "logger.info",
          "backup_files",
          "target_path.exists",
          "logger.error",
          "validate_json",
          "Path",
          "EMBEDDED_FILES.get",
          "json.dump",
          "target_path.open",
          "EMBEDDED_FILES.items",
          "f.write"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "08690024-669a-427a-a12c-f39a05ebcbcb"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_json_selector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": null,
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": null,
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "isinstance",
          "filtered.append",
          "data.get",
          "item.get"
        ],
        "select_json": [
          "open",
          "f.seek",
          "ijson.parse",
          "current_item.get",
          "logging.error",
          "json.load",
          "Path",
          "json_file.exists",
          "prefix.startswith",
          "filtered.append",
          "path.append",
          "filter_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "379d54f5-3416-43bf-9484-64e55e86d5bc"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "generate_project_json",
          "docstring": "Generate project JSON with schema validation.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "generate_project_json": [
          "open",
          "uuid.uuid4",
          "validate",
          "json.load",
          "logging.info",
          "cli_path.open",
          "Path",
          "cli_path.exists",
          "json.dump",
          "str"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "validate"
      ],
      "hash": null,
      "artifact_id": "0d0a07a6-5347-4102-b0a1-c48c35354f74"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "logger.info",
          "json.load",
          "broken_links.append",
          "logger.error",
          "logger.warning",
          "Path",
          "target_file.exists",
          "enumerate",
          "json.dump",
          "source_file.exists",
          "idea.get"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "70f1fbda-2590-4cc1-8b37-473a0d01b89d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": null,
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": null,
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "open",
          "logging.error",
          "str",
          "logging.info",
          "f.read",
          "Path",
          "json_file.exists",
          "hashlib.sha256",
          "content.encode",
          "json.dumps"
        ],
        "get_metadata": [
          "cursor.fetchone",
          "json.loads"
        ],
        "get_full_json": [
          "open",
          "cursor.fetchone",
          "logging.error",
          "json.load"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "6c11fc67-275a-4aec-83ce-354ff33ac1b2"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli_parser",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "parse_argparse",
          "docstring": "Parse argparse setup in cli.py to extract commands and arguments.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "generate_cli_json",
          "docstring": "Generate cli.json from cli.py.",
          "line_range": null,
          "parameters": [
            "cli_path",
            "output_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_argparse": [
          "open",
          "ast.walk",
          "cmd_args.append",
          "f.read",
          "next",
          "ast.parse",
          "arg_name.lstrip",
          "any",
          "commands.append",
          "isinstance",
          "arg_name.startswith"
        ],
        "generate_cli_json": [
          "open",
          "uuid.uuid4",
          "validate",
          "json.load",
          "parse_argparse",
          "json.dump",
          "str"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "ast",
        "json",
        "jsonschema",
        "pathlib",
        "typing",
        "uuid",
        "validate"
      ],
      "hash": null,
      "artifact_id": "30641867-9a92-4db8-82fe-6f6290564701"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "fnmatch.fnmatch",
          "filtered.append",
          "pattern.startswith"
        ],
        "collect_files": [
          "str",
          "apply_filters",
          "path.is_file",
          "path.relative_to",
          "files.append",
          "root_dir.rglob"
        ],
        "generate_struct": [
          "existing.get",
          "len",
          "uuid.uuid4",
          "collect_files",
          "json.load",
          "logger.info",
          "output_path.open",
          "Path",
          "json.dump",
          "output_path.exists",
          "str"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "73db327c-9040-4d21-8f49-06884da35a8d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "cache_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "load_cache",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_cache",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_cache",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "task_id",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_context",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        },
        {
          "name": "clear_cache",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ChatCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "cache_path",
                "max_size"
              ]
            },
            {
              "name": "load_cache",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_cache",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_cache",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "task_id",
                "message"
              ]
            },
            {
              "name": "get_context",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "task_id"
              ]
            },
            {
              "name": "clear_cache",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "task_id"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.load_cache"
        ],
        "load_cache": [
          "open",
          "json.load"
        ],
        "save_cache": [
          "open",
          "json.dump"
        ],
        "update_cache": [
          "len",
          "datetime.utcnow",
          "self.save_cache"
        ],
        "get_context": [],
        "clear_cache": [
          "self.save_cache"
        ],
        "main": [
          "ChatCache",
          "cache.update_cache",
          "json.dumps",
          "cache.get_context",
          "print"
        ]
      },
      "dependencies": [
        "datetime",
        "json",
        "os"
      ],
      "hash": null,
      "artifact_id": "7550481c-7091-4c7b-ace4-d7a4ab4dda94"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "logger.info",
          "json.load",
          "broken_links.append",
          "logger.error",
          "logger.warning",
          "Path",
          "target_file.exists",
          "enumerate",
          "json.dump",
          "source_file.exists",
          "idea.get"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "cf9ca86c-1ad6-4d65-bf19-88a021662ed5"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_cli_json",
          "docstring": "Load cli.json for command metadata.",
          "line_range": null,
          "parameters": [
            "cli_json_path"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, using cli.json for command metadata.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_cli_json": [
          "Path",
          "cli_json_path.open",
          "cli_json_path.exists",
          "json.load"
        ],
        "interactive": [
          "attach_to_llm_request",
          "cache.close",
          "load_cli_json",
          "prompt.lower",
          "cmd.get",
          "cli_json.get",
          "logging.warning",
          "t.format",
          "Path",
          "client.query",
          "JSONCache",
          "any",
          "print",
          "write_to_file",
          "parse",
          "user_input.lower",
          "input",
          "logging.error",
          "parse_files_from_response",
          "LLMClient"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "b471dce4-087c-4991-888b-241c6ee1eb82"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "validate",
          "logger.warning"
        ],
        "backup_files": [
          "shutil.copytree",
          "target_dir.exists",
          "datetime.now",
          "logger.info"
        ],
        "deploy_embedded_files": [
          "logger.info",
          "backup_files",
          "target_path.exists",
          "logger.error",
          "validate_json",
          "Path",
          "EMBEDDED_FILES.get",
          "json.dump",
          "target_path.open",
          "EMBEDDED_FILES.items",
          "f.write"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "48ad843f-72ee-42b7-ae39-49f348e99e89"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.strip",
          "gitignore_path.exists",
          "gitignore_path.open",
          "logging.error",
          "Path",
          "line.startswith"
        ],
        "load_config": [
          "config_path\u30aa\u30fc\u30d7\u30f3",
          "logging.error",
          "toml.load",
          "Path",
          "config_path.exists"
        ],
        "read_file_content": [
          "logging.error",
          "f.read",
          "path.is_file",
          "Path",
          "path.open"
        ],
        "write_to_file": [
          "logging.warning",
          "logging.info",
          "logging.error",
          "file_path.open",
          "Path",
          "base_path.mkdir",
          "f.write",
          "file_path.exists",
          "str"
        ],
        "parse_files_from_response": [
          "content.strip",
          "filename.strip",
          "re.findall",
          "files.append"
        ],
        "interactive": [
          "attach_to_llm_request",
          "cache.close",
          "sorted",
          "os.listdir",
          "write_match.group",
          "logging.warning",
          "Path",
          "load_gitignore",
          "write_dir.startswith",
          "scan_match.group",
          "files_to_write.append",
          "JSONCache",
          "client.query",
          "print",
          "write_to_file",
          "read_file_content",
          "parse",
          "user_input.lower",
          "json.dumps",
          "input",
          "logging.error",
          "parse_files_from_response",
          "re.search",
          "LLMClient",
          "get_folder_structure"
        ],
        "parse": [
          "logging.warning",
          "logging.info",
          "cache.cache_json",
          "cache.close",
          "logging.error",
          "Path",
          "load_gitignore",
          "load_config",
          "json.dump",
          "config.get",
          "JSONCache",
          "generate_json"
        ],
        "query": [
          "logging.error",
          "logging.info",
          "client.query",
          "cache.close",
          "Path",
          "json.dump",
          "LLMClient",
          "JSONCache"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "parse_parser.add_argument",
          "parser.add_subparsers",
          "dogfood_parser.add_argument",
          "argparse.ArgumentParser",
          "interactive_parser.add_argument",
          "interactive",
          "review_parser.add_argument",
          "dogfood",
          "query_parser.add_argument",
          "context_parser.add_argument",
          "parse",
          "query",
          "subparsers.add_parser",
          "review",
          "parser.parse_args",
          "asyncio.run",
          "context"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "4d180427-e046-4ebd-8b78-f69781833952"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.extract_artifacts",
      "path": "temp_workfiles/unsorted_mess/22.05.25/extract_artifacts.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "parse_args",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_artifacts_index",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "index_path"
          ],
          "decorators": []
        },
        {
          "name": "save_artifacts_index",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "index",
            "index_path"
          ],
          "decorators": []
        },
        {
          "name": "calculate_sha256",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "content"
          ],
          "decorators": []
        },
        {
          "name": "extract_artifacts",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "html_file",
            "output_dir",
            "index_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_args": [
          "parser.parse_args",
          "argparse.ArgumentParser",
          "parser.add_argument"
        ],
        "load_artifacts_index": [
          "open",
          "json.load"
        ],
        "save_artifacts_index": [
          "open",
          "json.dump"
        ],
        "calculate_sha256": [
          "content.encode",
          "hashlib.sha256"
        ],
        "extract_artifacts": [
          "open",
          "content_type.split",
          "extracted.append",
          "save_artifacts_index",
          "soup.find_all",
          "BeautifulSoup",
          "f.read",
          "load_artifacts_index",
          "artifact.get",
          "datetime.utcnow",
          "title.endswith",
          "f.write",
          "calculate_sha256",
          "os.makedirs",
          "print"
        ],
        "main": [
          "print",
          "parse_args",
          "extract_artifacts"
        ]
      },
      "dependencies": [
        "BeautifulSoup",
        "argparse",
        "bs4",
        "datetime",
        "hashlib",
        "json",
        "os",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "c667a77c-2615-450b-acc9-ac301a70b698"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.dumper",
      "path": "temp_workfiles/unsorted_mess/dump/dumper.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "json_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "obj"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "json_hash": [
          "dumped.encode",
          "hashlib.md5",
          "json.dumps"
        ]
      },
      "dependencies": [
        "glob",
        "hashlib",
        "json",
        "os"
      ],
      "hash": null,
      "artifact_id": "02914777-75d9-4b55-9e7c-7a236bb46cfb"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators___init__.py",
      "category": "core",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JSONGenerator",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "351e4bef-7720-4a3c-86d7-ecfaadcffd0d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_utils",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": null,
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "8f522b15-ea46-40b8-b3fd-b85ca34183c4"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ideas_tree",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ideas_tree.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "987f5f73-6c08-496a-b0be-05d3ca757ea2"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__.py",
      "category": "core",
      "module_doc": "LLMStruct: A tool for generating JSON-based code structures for LLM integration.\n\nThis package provides modular parsers, generators, and validators to create and validate\nJSON representations of code projects, supporting automation and context-aware LLM assistance.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "1c50bf3a-625b-4ff9-b070-590b59414e5c"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.grok",
      "path": "temp_workfiles/unsorted_mess/dump/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "len",
          "prompt.split",
          "response.raise_for_status",
          "response.json"
        ],
        "test_grok": [
          "GrokClient",
          "client.generate",
          "time.perf_counter"
        ]
      },
      "dependencies": [
        "os",
        "requests"
      ],
      "hash": null,
      "artifact_id": "a2716889-c1d8-485c-bc50-1503096b93c7"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___main__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___main__.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "4e92ff9d-7368-44e0-8758-9f365601d514"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "206b4fef-76c8-4f98-abd8-d50075b01726"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "set",
          "uuid.uuid4",
          "file_path.match",
          "sorted",
          "p.rstrip",
          "Path",
          "p.endswith",
          "os.walk",
          "file_path.relative_to",
          "structure.append",
          "any",
          "str"
        ],
        "build_toc_and_modules": [
          "set",
          "len",
          "uuid.uuid4",
          "p.rstrip",
          "Path",
          "modules.append",
          "p.endswith",
          "f.match",
          "analyze_module",
          "toc.append",
          "any",
          "str"
        ],
        "generate_json": [
          "set",
          "len",
          "uuid.uuid4",
          "list",
          "get_folder_structure",
          "Path",
          "sum",
          "build_toc_and_modules",
          "str"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "5032a974-bae8-40bb-9bbf-0f16f48237aa"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_engines",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_engines.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "call_llm",
          "docstring": "Call the specified LLM backend with the given prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_ollama",
          "docstring": "Call Ollama with the specified prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_openai",
          "docstring": "Call OpenAI API with the specified prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_anthropic",
          "docstring": "Call Anthropic API with the specified prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_grok",
          "docstring": "Call xAI Grok API with the specified prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "call_llm": [
          "RuntimeError",
          "call_grok",
          "ValueError",
          "call_openai",
          "call_anthropic",
          "call_ollama",
          "str"
        ],
        "call_ollama": [
          "subprocess.run"
        ],
        "call_openai": [
          "os.getenv",
          "openai.OpenAI",
          "ValueError"
        ],
        "call_anthropic": [
          "anthropic.Anthropic",
          "os.getenv",
          "ValueError"
        ],
        "call_grok": [
          "response.raise_for_status",
          "requests.post",
          "response.json",
          "ValueError",
          "os.getenv"
        ]
      },
      "dependencies": [
        "LLM_BACKEND",
        "MODEL_NAME",
        "anthropic",
        "json",
        "llm_client.config",
        "openai",
        "os",
        "requests",
        "subprocess"
      ],
      "hash": null,
      "artifact_id": "83aa32b2-8cfc-400c-935c-1a74da961055"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_config",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_config.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "os"
      ],
      "hash": null,
      "artifact_id": "99ba2e7b-3fc1-4ca7-af92-3f49f038c13f"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "file_hash",
          "docstring": "Compute SHA-256 hash of file contents.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "extract_comments",
          "docstring": "Extract single-line and multi-line comments using tokenize.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "Compute file size, last modified time, line count, and optional hash.",
          "line_range": null,
          "parameters": [
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path and dependencies.",
          "line_range": null,
          "parameters": [
            "path",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_signature",
          "docstring": "Generate function signature.",
          "line_range": null,
          "parameters": [
            "func_node"
          ],
          "decorators": []
        },
        {
          "name": "extract_dependencies",
          "docstring": "Extract module-level imports.",
          "line_range": null,
          "parameters": [
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module in a single pass.",
          "line_range": null,
          "parameters": [
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "Extract function calls and module dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "file_hash": [
          "open",
          "logging.error",
          "f.read",
          "hashlib.sha256"
        ],
        "extract_comments": [
          "open",
          "comments.append",
          "tokenize.tokenize",
          "logging.error"
        ],
        "compute_file_metadata": [
          "open",
          "logging.error",
          "os.stat",
          "sum",
          "file_hash"
        ],
        "infer_category": [
          "any",
          "path.lower"
        ],
        "get_signature": [],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "extract_dependencies": [
          "set",
          "ast.walk",
          "sorted",
          "dependencies.update",
          "dependencies.add",
          "isinstance"
        ],
        "analyze_module": [
          "classes.append",
          "sorted",
          "extract_dependencies",
          "getattr",
          "isinstance",
          "methods.append",
          "CallVisitor",
          "ast.parse",
          "open",
          "source.splitlines",
          "get_signature",
          "ast.get_docstring",
          "str",
          "logging.error",
          "f.read",
          "visitor.visit",
          "compute_file_metadata",
          "extract_comments",
          "infer_category",
          "hashlib.sha256",
          "functions.append"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "tokenize",
        "typing"
      ],
      "hash": null,
      "artifact_id": "effee8d4-d956-4c81-8ec3-8a5a28613076"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with robust .gitignore filtering using pathlib.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "exclude_patterns.extend",
          "fnmatch.fnmatch",
          "dir_path.relative_to",
          "sorted",
          "Path",
          "logging.debug",
          "rel_dir.split",
          "dirnames.clear",
          "os.walk",
          "file_path.relative_to",
          "structure.append",
          "any",
          "str"
        ],
        "build_toc_and_modules": [
          "exclude_patterns.extend",
          "len",
          "fnmatch.fnmatch",
          "dir_path.relative_to",
          "logging.info",
          "sum",
          "Path",
          "logging.debug",
          "rel_dir.split",
          "modules.append",
          "os.walk",
          "file_path.relative_to",
          "toc.append",
          "any",
          "analyze_module",
          "str"
        ],
        "generate_json": [
          "get_folder_structure",
          "build_toc_and_modules",
          "len"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Tuple",
        "analyze_module",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "47c973af-b2aa-4450-b281-87537903944a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct.py",
      "category": "core",
      "module_doc": "Generate JSON for workspace based on user instructions template.\n\nCreates structure:\n- metadata with description, instructions, and version\n- toc with module summaries and categories\n- modules with detailed function/class info, comments, call graphs, and categories",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore, logging loaded patterns.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_goals",
          "docstring": "Load goals from semicolon-separated string, file, or interactive editor.",
          "line_range": null,
          "parameters": [
            "goals_input"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "Compute SHA-256 hash of file contents.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "extract_comments",
          "docstring": "Extract single-line and multi-line comments using tokenize.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "Compute file size, last modified time, line count, and optional hash.",
          "line_range": null,
          "parameters": [
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path and dependencies.",
          "line_range": null,
          "parameters": [
            "path",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_signature",
          "docstring": "Generate function signature.",
          "line_range": null,
          "parameters": [
            "func_node"
          ],
          "decorators": []
        },
        {
          "name": "extract_dependencies",
          "docstring": "Extract module-level imports.",
          "line_range": null,
          "parameters": [
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module in a single pass.",
          "line_range": null,
          "parameters": [
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with robust .gitignore filtering using pathlib.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes",
            "goals_input"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "Extract function calls and module dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "load_gitignore": [
          "open",
          "len",
          "line.strip",
          "logging.info",
          "logging.warning",
          "logging.error",
          "line.startswith"
        ],
        "load_goals": [
          "len",
          "open",
          "line.strip",
          "goals_input.split",
          "tempfile.NamedTemporaryFile",
          "logging.info",
          "logging.error",
          "g.strip",
          "temp.flush",
          "os.unlink",
          "subprocess.run",
          "line.startswith",
          "temp.write"
        ],
        "file_hash": [
          "open",
          "logging.error",
          "f.read",
          "hashlib.sha256"
        ],
        "extract_comments": [
          "open",
          "comments.append",
          "tokenize.tokenize",
          "logging.error"
        ],
        "compute_file_metadata": [
          "open",
          "logging.error",
          "os.stat",
          "sum",
          "file_hash"
        ],
        "infer_category": [
          "any",
          "path.lower"
        ],
        "get_signature": [],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "extract_dependencies": [
          "set",
          "ast.walk",
          "sorted",
          "dependencies.update",
          "dependencies.add",
          "isinstance"
        ],
        "analyze_module": [
          "classes.append",
          "sorted",
          "extract_dependencies",
          "getattr",
          "isinstance",
          "methods.append",
          "CallVisitor",
          "ast.parse",
          "open",
          "source.splitlines",
          "get_signature",
          "ast.get_docstring",
          "str",
          "logging.error",
          "f.read",
          "visitor.visit",
          "compute_file_metadata",
          "extract_comments",
          "infer_category",
          "hashlib.sha256",
          "functions.append"
        ],
        "build_toc_and_modules": [
          "exclude_patterns.extend",
          "len",
          "fnmatch.fnmatch",
          "dir_path.relative_to",
          "logging.info",
          "sum",
          "Path",
          "load_gitignore",
          "logging.debug",
          "rel_dir.split",
          "modules.append",
          "os.walk",
          "file_path.relative_to",
          "toc.append",
          "any",
          "analyze_module",
          "str"
        ],
        "generate_json": [
          "len",
          "load_goals",
          "build_toc_and_modules"
        ],
        "main": [
          "open",
          "argparse.ArgumentParser",
          "logging.warning",
          "logging.info",
          "logging.error",
          "language_patterns.get",
          "json.dump",
          "parser.parse_args",
          "generate_json",
          "parser.add_argument",
          "include_patterns.extend"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ast",
        "datetime",
        "fnmatch",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "tempfile",
        "tokenize",
        "typing"
      ],
      "hash": null,
      "artifact_id": "66c24485-4ad9-4fe4-9951-388caa9b67c1"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "compute_hash",
          "docstring": "Compute SHA-256 hash of content.",
          "line_range": null,
          "parameters": [
            "content"
          ],
          "decorators": []
        },
        {
          "name": "load_struct_json",
          "docstring": "Load struct.json for metadata.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_llmstruct_toml",
          "docstring": "Load llmstruct.toml for configuration.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_docs",
          "docstring": "Generate all documentation files with idempotency.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "compute_hash": [
          "content.encode",
          "hashlib.sha256"
        ],
        "load_struct_json": [
          "open",
          "struct_path.exists",
          "Path",
          "json.load"
        ],
        "load_llmstruct_toml": [
          "toml_path.exists",
          "open",
          "Path",
          "toml.load"
        ],
        "generate_docs": [
          "logger.info",
          "compute_hash",
          "datetime.utcnow",
          "f.write",
          "file_path.exists",
          "struct_data.get",
          "Path",
          "any",
          "load_llmstruct_toml",
          "chr",
          "open",
          "toml_data.get",
          "load_struct_json",
          "project_name.lower",
          "str",
          "json.dumps",
          "doc_files.items",
          "f.read",
          "metadata.get"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "toml"
      ],
      "hash": null,
      "artifact_id": "9a638e70-44fd-4827-b7d8-571936d3eeb6"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "3f64b05b-47e6-4ebf-a523-9df4424a5d1c"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collector",
      "path": "temp_workfiles/unsorted_mess/dump/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_parser.parse_gitignore",
          "gitignore_path.exists",
          "Path"
        ],
        "collect_project": [
          "gitignore",
          "open",
          "doc_files.items",
          "file_path.is_file",
          "f.read",
          "Path",
          "load_gitignore",
          "json.dump",
          "any",
          "str",
          "root_dir.rglob"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "a20acea9-5ad6-4a3f-b6d8-a761c0568577"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "should_ignore",
          "docstring": "Check if path should be ignored based on directories or .gitignore.",
          "line_range": null,
          "parameters": [
            "path",
            "root_dir",
            "ignore_dirs",
            "gitignore_patterns"
          ],
          "decorators": []
        },
        {
          "name": "collect_docs",
          "docstring": "Collect all documentation files into a JSON file.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "open",
          "line.strip",
          "gitignore_path.exists",
          "patterns.append",
          "line.startswith"
        ],
        "should_ignore": [
          "path.relative_to",
          "rel_path.startswith",
          "str",
          "fnmatch"
        ],
        "collect_docs": [
          "open",
          "should_ignore",
          "f.read",
          "path.is_file",
          "Path",
          "load_gitignore",
          "json.dump",
          "path.relative_to",
          "print",
          "str",
          "root_dir.rglob"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "6fae6739-919e-48a7-97a6-f07d009f4564"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "collect_docs",
          "docstring": "Collect all documentation files into a single text file.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "collect_docs": [
          "open",
          "collected.append",
          "f.read",
          "file_path.is_file",
          "Path",
          "dir_path.rglob",
          "dir_path.exists",
          "f.write",
          "file_path.exists",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "0a96f508-d615-42a9-804f-8613c57f15dc"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.refactored_structure",
      "path": "temp_workfiles/unsorted_mess/dump/refactored_structure.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "json_path",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "modules",
            "metadata"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "PythonParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "JSONGenerator",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "generate",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "modules",
                "metadata"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "parse_module": [],
        "generate": [],
        "main": [
          "open",
          "parser.parse_module",
          "argparse.ArgumentParser",
          "JavaScriptParser",
          "generator.generate",
          "json.dump",
          "PythonParser",
          "parser.parse_args",
          "JSONGenerator",
          "parser.add_argument"
        ],
        "attach_to_llm_request": [
          "open",
          "json.load",
          "json.dumps"
        ]
      },
      "dependencies": [],
      "hash": null,
      "artifact_id": "8e9d1fce-79a9-4735-8acb-c539edcd3d74"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path.",
          "line_range": null,
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module to extract functions, classes, and call graph.",
          "line_range": null,
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function and module calls.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "path.lower"
        ],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "analyze_module": [
          "relative_path.encode",
          "classes.append",
          "sorted",
          "code.splitlines",
          "dependencies.add",
          "isinstance",
          "methods.append",
          "CallVisitor",
          "Path",
          "ast.parse",
          "open",
          "len",
          "set",
          "ast.walk",
          "datetime.fromtimestamp",
          "ast.get_docstring",
          "str",
          "logging.error",
          "f.read",
          "visitor.visit",
          "dependencies.update",
          "os.stat",
          "ast.unparse",
          "code.encode",
          "infer_category",
          "hashlib.sha256",
          "functions.append"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "ast",
        "datetime",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "7f7d705e-3e63-48d0-9356-10ddb9783d1b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_templates___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_templates___init__.py",
      "category": "core",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "59d1dc32-0a33-4bc4-951f-7a24f3e0472d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_content_hash",
          "docstring": "Calculate hash of content for idempotency.",
          "line_range": null,
          "parameters": [
            "content"
          ],
          "decorators": []
        },
        {
          "name": "create_file",
          "docstring": "Create or update file if content changed.",
          "line_range": null,
          "parameters": [
            "path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "generate_docs_tree",
          "docstring": "Generate Di\u00e1taxis-compliant documentation for llmstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "print_docs_tree",
          "docstring": "Print documentation tree.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_content_hash": [
          "content.encode",
          "hashlib.sha256"
        ],
        "create_file": [
          "path.exists",
          "open",
          "f.read",
          "get_content_hash",
          "content.strip",
          "f.write",
          "print"
        ],
        "generate_docs_tree": [
          "Path",
          "create_file"
        ],
        "print_docs_tree": [
          "print",
          "root.replace",
          "root.startswith",
          "os.walk"
        ]
      },
      "dependencies": [
        "Path",
        "hashlib",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "966f0190-a643-415a-8882-b066f628ccd4"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_main",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": null,
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "utils.helper",
          "print"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": null,
      "artifact_id": "06a006d1-9361-4d57-b89c-6db15c8e837b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.filter_llmstruct_json",
      "path": "temp_workfiles/unsorted_mess/dump/filter_llmstruct_json.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load .gitignore patterns.",
          "line_range": null,
          "parameters": [
            "gitignore_path"
          ],
          "decorators": []
        },
        {
          "name": "filter_json",
          "docstring": "Filter struct.json to exclude .gitignore paths and optionally tests.",
          "line_range": null,
          "parameters": [
            "data",
            "gitignore_patterns",
            "include_tests"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "open",
          "line.strip",
          "patterns.append",
          "line.startswith"
        ],
        "filter_json": [
          "len",
          "fnmatch.fnmatch",
          "data.get",
          "module.get",
          "any"
        ],
        "main": [
          "open",
          "logging.basicConfig",
          "argparse.ArgumentParser",
          "json.load",
          "logging.info",
          "logging.error",
          "load_gitignore",
          "json.dump",
          "filter_json",
          "parser.parse_args",
          "parser.add_argument",
          "str"
        ]
      },
      "dependencies": [
        "argparse",
        "fnmatch",
        "json",
        "logging",
        "os"
      ],
      "hash": null,
      "artifact_id": "7b2da02f-ed85-41de-9a01-8088a4a4b834"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_internal_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_internal_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "a46cccef-cdfa-4237-a118-122763196fce"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": null,
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": null,
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getenv",
          "int",
          "logging.info"
        ],
        "query": [
          "json.load",
          "logging.error",
          "logging.info",
          "logging.warning",
          "self._query_ollama",
          "Path",
          "self._query_hybrid",
          "self._query_anthropic",
          "self._query_grok",
          "range",
          "asyncio.sleep",
          "json.dumps"
        ],
        "_query_grok": [
          "aiohttp.ClientSession",
          "logging.info",
          "logging.error",
          "response.json",
          "result.get",
          "session.post"
        ],
        "_query_anthropic": [
          "aiohttp.ClientSession",
          "logging.info",
          "logging.error",
          "response.json",
          "result.get",
          "session.post"
        ],
        "_query_ollama": [
          "aiohttp.ClientSession",
          "logging.info",
          "logging.error",
          "response.json",
          "logging.debug",
          "result.get",
          "session.post"
        ],
        "_query_hybrid": [
          "len",
          "logging.info",
          "self._query_ollama",
          "self._query_anthropic",
          "self._query_grok",
          "isinstance",
          "asyncio.gather"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "requests",
        "typing",
        "urljoin",
        "urllib.parse"
      ],
      "hash": null,
      "artifact_id": "f72cd523-dfe4-467e-813c-5d01380617dc"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client (3)",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client (3).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": null,
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": null,
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getenv",
          "int"
        ],
        "query": [
          "json.load",
          "logging.error",
          "logging.info",
          "logging.warning",
          "self._query_ollama",
          "Path",
          "self._query_hybrid",
          "self._query_anthropic",
          "self._query_grok",
          "range",
          "asyncio.sleep",
          "json.dumps"
        ],
        "_query_grok": [
          "aiohttp.ClientSession",
          "logging.info",
          "logging.error",
          "response.json",
          "result.get",
          "session.post"
        ],
        "_query_anthropic": [
          "aiohttp.ClientSession",
          "logging.info",
          "logging.error",
          "response.json",
          "result.get",
          "session.post"
        ],
        "_query_ollama": [
          "aiohttp.ClientSession",
          "logging.info",
          "session.post",
          "logging.error",
          "response.json",
          "result.get",
          "urljoin"
        ],
        "_query_hybrid": [
          "len",
          "logging.info",
          "self._query_ollama",
          "self._query_anthropic",
          "self._query_grok",
          "isinstance",
          "asyncio.gather"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "requests",
        "typing",
        "urljoin",
        "urllib.parse"
      ],
      "hash": null,
      "artifact_id": "7dd6d003-504e-4c7a-834e-7a1d2ebc67ef"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.tests___init__",
      "path": "temp_workfiles/unsorted_mess/dump/tests___init__.py",
      "category": "core",
      "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "86858883-c88e-4a72-b64d-6194484458d0"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.check_docs",
      "path": "temp_workfiles/unsorted_mess/dump/check_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_struct",
          "docstring": "Load struct.json.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_docs",
          "docstring": "Check docs/ against struct.json and dialogue state.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run doc check and print report.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_struct": [
          "open",
          "json.load"
        ],
        "check_docs": [
          "open",
          "f.read",
          "Path",
          "load_struct",
          "content.lower",
          "issues.append",
          "os.walk",
          "struct.get"
        ],
        "main": [
          "check_docs",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "f94a4ae3-fb09-4f6b-be18-f954d5c080a9"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.javascript_parser",
      "path": "temp_workfiles/unsorted_mess/dump/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "open",
          "f.read",
          "hashlib.sha256"
        ],
        "compute_file_metadata": [
          "open",
          "self.file_hash",
          "os.stat",
          "sum"
        ],
        "parse_module": [
          "open",
          "self.compute_file_metadata",
          "f.read",
          "esprima.parseModule",
          "str"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "05ae4599-6b56-4567-9bb7-63b175c28bab"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.self_run",
      "path": "temp_workfiles/unsorted_mess/dump/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json based on prompt keywords.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered struct.json to LLM prompt.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "struct.get",
          "module.get",
          "any",
          "prompt.lower"
        ],
        "attach_to_llm_request": [
          "open",
          "json.load",
          "logging.error",
          "filter_struct",
          "prompt.lower",
          "Path",
          "context_file.exists",
          "filter_json",
          "json.dumps"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "547c5190-2c5d-4829-a336-6e348b30baf0"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with robust .gitignore filtering using pathlib.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "file_path.match",
          "sorted",
          "Path",
          "os.walk",
          "file_path.relative_to",
          "structure.append",
          "any",
          "str"
        ],
        "build_toc_and_modules": [
          "len",
          "Path",
          "python_parser.analyze_module",
          "modules.append",
          "f.match",
          "toc.append",
          "any",
          "str"
        ],
        "generate_json": [
          "set",
          "len",
          "list",
          "get_folder_structure",
          "Path",
          "sum",
          "build_toc_and_modules"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers",
        "pathlib",
        "python_parser",
        "typing"
      ],
      "hash": null,
      "artifact_id": "81395d56-b372-4d57-bbbd-678768e51f2e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        },
        {
          "name": "PythonParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "file_hash": [
          "open",
          "f.read",
          "hashlib.sha256"
        ],
        "compute_file_metadata": [
          "open",
          "self.file_hash",
          "os.stat",
          "sum"
        ],
        "parse_module": [
          "classes.append",
          "dependencies.extend",
          "dependencies.append",
          "sorted",
          "isinstance",
          "methods.append",
          "CallVisitor",
          "self.compute_file_metadata",
          "ast.parse",
          "call.split",
          "open",
          "ast.walk",
          "set",
          "ast.get_docstring",
          "str",
          "list",
          "f.read",
          "visitor.visit",
          "functions.append"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "ast",
        "datetime",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "38ac28b9-3f2c-4665-aa03-80139b0c62f7"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers___init__.py",
      "category": "core",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "PythonParser",
        "javascript_parser",
        "python_parser"
      ],
      "hash": null,
      "artifact_id": "144efde0-b168-4e2c-b24a-2f8529e60fcb"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_goals",
          "docstring": "Load project goals from pyproject.toml or default.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.strip",
          "gitignore_path.exists",
          "gitignore_path.open",
          "logging.error",
          "Path",
          "line.startswith"
        ],
        "load_goals": [
          "pyproject_path.open",
          "logging.error",
          "toml.load",
          "Path",
          "config.get",
          "pyproject_path.exists"
        ],
        "main": [
          "open",
          "load_goals",
          "argparse.ArgumentParser",
          "logging.info",
          "logging.error",
          "load_gitignore",
          "json.dump",
          "parser.parse_args",
          "generate_json",
          "parser.add_argument"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "argparse",
        "generate_json",
        "generators.json_generator",
        "json",
        "logging",
        "os",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f3f9df07-f2e3-4f05-a60f-0bfb8222e3bf"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.scripts_setup_github",
      "path": "temp_workfiles/unsorted_mess/dump/scripts_setup_github.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "create_issue",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "repo",
            "token",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "setup_ci_cd",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "repo_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_templates",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "repo_dir"
          ],
          "decorators": []
        },
        {
          "name": "update_readme",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "repo_dir",
            "user_guide_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "open",
          "json.load"
        ],
        "create_issue": [
          "response.json",
          "requests.post",
          "task.get"
        ],
        "setup_ci_cd": [
          "workflow_dir.mkdir",
          "Path",
          "ci_yml.write_text"
        ],
        "setup_templates": [
          "pr_template.write_text",
          "Path",
          "issue_template.write_text",
          "template_dir.mkdir"
        ],
        "update_readme": [
          "readme.write_text",
          "Path"
        ],
        "main": [
          "setup_ci_cd",
          "load_json",
          "argparse.ArgumentParser",
          "create_issue",
          "task.get",
          "issue.get",
          "update_readme",
          "setup_templates",
          "parser.parse_args",
          "parser.add_argument",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "os",
        "pathlib",
        "requests"
      ],
      "hash": null,
      "artifact_id": "44ca0096-6971-441c-98fb-b541fa04e189"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__ (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__ (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "e65f7f12-55e3-429a-9537-900ebb6c4c5b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.cli",
      "path": "temp_workfiles/unsorted_mess/dump/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.strip",
          "gitignore_path.exists",
          "gitignore_path.open",
          "logging.error",
          "Path",
          "line.startswith"
        ],
        "load_config": [
          "config_path.open",
          "logging.error",
          "toml.load",
          "Path",
          "config_path.exists"
        ],
        "read_file_content": [
          "logging.error",
          "f.read",
          "path.is_file",
          "Path",
          "path.open"
        ],
        "write_to_file": [
          "logging.warning",
          "logging.info",
          "logging.error",
          "file_path.open",
          "Path",
          "base_path.mkdir",
          "f.write",
          "file_path.exists",
          "str"
        ],
        "parse_files_from_response": [
          "content.strip",
          "filename.strip",
          "re.findall",
          "files.append"
        ],
        "interactive": [
          "attach_to_llm_request",
          "sorted",
          "os.listdir",
          "write_match.group",
          "logging.warning",
          "Path",
          "load_gitignore",
          "write_dir.startswith",
          "scan_match.group",
          "files_to_write.append",
          "client.query",
          "print",
          "write_to_file",
          "read_file_content",
          "parse",
          "user_input.lower",
          "json.dumps",
          "input",
          "logging.error",
          "parse_files_from_response",
          "re.search",
          "LLMClient",
          "get_folder_structure"
        ],
        "parse": [
          "logging.warning",
          "logging.info",
          "logging.error",
          "Path",
          "load_gitignore",
          "load_config",
          "json.dump",
          "config.get",
          "generate_json"
        ],
        "query": [
          "logging.error",
          "logging.info",
          "Path",
          "json.dump",
          "LLMClient",
          "client.query"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "parse_parser.add_argument",
          "parser.add_subparsers",
          "dogfood_parser.add_argument",
          "argparse.ArgumentParser",
          "interactive_parser.add_argument",
          "interactive",
          "review_parser.add_argument",
          "dogfood",
          "query_parser.add_argument",
          "context_parser.add_argument",
          "parse",
          "query",
          "subparsers.add_parser",
          "review",
          "parser.parse_args",
          "asyncio.run",
          "context"
        ]
      },
      "dependencies": [
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "c2145b8f-bfa9-424f-9098-6cc2ca0d4944"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_validators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_validators___init__.py",
      "category": "core",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "54f41104-f1aa-47ee-979e-fb756e40bc1b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct (1).py",
      "category": "core",
      "module_doc": "Generate JSON for workspace based on user instructions template.\n\nCreates structure:\n- metadata with description, instructions, and version\n- toc with module summaries and categories\n- modules with detailed function/class info, comments, call graphs, and categories",
      "functions": [
        {
          "name": "load_goals",
          "docstring": "Load goals from file or interactive editor.",
          "line_range": null,
          "parameters": [
            "goals_file"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "Compute SHA-256 hash of file contents.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "extract_comments",
          "docstring": "Extract single-line and multi-line comments using tokenize.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "Compute file size, last modified time, line count, and optional hash.",
          "line_range": null,
          "parameters": [
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path and dependencies.",
          "line_range": null,
          "parameters": [
            "path",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_signature",
          "docstring": "Generate function signature.",
          "line_range": null,
          "parameters": [
            "func_node"
          ],
          "decorators": []
        },
        {
          "name": "extract_dependencies",
          "docstring": "Extract module-level imports.",
          "line_range": null,
          "parameters": [
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module in a single pass.",
          "line_range": null,
          "parameters": [
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with filtering.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes",
            "goals_file"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "Extract function calls and module dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "load_goals": [
          "open",
          "tempfile.NamedTemporaryFile",
          "line.strip",
          "os.unlink",
          "logging.error",
          "temp.flush",
          "subprocess.run",
          "line.startswith",
          "temp.write"
        ],
        "file_hash": [
          "open",
          "logging.error",
          "f.read",
          "hashlib.sha256"
        ],
        "extract_comments": [
          "open",
          "comments.append",
          "tokenize.tokenize",
          "logging.error"
        ],
        "compute_file_metadata": [
          "open",
          "logging.error",
          "os.stat",
          "sum",
          "file_hash"
        ],
        "infer_category": [
          "any",
          "path.lower"
        ],
        "get_signature": [],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "extract_dependencies": [
          "set",
          "ast.walk",
          "sorted",
          "dependencies.update",
          "dependencies.add",
          "isinstance"
        ],
        "analyze_module": [
          "classes.append",
          "sorted",
          "extract_dependencies",
          "getattr",
          "isinstance",
          "methods.append",
          "CallVisitor",
          "ast.parse",
          "open",
          "source.splitlines",
          "get_signature",
          "ast.get_docstring",
          "str",
          "logging.error",
          "f.read",
          "visitor.visit",
          "compute_file_metadata",
          "extract_comments",
          "infer_category",
          "hashlib.sha256",
          "functions.append"
        ],
        "build_toc_and_modules": [
          "exclude_patterns.extend",
          "len",
          "fnmatch.fnmatch",
          "dirpath.split",
          "sum",
          "load_gitignore",
          "modules.append",
          "os.walk",
          "toc.append",
          "any",
          "analyze_module"
        ],
        "generate_json": [
          "len",
          "load_goals",
          "build_toc_and_modules"
        ],
        "main": [
          "open",
          "argparse.ArgumentParser",
          "logging.info",
          "logging.error",
          "json.dump",
          "parser.parse_args",
          "generate_json",
          "parser.add_argument"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "argparse",
        "ast",
        "datetime",
        "fnmatch",
        "hashlib",
        "json",
        "logging",
        "os",
        "subprocess",
        "tempfile",
        "tokenize",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d0c882c7-325e-4478-9622-e27cb7093bb1"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_validator",
      "path": "temp_workfiles/unsorted_mess/dump/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": null,
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": null,
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "open",
          "validate",
          "json.load",
          "logging.error",
          "logging.info",
          "schema_file.exists",
          "Path",
          "json_file.exists",
          "str"
        ],
        "validate_directory": [
          "validate_struct_json",
          "Path",
          "json_file.match",
          "any",
          "str"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "0cae8952-5727-4509-86c7-1bfdf78397de"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.validate_json",
      "path": "temp_workfiles/unsorted_mess/dump/validate_json.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "open",
          "validate",
          "json.load",
          "str",
          "print"
        ]
      },
      "dependencies": [
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "203a0cc4-92ab-41df-8429-c7feb853bb23"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore, logging loaded patterns.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_goals",
          "docstring": "Load goals from semicolon-separated string, file, or interactive editor.",
          "line_range": null,
          "parameters": [
            "goals_input"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "open",
          "len",
          "line.strip",
          "logging.info",
          "logging.warning",
          "logging.error",
          "line.startswith"
        ],
        "load_goals": [
          "len",
          "open",
          "line.strip",
          "goals_input.split",
          "tempfile.NamedTemporaryFile",
          "logging.info",
          "logging.error",
          "g.strip",
          "temp.flush",
          "os.unlink",
          "subprocess.run",
          "line.startswith",
          "temp.write"
        ],
        "main": [
          "open",
          "load_goals",
          "argparse.ArgumentParser",
          "logging.warning",
          "logging.info",
          "logging.error",
          "language_patterns.get",
          "load_gitignore",
          "json.dump",
          "parser.parse_args",
          "generate_json",
          "parser.add_argument",
          "include_patterns.extend"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "argparse",
        "generate_json",
        "generators.json_generator",
        "logging",
        "os",
        "subprocess",
        "tempfile",
        "typing"
      ],
      "hash": null,
      "artifact_id": "006d7a6c-e4cf-430c-8c3a-3ab4dd67fac9"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.clean.internal_cleaner",
      "path": "temp_workfiles/unsorted_mess/dump/clean/internal_cleaner.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "normalize",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "record"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "normalize": [
          "id.strip",
          "record.get",
          "content.strip",
          "isinstance",
          "str"
        ]
      },
      "dependencies": [
        "collections",
        "defaultdict",
        "glob",
        "json",
        "os"
      ],
      "hash": null,
      "artifact_id": "19d7016d-9dbb-40fe-99bf-bce066dc8aa7"
    },
    {
      "module_id": "bak.20250522_102827.scripts.collector",
      "path": "bak/20250522_102827/scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "fnmatch.fnmatch",
          "filtered.append",
          "pattern.startswith"
        ],
        "collect_files": [
          "str",
          "apply_filters",
          "path.is_file",
          "path.relative_to",
          "files.append",
          "root_dir.rglob"
        ],
        "generate_struct": [
          "existing.get",
          "len",
          "uuid.uuid4",
          "collect_files",
          "json.load",
          "logger.info",
          "output_path.open",
          "Path",
          "json.dump",
          "output_path.exists",
          "str"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "9b1cc69b-c894-496c-b400-ea12276eb527"
    },
    {
      "module_id": "bak.20250522_102827.scripts.validate_refs",
      "path": "bak/20250522_102827/scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "logger.info",
          "json.load",
          "broken_links.append",
          "logger.error",
          "logger.warning",
          "Path",
          "target_file.exists",
          "enumerate",
          "json.dump",
          "source_file.exists",
          "idea.get"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "f6b71cf8-9dfa-480b-9956-d3695a8a83c7"
    },
    {
      "module_id": "bak.20250522_102827.scripts.deploy_embedded_files",
      "path": "bak/20250522_102827/scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "validate",
          "logger.warning"
        ],
        "backup_files": [
          "shutil.copytree",
          "target_dir.exists",
          "datetime.now",
          "logger.info"
        ],
        "deploy_embedded_files": [
          "logger.info",
          "backup_files",
          "target_path.exists",
          "logger.error",
          "validate_json",
          "Path",
          "EMBEDDED_FILES.get",
          "json.dump",
          "target_path.open",
          "EMBEDDED_FILES.items",
          "f.write"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "593c6319-2bd0-4df3-a9bc-43b6e8b518c9"
    },
    {
      "module_id": "bak.20250522_131121.scripts.collector",
      "path": "bak/20250522_131121/scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "fnmatch.fnmatch",
          "filtered.append",
          "pattern.startswith"
        ],
        "collect_files": [
          "str",
          "apply_filters",
          "path.is_file",
          "path.relative_to",
          "files.append",
          "root_dir.rglob"
        ],
        "generate_struct": [
          "existing.get",
          "len",
          "uuid.uuid4",
          "collect_files",
          "json.load",
          "logger.info",
          "output_path.open",
          "Path",
          "json.dump",
          "output_path.exists",
          "str"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "3c67957d-a10c-4fca-a6dc-d6f28741eb2a"
    },
    {
      "module_id": "bak.20250522_131121.scripts.validate_refs",
      "path": "bak/20250522_131121/scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "logger.info",
          "json.load",
          "broken_links.append",
          "logger.error",
          "logger.warning",
          "Path",
          "target_file.exists",
          "enumerate",
          "json.dump",
          "source_file.exists",
          "idea.get"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "4947cfff-4630-4572-b91e-21b25fab767a"
    },
    {
      "module_id": "bak.20250522_131121.scripts.deploy_embedded_files",
      "path": "bak/20250522_131121/scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.error",
          "validate",
          "logger.warning",
          "RefResolver"
        ],
        "backup_files": [
          "shutil.copytree",
          "target_dir.exists",
          "datetime.now",
          "logger.info"
        ],
        "deploy_embedded_files": [
          "logger.info",
          "backup_files",
          "target_path.exists",
          "logger.error",
          "logger.warning",
          "validate_json",
          "Path",
          "EMBEDDED_FILES.get",
          "json.dump",
          "Path.cwd",
          "target_path.open",
          "f.write"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "40cb182a-ef6a-45f5-8129-5597a26be611"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "ae062c8d-567a-4445-bfc4-90ab4945a75e"
    },
    {
      "module_id": "scripts.github_sync_manager",
      "path": "scripts/github_sync_manager.py",
      "category": "core",
      "module_doc": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub\nSupports: Issues, Epics (Projects), Discussions\nSafety: dry-run mode, logging, collision detection",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results for idempotency",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log for future idempotency",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Safe GitHub API request with rate limiting",
          "line_range": null,
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_issues",
          "docstring": "Get existing GitHub issues for collision detection",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_discussions",
          "docstring": "Get existing GitHub discussions",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced (idempotency)",
          "line_range": null,
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "find_existing_by_title",
          "docstring": "Find existing GitHub item by title similarity",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "existing_items"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue",
          "docstring": "Create GitHub issue from processed item",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion",
          "docstring": "Create GitHub discussion from processed item",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic",
          "docstring": "Create GitHub epic (as Project or enhanced Issue)",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "sync_category",
          "docstring": "Sync specific category with GitHub",
          "line_range": null,
          "parameters": [
            "self",
            "category",
            "filename"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Pre-sync validation checks",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "Main sync execution",
          "line_range": null,
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubSyncManager",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results for idempotency",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log for future idempotency",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Safe GitHub API request with rate limiting",
              "line_range": null,
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "get_existing_issues",
              "docstring": "Get existing GitHub issues for collision detection",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_existing_discussions",
              "docstring": "Get existing GitHub discussions",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced (idempotency)",
              "line_range": null,
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "find_existing_by_title",
              "docstring": "Find existing GitHub item by title similarity",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "existing_items"
              ]
            },
            {
              "name": "create_github_issue",
              "docstring": "Create GitHub issue from processed item",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion",
              "docstring": "Create GitHub discussion from processed item",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_epic",
              "docstring": "Create GitHub epic (as Project or enhanced Issue)",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "sync_category",
              "docstring": "Sync specific category with GitHub",
              "line_range": null,
              "parameters": [
                "self",
                "category",
                "filename"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Pre-sync validation checks",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "Main sync execution",
              "line_range": null,
              "parameters": [
                "self",
                "categories"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getenv",
          "Path",
          "self.load_sync_log",
          "print"
        ],
        "load_sync_log": [
          "open",
          "json.load"
        ],
        "save_sync_log": [
          "open",
          "json.dump"
        ],
        "api_request": [
          "response.raise_for_status",
          "int",
          "requests.post",
          "ValueError",
          "response.json",
          "method.upper",
          "time.sleep",
          "requests.get",
          "requests.patch",
          "print"
        ],
        "get_existing_issues": [
          "len",
          "issues.extend",
          "self.api_request"
        ],
        "get_existing_discussions": [],
        "item_already_synced": [
          "item.get"
        ],
        "find_existing_by_title": [
          "len",
          "item.get",
          "title.lower"
        ],
        "create_github_issue": [
          "self.api_request",
          "processing_meta.get",
          "labels.append",
          "item.get",
          "print"
        ],
        "create_github_discussion": [
          "print",
          "item.get"
        ],
        "create_github_epic": [
          "print",
          "self.api_request",
          "item.get"
        ],
        "sync_category": [
          "open",
          "existing.get",
          "self.create_github_discussion",
          "json.load",
          "self.create_github_issue",
          "data.get",
          "datetime.now",
          "self.item_already_synced",
          "self.create_github_epic",
          "self.find_existing_by_title",
          "result.get",
          "self.get_existing_discussions",
          "item.get",
          "self.get_existing_issues",
          "file_path.exists",
          "print"
        ],
        "validate_before_sync": [
          "self.api_request",
          "repo_info.get",
          "rate_limit.get",
          "user_info.get",
          "core_limit.get",
          "print"
        ],
        "run_sync": [
          "datetime.now",
          "self.sync_category",
          "self.validate_before_sync",
          "self.save_sync_log",
          "sum",
          "r.get",
          "results.values",
          "print"
        ],
        "main": [
          "len",
          "GitHubSyncManager",
          "argparse.ArgumentParser",
          "result.get",
          "manager.run_sync",
          "parser.parse_args",
          "parser.add_argument",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ed0097fb-24a9-4a74-8257-e0e9bd851175"
    },
    {
      "module_id": "scripts.process_926_items",
      "path": "scripts/process_926_items.py",
      "category": "core",
      "module_doc": "926 Items Processing Script - Updated Implementation\nProcesses items according to GitHub roadmap + personal management vision\nImplements all decisions from 926_items_processing_execution_plan.md",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_comprehensive_index",
          "docstring": "Load the 926 items from comprehensive index",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "calculate_confidence_score",
          "docstring": "Calculate confidence score for categorization decision",
          "line_range": null,
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "check_t_pot_related",
          "docstring": "Enhanced T-Pot detection",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_team_implementable",
          "docstring": "Check if team can implement without architecture review",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_personal_vs_team_vs_business",
          "docstring": "Classify as personal/team/business",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "identify_epic_candidates",
          "docstring": "Identify items that should be grouped into epics",
          "line_range": null,
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "extract_epic_name",
          "docstring": "Extract epic name from item",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "categorize_item",
          "docstring": "Main categorization logic with confidence scoring",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "find_duplicates",
          "docstring": "Enhanced duplicate detection with T-Pot special handling",
          "line_range": null,
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "calculate_similarity",
          "docstring": "Enhanced similarity calculation",
          "line_range": null,
          "parameters": [
            "self",
            "title1",
            "title2"
          ],
          "decorators": []
        },
        {
          "name": "suggest_merge_strategy",
          "docstring": "Enhanced merge strategy with T-Pot consideration",
          "line_range": null,
          "parameters": [
            "self",
            "item1",
            "item2"
          ],
          "decorators": []
        },
        {
          "name": "process_items",
          "docstring": "Main processing workflow implementing execution plan",
          "line_range": null,
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "save_results",
          "docstring": "Save categorized results with enhanced metadata",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_category_description",
          "docstring": "Category descriptions per execution plan",
          "line_range": null,
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Main execution workflow per execution plan",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskProcessor926",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_comprehensive_index",
              "docstring": "Load the 926 items from comprehensive index",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "calculate_confidence_score",
              "docstring": "Calculate confidence score for categorization decision",
              "line_range": null,
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "check_t_pot_related",
              "docstring": "Enhanced T-Pot detection",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_team_implementable",
              "docstring": "Check if team can implement without architecture review",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_personal_vs_team_vs_business",
              "docstring": "Classify as personal/team/business",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "identify_epic_candidates",
              "docstring": "Identify items that should be grouped into epics",
              "line_range": null,
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "extract_epic_name",
              "docstring": "Extract epic name from item",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "categorize_item",
              "docstring": "Main categorization logic with confidence scoring",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "find_duplicates",
              "docstring": "Enhanced duplicate detection with T-Pot special handling",
              "line_range": null,
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "calculate_similarity",
              "docstring": "Enhanced similarity calculation",
              "line_range": null,
              "parameters": [
                "self",
                "title1",
                "title2"
              ]
            },
            {
              "name": "suggest_merge_strategy",
              "docstring": "Enhanced merge strategy with T-Pot consideration",
              "line_range": null,
              "parameters": [
                "self",
                "item1",
                "item2"
              ]
            },
            {
              "name": "process_items",
              "docstring": "Main processing workflow implementing execution plan",
              "line_range": null,
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "save_results",
              "docstring": "Save categorized results with enhanced metadata",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_category_description",
              "docstring": "Category descriptions per execution plan",
              "line_range": null,
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "run",
              "docstring": "Main execution workflow per execution plan",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "datetime.now",
          "Path"
        ],
        "load_comprehensive_index": [
          "open",
          "set",
          "data.items",
          "len",
          "json.load",
          "value.items",
          "hash",
          "index_path.exists",
          "item_content.lower",
          "unique_items.append",
          "items.append",
          "items.extend",
          "seen_items.add",
          "item.get",
          "isinstance",
          "any",
          "str",
          "print"
        ],
        "calculate_confidence_score": [
          "sum",
          "min",
          "self.check_t_pot_related",
          "item.get",
          "str"
        ],
        "check_t_pot_related": [
          "any",
          "str"
        ],
        "check_team_implementable": [
          "str",
          "sum"
        ],
        "check_personal_vs_team_vs_business": [
          "sum",
          "max",
          "str",
          "item.get"
        ],
        "identify_epic_candidates": [
          "len",
          "item.get",
          "self.extract_epic_name",
          "epic_groups.items",
          "any",
          "str"
        ],
        "extract_epic_name": [
          "title.split",
          "item.get"
        ],
        "categorize_item": [
          "self.check_team_implementable",
          "self.calculate_confidence_score",
          "self.check_personal_vs_team_vs_business",
          "self.check_t_pot_related",
          "any",
          "str"
        ],
        "find_duplicates": [
          "duplicates.append",
          "self.suggest_merge_strategy",
          "self.calculate_similarity",
          "self.check_t_pot_related",
          "item.get",
          "seen_items.items"
        ],
        "calculate_similarity": [
          "set",
          "len",
          "title1.split",
          "words1.union",
          "title2.split",
          "min",
          "words1.intersection"
        ],
        "suggest_merge_strategy": [
          "len",
          "str",
          "self.check_t_pot_related",
          "item2.get",
          "item1.get"
        ],
        "process_items": [
          "len",
          "self.find_duplicates",
          "set",
          "datetime.now",
          "self.check_team_implementable",
          "id",
          "self.categorize_item",
          "duplicate_item_ids.add",
          "self.check_t_pot_related",
          "self.extract_epic_name",
          "category.startswith",
          "low_confidence_items.append",
          "any",
          "processed_item.copy",
          "str",
          "print"
        ],
        "save_results": [
          "len",
          "open",
          "datetime.now",
          "item.get",
          "json.dump",
          "self.get_category_description",
          "sum",
          "print"
        ],
        "get_category_description": [
          "descriptions.get"
        ],
        "run": [
          "self.load_comprehensive_index",
          "self.save_results",
          "self.process_items",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d306a706-730c-49cc-8a35-def5bd272ca6"
    },
    {
      "module_id": "scripts.github_sync_manager_enhanced",
      "path": "scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "module_doc": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout\n\u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442: processing results + GitHub API + token management + CLI fallback",
      "functions": [
        {
          "name": "print_info",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_success",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_warning",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_error",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_step",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "step",
            "total",
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Enhanced CLI interface",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_github_token",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
          "line_range": null,
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "check_gh_cli",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_token_from_gh_cli",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_github_token",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "detect_repo_from_git",
          "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Enhanced API request with CLI fallback",
          "line_range": null,
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_direct",
          "docstring": "Direct API request",
          "line_range": null,
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_via_cli",
          "docstring": "API request via GitHub CLI",
          "line_range": null,
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue_enhanced",
          "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_acceptance_criteria",
          "docstring": "Format acceptance criteria from item metadata",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_implementation_notes",
          "docstring": "Format implementation notes",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Enhanced validation",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_enhanced_sync",
          "docstring": "Enhanced sync with full project rollout integration",
          "line_range": null,
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        },
        {
          "name": "sync_category_enhanced",
          "docstring": "Enhanced category sync",
          "line_range": null,
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced",
          "line_range": null,
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic_enhanced",
          "docstring": "Enhanced epic creation",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion_enhanced",
          "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "GitHubTokenManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 GitHub \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 (\u0438\u0437 setup_github_token.sh)",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_env_file",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_github_token",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
              "line_range": null,
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "check_gh_cli",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_token_from_gh_cli",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_github_token",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "EnhancedGitHubSyncManager",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 GitHub Sync Manager \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0432\u0441\u0435\u0445 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "detect_repo_from_git",
              "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Enhanced API request with CLI fallback",
              "line_range": null,
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_direct",
              "docstring": "Direct API request",
              "line_range": null,
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_via_cli",
              "docstring": "API request via GitHub CLI",
              "line_range": null,
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "create_github_issue_enhanced",
              "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_acceptance_criteria",
              "docstring": "Format acceptance criteria from item metadata",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_implementation_notes",
              "docstring": "Format implementation notes",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Enhanced validation",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_enhanced_sync",
              "docstring": "Enhanced sync with full project rollout integration",
              "line_range": null,
              "parameters": [
                "self",
                "categories"
              ]
            },
            {
              "name": "sync_category_enhanced",
              "docstring": "Enhanced category sync",
              "line_range": null,
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced",
              "line_range": null,
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "create_github_epic_enhanced",
              "docstring": "Enhanced epic creation",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion_enhanced",
              "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "print_info": [
          "print"
        ],
        "print_success": [
          "print"
        ],
        "print_warning": [
          "print"
        ],
        "print_error": [
          "print"
        ],
        "print_step": [
          "print"
        ],
        "__init__": [
          "GitHubTokenManager",
          "print_info",
          "self.detect_repo_from_git",
          "Path",
          "self.load_sync_log"
        ],
        "load_env_file": [
          "open",
          "value.strip",
          "line.strip",
          "line.split",
          "env_file.exists",
          "Path",
          "line.startswith",
          "key.strip"
        ],
        "test_github_token": [
          "requests.get",
          "response.json"
        ],
        "check_gh_cli": [
          "subprocess.run"
        ],
        "get_token_from_gh_cli": [
          "subprocess.run"
        ],
        "get_github_token": [
          "print_warning",
          "self.get_token_from_gh_cli",
          "os.getenv",
          "self.check_gh_cli",
          "self.test_github_token"
        ],
        "detect_repo_from_git": [
          "len",
          "url.split",
          "url.replace",
          "subprocess.run",
          "print_info",
          "print_warning",
          "url.endswith",
          "path.split",
          "url.startswith"
        ],
        "load_sync_log": [
          "open",
          "json.load"
        ],
        "save_sync_log": [
          "open",
          "json.dump"
        ],
        "api_request": [
          "time.sleep",
          "self._api_request_direct",
          "print_error",
          "self._api_request_via_cli"
        ],
        "_api_request_direct": [
          "response.raise_for_status",
          "int",
          "print_error",
          "requests.post",
          "ValueError",
          "print_warning",
          "response.json",
          "method.upper",
          "requests.get",
          "requests.patch"
        ],
        "_api_request_via_cli": [
          "print_error",
          "json.loads",
          "subprocess.run",
          "print_warning",
          "method.upper",
          "cmd.extend",
          "json.dumps"
        ],
        "create_github_issue_enhanced": [
          "self.api_request",
          "print_info",
          "labels.append",
          "item.get",
          "print_success",
          "self._format_acceptance_criteria",
          "self._format_implementation_notes",
          "processing_meta.get"
        ],
        "_format_acceptance_criteria": [
          "criteria.append",
          "criteria.extend",
          "item.get"
        ],
        "_format_implementation_notes": [
          "processing_meta.get",
          "notes.append",
          "item.get"
        ],
        "validate_before_sync": [
          "self.api_request",
          "print_error",
          "repo_info.get",
          "print_step",
          "user_info.get",
          "print_success",
          "file_path.exists"
        ],
        "run_enhanced_sync": [
          "datetime.now",
          "print_info",
          "print_step",
          "enumerate",
          "result.get",
          "self.validate_before_sync",
          "self.save_sync_log",
          "print_success",
          "self.sync_category_enhanced",
          "print"
        ],
        "sync_category_enhanced": [
          "open",
          "print_error",
          "json.load",
          "datetime.now",
          "data.get",
          "self.create_github_discussion_enhanced",
          "print_info",
          "self.create_github_epic_enhanced",
          "self.item_already_synced",
          "print_warning",
          "result.get",
          "item.get",
          "self.create_github_issue_enhanced",
          "file_path.exists"
        ],
        "item_already_synced": [
          "item.get"
        ],
        "create_github_epic_enhanced": [
          "print_success",
          "print_info",
          "self.api_request",
          "item.get"
        ],
        "create_github_discussion_enhanced": [
          "print_info",
          "print_warning",
          "item.get"
        ],
        "main": [
          "len",
          "print_error",
          "argparse.ArgumentParser",
          "EnhancedGitHubSyncManager",
          "result.get",
          "print_success",
          "parser.parse_args",
          "manager.run_enhanced_sync",
          "parser.add_argument"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "09008040-8a92-41f2-b56e-0347ae8c580b"
    },
    {
      "module_id": "scripts.fix_github_script",
      "path": "scripts/fix_github_script.py",
      "category": "core",
      "module_doc": "Quick fix for GitHub issues creation script\n\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 JSON \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445",
      "functions": [
        {
          "name": "fix_json_loading",
          "docstring": "\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 JSON \u0434\u0430\u043d\u043d\u044b\u0445",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "fix_json_loading": [
          "open",
          "f.read",
          "Path",
          "content.replace",
          "f.write",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "fec2018c-99ab-48ee-bfe8-d68ad2fa6a1d"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "fnmatch.fnmatch",
          "filtered.append",
          "pattern.startswith"
        ],
        "collect_files": [
          "str",
          "apply_filters",
          "path.is_file",
          "path.relative_to",
          "files.append",
          "root_dir.rglob"
        ],
        "generate_struct": [
          "existing.get",
          "len",
          "uuid.uuid4",
          "collect_files",
          "json.load",
          "logger.info",
          "output_path.open",
          "Path",
          "json.dump",
          "output_path.exists",
          "str"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "3c83e24f-f8f9-4ea2-8fac-a4c23facf99e"
    },
    {
      "module_id": "scripts.create_github_issues",
      "path": "scripts/create_github_issues.py",
      "category": "core",
      "module_doc": "GitHub Issues Creator for AI-Dogfooding Project\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GitHub issues \u0438\u0437 \u043d\u0430\u0448\u0438\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447",
      "functions": [
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_epics_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438\u0437 JSON",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f issues",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "token",
            "use_cli"
          ],
          "decorators": []
        },
        {
          "name": "create_epic_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": null,
          "parameters": [
            "self",
            "epic_data"
          ],
          "decorators": []
        },
        {
          "name": "create_task_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": null,
          "parameters": [
            "self",
            "task_data",
            "epic_number"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_api",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_cli",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_format_criteria",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "criteria"
          ],
          "decorators": []
        },
        {
          "name": "_format_tasks",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "_format_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "metrics"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubIssuesCreator",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "token",
                "use_cli"
              ]
            },
            {
              "name": "create_epic_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
              "line_range": null,
              "parameters": [
                "self",
                "epic_data"
              ]
            },
            {
              "name": "create_task_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": null,
              "parameters": [
                "self",
                "task_data",
                "epic_number"
              ]
            },
            {
              "name": "_create_issue_via_api",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_create_issue_via_cli",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_format_criteria",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "criteria"
              ]
            },
            {
              "name": "_format_tasks",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "_format_metrics",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "metrics"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "load_env_file": [
          "open",
          "value.strip",
          "line.strip",
          "line.split",
          "env_file.exists",
          "Path",
          "line.startswith",
          "key.strip",
          "print"
        ],
        "__init__": [],
        "create_epic_issue": [
          "self._format_tasks",
          "epic_data.get",
          "self._format_metrics",
          "self._format_criteria",
          "self._create_issue_via_api",
          "self._create_issue_via_cli"
        ],
        "create_task_issue": [
          "self._create_issue_via_cli",
          "self._format_criteria",
          "task_data.get",
          "self._create_issue_via_api"
        ],
        "_create_issue_via_api": [
          "print",
          "requests.post",
          "response.json"
        ],
        "_create_issue_via_cli": [
          "os.getpid",
          "open",
          "os.unlink",
          "int",
          "subprocess.run",
          "issue_url.split",
          "f.write",
          "print"
        ],
        "_format_criteria": [],
        "_format_tasks": [],
        "_format_metrics": [
          "metrics.items"
        ],
        "load_epics_data": [
          "open",
          "json.load",
          "epics_file.exists",
          "Path",
          "print"
        ],
        "main": [
          "len",
          "load_epics_data",
          "epic_data.get",
          "GitHubIssuesCreator",
          "creator.create_task_issue",
          "os.getenv",
          "epics_data.get",
          "creator.create_epic_issue",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "828b6e86-e935-4db0-be54-06bfd702b81d"
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "module_doc": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct.\nPart of the comprehensive session management system.",
      "functions": [
        {
          "name": "get_current_branch",
          "docstring": "Get current git branch.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "save_json_file",
          "docstring": "Save JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_current_timestamp",
          "docstring": "Get current timestamp in ISO format.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log_event",
          "docstring": "Log an event to worklog.json.",
          "line_range": null,
          "parameters": [
            "event_message",
            "author"
          ],
          "decorators": []
        },
        {
          "name": "switch_session",
          "docstring": "Switch to a different session or create new one.",
          "line_range": null,
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "list_sessions",
          "docstring": "List all available sessions.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_session",
          "docstring": "Show current session details.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_worklog",
          "docstring": "Show recent worklog entries.",
          "line_range": null,
          "parameters": [
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main CLI interface.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "get_current_branch": [
          "subprocess.run"
        ],
        "load_json_file": [
          "open",
          "json.load",
          "print"
        ],
        "save_json_file": [
          "open",
          "json.dump",
          "os.makedirs",
          "print"
        ],
        "get_current_timestamp": [
          "datetime.now"
        ],
        "log_event": [
          "save_json_file",
          "load_json_file",
          "get_current_branch",
          "get_current_timestamp",
          "current_session.get",
          "print"
        ],
        "switch_session": [
          "log_event",
          "save_json_file",
          "load_json_file",
          "get_current_branch",
          "get_current_timestamp",
          "print"
        ],
        "list_sessions": [
          "load_json_file",
          "current_session.get",
          "print"
        ],
        "show_current_session": [
          "load_json_file",
          "current_session.get",
          "print"
        ],
        "show_worklog": [
          "len",
          "load_json_file",
          "reversed",
          "print"
        ],
        "main": [
          "len",
          "log_event",
          "int",
          "switch_session",
          "list_sessions",
          "show_worklog",
          "print",
          "show_current_session"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "ccf38523-6fa8-4e55-9aee-eea2d47dee4e"
    },
    {
      "module_id": "scripts.epic_roadmap_manager",
      "path": "scripts/epic_roadmap_manager.py",
      "category": "core",
      "module_doc": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u0438:\n- \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 roadmap \u0438 \u043f\u043b\u0430\u043d\u043e\u0432\n- \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439\n- \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441 GitHub epics\n- \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u0432",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_roadmap",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_roadmap",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
          "line_range": null,
          "parameters": [
            "self",
            "roadmap"
          ],
          "decorators": []
        },
        {
          "name": "show_overview",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "show_epic_details",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
          "line_range": null,
          "parameters": [
            "self",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
          "line_range": null,
          "parameters": [
            "self",
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "complete_session",
          "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": null,
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EpicRoadmapManager",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_roadmap",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_roadmap",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
              "line_range": null,
              "parameters": [
                "self",
                "roadmap"
              ]
            },
            {
              "name": "show_overview",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "show_epic_details",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
              "line_range": null,
              "parameters": [
                "self",
                "epic_id"
              ]
            },
            {
              "name": "start_session",
              "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
              "line_range": null,
              "parameters": [
                "self",
                "epic_id",
                "session_id"
              ]
            },
            {
              "name": "complete_session",
              "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": null,
              "parameters": [
                "self",
                "session_id"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "load_roadmap": [
          "open",
          "json.load",
          "print"
        ],
        "save_roadmap": [
          "open",
          "json.dump",
          "datetime.now",
          "print"
        ],
        "show_overview": [
          "print",
          "roadmap.get",
          "self.load_roadmap",
          "epics.items",
          "epic.get",
          "stats.get"
        ],
        "show_epic_details": [
          "len",
          "epic_data.get",
          "session.get",
          "roadmap.get",
          "self.load_roadmap",
          "epic.get",
          "print"
        ],
        "start_session": [
          "open",
          "epic.get",
          "datetime.now",
          "epic_data.get",
          "session.get",
          "json.dump",
          "self.save_roadmap",
          "roadmap.get",
          "self.load_roadmap",
          "os.makedirs",
          "sess.get",
          "print"
        ],
        "complete_session": [
          "open",
          "datetime.now",
          "json.load",
          "sessions_log.append",
          "sess.get",
          "session.get",
          "all",
          "os.remove",
          "json.dump",
          "self.save_roadmap",
          "current_session.get",
          "roadmap.get",
          "self.load_roadmap",
          "os.makedirs",
          "epic.get",
          "print"
        ],
        "main": [
          "manager.show_epic_details",
          "argparse.ArgumentParser",
          "manager.start_session",
          "manager.show_overview",
          "manager.complete_session",
          "EpicRoadmapManager",
          "parser.parse_args",
          "parser.add_argument",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "6d53f12e-cf5d-4042-87e1-33f81e8b0320"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.",
      "functions": [
        {
          "name": "detect_project_changes",
          "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_struct_json",
          "docstring": "Create a backup of existing struct.json.",
          "line_range": null,
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_struct_json",
          "docstring": "Validate generated struct.json for basic structure.",
          "line_range": null,
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "update_struct_json",
          "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful",
          "line_range": null,
          "parameters": [
            "root_dir",
            "struct_path",
            "force",
            "config_override"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for auto-update script.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_config": [],
        "load_gitignore": [],
        "generate_json": [
          "ImportError"
        ],
        "detect_project_changes": [
          "logger.info",
          "subprocess.run",
          "logger.warning",
          "Path",
          "file_path.stat"
        ],
        "backup_struct_json": [
          "logger.info",
          "datetime.now",
          "logger.error",
          "subprocess.run",
          "Path"
        ],
        "validate_struct_json": [
          "open",
          "logger.error",
          "json.load",
          "logger.info"
        ],
        "update_struct_json": [
          "logger.info",
          "open",
          "validate_struct_json",
          "detect_project_changes",
          "backup_struct_json",
          "logger.error",
          "subprocess.run",
          "load_config",
          "load_gitignore",
          "cli_config.get",
          "json.dump",
          "config.get",
          "os.getcwd",
          "generate_json",
          "config.update"
        ],
        "main": [
          "argparse.ArgumentParser",
          "detect_project_changes",
          "update_struct_json",
          "sys.exit",
          "os.getcwd",
          "parser.parse_args",
          "logging.getLogger",
          "parser.add_argument",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "generate_json",
        "json",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "4e46b18b-324e-4b3c-aef5-9bceed2b40a4"
    },
    {
      "module_id": "scripts.create_comprehensive_index",
      "path": "scripts/create_comprehensive_index.py",
      "category": "core",
      "module_doc": "Comprehensive Project Index Creator\nScans ALL project directories for tasks, ideas, sessions, and concepts.\nProvides complete visibility into project state and unaccounted innovations.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize comprehensive extraction patterns.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "scan_all_directories",
          "docstring": "Scan all configured directories comprehensively.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_scan_directory",
          "docstring": "Scan a specific directory according to its configuration.",
          "line_range": null,
          "parameters": [
            "self",
            "directory",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_scan_root_files",
          "docstring": "Scan root-level files.",
          "line_range": null,
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_should_scan_file",
          "docstring": "Check if file should be scanned based on extension.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "allowed_types"
          ],
          "decorators": []
        },
        {
          "name": "_scan_file",
          "docstring": "Scan individual file for project items.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_text",
          "docstring": "Extract items from text/markdown files.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_json",
          "docstring": "Extract items from JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_item_from_match",
          "docstring": "Create ProjectItem from regex match.",
          "line_range": null,
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_checkbox_item",
          "docstring": "Create ProjectItem from checkbox match.",
          "line_range": null,
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_simple_item",
          "docstring": "Create simple ProjectItem.",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_status",
          "docstring": "Detect item status from surrounding content.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_priority",
          "docstring": "Detect item priority from surrounding content.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "position",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_assess_strategic_value",
          "docstring": "Assess strategic value of item.",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract context around position.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "position",
            "length"
          ],
          "decorators": []
        },
        {
          "name": "_detect_category",
          "docstring": "Detect item category.",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_effort",
          "docstring": "Estimate effort required.",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tags",
          "docstring": "Extract relevant tags.",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "content",
            "source_dir"
          ],
          "decorators": []
        },
        {
          "name": "_is_noise_checkbox",
          "docstring": "Check if checkbox is noise (navigation, etc).",
          "line_range": null,
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "_parse_json_files",
          "docstring": "Parse structured JSON files for existing data.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_process_structured_json",
          "docstring": "Process structured JSON data.",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_add_json_item",
          "docstring": "Add item from JSON structure.",
          "line_range": null,
          "parameters": [
            "self",
            "item",
            "file_path",
            "item_type"
          ],
          "decorators": []
        },
        {
          "name": "_assess_json_strategic_value",
          "docstring": "Assess strategic value from JSON item.",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_extract_innovation_concepts",
          "docstring": "Extract innovation concepts from content.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_enhance_items",
          "docstring": "Post-process items to enhance metadata and find relationships.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_find_related_items",
          "docstring": "Find related items based on content similarity.",
          "line_range": null,
          "parameters": [
            "self",
            "item",
            "id_map",
            "title_map"
          ],
          "decorators": []
        },
        {
          "name": "generate_comprehensive_report",
          "docstring": "Generate comprehensive analysis report.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_comprehensive_index",
          "docstring": "Save comprehensive index and reports.",
          "line_range": null,
          "parameters": [
            "self",
            "output_dir"
          ],
          "decorators": []
        },
        {
          "name": "_generate_analysis_report",
          "docstring": "Generate human-readable analysis report.",
          "line_range": null,
          "parameters": [
            "self",
            "report"
          ],
          "decorators": []
        },
        {
          "name": "_format_dict",
          "docstring": "Format dictionary for markdown display.",
          "line_range": null,
          "parameters": [
            "self",
            "d"
          ],
          "decorators": []
        },
        {
          "name": "_format_items_list",
          "docstring": "Format items list for markdown display.",
          "line_range": null,
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_tasks",
          "docstring": "Extract tasks from JSON tasks array.",
          "line_range": null,
          "parameters": [
            "self",
            "tasks_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_ideas",
          "docstring": "Extract ideas from JSON ideas array.",
          "line_range": null,
          "parameters": [
            "self",
            "ideas_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_sessions",
          "docstring": "Extract sessions from JSON sessions array.",
          "line_range": null,
          "parameters": [
            "self",
            "sessions_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_array",
          "docstring": "Extract items from JSON array.",
          "line_range": null,
          "parameters": [
            "self",
            "array_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ProjectItem",
          "docstring": "Unified representation of any project item (task, idea, session, concept).",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "ComprehensiveIndexer",
          "docstring": "Comprehensive indexer for all project content.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize comprehensive extraction patterns.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "scan_all_directories",
              "docstring": "Scan all configured directories comprehensively.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_scan_directory",
              "docstring": "Scan a specific directory according to its configuration.",
              "line_range": null,
              "parameters": [
                "self",
                "directory",
                "config"
              ]
            },
            {
              "name": "_scan_root_files",
              "docstring": "Scan root-level files.",
              "line_range": null,
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "_should_scan_file",
              "docstring": "Check if file should be scanned based on extension.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "allowed_types"
              ]
            },
            {
              "name": "_scan_file",
              "docstring": "Scan individual file for project items.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_text",
              "docstring": "Extract items from text/markdown files.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_json",
              "docstring": "Extract items from JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_item_from_match",
              "docstring": "Create ProjectItem from regex match.",
              "line_range": null,
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_checkbox_item",
              "docstring": "Create ProjectItem from checkbox match.",
              "line_range": null,
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_simple_item",
              "docstring": "Create simple ProjectItem.",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority",
                "position"
              ]
            },
            {
              "name": "_detect_status",
              "docstring": "Detect item status from surrounding content.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "position"
              ]
            },
            {
              "name": "_detect_priority",
              "docstring": "Detect item priority from surrounding content.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "position",
                "default"
              ]
            },
            {
              "name": "_assess_strategic_value",
              "docstring": "Assess strategic value of item.",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract context around position.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "position",
                "length"
              ]
            },
            {
              "name": "_detect_category",
              "docstring": "Detect item category.",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_estimate_effort",
              "docstring": "Estimate effort required.",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_tags",
              "docstring": "Extract relevant tags.",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "content",
                "source_dir"
              ]
            },
            {
              "name": "_is_noise_checkbox",
              "docstring": "Check if checkbox is noise (navigation, etc).",
              "line_range": null,
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "_parse_json_files",
              "docstring": "Parse structured JSON files for existing data.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_process_structured_json",
              "docstring": "Process structured JSON data.",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "file_path"
              ]
            },
            {
              "name": "_add_json_item",
              "docstring": "Add item from JSON structure.",
              "line_range": null,
              "parameters": [
                "self",
                "item",
                "file_path",
                "item_type"
              ]
            },
            {
              "name": "_assess_json_strategic_value",
              "docstring": "Assess strategic value from JSON item.",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_extract_innovation_concepts",
              "docstring": "Extract innovation concepts from content.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_enhance_items",
              "docstring": "Post-process items to enhance metadata and find relationships.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_find_related_items",
              "docstring": "Find related items based on content similarity.",
              "line_range": null,
              "parameters": [
                "self",
                "item",
                "id_map",
                "title_map"
              ]
            },
            {
              "name": "generate_comprehensive_report",
              "docstring": "Generate comprehensive analysis report.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_comprehensive_index",
              "docstring": "Save comprehensive index and reports.",
              "line_range": null,
              "parameters": [
                "self",
                "output_dir"
              ]
            },
            {
              "name": "_generate_analysis_report",
              "docstring": "Generate human-readable analysis report.",
              "line_range": null,
              "parameters": [
                "self",
                "report"
              ]
            },
            {
              "name": "_format_dict",
              "docstring": "Format dictionary for markdown display.",
              "line_range": null,
              "parameters": [
                "self",
                "d"
              ]
            },
            {
              "name": "_format_items_list",
              "docstring": "Format items list for markdown display.",
              "line_range": null,
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "_extract_json_tasks",
              "docstring": "Extract tasks from JSON tasks array.",
              "line_range": null,
              "parameters": [
                "self",
                "tasks_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_ideas",
              "docstring": "Extract ideas from JSON ideas array.",
              "line_range": null,
              "parameters": [
                "self",
                "ideas_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_sessions",
              "docstring": "Extract sessions from JSON sessions array.",
              "line_range": null,
              "parameters": [
                "self",
                "sessions_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_array",
              "docstring": "Extract items from JSON array.",
              "line_range": null,
              "parameters": [
                "self",
                "array_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._init_patterns"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "scan_all_directories": [
          "logger.info",
          "len",
          "self._parse_json_files",
          "self._scan_directory",
          "self._scan_root_files",
          "self._enhance_items"
        ],
        "_scan_directory": [
          "logger.info",
          "self._scan_file",
          "self._should_scan_file",
          "file_path.is_file",
          "dir_path.glob",
          "logger.warning",
          "dir_path.exists"
        ],
        "_scan_root_files": [
          "file_path.is_file",
          "self._scan_file",
          "self._should_scan_file"
        ],
        "_should_scan_file": [],
        "_scan_file": [
          "open",
          "logger.error",
          "f.read",
          "self._extract_from_text",
          "self._extract_from_json"
        ],
        "_extract_from_text": [
          "self._create_checkbox_item",
          "self._extract_innovation_concepts",
          "self._create_simple_item",
          "match.group",
          "self._create_item_from_match",
          "match.start",
          "self._is_noise_checkbox"
        ],
        "_extract_from_json": [
          "self._extract_json_array",
          "self._extract_json_tasks",
          "json.loads",
          "logger.warning",
          "self._extract_json_sessions",
          "isinstance",
          "self._extract_json_ideas"
        ],
        "_create_item_from_match": [
          "ProjectItem",
          "datetime.now",
          "str",
          "self._assess_strategic_value",
          "self._extract_context",
          "self._extract_tags",
          "self._estimate_effort",
          "match.group",
          "title.strip",
          "self._detect_priority",
          "match.start",
          "self._detect_category",
          "self._detect_status"
        ],
        "_create_checkbox_item": [
          "ProjectItem",
          "datetime.now",
          "str",
          "self._assess_strategic_value",
          "self._extract_context",
          "self._estimate_effort",
          "self._detect_priority",
          "match.group",
          "self._extract_tags",
          "match.start",
          "self._detect_category"
        ],
        "_create_simple_item": [
          "ProjectItem",
          "datetime.now",
          "self._extract_context",
          "title.strip",
          "str"
        ],
        "_detect_status": [
          "max"
        ],
        "_detect_priority": [
          "max"
        ],
        "_assess_strategic_value": [],
        "_extract_context": [
          "min",
          "max",
          "len"
        ],
        "_detect_category": [
          "any",
          "title.lower"
        ],
        "_estimate_effort": [
          "any"
        ],
        "_extract_tags": [
          "source_dir.replace",
          "tags.append",
          "title.lower"
        ],
        "_is_noise_checkbox": [
          "len",
          "text.strip",
          "any",
          "text.lower"
        ],
        "_parse_json_files": [
          "open",
          "json.load",
          "logger.error",
          "self._process_structured_json",
          "file_path.exists"
        ],
        "_process_structured_json": [
          "isinstance",
          "self._add_json_item"
        ],
        "_add_json_item": [
          "len",
          "ProjectItem",
          "self._assess_json_strategic_value",
          "datetime.now",
          "item.get",
          "str"
        ],
        "_assess_json_strategic_value": [
          "item.get"
        ],
        "_extract_innovation_concepts": [
          "len",
          "content.split",
          "line.strip",
          "ProjectItem",
          "content.find",
          "datetime.now",
          "self._extract_context",
          "enumerate",
          "source_dir.replace",
          "innovation_lines.append",
          "str"
        ],
        "_enhance_items": [
          "logger.info",
          "re.sub",
          "self._find_related_items"
        ],
        "_find_related_items": [
          "re.findall",
          "related.append",
          "ref_type.upper"
        ],
        "generate_comprehensive_report": [
          "len",
          "by_type.get",
          "datetime.now",
          "by_strategic_value.get",
          "by_status.get",
          "asdict",
          "by_source.get",
          "by_priority.get"
        ],
        "save_comprehensive_index": [
          "open",
          "logger.info",
          "len",
          "json.dump",
          "f.write",
          "self.generate_comprehensive_report",
          "os.makedirs",
          "self._generate_analysis_report"
        ],
        "_generate_analysis_report": [
          "len",
          "self._format_items_list",
          "self._format_dict"
        ],
        "_format_dict": [
          "d.items",
          "sorted"
        ],
        "_format_items_list": [
          "result.append"
        ],
        "_extract_json_tasks": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_ideas": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_sessions": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_array": [
          "isinstance",
          "self._add_json_item",
          "str"
        ],
        "main": [
          "logger.info",
          "len",
          "by_strategic.get",
          "indexer.save_comprehensive_index",
          "ComprehensiveIndexer",
          "indexer.scan_all_directories",
          "print"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "1e8b9384-3400-4eca-8091-fc4e1f4acbb7"
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "9c2c5563-2c94-4268-87ab-c02ac8c64ae2"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "config_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "check_github_cli",
          "docstring": "Check if GitHub CLI is installed and authenticated",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "list_projects",
          "docstring": "List available GitHub Projects (via gh-projects extension)",
          "line_range": null,
          "parameters": [
            "self",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "create_project_item",
          "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
          "line_range": null,
          "parameters": [
            "self",
            "project_number",
            "title",
            "body",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_tasks_to_project",
          "docstring": "Export tasks to GitHub Project",
          "line_range": null,
          "parameters": [
            "self",
            "tasks",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_ideas_to_project",
          "docstring": "Export ideas to GitHub Project",
          "line_range": null,
          "parameters": [
            "self",
            "ideas",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "filter_data",
          "docstring": "Filter data by status and priority",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "status_filter",
            "priority_filter"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExportScript",
          "docstring": "Extended exporter with command-line interface and GitHub CLI integration",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "config_path",
                "dry_run"
              ]
            },
            {
              "name": "check_github_cli",
              "docstring": "Check if GitHub CLI is installed and authenticated",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "list_projects",
              "docstring": "List available GitHub Projects (via gh-projects extension)",
              "line_range": null,
              "parameters": [
                "self",
                "owner",
                "repo"
              ]
            },
            {
              "name": "create_project_item",
              "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
              "line_range": null,
              "parameters": [
                "self",
                "project_number",
                "title",
                "body",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_tasks_to_project",
              "docstring": "Export tasks to GitHub Project",
              "line_range": null,
              "parameters": [
                "self",
                "tasks",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_ideas_to_project",
              "docstring": "Export ideas to GitHub Project",
              "line_range": null,
              "parameters": [
                "self",
                "ideas",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "filter_data",
              "docstring": "Filter data by status and priority",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "status_filter",
                "priority_filter"
              ]
            }
          ],
          "bases": [
            "GitHubProjectsExporter"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "super"
        ],
        "check_github_cli": [
          "self._run_gh_command",
          "print"
        ],
        "list_projects": [
          "isinstance",
          "json.loads",
          "self._run_gh_command",
          "print"
        ],
        "create_project_item": [
          "output.strip",
          "self._run_gh_command",
          "str",
          "print"
        ],
        "export_tasks_to_project": [
          "len",
          "task.get",
          "self.create_project_item",
          "self.format_task_for_github",
          "print"
        ],
        "export_ideas_to_project": [
          "len",
          "self.create_project_item",
          "self.format_idea_for_github",
          "idea.get",
          "print"
        ],
        "filter_data": [
          "item.get"
        ],
        "main": [
          "exporter.export_tasks_to_project",
          "argparse.ArgumentParser",
          "exporter.export_ideas_to_project",
          "GitHubProjectsExportScript",
          "exporter.filter_data",
          "exporter.load_official_data",
          "exporter.check_github_cli",
          "sys.exit",
          "exporter._save_mapping",
          "parser.parse_args",
          "parser.add_argument",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "GitHubProjectsExporter",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "datetime",
        "json",
        "llmstruct.gh_view",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "81f35d11-3a6c-4a1c-b7f7-261f48d02bc3"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "logger.info",
          "json.load",
          "broken_links.append",
          "logger.error",
          "logger.warning",
          "Path",
          "target_file.exists",
          "enumerate",
          "json.dump",
          "source_file.exists",
          "idea.get"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "0010c3a6-89aa-4448-a66d-44b0e1e4f1ca"
    },
    {
      "module_id": "scripts.fix_hardcoded_usernames",
      "path": "scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "module_doc": "Fix Hardcoded Usernames Script\nAutomatically detects and replaces hardcoded usernames with dynamic values from .env or git config.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_detect_user_info",
          "docstring": "Detect user info from .env, git config, or environment.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_env",
          "docstring": "Load user info from .env file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_git",
          "docstring": "Load user info from git config.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_environment",
          "docstring": "Load user info from environment variables.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_user_info",
          "docstring": "Get detected user information.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_files",
          "docstring": "Scan for files containing hardcoded usernames.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "fix_file",
          "docstring": "Fix hardcoded usernames in a single file.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "fix_all_files",
          "docstring": "Fix hardcoded usernames in all project files.",
          "line_range": null,
          "parameters": [
            "self",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "generate_env_template",
          "docstring": "Generate .env template with required variables.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "UserInfoDetector",
          "docstring": "Detect user information from various sources.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_detect_user_info",
              "docstring": "Detect user info from .env, git config, or environment.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_env",
              "docstring": "Load user info from .env file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_git",
              "docstring": "Load user info from git config.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_environment",
              "docstring": "Load user info from environment variables.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_user_info",
              "docstring": "Get detected user information.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "HardcodeFixer",
          "docstring": "Fix hardcoded usernames in project files.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_files",
              "docstring": "Scan for files containing hardcoded usernames.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "fix_file",
              "docstring": "Fix hardcoded usernames in a single file.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "dry_run"
              ]
            },
            {
              "name": "fix_all_files",
              "docstring": "Fix hardcoded usernames in all project files.",
              "line_range": null,
              "parameters": [
                "self",
                "dry_run"
              ]
            },
            {
              "name": "generate_env_template",
              "docstring": "Generate .env template with required variables.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "UserInfoDetector"
        ],
        "_detect_user_info": [
          "logger.info",
          "self._load_from_environment",
          "self._load_from_git",
          "env_info.items",
          "env_vars.items",
          "user_info.update",
          "self._load_from_env",
          "user_info.get"
        ],
        "_load_from_env": [
          "open",
          "value.strip",
          "line.strip",
          "line.split",
          "env_file.exists",
          "env_vars.get",
          "logger.error",
          "line.startswith",
          "key.strip"
        ],
        "_load_from_git": [
          "logger.error",
          "subprocess.run",
          "re.search",
          "match.group"
        ],
        "_load_from_environment": [],
        "get_user_info": [],
        "scan_files": [
          "open",
          "f.read",
          "content.count",
          "logger.warning",
          "files_with_hardcode.append",
          "any",
          "str"
        ],
        "fix_file": [
          "open",
          "logger.info",
          "f.read",
          "content.count",
          "logger.error",
          "content.replace",
          "f.write"
        ],
        "fix_all_files": [
          "logger.info",
          "len",
          "self.fix_file",
          "self.scan_files",
          "str"
        ],
        "generate_env_template": [],
        "main": [
          "open",
          "logger.info",
          "len",
          "argparse.ArgumentParser",
          "replacements.items",
          "fixer.fix_all_files",
          "results.items",
          "Path",
          "fixer.generate_env_template",
          "HardcodeFixer",
          "f.write",
          "parser.parse_args",
          "fixer.scan_files",
          "parser.add_argument",
          "print"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b44485b5-05f6-45fd-bd2a-4dd6d198c156"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.error",
          "validate",
          "logger.warning",
          "RefResolver"
        ],
        "backup_files": [
          "shutil.copytree",
          "target_dir.exists",
          "datetime.now",
          "logger.info"
        ],
        "deploy_embedded_files": [
          "logger.info",
          "backup_files",
          "target_path.exists",
          "logger.error",
          "logger.warning",
          "validate_json",
          "Path",
          "EMBEDDED_FILES.get",
          "json.dump",
          "Path.cwd",
          "target_path.open",
          "f.write"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "a27f4f48-264b-4dd7-9cdb-13fd5d95712c"
    },
    {
      "module_id": "scripts.validate_epics",
      "path": "scripts/validate_epics.py",
      "category": "core",
      "module_doc": "Epic Data Validator\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c GitHub issues",
      "functions": [
        {
          "name": "validate_epic_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u044d\u043f\u0438\u043a\u0430",
          "line_range": null,
          "parameters": [
            "epic"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": null,
          "parameters": [
            "task",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "validate_priorities",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u0432",
          "line_range": null,
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_ids",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c ID \u0437\u0430\u0434\u0430\u0447",
          "line_range": null,
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_epic_structure": [
          "errors.append",
          "isinstance"
        ],
        "validate_task_structure": [
          "errors.append",
          "isinstance",
          "task.get"
        ],
        "validate_priorities": [
          "errors.append",
          "epic.get",
          "data.get",
          "task.get"
        ],
        "validate_task_ids": [
          "set",
          "data.get",
          "task.get",
          "seen_ids.add",
          "errors.append",
          "epic.get"
        ],
        "main": [
          "open",
          "len",
          "all_errors.append",
          "json.load",
          "e.get",
          "epics_file.exists",
          "all_errors.extend",
          "sum",
          "Path",
          "validate_priorities",
          "sys.exit",
          "validate_task_structure",
          "isinstance",
          "validate_task_ids",
          "epic.get",
          "validate_epic_structure",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "pathlib",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "972b0b8c-197d-4b51-ae56-1255c2229d37"
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "module_doc": "JSON Validation Script\nValidates JSON files against their respective schemas.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate a JSON file against a schema.",
          "line_range": null,
          "parameters": [
            "file_path",
            "schema_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "open",
          "json.load",
          "print"
        ],
        "validate_json": [
          "load_json",
          "str",
          "Path",
          "Draft7Validator",
          "validator.validate",
          "print"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "pathlib",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "9e79490b-cdb7-43f4-919a-a039b800438d"
    },
    {
      "module_id": "scripts.create_tasks_index",
      "path": "scripts/create_tasks_index.py",
      "category": "core",
      "module_doc": "Tasks Index Creator\nScans all documentation files and creates comprehensive index of tasks, EPICs, TODOs, and other actionable items.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize regex patterns for task extraction.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "extract_from_markdown",
          "docstring": "Extract tasks from markdown file.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_status",
          "docstring": "Extract document status.",
          "line_range": null,
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_priority",
          "docstring": "Extract document priority.",
          "line_range": null,
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_date",
          "docstring": "Extract document date.",
          "line_range": null,
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_epics",
          "docstring": "Extract EPIC items.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tasks",
          "docstring": "Extract explicit task items.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_todos",
          "docstring": "Extract TODO items.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_phases",
          "docstring": "Extract phase/step items.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_checkboxes",
          "docstring": "Extract checkbox items as tasks.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract surrounding context for a match.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "start",
            "end",
            "context_lines"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_documentation",
          "docstring": "Scan all documentation files for tasks.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_index",
          "docstring": "Generate comprehensive task index.",
          "line_range": null,
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "generate_summary_report",
          "docstring": "Generate human-readable summary report.",
          "line_range": null,
          "parameters": [
            "self",
            "index"
          ],
          "decorators": []
        },
        {
          "name": "save_index",
          "docstring": "Save index and summary to files.",
          "line_range": null,
          "parameters": [
            "self",
            "index",
            "summary",
            "output_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Task",
          "docstring": "Represents a single task or actionable item.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "TaskExtractor",
          "docstring": "Extract tasks from various document formats.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize regex patterns for task extraction.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "extract_from_markdown",
              "docstring": "Extract tasks from markdown file.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_status",
              "docstring": "Extract document status.",
              "line_range": null,
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_priority",
              "docstring": "Extract document priority.",
              "line_range": null,
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_date",
              "docstring": "Extract document date.",
              "line_range": null,
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_epics",
              "docstring": "Extract EPIC items.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_tasks",
              "docstring": "Extract explicit task items.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_todos",
              "docstring": "Extract TODO items.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_phases",
              "docstring": "Extract phase/step items.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_checkboxes",
              "docstring": "Extract checkbox items as tasks.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract surrounding context for a match.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "start",
                "end",
                "context_lines"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TaskIndexGenerator",
          "docstring": "Generate comprehensive task index.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_documentation",
              "docstring": "Scan all documentation files for tasks.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_index",
              "docstring": "Generate comprehensive task index.",
              "line_range": null,
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "generate_summary_report",
              "docstring": "Generate human-readable summary report.",
              "line_range": null,
              "parameters": [
                "self",
                "index"
              ]
            },
            {
              "name": "save_index",
              "docstring": "Save index and summary to files.",
              "line_range": null,
              "parameters": [
                "self",
                "index",
                "summary",
                "output_dir"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "TaskExtractor"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "extract_from_markdown": [
          "open",
          "f.read",
          "logger.error",
          "self._extract_checkboxes",
          "self._extract_phases",
          "self._extract_date",
          "self._extract_status",
          "self._extract_epics",
          "self._extract_priority",
          "self._extract_tasks",
          "tasks.extend",
          "self._extract_todos"
        ],
        "_extract_status": [
          "match.group"
        ],
        "_extract_priority": [
          "match.group"
        ],
        "_extract_date": [
          "datetime.now",
          "match.group"
        ],
        "_extract_epics": [
          "tasks.append",
          "self._extract_context",
          "match.group",
          "Task",
          "match.start",
          "str",
          "match.end"
        ],
        "_extract_tasks": [
          "tasks.append",
          "self._extract_context",
          "match.group",
          "Task",
          "match.start",
          "str",
          "match.end"
        ],
        "_extract_todos": [
          "tasks.append",
          "match.group",
          "Task",
          "match.start",
          "str"
        ],
        "_extract_phases": [
          "tasks.append",
          "self._extract_context",
          "match.group",
          "Task",
          "match.start",
          "str",
          "match.end"
        ],
        "_extract_checkboxes": [
          "task_title.upper",
          "match.start",
          "tasks.append",
          "match.group",
          "Task",
          "any",
          "str"
        ],
        "_extract_context": [
          "len",
          "content.split",
          "max",
          "context.strip",
          "min"
        ],
        "scan_documentation": [
          "logger.info",
          "docs_dir.exists",
          "all_tasks.extend",
          "docs_dir.glob"
        ],
        "generate_index": [
          "len",
          "by_category.items",
          "datetime.now",
          "by_priority.items",
          "asdict",
          "by_status.items",
          "by_file.items"
        ],
        "generate_summary_report": [
          "len",
          "file_categories.items",
          "sorted",
          "priority.upper",
          "Path",
          "status.upper",
          "category.upper"
        ],
        "save_index": [
          "open",
          "logger.info",
          "output_path.mkdir",
          "Path",
          "json.dump",
          "f.write"
        ],
        "main": [
          "logger.info",
          "len",
          "by_category.items",
          "argparse.ArgumentParser",
          "sorted",
          "by_category.get",
          "generator.generate_summary_report",
          "generator.generate_index",
          "generator.save_index",
          "by_status.items",
          "print",
          "by_status.get",
          "parser.parse_args",
          "TaskIndexGenerator",
          "parser.add_argument",
          "generator.scan_documentation"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d9b7da8a-ab2c-46f7-9939-4c8fac38bbe4"
    },
    {
      "module_id": "scripts.team.__init__",
      "path": "scripts/team/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "6f510ab8-b41a-4f3a-bc6c-8e995be79187"
    }
  ]
}