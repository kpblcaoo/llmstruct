{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-05-30T13:09:02.917614Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": [
      "AI-enhanced development workflow",
      "MP-002 Smart Wrapper implementation",
      "Metrics and analytics system"
    ],
    "stats": {
      "modules_count": 87,
      "functions_count": 845,
      "classes_count": 85,
      "call_edges_count": 2423
    },
    "artifact_id": "c2fb75e7-dda5-4900-a37f-12250f0f6532",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "e3af1ec9-880e-43d3-b818-28cb06d8f13f",
        "metadata": {}
      },
      {
        "path": "AI_CLI_INSTRUCTIONS.md",
        "type": "file",
        "artifact_id": "ae74208f-7004-4697-b14d-bd5af3711a70",
        "metadata": {}
      },
      {
        "path": "AI_INTEGRATION_SETUP_GUIDE.md",
        "type": "file",
        "artifact_id": "9a1bee17-168f-4e74-87b3-c56eb4e3f105",
        "metadata": {}
      },
      {
        "path": "AI_TESTING_INSTRUCTIONS.md",
        "type": "file",
        "artifact_id": "4968bafe-f98a-44af-82df-ca07d69a8817",
        "metadata": {}
      },
      {
        "path": "AI_VSCODE_INSTRUCTIONS.md",
        "type": "file",
        "artifact_id": "5ccd8761-826f-44bf-94dc-5685ee1d6295",
        "metadata": {}
      },
      {
        "path": "CHANGELOG.md",
        "type": "file",
        "artifact_id": "934671d4-2467-4c3f-9e85-cff6b87db8c6",
        "metadata": {}
      },
      {
        "path": "CLEAN_COMMIT_MESSAGE.md",
        "type": "file",
        "artifact_id": "555f8a0f-0552-4346-aa6f-e4a364168a8c",
        "metadata": {}
      },
      {
        "path": "CLEAN_CONTEXT_INIT.md",
        "type": "file",
        "artifact_id": "43c0cabd-e93a-4281-b2c5-c08fae365ebd",
        "metadata": {}
      },
      {
        "path": "COMMIT_MESSAGE.md",
        "type": "file",
        "artifact_id": "cc71c70b-4eda-4f14-a036-cad637100f42",
        "metadata": {}
      },
      {
        "path": "COMPREHENSIVE_PROJECT_OVERVIEW.md",
        "type": "file",
        "artifact_id": "d282adb6-5add-4360-b1ae-653444514316",
        "metadata": {}
      },
      {
        "path": "CRITICAL_SESSION_STATE_2025-05-28.md",
        "type": "file",
        "artifact_id": "33a4af56-f199-4240-81a8-aa92b69d415e",
        "metadata": {}
      },
      {
        "path": "CURSOR_AI_EXAMPLES.md",
        "type": "file",
        "artifact_id": "f2fdf4ed-28d4-4f2a-88c2-1bb1a44f51f4",
        "metadata": {}
      },
      {
        "path": "CURSOR_EVALUATION_PLAN.md",
        "type": "file",
        "artifact_id": "3d61acce-502c-412f-a238-ad2b5b0bd9b5",
        "metadata": {}
      },
      {
        "path": "GITHUB_PROJECTS_README.md",
        "type": "file",
        "artifact_id": "3be9d433-c39f-4fd2-b008-f19f8bee709a",
        "metadata": {}
      },
      {
        "path": "GROK_REVIEW_REQUEST.md",
        "type": "file",
        "artifact_id": "e72f5eca-20d4-419f-865c-8d6ac8683663",
        "metadata": {}
      },
      {
        "path": "IDEAS_TASKS_ORGANIZATION_PLAN.md",
        "type": "file",
        "artifact_id": "f39d7ec5-4d77-4dee-8986-8bc0e1f7192d",
        "metadata": {}
      },
      {
        "path": "LLM_CONTEXT_CAPABILITY_TESTING_COMPLETION_REPORT.md",
        "type": "file",
        "artifact_id": "14b88075-6b47-443c-9cb1-abb0db1b6d55",
        "metadata": {}
      },
      {
        "path": "LLM_CONTEXT_CAPABILITY_TESTING_PLAN.md",
        "type": "file",
        "artifact_id": "6b935732-1253-4984-97f3-b52d33a13926",
        "metadata": {}
      },
      {
        "path": "MEGAPROJECT_PR_DESCRIPTION.md",
        "type": "file",
        "artifact_id": "a7d5d524-4a41-485b-879c-41502830f8e5",
        "metadata": {}
      },
      {
        "path": "META_SESSION_AI_IMPLEMENTATION.md",
        "type": "file",
        "artifact_id": "ac28a1c0-a750-46c7-b5c9-3c2e2dd867fd",
        "metadata": {}
      },
      {
        "path": "META_SESSION_PLAN.md",
        "type": "file",
        "artifact_id": "4e05ac3f-4746-485a-bf82-eedc9d7099f0",
        "metadata": {}
      },
      {
        "path": "META_WORKING_NOTE.md",
        "type": "file",
        "artifact_id": "b88af5ae-5348-479b-8a21-e363e678596c",
        "metadata": {}
      },
      {
        "path": "MODULAR_CLI_COMPLETION_REPORT.md",
        "type": "file",
        "artifact_id": "d388ad45-414d-46d1-ba25-ad7a28be5c45",
        "metadata": {}
      },
      {
        "path": "PR_DESCRIPTION.md",
        "type": "file",
        "artifact_id": "d8d68a13-2fc3-4ce9-a556-d85d95441427",
        "metadata": {}
      },
      {
        "path": "PR_SUMMARY.md",
        "type": "file",
        "artifact_id": "a483b557-0ef5-4a16-b9d0-bd0b6d226c09",
        "metadata": {}
      },
      {
        "path": "QUICK_START.md",
        "type": "file",
        "artifact_id": "6374f5c6-f052-4fa5-842e-11ca4b2d794d",
        "metadata": {}
      },
      {
        "path": "README.md",
        "type": "file",
        "artifact_id": "43a7e141-4087-41ba-a853-2915d0a0a88b",
        "metadata": {}
      },
      {
        "path": "README_GITHUB_ROLLOUT.md",
        "type": "file",
        "artifact_id": "7513b0d0-ee0e-4d5b-9a92-2119a48cabf4",
        "metadata": {}
      },
      {
        "path": "SEAMLESS_AI_INTEGRATION_PLAN.md",
        "type": "file",
        "artifact_id": "6b5d7cf7-5647-41c4-ab83-c1ef125ed355",
        "metadata": {}
      },
      {
        "path": "SECURITY_IMPLEMENTATION_SUMMARY.md",
        "type": "file",
        "artifact_id": "2b14a474-66b7-493f-a3a1-77c21fd2ec52",
        "metadata": {}
      },
      {
        "path": "SESSION_INTEGRATION_REPORT.md",
        "type": "file",
        "artifact_id": "5281741a-b647-4670-8ba6-68aec80ea56c",
        "metadata": {}
      },
      {
        "path": "SESSION_MANAGEMENT_GUIDE.md",
        "type": "file",
        "artifact_id": "3f0ff0c4-0c22-449d-aba7-908cc6d2198e",
        "metadata": {}
      },
      {
        "path": "SESSION_TASKS.md",
        "type": "file",
        "artifact_id": "41e4df24-9641-4b11-9044-ee849ec6bcde",
        "metadata": {}
      },
      {
        "path": "STRATEGIC_ROADMAP_VISION_2025-05-29.md",
        "type": "file",
        "artifact_id": "160f937d-0d75-4fbd-af1d-b257147023db",
        "metadata": {}
      },
      {
        "path": "TECHNICAL_ROADMAP.md",
        "type": "file",
        "artifact_id": "25c822e6-8a98-4eb3-987a-112d7c5d154a",
        "metadata": {}
      },
      {
        "path": "UNKNOWN.egg-info",
        "type": "directory",
        "artifact_id": "84c99ece-485c-46d9-940b-9b5386047d54",
        "metadata": {}
      },
      {
        "path": "WORKFLOW_CURSOR_INTEGRATION_REPORT.md",
        "type": "file",
        "artifact_id": "a4da38d8-ee0d-4c67-a7cc-87eeb2de4ef1",
        "metadata": {}
      },
      {
        "path": "auto_init_ai_system.py",
        "type": "file",
        "artifact_id": "d08df869-7783-42fe-9fb9-3b62036de56c",
        "metadata": {}
      },
      {
        "path": "board_cli.py",
        "type": "file",
        "artifact_id": "02d226b5-9cde-4784-8990-c57ff33f8704",
        "metadata": {}
      },
      {
        "path": "collector.py",
        "type": "file",
        "artifact_id": "9c108e85-1e08-4ba9-bd33-429728a5630f",
        "metadata": {}
      },
      {
        "path": "concept_innovative.json",
        "type": "file",
        "artifact_id": "69d53eea-c5d8-44f9-8e9c-ffb792ab16b1",
        "metadata": {}
      },
      {
        "path": "concept_v0.3.0.json",
        "type": "file",
        "artifact_id": "6bf369f1-d184-48c7-a31e-3a595ada7ff6",
        "metadata": {}
      },
      {
        "path": "cursor_integration_strategy.md",
        "type": "file",
        "artifact_id": "bfd2040a-83cf-4ebd-b7ab-9c1262298a78",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration",
        "type": "directory",
        "artifact_id": "685c6dea-320a-4800-b36b-e5193f7f3876",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/INSTALL.md",
        "type": "file",
        "artifact_id": "b1a60dbe-551d-45a7-962f-4bbceb1f0bf0",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/PACKAGE_OVERVIEW.md",
        "type": "file",
        "artifact_id": "dcdf0e2a-da3a-4f27-a84c-75336a07e8b7",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/README.md",
        "type": "file",
        "artifact_id": "15c3df45-3ff3-4f28-83c7-56f98a7d92f0",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs",
        "type": "directory",
        "artifact_id": "e27016bb-2ca0-432b-88bb-0f1cbc56e644",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/CURSOR_AI_EXAMPLES.md",
        "type": "file",
        "artifact_id": "68a68a8b-102b-423b-9d86-90d4b9d69f36",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/SESSION_INTEGRATION_REPORT.md",
        "type": "file",
        "artifact_id": "fc152e0a-3dab-4df6-b925-b061848b5931",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/SESSION_MANAGEMENT_GUIDE.md",
        "type": "file",
        "artifact_id": "2199a843-9344-455e-8bdd-85100d8e72cb",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/WORKFLOW_CURSOR_INTEGRATION_REPORT.md",
        "type": "file",
        "artifact_id": "8189d277-c3e2-4beb-96cf-b40c76a064d5",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/files",
        "type": "directory",
        "artifact_id": "23671c75-25dd-498b-a0f3-33c4784be4ec",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/files/auto_init_ai_system.py",
        "type": "file",
        "artifact_id": "bb4e3d82-a38e-47fb-ad4b-a998b45c0766",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/scripts",
        "type": "directory",
        "artifact_id": "f5f7e7cb-7e93-401a-84f3-00d6fe5dcd5b",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/scripts/install_ai_integration.py",
        "type": "file",
        "artifact_id": "833969c8-7181-44b9-9724-fcd804a3295c",
        "metadata": {}
      },
      {
        "path": "data",
        "type": "directory",
        "artifact_id": "7df6522d-064f-47ae-b00b-aa01d3255cd2",
        "metadata": {}
      },
      {
        "path": "data/ai_diagnostics_report.json",
        "type": "file",
        "artifact_id": "fb56cbea-3350-41bc-8ad5-b7c8de96c256",
        "metadata": {}
      },
      {
        "path": "data/ai_integration_config.json",
        "type": "file",
        "artifact_id": "dcd43cd5-002a-4e92-881e-d66ff2fc199e",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness",
        "type": "directory",
        "artifact_id": "1c78f705-3bc4-43d7-bbd8-db2d0fc5ffed",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/ai_behavior_analysis.json",
        "type": "file",
        "artifact_id": "02be6df9-0605-46d2-b75c-878e33c45dd0",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/ai_usage_events.json",
        "type": "file",
        "artifact_id": "ed692169-9c27-4448-b9f7-11f68b8692a0",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/capability_cache.json",
        "type": "file",
        "artifact_id": "00f1f457-c5b6-40c7-9f59-bb3573aab845",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/search_cache.json",
        "type": "file",
        "artifact_id": "4d82ad06-4cc2-4d55-9f93-2db382097b10",
        "metadata": {}
      },
      {
        "path": "data/artifacts_index.json",
        "type": "file",
        "artifact_id": "710b7b52-3310-4498-af75-57b25e29e3a6",
        "metadata": {}
      },
      {
        "path": "data/chat_sessions",
        "type": "directory",
        "artifact_id": "37652668-333c-40e4-b4b5-2c1b84866b6c",
        "metadata": {}
      },
      {
        "path": "data/chat_sessions/telegram-bot-session.json",
        "type": "file",
        "artifact_id": "6f042a61-69d1-41a1-a88f-e8b0c14352a2",
        "metadata": {}
      },
      {
        "path": "data/chat_sessions/test-session.json",
        "type": "file",
        "artifact_id": "85289891-e635-46c0-b5c4-baea0624c249",
        "metadata": {}
      },
      {
        "path": "data/chat_sessions/tg_-4938821563_306157325.json",
        "type": "file",
        "artifact_id": "d1c37102-8922-4127-ab12-8f7042a074e6",
        "metadata": {}
      },
      {
        "path": "data/cli.json",
        "type": "file",
        "artifact_id": "5f1206d2-d714-4348-950e-be0d5bcb67ca",
        "metadata": {}
      },
      {
        "path": "data/cli_enhanced.json",
        "type": "file",
        "artifact_id": "b9fef88a-d823-44c2-b939-ee60db5843d1",
        "metadata": {}
      },
      {
        "path": "data/cli_queue.json",
        "type": "file",
        "artifact_id": "669e6c45-aa21-4859-ab1f-a5d904b1f937",
        "metadata": {}
      },
      {
        "path": "data/cli_queue_enhanced.json",
        "type": "file",
        "artifact_id": "d7a9e808-8183-40cc-b94e-8253d6224c2f",
        "metadata": {}
      },
      {
        "path": "data/conflicts.json",
        "type": "file",
        "artifact_id": "09c20ab7-e75d-40ae-b681-3ed9340e18f7",
        "metadata": {}
      },
      {
        "path": "data/context_orchestration.json",
        "type": "file",
        "artifact_id": "2b0790fd-7941-4712-b54d-4a5bba25b380",
        "metadata": {}
      },
      {
        "path": "data/copilot",
        "type": "directory",
        "artifact_id": "e4b0db81-b55a-4080-b68d-18a416b7b40a",
        "metadata": {}
      },
      {
        "path": "data/copilot/ai_constraints.json",
        "type": "file",
        "artifact_id": "c498739d-a4df-4726-9022-e19107d5deb1",
        "metadata": {}
      },
      {
        "path": "data/copilot/processing_queue.json",
        "type": "file",
        "artifact_id": "ab0692cc-3269-4b39-ad36-bfcaf0b646ec",
        "metadata": {}
      },
      {
        "path": "data/copilot/warnings.json",
        "type": "file",
        "artifact_id": "12472008-0d70-4c7d-a231-72fcdced72db",
        "metadata": {}
      },
      {
        "path": "data/copilot_init.json",
        "type": "file",
        "artifact_id": "cfb32d25-d4be-4e5c-ac5b-194df0ec0280",
        "metadata": {}
      },
      {
        "path": "data/cursor",
        "type": "directory",
        "artifact_id": "b1e15930-756a-48f1-b32a-97ffc9b88286",
        "metadata": {}
      },
      {
        "path": "data/cursor/cursor_context_config.json",
        "type": "file",
        "artifact_id": "d12d9582-f289-4607-87e7-d439c8f4fb40",
        "metadata": {}
      },
      {
        "path": "data/cursor/cursor_personal_bridge.json",
        "type": "file",
        "artifact_id": "a551c9f1-5248-4eef-899d-d1d43cd62b83",
        "metadata": {}
      },
      {
        "path": "data/cursor/cursor_session_memory.json",
        "type": "file",
        "artifact_id": "5a714fb8-ebdc-40d5-bb62-c920e75bcefd",
        "metadata": {}
      },
      {
        "path": "data/developer_onboarding.json",
        "type": "file",
        "artifact_id": "e4a47b39-bb06-4296-807c-ab57012f42a8",
        "metadata": {}
      },
      {
        "path": "data/docs.json",
        "type": "file",
        "artifact_id": "2574c9a7-fd0b-4a4c-8a22-d6e85581fc88",
        "metadata": {}
      },
      {
        "path": "data/gh_mapping.json",
        "type": "file",
        "artifact_id": "fc83ea89-8a15-404c-a0da-32b46194a3b5",
        "metadata": {}
      },
      {
        "path": "data/ideas.json",
        "type": "file",
        "artifact_id": "674e5a3e-f548-4ed1-b3e0-e1539d345913",
        "metadata": {}
      },
      {
        "path": "data/ideas_cache.json",
        "type": "file",
        "artifact_id": "4ebe5f23-eda5-40a0-85a4-4ea00e6918e1",
        "metadata": {}
      },
      {
        "path": "data/init.json",
        "type": "file",
        "artifact_id": "ca4e9aa5-438e-4581-9f4e-b46b36347172",
        "metadata": {}
      },
      {
        "path": "data/init_enhanced.json",
        "type": "file",
        "artifact_id": "940813ee-c981-485c-9253-798db9069af2",
        "metadata": {}
      },
      {
        "path": "data/init_enhanced_ai.json",
        "type": "file",
        "artifact_id": "a780d0ef-b922-40e6-869c-72d3b35d24fa",
        "metadata": {}
      },
      {
        "path": "data/insights.json",
        "type": "file",
        "artifact_id": "93bd4808-8a66-4c64-bcfb-65ea26564299",
        "metadata": {}
      },
      {
        "path": "data/metrics.json",
        "type": "file",
        "artifact_id": "b189041d-5c75-435b-9e95-5d64ec4feb94",
        "metadata": {}
      },
      {
        "path": "data/prs.json",
        "type": "file",
        "artifact_id": "92be9278-f9e3-4a5b-a6f0-46c49e54f5b2",
        "metadata": {}
      },
      {
        "path": "data/references.json",
        "type": "file",
        "artifact_id": "69eb1e67-e777-441e-bc2a-07719bd69d9d",
        "metadata": {}
      },
      {
        "path": "data/sessions",
        "type": "directory",
        "artifact_id": "98db60d4-8f30-4046-b120-b9ca9dfac37e",
        "metadata": {}
      },
      {
        "path": "data/sessions/README.md",
        "type": "file",
        "artifact_id": "6eaf31c1-096c-4074-9730-6eb48ab9e08f",
        "metadata": {}
      },
      {
        "path": "data/sessions/ai_sessions.json",
        "type": "file",
        "artifact_id": "3e839fa1-99f8-4dbd-8b63-d2987e71287f",
        "metadata": {}
      },
      {
        "path": "data/sessions/current_session.json",
        "type": "file",
        "artifact_id": "093e6fe5-bfc7-40b4-b98e-54b47ee4123c",
        "metadata": {}
      },
      {
        "path": "data/sessions/epic_tg_bot_enhancement.json",
        "type": "file",
        "artifact_id": "eb64b7d3-5f1b-49dc-952f-7b36d1a21156",
        "metadata": {}
      },
      {
        "path": "data/sessions/epics_roadmap.json",
        "type": "file",
        "artifact_id": "02f23bae-3346-466a-826b-490b8d41012b",
        "metadata": {}
      },
      {
        "path": "data/sessions/worklog.json",
        "type": "file",
        "artifact_id": "b1488a72-cc4e-4dcf-ab67-1923187f8e9c",
        "metadata": {}
      },
      {
        "path": "data/tasks.json",
        "type": "file",
        "artifact_id": "84cceabb-f2c4-4d4e-b8d7-1259ed8c2f76",
        "metadata": {}
      },
      {
        "path": "data/vision.json",
        "type": "file",
        "artifact_id": "e8453965-0d54-4597-ad58-031127b2bd15",
        "metadata": {}
      },
      {
        "path": "data/weights.json",
        "type": "file",
        "artifact_id": "cdc95f0f-ae61-4ce1-9aac-6b201b3a8fbe",
        "metadata": {}
      },
      {
        "path": "data/workflow_events.json",
        "type": "file",
        "artifact_id": "2bae991a-a1eb-424e-a411-29ed21b0d908",
        "metadata": {}
      },
      {
        "path": "data/workspace",
        "type": "directory",
        "artifact_id": "925cc395-e4ba-46f5-ab78-217dec7fc7ed",
        "metadata": {}
      },
      {
        "path": "data/workspace/git_workflow_config.json",
        "type": "file",
        "artifact_id": "507d0d09-b197-4046-a51d-70f86a0e53f9",
        "metadata": {}
      },
      {
        "path": "data/workspace/workspace_state.json",
        "type": "file",
        "artifact_id": "554311f1-f4ed-4ea8-9739-22d61983e987",
        "metadata": {}
      },
      {
        "path": "debug_terminal.py",
        "type": "file",
        "artifact_id": "c6befd1e-03e7-4703-9d8b-f744623f5102",
        "metadata": {}
      },
      {
        "path": "docker",
        "type": "directory",
        "artifact_id": "a073ba63-bf5f-4ce2-9dbb-77a5e9d14cb2",
        "metadata": {}
      },
      {
        "path": "docker/parser_go",
        "type": "directory",
        "artifact_id": "bbf75033-85c0-43a2-9800-8568e3cf9ef3",
        "metadata": {}
      },
      {
        "path": "docs",
        "type": "directory",
        "artifact_id": "f4d33250-9108-44e2-9e20-1cdce70db7d0",
        "metadata": {}
      },
      {
        "path": "docs.json",
        "type": "file",
        "artifact_id": "dc3923cf-aa33-46b3-97e4-730c580936b3",
        "metadata": {}
      },
      {
        "path": "docs/AI_DOGFOODING_FINAL_PLAN.md",
        "type": "file",
        "artifact_id": "5cb5284e-fae4-4233-8571-46e682ebd33a",
        "metadata": {}
      },
      {
        "path": "docs/AI_DOGFOODING_IMPLEMENTATION_PLAN.md",
        "type": "file",
        "artifact_id": "e3b5a773-5d30-40a4-8491-08386d47cbfc",
        "metadata": {}
      },
      {
        "path": "docs/AI_DOGFOODING_PLANNING_MEMO.md",
        "type": "file",
        "artifact_id": "13d70b4e-a2f1-4513-a203-00ecddffa856",
        "metadata": {}
      },
      {
        "path": "docs/AI_INTEGRATION_REALITY_CHECK.md",
        "type": "file",
        "artifact_id": "f749a493-e28f-4adb-9d2f-88e6ba702343",
        "metadata": {}
      },
      {
        "path": "docs/AI_SESSION_MOBILE_CONTROL.md",
        "type": "file",
        "artifact_id": "d4b54d3f-8aa0-4eab-8a5e-da462920f381",
        "metadata": {}
      },
      {
        "path": "docs/COMPREHENSIVE_ANALYSIS.md",
        "type": "file",
        "artifact_id": "3fb61606-25e6-4ab8-83e3-45fe85c3de45",
        "metadata": {}
      },
      {
        "path": "docs/COMPREHENSIVE_INDEX.json",
        "type": "file",
        "artifact_id": "0bf674c1-13fe-4a2b-ba1d-2d441c6998a7",
        "metadata": {}
      },
      {
        "path": "docs/CONTEXT_TAGS_SYSTEM.md",
        "type": "file",
        "artifact_id": "dd586ab6-d718-44a5-b79b-2aceea269c40",
        "metadata": {}
      },
      {
        "path": "docs/CONTRIBUTING.md",
        "type": "file",
        "artifact_id": "f35f7c24-ed26-4db2-bb75-f6fff425bcb3",
        "metadata": {}
      },
      {
        "path": "docs/COPILOT_INTEGRATION_CLARIFICATION_QUESTIONS.md",
        "type": "file",
        "artifact_id": "640b5478-0468-432b-9b04-41b0ccef8e1e",
        "metadata": {}
      },
      {
        "path": "docs/COPILOT_INTEGRATION_RESEARCH_NOTES.md",
        "type": "file",
        "artifact_id": "6224f9d5-2a89-4de4-bd3a-1ec57eb6c59f",
        "metadata": {}
      },
      {
        "path": "docs/CURSOR_AI_INTEGRATION.md",
        "type": "file",
        "artifact_id": "43ceed01-5183-44d1-949a-a28bbc2b976c",
        "metadata": {}
      },
      {
        "path": "docs/CURSOR_ECOSYSTEM_TECHNICAL_ASSESSMENT.md",
        "type": "file",
        "artifact_id": "94d8b2b9-70b6-462e-be94-c6f73fa6c69e",
        "metadata": {}
      },
      {
        "path": "docs/GITHUB_ROLLOUT_STRATEGY.md",
        "type": "file",
        "artifact_id": "fa8ea2cb-e634-4256-b1f7-74b6f2b64bf4",
        "metadata": {}
      },
      {
        "path": "docs/GITHUB_TOKEN_SETUP.md",
        "type": "file",
        "artifact_id": "baa28f0c-1807-477b-8ee4-7f748c0be391",
        "metadata": {}
      },
      {
        "path": "docs/HIDDEN_GEMS_ANALYSIS.md",
        "type": "file",
        "artifact_id": "7fc6f17f-335e-4ff4-93a5-d6dd33fdaa81",
        "metadata": {}
      },
      {
        "path": "docs/INTEGRATION_AND_WORKFLOW_CLARIFICATIONS.md",
        "type": "file",
        "artifact_id": "50d69999-56bc-4811-8ec6-32b2e82ad619",
        "metadata": {}
      },
      {
        "path": "docs/JSON_OPTIMIZATION_CLARIFICATIONS.md",
        "type": "file",
        "artifact_id": "65a6c562-0884-4855-a0b0-d4e0ae0050fe",
        "metadata": {}
      },
      {
        "path": "docs/JSON_OPTIMIZATION_FINAL_PLAN.md",
        "type": "file",
        "artifact_id": "b6a9aead-395e-4a1c-a998-ae4ec9fb5b46",
        "metadata": {}
      },
      {
        "path": "docs/JSON_SYSTEM_OPTIMIZATION_RESEARCH.md",
        "type": "file",
        "artifact_id": "8bddaa10-6785-4d66-ac90-5a7a485cc25f",
        "metadata": {}
      },
      {
        "path": "docs/LLM_instructions_api.md",
        "type": "file",
        "artifact_id": "f5e432b4-249f-4094-93f0-876bf2384006",
        "metadata": {}
      },
      {
        "path": "docs/MISSING_INNOVATIONS_SUMMARY.md",
        "type": "file",
        "artifact_id": "3b2d0c61-be03-4cec-8562-c1c82330b348",
        "metadata": {}
      },
      {
        "path": "docs/PRIORITY_DASHBOARD.md",
        "type": "file",
        "artifact_id": "4e66af22-501b-45be-b1b8-0b990d1966e4",
        "metadata": {}
      },
      {
        "path": "docs/QUICK_START_GUIDE.md",
        "type": "file",
        "artifact_id": "65b919d3-ad5c-41aa-83a1-c2c95efb6e06",
        "metadata": {}
      },
      {
        "path": "docs/SECURITY.md",
        "type": "file",
        "artifact_id": "8e9ca53c-f2b0-4db4-857e-2ec1036a4e7b",
        "metadata": {}
      },
      {
        "path": "docs/STRATEGIC_ROADMAP_2025.md",
        "type": "file",
        "artifact_id": "3e424246-1786-496b-b318-8f523f831a75",
        "metadata": {}
      },
      {
        "path": "docs/TASKS_AND_IDEAS_REASSESSMENT.md",
        "type": "file",
        "artifact_id": "d35dff7e-2b21-4998-88ba-27626839e271",
        "metadata": {}
      },
      {
        "path": "docs/TASKS_INDEX.json",
        "type": "file",
        "artifact_id": "bb426e63-fa78-4901-b05d-da68330332ca",
        "metadata": {}
      },
      {
        "path": "docs/TASKS_SUMMARY.md",
        "type": "file",
        "artifact_id": "f79f24ea-1f19-499f-9755-f4b2299fcc76",
        "metadata": {}
      },
      {
        "path": "docs/TASK_IDEA_CONSOLIDATION_WORK_NOTE.md",
        "type": "file",
        "artifact_id": "0e8227cf-c1cf-4080-b557-3f03b6e24de1",
        "metadata": {}
      },
      {
        "path": "docs/TASK_MANAGEMENT_SYSTEM.md",
        "type": "file",
        "artifact_id": "7b3693fa-d155-407c-b5cf-ffe37e10092e",
        "metadata": {}
      },
      {
        "path": "docs/TPOT_DEPLOYMENT_WORK_PLAN.md",
        "type": "file",
        "artifact_id": "bb6d3400-146e-4db1-9f31-dc62718a85cb",
        "metadata": {}
      },
      {
        "path": "docs/ai",
        "type": "directory",
        "artifact_id": "75bbb140-8b35-4d42-add3-c84b33134384",
        "metadata": {}
      },
      {
        "path": "docs/ai-constraints-implementation-report.md",
        "type": "file",
        "artifact_id": "bd30e6e7-2417-4e04-bf46-4e37dd931653",
        "metadata": {}
      },
      {
        "path": "docs/ai-session-monitor",
        "type": "directory",
        "artifact_id": "5e381ce8-12ce-467f-88d8-e65f7d2d312c",
        "metadata": {}
      },
      {
        "path": "docs/ai-session-monitor/README.md",
        "type": "file",
        "artifact_id": "b78eb141-ea3a-4a7a-a56e-1a31bb99b20a",
        "metadata": {}
      },
      {
        "path": "docs/ai/README.md",
        "type": "file",
        "artifact_id": "835edb34-9a64-4371-bc71-acdcec4f0a2f",
        "metadata": {}
      },
      {
        "path": "docs/ai/system_overview.md",
        "type": "file",
        "artifact_id": "2f390b70-27d4-4403-9702-9c59fe4c657a",
        "metadata": {}
      },
      {
        "path": "docs/ai/workflow_guide.md",
        "type": "file",
        "artifact_id": "eb9d7fe4-139f-4b77-aa3d-d2776d8ebcee",
        "metadata": {}
      },
      {
        "path": "docs/best_practices.md",
        "type": "file",
        "artifact_id": "56b0403f-a8e6-4b5f-bd0b-c1287b0700f3",
        "metadata": {}
      },
      {
        "path": "docs/cache.py",
        "type": "file",
        "artifact_id": "f0e14392-2d17-4fe6-b170-e8b49abb30c2",
        "metadata": {}
      },
      {
        "path": "docs/cli.py",
        "type": "file",
        "artifact_id": "14ab92ef-8429-4843-891c-044f542cd25f",
        "metadata": {}
      },
      {
        "path": "docs/cli_modular_architecture.md",
        "type": "file",
        "artifact_id": "f87f325e-2db2-46ec-9221-05d143dc7ad3",
        "metadata": {}
      },
      {
        "path": "docs/context_orchestration_architecture.md",
        "type": "file",
        "artifact_id": "295aa2cf-ddba-4a33-8c9d-1e86b87b04c0",
        "metadata": {}
      },
      {
        "path": "docs/copilot_integration.md",
        "type": "file",
        "artifact_id": "d28c1358-4c7f-4dfc-bcac-0a8f13df16c2",
        "metadata": {}
      },
      {
        "path": "docs/examples",
        "type": "directory",
        "artifact_id": "d7e2e0ab-1c2a-4842-8b08-8a2349a39451",
        "metadata": {}
      },
      {
        "path": "docs/examples/struct.json",
        "type": "file",
        "artifact_id": "a35462d8-1484-486a-b744-436cf96904b4",
        "metadata": {}
      },
      {
        "path": "docs/gh_view.md",
        "type": "file",
        "artifact_id": "7df342fe-8a99-49d3-a280-dbad157fbec9",
        "metadata": {}
      },
      {
        "path": "docs/github_projects_export.md",
        "type": "file",
        "artifact_id": "1e2b9e6b-a5b6-4082-8568-0a222c87f892",
        "metadata": {}
      },
      {
        "path": "docs/ideas_community.md",
        "type": "file",
        "artifact_id": "8512c606-94bb-4d4f-a8b3-dd1a467d5953",
        "metadata": {}
      },
      {
        "path": "docs/ideas_strategy.md",
        "type": "file",
        "artifact_id": "a6c2a5e9-5193-4623-b268-7486560e8a1c",
        "metadata": {}
      },
      {
        "path": "docs/ideas_technical.md",
        "type": "file",
        "artifact_id": "d35b5a95-8dc1-4e78-8ba7-b9f3768125b7",
        "metadata": {}
      },
      {
        "path": "docs/incremental_indexing_plan.md",
        "type": "file",
        "artifact_id": "a7254115-9753-4165-89f5-4787d3e1760a",
        "metadata": {}
      },
      {
        "path": "docs/integration.md",
        "type": "file",
        "artifact_id": "a5958087-8561-45a8-b540-6f5dc25df00e",
        "metadata": {}
      },
      {
        "path": "docs/interactions_diagram.ru.md",
        "type": "file",
        "artifact_id": "ed8e421a-3e43-4b3e-95f4-9501c48a1dae",
        "metadata": {}
      },
      {
        "path": "docs/internal",
        "type": "directory",
        "artifact_id": "49837a40-cc82-4f0f-a7f9-31384893089c",
        "metadata": {}
      },
      {
        "path": "docs/internal/collaborative-decision-workflow.md",
        "type": "file",
        "artifact_id": "d82af613-0c08-4388-b81a-f648e00ae657",
        "metadata": {}
      },
      {
        "path": "docs/internal/elastic-workflow-concept.md",
        "type": "file",
        "artifact_id": "2c9e64c8-6301-4382-bf7d-1635cf7ea8c2",
        "metadata": {}
      },
      {
        "path": "docs/internal/mamay-scenario-onboarding-design.md",
        "type": "file",
        "artifact_id": "8f8a6c40-b31d-43bb-9ead-f02edb149173",
        "metadata": {}
      },
      {
        "path": "docs/internal/notes",
        "type": "directory",
        "artifact_id": "6e953b29-85e6-40ac-961b-d032de641885",
        "metadata": {}
      },
      {
        "path": "docs/internal/notes/session_integration.md",
        "type": "file",
        "artifact_id": "cdd98980-5f91-4005-8d5a-7f45eff505f9",
        "metadata": {}
      },
      {
        "path": "docs/internal/project-status-summary.md",
        "type": "file",
        "artifact_id": "c0cddd74-5076-4482-be1b-edd9385bf5d8",
        "metadata": {}
      },
      {
        "path": "docs/internal/roadmap.md",
        "type": "file",
        "artifact_id": "3d342890-c32e-4a4f-b242-8b63aeb30536",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru",
        "type": "directory",
        "artifact_id": "2dc317a7-2d33-4c6b-bd7b-90fe620b74fb",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/roadmap.md",
        "type": "file",
        "artifact_id": "793de78f-8d00-4791-9ad9-29be2f33e5e3",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/ses-003_critical_analysis.md",
        "type": "file",
        "artifact_id": "73e573b3-bafa-4104-b3e9-47b9c2d19da8",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/setup.md",
        "type": "file",
        "artifact_id": "3046ac4c-0c31-4284-aef4-3e4b87235b9f",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/team.md",
        "type": "file",
        "artifact_id": "a4a70d3a-867a-433f-a53a-d09b189c7987",
        "metadata": {}
      },
      {
        "path": "docs/internal/ses-004-implementation-decisions.md",
        "type": "file",
        "artifact_id": "6297cdae-0501-4c21-a64a-517b98bf0710",
        "metadata": {}
      },
      {
        "path": "docs/internal/setup.md",
        "type": "file",
        "artifact_id": "08ddc017-207a-4bdf-965d-68a2db25d48b",
        "metadata": {}
      },
      {
        "path": "docs/internal/team.md",
        "type": "file",
        "artifact_id": "f77a2062-ccd7-4c60-88a4-ac33c2912a0a",
        "metadata": {}
      },
      {
        "path": "docs/internal/workspace-mode-design-clarifications.md",
        "type": "file",
        "artifact_id": "a526827a-ee56-4d3a-8b30-f2e589863c8a",
        "metadata": {}
      },
      {
        "path": "docs/internal/workspace-state-mode-system-design.md",
        "type": "file",
        "artifact_id": "8eeaae7e-dfed-4e26-bde6-b7e00c0ce792",
        "metadata": {}
      },
      {
        "path": "docs/json_selector.py",
        "type": "file",
        "artifact_id": "bef8075a-1638-419b-824b-cf71f4a48691",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_config.md",
        "type": "file",
        "artifact_id": "77e13d75-f583-4c19-a690-7e1313110ea8",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_decision_checklist.md",
        "type": "file",
        "artifact_id": "b4b12307-4308-454a-983e-4f555345ec83",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_format.md",
        "type": "file",
        "artifact_id": "96d3d200-fb2b-44e8-992a-c05c1d6afd3a",
        "metadata": {}
      },
      {
        "path": "docs/management",
        "type": "directory",
        "artifact_id": "fad3d531-88ad-4177-ab66-32b47cf966a1",
        "metadata": {}
      },
      {
        "path": "docs/management/README.md",
        "type": "file",
        "artifact_id": "9c2c670a-8176-4954-b102-12ab5fb0721e",
        "metadata": {}
      },
      {
        "path": "docs/manifesto.md",
        "type": "file",
        "artifact_id": "8a508bd4-d1ae-47d6-a2f6-314945b7cb99",
        "metadata": {}
      },
      {
        "path": "docs/onboarding.md",
        "type": "file",
        "artifact_id": "1f10b163-b340-44ad-873e-b70e2d510054",
        "metadata": {}
      },
      {
        "path": "docs/project_structure.md",
        "type": "file",
        "artifact_id": "51739503-6a82-4825-8c68-aa1fd0e855b9",
        "metadata": {}
      },
      {
        "path": "docs/ru",
        "type": "directory",
        "artifact_id": "10286650-993a-41f1-b9fc-ef9928ec59fb",
        "metadata": {}
      },
      {
        "path": "docs/ru/CONTRIBUTING.md",
        "type": "file",
        "artifact_id": "9dc35629-677d-45fc-b823-2a653a35b39c",
        "metadata": {}
      },
      {
        "path": "docs/ru/README.md",
        "type": "file",
        "artifact_id": "93c706bb-43f1-45d4-9dff-8b6728b48071",
        "metadata": {}
      },
      {
        "path": "docs/ru/best_practices.md",
        "type": "file",
        "artifact_id": "1af110e8-d837-4068-bc13-3baa8ba431dc",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples",
        "type": "directory",
        "artifact_id": "f836c957-989b-45ee-a480-cf2f972530a1",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples/struct.json",
        "type": "file",
        "artifact_id": "23b72bb7-e0da-416f-8a45-6ffae1240cdd",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_community.md",
        "type": "file",
        "artifact_id": "7c63b899-fc8e-4aaa-bf6e-270d3571b258",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_strategy.md",
        "type": "file",
        "artifact_id": "ca69a552-cfcc-49e2-99a4-d0b450bdad87",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_technical.md",
        "type": "file",
        "artifact_id": "25839cf2-f64c-4094-a0a2-44f2a6803c22",
        "metadata": {}
      },
      {
        "path": "docs/ru/integration.md",
        "type": "file",
        "artifact_id": "92f2195d-6000-452a-87e6-226d52b04e2a",
        "metadata": {}
      },
      {
        "path": "docs/ru/interactions_diagram.ru.md",
        "type": "file",
        "artifact_id": "5b58f161-9041-44be-ae16-e29ad2373bd7",
        "metadata": {}
      },
      {
        "path": "docs/ru/llmstruct_config.md",
        "type": "file",
        "artifact_id": "c02452f3-5e1a-4a3a-8b5c-8b87f0ccfb88",
        "metadata": {}
      },
      {
        "path": "docs/ru/llmstruct_format.md",
        "type": "file",
        "artifact_id": "ff151683-e7fb-4ecc-a841-c30d4df9228c",
        "metadata": {}
      },
      {
        "path": "docs/ru/manifesto.md",
        "type": "file",
        "artifact_id": "4516a412-4f08-4f6b-9912-0c827329652f",
        "metadata": {}
      },
      {
        "path": "docs/ru/onboarding.md",
        "type": "file",
        "artifact_id": "768bbfb6-9bc5-4abf-94d0-a786eae7fd44",
        "metadata": {}
      },
      {
        "path": "docs/ru/project_structure.md",
        "type": "file",
        "artifact_id": "afbfe673-756a-4a2b-94a4-6b085824c6f9",
        "metadata": {}
      },
      {
        "path": "docs/self_run.py",
        "type": "file",
        "artifact_id": "c97b629a-a743-4553-b9a6-7be5c0dcc0d3",
        "metadata": {}
      },
      {
        "path": "docs/struct_security.md",
        "type": "file",
        "artifact_id": "a7e6e4ec-ec1a-4662-a0ec-dd41384d687a",
        "metadata": {}
      },
      {
        "path": "duplication_report.json",
        "type": "file",
        "artifact_id": "f79a964b-b2c3-4024-965d-ba571a6e69ad",
        "metadata": {}
      },
      {
        "path": "epics",
        "type": "directory",
        "artifact_id": "969e8e42-ed9e-4e11-bd4f-75a7bd61d1dd",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-1-AI-BRANCH-SAFETY-SYSTEM.md",
        "type": "file",
        "artifact_id": "c766fe6c-0f19-48cb-8bff-90c76a2f9e67",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-2-AI-SESSION-MANAGEMENT.md",
        "type": "file",
        "artifact_id": "64d045b2-6f58-4ec8-b401-10b2d9ad8daf",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-3-ENHANCED-DOGFOOD-COMMAND.md",
        "type": "file",
        "artifact_id": "c63beaba-d8bb-4180-a4bd-82aa8019e498",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-4-RISK-BASED-DEVELOPMENT-WORKFLOW.md",
        "type": "file",
        "artifact_id": "8a817b18-b5f4-42a5-9097-3952b935b6df",
        "metadata": {}
      },
      {
        "path": "epics/README.md",
        "type": "file",
        "artifact_id": "ecbb9daf-7f07-49c0-a933-43bae9672683",
        "metadata": {}
      },
      {
        "path": "epics/epics_data.json",
        "type": "file",
        "artifact_id": "e36899c1-292d-4251-996b-c9e624a0419c",
        "metadata": {}
      },
      {
        "path": "examples",
        "type": "directory",
        "artifact_id": "014e7646-8dd0-4f8f-b6be-a6e4511b4cad",
        "metadata": {}
      },
      {
        "path": "examples/python_project_main.py",
        "type": "file",
        "artifact_id": "fc7cd69c-9a6b-4fb6-bf11-1e9ec6e7a3b9",
        "metadata": {}
      },
      {
        "path": "examples/python_project_utils.py",
        "type": "file",
        "artifact_id": "a46e4283-1ffa-4080-b828-ec0e6bfac175",
        "metadata": {}
      },
      {
        "path": "examples/telegram_bot",
        "type": "directory",
        "artifact_id": "01b5355e-2814-40f2-8477-564119e4109e",
        "metadata": {}
      },
      {
        "path": "final_system_check.py",
        "type": "file",
        "artifact_id": "f78053fe-48ad-4efe-88aa-87a39b4e5d5b",
        "metadata": {}
      },
      {
        "path": "final_system_validation.py",
        "type": "file",
        "artifact_id": "2d4f5f16-0411-4753-9655-6a10e4c24ca2",
        "metadata": {}
      },
      {
        "path": "force_ai_integration.py",
        "type": "file",
        "artifact_id": "5fe979df-0671-41fd-852c-2fb6822aebf4",
        "metadata": {}
      },
      {
        "path": "github_sync_log.json",
        "type": "file",
        "artifact_id": "adccdc52-7287-4618-8a6f-2b0cbbb1f88a",
        "metadata": {}
      },
      {
        "path": "install_ai_integration.py",
        "type": "file",
        "artifact_id": "899f9f0e-cbfd-4f42-9a0c-4157884a2988",
        "metadata": {}
      },
      {
        "path": "integrations",
        "type": "directory",
        "artifact_id": "d4ad1496-66c4-4804-9789-4b3ecf98e194",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot",
        "type": "directory",
        "artifact_id": "5b7c062c-1ab8-4022-ae8c-781a8f8748bd",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot/mp002_progress_bot.py",
        "type": "file",
        "artifact_id": "aa02215f-39bc-466e-90ee-98d2a849aca3",
        "metadata": {}
      },
      {
        "path": "metrics.json",
        "type": "file",
        "artifact_id": "ecdaec04-e102-43af-bac9-a263887dc1d0",
        "metadata": {}
      },
      {
        "path": "monitor_system.py",
        "type": "file",
        "artifact_id": "f9628d7e-279d-4bc1-ae53-8340eb132a6e",
        "metadata": {}
      },
      {
        "path": "processing_results",
        "type": "directory",
        "artifact_id": "16150836-d4e7-4413-be17-26c3a431e975",
        "metadata": {}
      },
      {
        "path": "processing_results/conflicts_manual_2025-05-29.json",
        "type": "file",
        "artifact_id": "dffc72fa-55ba-4bd3-99dd-004e4ac15b4b",
        "metadata": {}
      },
      {
        "path": "processing_results/duplicates_review_2025-05-29.json",
        "type": "file",
        "artifact_id": "d44e02f6-1a75-432d-800d-d4706155eec2",
        "metadata": {}
      },
      {
        "path": "processing_results/future_backlog_2025-05-29.json",
        "type": "file",
        "artifact_id": "9d9afce5-e764-442e-8d4f-33273317e113",
        "metadata": {}
      },
      {
        "path": "processing_results/github_discussions_2025-05-29.json",
        "type": "file",
        "artifact_id": "dac037a2-edd0-41d6-9b8b-50d3ee544efa",
        "metadata": {}
      },
      {
        "path": "processing_results/github_epics_2025-05-29.json",
        "type": "file",
        "artifact_id": "2ff8f840-2dd3-4464-b374-4de0cbab83ca",
        "metadata": {}
      },
      {
        "path": "processing_results/github_issues_2025-05-29.json",
        "type": "file",
        "artifact_id": "bfabe3bc-4c01-4bb3-949e-32df0763fe7f",
        "metadata": {}
      },
      {
        "path": "processing_results/processing_summary_2025-05-29.json",
        "type": "file",
        "artifact_id": "e7ed23dc-f19e-49f9-a0eb-d23a4fd74650",
        "metadata": {}
      },
      {
        "path": "processing_results/t_pot_revenue_2025-05-29.json",
        "type": "file",
        "artifact_id": "413aac47-b479-478f-b71e-0413e90b2c80",
        "metadata": {}
      },
      {
        "path": "project_context.json",
        "type": "file",
        "artifact_id": "cc8d7c0a-6714-4735-a1a7-8e793fbd4cfc",
        "metadata": {}
      },
      {
        "path": "project_restructure_plan.md",
        "type": "file",
        "artifact_id": "6952eda1-0b41-4a3d-ae0a-29b628105c2f",
        "metadata": {}
      },
      {
        "path": "run_ai_diagnostics.py",
        "type": "file",
        "artifact_id": "a6e58e21-e571-419e-a9a2-cd9a975013ed",
        "metadata": {}
      },
      {
        "path": "schema",
        "type": "directory",
        "artifact_id": "b1476bdf-4dff-449b-b7fb-5f5c4e873ef3",
        "metadata": {}
      },
      {
        "path": "schema/artifacts_simplified.json",
        "type": "file",
        "artifact_id": "952f7365-177a-4009-9e8b-0711663a59d8",
        "metadata": {}
      },
      {
        "path": "schema/cli_queue.json",
        "type": "file",
        "artifact_id": "863ff6f2-f3fe-4d1c-8793-377ac993ab76",
        "metadata": {}
      },
      {
        "path": "schema/cli_simplified.json",
        "type": "file",
        "artifact_id": "2539fea4-8d48-49fe-8745-78aee565e5a2",
        "metadata": {}
      },
      {
        "path": "schema/common",
        "type": "directory",
        "artifact_id": "492f642a-73aa-4d8d-b3c1-90ebd5b74f55",
        "metadata": {}
      },
      {
        "path": "schema/common/definitions.json",
        "type": "file",
        "artifact_id": "e515a859-12c3-43bc-b7a4-092d6c2ef1f8",
        "metadata": {}
      },
      {
        "path": "schema/core.json",
        "type": "file",
        "artifact_id": "6be15178-26ea-4e0a-adae-50d3c58896d5",
        "metadata": {}
      },
      {
        "path": "schema/core_simplified.json",
        "type": "file",
        "artifact_id": "8bccf36e-0c0f-4c7b-9542-022f3048f386",
        "metadata": {}
      },
      {
        "path": "schema/insights_simplified.json",
        "type": "file",
        "artifact_id": "228ee14b-8310-40dc-83d1-2fee4a05c019",
        "metadata": {}
      },
      {
        "path": "schema/llmstruct_schema.json",
        "type": "file",
        "artifact_id": "fe381e69-97bf-4984-a29a-fcab9ac40b38",
        "metadata": {}
      },
      {
        "path": "schema/llmstruct_schema_simplified.json",
        "type": "file",
        "artifact_id": "e3bae0f0-29e6-4541-89a7-16bea33474b3",
        "metadata": {}
      },
      {
        "path": "schema/plugins",
        "type": "directory",
        "artifact_id": "f54173a7-140f-4b1b-bd0b-52130ae6ad6c",
        "metadata": {}
      },
      {
        "path": "schema/plugins/artifacts.json",
        "type": "file",
        "artifact_id": "77f64e80-64f6-4a4c-b7b4-921894f7d568",
        "metadata": {}
      },
      {
        "path": "schema/plugins/cli.json",
        "type": "file",
        "artifact_id": "e3083229-b956-4432-b273-9f9bde83063c",
        "metadata": {}
      },
      {
        "path": "schema/plugins/data_sorter.json",
        "type": "file",
        "artifact_id": "20ca13cd-6a3a-4c07-8cff-c1e6c1425a70",
        "metadata": {}
      },
      {
        "path": "schema/plugins/insights.json",
        "type": "file",
        "artifact_id": "420bf1ab-e1ea-47fc-935b-605a98374fbf",
        "metadata": {}
      },
      {
        "path": "scripts",
        "type": "directory",
        "artifact_id": "2e315c2b-5b94-4126-8d2c-a6bf932b47cc",
        "metadata": {}
      },
      {
        "path": "scripts/auto_update_struct.py",
        "type": "file",
        "artifact_id": "022ae5b4-95c1-45f2-a19c-8017dc408ea8",
        "metadata": {}
      },
      {
        "path": "scripts/collector.py",
        "type": "file",
        "artifact_id": "5fb4d150-9ac8-480b-9007-859a7313b4dc",
        "metadata": {}
      },
      {
        "path": "scripts/create_comprehensive_index.py",
        "type": "file",
        "artifact_id": "33b14a45-e763-4b5a-820e-462d2fe4dd3d",
        "metadata": {}
      },
      {
        "path": "scripts/create_github_issues.py",
        "type": "file",
        "artifact_id": "2813de2f-2493-475a-9f59-759fc4e1ae9a",
        "metadata": {}
      },
      {
        "path": "scripts/create_tasks_index.py",
        "type": "file",
        "artifact_id": "976455cc-aa62-46a1-a483-3f0402cd5c48",
        "metadata": {}
      },
      {
        "path": "scripts/deploy_embedded_files.py",
        "type": "file",
        "artifact_id": "10b5cf66-ae72-4007-9513-63710a7ece8e",
        "metadata": {}
      },
      {
        "path": "scripts/epic_roadmap_manager.py",
        "type": "file",
        "artifact_id": "512c3227-d029-47d2-8fc8-5bba6526506e",
        "metadata": {}
      },
      {
        "path": "scripts/export_to_github_projects.py",
        "type": "file",
        "artifact_id": "ebf6610d-8e2f-4488-ad95-ef55169ab91a",
        "metadata": {}
      },
      {
        "path": "scripts/fix_github_script.py",
        "type": "file",
        "artifact_id": "d22fc694-f551-4590-8d18-3cac575d4180",
        "metadata": {}
      },
      {
        "path": "scripts/fix_hardcoded_usernames.py",
        "type": "file",
        "artifact_id": "a0ee8247-cb63-47b1-9421-456888187652",
        "metadata": {}
      },
      {
        "path": "scripts/github_sync_manager.py",
        "type": "file",
        "artifact_id": "0c926948-1438-4df5-b269-abfec242309a",
        "metadata": {}
      },
      {
        "path": "scripts/github_sync_manager_enhanced.py",
        "type": "file",
        "artifact_id": "afe232a1-78c5-4ebc-acf1-498381efeb5f",
        "metadata": {}
      },
      {
        "path": "scripts/old",
        "type": "directory",
        "artifact_id": "a1f6c318-549b-45ce-839d-8be428b66125",
        "metadata": {}
      },
      {
        "path": "scripts/process_926_items.py",
        "type": "file",
        "artifact_id": "eb75d3b1-51d1-4088-a8e5-51c8c0d6b64c",
        "metadata": {}
      },
      {
        "path": "scripts/session_cli.py",
        "type": "file",
        "artifact_id": "d04fe9b6-6e22-4506-916a-9f56241a2289",
        "metadata": {}
      },
      {
        "path": "scripts/team",
        "type": "directory",
        "artifact_id": "aa2d4083-f5d5-4f1f-b8b7-5bf6280300b3",
        "metadata": {}
      },
      {
        "path": "scripts/team/__init__.py",
        "type": "file",
        "artifact_id": "9eaa1bba-0d02-4f75-a173-4049f78d342c",
        "metadata": {}
      },
      {
        "path": "scripts/validate_epics.py",
        "type": "file",
        "artifact_id": "25724fab-90c8-4d64-b122-42b7ef9893f5",
        "metadata": {}
      },
      {
        "path": "scripts/validate_json.py",
        "type": "file",
        "artifact_id": "13ef2f41-25c9-42c5-bce2-386f87a204f7",
        "metadata": {}
      },
      {
        "path": "scripts/validate_refs.py",
        "type": "file",
        "artifact_id": "7b1fa9d5-8f73-49c0-bbe3-66b6f7dfd447",
        "metadata": {}
      },
      {
        "path": "scripts/validate_schemas.py",
        "type": "file",
        "artifact_id": "b65ee846-5d60-4636-a8d7-eaade0253fd6",
        "metadata": {}
      },
      {
        "path": "src",
        "type": "directory",
        "artifact_id": "fae23840-2724-4673-a752-a500f001a0a0",
        "metadata": {}
      },
      {
        "path": "src/llmstruct",
        "type": "directory",
        "artifact_id": "cf294666-15f0-4185-b4c0-7193c1b38f01",
        "metadata": {}
      },
      {
        "path": "src/llmstruct.egg-info",
        "type": "directory",
        "artifact_id": "d868542b-8d0e-4f78-a825-d9dc24f4decf",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__init__.py",
        "type": "file",
        "artifact_id": "357f584e-48b5-4655-ac85-8c311a82808a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__main__.py",
        "type": "file",
        "artifact_id": "f7ceca19-d874-4ab3-a92f-d3580b510a4c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_cli_integration.py",
        "type": "file",
        "artifact_id": "8ec7ceae-da0a-47aa-8fb5-5347a1cc3431",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_self_awareness.py",
        "type": "file",
        "artifact_id": "27345c19-45a1-49d4-af88-a5f02899c85a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_self_monitor.py",
        "type": "file",
        "artifact_id": "70d2a244-a551-44e9-9be6-d6e74de4e91b",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_workflow_middleware.py",
        "type": "file",
        "artifact_id": "e0d1020b-d107-4065-9294-c5c6882d817f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/api",
        "type": "directory",
        "artifact_id": "9e21b698-81d2-40aa-a270-dc4dc996f293",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/api/middleware",
        "type": "directory",
        "artifact_id": "ad75aad2-3578-4aec-82cc-727b3d722fa6",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/api/models",
        "type": "directory",
        "artifact_id": "0132ac6d-122c-42e3-a91a-176cd7b4f486",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/api/routes",
        "type": "directory",
        "artifact_id": "72d5e5e4-76dc-42b4-a2ee-2555a7651d26",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/api/services",
        "type": "directory",
        "artifact_id": "ef086989-4deb-44dc-9584-6aa83f667a81",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cache.py",
        "type": "file",
        "artifact_id": "6f685ed4-5ab6-4f48-9d26-f368f8704409",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli.py",
        "type": "file",
        "artifact_id": "31117a07-8cb5-42c3-9746-2951faf8acc9",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_commands.py",
        "type": "file",
        "artifact_id": "b116591e-f322-4a91-b559-5c0d5a318657",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_config.py",
        "type": "file",
        "artifact_id": "a93a51d3-7d71-4cd1-a00d-4a7ee0b4367b",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_core.py",
        "type": "file",
        "artifact_id": "680b3f1e-f3c4-4bf9-a1e5-900e8cbf9eda",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_utils.py",
        "type": "file",
        "artifact_id": "d0a1f1d5-f728-42e6-809b-c837f834e581",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/context_orchestrator.py",
        "type": "file",
        "artifact_id": "06525458-2e4b-4eb3-8f00-a4f2b6031bc5",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/copilot.py",
        "type": "file",
        "artifact_id": "882de482-5461-4aba-87e9-9c9325c9e43a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cursor_ai_bridge.py",
        "type": "file",
        "artifact_id": "79cd9337-8d20-4c54-a23a-281de8a7f04c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cursor_integration.py",
        "type": "file",
        "artifact_id": "6dcfc2ec-e7e3-41cf-8d2b-3fa420488359",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators",
        "type": "directory",
        "artifact_id": "6ec20c8b-2417-4bbe-a1f4-d7ae5d07592b",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/__init__.py",
        "type": "file",
        "artifact_id": "68e22676-5ee9-475c-9268-9db6ba8f47b6",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/go_json_generator.py",
        "type": "file",
        "artifact_id": "96f1353d-5b79-405e-8c9a-0b244c1873ab",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/json_generator.py",
        "type": "file",
        "artifact_id": "05ada5cf-e47e-44b0-959e-f42c9425e654",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/gh_view.py",
        "type": "file",
        "artifact_id": "c8e25cc8-afc6-44c7-a568-12d7a13e291c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/grok.py",
        "type": "file",
        "artifact_id": "777c3666-6c76-43bd-baf6-246bb0cb6884",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/json_selector.py",
        "type": "file",
        "artifact_id": "37c03a96-e43a-4c4d-869d-bb2150944d56",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/llm_client.py",
        "type": "file",
        "artifact_id": "1ac2a12a-60b0-4fdc-8c68-43746948494c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers",
        "type": "directory",
        "artifact_id": "00489e3e-6bf1-4ff2-a5b3-8a62f1c85570",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/__init__.py",
        "type": "file",
        "artifact_id": "5aa1daf7-ac18-4ac4-bb27-4a6f99f4eaa9",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/go_analyzer.py",
        "type": "file",
        "artifact_id": "7289bc0a-9053-49a0-a70f-b5c07a617618",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/javascript_parser.py",
        "type": "file",
        "artifact_id": "25bf058d-cc3b-40d6-987c-44859a799a05",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/python_parser.py",
        "type": "file",
        "artifact_id": "ac3a7caf-f69c-4e94-aa89-514a2db7b7b6",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/universal_converter.py",
        "type": "file",
        "artifact_id": "f10e897f-1ea1-4568-953b-9ae59d90bd10",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/self_run.py",
        "type": "file",
        "artifact_id": "04c2a20a-83c5-42b0-ba00-01e8e997461a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates",
        "type": "directory",
        "artifact_id": "f8eb3f60-de19-4d70-bf86-d0860df0221f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates/__init__.py",
        "type": "file",
        "artifact_id": "60312212-57b2-4697-addb-ba056f4827f2",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/transpiler.py",
        "type": "file",
        "artifact_id": "e722bda9-95f5-45bf-b5f0-b0ff82f2c8b0",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators",
        "type": "directory",
        "artifact_id": "8d91f9f9-bb81-458a-8ab6-bc3b70444f40",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/__init__.py",
        "type": "file",
        "artifact_id": "f16ccea2-30b3-4460-b320-df794ac3a530",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/json_validator.py",
        "type": "file",
        "artifact_id": "c42595d7-d984-46aa-b4c7-de0d64cb36f8",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/workflow_orchestrator.py",
        "type": "file",
        "artifact_id": "a2dd3da9-fccf-40aa-8e36-f9821c24471a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/workspace.py",
        "type": "file",
        "artifact_id": "3a23659e-5f6c-4e6d-8a21-b66b9521c0b1",
        "metadata": {}
      },
      {
        "path": "start_development.py",
        "type": "file",
        "artifact_id": "8da7c16a-71eb-42ff-aee1-8ac7220f37af",
        "metadata": {}
      },
      {
        "path": "struct.json",
        "type": "file",
        "artifact_id": "c11067d9-8500-4a89-a1af-b7fc89d11933",
        "metadata": {}
      },
      {
        "path": "struct_ci_test.json",
        "type": "file",
        "artifact_id": "d8743f86-1611-4a1c-a129-07fa29f061bf",
        "metadata": {}
      },
      {
        "path": "struct_final_test.json",
        "type": "file",
        "artifact_id": "e779fcd4-e3fa-47a0-a2da-8dd9d9a7f636",
        "metadata": {}
      },
      {
        "path": "struct_fresh.json",
        "type": "file",
        "artifact_id": "bd22672b-32a0-4a5b-b263-168e167ea649",
        "metadata": {}
      },
      {
        "path": "struct_test.json",
        "type": "file",
        "artifact_id": "929355b4-0134-463c-b45e-9d4d40dbba5c",
        "metadata": {}
      },
      {
        "path": "temp",
        "type": "directory",
        "artifact_id": "c1308a5c-ee04-46bf-bcf7-8b2f37885d8f",
        "metadata": {}
      },
      {
        "path": "temp/discussion_notes.md",
        "type": "file",
        "artifact_id": "3412e7dc-36b5-41c1-922b-93bee72d8765",
        "metadata": {}
      },
      {
        "path": "temp/pause_recovery.md",
        "type": "file",
        "artifact_id": "450f49e4-088e-4a08-92a9-0e38734f425b",
        "metadata": {}
      },
      {
        "path": "temp/restore_ai_context.md",
        "type": "file",
        "artifact_id": "4d61441b-487b-440c-8739-0417edfbd52d",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox",
        "type": "directory",
        "artifact_id": "317ce0ef-42f6-4727-8429-0d1ea919913d",
        "metadata": {}
      },
      {
        "path": "temp_boss_missing",
        "type": "directory",
        "artifact_id": "6497970b-3dcd-4cf4-ae1f-fa46f85d68a8",
        "metadata": {}
      },
      {
        "path": "temp_boss_missing/data",
        "type": "directory",
        "artifact_id": "089f484b-36a4-43aa-aa7f-8be65c8b1470",
        "metadata": {}
      },
      {
        "path": "temp_boss_missing/docs",
        "type": "directory",
        "artifact_id": "849e4201-8547-40af-9921-4d85a01487aa",
        "metadata": {}
      },
      {
        "path": "temp_boss_missing/docs/final_architecture.md",
        "type": "file",
        "artifact_id": "a5170e93-d5a6-4215-8529-301b7121ba0f",
        "metadata": {}
      },
      {
        "path": "temp_boss_missing/scripts",
        "type": "directory",
        "artifact_id": "f346f5d8-1065-4781-88ca-c8bdc24f5670",
        "metadata": {}
      },
      {
        "path": "temp_boss_missing/scripts/__init__.py",
        "type": "file",
        "artifact_id": "61346816-66e3-47fe-a6ea-9726cd2f51a5",
        "metadata": {}
      },
      {
        "path": "temp_boss_missing/scripts/boss_cli.py",
        "type": "file",
        "artifact_id": "a9074128-b1c2-4537-9abb-52b57a5736fd",
        "metadata": {}
      },
      {
        "path": "temp_boss_missing/scripts/business_planning.py",
        "type": "file",
        "artifact_id": "d8f2522d-e367-4b9f-b2b6-eea8dfde62bd",
        "metadata": {}
      },
      {
        "path": "temp_boss_missing/scripts/team_management.py",
        "type": "file",
        "artifact_id": "40e1298a-b24f-4a0c-9ab8-ec2b5a0395b1",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis",
        "type": "directory",
        "artifact_id": "1571111d-0c99-4d52-907f-103ddfbfe380",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal",
        "type": "directory",
        "artifact_id": "45f3dc9b-7ba7-4408-a827-800fb827faab",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/FINAL_TPOT_DEPLOYMENT_PLAN.md",
        "type": "file",
        "artifact_id": "da55a4f6-61fd-4209-b77b-e6b30e68822f",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/_saved_query.md",
        "type": "file",
        "artifact_id": "d5cc58a5-29a1-4c3c-a561-27d2eb9c0b3e",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/ai_controlled_branches_config.json",
        "type": "file",
        "artifact_id": "1f221147-687e-4313-82b9-6cf4e7946aed",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/ai_controlled_branches_design.md",
        "type": "file",
        "artifact_id": "93b724c1-dfc3-4f94-a679-87f57336aa23",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/ai_controlled_branches_examples.md",
        "type": "file",
        "artifact_id": "e5ddfada-ca3d-482d-8d58-ed3d0b3d5c01",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/ai_controlled_branches_implementation.md",
        "type": "file",
        "artifact_id": "94342be7-181e-492e-94b5-cf21712b6f6b",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/ai_self_awareness_api_strategy.md",
        "type": "file",
        "artifact_id": "ab30fdaa-9952-43d8-aca4-f8fae2387ab9",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/archive",
        "type": "directory",
        "artifact_id": "b4977d97-34f4-45f9-a283-05336f919144",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/archive/2024",
        "type": "directory",
        "artifact_id": "a258e2bf-9959-454f-aab4-5348054812fd",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/archive/deprecated",
        "type": "directory",
        "artifact_id": "ce047125-dbee-4a8e-b79b-9c8f94635253",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/boss",
        "type": "directory",
        "artifact_id": "833644c3-d9b8-4f5f-a4ea-5cb72d9f856b",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/boss/data",
        "type": "directory",
        "artifact_id": "6d2922c5-d929-4c54-bcf9-469bbda23393",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/boss/docs",
        "type": "directory",
        "artifact_id": "1734cc1d-5d3c-4c85-97c5-0f7a20ad18f0",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/boss/docs/final_architecture.md",
        "type": "file",
        "artifact_id": "4262d347-0203-4424-8b93-a6a3fc51565d",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/boss/scripts",
        "type": "directory",
        "artifact_id": "8e180409-12f6-4e13-b6d2-e56db06b094a",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/boss/scripts/__init__.py",
        "type": "file",
        "artifact_id": "84413bea-fac2-4b1e-8cc5-53fea5eabbab",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/boss/scripts/boss_cli.py",
        "type": "file",
        "artifact_id": "4dd796e9-f8be-4816-a0fc-fa28b90b28bc",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/boss/scripts/business_planning.py",
        "type": "file",
        "artifact_id": "5e17b6d0-d370-404f-b7eb-0f36df3d438e",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/boss/scripts/team_management.py",
        "type": "file",
        "artifact_id": "2099edac-8c59-4588-a2e7-54065a50d5b3",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/commit_strategy.md",
        "type": "file",
        "artifact_id": "48b87cc8-b198-4c8b-aefc-f991e2676ba3",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/current_action_plans.md",
        "type": "file",
        "artifact_id": "2e09fb1c-7f08-45d8-8b6f-2de7d05169d3",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/decision_memo_2025-05-29.md",
        "type": "file",
        "artifact_id": "b4783ae1-f1b0-42f4-97e0-b671ea5dc4d6",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/detailed_contribution_audit.md",
        "type": "file",
        "artifact_id": "cd3d84d1-eeca-46d1-820d-a3e7e4b0f26f",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/detailed_separation_plan.md",
        "type": "file",
        "artifact_id": "f700754b-d529-40df-9c47-1ef840b3f8a7",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/docs",
        "type": "directory",
        "artifact_id": "215e1172-2176-465e-bd8d-1676445d6f14",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/docs/emergency-3hour-tpot-plan.md",
        "type": "file",
        "artifact_id": "81480788-4abe-4860-b4c9-46d351bfc305",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/docs/emergency-strict-mode-implementation.md",
        "type": "file",
        "artifact_id": "079763c9-1cea-4377-8fd5-12828e54762c",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/docs/strategic-roadmap-context-multiproject-tpot.md",
        "type": "file",
        "artifact_id": "2ce3045d-ac27-4a01-aaa1-4fea687d18d1",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/exit_strategy_and_investment_scenarios.md",
        "type": "file",
        "artifact_id": "46f07147-2ac6-461d-8311-d2bd9fa8b9c8",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/final_implementation_summary.md",
        "type": "file",
        "artifact_id": "465846d7-2890-44f5-9ec4-3481bc5cbf18",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/github_issues_for_copilot.md",
        "type": "file",
        "artifact_id": "c0ca63b9-4430-4f74-84e5-4703493b50d9",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/grok_delegation_analysis.md",
        "type": "file",
        "artifact_id": "3f990e07-88d5-4d33-8090-b6db86f55b20",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/grok_delegation_implementation.md",
        "type": "file",
        "artifact_id": "91c89d5f-4520-4a01-ad61-5317a30afd94",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/grok_research_tasks.md",
        "type": "file",
        "artifact_id": "4534864c-9a96-457b-84a6-88ad404c77a3",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/ideas_structuring_plan.md",
        "type": "file",
        "artifact_id": "33a1e318-14cf-44f1-9a9b-2e4bc6d32ffa",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/implementation_plan.md",
        "type": "file",
        "artifact_id": "27d0a37f-cf00-4b0b-9d4b-071f2c046a83",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/learning",
        "type": "directory",
        "artifact_id": "8e2ff125-9b80-4b67-9ab8-47eac44cdec6",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/learning/experiments",
        "type": "directory",
        "artifact_id": "5deb87de-f5bf-44bf-a201-4917d9b90418",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/learning/research",
        "type": "directory",
        "artifact_id": "b9ba8a7a-41a9-4440-a265-5f97710b0207",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/learning/skills",
        "type": "directory",
        "artifact_id": "cf13d206-1614-48d8-8ef0-ef7750864ebf",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/management",
        "type": "directory",
        "artifact_id": "0592b494-5b9d-4922-ba2c-64c67d0d69af",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/management/project_oversight",
        "type": "directory",
        "artifact_id": "04a0a44e-fb5b-4c0f-8918-f571f406a4df",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/management/strategy_planning",
        "type": "directory",
        "artifact_id": "4bb4187f-7fbb-4cf6-96aa-2ca3fbc1f8c8",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/management/team_coordination",
        "type": "directory",
        "artifact_id": "429f27e6-db66-43e1-8f53-052a086cdd70",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/management_system_design.md",
        "type": "file",
        "artifact_id": "30afe3bb-80ca-4537-a06a-24e1dc99f26d",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/personal_life_planning_concept.md",
        "type": "file",
        "artifact_id": "45d7165f-2cbe-4e01-8f23-25c42adc8551",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/personal_planning_detailed.md",
        "type": "file",
        "artifact_id": "88f2710b-2604-4a73-9d8f-665a1660f3cf",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/personalized_json_framework.md",
        "type": "file",
        "artifact_id": "8dd706a6-8d4b-4c62-be85-a0b21bfe54b3",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans",
        "type": "directory",
        "artifact_id": "794a1c95-f863-4cb1-ad64-5f0542c29e28",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/ai_ecosystem_integration_master_plan.md",
        "type": "file",
        "artifact_id": "3834f130-733f-46d7-b651-adbf844da031",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/ai_ecosystem_integration_working_notes.md",
        "type": "file",
        "artifact_id": "0e0ed0fb-b7bf-47cb-922c-42e580940055",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/drafts",
        "type": "directory",
        "artifact_id": "e9e7e40e-a070-497d-a29d-6096518c12f5",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/drafts/business",
        "type": "directory",
        "artifact_id": "80d18c35-ccc4-4193-8eab-88999e8f920a",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/drafts/personal",
        "type": "directory",
        "artifact_id": "46627590-0b67-4127-b8a5-b10de5f74ea2",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/drafts/team",
        "type": "directory",
        "artifact_id": "84f45698-49f7-4660-8390-468cf156ac64",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/drafts/team/926_items_processing_execution_plan.md",
        "type": "file",
        "artifact_id": "c9c98123-f6a1-4c48-8cd3-905ceffa218a",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/drafts/team/sessions_github_integration_plan.md",
        "type": "file",
        "artifact_id": "208aae8f-17d1-4d61-8788-aa2b0fa134ad",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/notes",
        "type": "directory",
        "artifact_id": "241be4e4-ebd9-4f95-86e4-445e11875870",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/notes/business",
        "type": "directory",
        "artifact_id": "c65cd553-e52f-4190-bff5-c58c772d927c",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/notes/personal",
        "type": "directory",
        "artifact_id": "66465844-f548-4caa-ac4b-e7977050c75e",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/notes/team",
        "type": "directory",
        "artifact_id": "72315dfa-18ef-46f2-a013-b57c664d35cb",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/processing_results_documentation_plan.md",
        "type": "file",
        "artifact_id": "a4a3df3a-57cd-492b-aaa1-1b1216f2c008",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/projects",
        "type": "directory",
        "artifact_id": "ca41d471-222f-45a4-ba03-526dd71c3fbd",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/projects/business",
        "type": "directory",
        "artifact_id": "7679a1b4-fa3d-43bb-97c2-f4e4cb99894d",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/projects/personal",
        "type": "directory",
        "artifact_id": "76834a42-ad65-486b-8f6f-99cc45c1f48b",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/projects/team",
        "type": "directory",
        "artifact_id": "4b25332c-a798-43ee-b113-473913a1500d",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/prompt_system_development_questions.md",
        "type": "file",
        "artifact_id": "c14e7d22-ce3a-442e-a38c-99da1b8f6c21",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/plans/tpot_deployment_readiness_assessment.md",
        "type": "file",
        "artifact_id": "7c1b20f7-8204-46bb-9f52-26019d261dc0",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/processing",
        "type": "directory",
        "artifact_id": "c5b1bf16-2185-49f8-9072-a2081778cdcd",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/processing/categorized",
        "type": "directory",
        "artifact_id": "3523c763-1e68-4a35-91a4-309a93e799f8",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/processing/conflicts",
        "type": "directory",
        "artifact_id": "fc31cb1b-1020-4d66-b935-fa35cc7f5fe5",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/processing/reviews",
        "type": "directory",
        "artifact_id": "1219c67b-9cfb-452c-b9fc-0ff3d5007eaf",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/project_architecture_decision.md",
        "type": "file",
        "artifact_id": "f3705380-35c4-488c-b769-9ebc4f86990f",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/project_reality_check_2025-05-29.md",
        "type": "file",
        "artifact_id": "f030d210-be4b-487e-8c6b-c35f15b6c4df",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/project_valuation_and_equity.md",
        "type": "file",
        "artifact_id": "67e40b5e-b438-4d8f-a7e9-17a066847d55",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/quick_decision_summary.md",
        "type": "file",
        "artifact_id": "d69f0a1f-3e7e-4f76-b5e4-9b9385727fd3",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/revised_separation_plan.md",
        "type": "file",
        "artifact_id": "6566ed50-6aad-4461-9104-66a5380d0310",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/statistical_analysis_foundations.md",
        "type": "file",
        "artifact_id": "41869a02-db0a-47d8-8915-5e3e68b261a9",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/system_integration_plan.md",
        "type": "file",
        "artifact_id": "413fa8b8-25e9-4677-bee0-261ea471c995",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/task_decision_checklist_2025-05-29.md",
        "type": "file",
        "artifact_id": "53097f6f-78e5-4f3e-b3a1-5a149115cc1a",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/task_processing_strategy_2025-05-29.md",
        "type": "file",
        "artifact_id": "0dd98324-4f47-45fa-80f1-cbcfb70a07f0",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/team_collaboration_plan.md",
        "type": "file",
        "artifact_id": "55f6e0f8-0bb3-45cc-805c-bb67f4ab36cd",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/templates",
        "type": "directory",
        "artifact_id": "fee3594d-3d52-4c0e-89d1-16b4c4877310",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/templates/grok_delegation_template.json",
        "type": "file",
        "artifact_id": "fea61212-b70a-4746-8f4f-77112a783daa",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/templates/workflow_automation_template.json",
        "type": "file",
        "artifact_id": "c669f0ff-5489-49c1-87d6-4ab598c170a7",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/tools",
        "type": "directory",
        "artifact_id": "242e676d-cf1d-49d9-889f-9a80e6d81f00",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/tools/automation",
        "type": "directory",
        "artifact_id": "0c75d72f-f59a-40e0-866d-0f6d056e787f",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/tools/dashboards",
        "type": "directory",
        "artifact_id": "1a823f82-ff55-4a5a-84d5-0a2a97bb49aa",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/tools/productivity",
        "type": "directory",
        "artifact_id": "f890cbc0-c018-4377-bc69-5861543105cd",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/tpot-portable",
        "type": "directory",
        "artifact_id": "84017666-eed0-48d6-8a0a-813752c1c022",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/tpot-portable/config",
        "type": "directory",
        "artifact_id": "12353283-1af8-481a-9d42-af500014ea4e",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/tpot-portable/docs",
        "type": "directory",
        "artifact_id": "b064bfb4-0b9c-4db3-8474-68145016a8b6",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/tpot-portable/scripts",
        "type": "directory",
        "artifact_id": "4feb07db-5cf9-4bfd-9e41-838fbe2d3ed4",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/personal/tpot_red_os_deployment.md",
        "type": "file",
        "artifact_id": "4c1f4f1e-a443-4348-9741-be41e44e5e1d",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/private",
        "type": "directory",
        "artifact_id": "17bbd7db-c8ee-4df9-84a7-90df8c6b56d0",
        "metadata": {}
      },
      {
        "path": "temp_personal_analysis/sorting",
        "type": "directory",
        "artifact_id": "eaf2cfc5-acf7-4c61-9139-3bec73f82d5c",
        "metadata": {}
      },
      {
        "path": "test_results.json",
        "type": "file",
        "artifact_id": "fc710cb8-bea9-445c-81dd-2f8cd0ffd120",
        "metadata": {}
      },
      {
        "path": "test_simple.json",
        "type": "file",
        "artifact_id": "d32d1d02-0971-4847-821f-4ab35e2a7f21",
        "metadata": {}
      },
      {
        "path": "test_struct_quick.json",
        "type": "file",
        "artifact_id": "237f894a-0705-4161-95ad-cf53005a3e87",
        "metadata": {}
      },
      {
        "path": "tests",
        "type": "directory",
        "artifact_id": "92eee1ff-ca16-4951-8390-06d5508691ea",
        "metadata": {}
      },
      {
        "path": "tests/__init__.py",
        "type": "file",
        "artifact_id": "8d1d0bd1-9da7-49c8-b01c-ed8d51290a56",
        "metadata": {}
      },
      {
        "path": "universal_test.json",
        "type": "file",
        "artifact_id": "b7a480f9-40cc-4c83-886a-bc53076c42ef",
        "metadata": {}
      },
      {
        "path": "validate_schemas.py",
        "type": "file",
        "artifact_id": "645bfc57-9661-4d07-9a79-541a2b42daf0",
        "metadata": {}
      },
      {
        "path": "validate_sessions.py",
        "type": "file",
        "artifact_id": "68509c40-be9b-49e9-b82a-1b687f26a4e6",
        "metadata": {}
      },
      {
        "path": "verify_llm_response.py",
        "type": "file",
        "artifact_id": "7fa97b47-3b2c-4799-9a39-caf80bd43cd0",
        "metadata": {}
      },
      {
        "path": "workspace_state.json",
        "type": "file",
        "artifact_id": "80b34a9b-cd84-40f3-895d-cc7da6758345",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "Session Schema Validation Script for llmstruct",
      "artifact_id": "72b21c01-93ce-45b2-80e0-e08304191d59"
    },
    {
      "module_id": "force_ai_integration",
      "path": "force_ai_integration.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Force AI Integration Script",
      "artifact_id": "500c798c-a9e5-49fe-9bdf-49335549e380"
    },
    {
      "module_id": "auto_init_ai_system",
      "path": "auto_init_ai_system.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor",
      "artifact_id": "b180d4e1-6afb-406d-9062-957a4d6af251"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "JSON Schema Validation Script for llmstruct",
      "artifact_id": "9f7fbb00-510c-4064-85bd-6a2df1383ce8"
    },
    {
      "module_id": "final_system_check",
      "path": "final_system_check.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final System Status Check - LLMStruct Modular CLI Integration",
      "artifact_id": "2da539ac-d0ce-44bf-a453-25c13010147a"
    },
    {
      "module_id": "final_system_validation",
      "path": "final_system_validation.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final system validation script for LLMStruct Modular CLI Integration",
      "artifact_id": "42ac382d-82f9-4cf1-9fc8-7e591c16fa8e"
    },
    {
      "module_id": "install_ai_integration",
      "path": "install_ai_integration.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor",
      "artifact_id": "64565b01-ac9b-45de-ba15-a22577c83ea1"
    },
    {
      "module_id": "debug_terminal",
      "path": "debug_terminal.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Debug Terminal Script - Fallback for when terminal output is not visible",
      "artifact_id": "7a969a2b-5ce8-4e91-af59-4c6ed8f02c38"
    },
    {
      "module_id": "run_ai_diagnostics",
      "path": "run_ai_diagnostics.py",
      "category": "core",
      "functions": 19,
      "classes": 0,
      "summary": "Comprehensive AI Self-Awareness Diagnostics Runner",
      "artifact_id": "e9fbc942-9c27-4b68-a707-beea47b58d37"
    },
    {
      "module_id": "start_development",
      "path": "start_development.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "LLMStruct Development Startup Script",
      "artifact_id": "ade02cca-56b5-438f-9167-40b52d43173a"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "e610942b-f61f-41b5-8f14-2b096add2005"
    },
    {
      "module_id": "monitor_system",
      "path": "monitor_system.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "System Monitor - Continuous logging for debugging terminal issues",
      "artifact_id": "909fb4a5-59f8-4a98-bbe8-a0224c745b09"
    },
    {
      "module_id": "board_cli",
      "path": "board_cli.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "CLI Kanban Board for llmstruct tasks and ideas",
      "artifact_id": "ff067d8b-3a73-48de-852b-39582b4fc25b"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "d5e63acb-1edf-4240-810a-0b0c910fcc29"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Core CLI functionality and main loop.",
      "artifact_id": "fc56c24e-2205-48ec-852e-ed1012c7b092"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "functions": 20,
      "classes": 1,
      "summary": "Workspace State & Mode Management System",
      "artifact_id": "31c06e07-5ace-4dc5-9d72-128f9ec67c68"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "bdf3f7c9-1a22-44e3-8e9c-4da89310d2df"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "e412e954-01a5-46c3-ada4-b9fb213fa0b1"
    },
    {
      "module_id": "src.llmstruct.workflow_orchestrator",
      "path": "src/llmstruct/workflow_orchestrator.py",
      "category": "core",
      "functions": 27,
      "classes": 5,
      "summary": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture",
      "artifact_id": "f2cfe1e4-e942-4e29-85fa-14c2f73cc8e3"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "GitHub visualization/graph feature (gh-view-v1)",
      "artifact_id": "9363024f-a5a1-489a-be15-855945d205c8"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "a92304c5-af11-4879-baf0-dab7938c1a9b"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "functions": 26,
      "classes": 5,
      "summary": "LLMStruct Copilot Integration Module",
      "artifact_id": "5d03b55f-e705-4aaa-82d0-2ba1f816a12b"
    },
    {
      "module_id": "src.llmstruct.ai_workflow_middleware",
      "path": "src/llmstruct/ai_workflow_middleware.py",
      "category": "core",
      "functions": 22,
      "classes": 4,
      "summary": "AI Workflow Middleware - Forces AI Integration with LLMStruct",
      "artifact_id": "3644267f-d8f3-437d-a84f-f51e53fb77a3"
    },
    {
      "module_id": "src.llmstruct.ai_cli_integration",
      "path": "src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "functions": 14,
      "classes": 1,
      "summary": "AI Self-Awareness CLI Integration Module",
      "artifact_id": "2071fd27-1615-4d83-810d-533a7ae7256e"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "CLI configuration management.",
      "artifact_id": "ac4194c2-72ee-4469-b876-3299bcae8062"
    },
    {
      "module_id": "src.llmstruct.cursor_integration",
      "path": "src/llmstruct/cursor_integration.py",
      "category": "core",
      "functions": 22,
      "classes": 6,
      "summary": "Cursor IDE Integration Module",
      "artifact_id": "f3e96a9b-1f1e-48d1-a52c-812390fdabe8"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "5d2931ed-8472-4252-8b16-d7433e933408"
    },
    {
      "module_id": "src.llmstruct.transpiler",
      "path": "src/llmstruct/transpiler.py",
      "category": "core",
      "functions": 10,
      "classes": 3,
      "summary": "AI-Powered Universal Transpiler",
      "artifact_id": "3b4cd1e0-5761-4cb6-bae6-4c05274471d8"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "ad80358e-0fe9-43de-b95e-875639774aff"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "b4acf81b-9d13-4586-9d22-b8370564c752"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "functions": 22,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "artifact_id": "4d2298c1-d4c4-439e-8fcf-88406ece8d10"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "functions": 20,
      "classes": 5,
      "summary": "Smart Context Orchestration for LLMStruct",
      "artifact_id": "d5e22179-d21c-4711-ac55-191202c7a4f8"
    },
    {
      "module_id": "src.llmstruct.ai_self_monitor",
      "path": "src/llmstruct/ai_self_monitor.py",
      "category": "core",
      "functions": 16,
      "classes": 4,
      "summary": "AI Self-Monitoring System",
      "artifact_id": "61dcbaba-ae2a-427e-9637-bb82bc7475ed"
    },
    {
      "module_id": "src.llmstruct.cursor_ai_bridge",
      "path": "src/llmstruct/cursor_ai_bridge.py",
      "category": "core",
      "functions": 21,
      "classes": 1,
      "summary": "Cursor AI Bridge - API Layer for AI Assistant Integration",
      "artifact_id": "c24733b3-7967-4c10-beb9-7a678566ab98"
    },
    {
      "module_id": "src.llmstruct.ai_self_awareness",
      "path": "src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "functions": 47,
      "classes": 8,
      "summary": "AI Self-Awareness Enhancement Module",
      "artifact_id": "9be92451-2228-4f83-8661-aaa4eeec4078"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "CLI utility functions.",
      "artifact_id": "14a55353-1856-4f94-b509-ab07743b80c7"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "functions": 22,
      "classes": 1,
      "summary": "CLI command processing and handlers.",
      "artifact_id": "4b931f10-262b-4585-84b4-2e4eb911c095"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "cd6a50e5-cba0-40f6-bf7a-683c96aeb51f"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "4cf071cb-ed14-4d69-8be3-eaf0ab36fdce"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "71db5a7c-15b2-4f73-946d-f3831af3cf40"
    },
    {
      "module_id": "src.llmstruct.generators.go_json_generator",
      "path": "src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "26ad7d74-118b-4381-8b2f-85d46b4fa7d5"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "10acd1b2-1f3e-495d-8380-b85a2a3cdfed"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "6da1a57a-587e-4215-a328-e1326672975e"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "5aa1a298-4562-49c4-bd4e-316d8d7514da"
    },
    {
      "module_id": "src.llmstruct.parsers.universal_converter",
      "path": "src/llmstruct/parsers/universal_converter.py",
      "category": "core",
      "functions": 14,
      "classes": 3,
      "summary": "Universal Code Converter - Orchestrates all language parsers",
      "artifact_id": "e89d3d9e-4424-4884-a5ac-c81140aa0ae0"
    },
    {
      "module_id": "src.llmstruct.parsers.go_analyzer",
      "path": "src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430",
      "artifact_id": "e98a9cdb-49c5-41cd-94fa-e0bd339faeb9"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "01c605ab-751b-4075-954b-712288616e01"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "",
      "artifact_id": "788a54ea-6cf6-4dd1-9b57-d165e0abdf13"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "be5763af-7217-4a29-9575-49e7884763b2"
    },
    {
      "module_id": "temp_boss_missing.scripts.business_planning",
      "path": "temp_boss_missing/scripts/business_planning.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "Business Planning Module",
      "artifact_id": "f873b564-09d1-4da5-a11c-29332e033993"
    },
    {
      "module_id": "temp_boss_missing.scripts.team_management",
      "path": "temp_boss_missing/scripts/team_management.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "Team Management Module",
      "artifact_id": "3c5e6366-c4b8-49f9-8fc0-e88e6d337c28"
    },
    {
      "module_id": "temp_boss_missing.scripts.boss_cli",
      "path": "temp_boss_missing/scripts/boss_cli.py",
      "category": "core",
      "functions": 25,
      "classes": 1,
      "summary": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f",
      "artifact_id": "e4a1f056-8c9f-440c-b7aa-65cc92d0165d"
    },
    {
      "module_id": "temp_boss_missing.scripts.__init__",
      "path": "temp_boss_missing/scripts/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "c87c266a-b2d9-4c0d-92db-9425f8c0ce47"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project.",
      "artifact_id": "e8b93dea-b652-4df3-80a9-d766ffba54fc"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project.",
      "artifact_id": "3a02d449-62e0-447b-8bde-10180f34f807"
    },
    {
      "module_id": "integrations.telegram_bot.mp002_progress_bot",
      "path": "integrations/telegram_bot/mp002_progress_bot.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "MP-002A Progress Bot - Telegram \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Smart Wrapper \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438",
      "artifact_id": "52131c36-2633-4b43-ae23-f9715e151a87"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "af583f58-f347-4717-bda8-0b2c701d2dd0"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "7fad200d-429c-4c59-aba7-91594a742dc0"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "6b9b87a1-79cc-4e22-80ba-e1c6db3de969"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "2a6b0eac-4141-4135-8c12-cf247fe3769c"
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Session Management CLI",
      "artifact_id": "4a603d43-4059-4356-b818-c41757b997d5"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Automatic struct.json update script",
      "artifact_id": "a990cb58-2d54-4a86-91e9-fad59dfe48a5"
    },
    {
      "module_id": "scripts.fix_hardcoded_usernames",
      "path": "scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "functions": 12,
      "classes": 2,
      "summary": "Fix Hardcoded Usernames Script",
      "artifact_id": "bd7763f7-b60c-49e2-946f-f0589a9c8b8a"
    },
    {
      "module_id": "scripts.create_github_issues",
      "path": "scripts/create_github_issues.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "GitHub Issues Creator for AI-Dogfooding Project",
      "artifact_id": "3fa0250f-330b-4db9-b260-8fa563325609"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Export script for GitHub Projects integration",
      "artifact_id": "8cafb4b8-5da3-41e9-a65c-727a4a46cd61"
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "ef094608-cab6-489d-a916-f49251f18919"
    },
    {
      "module_id": "scripts.process_926_items",
      "path": "scripts/process_926_items.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "926 Items Processing Script - Updated Implementation",
      "artifact_id": "3c314031-ac25-4a80-a47d-73ae4f3c57bf"
    },
    {
      "module_id": "scripts.fix_github_script",
      "path": "scripts/fix_github_script.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Quick fix for GitHub issues creation script",
      "artifact_id": "b81e03f2-188c-43fb-ab8f-dc31f29f4ac5"
    },
    {
      "module_id": "scripts.github_sync_manager",
      "path": "scripts/github_sync_manager.py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub",
      "artifact_id": "9c7968d8-75f0-43d6-a777-e28384947b24"
    },
    {
      "module_id": "scripts.create_comprehensive_index",
      "path": "scripts/create_comprehensive_index.py",
      "category": "core",
      "functions": 37,
      "classes": 2,
      "summary": "Comprehensive Project Index Creator",
      "artifact_id": "698116ae-0951-4171-b05c-6de728efeeb4"
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "JSON Validation Script",
      "artifact_id": "84ad3a86-76a2-4ef3-8261-3aef71275d62"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "dd785f71-a1ea-4ae8-be84-5177e73c5da7"
    },
    {
      "module_id": "scripts.create_tasks_index",
      "path": "scripts/create_tasks_index.py",
      "category": "core",
      "functions": 18,
      "classes": 3,
      "summary": "Tasks Index Creator",
      "artifact_id": "4ec455a9-a555-45f9-91aa-d0060bbf71c3"
    },
    {
      "module_id": "scripts.github_sync_manager_enhanced",
      "path": "scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "functions": 28,
      "classes": 3,
      "summary": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout",
      "artifact_id": "7271a5cd-1f40-48fc-a984-8c863e8772e5"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "fad4a7d0-08a6-4d1a-ab5f-cee89aab5537"
    },
    {
      "module_id": "scripts.validate_epics",
      "path": "scripts/validate_epics.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "Epic Data Validator",
      "artifact_id": "4ce82390-81e5-4080-a5f9-99b169cf7b42"
    },
    {
      "module_id": "scripts.epic_roadmap_manager",
      "path": "scripts/epic_roadmap_manager.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439",
      "artifact_id": "aaa2f572-6f1b-408a-8bf3-bed9ef8ba810"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "b7d3cb7c-cbfa-43ff-b1da-20abcfef0c9c"
    },
    {
      "module_id": "scripts.team.__init__",
      "path": "scripts/team/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "5178b495-6c1c-4989-ab91-baf85a8674c9"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "artifact_id": "110c232a-671f-43a8-b86f-7c0ab55989d0"
    },
    {
      "module_id": "temp_personal_analysis.personal.boss.scripts.business_planning",
      "path": "temp_personal_analysis/personal/boss/scripts/business_planning.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "Business Planning Module",
      "artifact_id": "6d95daf7-3e55-4937-9681-706c08aa980d"
    },
    {
      "module_id": "temp_personal_analysis.personal.boss.scripts.team_management",
      "path": "temp_personal_analysis/personal/boss/scripts/team_management.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "Team Management Module",
      "artifact_id": "8cb33ef9-3032-4756-bbe5-bbad7572cdd5"
    },
    {
      "module_id": "temp_personal_analysis.personal.boss.scripts.boss_cli",
      "path": "temp_personal_analysis/personal/boss/scripts/boss_cli.py",
      "category": "core",
      "functions": 25,
      "classes": 1,
      "summary": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f",
      "artifact_id": "f0b1c67a-c749-4eed-815d-6234d0e5f8a3"
    },
    {
      "module_id": "temp_personal_analysis.personal.boss.scripts.__init__",
      "path": "temp_personal_analysis/personal/boss/scripts/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "51178fd9-1b1e-43f7-b965-37c523f0ad6d"
    },
    {
      "module_id": ".personal.boss.scripts.boss_cli",
      "path": ".personal/boss/scripts/boss_cli.py",
      "category": "core",
      "functions": 29,
      "classes": 1,
      "summary": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f",
      "artifact_id": "dfb13b85-b7b1-4c6e-8200-254d7b5bbe16"
    },
    {
      "module_id": "cursor_workflow_integration.scripts.install_ai_integration",
      "path": "cursor_workflow_integration/scripts/install_ai_integration.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor",
      "artifact_id": "b08fc5d7-d2bc-4813-b2ef-da4d4576daed"
    },
    {
      "module_id": "cursor_workflow_integration.files.auto_init_ai_system",
      "path": "cursor_workflow_integration/files/auto_init_ai_system.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor",
      "artifact_id": "9bc3990c-5430-4f68-b526-a28737828eb2"
    }
  ],
  "modules": [
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "module_doc": "Session Schema Validation Script for llmstruct\nValidates session management JSON files against their schemas.\nFocused validation for session system only.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            21,
            31
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": [
            33,
            52
          ],
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            54,
            124
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            13,
            19
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "json.load",
          "open",
          "print"
        ],
        "validate_json_against_schema": [
          "str",
          "len",
          "Draft7Validator",
          "list",
          "validator.iter_errors",
          "print"
        ],
        "main": [
          "errors.append",
          "print",
          "validate_json_against_schema",
          "load_json"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": "924ffd47c5971a755cb58e7ad0b4714fd00f3e4541c6e8a39375e8a3c977fe77",
      "artifact_id": "72b21c01-93ce-45b2-80e0-e08304191d59"
    },
    {
      "module_id": "force_ai_integration",
      "path": "force_ai_integration.py",
      "category": "core",
      "module_doc": "Force AI Integration Script\nInitializes middleware and monitoring to ensure AI uses llmstruct system.",
      "functions": [
        {
          "name": "force_ai_integration",
          "docstring": "Force AI to use llmstruct system.",
          "line_range": [
            18,
            106
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_integration_status",
          "docstring": "Check current AI integration status.",
          "line_range": [
            109,
            138
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "force_ai_integration": [
          "str",
          "open",
          "initialize_ai_monitor",
          "json.dump",
          "record_ai_usage",
          "config_file.exists",
          "middleware.process_ai_request",
          "monitor.get_real_time_guidance",
          "print",
          "initialize_ai_middleware",
          "Path"
        ],
        "check_integration_status": [
          "middleware.get_middleware_stats",
          "get_ai_middleware",
          "monitor.analyze_behavior_trends",
          "get_ai_monitor",
          "print"
        ]
      },
      "dependencies": [
        "AIWorkflowMode",
        "Path",
        "get_ai_middleware",
        "get_ai_monitor",
        "initialize_ai_middleware",
        "initialize_ai_monitor",
        "json",
        "llmstruct.ai_self_monitor",
        "llmstruct.ai_workflow_middleware",
        "pathlib",
        "record_ai_usage",
        "sys"
      ],
      "hash": "783d4261c3f3167843c642d5e2b59e077bddb415dacdbe64a6911560dddf6312",
      "artifact_id": "500c798c-a9e5-49fe-9bdf-49335549e380"
    },
    {
      "module_id": "auto_init_ai_system",
      "path": "auto_init_ai_system.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor\n\u042d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439\nENHANCED: \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 workflow \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439, \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438 \u0438 context tags",
      "functions": [
        {
          "name": "auto_initialize_ai_system",
          "docstring": "\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            26,
            90
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_current_workflow_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 workflow \u0441\u0435\u0441\u0441\u0438\u0438 \u0438 workspace mode",
          "line_range": [
            92,
            128
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_workflow_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 workflow \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            130,
            178
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "switch_workspace_mode",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c workspace mode (\u0434\u043b\u044f CLI integration)",
          "line_range": [
            180,
            196
          ],
          "parameters": [
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            198,
            208
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "search_ai_capabilities",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u0445 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b (Enhanced with caching optimization)",
          "line_range": [
            210,
            271
          ],
          "parameters": [
            "query"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f AI \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435",
          "line_range": [
            273,
            304
          ],
          "parameters": [
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "get_epic_sessions_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u0441\u0435\u0445 \u044d\u043f\u0438\u043a-\u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            306,
            355
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "create_epic_session",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            357,
            378
          ],
          "parameters": [
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "switch_to_session",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            380,
            398
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "get_available_sessions",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            400,
            461
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "session_management_commands",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438",
          "line_range": [
            463,
            489
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "auto_initialize_ai_system": [
          "src_path.exists",
          "str",
          "AI_CAPABILITIES.discover_all_capabilities",
          "len",
          "logger.error",
          "f.exists",
          "SystemCapabilityDiscovery",
          "logger.info",
          "get_current_workflow_context",
          "print",
          "Path"
        ],
        "get_current_workflow_context": [
          "workspace.get",
          "json.load",
          "open",
          "roadmap.get",
          "epic_data.get",
          "session_file.exists",
          "workspace_file.exists",
          "logger.info",
          "roadmap_file.exists",
          "session.get",
          "logger.warning",
          "Path"
        ],
        "get_workflow_status": [
          "len",
          "str",
          "logger.error",
          "json.load",
          "open",
          "roadmap.get",
          "auto_initialize_ai_system",
          "e.get",
          "get_current_workflow_context",
          "roadmap_file.exists",
          "WorkspaceStateManager",
          "context.get",
          "Path"
        ],
        "switch_workspace_mode": [
          "str",
          "ws.set_mode",
          "logger.error",
          "logger.info",
          "get_current_workflow_context",
          "WorkspaceStateManager",
          "Path"
        ],
        "get_ai_status": [
          "AI_STATUS.get",
          "auto_initialize_ai_system",
          "AI_CAPABILITIES.get_enhanced_capabilities_summary",
          "get_workflow_status"
        ],
        "search_ai_capabilities": [
          "len",
          "query.lower",
          "results.append",
          "func.get",
          "json.load",
          "open",
          "data.get",
          "cache_file.stat",
          "auto_initialize_ai_system",
          "json.dump",
          "cache_file.exists",
          "logger.info",
          "logger.error",
          "module.get",
          "struct_file.stat",
          "Path"
        ],
        "get_ai_context": [
          "len",
          "AI_CAPABILITIES.discover_all_capabilities",
          "logger.error",
          "json.dumps",
          "auto_initialize_ai_system",
          "get_current_workflow_context"
        ],
        "get_epic_sessions_status": [
          "logger.error",
          "json.load",
          "open",
          "sessions_file.exists",
          "roadmap.get",
          "epic_data.get",
          "status_lines.append",
          "roadmap_file.exists",
          "session.get",
          "Path"
        ],
        "create_epic_session": [
          "logger.error",
          "logger.info",
          "os.system",
          "epic_id.split",
          "Path"
        ],
        "switch_to_session": [
          "logger.error",
          "logger.info",
          "os.system",
          "get_current_workflow_context",
          "Path"
        ],
        "get_available_sessions": [
          "sessions_data.get",
          "sessions_list.append",
          "current_session_file.exists",
          "logger.error",
          "sessions_file.exists",
          "open",
          "json.load",
          "current_data.get",
          "roadmap.get",
          "epic_data.get",
          "roadmap_file.exists",
          "session.get",
          "Path"
        ],
        "session_management_commands": []
      },
      "dependencies": [
        "Path",
        "SystemCapabilityDiscovery",
        "WorkspaceStateManager",
        "datetime",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.workspace",
        "logging",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": "3fe1ba4c90500c1b690805ce392f78d56304721b2b277c4809f9ba8c061f827a",
      "artifact_id": "b180d4e1-6afb-406d-9062-957a4d6af251"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "module_doc": "JSON Schema Validation Script for llmstruct\nValidates all enhanced JSON files against their appropriate schemas.\nPart of TSK-130 implementation.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            24,
            34
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            56,
            193
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            15,
            21
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "json.load",
          "open",
          "print"
        ],
        "validate_json_against_schema": [
          "str",
          "print",
          "validate"
        ],
        "main": [
          "errors.append",
          "print",
          "validate_json_against_schema",
          "load_json"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": "08ec72522f6c50cd1624a0680fe9edc8006176193c73e0c0b2b83cae8461719a",
      "artifact_id": "9f7fbb00-510c-4064-85bd-6a2df1383ce8"
    },
    {
      "module_id": "final_system_check",
      "path": "final_system_check.py",
      "category": "core",
      "module_doc": "Final System Status Check - LLMStruct Modular CLI Integration\nComprehensive validation of all completed components",
      "functions": [
        {
          "name": "check_system_status",
          "docstring": "Comprehensive system status check",
          "line_range": [
            12,
            155
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_system_status": [
          "len",
          "json.load",
          "open",
          "data.get",
          "t.get",
          "i.get",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": "16e3482f7da9388c53726063af559a9e48ad8e5a6c5c49e064129c0e5cf68aa7",
      "artifact_id": "2da539ac-d0ce-44bf-a453-25c13010147a"
    },
    {
      "module_id": "final_system_validation",
      "path": "final_system_validation.py",
      "category": "core",
      "module_doc": "Final system validation script for LLMStruct Modular CLI Integration",
      "functions": [
        {
          "name": "main",
          "docstring": "Run comprehensive system validation",
          "line_range": [
            13,
            238
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "len",
          "json.load",
          "open",
          "subprocess.run",
          "getattr",
          "next",
          "task.get",
          "status.upper",
          "print",
          "create_cli_core",
          "__import__"
        ]
      },
      "dependencies": [
        "Path",
        "create_cli_core",
        "json",
        "llmstruct.cli_core",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": "c3b078025b32ac31fe272f4904b6574157bf71caa271e8788941900ed828fac8",
      "artifact_id": "42ac382d-82f9-4cf1-9fc8-7e591c16fa8e"
    },
    {
      "module_id": "install_ai_integration",
      "path": "install_ai_integration.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor\n\u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u043b\u044e\u0431\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
      "functions": [
        {
          "name": "install_ai_integration",
          "docstring": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u0432 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            12,
            58
          ],
          "parameters": [
            "target_project"
          ],
          "decorators": []
        },
        {
          "name": "adapt_cursorrules",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c .cursorrules \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            60,
            99
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "adapt_auto_init",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c auto_init_ai_system.py \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            101,
            123
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "create_simplified_auto_init",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e auto_init \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0431\u0435\u0437 llmstruct",
          "line_range": [
            125,
            189
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438",
          "line_range": [
            191,
            207
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "install_ai_integration": [
          "target_root.exists",
          "vscode_dir.mkdir",
          "adapt_auto_init",
          "adapt_cursorrules",
          "source_path.exists",
          "print",
          "shutil.copy2",
          "Path"
        ],
        "adapt_cursorrules": [
          "len",
          "cursorrules_path.read_text",
          "cursorrules_path.write_text",
          "project_root.rglob",
          "cursorrules_path.exists",
          "list",
          "print",
          "content.replace"
        ],
        "adapt_auto_init": [
          "auto_init_path.write_text",
          "auto_init_path.exists",
          "print",
          "create_simplified_auto_init",
          "content.replace",
          "auto_init_path.read_text"
        ],
        "create_simplified_auto_init": [],
        "main": [
          "len",
          "print",
          "install_ai_integration"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "shutil",
        "sys"
      ],
      "hash": "353707fbf511631d58cc0ba0a5e0e01c4d4d1ecc8ddae9d60d759ba6dd524f56",
      "artifact_id": "64565b01-ac9b-45de-ba15-a22577c83ea1"
    },
    {
      "module_id": "debug_terminal",
      "path": "debug_terminal.py",
      "category": "core",
      "module_doc": "Debug Terminal Script - Fallback for when terminal output is not visible\nSaves all output to files for manual inspection",
      "functions": [
        {
          "name": "run_with_output_capture",
          "docstring": "Run command and capture output to both console and file.",
          "line_range": [
            13,
            78
          ],
          "parameters": [
            "command",
            "description"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run common diagnostic commands with output capture.",
          "line_range": [
            80,
            110
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "run_with_output_capture": [
          "len",
          "f.write",
          "open",
          "subprocess.run",
          "print"
        ],
        "main": [
          "print",
          "run_with_output_capture",
          "results.append"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": "e9551d20a760ee9b69bf1c62d1d4941c17440f6814b49505b86500c4e48acc4c",
      "artifact_id": "7a969a2b-5ce8-4e91-af59-4c6ed8f02c38"
    },
    {
      "module_id": "run_ai_diagnostics",
      "path": "run_ai_diagnostics.py",
      "category": "core",
      "module_doc": "Comprehensive AI Self-Awareness Diagnostics Runner\nEnhanced with Cursor integration testing, multi-AI orchestration validation,\npersonal planning bridge testing, and real-time performance metrics.",
      "functions": [
        {
          "name": "print_section",
          "docstring": "Print a formatted section header.",
          "line_range": [
            20,
            23
          ],
          "parameters": [
            "title",
            "emoji"
          ],
          "decorators": []
        },
        {
          "name": "print_subsection",
          "docstring": "Print a formatted subsection header.",
          "line_range": [
            25,
            28
          ],
          "parameters": [
            "title",
            "emoji"
          ],
          "decorators": []
        },
        {
          "name": "test_basic_ai_awareness",
          "docstring": "Test basic AI self-awareness capabilities.",
          "line_range": [
            30,
            51
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_cursor_integration",
          "docstring": "Test Cursor IDE integration capabilities.",
          "line_range": [
            53,
            124
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_real_time_metrics",
          "docstring": "Test real-time metrics calculation.",
          "line_range": [
            126,
            146
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_personal_planning_bridge",
          "docstring": "Test personal planning bridge functionality.",
          "line_range": [
            148,
            196
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_session_management",
          "docstring": "Test session management capabilities.",
          "line_range": [
            198,
            233
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_configuration_loading",
          "docstring": "Test configuration file loading.",
          "line_range": [
            235,
            255
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_performance_benchmark",
          "docstring": "Run performance benchmarks for AI operations.",
          "line_range": [
            257,
            287
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_diagnostic_report",
          "docstring": "Generate a comprehensive diagnostic report.",
          "line_range": [
            289,
            333
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "continuous_monitoring_mode",
          "docstring": "Run continuous monitoring of AI system health.",
          "line_range": [
            335,
            382
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_specific_component",
          "docstring": "Test a specific AI component in detail.",
          "line_range": [
            384,
            423
          ],
          "parameters": [
            "component_name"
          ],
          "decorators": []
        },
        {
          "name": "test_cli_commands",
          "docstring": "Test CLI command processing capabilities.",
          "line_range": [
            425,
            447
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_context_scenarios",
          "docstring": "Test context orchestrator scenarios.",
          "line_range": [
            449,
            466
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_copilot_features",
          "docstring": "Test copilot manager features.",
          "line_range": [
            468,
            485
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_integration_health_check",
          "docstring": "Run comprehensive integration health check.",
          "line_range": [
            487,
            524
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_optimization_suggestions",
          "docstring": "Generate automated optimization suggestions based on diagnostics.",
          "line_range": [
            526,
            597
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_stress_test",
          "docstring": "Run stress test on AI system.",
          "line_range": [
            599,
            651
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run comprehensive AI diagnostics.",
          "line_range": [
            653,
            738
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "print_section": [
          "len",
          "print"
        ],
        "print_subsection": [
          "len",
          "print"
        ],
        "test_basic_ai_awareness": [
          "len",
          "discovery.discover_all_capabilities",
          "SystemCapabilityDiscovery",
          "discovery.get_enhanced_capabilities_summary",
          "discovery.get_comprehensive_ai_status",
          "print",
          "print_section"
        ],
        "test_cursor_integration": [
          "len",
          "context_data.get",
          "delegation.get",
          "response.get",
          "create_cursor_integration",
          "cursor_integration.get_comprehensive_cursor_response",
          "print",
          "print_section",
          "print_subsection"
        ],
        "test_real_time_metrics": [
          "SystemCapabilityDiscovery",
          "discovery._get_real_system_load",
          "discovery.get_cursor_status_report",
          "discovery._calculate_real_cache_hit_rate",
          "print",
          "print_section"
        ],
        "test_personal_planning_bridge": [
          "len",
          "PersonalPlanningCursorBridge",
          "bridge.get_goal_aligned_suggestions",
          "top_feature.get",
          "bridge.get_priority_guidance",
          "guidance.get",
          "print",
          "enumerate",
          "print_section"
        ],
        "test_session_management": [
          "session_manager.save_session_context",
          "CursorSessionManager",
          "session_manager.start_session",
          "print",
          "print_section"
        ],
        "test_configuration_loading": [
          "config_path.exists",
          "len",
          "json.load",
          "open",
          "print",
          "print_section",
          "Path"
        ],
        "run_performance_benchmark": [
          "discovery.discover_all_capabilities",
          "SystemCapabilityDiscovery",
          "time.time",
          "create_cursor_integration",
          "print",
          "print_section"
        ],
        "generate_diagnostic_report": [
          "len",
          "discovery.discover_all_capabilities",
          "SystemCapabilityDiscovery",
          "open",
          "json.dump",
          "print",
          "time.strftime",
          "print_section",
          "Path"
        ],
        "continuous_monitoring_mode": [
          "discovery.discover_all_capabilities",
          "len",
          "time.sleep",
          "SystemCapabilityDiscovery",
          "discovery._get_real_system_load",
          "discovery._calculate_real_cache_hit_rate",
          "print",
          "time.strftime",
          "print_section"
        ],
        "test_specific_component": [
          "discovery.discover_all_capabilities",
          "len",
          "SystemCapabilityDiscovery",
          "test_cli_commands",
          "component_name.upper",
          "test_copilot_features",
          "list",
          "print",
          "enumerate",
          "print_section",
          "test_context_scenarios"
        ],
        "test_cli_commands": [
          "print",
          "CLIUtils",
          "CLIConfig",
          "CommandProcessor"
        ],
        "test_context_scenarios": [
          "create_context_orchestrator",
          "print"
        ],
        "test_copilot_features": [
          "initialize_copilot",
          "feature.replace",
          "print",
          "hasattr"
        ],
        "run_integration_health_check": [
          "response.get",
          "create_cursor_integration",
          "cursor_integration.get_comprehensive_cursor_response",
          "print",
          "print_section"
        ],
        "generate_optimization_suggestions": [
          "len",
          "discovery.discover_all_capabilities",
          "SystemCapabilityDiscovery",
          "suggestions.append",
          "print",
          "enumerate",
          "print_section"
        ],
        "run_stress_test": [
          "discovery.discover_all_capabilities",
          "context_data.get",
          "SystemCapabilityDiscovery",
          "delegation.get",
          "time.time",
          "create_cursor_integration",
          "range",
          "print",
          "enumerate",
          "print_section"
        ],
        "main": [
          "len",
          "continuous_monitoring_mode",
          "test_func",
          "run_integration_health_check",
          "generate_optimization_suggestions",
          "time.time",
          "run_stress_test",
          "print",
          "test_specific_component",
          "print_section"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CursorSessionManager",
        "Path",
        "PersonalPlanningCursorBridge",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "create_cursor_integration",
        "initialize_copilot",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.cursor_integration",
        "os",
        "pathlib",
        "sys",
        "time"
      ],
      "hash": "59644d1ec404ce42fe6b754b03781cfe0649dc8d2c57a88c3f1b654e78f01fd2",
      "artifact_id": "e9fbc942-9c27-4b68-a707-beea47b58d37"
    },
    {
      "module_id": "start_development",
      "path": "start_development.py",
      "category": "core",
      "module_doc": "LLMStruct Development Startup Script\nConvenient one-command startup for daily development workflow.\nEnhanced with AI Workflow Middleware and Self-Monitoring for seamless llmstruct integration.",
      "functions": [
        {
          "name": "print_header",
          "docstring": "Print startup header.",
          "line_range": [
            17,
            21
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_ai_integration_layer",
          "docstring": "Initialize AI integration layer - this is the NEW seamless integration",
          "line_range": [
            23,
            73
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_environment",
          "docstring": "Check if development environment is properly set up.",
          "line_range": [
            75,
            110
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_workflow_orchestrator",
          "docstring": "Initialize and test WorkflowOrchestrator integration.",
          "line_range": [
            112,
            156
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_cursor_ai_bridge",
          "docstring": "Initialize and test CursorAIBridge integration.",
          "line_range": [
            158,
            198
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "sync_architecture_components",
          "docstring": "Sync with existing llmstruct architecture components and AI integration.",
          "line_range": [
            200,
            240
          ],
          "parameters": [
            "orchestrator",
            "ai_integration"
          ],
          "decorators": []
        },
        {
          "name": "run_system_health_check",
          "docstring": "Run comprehensive system health check.",
          "line_range": [
            242,
            263
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_optimization_suggestions",
          "docstring": "Get AI optimization suggestions with WorkflowOrchestrator integration.",
          "line_range": [
            265,
            320
          ],
          "parameters": [
            "orchestrator"
          ],
          "decorators": []
        },
        {
          "name": "check_git_status",
          "docstring": "Check git repository status.",
          "line_range": [
            322,
            368
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_context",
          "docstring": "Show current project context and priorities.",
          "line_range": [
            370,
            411
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_useful_commands",
          "docstring": "Show useful commands for development.",
          "line_range": [
            413,
            472
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main startup routine with AI Workflow Middleware and WorkflowOrchestrator integration.",
          "line_range": [
            474,
            593
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "print_header": [
          "print"
        ],
        "initialize_ai_integration_layer": [
          "str",
          "initialize_ai_monitor",
          "record_ai_usage",
          "middleware.process_ai_request",
          "print",
          "initialize_ai_middleware",
          "Path"
        ],
        "check_environment": [
          "print",
          "missing_files.append",
          "hasattr",
          "Path"
        ],
        "initialize_workflow_orchestrator": [
          "len",
          "WorkflowOrchestrator",
          "dup_analysis.get",
          "orchestrator.get_current_context",
          "copilot_status.get",
          "system_caps.get",
          "struct_analysis.get",
          "print",
          "context.get",
          "stats.get"
        ],
        "initialize_cursor_ai_bridge": [
          "bridge.ai_get_context",
          "len",
          "bridge.ai_analyze_task",
          "CursorAIBridge",
          "task_analysis.get",
          "project_state.get",
          "print",
          "context.get",
          "ai_rec.get"
        ],
        "sync_architecture_components": [
          "ai_integration.get",
          "orchestrator.sync_with_existing_architecture",
          "middleware.get_middleware_stats",
          "sync_results.items",
          "print"
        ],
        "run_system_health_check": [
          "print",
          "subprocess.run"
        ],
        "get_optimization_suggestions": [
          "line.strip",
          "suggestions.append",
          "subprocess.run",
          "r.get",
          "orchestrator.analyze_codebase_for_duplicates",
          "print",
          "enumerate",
          "duplication_analysis.get"
        ],
        "check_git_status": [
          "len",
          "print",
          "changes.split",
          "subprocess.run"
        ],
        "show_current_context": [
          "bridge_data.get",
          "json.load",
          "open",
          "bridge_file.exists",
          "init_file.exists",
          "business_obj.get",
          "vision.get",
          "print",
          "enumerate",
          "init_data.get",
          "Path"
        ],
        "show_useful_commands": [
          "print"
        ],
        "main": [
          "ai_integration.get",
          "check_git_status",
          "sync_architecture_components",
          "show_current_context",
          "run_system_health_check",
          "middleware.get_middleware_stats",
          "show_useful_commands",
          "check_environment",
          "print_header",
          "initialize_cursor_ai_bridge",
          "get_optimization_suggestions",
          "monitor.analyze_behavior_trends",
          "print",
          "initialize_ai_integration_layer",
          "initialize_workflow_orchestrator"
        ]
      },
      "dependencies": [
        "AIWorkflowMode",
        "CursorAIBridge",
        "Path",
        "WorkflowOrchestrator",
        "initialize_ai_middleware",
        "initialize_ai_monitor",
        "json",
        "llmstruct.ai_self_monitor",
        "llmstruct.ai_workflow_middleware",
        "llmstruct.cursor_ai_bridge",
        "llmstruct.workflow_orchestrator",
        "os",
        "pathlib",
        "record_ai_usage",
        "subprocess",
        "sys"
      ],
      "hash": "da3d9e91130a06f318e0844e82c02d253937154ac42bec34a1da2230c1e4329a",
      "artifact_id": "ade02cca-56b5-438f-9167-40b52d43173a"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json_file",
          "docstring": "Load a JSON file and return its contents.",
          "line_range": [
            15,
            25
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_with_struct",
          "docstring": "Verify llm_response.json against struct.json.",
          "line_range": [
            28,
            71
          ],
          "parameters": [
            "response_text",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_without_struct",
          "docstring": "Verify llm_response.json based on LLMstruct principles.",
          "line_range": [
            74,
            108
          ],
          "parameters": [
            "response_text"
          ],
          "decorators": []
        },
        {
          "name": "generate_metrics",
          "docstring": "Generate metrics for the response per EXT-004.",
          "line_range": [
            111,
            141
          ],
          "parameters": [
            "response_data",
            "server_log"
          ],
          "decorators": []
        },
        {
          "name": "update_tasks_json",
          "docstring": "Append a new task to tasks.json.",
          "line_range": [
            144,
            151
          ],
          "parameters": [
            "tasks_file",
            "new_task"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            154,
            225
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json_file": [
          "json.load",
          "open",
          "logging.error"
        ],
        "verify_response_with_struct": [
          "logging.info",
          "e.startswith",
          "struct_data.get",
          "expected_files.issubset",
          "set",
          "expected_goals.issubset",
          "expected_extensions.issubset",
          "logging.error",
          "re.findall"
        ],
        "verify_response_without_struct": [
          "logging.info",
          "expected_files.issubset",
          "principle.lower",
          "set",
          "response_text.lower",
          "expected_goals.issubset",
          "expected_extensions.issubset",
          "logging.error",
          "re.findall"
        ],
        "generate_metrics": [
          "len",
          "response_text.split",
          "server_log.get",
          "datetime.utcnow",
          "re.findall"
        ],
        "update_tasks_json": [
          "tasks.get",
          "logging.info",
          "open",
          "load_json_file",
          "json.dump"
        ],
        "main": [
          "update_tasks_json",
          "generate_metrics",
          "logging.info",
          "verify_response_with_struct",
          "verify_response_without_struct",
          "load_json_file",
          "open",
          "json.dump",
          "parser.add_argument",
          "argparse.ArgumentParser",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "argparse",
        "datetime",
        "json",
        "logging",
        "os",
        "re",
        "typing"
      ],
      "hash": "cc9835ed655495604e354911c11b62791d839a9336d76f7df5fa987ba674c57a",
      "artifact_id": "e610942b-f61f-41b5-8f14-2b096add2005"
    },
    {
      "module_id": "monitor_system",
      "path": "monitor_system.py",
      "category": "core",
      "module_doc": "System Monitor - Continuous logging for debugging terminal issues\nRuns in background and logs system status to files",
      "functions": [
        {
          "name": "log_system_status",
          "docstring": "Log current system status to file.",
          "line_range": [
            15,
            60
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run continuous monitoring.",
          "line_range": [
            62,
            86
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "log_system_status": [
          "len",
          "str",
          "WorkflowOrchestrator",
          "timestamp.strftime",
          "f.write",
          "open",
          "json.dumps",
          "timestamp.isoformat",
          "context.get",
          "wo.get_current_context",
          "Path"
        ],
        "main": [
          "len",
          "print",
          "log_system_status",
          "time.sleep"
        ]
      },
      "dependencies": [
        "Path",
        "WorkflowOrchestrator",
        "datetime",
        "json",
        "llmstruct.workflow_orchestrator",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": "f35beeb4d7f6ff371d989ccb2058b27b1ae53801e295661f046650bcf801f397",
      "artifact_id": "909fb4a5-59f8-4a98-bbe8-a0224c745b09"
    },
    {
      "module_id": "board_cli",
      "path": "board_cli.py",
      "category": "core",
      "module_doc": "CLI Kanban Board for llmstruct tasks and ideas\n- Reads data/tasks.json and data/ideas.json\n- Shows board in terminal: columns by status, rows by priority\n- Supports filtering, sorting, and shows links between tasks/ideas",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": [
            26,
            28
          ],
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "group_by_status_and_priority",
          "docstring": "",
          "line_range": [
            30,
            36
          ],
          "parameters": [
            "items",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "render_board",
          "docstring": "",
          "line_range": [
            38,
            64
          ],
          "parameters": [
            "board",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            66,
            74
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "json.load",
          "open"
        ],
        "group_by_status_and_priority": [
          "defaultdict",
          "item.get"
        ],
        "render_board": [
          "table.add_row",
          "Panel",
          "kind.capitalize",
          "Table",
          "table.add_column",
          "item.get",
          "console.print",
          "links.append",
          "links.extend"
        ],
        "main": [
          "load_json",
          "tasks_data.get",
          "console.rule",
          "group_by_status_and_priority",
          "ideas_data.get",
          "render_board"
        ]
      },
      "dependencies": [
        "Console",
        "Panel",
        "Path",
        "Table",
        "box",
        "collections",
        "defaultdict",
        "json",
        "os",
        "pathlib",
        "rich",
        "rich.console",
        "rich.panel",
        "rich.table"
      ],
      "hash": "3e733003df9f2e0946abd47f3fb0fa1ff5afb323c8aede68daeb854019e1b81f",
      "artifact_id": "ff067d8b-3a73-48de-852b-39582b4fc25b"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            13,
            17
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_text_file",
          "docstring": "Check if file is likely a text file based on extension.",
          "line_range": [
            20,
            31
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": [
            34,
            66
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_parser.parse_gitignore",
          "gitignore_path.exists",
          "Path"
        ],
        "is_text_file": [],
        "collect_project": [
          "str",
          "f.read",
          "load_gitignore",
          "doc_files.items",
          "len",
          "logger.error",
          "gitignore",
          "open",
          "json.dump",
          "is_text_file",
          "any",
          "logger.info",
          "root_dir.rglob",
          "file_path.is_file",
          "logger.warning",
          "Path"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": "f6d7fb537d2ae878884758c22a853439c915eae11cf2f19fd92224e5adda61cd",
      "artifact_id": "d5e63acb-1edf-4240-810a-0b0c910fcc29"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "module_doc": "Core CLI functionality and main loop.",
      "functions": [
        {
          "name": "create_cli_core",
          "docstring": "Factory function to create CLI core instance.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI core with root directory.",
          "line_range": [
            28,
            35
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_cache",
          "docstring": "Initialize cache if enabled in config.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_copilot",
          "docstring": "Initialize Copilot integration if enabled.",
          "line_range": [
            55,
            63
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive_mode",
          "docstring": "Run the interactive CLI mode.",
          "line_range": [
            65,
            97
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "Clean up resources.",
          "line_range": [
            99,
            107
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLICore",
          "docstring": "Core CLI class handling main loop and coordination.",
          "line_range": [
            25,
            107
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI core with root directory.",
              "line_range": [
                28,
                35
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "setup_cache",
              "docstring": "Initialize cache if enabled in config.",
              "line_range": [
                37,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_copilot",
              "docstring": "Initialize Copilot integration if enabled.",
              "line_range": [
                55,
                63
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_interactive_mode",
              "docstring": "Run the interactive CLI mode.",
              "line_range": [
                65,
                97
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources.",
              "line_range": [
                99,
                107
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CLIUtils",
          "CLIConfig",
          "CommandProcessor"
        ],
        "setup_cache": [
          "str",
          "cache_config.get",
          "logging.info",
          "logging.warning",
          "JSONCache",
          "cache_path.mkdir",
          "Path"
        ],
        "setup_copilot": [
          "initialize_copilot",
          "copilot_config.get",
          "logging.info",
          "logging.warning"
        ],
        "run_interactive_mode": [
          "self.cleanup",
          "input",
          "user_input.startswith",
          "self.setup_cache",
          "self.setup_copilot",
          "print",
          "logging.error",
          "user_input.lower"
        ],
        "cleanup": [
          "logging.info"
        ],
        "create_cli_core": [
          "CLICore"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "JSONCache",
        "Optional",
        "Path",
        "cli_commands",
        "cli_config",
        "cli_utils",
        "copilot",
        "initialize_copilot",
        "llmstruct.cache",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "57a534c55c12bacfaf26ed4b4124fe97a3c2559253b5a62346e9c9f0368e5132",
      "artifact_id": "fc56c24e-2205-48ec-852e-ed1012c7b092"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "module_doc": "Workspace State & Mode Management System\nEnhanced AI-Human Collaboration with Context Boundaries",
      "functions": [
        {
          "name": "create_workspace_manager",
          "docstring": "Factory function to create workspace manager",
          "line_range": [
            461,
            463
          ],
          "parameters": [
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_or_create_state",
          "docstring": "Load existing workspace state or create default",
          "line_range": [
            38,
            75
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_permission_templates",
          "docstring": "Load permission templates for different modes",
          "line_range": [
            77,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "set_mode",
          "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
          "line_range": [
            130,
            176
          ],
          "parameters": [
            "self",
            "modes",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_parse_modes_from_string",
          "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
          "line_range": [
            178,
            182
          ],
          "parameters": [
            "self",
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "_combine_mode_permissions",
          "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
          "line_range": [
            184,
            216
          ],
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "_get_mode_combination_name",
          "docstring": "Get descriptive name for mode combination",
          "line_range": [
            218,
            232
          ],
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "get_current_state",
          "docstring": "Get current workspace state",
          "line_range": [
            234,
            236
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "check_permission",
          "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
          "line_range": [
            238,
            302
          ],
          "parameters": [
            "self",
            "operation",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "_get_required_capability",
          "docstring": "Map operations to required capabilities",
          "line_range": [
            304,
            320
          ],
          "parameters": [
            "self",
            "operation"
          ],
          "decorators": []
        },
        {
          "name": "_is_restricted_target",
          "docstring": "Check if target matches any file restrictions",
          "line_range": [
            322,
            334
          ],
          "parameters": [
            "self",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "set_emergency_override",
          "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
          "line_range": [
            336,
            365
          ],
          "parameters": [
            "self",
            "level",
            "reason",
            "duration_minutes"
          ],
          "decorators": []
        },
        {
          "name": "_check_emergency_override",
          "docstring": "Check if emergency override is active and not expired",
          "line_range": [
            367,
            381
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_strict_mode",
          "docstring": "Integration with existing strict mode system",
          "line_range": [
            383,
            387
          ],
          "parameters": [
            "self",
            "strict_tags"
          ],
          "decorators": []
        },
        {
          "name": "add_decision_workflow",
          "docstring": "Add decision to workflow tracking (for [decide] mode)",
          "line_range": [
            389,
            396
          ],
          "parameters": [
            "self",
            "decision_id",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "get_workspace_status",
          "docstring": "Get comprehensive workspace status for debugging and display",
          "line_range": [
            398,
            420
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_override_time_remaining",
          "docstring": "Get formatted time remaining for emergency override",
          "line_range": [
            422,
            437
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_state",
          "docstring": "Save current state to file",
          "line_range": [
            439,
            442
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_mode_status",
          "docstring": "Get formatted status string for CLI display",
          "line_range": [
            444,
            458
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WorkspaceStateManager",
          "docstring": "Core workspace state management with mode-based permissions and context boundaries.\n\nFeatures:\n- Multi-dimensional mode system ([code][debug], [discuss][meta])\n- Hybrid permission system (capabilities + file restrictions)\n- Smart mode combinations with context awareness\n- Emergency override protocols with time-boxing\n- Integration with existing strict mode system",
          "line_range": [
            16,
            458
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "workspace_dir"
              ]
            },
            {
              "name": "_load_or_create_state",
              "docstring": "Load existing workspace state or create default",
              "line_range": [
                38,
                75
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_permission_templates",
              "docstring": "Load permission templates for different modes",
              "line_range": [
                77,
                128
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "set_mode",
              "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
              "line_range": [
                130,
                176
              ],
              "parameters": [
                "self",
                "modes",
                "session_id"
              ]
            },
            {
              "name": "_parse_modes_from_string",
              "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
              "line_range": [
                178,
                182
              ],
              "parameters": [
                "self",
                "mode_string"
              ]
            },
            {
              "name": "_combine_mode_permissions",
              "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
              "line_range": [
                184,
                216
              ],
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "_get_mode_combination_name",
              "docstring": "Get descriptive name for mode combination",
              "line_range": [
                218,
                232
              ],
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "get_current_state",
              "docstring": "Get current workspace state",
              "line_range": [
                234,
                236
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "check_permission",
              "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
              "line_range": [
                238,
                302
              ],
              "parameters": [
                "self",
                "operation",
                "target"
              ]
            },
            {
              "name": "_get_required_capability",
              "docstring": "Map operations to required capabilities",
              "line_range": [
                304,
                320
              ],
              "parameters": [
                "self",
                "operation"
              ]
            },
            {
              "name": "_is_restricted_target",
              "docstring": "Check if target matches any file restrictions",
              "line_range": [
                322,
                334
              ],
              "parameters": [
                "self",
                "target"
              ]
            },
            {
              "name": "set_emergency_override",
              "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
              "line_range": [
                336,
                365
              ],
              "parameters": [
                "self",
                "level",
                "reason",
                "duration_minutes"
              ]
            },
            {
              "name": "_check_emergency_override",
              "docstring": "Check if emergency override is active and not expired",
              "line_range": [
                367,
                381
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_strict_mode",
              "docstring": "Integration with existing strict mode system",
              "line_range": [
                383,
                387
              ],
              "parameters": [
                "self",
                "strict_tags"
              ]
            },
            {
              "name": "add_decision_workflow",
              "docstring": "Add decision to workflow tracking (for [decide] mode)",
              "line_range": [
                389,
                396
              ],
              "parameters": [
                "self",
                "decision_id",
                "decision_data"
              ]
            },
            {
              "name": "get_workspace_status",
              "docstring": "Get comprehensive workspace status for debugging and display",
              "line_range": [
                398,
                420
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_override_time_remaining",
              "docstring": "Get formatted time remaining for emergency override",
              "line_range": [
                422,
                437
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_state",
              "docstring": "Save current state to file",
              "line_range": [
                439,
                442
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_mode_status",
              "docstring": "Get formatted status string for CLI display",
              "line_range": [
                444,
                458
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_permission_templates",
          "self._load_or_create_state",
          "Path"
        ],
        "_load_or_create_state": [
          "json.load",
          "open",
          "self._save_state",
          "datetime.now"
        ],
        "_load_permission_templates": [],
        "set_mode": [
          "isinstance",
          "self._parse_modes_from_string",
          "len",
          "self._combine_mode_permissions",
          "combined_permissions.get",
          "self._save_state",
          "self._get_mode_combination_name",
          "datetime.now"
        ],
        "_parse_modes_from_string": [
          "re.findall"
        ],
        "_combine_mode_permissions": [
          "logger.info",
          "set",
          "list",
          "sorted",
          "template.get"
        ],
        "_get_mode_combination_name": [
          "sorted",
          "combination_names.get"
        ],
        "get_current_state": [],
        "check_permission": [
          "self._is_restricted_target",
          "self._get_required_capability",
          "permissions.get",
          "self._check_emergency_override"
        ],
        "_get_required_capability": [
          "operation.startswith",
          "capability_map.items"
        ],
        "_is_restricted_target": [
          "fnmatch.fnmatch",
          "target.startswith",
          "restriction.startswith"
        ],
        "set_emergency_override": [
          "timedelta",
          "expires_at.isoformat",
          "datetime.now",
          "self._save_state"
        ],
        "_check_emergency_override": [
          "datetime.now",
          "self._save_state",
          "datetime.fromisoformat",
          "override.get"
        ],
        "integrate_strict_mode": [
          "self._save_state",
          "datetime.now"
        ],
        "add_decision_workflow": [
          "self._save_state",
          "datetime.now"
        ],
        "get_workspace_status": [
          "len",
          "self._get_mode_combination_name",
          "override.get",
          "self._get_override_time_remaining"
        ],
        "_get_override_time_remaining": [
          "remaining.total_seconds",
          "override.get",
          "int",
          "datetime.fromisoformat",
          "datetime.now"
        ],
        "_save_state": [
          "open",
          "json.dump"
        ],
        "get_mode_status": [
          "self._get_mode_combination_name",
          "override.get"
        ],
        "create_workspace_manager": [
          "WorkspaceStateManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "Union",
        "datetime",
        "fnmatch",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "timedelta",
        "timezone",
        "typing"
      ],
      "hash": "781995ee11b41c001f3ce9ac5be89cd99963beb044d8020550f54edb7993eee5",
      "artifact_id": "31c06e07-5ace-4dc5-9d72-128f9ec67c68"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            21,
            25
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            27,
            49
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            51,
            90
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            92,
            108
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            110,
            126
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            128,
            130
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            20,
            130
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                27,
                49
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                51,
                90
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                92,
                108
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                110,
                126
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                128,
                130
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "sqlite3.connect",
          "self.create_tables"
        ],
        "create_tables": [],
        "cache_json": [
          "f.read",
          "str",
          "json_file.exists",
          "content.encode",
          "logging.info",
          "open",
          "json.dumps",
          "hashlib.sha256",
          "logging.error",
          "Path"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "json.load",
          "open",
          "cursor.fetchone",
          "logging.error"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": "d4439792ecb8b18d2fb3eac280ee2e7e338722a019a5fbbceee3128a9985ef09",
      "artifact_id": "bdf3f7c9-1a22-44e3-8e9c-4da89310d2df"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            20,
            46
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            49,
            116
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "isinstance",
          "data.get",
          "filtered.append",
          "item.get"
        ],
        "select_json": [
          "json_file.exists",
          "json.load",
          "open",
          "f.seek",
          "prefix.startswith",
          "ijson.parse",
          "path.append",
          "filter_json",
          "filtered.append",
          "current_item.get",
          "logging.error",
          "Path"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "8d3216b4eff05bdde8725caedab745c57ef0c2d52cd84b07f7cabc7b15256d2c",
      "artifact_id": "e412e954-01a5-46c3-ada4-b9fb213fa0b1"
    },
    {
      "module_id": "src.llmstruct.workflow_orchestrator",
      "path": "src/llmstruct/workflow_orchestrator.py",
      "category": "core",
      "module_doc": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture\nExtends CopilotContextManager and SmartContextOrchestrator instead of duplicating",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface that integrates with existing llmstruct architecture",
          "line_range": [
            650,
            687
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            62,
            70
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            89,
            101
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            110,
            151
          ],
          "parameters": [
            "self",
            "project_root",
            "debug"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_onboarding_guide",
          "docstring": "Generate comprehensive AI onboarding guide using existing architecture",
          "line_range": [
            153,
            163
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_project_overview_from_struct",
          "docstring": "Get project overview from struct.json analysis",
          "line_range": [
            165,
            183
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_existing_architecture_guide",
          "docstring": "Guide to existing llmstruct architecture",
          "line_range": [
            185,
            207
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_copilot_integration_guide",
          "docstring": "Guide for proper CopilotContextManager usage",
          "line_range": [
            209,
            222
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_orchestration_guide",
          "docstring": "Guide for SmartContextOrchestrator usage",
          "line_range": [
            224,
            239
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_analysis_guide",
          "docstring": "Guide for proper struct.json analysis approach",
          "line_range": [
            241,
            259
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_current_context",
          "docstring": "Get comprehensive current context using existing architecture",
          "line_range": [
            261,
            300
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_analysis",
          "docstring": "Analyze struct.json for current codebase state",
          "line_range": [
            302,
            356
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_architecture_from_struct",
          "docstring": "Analyze architecture patterns from struct.json",
          "line_range": [
            358,
            376
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_function_duplication",
          "docstring": "Analyze function duplication across modules",
          "line_range": [
            378,
            399
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_metrics",
          "docstring": "Calculate complexity metrics from struct.json",
          "line_range": [
            401,
            417
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_score",
          "docstring": "Calculate overall complexity score",
          "line_range": [
            419,
            432
          ],
          "parameters": [
            "self",
            "stats"
          ],
          "decorators": []
        },
        {
          "name": "_get_orchestrator_state",
          "docstring": "Get SmartContextOrchestrator state",
          "line_range": [
            434,
            445
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_codebase_for_duplicates",
          "docstring": "Analyze codebase for duplicate functions using struct.json",
          "line_range": [
            447,
            495
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "sync_with_existing_architecture",
          "docstring": "Sync with existing llmstruct architecture instead of duplicating",
          "line_range": [
            497,
            520
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "create_task",
          "docstring": "Create new task (this is new functionality, not duplication)",
          "line_range": [
            526,
            554
          ],
          "parameters": [
            "self",
            "title",
            "description",
            "priority",
            "tags",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_active_tasks",
          "docstring": "Get all active tasks",
          "line_range": [
            556,
            564
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_json_safe",
          "docstring": "Safe JSON loading with error handling",
          "line_range": [
            566,
            576
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_save_json_safe",
          "docstring": "Safe JSON saving with error handling",
          "line_range": [
            578,
            587
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_get_active_session_context",
          "docstring": "Get current session context",
          "line_range": [
            590,
            594
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_identify_key_components",
          "docstring": "Identify key components from struct analysis",
          "line_range": [
            596,
            607
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_patterns",
          "docstring": "Define workflow patterns that integrate with existing architecture",
          "line_range": [
            609,
            629
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_available_commands",
          "docstring": "Available commands that work with existing architecture",
          "line_range": [
            631,
            647
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskStatus",
          "docstring": "",
          "line_range": [
            29,
            34
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "SessionType",
          "docstring": "",
          "line_range": [
            37,
            42
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "Task",
          "docstring": "Structured task representation",
          "line_range": [
            46,
            70
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                62,
                70
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "Session",
          "docstring": "AI work session with context and goals",
          "line_range": [
            74,
            101
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                89,
                101
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "WorkflowOrchestrator",
          "docstring": "Integration layer that extends existing llmstruct architecture\nUses CopilotContextManager, SmartContextOrchestrator, and struct.json analysis",
          "line_range": [
            104,
            647
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                110,
                151
              ],
              "parameters": [
                "self",
                "project_root",
                "debug"
              ]
            },
            {
              "name": "get_ai_onboarding_guide",
              "docstring": "Generate comprehensive AI onboarding guide using existing architecture",
              "line_range": [
                153,
                163
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_project_overview_from_struct",
              "docstring": "Get project overview from struct.json analysis",
              "line_range": [
                165,
                183
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_existing_architecture_guide",
              "docstring": "Guide to existing llmstruct architecture",
              "line_range": [
                185,
                207
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_copilot_integration_guide",
              "docstring": "Guide for proper CopilotContextManager usage",
              "line_range": [
                209,
                222
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_context_orchestration_guide",
              "docstring": "Guide for SmartContextOrchestrator usage",
              "line_range": [
                224,
                239
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_analysis_guide",
              "docstring": "Guide for proper struct.json analysis approach",
              "line_range": [
                241,
                259
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_current_context",
              "docstring": "Get comprehensive current context using existing architecture",
              "line_range": [
                261,
                300
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_analysis",
              "docstring": "Analyze struct.json for current codebase state",
              "line_range": [
                302,
                356
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_architecture_from_struct",
              "docstring": "Analyze architecture patterns from struct.json",
              "line_range": [
                358,
                376
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_analyze_function_duplication",
              "docstring": "Analyze function duplication across modules",
              "line_range": [
                378,
                399
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_calculate_complexity_metrics",
              "docstring": "Calculate complexity metrics from struct.json",
              "line_range": [
                401,
                417
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_calculate_complexity_score",
              "docstring": "Calculate overall complexity score",
              "line_range": [
                419,
                432
              ],
              "parameters": [
                "self",
                "stats"
              ]
            },
            {
              "name": "_get_orchestrator_state",
              "docstring": "Get SmartContextOrchestrator state",
              "line_range": [
                434,
                445
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_codebase_for_duplicates",
              "docstring": "Analyze codebase for duplicate functions using struct.json",
              "line_range": [
                447,
                495
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "sync_with_existing_architecture",
              "docstring": "Sync with existing llmstruct architecture instead of duplicating",
              "line_range": [
                497,
                520
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "create_task",
              "docstring": "Create new task (this is new functionality, not duplication)",
              "line_range": [
                526,
                554
              ],
              "parameters": [
                "self",
                "title",
                "description",
                "priority",
                "tags",
                "dependencies"
              ]
            },
            {
              "name": "get_active_tasks",
              "docstring": "Get all active tasks",
              "line_range": [
                556,
                564
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_json_safe",
              "docstring": "Safe JSON loading with error handling",
              "line_range": [
                566,
                576
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_save_json_safe",
              "docstring": "Safe JSON saving with error handling",
              "line_range": [
                578,
                587
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            },
            {
              "name": "_get_active_session_context",
              "docstring": "Get current session context",
              "line_range": [
                590,
                594
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_identify_key_components",
              "docstring": "Identify key components from struct analysis",
              "line_range": [
                596,
                607
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_get_workflow_patterns",
              "docstring": "Define workflow patterns that integrate with existing architecture",
              "line_range": [
                609,
                629
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_available_commands",
              "docstring": "Available commands that work with existing architecture",
              "line_range": [
                631,
                647
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "str",
          "UniversalConverter",
          "SystemCapabilityDiscovery",
          "SmartContextOrchestrator",
          "CLIConfig",
          "time.time",
          "print",
          "CopilotContextManager",
          "Path"
        ],
        "get_ai_onboarding_guide": [
          "self._get_available_commands",
          "self._get_existing_architecture_guide",
          "self._get_struct_analysis_guide",
          "self._get_workflow_patterns",
          "self._get_copilot_integration_guide",
          "self._get_project_overview_from_struct",
          "self._get_context_orchestration_guide"
        ],
        "_get_project_overview_from_struct": [
          "len",
          "json.load",
          "open",
          "struct_data.get",
          "struct_path.exists",
          "self._identify_key_components",
          "logger.warning",
          "self._analyze_architecture_from_struct"
        ],
        "_get_existing_architecture_guide": [],
        "_get_copilot_integration_guide": [],
        "_get_context_orchestration_guide": [],
        "_get_struct_analysis_guide": [],
        "get_current_context": [
          "isinstance",
          "str",
          "self._get_active_session_context",
          "self.get_active_tasks",
          "time.time",
          "self._get_struct_analysis",
          "logger.warning",
          "print",
          "self._get_orchestrator_state"
        ],
        "_get_struct_analysis": [
          "len",
          "self._analyze_function_duplication",
          "str",
          "logger.error",
          "json.load",
          "open",
          "struct_data.get",
          "time.time",
          "self._analyze_architecture_from_struct",
          "struct_path.exists",
          "self._calculate_complexity_metrics",
          "print"
        ],
        "_analyze_architecture_from_struct": [
          "len",
          "directories.keys",
          "struct_data.get",
          "directories.items",
          "list",
          "Path"
        ],
        "_analyze_function_duplication": [
          "len",
          "struct_data.get",
          "function_names.items",
          "module.get"
        ],
        "_calculate_complexity_metrics": [
          "len",
          "sum",
          "self._calculate_complexity_score",
          "struct_data.get",
          "round",
          "stats.get",
          "m.get"
        ],
        "_calculate_complexity_score": [
          "round",
          "stats.get"
        ],
        "_get_orchestrator_state": [
          "str"
        ],
        "analyze_codebase_for_duplicates": [
          "len",
          "duplication.get",
          "time.time",
          "self._get_struct_analysis",
          "struct_analysis.get",
          "print",
          "recommendations.append"
        ],
        "sync_with_existing_architecture": [
          "str",
          "open",
          "json.dump",
          "logger.error"
        ],
        "create_task": [
          "str",
          "Task",
          "self._load_json_safe",
          "asdict",
          "logger.info",
          "uuid.uuid4",
          "self._save_json_safe"
        ],
        "get_active_tasks": [
          "t.get",
          "self._load_json_safe"
        ],
        "_load_json_safe": [
          "json.load",
          "open",
          "file_path.exists",
          "logger.error"
        ],
        "_save_json_safe": [
          "open",
          "json.dump",
          "logger.error"
        ],
        "_get_active_session_context": [
          "asdict"
        ],
        "_identify_key_components": [
          "len",
          "struct_data.get",
          "key_components.append",
          "module.get"
        ],
        "_get_workflow_patterns": [],
        "_get_available_commands": [],
        "main": [
          "len",
          "orchestrator.sync_with_existing_architecture",
          "WorkflowOrchestrator",
          "orchestrator.get_ai_onboarding_guide",
          "json.dumps",
          "orchestrator.get_current_context",
          "parser.add_argument",
          "results.items",
          "print",
          "orchestrator.analyze_codebase_for_duplicates",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "context.get"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "SystemCapabilityDiscovery",
        "Union",
        "UniversalConverter",
        "ai_self_awareness",
        "argparse",
        "asdict",
        "cli_config",
        "context_orchestrator",
        "copilot",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "os",
        "parsers.universal_converter",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": "6a74a0602bdd6d8fcf4989c77c784c041b3272e9ad7d14d6e42e701c07d17c40",
      "artifact_id": "f2cfe1e4-e942-4e29-85fa-14c2f73cc8e3"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "module_doc": "GitHub visualization/graph feature (gh-view-v1)\nExport consolidated tasks/ideas from JSON files to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for GitHub Projects export",
          "line_range": [
            177,
            208
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize exporter with configuration",
          "line_range": [
            19,
            25
          ],
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from TOML file",
          "line_range": [
            27,
            35
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_mapping",
          "docstring": "Load existing ID mapping between local and GitHub",
          "line_range": [
            37,
            45
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_mapping",
          "docstring": "Save ID mapping to file",
          "line_range": [
            47,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_run_gh_command",
          "docstring": "Run GitHub CLI command and return success status and output",
          "line_range": [
            55,
            68
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "load_official_data",
          "docstring": "Load tasks and ideas from official JSON files",
          "line_range": [
            70,
            98
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "format_task_for_github",
          "docstring": "Format task data for GitHub Project card",
          "line_range": [
            100,
            137
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "format_idea_for_github",
          "docstring": "Format idea data for GitHub Project card",
          "line_range": [
            139,
            174
          ],
          "parameters": [
            "self",
            "idea"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExporter",
          "docstring": "Export tasks and ideas to GitHub Projects as cards",
          "line_range": [
            16,
            174
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize exporter with configuration",
              "line_range": [
                19,
                25
              ],
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from TOML file",
              "line_range": [
                27,
                35
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_mapping",
              "docstring": "Load existing ID mapping between local and GitHub",
              "line_range": [
                37,
                45
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_mapping",
              "docstring": "Save ID mapping to file",
              "line_range": [
                47,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_run_gh_command",
              "docstring": "Run GitHub CLI command and return success status and output",
              "line_range": [
                55,
                68
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "load_official_data",
              "docstring": "Load tasks and ideas from official JSON files",
              "line_range": [
                70,
                98
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "format_task_for_github",
              "docstring": "Format task data for GitHub Project card",
              "line_range": [
                100,
                137
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "format_idea_for_github",
              "docstring": "Format idea data for GitHub Project card",
              "line_range": [
                139,
                174
              ],
              "parameters": [
                "self",
                "idea"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "self._load_mapping",
          "Path"
        ],
        "_load_config": [
          "open",
          "config.get",
          "toml.load",
          "print"
        ],
        "_load_mapping": [
          "json.load",
          "open"
        ],
        "_save_mapping": [
          "open",
          "print",
          "json.dump"
        ],
        "_run_gh_command": [
          "subprocess.run"
        ],
        "load_official_data": [
          "len",
          "ideas_file.exists",
          "tasks_file.exists",
          "json.load",
          "open",
          "tasks_data.get",
          "print",
          "ideas_data.get"
        ],
        "format_task_for_github": [
          "task.get",
          "status_map.get",
          "body_parts.append"
        ],
        "format_idea_for_github": [
          "idea.get",
          "status_map.get",
          "body_parts.append"
        ],
        "main": [
          "len",
          "exporter.load_official_data",
          "GitHubProjectsExporter",
          "exporter.format_task_for_github",
          "exporter.format_idea_for_github",
          "print",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "pathlib",
        "subprocess",
        "sys",
        "toml",
        "typing"
      ],
      "hash": "42f9d108f2c0b84536bc1f84861fe336c6c5383ee231ea92edf91eabed74b28c",
      "artifact_id": "9363024f-a5a1-489a-be15-855945d205c8"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
          "line_range": [
            20,
            71
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            74,
            114
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "isinstance",
          "str",
          "module.get",
          "any",
          "prompt.lower",
          "filter_json",
          "item.get",
          "struct.get"
        ],
        "attach_to_llm_request": [
          "context_file.exists",
          "cache.cache_json",
          "filter_struct",
          "logging.info",
          "json.dumps",
          "cache.get_full_json",
          "prompt.lower",
          "cache.get_metadata",
          "select_json",
          "filter_json",
          "logging.error",
          "Path"
        ]
      },
      "dependencies": [
        "Any",
        "JSONCache",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": "f9cee229500252c3716ea8ed897cff7cc40e9af1f650b56b75960cf8660cb638",
      "artifact_id": "a92304c5-af11-4879-baf0-dab7938c1a9b"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "module_doc": "LLMStruct Copilot Integration Module\nProvides context-aware development assistance with hybrid copilot capabilities.",
      "functions": [
        {
          "name": "initialize_copilot",
          "docstring": "Initialize copilot context manager for the project.\n\nArgs:\n    project_root: Project root directory\n\nReturns:\n    Configured CopilotContextManager instance",
          "line_range": [
            649,
            659
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "trigger_copilot_event",
          "docstring": "Trigger a copilot event and get relevant context.\n\nArgs:\n    manager: CopilotContextManager instance\n    event_type: Type of event\n    file_path: Optional file path\n    **kwargs: Additional event metadata\n\nReturns:\n    Dict with event context",
          "line_range": [
            662,
            679
          ],
          "parameters": [
            "manager",
            "event_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "smart_suggest",
          "docstring": "Get smart suggestions based on query and context.\n\nArgs:\n    manager: CopilotContextManager instance\n    query: Query string\n    context: Context type (code, workflow, task, etc.)\n\nReturns:\n    List of suggestions",
          "line_range": [
            682,
            702
          ],
          "parameters": [
            "manager",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context_for_scenario",
          "docstring": "Get optimized context for specific scenario - standalone function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            705,
            728
          ],
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
          "line_range": [
            68,
            90
          ],
          "parameters": [
            "self",
            "project_root",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load copilot configuration from JSON file.",
          "line_range": [
            92,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_layers",
          "docstring": "Initialize context layers from configuration.",
          "line_range": [
            106,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_context_layer",
          "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
          "line_range": [
            118,
            160
          ],
          "parameters": [
            "self",
            "layer_name",
            "force"
          ],
          "decorators": []
        },
        {
          "name": "unload_context_layer",
          "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
          "line_range": [
            162,
            180
          ],
          "parameters": [
            "self",
            "layer_name"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            182,
            225
          ],
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_context",
          "docstring": "Fallback to legacy context loading.",
          "line_range": [
            227,
            235
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_vscode",
          "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
          "line_range": [
            237,
            251
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_event",
          "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
          "line_range": [
            252,
            296
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_event_context",
          "docstring": "Legacy event context loading as fallback.",
          "line_range": [
            298,
            350
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "suggest_completion",
          "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
          "line_range": [
            352,
            397
          ],
          "parameters": [
            "self",
            "current_code",
            "file_path",
            "cursor_position"
          ],
          "decorators": []
        },
        {
          "name": "validate_change",
          "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
          "line_range": [
            399,
            445
          ],
          "parameters": [
            "self",
            "file_path",
            "change_type"
          ],
          "decorators": []
        },
        {
          "name": "_matches_scope",
          "docstring": "Check if file matches scope pattern.",
          "line_range": [
            447,
            452
          ],
          "parameters": [
            "self",
            "file_path",
            "scope"
          ],
          "decorators": []
        },
        {
          "name": "_matches_trigger",
          "docstring": "Check if change type matches trigger.",
          "line_range": [
            454,
            463
          ],
          "parameters": [
            "self",
            "change_type",
            "trigger"
          ],
          "decorators": []
        },
        {
          "name": "_validate_json_schema",
          "docstring": "Validate JSON file against schema.",
          "line_range": [
            465,
            480
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_check_circular_dependencies",
          "docstring": "Check for circular dependencies.",
          "line_range": [
            482,
            507
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_validate_task_references",
          "docstring": "Validate task references in tasks.json.",
          "line_range": [
            509,
            536
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
          "line_range": [
            538,
            568
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "refresh_all_contexts",
          "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
          "line_range": [
            570,
            584
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_status",
          "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
          "line_range": [
            586,
            607
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "export_context",
          "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
          "line_range": [
            609,
            631
          ],
          "parameters": [
            "self",
            "layers",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Clean up resources.",
          "line_range": [
            633,
            643
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextLayer",
          "docstring": "Context layer priorities for copilot integration.",
          "line_range": [
            22,
            28
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AttachMode",
          "docstring": "Context attachment modes.",
          "line_range": [
            31,
            37
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLayerConfig",
          "docstring": "Configuration for a context layer.",
          "line_range": [
            41,
            49
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotEvent",
          "docstring": "Represents a copilot event for context triggering.",
          "line_range": [
            53,
            59
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotContextManager",
          "docstring": "Manages context layers and integration with GitHub Copilot.\nProvides intelligent context loading and workflow assistance.",
          "line_range": [
            62,
            643
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
              "line_range": [
                68,
                90
              ],
              "parameters": [
                "self",
                "project_root",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load copilot configuration from JSON file.",
              "line_range": [
                92,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_initialize_layers",
              "docstring": "Initialize context layers from configuration.",
              "line_range": [
                106,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_context_layer",
              "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
              "line_range": [
                118,
                160
              ],
              "parameters": [
                "self",
                "layer_name",
                "force"
              ]
            },
            {
              "name": "unload_context_layer",
              "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
              "line_range": [
                162,
                180
              ],
              "parameters": [
                "self",
                "layer_name"
              ]
            },
            {
              "name": "get_optimized_context",
              "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
              "line_range": [
                182,
                225
              ],
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "max_tokens"
              ]
            },
            {
              "name": "_get_legacy_context",
              "docstring": "Fallback to legacy context loading.",
              "line_range": [
                227,
                235
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_vscode",
              "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
              "line_range": [
                237,
                251
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_context_for_event",
              "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
              "line_range": [
                252,
                296
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_get_legacy_event_context",
              "docstring": "Legacy event context loading as fallback.",
              "line_range": [
                298,
                350
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "suggest_completion",
              "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
              "line_range": [
                352,
                397
              ],
              "parameters": [
                "self",
                "current_code",
                "file_path",
                "cursor_position"
              ]
            },
            {
              "name": "validate_change",
              "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
              "line_range": [
                399,
                445
              ],
              "parameters": [
                "self",
                "file_path",
                "change_type"
              ]
            },
            {
              "name": "_matches_scope",
              "docstring": "Check if file matches scope pattern.",
              "line_range": [
                447,
                452
              ],
              "parameters": [
                "self",
                "file_path",
                "scope"
              ]
            },
            {
              "name": "_matches_trigger",
              "docstring": "Check if change type matches trigger.",
              "line_range": [
                454,
                463
              ],
              "parameters": [
                "self",
                "change_type",
                "trigger"
              ]
            },
            {
              "name": "_validate_json_schema",
              "docstring": "Validate JSON file against schema.",
              "line_range": [
                465,
                480
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_check_circular_dependencies",
              "docstring": "Check for circular dependencies.",
              "line_range": [
                482,
                507
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_validate_task_references",
              "docstring": "Validate task references in tasks.json.",
              "line_range": [
                509,
                536
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
              "line_range": [
                538,
                568
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "refresh_all_contexts",
              "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
              "line_range": [
                570,
                584
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_status",
              "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
              "line_range": [
                586,
                607
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "export_context",
              "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
              "line_range": [
                609,
                631
              ],
              "parameters": [
                "self",
                "layers",
                "format"
              ]
            },
            {
              "name": "close",
              "docstring": "Clean up resources.",
              "line_range": [
                633,
                643
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._initialize_layers",
          "create_context_orchestrator",
          "str",
          "self._load_config",
          "Path",
          "JSONCache",
          "os.getcwd"
        ],
        "_load_config": [
          "logger.error",
          "json.load",
          "open",
          "logger.info",
          "logger.warning",
          "Path"
        ],
        "_initialize_layers": [
          "layer_config.get",
          "layers_config.items",
          "ContextLayerConfig"
        ],
        "load_context_layer": [
          "logger.debug",
          "logger.error",
          "json.load",
          "open",
          "time.time",
          "logger.info",
          "source_path.exists",
          "logger.warning"
        ],
        "unload_context_layer": [
          "logger.info"
        ],
        "get_optimized_context": [
          "self._get_legacy_context",
          "logger.error",
          "scenario_mapping.get"
        ],
        "_get_legacy_context": [
          "self.load_context_layer"
        ],
        "get_context_for_vscode": [
          "self.get_optimized_context"
        ],
        "get_context_for_event": [
          "self.get_optimized_context",
          "self._get_legacy_event_context",
          "logger.error",
          "scenario_mapping.get"
        ],
        "_get_legacy_event_context": [
          "logger.error",
          "json.load",
          "open",
          "source_path.exists",
          "self.load_context_layer",
          "workflow_triggers.get",
          "triggers.get",
          "code_triggers.get",
          "file_triggers.get"
        ],
        "suggest_completion": [
          "str",
          "current_module.get",
          "func.get",
          "suggestions.append",
          "struct_context.get",
          "self.load_context_layer",
          "module.get",
          "Path"
        ],
        "validate_change": [
          "len",
          "self._matches_scope",
          "self._validate_json_schema",
          "self._validate_task_references",
          "result.get",
          "rule.get",
          "safety_features.get",
          "self._check_circular_dependencies",
          "self._matches_trigger"
        ],
        "_matches_scope": [
          "str",
          "fnmatch",
          "Path"
        ],
        "_matches_trigger": [
          "trigger_map.get"
        ],
        "_validate_json_schema": [
          "json.load",
          "open",
          "file_path.endswith"
        ],
        "_check_circular_dependencies": [
          "str",
          "len",
          "struct_data.get",
          "self.load_context_layer",
          "module.get",
          "Path"
        ],
        "_validate_task_references": [
          "json.load",
          "open",
          "tasks_data.get",
          "task.get",
          "set",
          "file_path.endswith",
          "task_ids.add"
        ],
        "get_workflow_suggestions": [
          "workflows.items",
          "suggestions.append",
          "workflow.get",
          "self.load_context_layer",
          "suggestions.extend",
          "command.lower"
        ],
        "refresh_all_contexts": [
          "self.load_context_layer",
          "list",
          "logger.info"
        ],
        "get_context_status": [
          "list"
        ],
        "export_context": [
          "str",
          "json.dumps",
          "list"
        ],
        "close": [
          "hasattr",
          "logger.info"
        ],
        "initialize_copilot": [
          "CopilotContextManager"
        ],
        "trigger_copilot_event": [
          "manager.get_context_for_event",
          "CopilotEvent"
        ],
        "smart_suggest": [
          "manager.get_workflow_suggestions"
        ],
        "get_optimized_context_for_scenario": [
          "initialize_copilot",
          "locals",
          "manager.close",
          "manager.get_optimized_context"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "Union",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "fnmatch",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": "30fd8d33334ad30d2d2784dd2ae9d1fd50ab982076f550ab8d7e9a2258b2c310",
      "artifact_id": "5d03b55f-e705-4aaa-82d0-2ba1f816a12b"
    },
    {
      "module_id": "src.llmstruct.ai_workflow_middleware",
      "path": "src/llmstruct/ai_workflow_middleware.py",
      "category": "core",
      "module_doc": "AI Workflow Middleware - Forces AI Integration with LLMStruct\nIntercepts all AI requests and ensures they go through our orchestration system.",
      "functions": [
        {
          "name": "initialize_ai_middleware",
          "docstring": "Initialize global AI middleware.",
          "line_range": [
            393,
            397
          ],
          "parameters": [
            "project_root",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_middleware",
          "docstring": "Get current AI middleware instance.",
          "line_range": [
            400,
            402
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "process_ai_query",
          "docstring": "Global function to process AI queries through middleware.",
          "line_range": [
            405,
            410
          ],
          "parameters": [
            "query",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "ensure_llmstruct_integration",
          "docstring": "Decorator that ensures function uses llmstruct system.",
          "line_range": [
            414,
            431
          ],
          "parameters": [
            "func"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            55,
            74
          ],
          "parameters": [
            "self",
            "project_root",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "_load_middleware_config",
          "docstring": "Load middleware configuration.",
          "line_range": [
            76,
            101
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_ai_request",
          "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration",
          "line_range": [
            103,
            135
          ],
          "parameters": [
            "self",
            "raw_query",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_parse_ai_request",
          "docstring": "Parse raw query into structured AI request.",
          "line_range": [
            137,
            160
          ],
          "parameters": [
            "self",
            "raw_query"
          ],
          "decorators": []
        },
        {
          "name": "_should_use_llmstruct",
          "docstring": "Determine if request should use llmstruct system.",
          "line_range": [
            162,
            186
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_process_with_llmstruct",
          "docstring": "Process request through full llmstruct system.",
          "line_range": [
            188,
            219
          ],
          "parameters": [
            "self",
            "request",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_process_bypass",
          "docstring": "Process request without llmstruct system.",
          "line_range": [
            221,
            236
          ],
          "parameters": [
            "self",
            "request",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_optimize_context",
          "docstring": "Optimize context using orchestrator.",
          "line_range": [
            238,
            261
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_ai_delegation",
          "docstring": "Analyze which AI should handle this request.",
          "line_range": [
            263,
            280
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_context",
          "docstring": "Get enhanced context with project awareness.",
          "line_range": [
            282,
            295
          ],
          "parameters": [
            "self",
            "request",
            "context_result"
          ],
          "decorators": []
        },
        {
          "name": "_get_capability_summary",
          "docstring": "Get current system capabilities.",
          "line_range": [
            297,
            310
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_generate_usage_guidance",
          "docstring": "Generate guidance for AI on how to use llmstruct system.",
          "line_range": [
            312,
            331
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_map_tags_to_scenario",
          "docstring": "Map context tags to orchestrator scenarios.",
          "line_range": [
            333,
            348
          ],
          "parameters": [
            "self",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "_default_ai_processing",
          "docstring": "Default AI processing when no custom handler provided.",
          "line_range": [
            350,
            365
          ],
          "parameters": [
            "self",
            "request",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_middleware_stats",
          "docstring": "Get middleware usage statistics.",
          "line_range": [
            367,
            376
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "force_llmstruct_mode",
          "docstring": "Force all future requests to use llmstruct system.",
          "line_range": [
            378,
            381
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enable_guidance_mode",
          "docstring": "Enable guided mode with llmstruct suggestions.",
          "line_range": [
            383,
            386
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "wrapper",
          "docstring": "",
          "line_range": [
            416,
            429
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AIWorkflowMode",
          "docstring": "AI workflow enforcement modes.",
          "line_range": [
            21,
            26
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AIRequest",
          "docstring": "Standardized AI request structure.",
          "line_range": [
            30,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIResponse",
          "docstring": "Standardized AI response structure.",
          "line_range": [
            40,
            46
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIWorkflowMiddleware",
          "docstring": "Middleware that ensures ALL AI interactions go through LLMStruct system.\nThis solves the problem of AI not using its own infrastructure.",
          "line_range": [
            49,
            386
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                55,
                74
              ],
              "parameters": [
                "self",
                "project_root",
                "mode"
              ]
            },
            {
              "name": "_load_middleware_config",
              "docstring": "Load middleware configuration.",
              "line_range": [
                76,
                101
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_ai_request",
              "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration",
              "line_range": [
                103,
                135
              ],
              "parameters": [
                "self",
                "raw_query",
                "ai_handler"
              ]
            },
            {
              "name": "_parse_ai_request",
              "docstring": "Parse raw query into structured AI request.",
              "line_range": [
                137,
                160
              ],
              "parameters": [
                "self",
                "raw_query"
              ]
            },
            {
              "name": "_should_use_llmstruct",
              "docstring": "Determine if request should use llmstruct system.",
              "line_range": [
                162,
                186
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_process_with_llmstruct",
              "docstring": "Process request through full llmstruct system.",
              "line_range": [
                188,
                219
              ],
              "parameters": [
                "self",
                "request",
                "ai_handler"
              ]
            },
            {
              "name": "_process_bypass",
              "docstring": "Process request without llmstruct system.",
              "line_range": [
                221,
                236
              ],
              "parameters": [
                "self",
                "request",
                "ai_handler"
              ]
            },
            {
              "name": "_optimize_context",
              "docstring": "Optimize context using orchestrator.",
              "line_range": [
                238,
                261
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_analyze_ai_delegation",
              "docstring": "Analyze which AI should handle this request.",
              "line_range": [
                263,
                280
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_get_enhanced_context",
              "docstring": "Get enhanced context with project awareness.",
              "line_range": [
                282,
                295
              ],
              "parameters": [
                "self",
                "request",
                "context_result"
              ]
            },
            {
              "name": "_get_capability_summary",
              "docstring": "Get current system capabilities.",
              "line_range": [
                297,
                310
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_generate_usage_guidance",
              "docstring": "Generate guidance for AI on how to use llmstruct system.",
              "line_range": [
                312,
                331
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_map_tags_to_scenario",
              "docstring": "Map context tags to orchestrator scenarios.",
              "line_range": [
                333,
                348
              ],
              "parameters": [
                "self",
                "tags"
              ]
            },
            {
              "name": "_default_ai_processing",
              "docstring": "Default AI processing when no custom handler provided.",
              "line_range": [
                350,
                365
              ],
              "parameters": [
                "self",
                "request",
                "context"
              ]
            },
            {
              "name": "get_middleware_stats",
              "docstring": "Get middleware usage statistics.",
              "line_range": [
                367,
                376
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "force_llmstruct_mode",
              "docstring": "Force all future requests to use llmstruct system.",
              "line_range": [
                378,
                381
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enable_guidance_mode",
              "docstring": "Enable guided mode with llmstruct suggestions.",
              "line_range": [
                383,
                386
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "create_context_orchestrator",
          "str",
          "SystemCapabilityDiscovery",
          "logger.info",
          "CursorAIBridge",
          "self._load_middleware_config",
          "Path"
        ],
        "_load_middleware_config": [
          "config_path.exists",
          "open",
          "json.load"
        ],
        "process_ai_request": [
          "self._should_use_llmstruct",
          "str",
          "self._process_bypass",
          "logger.error",
          "self._parse_ai_request",
          "time.time",
          "AIResponse",
          "self._process_with_llmstruct"
        ],
        "_parse_ai_request": [
          "re.sub",
          "time.time",
          "context_tags.extend",
          "AIRequest",
          "re.findall"
        ],
        "_should_use_llmstruct": [],
        "_process_with_llmstruct": [
          "self._get_enhanced_context",
          "time.time",
          "self._optimize_context",
          "self._analyze_ai_delegation",
          "self._default_ai_processing",
          "AIResponse",
          "enhanced_context.get",
          "ai_handler"
        ],
        "_process_bypass": [
          "AIResponse",
          "ai_handler"
        ],
        "_optimize_context": [
          "len",
          "str",
          "logger.error",
          "context.get",
          "self._map_tags_to_scenario"
        ],
        "_analyze_ai_delegation": [
          "delegation.get",
          "str",
          "logger.error"
        ],
        "_get_enhanced_context": [
          "self._generate_usage_guidance",
          "self._get_capability_summary"
        ],
        "_get_capability_summary": [
          "str"
        ],
        "_generate_usage_guidance": [
          "guidance.append"
        ],
        "_map_tags_to_scenario": [],
        "_default_ai_processing": [],
        "get_middleware_stats": [],
        "force_llmstruct_mode": [
          "logger.info"
        ],
        "enable_guidance_mode": [
          "logger.info"
        ],
        "initialize_ai_middleware": [
          "AIWorkflowMiddleware"
        ],
        "get_ai_middleware": [],
        "process_ai_query": [
          "_middleware_instance.process_ai_request",
          "RuntimeError"
        ],
        "ensure_llmstruct_integration": [],
        "wrapper": [
          "str",
          "func",
          "get_ai_middleware",
          "kwargs.get",
          "logger.warning",
          "middleware.process_ai_request"
        ]
      },
      "dependencies": [
        "Any",
        "Callable",
        "CursorAIBridge",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.context_orchestrator",
        "llmstruct.cursor_ai_bridge",
        "logging",
        "pathlib",
        "re",
        "time",
        "typing"
      ],
      "hash": "54add1ca5d729600b85063062c19fc6d076fb219792f66c2420719fed3fb6c66",
      "artifact_id": "3644267f-d8f3-437d-a84f-f51e53fb77a3"
    },
    {
      "module_id": "src.llmstruct.ai_cli_integration",
      "path": "src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "module_doc": "AI Self-Awareness CLI Integration Module\nIntegrates unused CLI functions into the AI self-awareness system.",
      "functions": [
        {
          "name": "create_ai_cli_integration",
          "docstring": "Factory function to create AI CLI integration instance.",
          "line_range": [
            304,
            306
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_enhanced_cli_summary",
          "docstring": "Get a formatted summary of AI CLI integration capabilities.",
          "line_range": [
            309,
            346
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI integration system.",
          "line_range": [
            21,
            25
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_discover_available_commands",
          "docstring": "Discover which unused CLI commands are available for integration.",
          "line_range": [
            27,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_status_command",
          "docstring": "Integrate cmd_status for real-time AI system status awareness.",
          "line_range": [
            71,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_audit_command",
          "docstring": "Integrate cmd_audit for system health analysis awareness.",
          "line_range": [
            102,
            131
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_context_command",
          "docstring": "Integrate cmd_context for context mode awareness.",
          "line_range": [
            133,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_queue_command",
          "docstring": "Integrate cmd_queue for workflow queue monitoring.",
          "line_range": [
            164,
            193
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_integration_summary",
          "docstring": "Get summary of CLI command integrations for AI awareness.",
          "line_range": [
            195,
            215
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_ai_enhancement_impact",
          "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
          "line_range": [
            217,
            241
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_status",
          "docstring": "Create fallback status information if cmd_status is not available.",
          "line_range": [
            243,
            256
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_audit",
          "docstring": "Create fallback audit information if cmd_audit is not available.",
          "line_range": [
            258,
            271
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_context",
          "docstring": "Create fallback context information if cmd_context is not available.",
          "line_range": [
            273,
            286
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_queue",
          "docstring": "Create fallback queue information if cmd_queue is not available.",
          "line_range": [
            288,
            301
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AISelfAwarenessCLIIntegration",
          "docstring": "Integrates unused CLI functions to enhance AI self-awareness capabilities.\nTransforms 21 unused CLI commands into useful AI interaction tools.",
          "line_range": [
            15,
            301
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI integration system.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_discover_available_commands",
              "docstring": "Discover which unused CLI commands are available for integration.",
              "line_range": [
                27,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_status_command",
              "docstring": "Integrate cmd_status for real-time AI system status awareness.",
              "line_range": [
                71,
                100
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_audit_command",
              "docstring": "Integrate cmd_audit for system health analysis awareness.",
              "line_range": [
                102,
                131
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_context_command",
              "docstring": "Integrate cmd_context for context mode awareness.",
              "line_range": [
                133,
                162
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_queue_command",
              "docstring": "Integrate cmd_queue for workflow queue monitoring.",
              "line_range": [
                164,
                193
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_integration_summary",
              "docstring": "Get summary of CLI command integrations for AI awareness.",
              "line_range": [
                195,
                215
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_ai_enhancement_impact",
              "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
              "line_range": [
                217,
                241
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_status",
              "docstring": "Create fallback status information if cmd_status is not available.",
              "line_range": [
                243,
                256
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_audit",
              "docstring": "Create fallback audit information if cmd_audit is not available.",
              "line_range": [
                258,
                271
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_context",
              "docstring": "Create fallback context information if cmd_context is not available.",
              "line_range": [
                273,
                286
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_queue",
              "docstring": "Create fallback queue information if cmd_queue is not available.",
              "line_range": [
                288,
                301
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._discover_available_commands",
          "Path"
        ],
        "_discover_available_commands": [
          "unused_command_mapping.items",
          "getattr",
          "hasattr",
          "logger.error"
        ],
        "integrate_ai_status_command": [
          "str",
          "cmd_status",
          "self._create_fallback_status",
          "logger.error"
        ],
        "integrate_ai_audit_command": [
          "cmd_audit",
          "str",
          "logger.error",
          "self._create_fallback_audit"
        ],
        "integrate_ai_context_command": [
          "self._create_fallback_context",
          "cmd_context",
          "str",
          "logger.error"
        ],
        "integrate_ai_queue_command": [
          "str",
          "self._create_fallback_queue",
          "logger.error",
          "cmd_queue"
        ],
        "get_integration_summary": [
          "len",
          "sum",
          "info.get",
          "self._calculate_ai_enhancement_impact",
          "cmd.get"
        ],
        "_calculate_ai_enhancement_impact": [
          "len",
          "info.get",
          "enhanced_categories.append",
          "any",
          "capability_categories.items"
        ],
        "_create_fallback_status": [
          "str"
        ],
        "_create_fallback_audit": [
          "str"
        ],
        "_create_fallback_context": [],
        "_create_fallback_queue": [],
        "create_ai_cli_integration": [
          "AISelfAwarenessCLIIntegration"
        ],
        "get_ai_enhanced_cli_summary": [
          "integration.integrate_ai_status_command",
          "create_ai_cli_integration",
          "integration.get_integration_summary",
          "integration.integrate_ai_queue_command",
          "integration.integrate_ai_audit_command",
          "integration.integrate_ai_context_command"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "cli_commands",
        "json",
        "llmstruct",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "31bb5f483e9f2b68b6a50f6763428111abd2eb8026401104bca1d83a1c6efdf6",
      "artifact_id": "2071fd27-1615-4d83-810d-533a7ae7256e"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "module_doc": "CLI configuration management.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize configuration manager.",
          "line_range": [
            20,
            24
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from llmstruct.toml.",
          "line_range": [
            26,
            34
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "Get cache configuration section.",
          "line_range": [
            36,
            38
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "Get Copilot configuration section.",
          "line_range": [
            40,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "Get queue configuration section.",
          "line_range": [
            44,
            46
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "Get context configuration section.",
          "line_range": [
            48,
            50
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_gitignore_patterns",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            52,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "Get directories to exclude from scanning.",
          "line_range": [
            68,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "Get file patterns to include.",
          "line_range": [
            84,
            89
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "Get file patterns to exclude.",
          "line_range": [
            91,
            96
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "Get maximum file size for processing (in bytes).",
          "line_range": [
            98,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_auto_update_config",
          "docstring": "Get auto-update configuration.",
          "line_range": [
            102,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_auto_update_enabled",
          "docstring": "Check if auto-update is enabled.",
          "line_range": [
            106,
            108
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "Get path to struct.json file.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "Get path to context file.",
          "line_range": [
            114,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "Save current configuration to file.",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_config",
          "docstring": "Update configuration value.",
          "line_range": [
            126,
            131
          ],
          "parameters": [
            "self",
            "section",
            "key",
            "value"
          ],
          "decorators": []
        },
        {
          "name": "reload_config",
          "docstring": "Reload configuration from file.",
          "line_range": [
            133,
            135
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIConfig",
          "docstring": "Manages CLI configuration from llmstruct.toml and other sources.",
          "line_range": [
            17,
            135
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize configuration manager.",
              "line_range": [
                20,
                24
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from llmstruct.toml.",
              "line_range": [
                26,
                34
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cache_config",
              "docstring": "Get cache configuration section.",
              "line_range": [
                36,
                38
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_copilot_config",
              "docstring": "Get Copilot configuration section.",
              "line_range": [
                40,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_queue_config",
              "docstring": "Get queue configuration section.",
              "line_range": [
                44,
                46
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_config",
              "docstring": "Get context configuration section.",
              "line_range": [
                48,
                50
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_gitignore_patterns",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": [
                52,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "Get directories to exclude from scanning.",
              "line_range": [
                68,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_include_patterns",
              "docstring": "Get file patterns to include.",
              "line_range": [
                84,
                89
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "Get file patterns to exclude.",
              "line_range": [
                91,
                96
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_max_file_size",
              "docstring": "Get maximum file size for processing (in bytes).",
              "line_range": [
                98,
                100
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_auto_update_config",
              "docstring": "Get auto-update configuration.",
              "line_range": [
                102,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_auto_update_enabled",
              "docstring": "Check if auto-update is enabled.",
              "line_range": [
                106,
                108
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_struct_file_path",
              "docstring": "Get path to struct.json file.",
              "line_range": [
                110,
                112
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_file_path",
              "docstring": "Get path to context file.",
              "line_range": [
                114,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_config",
              "docstring": "Save current configuration to file.",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_config",
              "docstring": "Update configuration value.",
              "line_range": [
                126,
                131
              ],
              "parameters": [
                "self",
                "section",
                "key",
                "value"
              ]
            },
            {
              "name": "reload_config",
              "docstring": "Reload configuration from file.",
              "line_range": [
                133,
                135
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path"
        ],
        "_load_config": [
          "toml.load",
          "logging.error"
        ],
        "get_cache_config": [],
        "get_copilot_config": [],
        "get_queue_config": [],
        "get_context_config": [],
        "get_gitignore_patterns": [
          "gitignore_path.open",
          "gitignore_path.exists",
          "line.strip",
          "line.startswith",
          "logging.error",
          "Path"
        ],
        "get_exclude_dirs": [
          "parsing_config.get",
          "cli_config.get",
          "set",
          "list"
        ],
        "get_include_patterns": [
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_exclude_patterns": [
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_max_file_size": [],
        "get_auto_update_config": [],
        "is_auto_update_enabled": [
          "self.get_auto_update_config"
        ],
        "get_struct_file_path": [],
        "get_context_file_path": [],
        "save_config": [
          "toml.dump",
          "logging.error"
        ],
        "update_config": [
          "self.save_config"
        ],
        "reload_config": [
          "self._load_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "logging",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": "4e3a5903ff3fcd932118bf5521902da18bc72c67f93835354f70576d1413de49",
      "artifact_id": "ac4194c2-72ee-4469-b876-3299bcae8062"
    },
    {
      "module_id": "src.llmstruct.cursor_integration",
      "path": "src/llmstruct/cursor_integration.py",
      "category": "core",
      "module_doc": "Cursor IDE Integration Module\nProvides seamless integration between llmstruct AI capabilities and Cursor IDE.",
      "functions": [
        {
          "name": "create_cursor_integration",
          "docstring": "Create a Cursor integration manager for the project.",
          "line_range": [
            435,
            437
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            31,
            35
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_optimized_context",
          "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
          "line_range": [
            37,
            71
          ],
          "parameters": [
            "self",
            "query_type",
            "file_context"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": [
            73,
            83
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": [
            85,
            101
          ],
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": [
            103,
            115
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            121,
            124
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "delegate_to_optimal_ai",
          "docstring": "Route tasks to best AI model based on preferences.",
          "line_range": [
            126,
            160
          ],
          "parameters": [
            "self",
            "task_type",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_delegation_confidence",
          "docstring": "Calculate confidence in AI delegation decision.",
          "line_range": [
            162,
            175
          ],
          "parameters": [
            "self",
            "task_type",
            "selected_ai"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor configuration.",
          "line_range": [
            177,
            187
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            193,
            195
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals.",
          "line_range": [
            197,
            242
          ],
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "get_priority_guidance",
          "docstring": "Provide priority guidance based on business objectives.",
          "line_range": [
            244,
            270
          ],
          "parameters": [
            "self",
            "feature_options"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_feature_score",
          "docstring": "Calculate priority score for a feature.",
          "line_range": [
            272,
            292
          ],
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_get_scoring_reasoning",
          "docstring": "Get reasoning for feature scoring.",
          "line_range": [
            294,
            307
          ],
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": [
            309,
            319
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            325,
            328
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "Start a new Cursor session.",
          "line_range": [
            330,
            349
          ],
          "parameters": [
            "self",
            "session_id",
            "user_preferences"
          ],
          "decorators": []
        },
        {
          "name": "save_session_context",
          "docstring": "Save important context for next session.",
          "line_range": [
            351,
            377
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load context from previous sessions.",
          "line_range": [
            379,
            388
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            394,
            400
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_cursor_response",
          "docstring": "Get comprehensive response optimized for Cursor.",
          "line_range": [
            402,
            431
          ],
          "parameters": [
            "self",
            "query",
            "file_context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorSession",
          "docstring": "Represents a Cursor IDE session with context and preferences.",
          "line_range": [
            19,
            25
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CursorContextManager",
          "docstring": "Manages context optimization specifically for Cursor interactions.",
          "line_range": [
            28,
            115
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_cursor_optimized_context",
              "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
              "line_range": [
                37,
                71
              ],
              "parameters": [
                "self",
                "query_type",
                "file_context"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": [
                73,
                83
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": [
                85,
                101
              ],
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": [
                103,
                115
              ],
              "parameters": [
                "self",
                "data"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorMultiAIOrchestrator",
          "docstring": "Coordinates different AI models through Cursor interface.",
          "line_range": [
            118,
            187
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                121,
                124
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "delegate_to_optimal_ai",
              "docstring": "Route tasks to best AI model based on preferences.",
              "line_range": [
                126,
                160
              ],
              "parameters": [
                "self",
                "task_type",
                "context"
              ]
            },
            {
              "name": "_calculate_delegation_confidence",
              "docstring": "Calculate confidence in AI delegation decision.",
              "line_range": [
                162,
                175
              ],
              "parameters": [
                "self",
                "task_type",
                "selected_ai"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor configuration.",
              "line_range": [
                177,
                187
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "PersonalPlanningCursorBridge",
          "docstring": "Bridge between personal planning and Cursor without exposing sensitive data.",
          "line_range": [
            190,
            319
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                193,
                195
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals.",
              "line_range": [
                197,
                242
              ],
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "get_priority_guidance",
              "docstring": "Provide priority guidance based on business objectives.",
              "line_range": [
                244,
                270
              ],
              "parameters": [
                "self",
                "feature_options"
              ]
            },
            {
              "name": "_calculate_feature_score",
              "docstring": "Calculate priority score for a feature.",
              "line_range": [
                272,
                292
              ],
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_get_scoring_reasoning",
              "docstring": "Get reasoning for feature scoring.",
              "line_range": [
                294,
                307
              ],
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": [
                309,
                319
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorSessionManager",
          "docstring": "Maintains context across Cursor sessions for better continuity.",
          "line_range": [
            322,
            388
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                325,
                328
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "start_session",
              "docstring": "Start a new Cursor session.",
              "line_range": [
                330,
                349
              ],
              "parameters": [
                "self",
                "session_id",
                "user_preferences"
              ]
            },
            {
              "name": "save_session_context",
              "docstring": "Save important context for next session.",
              "line_range": [
                351,
                377
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load context from previous sessions.",
              "line_range": [
                379,
                388
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorIntegrationManager",
          "docstring": "Main integration manager that coordinates all Cursor-specific features.",
          "line_range": [
            391,
            431
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                394,
                400
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_comprehensive_cursor_response",
              "docstring": "Get comprehensive response optimized for Cursor.",
              "line_range": [
                402,
                431
              ],
              "parameters": [
                "self",
                "query",
                "file_context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "SystemCapabilityDiscovery",
          "PersonalPlanningCursorBridge",
          "CursorContextManager",
          "CursorSessionManager",
          "CursorMultiAIOrchestrator"
        ],
        "get_cursor_optimized_context": [
          "str",
          "context_rules.get",
          "file_path.exists",
          "self._apply_privacy_filter",
          "logger.error",
          "json.load",
          "open",
          "optimal_config.get"
        ],
        "_load_cursor_config": [
          "config_path.exists",
          "logger.error",
          "json.load",
          "open",
          "Path"
        ],
        "_apply_privacy_filter": [
          "isinstance",
          "self._filter_sensitive_dict",
          "context_data.items"
        ],
        "_filter_sensitive_dict": [
          "isinstance",
          "self._filter_sensitive_dict",
          "any",
          "data.items",
          "key.lower"
        ],
        "delegate_to_optimal_ai": [
          "str",
          "logger.error",
          "self._calculate_delegation_confidence",
          "delegation_rules.get",
          "Path"
        ],
        "_calculate_delegation_confidence": [
          "delegation_rules.get"
        ],
        "get_goal_aligned_suggestions": [
          "technical_context.lower",
          "suggestions.extend",
          "any",
          "logger.error"
        ],
        "get_priority_guidance": [
          "self._calculate_feature_score",
          "scored_features.sort",
          "str",
          "logger.error",
          "self._get_scoring_reasoning",
          "scored_features.append",
          "decision_guidance.get"
        ],
        "_calculate_feature_score": [
          "float",
          "prioritization.get",
          "any",
          "feature.lower"
        ],
        "_get_scoring_reasoning": [
          "reasons.append",
          "any",
          "feature.lower"
        ],
        "_load_personal_bridge": [
          "json.load",
          "open",
          "bridge_path.exists",
          "logger.error"
        ],
        "start_session": [
          "CursorSession",
          "self._load_session_context",
          "previous_context.get",
          "logger.error"
        ],
        "save_session_context": [
          "str",
          "session_data.get",
          "logger.error",
          "open",
          "json.dump",
          "Path"
        ],
        "_load_session_context": [
          "json.load",
          "open",
          "logger.error"
        ],
        "get_comprehensive_cursor_response": [
          "str",
          "logger.error"
        ],
        "create_cursor_integration": [
          "CursorIntegrationManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.context_orchestrator",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "9dc4a1f079ae81fc45f0e314da75a46b3a6f08b14e47b41542f341da097392d3",
      "artifact_id": "f3e96a9b-1f1e-48d1-a52c-812390fdabe8"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": [
            24,
            30
          ],
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            6,
            11
          ],
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": [
            13,
            21
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": [
            5,
            21
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                6,
                11
              ],
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": [
                13,
                21
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "len",
          "response.json",
          "response.raise_for_status",
          "prompt.split"
        ],
        "test_grok": [
          "client.generate",
          "time.perf_counter",
          "GrokClient"
        ]
      },
      "dependencies": [
        "requests",
        "time"
      ],
      "hash": "b6bbedf1c8576d9a3f89f34490ff01f2ff2662991c93033ef3dadb5cd99929d2",
      "artifact_id": "5d2931ed-8472-4252-8b16-d7433e933408"
    },
    {
      "module_id": "src.llmstruct.transpiler",
      "path": "src/llmstruct/transpiler.py",
      "category": "core",
      "module_doc": "AI-Powered Universal Transpiler\nConverts entire codebases from one language to another using LLM analysis",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for AI transpiler",
          "line_range": [
            475,
            527
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            142,
            149
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "analyze_source_project",
          "docstring": "Analyze source project structure",
          "line_range": [
            151,
            155
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "create_target_project_structure",
          "docstring": "Create target project directory structure",
          "line_range": [
            157,
            221
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_generate_structure_info",
          "docstring": "Generate structure information for README",
          "line_range": [
            223,
            253
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "transpile_module",
          "docstring": "Transpile a single module using AI",
          "line_range": [
            255,
            318
          ],
          "parameters": [
            "self",
            "module",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_format_functions",
          "docstring": "Format functions for prompt",
          "line_range": [
            320,
            333
          ],
          "parameters": [
            "self",
            "functions"
          ],
          "decorators": []
        },
        {
          "name": "_format_classes",
          "docstring": "Format classes for prompt",
          "line_range": [
            335,
            348
          ],
          "parameters": [
            "self",
            "classes"
          ],
          "decorators": []
        },
        {
          "name": "determine_target_path",
          "docstring": "Determine target file path for transpiled module",
          "line_range": [
            350,
            388
          ],
          "parameters": [
            "self",
            "module"
          ],
          "decorators": []
        },
        {
          "name": "transpile_project",
          "docstring": "Transpile entire project",
          "line_range": [
            390,
            472
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TranspilerConfig",
          "docstring": "Configuration for AI transpiler",
          "line_range": [
            24,
            35
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "LanguageTemplates",
          "docstring": "Templates and patterns for different target languages",
          "line_range": [
            38,
            136
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AITranspiler",
          "docstring": "AI-powered code transpiler",
          "line_range": [
            139,
            472
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                142,
                149
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "analyze_source_project",
              "docstring": "Analyze source project structure",
              "line_range": [
                151,
                155
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "create_target_project_structure",
              "docstring": "Create target project directory structure",
              "line_range": [
                157,
                221
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_generate_structure_info",
              "docstring": "Generate structure information for README",
              "line_range": [
                223,
                253
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "transpile_module",
              "docstring": "Transpile a single module using AI",
              "line_range": [
                255,
                318
              ],
              "parameters": [
                "self",
                "module",
                "context"
              ]
            },
            {
              "name": "_format_functions",
              "docstring": "Format functions for prompt",
              "line_range": [
                320,
                333
              ],
              "parameters": [
                "self",
                "functions"
              ]
            },
            {
              "name": "_format_classes",
              "docstring": "Format classes for prompt",
              "line_range": [
                335,
                348
              ],
              "parameters": [
                "self",
                "classes"
              ]
            },
            {
              "name": "determine_target_path",
              "docstring": "Determine target file path for transpiled module",
              "line_range": [
                350,
                388
              ],
              "parameters": [
                "self",
                "module"
              ]
            },
            {
              "name": "transpile_project",
              "docstring": "Transpile entire project",
              "line_range": [
                390,
                472
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "ConverterConfig",
          "UniversalConverter",
          "LLMClient"
        ],
        "analyze_source_project": [
          "logger.info"
        ],
        "create_target_project_structure": [
          "self._generate_structure_info",
          "src_dir.mkdir",
          "shutil.rmtree",
          "Path",
          "logger.warning",
          "output_path.mkdir",
          "output_path.exists"
        ],
        "_generate_structure_info": [
          "analysis.get",
          "len",
          "categories.items",
          "category.title",
          "module.get",
          "stats.get"
        ],
        "transpile_module": [
          "len",
          "str",
          "target_lang.upper",
          "self._format_functions",
          "logger.error",
          "target_lang.lower",
          "ctx_module.get",
          "module.get",
          "response.strip",
          "self._format_classes"
        ],
        "_format_functions": [
          "len",
          "func.get"
        ],
        "_format_classes": [
          "len",
          "cls.get"
        ],
        "determine_target_path": [
          "len",
          "Path",
          "module_id.split",
          "module.get"
        ],
        "transpile_project": [
          "analysis.get",
          "len",
          "self.transpile_module",
          "str",
          "self.create_target_project_structure",
          "logger.error",
          "errors.append",
          "report_path.write_text",
          "transpiled_files.append",
          "json.dumps",
          "logger.info",
          "self.determine_target_path",
          "Path",
          "full_target_path.write_text",
          "range",
          "self.analyze_source_project"
        ],
        "main": [
          "len",
          "logger.error",
          "traceback.print_exc",
          "Language",
          "parser.add_argument",
          "transpiler.transpile_project",
          "TranspilerConfig",
          "print",
          "argparse.ArgumentParser",
          "exit",
          "parser.parse_args",
          "AITranspiler"
        ]
      },
      "dependencies": [
        "Any",
        "ConverterConfig",
        "Dict",
        "Enum",
        "LLMClient",
        "Language",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "UniversalConverter",
        "argparse",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "llm_client",
        "logging",
        "os",
        "parsers.universal_converter",
        "pathlib",
        "shutil",
        "traceback",
        "typing"
      ],
      "hash": "5e9ee72b1514522197462f0369930005bfc88b8d4280c814f8e296668b4e7c38",
      "artifact_id": "3b4cd1e0-5761-4cb6-bae6-4c05274471d8"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": [
            38,
            86
          ],
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": [
            88,
            115
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": [
            117,
            141
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": [
            143,
            156
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": [
            158,
            172
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": [
            27,
            172
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": [
                38,
                86
              ],
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": [
                88,
                115
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": [
                117,
                141
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": [
                143,
                156
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": [
                158,
                172
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "int",
          "os.getenv",
          "logging.info"
        ],
        "query": [
          "self._query_grok",
          "logging.info",
          "self._query_ollama",
          "self._query_anthropic",
          "json.load",
          "logging.warning",
          "json.dumps",
          "asyncio.sleep",
          "self._query_hybrid",
          "range",
          "logging.error",
          "Path"
        ],
        "_query_grok": [
          "logging.info",
          "aiohttp.ClientSession",
          "result.get",
          "session.post",
          "response.json",
          "logging.error"
        ],
        "_query_anthropic": [
          "logging.info",
          "aiohttp.ClientSession",
          "result.get",
          "session.post",
          "response.json",
          "logging.error"
        ],
        "_query_ollama": [
          "logging.info",
          "aiohttp.ClientSession",
          "result.get",
          "session.post",
          "logging.debug",
          "response.json",
          "logging.error"
        ],
        "_query_hybrid": [
          "isinstance",
          "len",
          "self._query_grok",
          "self._query_ollama",
          "logging.info",
          "self._query_anthropic",
          "asyncio.gather"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": "c477d5e96f165fa96546ff8e2673db785cee146f6fffd0f424d21072431133ba",
      "artifact_id": "ad80358e-0fe9-43de-b95e-875639774aff"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "llmstruct.cli",
        "main"
      ],
      "hash": "de795cd58c2dc4122dd30b382c844a7c67fc36489e443b7d12170fa0e15994dc",
      "artifact_id": "b4acf81b-9d13-4586-9d22-b8370564c752"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            43,
            57
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            60,
            69
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            72,
            81
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": [
            84,
            104
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            107,
            114
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            117,
            127
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            130,
            144
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            147,
            503
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": [
            506,
            705
          ],
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            708,
            759
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            762,
            818
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            821,
            823
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            826,
            828
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            831,
            833
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            836,
            954
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": [
            957,
            975
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": [
            978,
            1081
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "add_api_bot_commands",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f API \u0438 Bot \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438",
          "line_range": [
            1084,
            1130
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        },
        {
          "name": "cmd_api_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 API \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c",
          "line_range": [
            1133,
            1215
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_bot_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430\u043c\u0438",
          "line_range": [
            1218,
            1320
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_services",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 (API + Bots)",
          "line_range": [
            1323,
            1384
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            1387,
            1622
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_path.open",
          "gitignore_path.exists",
          "line.strip",
          "line.startswith",
          "logging.error",
          "Path"
        ],
        "load_config": [
          "config_path.exists",
          "config_path.open",
          "toml.load",
          "logging.error",
          "Path"
        ],
        "read_file_content": [
          "f.read",
          "path.open",
          "path.is_file",
          "logging.error",
          "Path"
        ],
        "write_to_file": [
          "re.sub",
          "str",
          "file_path.open",
          "file_path.exists",
          "logging.warning",
          "f.write",
          "logging.info",
          "base_path.mkdir",
          "logging.error",
          "Path"
        ],
        "parse_files_from_response": [
          "content.strip",
          "filename.strip",
          "files.append",
          "re.findall"
        ],
        "interactive": [
          "interactive_modular",
          "logging.warning",
          "interactive_legacy"
        ],
        "interactive_modular": [
          "create_cli_core",
          "cli_core.run_interactive_mode",
          "logging.info",
          "hasattr"
        ],
        "interactive_legacy": [
          "parse",
          "client.query",
          "json.dumps",
          "cache.close",
          "time.ctime",
          "args_str.strip",
          "logging.error",
          "load_gitignore",
          "logging.warning",
          "json.load",
          "attach_to_llm_request",
          "os.listdir",
          "re.match",
          "process_cli_queue_enhanced",
          "read_file_content",
          "print",
          "len",
          "cache.list_keys",
          "LLMClient",
          "input",
          "user_input.startswith",
          "time.time",
          "JSONCache",
          "sorted",
          "cache.get_stats",
          "events_data.append",
          "os.stat",
          "user_input.lower",
          "get_folder_structure",
          "isinstance",
          "cache.clear",
          "m.group",
          "open",
          "struct_data.get",
          "os.makedirs",
          "workflow.get",
          "subprocess.run",
          "json.dump",
          "write_to_file",
          "int",
          "Path"
        ],
        "process_cli_queue_enhanced": [
          "isinstance",
          "len",
          "load_gitignore",
          "logging.info",
          "json.load",
          "open",
          "read_file_content",
          "client.query",
          "workflow.get",
          "options.get",
          "time.time",
          "attach_to_llm_request",
          "write_to_file",
          "item.get",
          "print",
          "enumerate",
          "logging.error",
          "get_folder_structure"
        ],
        "parse": [
          "parsing_config.get",
          "cache.cache_json",
          "config.get",
          "load_gitignore",
          "logging.warning",
          "logging.info",
          "json.dump",
          "generate_json",
          "load_config",
          "JSONCache",
          "cache.close",
          "cli_config.get",
          "logging.error",
          "Path"
        ],
        "query": [
          "create_context_orchestrator",
          "LLMClient",
          "hasattr",
          "logging.info",
          "logging.warning",
          "client.query",
          "json.dump",
          "client.query_with_context",
          "orchestrator.get_context_for_scenario",
          "cache.close",
          "JSONCache",
          "logging.error",
          "Path"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "copilot": [
          "shutil.copy",
          "getattr",
          "logging.error",
          "layers.split",
          "initialize_copilot",
          "manager.close",
          "print",
          "enumerate",
          "manager.refresh_all_contexts",
          "config_path.exists",
          "manager.export_context",
          "hasattr",
          "manager.unload_context_layer",
          "template_path.exists",
          "manager.get_context_status",
          "logging.info",
          "f.write",
          "open",
          "manager.validate_change",
          "smart_suggest",
          "manager.load_context_layer",
          "Path"
        ],
        "audit": [
          "file_path.exists",
          "hasattr",
          "analyze_duplicates",
          "print",
          "Path"
        ],
        "analyze_duplicates": [
          "analysis.get",
          "len",
          "WorkflowOrchestrator",
          "hasattr",
          "filtered_duplicates.items",
          "open",
          "json.dumps",
          "json.dump",
          "traceback.print_exc",
          "getattr",
          "r.get",
          "rec.get",
          "duplication_data.get",
          "orchestrator.analyze_codebase_for_duplicates",
          "sorted",
          "print",
          "enumerate",
          "duplicates.items"
        ],
        "add_api_bot_commands": [
          "api_subparsers.add_parser",
          "bot_parser.add_subparsers",
          "bot_subparsers.add_parser",
          "bot_start.add_argument",
          "api_parser.add_subparsers",
          "api_start.add_argument",
          "services_subparsers.add_parser",
          "subparsers.add_parser",
          "services_parser.add_subparsers"
        ],
        "cmd_api_management": [
          "subprocess.Popen",
          "str",
          "f.read",
          "pid_file.unlink",
          "f.write",
          "process.terminate",
          "open",
          "process.wait",
          "data.get",
          "requests.post",
          "psutil.Process",
          "requests.get",
          "int",
          "venv_path.exists",
          "print",
          "response.json",
          "pid_file.exists",
          "Path"
        ],
        "cmd_bot_management": [
          "subprocess.Popen",
          "str",
          "f.read",
          "process.is_running",
          "active_bots.append",
          "pid_file.unlink",
          "f.write",
          "process.terminate",
          "open",
          "process.wait",
          "psutil.Process",
          "int",
          "os.getenv",
          "bot_scripts.get",
          "print",
          "pid_file.exists",
          "Path"
        ],
        "cmd_services": [
          "type",
          "time.sleep",
          "cmd_api_management",
          "cmd_bot_management",
          "print"
        ],
        "main": [
          "duplicates_parser.add_argument",
          "add_api_bot_commands",
          "parse",
          "review_parser.add_argument",
          "context",
          "interactive_parser.add_argument",
          "analyze_duplicates",
          "review",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "copilot",
          "parser.add_subparsers",
          "subparsers.add_parser",
          "cmd_services",
          "context_parser.add_argument",
          "query_parser.add_argument",
          "dogfood_parser.add_argument",
          "dogfood",
          "parse_parser.add_argument",
          "audit_parser.add_argument",
          "query",
          "interactive",
          "audit",
          "asyncio.run",
          "copilot_parser.add_argument"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "WorkflowOrchestrator",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "cli_core",
        "context_orchestrator",
        "copilot",
        "create_cli_core",
        "create_context_orchestrator",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "psutil",
        "re",
        "requests",
        "shutil",
        "signal",
        "smart_suggest",
        "subprocess",
        "sys",
        "time",
        "toml",
        "traceback",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": "d509994edf1d22b15e31b5a37af47783c709f9185f79c9e54e0cbeb6f71bf1eb",
      "artifact_id": "4d2298c1-d4c4-439e-8fcf-88406ece8d10"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "module_doc": "Smart Context Orchestration for LLMStruct\nOptimizes context loading for different LLM usage scenarios",
      "functions": [
        {
          "name": "create_context_orchestrator",
          "docstring": "Factory function to create context orchestrator.",
          "line_range": [
            506,
            508
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context for scenario - convenience function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (cli_direct, vscode_copilot, session_work)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            511,
            543
          ],
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            57,
            75
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load context orchestration configuration.",
          "line_range": [
            77,
            119
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_scenario",
          "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            121,
            161
          ],
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "custom_budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_budget_for_scenario",
          "docstring": "Create budget configuration for scenario.",
          "line_range": [
            163,
            172
          ],
          "parameters": [
            "self",
            "scenario_config"
          ],
          "decorators": []
        },
        {
          "name": "_load_full_context",
          "docstring": "Load complete context without token restrictions.",
          "line_range": [
            174,
            187
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_extract_relationship_summary",
          "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438",
          "line_range": [
            189,
            216
          ],
          "parameters": [
            "self",
            "max_modules"
          ],
          "decorators": []
        },
        {
          "name": "_load_focused_context",
          "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441",
          "line_range": [
            218,
            275
          ],
          "parameters": [
            "self",
            "file_path",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load session-specific context.",
          "line_range": [
            277,
            299
          ],
          "parameters": [
            "self",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_minimal_context",
          "docstring": "Load minimal context for quick operations.",
          "line_range": [
            301,
            319
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_source_with_filtering",
          "docstring": "Load source with optional filtering based on budget.",
          "line_range": [
            321,
            344
          ],
          "parameters": [
            "self",
            "source_name",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_file_context",
          "docstring": "Get context specific to a file.",
          "line_range": [
            346,
            357
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_essential_parts",
          "docstring": "Extract essential parts of data to fit token budget.",
          "line_range": [
            359,
            381
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_filter_for_current_session",
          "docstring": "Filter data to items relevant to current session.",
          "line_range": [
            383,
            422
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_summary",
          "docstring": "Extract summary information from data.",
          "line_range": [
            424,
            443
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_apply_section_filtering",
          "docstring": "Apply section filtering to exclude specified sections.",
          "line_range": [
            445,
            457
          ],
          "parameters": [
            "self",
            "data",
            "exclude_sections"
          ],
          "decorators": []
        },
        {
          "name": "_update_metrics",
          "docstring": "Update performance metrics.",
          "line_range": [
            459,
            477
          ],
          "parameters": [
            "self",
            "scenario",
            "context",
            "load_time"
          ],
          "decorators": []
        },
        {
          "name": "get_metrics_summary",
          "docstring": "Get summary of context loading metrics.",
          "line_range": [
            479,
            494
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_metrics",
          "docstring": "Save metrics to file for analysis.",
          "line_range": [
            496,
            501
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextMode",
          "docstring": "Context loading modes for different scenarios.",
          "line_range": [
            17,
            22
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLevel",
          "docstring": "Progressive context levels with token budgets.",
          "line_range": [
            25,
            30
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextBudget",
          "docstring": "Token budget configuration for context loading.",
          "line_range": [
            34,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextMetrics",
          "docstring": "Metrics for context loading performance.",
          "line_range": [
            43,
            48
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SmartContextOrchestrator",
          "docstring": "Orchestrates context loading based on usage scenario and token budget.\nProvides optimized context for different LLM integration patterns.",
          "line_range": [
            51,
            501
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                57,
                75
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load context orchestration configuration.",
              "line_range": [
                77,
                119
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_scenario",
              "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
              "line_range": [
                121,
                161
              ],
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "custom_budget"
              ]
            },
            {
              "name": "_get_budget_for_scenario",
              "docstring": "Create budget configuration for scenario.",
              "line_range": [
                163,
                172
              ],
              "parameters": [
                "self",
                "scenario_config"
              ]
            },
            {
              "name": "_load_full_context",
              "docstring": "Load complete context without token restrictions.",
              "line_range": [
                174,
                187
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_extract_relationship_summary",
              "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438",
              "line_range": [
                189,
                216
              ],
              "parameters": [
                "self",
                "max_modules"
              ]
            },
            {
              "name": "_load_focused_context",
              "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441",
              "line_range": [
                218,
                275
              ],
              "parameters": [
                "self",
                "file_path",
                "budget"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load session-specific context.",
              "line_range": [
                277,
                299
              ],
              "parameters": [
                "self",
                "budget"
              ]
            },
            {
              "name": "_load_minimal_context",
              "docstring": "Load minimal context for quick operations.",
              "line_range": [
                301,
                319
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_source_with_filtering",
              "docstring": "Load source with optional filtering based on budget.",
              "line_range": [
                321,
                344
              ],
              "parameters": [
                "self",
                "source_name",
                "budget"
              ]
            },
            {
              "name": "_get_file_context",
              "docstring": "Get context specific to a file.",
              "line_range": [
                346,
                357
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_essential_parts",
              "docstring": "Extract essential parts of data to fit token budget.",
              "line_range": [
                359,
                381
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_filter_for_current_session",
              "docstring": "Filter data to items relevant to current session.",
              "line_range": [
                383,
                422
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_extract_summary",
              "docstring": "Extract summary information from data.",
              "line_range": [
                424,
                443
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_apply_section_filtering",
              "docstring": "Apply section filtering to exclude specified sections.",
              "line_range": [
                445,
                457
              ],
              "parameters": [
                "self",
                "data",
                "exclude_sections"
              ]
            },
            {
              "name": "_update_metrics",
              "docstring": "Update performance metrics.",
              "line_range": [
                459,
                477
              ],
              "parameters": [
                "self",
                "scenario",
                "context",
                "load_time"
              ]
            },
            {
              "name": "get_metrics_summary",
              "docstring": "Get summary of context loading metrics.",
              "line_range": [
                479,
                494
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_metrics",
              "docstring": "Save metrics to file for analysis.",
              "line_range": [
                496,
                501
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path"
        ],
        "_load_config": [
          "config_path.exists",
          "open",
          "json.load"
        ],
        "get_context_for_scenario": [
          "self._load_minimal_context",
          "self._load_focused_context",
          "scenario_config.get",
          "self._get_budget_for_scenario",
          "time.time",
          "ContextMode",
          "self._load_full_context",
          "self._load_session_context",
          "self._update_metrics"
        ],
        "_get_budget_for_scenario": [
          "scenario_config.get",
          "budget_config.get",
          "ContextBudget"
        ],
        "_load_full_context": [
          "json.load",
          "open",
          "logger.warning",
          "full_path.exists"
        ],
        "_extract_relationship_summary": [
          "json.load",
          "open",
          "summary.append",
          "struct_path.exists",
          "struct.get",
          "logger.warning",
          "m.get"
        ],
        "_load_focused_context": [
          "init_path.exists",
          "len",
          "self._extract_relationship_summary",
          "self._get_file_context",
          "json.load",
          "open",
          "json.dumps",
          "self._extract_summary",
          "file_path.endswith",
          "logger.warning",
          "session_path.exists"
        ],
        "_load_session_context": [
          "self._filter_for_current_session",
          "self._load_source_with_filtering"
        ],
        "_load_minimal_context": [
          "json.load",
          "open",
          "self._extract_summary",
          "source_path.exists",
          "logger.warning"
        ],
        "_load_source_with_filtering": [
          "json.load",
          "open",
          "source_path.exists",
          "logger.warning",
          "self._apply_section_filtering"
        ],
        "_get_file_context": [
          "Path"
        ],
        "_extract_essential_parts": [
          "isinstance",
          "task.get"
        ],
        "_filter_for_current_session": [
          "current_session_path.exists",
          "json.load",
          "open",
          "idea.get",
          "task.get",
          "data.items",
          "current_session.get",
          "logger.warning"
        ],
        "_extract_summary": [
          "isinstance",
          "len",
          "t.get"
        ],
        "_apply_section_filtering": [
          "data.items"
        ],
        "_update_metrics": [
          "ContextMetrics",
          "len",
          "context.get"
        ],
        "get_metrics_summary": [
          "len",
          "sum"
        ],
        "save_metrics": [
          "open",
          "json.dump",
          "self.get_metrics_summary"
        ],
        "create_context_orchestrator": [
          "SmartContextOrchestrator"
        ],
        "get_optimized_context": [
          "create_context_orchestrator",
          "orchestrator.get_context_for_scenario",
          "ContextBudget"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Union",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": "c17b350c685348e540bb6f3686f2dcb5cf3da1b90c04e0dadb2a298ac2af82b8",
      "artifact_id": "d5e22179-d21c-4711-ac55-191202c7a4f8"
    },
    {
      "module_id": "src.llmstruct.ai_self_monitor",
      "path": "src/llmstruct/ai_self_monitor.py",
      "category": "core",
      "module_doc": "AI Self-Monitoring System\nTracks AI usage patterns and ensures proper llmstruct integration.",
      "functions": [
        {
          "name": "initialize_ai_monitor",
          "docstring": "Initialize global AI monitor.",
          "line_range": [
            433,
            437
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_monitor",
          "docstring": "Get current AI monitor instance.",
          "line_range": [
            440,
            442
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "record_ai_usage",
          "docstring": "Global function to record AI usage.",
          "line_range": [
            445,
            456
          ],
          "parameters": [
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            60,
            80
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "record_ai_interaction",
          "docstring": "Record an AI interaction for monitoring.",
          "line_range": [
            82,
            121
          ],
          "parameters": [
            "self",
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_interaction_patterns",
          "docstring": "Analyze patterns in AI interaction.",
          "line_range": [
            123,
            157
          ],
          "parameters": [
            "self",
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_effectiveness_score",
          "docstring": "Calculate effectiveness score for interaction.",
          "line_range": [
            159,
            188
          ],
          "parameters": [
            "self",
            "patterns",
            "tools_used",
            "used_llmstruct"
          ],
          "decorators": []
        },
        {
          "name": "_check_immediate_feedback",
          "docstring": "Check if immediate feedback/correction is needed.",
          "line_range": [
            190,
            209
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_log_immediate_feedback",
          "docstring": "Log immediate feedback message.",
          "line_range": [
            211,
            214
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "analyze_behavior_trends",
          "docstring": "Analyze AI behavior trends over specified period.",
          "line_range": [
            216,
            300
          ],
          "parameters": [
            "self",
            "days"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "Generate specific recommendations for improvement.",
          "line_range": [
            302,
            335
          ],
          "parameters": [
            "self",
            "llmstruct_usage",
            "context_awareness",
            "tool_diversity",
            "effectiveness"
          ],
          "decorators": []
        },
        {
          "name": "get_real_time_guidance",
          "docstring": "Get real-time guidance for current query.",
          "line_range": [
            337,
            365
          ],
          "parameters": [
            "self",
            "current_query"
          ],
          "decorators": []
        },
        {
          "name": "_load_events",
          "docstring": "Load events from disk.",
          "line_range": [
            367,
            379
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_events",
          "docstring": "Save events to disk.",
          "line_range": [
            381,
            388
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_analysis",
          "docstring": "Save behavior analysis to disk.",
          "line_range": [
            390,
            397
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "get_monitoring_report",
          "docstring": "Get comprehensive monitoring report.",
          "line_range": [
            399,
            426
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AIBehaviorPattern",
          "docstring": "AI behavior patterns to monitor.",
          "line_range": [
            18,
            26
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AIUsageEvent",
          "docstring": "Single AI usage event.",
          "line_range": [
            30,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIBehaviorAnalysis",
          "docstring": "Analysis of AI behavior patterns.",
          "line_range": [
            43,
            51
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AISelfMonitor",
          "docstring": "Monitors AI behavior and ensures proper llmstruct integration.\nProvides feedback and corrective guidance.",
          "line_range": [
            54,
            426
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                60,
                80
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "record_ai_interaction",
              "docstring": "Record an AI interaction for monitoring.",
              "line_range": [
                82,
                121
              ],
              "parameters": [
                "self",
                "query",
                "tools_used",
                "used_llmstruct",
                "context_tags",
                "metadata"
              ]
            },
            {
              "name": "_analyze_interaction_patterns",
              "docstring": "Analyze patterns in AI interaction.",
              "line_range": [
                123,
                157
              ],
              "parameters": [
                "self",
                "query",
                "tools_used",
                "used_llmstruct",
                "context_tags"
              ]
            },
            {
              "name": "_calculate_effectiveness_score",
              "docstring": "Calculate effectiveness score for interaction.",
              "line_range": [
                159,
                188
              ],
              "parameters": [
                "self",
                "patterns",
                "tools_used",
                "used_llmstruct"
              ]
            },
            {
              "name": "_check_immediate_feedback",
              "docstring": "Check if immediate feedback/correction is needed.",
              "line_range": [
                190,
                209
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_log_immediate_feedback",
              "docstring": "Log immediate feedback message.",
              "line_range": [
                211,
                214
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "analyze_behavior_trends",
              "docstring": "Analyze AI behavior trends over specified period.",
              "line_range": [
                216,
                300
              ],
              "parameters": [
                "self",
                "days"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "Generate specific recommendations for improvement.",
              "line_range": [
                302,
                335
              ],
              "parameters": [
                "self",
                "llmstruct_usage",
                "context_awareness",
                "tool_diversity",
                "effectiveness"
              ]
            },
            {
              "name": "get_real_time_guidance",
              "docstring": "Get real-time guidance for current query.",
              "line_range": [
                337,
                365
              ],
              "parameters": [
                "self",
                "current_query"
              ]
            },
            {
              "name": "_load_events",
              "docstring": "Load events from disk.",
              "line_range": [
                367,
                379
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_events",
              "docstring": "Save events to disk.",
              "line_range": [
                381,
                388
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_analysis",
              "docstring": "Save behavior analysis to disk.",
              "line_range": [
                390,
                397
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "get_monitoring_report",
              "docstring": "Get comprehensive monitoring report.",
              "line_range": [
                399,
                426
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_events",
          "logger.info",
          "Path"
        ],
        "record_ai_interaction": [
          "len",
          "self._save_events",
          "self._analyze_interaction_patterns",
          "self._check_immediate_feedback",
          "self._calculate_effectiveness_score",
          "datetime.now",
          "AIUsageEvent"
        ],
        "_analyze_interaction_patterns": [
          "patterns.append",
          "any",
          "query.lower"
        ],
        "_calculate_effectiveness_score": [
          "set",
          "len",
          "pattern_scores.get",
          "min"
        ],
        "_check_immediate_feedback": [
          "self._log_immediate_feedback",
          "any"
        ],
        "_log_immediate_feedback": [
          "logger.warning",
          "print"
        ],
        "analyze_behavior_trends": [
          "len",
          "sum",
          "improvements.append",
          "any",
          "AIBehaviorAnalysis",
          "timedelta",
          "datetime.fromisoformat",
          "set",
          "all_tools.update",
          "self._generate_recommendations",
          "datetime.now",
          "self._save_analysis",
          "strengths.append"
        ],
        "_generate_recommendations": [
          "recommendations.extend",
          "recommendations.append"
        ],
        "get_real_time_guidance": [
          "current_query.lower",
          "guidance.append",
          "any"
        ],
        "_load_events": [
          "len",
          "logger.error",
          "json.load",
          "open",
          "logger.info",
          "AIUsageEvent"
        ],
        "_save_events": [
          "open",
          "json.dump",
          "asdict",
          "logger.error"
        ],
        "_save_analysis": [
          "open",
          "json.dump",
          "asdict",
          "logger.error"
        ],
        "get_monitoring_report": [
          "len",
          "self.analyze_behavior_trends",
          "datetime.now",
          "chr"
        ],
        "initialize_ai_monitor": [
          "AISelfMonitor"
        ],
        "get_ai_monitor": [],
        "record_ai_usage": [
          "_monitor_instance.record_ai_interaction"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": "312d43ae77d168866f0ce34f6f89d119d4dc338568049a9611997c4dee8059b4",
      "artifact_id": "61dcbaba-ae2a-427e-9637-bb82bc7475ed"
    },
    {
      "module_id": "src.llmstruct.cursor_ai_bridge",
      "path": "src/llmstruct/cursor_ai_bridge.py",
      "category": "core",
      "module_doc": "Cursor AI Bridge - API Layer for AI Assistant Integration\nProvides CLI and HTTP endpoints so Cursor AI can use WorkflowOrchestrator",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for Cursor AI Bridge.",
          "line_range": [
            350,
            401
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            29,
            32
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "ai_get_context",
          "docstring": "Get AI-optimized context for current development state.",
          "line_range": [
            34,
            67
          ],
          "parameters": [
            "self",
            "query_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "ai_analyze_task",
          "docstring": "Analyze a task and provide AI-optimized guidance.",
          "line_range": [
            69,
            93
          ],
          "parameters": [
            "self",
            "task_description"
          ],
          "decorators": []
        },
        {
          "name": "ai_create_task",
          "docstring": "Create a task through AI interface.",
          "line_range": [
            95,
            114
          ],
          "parameters": [
            "self",
            "title",
            "description",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "ai_get_onboarding_guide",
          "docstring": "Get comprehensive AI onboarding guide.",
          "line_range": [
            116,
            145
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "ai_check_duplicates",
          "docstring": "Check for code duplicates with AI-friendly output.",
          "line_range": [
            147,
            171
          ],
          "parameters": [
            "self",
            "threshold"
          ],
          "decorators": []
        },
        {
          "name": "ai_suggest",
          "docstring": "Get AI suggestions based on context.",
          "line_range": [
            173,
            199
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_task_complexity",
          "docstring": "Estimate task complexity based on codebase analysis.",
          "line_range": [
            201,
            215
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_suggest_approach",
          "docstring": "Suggest approach based on task and codebase state.",
          "line_range": [
            217,
            234
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_find_relevant_modules",
          "docstring": "Find modules relevant to the task.",
          "line_range": [
            236,
            248
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_check_potential_duplicates",
          "docstring": "Check if task might create duplicates.",
          "line_range": [
            250,
            253
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_recommend_ai_for_task",
          "docstring": "Recommend which AI to use for the task.",
          "line_range": [
            255,
            264
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_generate_workflow_steps",
          "docstring": "Generate workflow steps for the task.",
          "line_range": [
            266,
            276
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_determine_context_requirements",
          "docstring": "Determine what context is needed for the task.",
          "line_range": [
            278,
            290
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on context.",
          "line_range": [
            292,
            299
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_available_ai_commands",
          "docstring": "Get available AI commands.",
          "line_range": [
            301,
            310
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_identify_high_priority_duplicates",
          "docstring": "Identify high-priority duplicates for refactoring.",
          "line_range": [
            312,
            315
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_generate_refactoring_suggestions",
          "docstring": "Generate refactoring suggestions.",
          "line_range": [
            317,
            323
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_classify_task_type",
          "docstring": "Classify task type for AI delegation.",
          "line_range": [
            325,
            338
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_generate_next_steps",
          "docstring": "Generate next steps based on context.",
          "line_range": [
            340,
            347
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorAIBridge",
          "docstring": "Bridge that allows Cursor AI assistant to use WorkflowOrchestrator\nthrough CLI commands and structured JSON responses.",
          "line_range": [
            23,
            347
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                29,
                32
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "ai_get_context",
              "docstring": "Get AI-optimized context for current development state.",
              "line_range": [
                34,
                67
              ],
              "parameters": [
                "self",
                "query_type",
                "file_path"
              ]
            },
            {
              "name": "ai_analyze_task",
              "docstring": "Analyze a task and provide AI-optimized guidance.",
              "line_range": [
                69,
                93
              ],
              "parameters": [
                "self",
                "task_description"
              ]
            },
            {
              "name": "ai_create_task",
              "docstring": "Create a task through AI interface.",
              "line_range": [
                95,
                114
              ],
              "parameters": [
                "self",
                "title",
                "description",
                "priority"
              ]
            },
            {
              "name": "ai_get_onboarding_guide",
              "docstring": "Get comprehensive AI onboarding guide.",
              "line_range": [
                116,
                145
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "ai_check_duplicates",
              "docstring": "Check for code duplicates with AI-friendly output.",
              "line_range": [
                147,
                171
              ],
              "parameters": [
                "self",
                "threshold"
              ]
            },
            {
              "name": "ai_suggest",
              "docstring": "Get AI suggestions based on context.",
              "line_range": [
                173,
                199
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_estimate_task_complexity",
              "docstring": "Estimate task complexity based on codebase analysis.",
              "line_range": [
                201,
                215
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_suggest_approach",
              "docstring": "Suggest approach based on task and codebase state.",
              "line_range": [
                217,
                234
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_find_relevant_modules",
              "docstring": "Find modules relevant to the task.",
              "line_range": [
                236,
                248
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_check_potential_duplicates",
              "docstring": "Check if task might create duplicates.",
              "line_range": [
                250,
                253
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_recommend_ai_for_task",
              "docstring": "Recommend which AI to use for the task.",
              "line_range": [
                255,
                264
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_generate_workflow_steps",
              "docstring": "Generate workflow steps for the task.",
              "line_range": [
                266,
                276
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_determine_context_requirements",
              "docstring": "Determine what context is needed for the task.",
              "line_range": [
                278,
                290
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on context.",
              "line_range": [
                292,
                299
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_get_available_ai_commands",
              "docstring": "Get available AI commands.",
              "line_range": [
                301,
                310
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_identify_high_priority_duplicates",
              "docstring": "Identify high-priority duplicates for refactoring.",
              "line_range": [
                312,
                315
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_generate_refactoring_suggestions",
              "docstring": "Generate refactoring suggestions.",
              "line_range": [
                317,
                323
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_classify_task_type",
              "docstring": "Classify task type for AI delegation.",
              "line_range": [
                325,
                338
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_generate_next_steps",
              "docstring": "Generate next steps based on context.",
              "line_range": [
                340,
                347
              ],
              "parameters": [
                "self",
                "context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "str",
          "CursorIntegrationManager",
          "WorkflowOrchestrator",
          "Path"
        ],
        "ai_get_context": [
          "len",
          "self._get_workflow_suggestions",
          "str",
          "cursor_context.get",
          "self._get_available_ai_commands",
          "datetime.utcnow",
          "context.get"
        ],
        "ai_analyze_task": [
          "str",
          "self._estimate_task_complexity",
          "self._determine_context_requirements",
          "self._find_relevant_modules",
          "self._suggest_approach",
          "self._recommend_ai_for_task",
          "self._check_potential_duplicates",
          "self._generate_workflow_steps",
          "context.get"
        ],
        "ai_create_task": [
          "datetime.utcnow",
          "str",
          "self.ai_analyze_task"
        ],
        "ai_get_onboarding_guide": [
          "str"
        ],
        "ai_check_duplicates": [
          "analysis.get",
          "str",
          "self._generate_refactoring_suggestions",
          "self._identify_high_priority_duplicates"
        ],
        "ai_suggest": [
          "str",
          "self._get_workflow_suggestions",
          "self._classify_task_type",
          "delegation.get",
          "self._generate_next_steps"
        ],
        "_estimate_task_complexity": [
          "task.lower",
          "any",
          "complexity_keywords.items"
        ],
        "_suggest_approach": [
          "task.lower",
          "approaches.append"
        ],
        "_find_relevant_modules": [
          "any",
          "relevant.append",
          "module.get",
          "task.lower",
          "struct_analysis.get"
        ],
        "_check_potential_duplicates": [],
        "_recommend_ai_for_task": [
          "task.lower",
          "any"
        ],
        "_generate_workflow_steps": [],
        "_determine_context_requirements": [
          "task.lower",
          "requirements.append"
        ],
        "_get_workflow_suggestions": [],
        "_get_available_ai_commands": [],
        "_identify_high_priority_duplicates": [],
        "_generate_refactoring_suggestions": [],
        "_classify_task_type": [
          "context.lower",
          "any"
        ],
        "_generate_next_steps": [],
        "main": [
          "bridge.ai_get_context",
          "bridge.ai_onboarding_guide",
          "bridge.ai_create_task",
          "bridge.ai_analyze_task",
          "json.dumps",
          "bridge.ai_check_duplicates",
          "parser.add_argument",
          "CursorAIBridge",
          "print",
          "argparse.ArgumentParser",
          "bridge.ai_suggest",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "Any",
        "CursorIntegrationManager",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "WorkflowOrchestrator",
        "ai_self_awareness",
        "argparse",
        "cursor_integration",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": "b2a2b9e1cf581e85e4467559c56258f4a0d6a5003c11ca4143773a732cb33468",
      "artifact_id": "c24733b3-7967-4c10-beb9-7a678566ab98"
    },
    {
      "module_id": "src.llmstruct.ai_self_awareness",
      "path": "src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "module_doc": "AI Self-Awareness Enhancement Module\nProvides comprehensive system introspection and capability discovery for llmstruct AI systems.\nEnhanced with Cursor IDE integration and real-time metrics.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize the capability discovery system with CLI integration.",
          "line_range": [
            101,
            107
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_ensure_directories",
          "docstring": "Ensure required directories exist.",
          "line_range": [
            109,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "discover_all_capabilities",
          "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
          "line_range": [
            113,
            154
          ],
          "parameters": [
            "self",
            "force_refresh"
          ],
          "decorators": []
        },
        {
          "name": "_get_integration_metrics",
          "docstring": "Get metrics about unused function integration success.",
          "line_range": [
            156,
            163
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_enhanced_capabilities_summary",
          "docstring": "Get enhanced capabilities summary including unused function integration.",
          "line_range": [
            165,
            203
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_ai_status",
          "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
          "line_range": [
            205,
            246
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_tools",
          "docstring": "Discover and check health of all available tools.",
          "line_range": [
            248,
            260
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cli_processor",
          "docstring": "Check CLI processor health.",
          "line_range": [
            262,
            297
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_copilot_manager",
          "docstring": "Check Copilot manager health.",
          "line_range": [
            299,
            336
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_context_orchestrator",
          "docstring": "Check context orchestrator health.",
          "line_range": [
            338,
            393
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cache_system",
          "docstring": "Check cache system health.",
          "line_range": [
            395,
            438
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_struct_parser",
          "docstring": "Check struct.json parser health.",
          "line_range": [
            440,
            484
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_docs_system",
          "docstring": "Check docs.json system health.",
          "line_range": [
            486,
            517
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_capabilities",
          "docstring": "Discover available context capabilities.",
          "line_range": [
            519,
            556
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_integration_health",
          "docstring": "Check health of all system integrations.",
          "line_range": [
            558,
            567
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_component_status",
          "docstring": "Check status of a specific component.",
          "line_range": [
            569,
            574
          ],
          "parameters": [
            "self",
            "component_name"
          ],
          "decorators": []
        },
        {
          "name": "_discover_vscode_capabilities",
          "docstring": "Discover VS Code specific capabilities.",
          "line_range": [
            576,
            585
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_cache_hit_rate",
          "docstring": "Calculate cache hit rate using real metrics.",
          "line_range": [
            587,
            589
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_system_load",
          "docstring": "Estimate current system load using real metrics.",
          "line_range": [
            591,
            593
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_cache_valid",
          "docstring": "Check if cached capabilities are still valid.",
          "line_range": [
            595,
            602
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cached_capabilities",
          "docstring": "Load capabilities from cache.",
          "line_range": [
            604,
            618
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cache_capabilities",
          "docstring": "Cache capabilities to disk.",
          "line_range": [
            620,
            630
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "get_capabilities_summary",
          "docstring": "Get a human-readable summary of current capabilities.",
          "line_range": [
            632,
            691
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_project_structure",
          "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
          "line_range": [
            693,
            739
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_directory_structure",
          "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
          "line_range": [
            741,
            760
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_unused_capabilities",
          "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
          "line_range": [
            762,
            819
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_discover_config_capabilities",
          "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
          "line_range": [
            821,
            849
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_scenarios",
          "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
          "line_range": [
            851,
            890
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_command",
          "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
          "line_range": [
            892,
            898
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_config",
          "docstring": "Determine if a config function would be useful for AI configuration awareness.",
          "line_range": [
            900,
            906
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_utility",
          "docstring": "Determine if a utility function would be useful for AI operations.",
          "line_range": [
            908,
            914
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_prioritize_integrations",
          "docstring": "Prioritize which unused functions should be integrated first.",
          "line_range": [
            916,
            932
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_basic_directory_scan",
          "docstring": "Basic directory scan for fallback scenarios.",
          "line_range": [
            934,
            946
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_status_report",
          "docstring": "Generate Cursor-specific status optimized for IDE integration.",
          "line_range": [
            949,
            967
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "optimize_context_for_cursor",
          "docstring": "Provide perfectly sized context for Cursor interactions.",
          "line_range": [
            969,
            1001
          ],
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals from personal bridge.",
          "line_range": [
            1003,
            1038
          ],
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_real_cache_hit_rate",
          "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
          "line_range": [
            1040,
            1066
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_real_system_load",
          "docstring": "Get actual system performance metrics.",
          "line_range": [
            1068,
            1090
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": [
            1092,
            1102
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": [
            1104,
            1114
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_query_type",
          "docstring": "Analyze query to determine optimal context type.",
          "line_range": [
            1116,
            1144
          ],
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": [
            1146,
            1163
          ],
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": [
            1165,
            1177
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_get_overall_health_emoji",
          "docstring": "Get emoji representing overall system health.",
          "line_range": [
            1179,
            1202
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_status_emoji",
          "docstring": "Get emoji for context engine status.",
          "line_range": [
            1204,
            1214
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_ai_integration_emoji",
          "docstring": "Get emoji for AI integration status.",
          "line_range": [
            1216,
            1224
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_goal_alignment_status",
          "docstring": "Get goal alignment status.",
          "line_range": [
            1226,
            1235
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CapabilityStatus",
          "docstring": "Status of system capabilities.",
          "line_range": [
            22,
            27
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextMode",
          "docstring": "Available context modes.",
          "line_range": [
            30,
            35
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ToolHealth",
          "docstring": "Health status of a specific tool.",
          "line_range": [
            39,
            46
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextCapabilities",
          "docstring": "Available context capabilities.",
          "line_range": [
            50,
            57
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "IntegrationHealth",
          "docstring": "Status of system integrations.",
          "line_range": [
            61,
            68
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "VSCodeCapabilities",
          "docstring": "VS Code specific capabilities.",
          "line_range": [
            72,
            79
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilities",
          "docstring": "Complete system capabilities overview.",
          "line_range": [
            83,
            91
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilityDiscovery",
          "docstring": "Discovers and monitors system capabilities in real-time.\nProvides AI with comprehensive understanding of available tools and systems.\nEnhanced with unused function integration for maximum AI self-awareness.",
          "line_range": [
            94,
            1235
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the capability discovery system with CLI integration.",
              "line_range": [
                101,
                107
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_ensure_directories",
              "docstring": "Ensure required directories exist.",
              "line_range": [
                109,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "discover_all_capabilities",
              "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
              "line_range": [
                113,
                154
              ],
              "parameters": [
                "self",
                "force_refresh"
              ]
            },
            {
              "name": "_get_integration_metrics",
              "docstring": "Get metrics about unused function integration success.",
              "line_range": [
                156,
                163
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_enhanced_capabilities_summary",
              "docstring": "Get enhanced capabilities summary including unused function integration.",
              "line_range": [
                165,
                203
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_comprehensive_ai_status",
              "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
              "line_range": [
                205,
                246
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_tools",
              "docstring": "Discover and check health of all available tools.",
              "line_range": [
                248,
                260
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cli_processor",
              "docstring": "Check CLI processor health.",
              "line_range": [
                262,
                297
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_copilot_manager",
              "docstring": "Check Copilot manager health.",
              "line_range": [
                299,
                336
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_context_orchestrator",
              "docstring": "Check context orchestrator health.",
              "line_range": [
                338,
                393
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cache_system",
              "docstring": "Check cache system health.",
              "line_range": [
                395,
                438
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_struct_parser",
              "docstring": "Check struct.json parser health.",
              "line_range": [
                440,
                484
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_docs_system",
              "docstring": "Check docs.json system health.",
              "line_range": [
                486,
                517
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_capabilities",
              "docstring": "Discover available context capabilities.",
              "line_range": [
                519,
                556
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_integration_health",
              "docstring": "Check health of all system integrations.",
              "line_range": [
                558,
                567
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_component_status",
              "docstring": "Check status of a specific component.",
              "line_range": [
                569,
                574
              ],
              "parameters": [
                "self",
                "component_name"
              ]
            },
            {
              "name": "_discover_vscode_capabilities",
              "docstring": "Discover VS Code specific capabilities.",
              "line_range": [
                576,
                585
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_cache_hit_rate",
              "docstring": "Calculate cache hit rate using real metrics.",
              "line_range": [
                587,
                589
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_estimate_system_load",
              "docstring": "Estimate current system load using real metrics.",
              "line_range": [
                591,
                593
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_cache_valid",
              "docstring": "Check if cached capabilities are still valid.",
              "line_range": [
                595,
                602
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cached_capabilities",
              "docstring": "Load capabilities from cache.",
              "line_range": [
                604,
                618
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cache_capabilities",
              "docstring": "Cache capabilities to disk.",
              "line_range": [
                620,
                630
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "get_capabilities_summary",
              "docstring": "Get a human-readable summary of current capabilities.",
              "line_range": [
                632,
                691
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_project_structure",
              "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
              "line_range": [
                693,
                739
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_enhanced_directory_structure",
              "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
              "line_range": [
                741,
                760
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_unused_capabilities",
              "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
              "line_range": [
                762,
                819
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_discover_config_capabilities",
              "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
              "line_range": [
                821,
                849
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_scenarios",
              "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
              "line_range": [
                851,
                890
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_ai_useful_command",
              "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
              "line_range": [
                892,
                898
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_config",
              "docstring": "Determine if a config function would be useful for AI configuration awareness.",
              "line_range": [
                900,
                906
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_utility",
              "docstring": "Determine if a utility function would be useful for AI operations.",
              "line_range": [
                908,
                914
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_prioritize_integrations",
              "docstring": "Prioritize which unused functions should be integrated first.",
              "line_range": [
                916,
                932
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_basic_directory_scan",
              "docstring": "Basic directory scan for fallback scenarios.",
              "line_range": [
                934,
                946
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cursor_status_report",
              "docstring": "Generate Cursor-specific status optimized for IDE integration.",
              "line_range": [
                949,
                967
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "optimize_context_for_cursor",
              "docstring": "Provide perfectly sized context for Cursor interactions.",
              "line_range": [
                969,
                1001
              ],
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals from personal bridge.",
              "line_range": [
                1003,
                1038
              ],
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "_calculate_real_cache_hit_rate",
              "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
              "line_range": [
                1040,
                1066
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_real_system_load",
              "docstring": "Get actual system performance metrics.",
              "line_range": [
                1068,
                1090
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": [
                1092,
                1102
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": [
                1104,
                1114
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_query_type",
              "docstring": "Analyze query to determine optimal context type.",
              "line_range": [
                1116,
                1144
              ],
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": [
                1146,
                1163
              ],
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": [
                1165,
                1177
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_get_overall_health_emoji",
              "docstring": "Get emoji representing overall system health.",
              "line_range": [
                1179,
                1202
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_get_context_status_emoji",
              "docstring": "Get emoji for context engine status.",
              "line_range": [
                1204,
                1214
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_get_ai_integration_emoji",
              "docstring": "Get emoji for AI integration status.",
              "line_range": [
                1216,
                1224
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_goal_alignment_status",
              "docstring": "Get goal alignment status.",
              "line_range": [
                1226,
                1235
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._ensure_directories",
          "create_ai_cli_integration",
          "Path"
        ],
        "_ensure_directories": [],
        "discover_all_capabilities": [
          "self._calculate_cache_hit_rate",
          "SystemCapabilities",
          "self._discover_tools",
          "self._discover_vscode_capabilities",
          "self._get_integration_metrics",
          "self._estimate_system_load",
          "time.time",
          "logger.info",
          "self._is_cache_valid",
          "self._load_cached_capabilities",
          "self._discover_context_capabilities",
          "self._check_integration_health",
          "self._analyze_project_structure",
          "datetime.now",
          "self._cache_capabilities"
        ],
        "_get_integration_metrics": [],
        "get_enhanced_capabilities_summary": [
          "self.get_capabilities_summary",
          "str",
          "enhanced_info.append",
          "hasattr"
        ],
        "get_comprehensive_ai_status": [
          "get_ai_enhanced_cli_summary",
          "str",
          "self.get_enhanced_capabilities_summary"
        ],
        "_discover_tools": [
          "self._check_cache_system",
          "self._check_docs_system",
          "self._check_struct_parser",
          "self._check_cli_processor",
          "self._check_context_orchestrator",
          "self._check_copilot_manager"
        ],
        "_check_cli_processor": [
          "str",
          "CLIConfig",
          "time.time",
          "CLIUtils",
          "datetime.now",
          "ToolHealth",
          "CommandProcessor"
        ],
        "_check_copilot_manager": [
          "str",
          "hasattr",
          "initialize_copilot",
          "time.time",
          "datetime.now",
          "ToolHealth",
          "manager.get_context_status"
        ],
        "_check_context_orchestrator": [
          "create_context_orchestrator",
          "str",
          "hasattr",
          "time.time",
          "get_optimized_context",
          "logger.warning",
          "datetime.now",
          "ToolHealth"
        ],
        "_check_cache_system": [
          "cache.cache_json",
          "str",
          "struct_file.exists",
          "time.time",
          "cache.get_full_json",
          "cache.close",
          "JSONCache",
          "datetime.now",
          "ToolHealth"
        ],
        "_check_struct_parser": [
          "str",
          "struct_file.exists",
          "json.load",
          "FileNotFoundError",
          "open",
          "struct_data.get",
          "missing_keys.append",
          "time.time",
          "datetime.now",
          "ToolHealth"
        ],
        "_check_docs_system": [
          "str",
          "json.load",
          "FileNotFoundError",
          "open",
          "time.time",
          "docs_file.exists",
          "datetime.now",
          "ToolHealth"
        ],
        "_discover_context_capabilities": [
          "isinstance",
          "create_context_orchestrator",
          "config.get",
          "str",
          "logger.error",
          "scenario_mappings.keys",
          "list",
          "ContextCapabilities"
        ],
        "_check_integration_health": [
          "IntegrationHealth",
          "self._check_component_status"
        ],
        "_check_component_status": [
          "hasattr"
        ],
        "_discover_vscode_capabilities": [
          "VSCodeCapabilities"
        ],
        "_calculate_cache_hit_rate": [
          "self._calculate_real_cache_hit_rate"
        ],
        "_estimate_system_load": [
          "self._get_real_system_load"
        ],
        "_is_cache_valid": [
          "time.time"
        ],
        "_load_cached_capabilities": [
          "json.load",
          "open",
          "logger.error"
        ],
        "_cache_capabilities": [
          "open",
          "json.dump",
          "asdict",
          "logger.error"
        ],
        "get_capabilities_summary": [
          "self.discover_all_capabilities",
          "len",
          "str",
          "chr"
        ],
        "_analyze_project_structure": [
          "len",
          "sum",
          "str",
          "self._analyze_unused_capabilities",
          "struct_file.exists",
          "json.load",
          "open",
          "struct_data.get",
          "self._discover_config_capabilities",
          "self._discover_context_scenarios",
          "self._get_enhanced_directory_structure",
          "module.get"
        ],
        "_get_enhanced_directory_structure": [
          "str",
          "get_directory_structure",
          "self._basic_directory_scan"
        ],
        "_analyze_unused_capabilities": [
          "self._is_ai_useful_command",
          "config_module.get",
          "len",
          "self._is_ai_useful_utility",
          "str",
          "min",
          "struct_data.get",
          "self._is_ai_useful_config",
          "self._prioritize_integrations",
          "utils_module.get",
          "cli_module.get",
          "f.startswith",
          "modules.get"
        ],
        "_discover_config_capabilities": [
          "str",
          "is_auto_update_enabled",
          "get_context_config",
          "get_queue_config",
          "get_copilot_config"
        ],
        "_discover_context_scenarios": [
          "str",
          "get_context_for_scenario",
          "get_metrics_summary"
        ],
        "_is_ai_useful_command": [],
        "_is_ai_useful_config": [],
        "_is_ai_useful_utility": [],
        "_prioritize_integrations": [
          "priorities.append"
        ],
        "_basic_directory_scan": [
          "item.is_file",
          "str",
          "item.is_dir",
          "logger.error"
        ],
        "get_cursor_status_report": [
          "str",
          "self._get_context_status_emoji",
          "self._get_overall_health_emoji",
          "self._get_goal_alignment_status",
          "self.discover_all_capabilities",
          "self._load_cursor_config",
          "self._get_ai_integration_emoji"
        ],
        "optimize_context_for_cursor": [
          "str",
          "context_rules.get",
          "file_path.exists",
          "self._apply_privacy_filter",
          "logger.error",
          "json.load",
          "open",
          "optimal_config.get",
          "self._load_cursor_config",
          "self._analyze_query_type",
          "cursor_config.get"
        ],
        "get_goal_aligned_suggestions": [
          "logger.error",
          "any",
          "technical_context.lower",
          "personal_bridge.get",
          "self._load_personal_bridge",
          "suggestions.extend"
        ],
        "_calculate_real_cache_hit_rate": [
          "len",
          "logger.error",
          "cache_file.stat",
          "time.time",
          "cache_dir.exists",
          "list",
          "cache_dir.glob"
        ],
        "_get_real_system_load": [
          "str",
          "min",
          "logger.error",
          "psutil.disk_usage",
          "psutil.cpu_percent",
          "psutil.virtual_memory"
        ],
        "_load_cursor_config": [
          "config_path.exists",
          "open",
          "json.load",
          "logger.error"
        ],
        "_load_personal_bridge": [
          "json.load",
          "open",
          "bridge_path.exists",
          "logger.error"
        ],
        "_analyze_query_type": [
          "query_analysis.get",
          "any"
        ],
        "_apply_privacy_filter": [
          "isinstance",
          "self._filter_sensitive_dict",
          "context_data.items"
        ],
        "_filter_sensitive_dict": [
          "isinstance",
          "self._filter_sensitive_dict",
          "any",
          "data.items",
          "key.lower"
        ],
        "_get_overall_health_emoji": [],
        "_get_context_status_emoji": [
          "len"
        ],
        "_get_ai_integration_emoji": [
          "hasattr"
        ],
        "_get_goal_alignment_status": [
          "self._load_personal_bridge"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "asdict",
        "create_ai_cli_integration",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "get_ai_enhanced_cli_summary",
        "get_auto_update_config",
        "get_context_config",
        "get_context_for_scenario",
        "get_copilot_config",
        "get_directory_structure",
        "get_metrics_summary",
        "get_optimized_context",
        "get_queue_config",
        "initialize_copilot",
        "is_auto_update_enabled",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cache",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "logging",
        "os",
        "pathlib",
        "psutil",
        "time",
        "typing"
      ],
      "hash": "de0fc0c3829c83dfc026c1ecda0c1cc56753e17c115c751b2f45263e5cf6c097",
      "artifact_id": "9be92451-2228-4f83-8661-aaa4eeec4078"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "module_doc": "CLI utility functions.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize utils with root directory.",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read file content with size limit.",
          "line_range": [
            28,
            50
          ],
          "parameters": [
            "self",
            "file_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "write_file_content",
          "docstring": "Write content to file.",
          "line_range": [
            52,
            70
          ],
          "parameters": [
            "self",
            "file_path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "get_directory_structure",
          "docstring": "Get directory structure using folder generator.",
          "line_range": [
            72,
            115
          ],
          "parameters": [
            "self",
            "path",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON content.",
          "line_range": [
            117,
            123
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "format_json",
          "docstring": "Format data as JSON string.",
          "line_range": [
            125,
            131
          ],
          "parameters": [
            "self",
            "data",
            "indent"
          ],
          "decorators": []
        },
        {
          "name": "generate_unique_id",
          "docstring": "Generate unique ID for commands, queues, etc.",
          "line_range": [
            133,
            137
          ],
          "parameters": [
            "self",
            "prefix"
          ],
          "decorators": []
        },
        {
          "name": "safe_path_join",
          "docstring": "Safely join path parts, preventing directory traversal.",
          "line_range": [
            139,
            149
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_exists",
          "docstring": "Check if file exists.",
          "line_range": [
            151,
            157
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "dir_exists",
          "docstring": "Check if directory exists.",
          "line_range": [
            159,
            165
          ],
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_size",
          "docstring": "Get file size in bytes.",
          "line_range": [
            167,
            173
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_file",
          "docstring": "Create backup of file with timestamp.",
          "line_range": [
            175,
            191
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_backups",
          "docstring": "Clean up old backup files, keeping only the most recent ones.",
          "line_range": [
            193,
            222
          ],
          "parameters": [
            "self",
            "file_path",
            "keep_count"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIUtils",
          "docstring": "Utility functions for CLI operations.",
          "line_range": [
            21,
            222
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize utils with root directory.",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "read_file_content",
              "docstring": "Read file content with size limit.",
              "line_range": [
                28,
                50
              ],
              "parameters": [
                "self",
                "file_path",
                "max_size"
              ]
            },
            {
              "name": "write_file_content",
              "docstring": "Write content to file.",
              "line_range": [
                52,
                70
              ],
              "parameters": [
                "self",
                "file_path",
                "content"
              ]
            },
            {
              "name": "get_directory_structure",
              "docstring": "Get directory structure using folder generator.",
              "line_range": [
                72,
                115
              ],
              "parameters": [
                "self",
                "path",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ]
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON content.",
              "line_range": [
                117,
                123
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "format_json",
              "docstring": "Format data as JSON string.",
              "line_range": [
                125,
                131
              ],
              "parameters": [
                "self",
                "data",
                "indent"
              ]
            },
            {
              "name": "generate_unique_id",
              "docstring": "Generate unique ID for commands, queues, etc.",
              "line_range": [
                133,
                137
              ],
              "parameters": [
                "self",
                "prefix"
              ]
            },
            {
              "name": "safe_path_join",
              "docstring": "Safely join path parts, preventing directory traversal.",
              "line_range": [
                139,
                149
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_exists",
              "docstring": "Check if file exists.",
              "line_range": [
                151,
                157
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "dir_exists",
              "docstring": "Check if directory exists.",
              "line_range": [
                159,
                165
              ],
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "get_file_size",
              "docstring": "Get file size in bytes.",
              "line_range": [
                167,
                173
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "backup_file",
              "docstring": "Create backup of file with timestamp.",
              "line_range": [
                175,
                191
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "cleanup_old_backups",
              "docstring": "Clean up old backup files, keeping only the most recent ones.",
              "line_range": [
                193,
                222
              ],
              "parameters": [
                "self",
                "file_path",
                "keep_count"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "read_file_content": [
          "f.read",
          "logging.warning",
          "open",
          "os.stat",
          "logging.error"
        ],
        "write_file_content": [
          "logging.info",
          "f.write",
          "open",
          "logging.error",
          "Path"
        ],
        "get_directory_structure": [
          "sorted",
          "os.listdir",
          "logging.error",
          "get_folder_structure"
        ],
        "validate_json": [
          "json.loads",
          "str"
        ],
        "format_json": [
          "str",
          "json.dumps",
          "logging.error"
        ],
        "generate_unique_id": [
          "int",
          "uuid.uuid4",
          "str",
          "time.time"
        ],
        "safe_path_join": [
          "resolved_path.startswith",
          "ValueError"
        ],
        "file_exists": [
          "self.safe_path_join"
        ],
        "dir_exists": [
          "self.safe_path_join"
        ],
        "get_file_size": [
          "self.safe_path_join"
        ],
        "backup_file": [
          "open",
          "self.safe_path_join",
          "time.time",
          "dst.write",
          "int",
          "src.read",
          "logging.error"
        ],
        "cleanup_old_backups": [
          "logging.info",
          "logging.warning",
          "logging.error",
          "self.safe_path_join",
          "filename.startswith",
          "int",
          "os.listdir",
          "backups.append",
          "backups.sort",
          "filename.split",
          "os.remove"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": "105ac5d21c6d1870ac478aadb62ca79e99a3453df4457642fcda39f575abf367",
      "artifact_id": "14a55353-1856-4f94-b509-ab07743b80c7"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "module_doc": "CLI command processing and handlers.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize command processor.",
          "line_range": [
            33,
            72
          ],
          "parameters": [
            "self",
            "root_dir",
            "config",
            "utils"
          ],
          "decorators": []
        },
        {
          "name": "set_cache",
          "docstring": "Set cache instance.",
          "line_range": [
            74,
            76
          ],
          "parameters": [
            "self",
            "cache"
          ],
          "decorators": []
        },
        {
          "name": "set_copilot",
          "docstring": "Set Copilot manager instance.",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "self",
            "copilot_manager"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "Process a command starting with /.",
          "line_range": [
            82,
            98
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "process_prompt",
          "docstring": "Process a regular user prompt (not a command).",
          "line_range": [
            100,
            152
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Show help information.",
          "line_range": [
            154,
            217
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace",
          "docstring": "Handle workspace state and permissions management.",
          "line_range": [
            219,
            334
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_mode",
          "docstring": "Handle context mode operations with workspace integration.",
          "line_range": [
            336,
            437
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_view",
          "docstring": "View file or directory contents.",
          "line_range": [
            439,
            478
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_write",
          "docstring": "Write content to a file.",
          "line_range": [
            480,
            505
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_queue",
          "docstring": "Handle queue operations.",
          "line_range": [
            507,
            549
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_cache",
          "docstring": "Handle cache operations.",
          "line_range": [
            551,
            590
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_copilot",
          "docstring": "Handle Copilot operations.",
          "line_range": [
            592,
            626
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_config",
          "docstring": "Handle configuration operations.",
          "line_range": [
            628,
            660
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Show system status.",
          "line_range": [
            662,
            676
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_backup",
          "docstring": "Create backup of a file.",
          "line_range": [
            678,
            693
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_parse",
          "docstring": "Parse project structure.",
          "line_range": [
            695,
            715
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_audit",
          "docstring": "Handle audit operations.",
          "line_range": [
            717,
            743
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_auto_update",
          "docstring": "Handle auto-update operations.",
          "line_range": [
            745,
            765
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_struct_status",
          "docstring": "Handle struct status operations.",
          "line_range": [
            767,
            791
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context",
          "docstring": "Handle context operations.",
          "line_range": [
            793,
            849
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_session",
          "docstring": "Handle session operations.",
          "line_range": [
            851,
            902
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CommandProcessor",
          "docstring": "Processes CLI commands and user prompts.",
          "line_range": [
            30,
            902
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize command processor.",
              "line_range": [
                33,
                72
              ],
              "parameters": [
                "self",
                "root_dir",
                "config",
                "utils"
              ]
            },
            {
              "name": "set_cache",
              "docstring": "Set cache instance.",
              "line_range": [
                74,
                76
              ],
              "parameters": [
                "self",
                "cache"
              ]
            },
            {
              "name": "set_copilot",
              "docstring": "Set Copilot manager instance.",
              "line_range": [
                78,
                80
              ],
              "parameters": [
                "self",
                "copilot_manager"
              ]
            },
            {
              "name": "process_command",
              "docstring": "Process a command starting with /.",
              "line_range": [
                82,
                98
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "process_prompt",
              "docstring": "Process a regular user prompt (not a command).",
              "line_range": [
                100,
                152
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Show help information.",
              "line_range": [
                154,
                217
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace",
              "docstring": "Handle workspace state and permissions management.",
              "line_range": [
                219,
                334
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_mode",
              "docstring": "Handle context mode operations with workspace integration.",
              "line_range": [
                336,
                437
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_view",
              "docstring": "View file or directory contents.",
              "line_range": [
                439,
                478
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_write",
              "docstring": "Write content to a file.",
              "line_range": [
                480,
                505
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_queue",
              "docstring": "Handle queue operations.",
              "line_range": [
                507,
                549
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_cache",
              "docstring": "Handle cache operations.",
              "line_range": [
                551,
                590
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_copilot",
              "docstring": "Handle Copilot operations.",
              "line_range": [
                592,
                626
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_config",
              "docstring": "Handle configuration operations.",
              "line_range": [
                628,
                660
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Show system status.",
              "line_range": [
                662,
                676
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_backup",
              "docstring": "Create backup of a file.",
              "line_range": [
                678,
                693
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_parse",
              "docstring": "Parse project structure.",
              "line_range": [
                695,
                715
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_audit",
              "docstring": "Handle audit operations.",
              "line_range": [
                717,
                743
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_auto_update",
              "docstring": "Handle auto-update operations.",
              "line_range": [
                745,
                765
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_struct_status",
              "docstring": "Handle struct status operations.",
              "line_range": [
                767,
                791
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context",
              "docstring": "Handle context operations.",
              "line_range": [
                793,
                849
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_session",
              "docstring": "Handle session operations.",
              "line_range": [
                851,
                902
              ],
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "WorkspaceStateManager",
          "print"
        ],
        "set_cache": [],
        "set_copilot": [],
        "process_command": [
          "len",
          "command_line.split",
          "command_line.strip",
          "print",
          "logging.error"
        ],
        "process_prompt": [
          "len",
          "logging.warning",
          "logging.info",
          "context_data.get",
          "CopilotEvent",
          "context_info.get",
          "prompt.strip",
          "get_optimized_context",
          "print",
          "logging.error"
        ],
        "cmd_help": [
          "print"
        ],
        "cmd_workspace": [
          "len",
          "permissions.get",
          "action_args.split",
          "entry.get",
          "args.strip",
          "override.get",
          "boundaries.get",
          "result.get",
          "int",
          "print",
          "state.get",
          "logging.error"
        ],
        "cmd_mode": [
          "args.lower",
          "permissions.get",
          "len",
          "args.upper",
          "metrics.get",
          "context_data.get",
          "args.strip",
          "result.get",
          "get_optimized_context",
          "print",
          "re.findall"
        ],
        "cmd_view": [
          "sorted",
          "print",
          "args.strip",
          "os.listdir"
        ],
        "cmd_write": [
          "len",
          "args.split",
          "content.startswith",
          "content.endswith",
          "print"
        ],
        "cmd_queue": [
          "len",
          "os.remove",
          "json.load",
          "open",
          "queue_data.get",
          "args.strip",
          "print",
          "enumerate",
          "cmd.get"
        ],
        "cmd_cache": [
          "len",
          "args.strip",
          "os.listdir",
          "print",
          "stats.get"
        ],
        "cmd_copilot": [
          "json.load",
          "open",
          "json.dumps",
          "args.strip",
          "print"
        ],
        "cmd_config": [
          "print",
          "args.strip",
          "json.dumps"
        ],
        "cmd_status": [
          "print"
        ],
        "cmd_backup": [
          "print",
          "args.strip"
        ],
        "cmd_parse": [
          "print",
          "generate_json"
        ],
        "cmd_audit": [
          "print",
          "args.strip"
        ],
        "handle_auto_update": [
          "print",
          "generate_json"
        ],
        "handle_struct_status": [
          "len",
          "json.load",
          "open",
          "struct_data.get",
          "datetime.fromtimestamp",
          "print",
          "os.stat"
        ],
        "cmd_context": [
          "len",
          "metrics.get",
          "context_data.get",
          "args.strip",
          "get_optimized_context",
          "print"
        ],
        "cmd_session": [
          "len",
          "args.strip",
          "print",
          "datetime.now",
          "state.get"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CopilotContextManager",
        "CopilotEvent",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "WorkspaceStateManager",
        "cli_config",
        "cli_utils",
        "copilot",
        "create_context_orchestrator",
        "datetime",
        "generate_json",
        "get_optimized_context",
        "get_optimized_context_for_scenario",
        "initialize_copilot",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "sys",
        "trigger_copilot_event",
        "typing",
        "workspace"
      ],
      "hash": "dd0d9e75fb410d85bfe10f3e554b2fa45c45847ccb317cd54107e4ac6ce33bec",
      "artifact_id": "4b931f10-262b-4585-84b4-2e4eb911c095"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "LLMClient",
        "SystemCapabilityDiscovery",
        "ai_cli_integration",
        "ai_self_awareness",
        "llm_client"
      ],
      "hash": "2592d45bae33fe6628051f9ae5eb6dd5f13fee9588b428a512203df62a55a122",
      "artifact_id": "cd6a50e5-cba0-40f6-bf7a-683c96aeb51f"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "2421ea45b39e72f090ee252149c45385f679971e48ca50f0883e313c3db9fa6d",
      "artifact_id": "4cf071cb-ed14-4d69-8be3-eaf0ab36fdce"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            15,
            88
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering.",
          "line_range": [
            91,
            148
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.",
          "line_range": [
            151,
            218
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "str",
          "p.endswith",
          "os.walk",
          "file_path.relative_to",
          "any",
          "file_path.match",
          "structure.append",
          "uuid.uuid4",
          "set",
          "sorted",
          "p.rstrip",
          "Path"
        ],
        "build_toc_and_modules": [
          "analyze_module",
          "str",
          "len",
          "p.endswith",
          "toc.append",
          "any",
          "f.match",
          "uuid.uuid4",
          "set",
          "modules.append",
          "p.rstrip",
          "Path"
        ],
        "generate_json": [
          "len",
          "sum",
          "str",
          "build_toc_and_modules",
          "uuid.uuid4",
          "set",
          "list",
          "get_folder_structure",
          "Path"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": "0c25e4343395d66633a587d438296eac1210eac4a11f5a9f167a742396af7554",
      "artifact_id": "71db5a7c-15b2-4f73-946d-f3831af3cf40"
    },
    {
      "module_id": "src.llmstruct.generators.go_json_generator",
      "path": "src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_go_folder_structure",
          "docstring": "Capture directory and file structure for Go projects with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            15,
            85
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_go_toc_and_modules",
          "docstring": "Build TOC and modules for Go projects with artifact_id and robust filtering.",
          "line_range": [
            88,
            143
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "extract_go_mod_info",
          "docstring": "Extract information from go.mod file.",
          "line_range": [
            146,
            182
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "generate_go_json",
          "docstring": "Generate JSON structure for Go project with artifact_id, summary, and tags.",
          "line_range": [
            185,
            259
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_go_folder_structure": [
          "str",
          "p.endswith",
          "os.walk",
          "file_path.relative_to",
          "any",
          "file_path.match",
          "structure.append",
          "uuid.uuid4",
          "set",
          "sorted",
          "p.rstrip",
          "Path"
        ],
        "build_go_toc_and_modules": [
          "analyze_module",
          "str",
          "len",
          "p.endswith",
          "toc.append",
          "any",
          "f.match",
          "uuid.uuid4",
          "set",
          "modules.append",
          "module.get",
          "p.rstrip",
          "Path"
        ],
        "extract_go_mod_info": [
          "f.read",
          "len",
          "dependencies.append",
          "line.split",
          "go_mod_path.exists",
          "open",
          "content.strip",
          "line.strip",
          "line.startswith",
          "logging.error",
          "Path"
        ],
        "generate_go_json": [
          "len",
          "sum",
          "str",
          "extract_go_mod_info",
          "get_go_folder_structure",
          "go_mod_info.get",
          "build_go_toc_and_modules",
          "uuid.uuid4",
          "set",
          "list",
          "m.get",
          "Path"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.go_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": "2e11ebd0b1baad6e008b5c7c7dcff832215263638561a7d78670b0cb647d4bf1",
      "artifact_id": "26ad7d74-118b-4381-8b2f-85d46b4fa7d5"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "json_generator"
      ],
      "hash": "6510b9d89fa5bff008cf7b1ee6f50343f96b76737b5842a930c06888c5cbba6c",
      "artifact_id": "10acd1b2-1f3e-495d-8380-b85a2a3cdfed"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": [
            12,
            40
          ],
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": [
            43,
            61
          ],
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "str",
          "json_file.exists",
          "logging.info",
          "schema_file.exists",
          "json.load",
          "open",
          "validate",
          "logging.error",
          "Path"
        ],
        "validate_directory": [
          "str",
          "json_file.match",
          "validate_struct_json",
          "any",
          "Path"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": "cc5c6b4f74409f89459ec86a9d59d83cd92c691e95ab4e670e6b8ac8c979a232",
      "artifact_id": "6da1a57a-587e-4215-a328-e1326672975e"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": "f0ee4f577643fd8bc74b46fd7debd96cc15683b5a7ad0018bb0788523f4b8d34",
      "artifact_id": "5aa1a298-4562-49c4-bd4e-316d8d7514da"
    },
    {
      "module_id": "src.llmstruct.parsers.universal_converter",
      "path": "src/llmstruct/parsers/universal_converter.py",
      "category": "core",
      "module_doc": "Universal Code Converter - Orchestrates all language parsers\nConverts any codebase to llmstruct JSON format",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for universal converter",
          "line_range": [
            375,
            428
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            55,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            79,
            82
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "detect_language",
          "docstring": "Detect programming language from file extension",
          "line_range": [
            84,
            92
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "detect_project_languages",
          "docstring": "Detect all languages in project and count files",
          "line_range": [
            94,
            109
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "get_project_files",
          "docstring": "Get all relevant files for conversion",
          "line_range": [
            111,
            138
          ],
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_python_project",
          "docstring": "Convert Python project to llmstruct format",
          "line_range": [
            140,
            171
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_go_project",
          "docstring": "Convert Go project to llmstruct format",
          "line_range": [
            173,
            190
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_javascript_project",
          "docstring": "Convert JavaScript project to llmstruct format",
          "line_range": [
            192,
            223
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_project",
          "docstring": "Convert any project to llmstruct format",
          "line_range": [
            225,
            250
          ],
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_multi_language_project",
          "docstring": "Convert multi-language project with separate sections per language",
          "line_range": [
            252,
            282
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_build_project_structure",
          "docstring": "Build standard llmstruct project structure",
          "line_range": [
            284,
            312
          ],
          "parameters": [
            "self",
            "language",
            "project_path",
            "modules",
            "toc"
          ],
          "decorators": []
        },
        {
          "name": "_build_empty_project_structure",
          "docstring": "Build empty structure when conversion fails",
          "line_range": [
            314,
            329
          ],
          "parameters": [
            "self",
            "language",
            "project_path",
            "error"
          ],
          "decorators": []
        },
        {
          "name": "_merge_language_results",
          "docstring": "Merge multiple language results into unified structure",
          "line_range": [
            331,
            372
          ],
          "parameters": [
            "self",
            "project_path",
            "language_results"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Language",
          "docstring": "",
          "line_range": [
            33,
            42
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ConverterConfig",
          "docstring": "Configuration for universal converter",
          "line_range": [
            46,
            62
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                55,
                62
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "UniversalConverter",
          "docstring": "Universal code converter for any programming language",
          "line_range": [
            65,
            372
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                79,
                82
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "detect_language",
              "docstring": "Detect programming language from file extension",
              "line_range": [
                84,
                92
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "detect_project_languages",
              "docstring": "Detect all languages in project and count files",
              "line_range": [
                94,
                109
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "get_project_files",
              "docstring": "Get all relevant files for conversion",
              "line_range": [
                111,
                138
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_python_project",
              "docstring": "Convert Python project to llmstruct format",
              "line_range": [
                140,
                171
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_go_project",
              "docstring": "Convert Go project to llmstruct format",
              "line_range": [
                173,
                190
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_javascript_project",
              "docstring": "Convert JavaScript project to llmstruct format",
              "line_range": [
                192,
                223
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_project",
              "docstring": "Convert any project to llmstruct format",
              "line_range": [
                225,
                250
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_multi_language_project",
              "docstring": "Convert multi-language project with separate sections per language",
              "line_range": [
                252,
                282
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_build_project_structure",
              "docstring": "Build standard llmstruct project structure",
              "line_range": [
                284,
                312
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "modules",
                "toc"
              ]
            },
            {
              "name": "_build_empty_project_structure",
              "docstring": "Build empty structure when conversion fails",
              "line_range": [
                314,
                329
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "error"
              ]
            },
            {
              "name": "_merge_language_results",
              "docstring": "Merge multiple language results into unified structure",
              "line_range": [
                331,
                372
              ],
              "parameters": [
                "self",
                "project_path",
                "language_results"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "GoAnalyzer",
          "ConverterConfig",
          "JavaScriptParser"
        ],
        "detect_language": [
          "Path"
        ],
        "detect_project_languages": [
          "languages.get",
          "self.detect_language",
          "os.walk",
          "any"
        ],
        "get_project_files": [
          "files.append",
          "self.detect_language",
          "os.walk",
          "any"
        ],
        "convert_python_project": [
          "len",
          "toc.append",
          "self._build_project_structure",
          "logger.info",
          "module_data.get",
          "modules.append",
          "logger.warning",
          "analyze_python",
          "self.get_project_files"
        ],
        "convert_go_project": [
          "str",
          "logger.error",
          "convert_to_llmstruct_format",
          "logger.info",
          "self._build_empty_project_structure"
        ],
        "convert_javascript_project": [
          "len",
          "toc.append",
          "self._build_project_structure",
          "module_data.get",
          "logger.info",
          "modules.append",
          "logger.warning",
          "self.get_project_files"
        ],
        "convert_project": [
          "NotImplementedError",
          "ValueError",
          "max",
          "self.detect_project_languages",
          "languages.keys",
          "logger.info",
          "self.convert_python_project",
          "self.convert_javascript_project",
          "self.convert_go_project"
        ],
        "convert_multi_language_project": [
          "ValueError",
          "self._merge_language_results",
          "logger.error",
          "languages.keys",
          "self.detect_project_languages",
          "self.convert_python_project",
          "logger.info",
          "self.convert_javascript_project",
          "self.convert_go_project",
          "logger.warning"
        ],
        "_build_project_structure": [
          "m.get",
          "len",
          "sum",
          "language.title"
        ],
        "_build_empty_project_structure": [],
        "_merge_language_results": [
          "all_toc.append",
          "result.get",
          "language_results.items",
          "list",
          "language_results.keys",
          "stats.get",
          "all_modules.append"
        ],
        "main": [
          "converter.convert_project",
          "converter.convert_multi_language_project",
          "UniversalConverter",
          "f.write",
          "logger.error",
          "open",
          "json.dumps",
          "traceback.print_exc",
          "result.get",
          "Language",
          "parser.add_argument",
          "ConverterConfig",
          "print",
          "argparse.ArgumentParser",
          "exit",
          "parser.parse_args",
          "stats.get"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "GoAnalyzer",
        "JavaScriptParser",
        "List",
        "Optional",
        "Path",
        "Union",
        "analyze_module",
        "argparse",
        "convert_to_llmstruct_format",
        "dataclass",
        "dataclasses",
        "enum",
        "go_analyzer",
        "javascript_parser",
        "json",
        "logging",
        "os",
        "pathlib",
        "python_parser",
        "sys",
        "traceback",
        "typing"
      ],
      "hash": "e696f22d510dfa07afbd538e69c6d7ac3c8dd4e742905cfe256be1005e0c2b95",
      "artifact_id": "e89d3d9e-4424-4884-a5ac-c81140aa0ae0"
    },
    {
      "module_id": "src.llmstruct.parsers.go_analyzer",
      "path": "src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "module_doc": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b: go/packages, go/analysis",
      "functions": [
        {
          "name": "convert_to_llmstruct_format",
          "docstring": "\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 llmstruct",
          "line_range": [
            203,
            337
          ],
          "parameters": [
            "analysis",
            "include_ranges",
            "goals"
          ],
          "decorators": []
        },
        {
          "name": "_compute_file_hash",
          "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 SHA-256 \u0445\u044d\u0448 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            339,
            345
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            347,
            402
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_setup_analyzer",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
          "line_range": [
            28,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cleanup",
          "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
          "line_range": [
            68,
            72
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_project",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            74,
            125
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_fallback_analysis",
          "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            127,
            201
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GoAnalyzer",
          "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 Go \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432",
          "line_range": [
            21,
            201
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_setup_analyzer",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
              "line_range": [
                28,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cleanup",
              "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
              "line_range": [
                68,
                72
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_project",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
              "line_range": [
                74,
                125
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_fallback_analysis",
              "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                127,
                201
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "_setup_analyzer": [
          "str",
          "logging.warning",
          "analyzer_file.write_text",
          "subprocess.run",
          "analyzer_source.read_text",
          "tempfile.mkdtemp",
          "Path"
        ],
        "_cleanup": [
          "shutil.rmtree",
          "Path"
        ],
        "analyze_project": [
          "json.loads",
          "logging.warning",
          "logging.info",
          "subprocess.run",
          "self._fallback_analysis",
          "self._setup_analyzer",
          "self._cleanup",
          "logging.error"
        ],
        "_fallback_analysis": [
          "file_path.read_text",
          "len",
          "str",
          "line.split",
          "logging.info",
          "logging.warning",
          "packages.add",
          "go_mod_path.exists",
          "line.strip",
          "file_path.relative_to",
          "sorted",
          "set",
          "content.split",
          "go_mod_path.read_text",
          "line.startswith",
          "list",
          "Path"
        ],
        "convert_to_llmstruct_format": [
          "analysis.get",
          "functions.append",
          "str",
          "len",
          "sum",
          "iface.get",
          "classes.append",
          "toc.append",
          "file_data.get",
          "path.replace",
          "uuid.uuid4",
          "_compute_file_hash",
          "modules.append",
          "module.get",
          "path.endswith",
          "struct.get",
          "fn.get"
        ],
        "_compute_file_hash": [
          "f.read",
          "open",
          "hashlib.sha256"
        ],
        "main": [
          "len",
          "GoAnalyzer",
          "f.write",
          "open",
          "json.dumps",
          "traceback.print_exc",
          "result.get",
          "analyzer.analyze_project",
          "convert_to_llmstruct_format",
          "parser.add_argument",
          "print",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "sys.exit",
          "stats.get",
          "Path"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "subprocess",
        "sys",
        "tempfile",
        "traceback",
        "typing",
        "uuid"
      ],
      "hash": "621e1d82791d814534c044dc8ba1d1c79b1852a614255e313f5ff697c934f210",
      "artifact_id": "e98a9cdb-49c5-41cd-94fa-e0bd339faeb9"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            9,
            13
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": [
            15,
            20
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": [
            22,
            41
          ],
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": [
            43,
            124
          ],
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": [
            8,
            124
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                9,
                13
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": [
                15,
                20
              ],
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": [
                22,
                41
              ],
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": [
                43,
                124
              ],
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "f.read",
          "open",
          "hashlib.sha256"
        ],
        "compute_file_metadata": [
          "open",
          "self.file_hash",
          "sum",
          "os.stat"
        ],
        "parse_module": [
          "f.read",
          "str",
          "esprima.parseModule",
          "open",
          "self.compute_file_metadata"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": "d2af10a2c30b638a634dd0317c81a179888dee011e0b7a0f62166dce468373c4",
      "artifact_id": "01c605ab-751b-4075-954b-712288616e01"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": [
            13,
            20
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content.",
          "line_range": [
            72,
            79
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data.",
          "line_range": [
            82,
            154
          ],
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            26,
            29
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": [
            31,
            35
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": [
            37,
            43
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": [
            45,
            50
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": [
            52,
            57
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": [
            59,
            69
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": [
            23,
            69
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                29
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": [
                37,
                43
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": [
                45,
                50
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": [
                52,
                57
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": [
                59,
                69
              ],
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_AsyncFunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "compute_file_hash": [
          "f.read",
          "open",
          "hashlib.sha256",
          "logging.error"
        ],
        "analyze_module": [
          "isinstance",
          "f.read",
          "str",
          "functions.append",
          "ast.unparse",
          "classes.append",
          "open",
          "ast.parse",
          "infer_category",
          "compute_file_hash",
          "CallVisitor",
          "visitor.visit",
          "ast.walk",
          "ast.get_docstring",
          "list",
          "sorted",
          "logging.error",
          "Path"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": "555ac7004c99ba854fc4fc4688b583331229077e51dfa999d7aae2cd9f7c21dd",
      "artifact_id": "788a54ea-6cf6-4dd1-9b57-d165e0abdf13"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "javascript_parser"
      ],
      "hash": "2f1fce5cf3e867869608b18a8ab1197f8a32add4fd35d4de75f891a9dad04b63",
      "artifact_id": "be5763af-7217-4a29-9575-49e7884763b2"
    },
    {
      "module_id": "temp_boss_missing.scripts.business_planning",
      "path": "temp_boss_missing/scripts/business_planning.py",
      "category": "core",
      "module_doc": "Business Planning Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
      "functions": [
        {
          "name": "create_business_planning_manager",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
          "line_range": [
            216,
            218
          ],
          "parameters": [
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
          "line_range": [
            20,
            27
          ],
          "parameters": [
            "self",
            "boss_data_dir"
          ],
          "decorators": []
        },
        {
          "name": "create_business_roadmap",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.",
          "line_range": [
            29,
            55
          ],
          "parameters": [
            "self",
            "roadmap_data"
          ],
          "decorators": []
        },
        {
          "name": "create_financial_plan",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "plan_data"
          ],
          "decorators": []
        },
        {
          "name": "record_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.",
          "line_range": [
            84,
            116
          ],
          "parameters": [
            "self",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_business_metrics",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            118,
            154
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_business_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.",
          "line_range": [
            156,
            193
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
          "line_range": [
            195,
            204
          ],
          "parameters": [
            "self",
            "file_path",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
          "line_range": [
            206,
            213
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BusinessPlanningManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439.",
          "line_range": [
            17,
            213
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
              "line_range": [
                20,
                27
              ],
              "parameters": [
                "self",
                "boss_data_dir"
              ]
            },
            {
              "name": "create_business_roadmap",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.",
              "line_range": [
                29,
                55
              ],
              "parameters": [
                "self",
                "roadmap_data"
              ]
            },
            {
              "name": "create_financial_plan",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "plan_data"
              ]
            },
            {
              "name": "record_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.",
              "line_range": [
                84,
                116
              ],
              "parameters": [
                "self",
                "decision_data"
              ]
            },
            {
              "name": "analyze_business_metrics",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                118,
                154
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_business_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.",
              "line_range": [
                156,
                193
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
              "line_range": [
                195,
                204
              ],
              "parameters": [
                "self",
                "file_path",
                "default"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
              "line_range": [
                206,
                213
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "create_business_roadmap": [
          "self._save_data",
          "datetime.now",
          "logger.error",
          "logger.info"
        ],
        "create_financial_plan": [
          "self._save_data",
          "datetime.now",
          "logger.error",
          "logger.info"
        ],
        "record_strategic_decision": [
          "isinstance",
          "self._save_data",
          "logger.error",
          "logger.info",
          "decisions.append",
          "decision_data.get",
          "datetime.now",
          "self._load_data"
        ],
        "analyze_business_metrics": [
          "isinstance",
          "len",
          "logger.error",
          "datetime.now",
          "self._load_data"
        ],
        "get_business_summary": [
          "isinstance",
          "len",
          "bool",
          "logger.error",
          "roadmap.get",
          "financial.get",
          "datetime.now",
          "self._load_data"
        ],
        "_load_data": [
          "json.load",
          "file_path.open",
          "file_path.exists",
          "logger.error"
        ],
        "_save_data": [
          "file_path.open",
          "logger.error",
          "json.dump"
        ],
        "create_business_planning_manager": [
          "BusinessPlanningManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "timedelta",
        "typing"
      ],
      "hash": "0e53b669d4dfd9dc8ded438d877dde9176406ff0392f4b0129041ec3e70ed538",
      "artifact_id": "f873b564-09d1-4da5-a11c-29332e033993"
    },
    {
      "module_id": "temp_boss_missing.scripts.team_management",
      "path": "temp_boss_missing/scripts/team_management.py",
      "category": "core",
      "module_doc": "Team Management Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439, \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
      "functions": [
        {
          "name": "create_team_management_system",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            291,
            293
          ],
          "parameters": [
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            20,
            27
          ],
          "parameters": [
            "self",
            "boss_data_dir"
          ],
          "decorators": []
        },
        {
          "name": "create_team_strategy",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            29,
            54
          ],
          "parameters": [
            "self",
            "strategy_data"
          ],
          "decorators": []
        },
        {
          "name": "record_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            56,
            88
          ],
          "parameters": [
            "self",
            "evaluation_data"
          ],
          "decorators": []
        },
        {
          "name": "create_hiring_plan",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            90,
            115
          ],
          "parameters": [
            "self",
            "plan_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_team_performance",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            117,
            156
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_team_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            158,
            195
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_team_report",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            197,
            226
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_strategy",
          "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.",
          "line_range": [
            228,
            238
          ],
          "parameters": [
            "self",
            "strategy"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_evaluations",
          "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.",
          "line_range": [
            240,
            250
          ],
          "parameters": [
            "self",
            "evaluations"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.",
          "line_range": [
            252,
            268
          ],
          "parameters": [
            "self",
            "strategy",
            "evaluations"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
          "line_range": [
            270,
            279
          ],
          "parameters": [
            "self",
            "file_path",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
          "line_range": [
            281,
            288
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TeamManagementSystem",
          "docstring": "\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438.",
          "line_range": [
            17,
            288
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
              "line_range": [
                20,
                27
              ],
              "parameters": [
                "self",
                "boss_data_dir"
              ]
            },
            {
              "name": "create_team_strategy",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
              "line_range": [
                29,
                54
              ],
              "parameters": [
                "self",
                "strategy_data"
              ]
            },
            {
              "name": "record_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                56,
                88
              ],
              "parameters": [
                "self",
                "evaluation_data"
              ]
            },
            {
              "name": "create_hiring_plan",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                90,
                115
              ],
              "parameters": [
                "self",
                "plan_data"
              ]
            },
            {
              "name": "analyze_team_performance",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                117,
                156
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_team_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                158,
                195
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_team_report",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                197,
                226
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_summarize_strategy",
              "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.",
              "line_range": [
                228,
                238
              ],
              "parameters": [
                "self",
                "strategy"
              ]
            },
            {
              "name": "_summarize_evaluations",
              "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.",
              "line_range": [
                240,
                250
              ],
              "parameters": [
                "self",
                "evaluations"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.",
              "line_range": [
                252,
                268
              ],
              "parameters": [
                "self",
                "strategy",
                "evaluations"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
              "line_range": [
                270,
                279
              ],
              "parameters": [
                "self",
                "file_path",
                "default"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
              "line_range": [
                281,
                288
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "create_team_strategy": [
          "self._save_data",
          "datetime.now",
          "logger.error",
          "logger.info"
        ],
        "record_team_evaluation": [
          "isinstance",
          "self._save_data",
          "logger.error",
          "logger.info",
          "evaluations.append",
          "datetime.now",
          "self._load_data"
        ],
        "create_hiring_plan": [
          "self._save_data",
          "datetime.now",
          "logger.error",
          "logger.info"
        ],
        "analyze_team_performance": [
          "isinstance",
          "len",
          "bool",
          "logger.error",
          "datetime.now",
          "self._load_data"
        ],
        "get_team_summary": [
          "isinstance",
          "len",
          "bool",
          "logger.error",
          "strategy.get",
          "hiring_plans.get",
          "datetime.now",
          "self._load_data"
        ],
        "generate_team_report": [
          "self._summarize_strategy",
          "logger.error",
          "self._summarize_evaluations",
          "self._generate_recommendations",
          "datetime.now",
          "self._load_data"
        ],
        "_summarize_strategy": [
          "strategy.get"
        ],
        "_summarize_evaluations": [
          "isinstance",
          "len"
        ],
        "_generate_recommendations": [
          "len",
          "recommendations.append"
        ],
        "_load_data": [
          "json.load",
          "file_path.open",
          "file_path.exists",
          "logger.error"
        ],
        "_save_data": [
          "file_path.open",
          "logger.error",
          "json.dump"
        ],
        "create_team_management_system": [
          "TeamManagementSystem"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "timedelta",
        "typing"
      ],
      "hash": "3201ea679ec44992fb13752a988c8f8985987a0e3cbeb998e72dbe472221a67e",
      "artifact_id": "3c5e6366-c4b8-49f9-8fc0-e88e6d337c28"
    },
    {
      "module_id": "temp_boss_missing.scripts.boss_cli",
      "path": "temp_boss_missing/scripts/boss_cli.py",
      "category": "core",
      "module_doc": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u043e\u0434\u0443\u043b\u0438",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f.",
          "line_range": [
            490,
            503
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
          "line_range": [
            42,
            101
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
          "line_range": [
            103,
            126
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            128,
            147
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_status",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.",
          "line_range": [
            150,
            157
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_audit",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.",
          "line_range": [
            159,
            166
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_context",
          "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.",
          "line_range": [
            168,
            175
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_queue",
          "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.",
          "line_range": [
            177,
            184
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_summary",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.",
          "line_range": [
            186,
            193
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_roadmap",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
          "line_range": [
            196,
            221
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_financial_plan",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.",
          "line_range": [
            223,
            256
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
          "line_range": [
            258,
            273
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            275,
            282
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_summary",
          "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
          "line_range": [
            284,
            291
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_strategy",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            294,
            308
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            310,
            326
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_hiring_plan",
          "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            328,
            346
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            348,
            355
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_report",
          "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            357,
            364
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_technical",
          "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
          "line_range": [
            367,
            379
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context_full",
          "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
          "line_range": [
            381,
            384
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace_override",
          "docstring": "Emergency workspace overrides.",
          "line_range": [
            387,
            396
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_capabilities",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
          "line_range": [
            399,
            422
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_boss_status",
          "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
          "line_range": [
            424,
            440
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
          "line_range": [
            442,
            487
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BossCLI",
          "docstring": "Boss CLI - \u043f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f.\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u0444\u0443\u043d\u043a\u0446\u0438\u0438.",
          "line_range": [
            36,
            487
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
              "line_range": [
                42,
                101
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "run_interactive",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
              "line_range": [
                103,
                126
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                128,
                147
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "cmd_ai_status",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.",
              "line_range": [
                150,
                157
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_audit",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.",
              "line_range": [
                159,
                166
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_context",
              "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.",
              "line_range": [
                168,
                175
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_queue",
              "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.",
              "line_range": [
                177,
                184
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_summary",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.",
              "line_range": [
                186,
                193
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_roadmap",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
              "line_range": [
                196,
                221
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_financial_plan",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.",
              "line_range": [
                223,
                256
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
              "line_range": [
                258,
                273
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                275,
                282
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_summary",
              "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
              "line_range": [
                284,
                291
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_strategy",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                294,
                308
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                310,
                326
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_hiring_plan",
              "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                328,
                346
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                348,
                355
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_report",
              "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                357,
                364
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_technical",
              "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
              "line_range": [
                367,
                379
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context_full",
              "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
              "line_range": [
                381,
                384
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace_override",
              "docstring": "Emergency workspace overrides.",
              "line_range": [
                387,
                396
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_capabilities",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
              "line_range": [
                399,
                422
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_boss_status",
              "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
              "line_range": [
                424,
                440
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
              "line_range": [
                442,
                487
              ],
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "AISelfAwarenessCLIIntegration",
          "str",
          "CLIConfig",
          "CLIUtils",
          "BusinessPlanningManager",
          "TeamManagementSystem",
          "CommandProcessor",
          "Path"
        ],
        "run_interactive": [
          "input",
          "print",
          "self.process_command",
          "user_input.lower"
        ],
        "process_command": [
          "len",
          "print",
          "command_line.split",
          "cmd.startswith"
        ],
        "cmd_ai_status": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_audit": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_context": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_queue": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_business_roadmap": [
          "print",
          "json.dumps"
        ],
        "cmd_financial_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_strategic_decision": [
          "print",
          "json.dumps"
        ],
        "cmd_business_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_business_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_team_strategy": [
          "print",
          "json.dumps"
        ],
        "cmd_team_evaluation": [
          "print",
          "json.dumps"
        ],
        "cmd_hiring_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_team_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_team_report": [
          "print",
          "json.dumps"
        ],
        "cmd_technical": [
          "print"
        ],
        "cmd_context_full": [
          "print"
        ],
        "cmd_workspace_override": [
          "print"
        ],
        "cmd_capabilities": [
          "bool",
          "print",
          "json.dumps"
        ],
        "cmd_boss_status": [
          "print",
          "json.dumps"
        ],
        "cmd_help": [
          "print"
        ],
        "main": [
          "BossCLI",
          "parser.add_argument",
          "boss_cli.process_command",
          "argparse.ArgumentParser",
          "boss_cli.run_interactive",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "Any",
        "BusinessPlanningManager",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "Dict",
        "Optional",
        "Path",
        "TeamManagementSystem",
        "argparse",
        "business_planning",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "os",
        "pathlib",
        "sys",
        "team_management",
        "typing"
      ],
      "hash": "fcd9f04d7641d774f0e698d44db67cf7172430d3a3cf4aa2b4cbf3350362b94d",
      "artifact_id": "e4a1f056-8c9f-440c-b7aa-65cc92d0165d"
    },
    {
      "module_id": "temp_boss_missing.scripts.__init__",
      "path": "temp_boss_missing/scripts/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "artifact_id": "c87c266a-b2d9-4c0d-92db-9425f8c0ce47"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": [
            6,
            8
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": [
            11,
            13
          ],
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": "70fff4b692f6900035193847d1d43f0c5a32cc21033f9bca1752854d86bad1ed",
      "artifact_id": "e8b93dea-b652-4df3-80a9-d766ffba54fc"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": [
            6,
            9
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": [
            15,
            17
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": [
            12,
            17
          ],
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": [
                15,
                17
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "print",
          "utils.helper"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": "510144e1a60708ee61e9b3261f619e416139a7d102c2c038af07810087c672b6",
      "artifact_id": "3a02d449-62e0-447b-8bde-10180f34f807"
    },
    {
      "module_id": "integrations.telegram_bot.mp002_progress_bot",
      "path": "integrations/telegram_bot/mp002_progress_bot.py",
      "category": "core",
      "module_doc": "MP-002A Progress Bot - Telegram \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Smart Wrapper \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\n\u042d\u0442\u0430\u043f\u043d\u0430\u044f \u043e\u0442\u0447\u0435\u0442\u043d\u043e\u0441\u0442\u044c, \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430, \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435",
      "functions": [
        {
          "name": "start_mp002_bot",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a MP-002A \u0431\u043e\u0442\u0430",
          "line_range": [
            431,
            452
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            23,
            82
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "init_progress_tracking",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            84,
            109
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_progress",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            111,
            118
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_progress",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            120,
            123
          ],
          "parameters": [
            "self",
            "progress"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
          "line_range": [
            125,
            139
          ],
          "parameters": [
            "self",
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "report_phase_start",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435 \u0444\u0430\u0437\u044b",
          "line_range": [
            141,
            172
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id"
          ],
          "decorators": []
        },
        {
          "name": "report_task_completion",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            174,
            207
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id",
            "task_description",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "request_phase_approval",
          "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441 \u043e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0430\u0437\u044b",
          "line_range": [
            209,
            232
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id"
          ],
          "decorators": []
        },
        {
          "name": "report_issue",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0435",
          "line_range": [
            234,
            264
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id",
            "issue_description"
          ],
          "decorators": []
        },
        {
          "name": "get_overall_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            266,
            307
          ],
          "parameters": [
            "self",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            309,
            326
          ],
          "parameters": [
            "self",
            "update"
          ],
          "decorators": []
        },
        {
          "name": "handle_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            328,
            349
          ],
          "parameters": [
            "self",
            "chat_id",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "send_welcome",
          "docstring": "\u041f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
          "line_range": [
            351,
            367
          ],
          "parameters": [
            "self",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "approve_phase",
          "docstring": "\u041e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u0435 \u0444\u0430\u0437\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c",
          "line_range": [
            369,
            413
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id"
          ],
          "decorators": []
        },
        {
          "name": "handle_feedback",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043a\u0430\u043a feedback",
          "line_range": [
            415,
            427
          ],
          "parameters": [
            "self",
            "chat_id",
            "text"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "MP002ProgressBot",
          "docstring": "Telegram \u0431\u043e\u0442 \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 MP-002A Smart Wrapper",
          "line_range": [
            18,
            427
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                23,
                82
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "init_progress_tracking",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                84,
                109
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_progress",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                111,
                118
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_progress",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                120,
                123
              ],
              "parameters": [
                "self",
                "progress"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
              "line_range": [
                125,
                139
              ],
              "parameters": [
                "self",
                "chat_id",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "report_phase_start",
              "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435 \u0444\u0430\u0437\u044b",
              "line_range": [
                141,
                172
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id"
              ]
            },
            {
              "name": "report_task_completion",
              "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                174,
                207
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id",
                "task_description",
                "details"
              ]
            },
            {
              "name": "request_phase_approval",
              "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441 \u043e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0430\u0437\u044b",
              "line_range": [
                209,
                232
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id"
              ]
            },
            {
              "name": "report_issue",
              "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0435",
              "line_range": [
                234,
                264
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id",
                "issue_description"
              ]
            },
            {
              "name": "get_overall_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                266,
                307
              ],
              "parameters": [
                "self",
                "chat_id"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                309,
                326
              ],
              "parameters": [
                "self",
                "update"
              ]
            },
            {
              "name": "handle_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                328,
                349
              ],
              "parameters": [
                "self",
                "chat_id",
                "command"
              ]
            },
            {
              "name": "send_welcome",
              "docstring": "\u041f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
              "line_range": [
                351,
                367
              ],
              "parameters": [
                "self",
                "chat_id"
              ]
            },
            {
              "name": "approve_phase",
              "docstring": "\u041e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u0435 \u0444\u0430\u0437\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c",
              "line_range": [
                369,
                413
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id"
              ]
            },
            {
              "name": "handle_feedback",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043a\u0430\u043a feedback",
              "line_range": [
                415,
                427
              ],
              "parameters": [
                "self",
                "chat_id",
                "text"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.init_progress_tracking",
          "Path"
        ],
        "init_progress_tracking": [
          "open",
          "json.dump",
          "datetime.now"
        ],
        "load_progress": [
          "json.load",
          "open",
          "self.init_progress_tracking",
          "self.load_progress"
        ],
        "save_progress": [
          "open",
          "json.dump"
        ],
        "send_message": [
          "str",
          "client.post",
          "httpx.AsyncClient",
          "print",
          "response.json"
        ],
        "report_phase_start": [
          "datetime.now",
          "self.load_progress",
          "self.save_progress",
          "self.send_message",
          "phase_id.upper",
          "enumerate"
        ],
        "report_task_completion": [
          "len",
          "self.load_progress",
          "self.save_progress",
          "self.request_phase_approval",
          "self.send_message",
          "datetime.now"
        ],
        "request_phase_approval": [
          "self.send_message",
          "phase_id.upper",
          "enumerate"
        ],
        "report_issue": [
          "self.send_message",
          "self.load_progress",
          "datetime.now",
          "self.save_progress"
        ],
        "get_overall_status": [
          "len",
          "self.load_progress",
          "phase_data.get",
          "progress.get",
          "self.send_message"
        ],
        "handle_message": [
          "self.handle_feedback",
          "text.startswith",
          "self.handle_command",
          "message.get"
        ],
        "handle_command": [
          "len",
          "self.send_welcome",
          "self.continue_work",
          "self.show_phase_details",
          "command.split",
          "self.get_overall_status",
          "self.report_user_issues",
          "self.show_help",
          "self.send_message",
          "self.approve_phase"
        ],
        "send_welcome": [
          "self.send_message"
        ],
        "approve_phase": [
          "len",
          "self.load_progress",
          "self.report_phase_start",
          "self.save_progress",
          "list",
          "self.send_message",
          "phase_id.upper",
          "datetime.now",
          "phases_list.index"
        ],
        "handle_feedback": [
          "self.load_progress",
          "self.save_progress",
          "progress.get",
          "self.send_message",
          "datetime.now"
        ],
        "start_mp002_bot": [
          "os.getenv",
          "print",
          "MP002ProgressBot"
        ]
      },
      "dependencies": [
        "Path",
        "asyncio",
        "datetime",
        "httpx",
        "json",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": "f60e36ab63391ed71af42d2dcb0dade4356aed7e39c70e0db4c31506b25e5c39",
      "artifact_id": "52131c36-2633-4b43-ae23-f9715e151a87"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            18,
            22
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            24,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            44,
            64
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            66,
            79
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            81,
            94
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            96,
            98
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            17,
            98
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                18,
                22
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                24,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                44,
                64
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                66,
                79
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                81,
                94
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                96,
                98
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "sqlite3.connect",
          "self.create_tables"
        ],
        "create_tables": [],
        "cache_json": [
          "f.read",
          "str",
          "json_file.exists",
          "content.encode",
          "logging.info",
          "open",
          "json.dumps",
          "hashlib.sha256",
          "logging.error",
          "Path"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "json.load",
          "open",
          "cursor.fetchone",
          "logging.error"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": "0639e2f3c27b70d02596862e63d49bc84c48ca8d0d0c8778b2d42425598acc1e",
      "artifact_id": "af583f58-f347-4717-bda8-0b2c701d2dd0"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            17,
            29
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            31,
            72
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "isinstance",
          "data.get",
          "filtered.append",
          "item.get"
        ],
        "select_json": [
          "json_file.exists",
          "json.load",
          "open",
          "f.seek",
          "prefix.startswith",
          "ijson.parse",
          "path.append",
          "filter_json",
          "filtered.append",
          "current_item.get",
          "logging.error",
          "Path"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "21ea37c015ac1ab1932e3784ab8cbd041de37be59ba72d3ad9432d5d3391523f",
      "artifact_id": "7fad200d-429c-4c59-aba7-91594a742dc0"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": [
            17,
            35
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            37,
            74
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "any",
          "prompt.lower",
          "filter_json",
          "module.get",
          "struct.get"
        ],
        "attach_to_llm_request": [
          "context_file.exists",
          "cache.cache_json",
          "filter_struct",
          "logging.info",
          "json.dumps",
          "cache.get_full_json",
          "prompt.lower",
          "cache.get_metadata",
          "select_json",
          "filter_json",
          "logging.error",
          "Path"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": "894d0cb3c48c80975d0bd6f3c6920b835e98f4dfe7de68ef5c6e01e1bb300534",
      "artifact_id": "6b9b87a1-79cc-4e22-80ba-e1c6db3de969"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            26,
            36
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            38,
            47
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            49,
            58
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": [
            60,
            74
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            76,
            83
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            85,
            195
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            197,
            237
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            239,
            260
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            262,
            264
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            266,
            268
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            270,
            272
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            274,
            334
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_path.open",
          "gitignore_path.exists",
          "line.strip",
          "line.startswith",
          "logging.error",
          "Path"
        ],
        "load_config": [
          "config_path.exists",
          "toml.load",
          "config_path\u30aa\u30fc\u30d7\u30f3",
          "logging.error",
          "Path"
        ],
        "read_file_content": [
          "f.read",
          "path.open",
          "path.is_file",
          "logging.error",
          "Path"
        ],
        "write_to_file": [
          "str",
          "file_path.open",
          "logging.warning",
          "file_path.exists",
          "f.write",
          "logging.info",
          "base_path.mkdir",
          "logging.error",
          "Path"
        ],
        "parse_files_from_response": [
          "content.strip",
          "filename.strip",
          "files.append",
          "re.findall"
        ],
        "interactive": [
          "parse",
          "client.query",
          "json.dumps",
          "parse_files_from_response",
          "re.search",
          "cache.close",
          "scan_match.group",
          "files_to_write.append",
          "logging.error",
          "write_dir.startswith",
          "load_gitignore",
          "logging.warning",
          "attach_to_llm_request",
          "write_match.group",
          "os.listdir",
          "read_file_content",
          "print",
          "LLMClient",
          "input",
          "JSONCache",
          "sorted",
          "user_input.lower",
          "get_folder_structure",
          "write_to_file",
          "Path"
        ],
        "parse": [
          "cache.cache_json",
          "config.get",
          "load_gitignore",
          "logging.warning",
          "logging.info",
          "json.dump",
          "generate_json",
          "load_config",
          "JSONCache",
          "cache.close",
          "logging.error",
          "Path"
        ],
        "query": [
          "LLMClient",
          "logging.info",
          "client.query",
          "json.dump",
          "cache.close",
          "JSONCache",
          "logging.error",
          "Path"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "parser.add_subparsers",
          "parse_parser.add_argument",
          "asyncio.run",
          "parse",
          "interactive_parser.add_argument",
          "query",
          "review_parser.add_argument",
          "context_parser.add_argument",
          "interactive",
          "query_parser.add_argument",
          "subparsers.add_parser",
          "context",
          "review",
          "parser.parse_args",
          "dogfood_parser.add_argument",
          "dogfood",
          "argparse.ArgumentParser"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": "26cffb7c31d1f379e0dcc75d668fd872ffe10d408cfb92cc81172aeca774fffc",
      "artifact_id": "2a6b0eac-4141-4135-8c12-cf247fe3769c"
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "module_doc": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct.\nPart of the comprehensive session management system.",
      "functions": [
        {
          "name": "get_current_branch",
          "docstring": "Get current git branch.",
          "line_range": [
            24,
            31
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "save_json_file",
          "docstring": "Save JSON file with error handling.",
          "line_range": [
            42,
            51
          ],
          "parameters": [
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_current_timestamp",
          "docstring": "Get current timestamp in ISO format.",
          "line_range": [
            53,
            55
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log_event",
          "docstring": "Log an event to worklog.json.",
          "line_range": [
            57,
            88
          ],
          "parameters": [
            "event_message",
            "author"
          ],
          "decorators": []
        },
        {
          "name": "switch_session",
          "docstring": "Switch to a different session or create new one.",
          "line_range": [
            90,
            141
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "list_sessions",
          "docstring": "List all available sessions.",
          "line_range": [
            143,
            166
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_session",
          "docstring": "Show current session details.",
          "line_range": [
            168,
            183
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_worklog",
          "docstring": "Show recent worklog entries.",
          "line_range": [
            185,
            203
          ],
          "parameters": [
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main CLI interface.",
          "line_range": [
            205,
            244
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            16,
            22
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "get_current_branch": [
          "subprocess.run"
        ],
        "load_json_file": [
          "json.load",
          "open",
          "print"
        ],
        "save_json_file": [
          "open",
          "print",
          "os.makedirs",
          "json.dump"
        ],
        "get_current_timestamp": [
          "datetime.now"
        ],
        "log_event": [
          "get_current_branch",
          "load_json_file",
          "get_current_timestamp",
          "current_session.get",
          "print",
          "save_json_file"
        ],
        "switch_session": [
          "get_current_branch",
          "load_json_file",
          "log_event",
          "get_current_timestamp",
          "print",
          "save_json_file"
        ],
        "list_sessions": [
          "load_json_file",
          "print",
          "current_session.get"
        ],
        "show_current_session": [
          "load_json_file",
          "print",
          "current_session.get"
        ],
        "show_worklog": [
          "len",
          "load_json_file",
          "print",
          "reversed"
        ],
        "main": [
          "len",
          "switch_session",
          "list_sessions",
          "show_worklog",
          "log_event",
          "int",
          "show_current_session",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": "23aca9a658e60715b7fa3e4a009c3de7baebdd1eca3acae17d87938ae622cc41",
      "artifact_id": "4a603d43-4059-4356-b818-c41757b997d5"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.",
      "functions": [
        {
          "name": "detect_project_changes",
          "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.",
          "line_range": [
            44,
            81
          ],
          "parameters": [
            "root_dir",
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_struct_json",
          "docstring": "Create a backup of existing struct.json.",
          "line_range": [
            84,
            97
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_struct_json",
          "docstring": "Validate generated struct.json for basic structure.",
          "line_range": [
            100,
            128
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "update_struct_json",
          "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful",
          "line_range": [
            131,
            225
          ],
          "parameters": [
            "root_dir",
            "struct_path",
            "force",
            "config_override"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for auto-update script.",
          "line_range": [
            228,
            286
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "",
          "line_range": [
            24,
            25
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            26,
            27
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_config": [],
        "load_gitignore": [],
        "generate_json": [
          "ImportError"
        ],
        "detect_project_changes": [
          "subprocess.run",
          "logger.info",
          "file_path.stat",
          "logger.warning",
          "Path"
        ],
        "backup_struct_json": [
          "logger.error",
          "subprocess.run",
          "logger.info",
          "datetime.now",
          "Path"
        ],
        "validate_struct_json": [
          "json.load",
          "open",
          "logger.info",
          "logger.error"
        ],
        "update_struct_json": [
          "config.get",
          "load_gitignore",
          "config.update",
          "logger.error",
          "open",
          "cli_config.get",
          "json.dump",
          "subprocess.run",
          "validate_struct_json",
          "logger.info",
          "generate_json",
          "load_config",
          "detect_project_changes",
          "backup_struct_json",
          "os.getcwd"
        ],
        "main": [
          "logging.getLogger",
          "parser.add_argument",
          "print",
          "argparse.ArgumentParser",
          "update_struct_json",
          "detect_project_changes",
          "parser.parse_args",
          "sys.exit",
          "os.getcwd"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "generate_json",
        "json",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": "505bdb6b282e7e9befc6df4165834fa7481335c96bbb88b04501996e15e173c2",
      "artifact_id": "a990cb58-2d54-4a86-91e9-fad59dfe48a5"
    },
    {
      "module_id": "scripts.fix_hardcoded_usernames",
      "path": "scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "module_doc": "Fix Hardcoded Usernames Script\nAutomatically detects and replaces hardcoded usernames with dynamic values from .env or git config.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            234,
            288
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            22,
            24
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_detect_user_info",
          "docstring": "Detect user info from .env, git config, or environment.",
          "line_range": [
            26,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_env",
          "docstring": "Load user info from .env file.",
          "line_range": [
            64,
            86
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_git",
          "docstring": "Load user info from git config.",
          "line_range": [
            88,
            120
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_environment",
          "docstring": "Load user info from environment variables.",
          "line_range": [
            122,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_user_info",
          "docstring": "Get detected user information.",
          "line_range": [
            130,
            132
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            138,
            148
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_files",
          "docstring": "Scan for files containing hardcoded usernames.",
          "line_range": [
            150,
            172
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "fix_file",
          "docstring": "Fix hardcoded usernames in a single file.",
          "line_range": [
            174,
            200
          ],
          "parameters": [
            "self",
            "file_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "fix_all_files",
          "docstring": "Fix hardcoded usernames in all project files.",
          "line_range": [
            202,
            214
          ],
          "parameters": [
            "self",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "generate_env_template",
          "docstring": "Generate .env template with required variables.",
          "line_range": [
            216,
            231
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "UserInfoDetector",
          "docstring": "Detect user information from various sources.",
          "line_range": [
            19,
            132
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                22,
                24
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_detect_user_info",
              "docstring": "Detect user info from .env, git config, or environment.",
              "line_range": [
                26,
                62
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_env",
              "docstring": "Load user info from .env file.",
              "line_range": [
                64,
                86
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_git",
              "docstring": "Load user info from git config.",
              "line_range": [
                88,
                120
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_environment",
              "docstring": "Load user info from environment variables.",
              "line_range": [
                122,
                128
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_user_info",
              "docstring": "Get detected user information.",
              "line_range": [
                130,
                132
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "HardcodeFixer",
          "docstring": "Fix hardcoded usernames in project files.",
          "line_range": [
            135,
            231
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                138,
                148
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_files",
              "docstring": "Scan for files containing hardcoded usernames.",
              "line_range": [
                150,
                172
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "fix_file",
              "docstring": "Fix hardcoded usernames in a single file.",
              "line_range": [
                174,
                200
              ],
              "parameters": [
                "self",
                "file_path",
                "dry_run"
              ]
            },
            {
              "name": "fix_all_files",
              "docstring": "Fix hardcoded usernames in all project files.",
              "line_range": [
                202,
                214
              ],
              "parameters": [
                "self",
                "dry_run"
              ]
            },
            {
              "name": "generate_env_template",
              "docstring": "Generate .env template with required variables.",
              "line_range": [
                216,
                231
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "UserInfoDetector",
          "Path"
        ],
        "_detect_user_info": [
          "self._load_from_git",
          "env_vars.items",
          "self._load_from_environment",
          "logger.info",
          "env_info.items",
          "user_info.update",
          "self._load_from_env",
          "user_info.get"
        ],
        "_load_from_env": [
          "key.strip",
          "env_file.exists",
          "env_vars.get",
          "line.split",
          "logger.error",
          "line.strip",
          "open",
          "value.strip",
          "line.startswith"
        ],
        "_load_from_git": [
          "match.group",
          "subprocess.run",
          "logger.error",
          "re.search"
        ],
        "_load_from_environment": [],
        "get_user_info": [],
        "scan_files": [
          "f.read",
          "str",
          "files_with_hardcode.append",
          "open",
          "any",
          "content.count",
          "logger.warning"
        ],
        "fix_file": [
          "f.read",
          "f.write",
          "logger.error",
          "open",
          "logger.info",
          "content.count",
          "content.replace"
        ],
        "fix_all_files": [
          "len",
          "str",
          "self.scan_files",
          "self.fix_file",
          "logger.info"
        ],
        "generate_env_template": [],
        "main": [
          "len",
          "f.write",
          "replacements.items",
          "HardcodeFixer",
          "open",
          "fixer.generate_env_template",
          "fixer.scan_files",
          "logger.info",
          "parser.add_argument",
          "results.items",
          "print",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "fixer.fix_all_files",
          "Path"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "typing"
      ],
      "hash": "04fdd50dde3b144c4c93f598ab0748be398c1287e006924d5a573d5b520395a3",
      "artifact_id": "bd7763f7-b60c-49e2-946f-f0589a9c8b8a"
    },
    {
      "module_id": "scripts.create_github_issues",
      "path": "scripts/create_github_issues.py",
      "category": "core",
      "module_doc": "GitHub Issues Creator for AI-Dogfooding Project\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GitHub issues \u0438\u0437 \u043d\u0430\u0448\u0438\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447",
      "functions": [
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            16,
            28
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_epics_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438\u0437 JSON",
          "line_range": [
            205,
            213
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f issues",
          "line_range": [
            215,
            252
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "token",
            "use_cli"
          ],
          "decorators": []
        },
        {
          "name": "create_epic_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            45,
            83
          ],
          "parameters": [
            "self",
            "epic_data"
          ],
          "decorators": []
        },
        {
          "name": "create_task_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            85,
            128
          ],
          "parameters": [
            "self",
            "task_data",
            "epic_number"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_api",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
          "line_range": [
            130,
            150
          ],
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_cli",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
          "line_range": [
            152,
            186
          ],
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_format_criteria",
          "docstring": "",
          "line_range": [
            188,
            189
          ],
          "parameters": [
            "self",
            "criteria"
          ],
          "decorators": []
        },
        {
          "name": "_format_tasks",
          "docstring": "",
          "line_range": [
            191,
            200
          ],
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "_format_metrics",
          "docstring": "",
          "line_range": [
            202,
            203
          ],
          "parameters": [
            "self",
            "metrics"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubIssuesCreator",
          "docstring": "",
          "line_range": [
            33,
            203
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                34,
                43
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "token",
                "use_cli"
              ]
            },
            {
              "name": "create_epic_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
              "line_range": [
                45,
                83
              ],
              "parameters": [
                "self",
                "epic_data"
              ]
            },
            {
              "name": "create_task_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                85,
                128
              ],
              "parameters": [
                "self",
                "task_data",
                "epic_number"
              ]
            },
            {
              "name": "_create_issue_via_api",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
              "line_range": [
                130,
                150
              ],
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_create_issue_via_cli",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
              "line_range": [
                152,
                186
              ],
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_format_criteria",
              "docstring": "",
              "line_range": [
                188,
                189
              ],
              "parameters": [
                "self",
                "criteria"
              ]
            },
            {
              "name": "_format_tasks",
              "docstring": "",
              "line_range": [
                191,
                200
              ],
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "_format_metrics",
              "docstring": "",
              "line_range": [
                202,
                203
              ],
              "parameters": [
                "self",
                "metrics"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "load_env_file": [
          "key.strip",
          "env_file.exists",
          "line.split",
          "line.strip",
          "open",
          "value.strip",
          "line.startswith",
          "print",
          "Path"
        ],
        "__init__": [],
        "create_epic_issue": [
          "epic_data.get",
          "self._format_criteria",
          "self._create_issue_via_api",
          "self._format_tasks",
          "self._format_metrics",
          "self._create_issue_via_cli"
        ],
        "create_task_issue": [
          "task_data.get",
          "self._create_issue_via_api",
          "self._format_criteria",
          "self._create_issue_via_cli"
        ],
        "_create_issue_via_api": [
          "print",
          "requests.post",
          "response.json"
        ],
        "_create_issue_via_cli": [
          "issue_url.split",
          "f.write",
          "open",
          "os.getpid",
          "subprocess.run",
          "int",
          "print",
          "os.unlink"
        ],
        "_format_criteria": [],
        "_format_tasks": [],
        "_format_metrics": [
          "metrics.items"
        ],
        "load_epics_data": [
          "json.load",
          "open",
          "print",
          "epics_file.exists",
          "Path"
        ],
        "main": [
          "len",
          "load_epics_data",
          "epic_data.get",
          "GitHubIssuesCreator",
          "epics_data.get",
          "os.getenv",
          "creator.create_epic_issue",
          "print",
          "creator.create_task_issue"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": "49ba6a19e2c3aa696879c666036ca56bf5678032d3a8a1004c9c1849b87104b7",
      "artifact_id": "3fa0250f-330b-4db9-b260-8fa563325609"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            183,
            266
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            23,
            26
          ],
          "parameters": [
            "self",
            "config_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "check_github_cli",
          "docstring": "Check if GitHub CLI is installed and authenticated",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "list_projects",
          "docstring": "List available GitHub Projects (via gh-projects extension)",
          "line_range": [
            38,
            55
          ],
          "parameters": [
            "self",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "create_project_item",
          "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "project_number",
            "title",
            "body",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_tasks_to_project",
          "docstring": "Export tasks to GitHub Project",
          "line_range": [
            84,
            123
          ],
          "parameters": [
            "self",
            "tasks",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_ideas_to_project",
          "docstring": "Export ideas to GitHub Project",
          "line_range": [
            125,
            164
          ],
          "parameters": [
            "self",
            "ideas",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "filter_data",
          "docstring": "Filter data by status and priority",
          "line_range": [
            166,
            180
          ],
          "parameters": [
            "self",
            "data",
            "status_filter",
            "priority_filter"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExportScript",
          "docstring": "Extended exporter with command-line interface and GitHub CLI integration",
          "line_range": [
            20,
            180
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                23,
                26
              ],
              "parameters": [
                "self",
                "config_path",
                "dry_run"
              ]
            },
            {
              "name": "check_github_cli",
              "docstring": "Check if GitHub CLI is installed and authenticated",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "list_projects",
              "docstring": "List available GitHub Projects (via gh-projects extension)",
              "line_range": [
                38,
                55
              ],
              "parameters": [
                "self",
                "owner",
                "repo"
              ]
            },
            {
              "name": "create_project_item",
              "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "project_number",
                "title",
                "body",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_tasks_to_project",
              "docstring": "Export tasks to GitHub Project",
              "line_range": [
                84,
                123
              ],
              "parameters": [
                "self",
                "tasks",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_ideas_to_project",
              "docstring": "Export ideas to GitHub Project",
              "line_range": [
                125,
                164
              ],
              "parameters": [
                "self",
                "ideas",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "filter_data",
              "docstring": "Filter data by status and priority",
              "line_range": [
                166,
                180
              ],
              "parameters": [
                "self",
                "data",
                "status_filter",
                "priority_filter"
              ]
            }
          ],
          "bases": [
            "GitHubProjectsExporter"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "super"
        ],
        "check_github_cli": [
          "self._run_gh_command",
          "print"
        ],
        "list_projects": [
          "json.loads",
          "self._run_gh_command",
          "print",
          "isinstance"
        ],
        "create_project_item": [
          "str",
          "print",
          "output.strip",
          "self._run_gh_command"
        ],
        "export_tasks_to_project": [
          "len",
          "task.get",
          "self.create_project_item",
          "self.format_task_for_github",
          "print"
        ],
        "export_ideas_to_project": [
          "len",
          "idea.get",
          "self.create_project_item",
          "self.format_idea_for_github",
          "print"
        ],
        "filter_data": [
          "item.get"
        ],
        "main": [
          "exporter.load_official_data",
          "exporter.export_tasks_to_project",
          "exporter.filter_data",
          "exporter._save_mapping",
          "parser.add_argument",
          "GitHubProjectsExportScript",
          "print",
          "exporter.check_github_cli",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "sys.exit",
          "exporter.export_ideas_to_project"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "GitHubProjectsExporter",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "datetime",
        "json",
        "llmstruct.gh_view",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": "b6b4f700d8fed14e918455d59e88d15bc3259556aad468ee3c3ea4816d710f2a",
      "artifact_id": "8cafb4b8-5da3-41e9-a65c-727a4a46cd61"
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "artifact_id": "ef094608-cab6-489d-a916-f49251f18919"
    },
    {
      "module_id": "scripts.process_926_items",
      "path": "scripts/process_926_items.py",
      "category": "core",
      "module_doc": "926 Items Processing Script - Updated Implementation\nProcesses items according to GitHub roadmap + personal management vision\nImplements all decisions from 926_items_processing_execution_plan.md",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            51
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_comprehensive_index",
          "docstring": "Load the 926 items from comprehensive index",
          "line_range": [
            53,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "calculate_confidence_score",
          "docstring": "Calculate confidence score for categorization decision",
          "line_range": [
            113,
            146
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "check_t_pot_related",
          "docstring": "Enhanced T-Pot detection",
          "line_range": [
            148,
            155
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_team_implementable",
          "docstring": "Check if team can implement without architecture review",
          "line_range": [
            157,
            176
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_personal_vs_team_vs_business",
          "docstring": "Classify as personal/team/business",
          "line_range": [
            178,
            214
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "identify_epic_candidates",
          "docstring": "Identify items that should be grouped into epics",
          "line_range": [
            216,
            233
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "extract_epic_name",
          "docstring": "Extract epic name from item",
          "line_range": [
            235,
            241
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "categorize_item",
          "docstring": "Main categorization logic with confidence scoring",
          "line_range": [
            243,
            278
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "find_duplicates",
          "docstring": "Enhanced duplicate detection with T-Pot special handling",
          "line_range": [
            280,
            319
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "calculate_similarity",
          "docstring": "Enhanced similarity calculation",
          "line_range": [
            321,
            342
          ],
          "parameters": [
            "self",
            "title1",
            "title2"
          ],
          "decorators": []
        },
        {
          "name": "suggest_merge_strategy",
          "docstring": "Enhanced merge strategy with T-Pot consideration",
          "line_range": [
            344,
            359
          ],
          "parameters": [
            "self",
            "item1",
            "item2"
          ],
          "decorators": []
        },
        {
          "name": "process_items",
          "docstring": "Main processing workflow implementing execution plan",
          "line_range": [
            361,
            468
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "save_results",
          "docstring": "Save categorized results with enhanced metadata",
          "line_range": [
            470,
            546
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_category_description",
          "docstring": "Category descriptions per execution plan",
          "line_range": [
            548,
            562
          ],
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Main execution workflow per execution plan",
          "line_range": [
            564,
            606
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskProcessor926",
          "docstring": "",
          "line_range": [
            15,
            606
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                51
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_comprehensive_index",
              "docstring": "Load the 926 items from comprehensive index",
              "line_range": [
                53,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "calculate_confidence_score",
              "docstring": "Calculate confidence score for categorization decision",
              "line_range": [
                113,
                146
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "check_t_pot_related",
              "docstring": "Enhanced T-Pot detection",
              "line_range": [
                148,
                155
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_team_implementable",
              "docstring": "Check if team can implement without architecture review",
              "line_range": [
                157,
                176
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_personal_vs_team_vs_business",
              "docstring": "Classify as personal/team/business",
              "line_range": [
                178,
                214
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "identify_epic_candidates",
              "docstring": "Identify items that should be grouped into epics",
              "line_range": [
                216,
                233
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "extract_epic_name",
              "docstring": "Extract epic name from item",
              "line_range": [
                235,
                241
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "categorize_item",
              "docstring": "Main categorization logic with confidence scoring",
              "line_range": [
                243,
                278
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "find_duplicates",
              "docstring": "Enhanced duplicate detection with T-Pot special handling",
              "line_range": [
                280,
                319
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "calculate_similarity",
              "docstring": "Enhanced similarity calculation",
              "line_range": [
                321,
                342
              ],
              "parameters": [
                "self",
                "title1",
                "title2"
              ]
            },
            {
              "name": "suggest_merge_strategy",
              "docstring": "Enhanced merge strategy with T-Pot consideration",
              "line_range": [
                344,
                359
              ],
              "parameters": [
                "self",
                "item1",
                "item2"
              ]
            },
            {
              "name": "process_items",
              "docstring": "Main processing workflow implementing execution plan",
              "line_range": [
                361,
                468
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "save_results",
              "docstring": "Save categorized results with enhanced metadata",
              "line_range": [
                470,
                546
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_category_description",
              "docstring": "Category descriptions per execution plan",
              "line_range": [
                548,
                562
              ],
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "run",
              "docstring": "Main execution workflow per execution plan",
              "line_range": [
                564,
                606
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "datetime.now",
          "Path"
        ],
        "load_comprehensive_index": [
          "isinstance",
          "str",
          "len",
          "json.load",
          "open",
          "items.append",
          "any",
          "item_content.lower",
          "data.items",
          "value.items",
          "set",
          "unique_items.append",
          "items.extend",
          "seen_items.add",
          "item.get",
          "print",
          "index_path.exists",
          "hash"
        ],
        "calculate_confidence_score": [
          "str",
          "sum",
          "min",
          "self.check_t_pot_related",
          "item.get"
        ],
        "check_t_pot_related": [
          "str",
          "any"
        ],
        "check_team_implementable": [
          "str",
          "sum"
        ],
        "check_personal_vs_team_vs_business": [
          "str",
          "max",
          "sum",
          "item.get"
        ],
        "identify_epic_candidates": [
          "str",
          "len",
          "epic_groups.items",
          "any",
          "self.extract_epic_name",
          "item.get"
        ],
        "extract_epic_name": [
          "title.split",
          "item.get"
        ],
        "categorize_item": [
          "self.calculate_confidence_score",
          "str",
          "self.check_personal_vs_team_vs_business",
          "any",
          "self.check_t_pot_related",
          "self.check_team_implementable"
        ],
        "find_duplicates": [
          "seen_items.items",
          "self.suggest_merge_strategy",
          "duplicates.append",
          "self.calculate_similarity",
          "self.check_t_pot_related",
          "item.get"
        ],
        "calculate_similarity": [
          "words1.union",
          "len",
          "title1.split",
          "min",
          "set",
          "words1.intersection",
          "title2.split"
        ],
        "suggest_merge_strategy": [
          "len",
          "str",
          "item1.get",
          "item2.get",
          "self.check_t_pot_related"
        ],
        "process_items": [
          "len",
          "str",
          "processed_item.copy",
          "self.categorize_item",
          "low_confidence_items.append",
          "any",
          "self.find_duplicates",
          "set",
          "category.startswith",
          "id",
          "self.check_t_pot_related",
          "self.check_team_implementable",
          "self.extract_epic_name",
          "print",
          "datetime.now",
          "duplicate_item_ids.add"
        ],
        "save_results": [
          "len",
          "sum",
          "open",
          "json.dump",
          "self.get_category_description",
          "item.get",
          "print",
          "datetime.now"
        ],
        "get_category_description": [
          "descriptions.get"
        ],
        "run": [
          "print",
          "self.process_items",
          "self.save_results",
          "self.load_comprehensive_index"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": "75943c116813d77b47300deeaeadb26b7ccd4a37912497bdb82871198feedcf5",
      "artifact_id": "3c314031-ac25-4a80-a47d-73ae4f3c57bf"
    },
    {
      "module_id": "scripts.fix_github_script",
      "path": "scripts/fix_github_script.py",
      "category": "core",
      "module_doc": "Quick fix for GitHub issues creation script\n\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 JSON \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445",
      "functions": [
        {
          "name": "fix_json_loading",
          "docstring": "\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 JSON \u0434\u0430\u043d\u043d\u044b\u0445",
          "line_range": [
            11,
            42
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "fix_json_loading": [
          "f.read",
          "f.write",
          "open",
          "print",
          "content.replace",
          "Path"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib"
      ],
      "hash": "749ea82f6bcdc68da77827b691267646be1c85f5b2c20e39d085d768c9e64d87",
      "artifact_id": "b81e03f2-188c-43fb-ab8f-dc31f29f4ac5"
    },
    {
      "module_id": "scripts.github_sync_manager",
      "path": "scripts/github_sync_manager.py",
      "category": "core",
      "module_doc": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub\nSupports: Issues, Epics (Projects), Discussions\nSafety: dry-run mode, logging, collision detection",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface",
          "line_range": [
            375,
            408
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            17,
            48
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results for idempotency",
          "line_range": [
            50,
            60
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log for future idempotency",
          "line_range": [
            62,
            65
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Safe GitHub API request with rate limiting",
          "line_range": [
            67,
            94
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_issues",
          "docstring": "Get existing GitHub issues for collision detection",
          "line_range": [
            96,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_discussions",
          "docstring": "Get existing GitHub discussions",
          "line_range": [
            114,
            118
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced (idempotency)",
          "line_range": [
            120,
            125
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "find_existing_by_title",
          "docstring": "Find existing GitHub item by title similarity",
          "line_range": [
            127,
            143
          ],
          "parameters": [
            "self",
            "title",
            "existing_items"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue",
          "docstring": "Create GitHub issue from processed item",
          "line_range": [
            145,
            182
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion",
          "docstring": "Create GitHub discussion from processed item",
          "line_range": [
            184,
            194
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic",
          "docstring": "Create GitHub epic (as Project or enhanced Issue)",
          "line_range": [
            196,
            214
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "sync_category",
          "docstring": "Sync specific category with GitHub",
          "line_range": [
            216,
            290
          ],
          "parameters": [
            "self",
            "category",
            "filename"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Pre-sync validation checks",
          "line_range": [
            292,
            322
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "Main sync execution",
          "line_range": [
            324,
            373
          ],
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubSyncManager",
          "docstring": "",
          "line_range": [
            16,
            373
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                17,
                48
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results for idempotency",
              "line_range": [
                50,
                60
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log for future idempotency",
              "line_range": [
                62,
                65
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Safe GitHub API request with rate limiting",
              "line_range": [
                67,
                94
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "get_existing_issues",
              "docstring": "Get existing GitHub issues for collision detection",
              "line_range": [
                96,
                112
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_existing_discussions",
              "docstring": "Get existing GitHub discussions",
              "line_range": [
                114,
                118
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced (idempotency)",
              "line_range": [
                120,
                125
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "find_existing_by_title",
              "docstring": "Find existing GitHub item by title similarity",
              "line_range": [
                127,
                143
              ],
              "parameters": [
                "self",
                "title",
                "existing_items"
              ]
            },
            {
              "name": "create_github_issue",
              "docstring": "Create GitHub issue from processed item",
              "line_range": [
                145,
                182
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion",
              "docstring": "Create GitHub discussion from processed item",
              "line_range": [
                184,
                194
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_epic",
              "docstring": "Create GitHub epic (as Project or enhanced Issue)",
              "line_range": [
                196,
                214
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "sync_category",
              "docstring": "Sync specific category with GitHub",
              "line_range": [
                216,
                290
              ],
              "parameters": [
                "self",
                "category",
                "filename"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Pre-sync validation checks",
              "line_range": [
                292,
                322
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "Main sync execution",
              "line_range": [
                324,
                373
              ],
              "parameters": [
                "self",
                "categories"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getenv",
          "self.load_sync_log",
          "print",
          "Path"
        ],
        "load_sync_log": [
          "json.load",
          "open"
        ],
        "save_sync_log": [
          "open",
          "json.dump"
        ],
        "api_request": [
          "requests.patch",
          "ValueError",
          "time.sleep",
          "requests.post",
          "method.upper",
          "requests.get",
          "int",
          "response.raise_for_status",
          "print",
          "response.json"
        ],
        "get_existing_issues": [
          "len",
          "issues.extend",
          "self.api_request"
        ],
        "get_existing_discussions": [],
        "item_already_synced": [
          "item.get"
        ],
        "find_existing_by_title": [
          "len",
          "title.lower",
          "item.get"
        ],
        "create_github_issue": [
          "labels.append",
          "processing_meta.get",
          "item.get",
          "print",
          "self.api_request"
        ],
        "create_github_discussion": [
          "print",
          "item.get"
        ],
        "create_github_epic": [
          "print",
          "self.api_request",
          "item.get"
        ],
        "sync_category": [
          "self.create_github_epic",
          "file_path.exists",
          "json.load",
          "open",
          "data.get",
          "self.create_github_discussion",
          "result.get",
          "self.find_existing_by_title",
          "self.create_github_issue",
          "item.get",
          "self.get_existing_discussions",
          "self.item_already_synced",
          "print",
          "self.get_existing_issues",
          "datetime.now",
          "existing.get"
        ],
        "validate_before_sync": [
          "core_limit.get",
          "rate_limit.get",
          "repo_info.get",
          "print",
          "user_info.get",
          "self.api_request"
        ],
        "run_sync": [
          "results.values",
          "sum",
          "self.sync_category",
          "self.save_sync_log",
          "self.validate_before_sync",
          "r.get",
          "print",
          "datetime.now"
        ],
        "main": [
          "len",
          "GitHubSyncManager",
          "result.get",
          "parser.add_argument",
          "manager.run_sync",
          "print",
          "argparse.ArgumentParser",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "time",
        "typing"
      ],
      "hash": "1ee49d0d031a76692ccc03ff995d0a75d198818dcf2c1f625d6e9aee0828a7c9",
      "artifact_id": "9c7968d8-75f0-43d6-a777-e28384947b24"
    },
    {
      "module_id": "scripts.create_comprehensive_index",
      "path": "scripts/create_comprehensive_index.py",
      "category": "core",
      "module_doc": "Comprehensive Project Index Creator\nScans ALL project directories for tasks, ideas, sessions, and concepts.\nProvides complete visibility into project state and unaccounted innovations.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            714,
            735
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            45,
            58
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize comprehensive extraction patterns.",
          "line_range": [
            60,
            92
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "scan_all_directories",
          "docstring": "Scan all configured directories comprehensively.",
          "line_range": [
            94,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_scan_directory",
          "docstring": "Scan a specific directory according to its configuration.",
          "line_range": [
            113,
            127
          ],
          "parameters": [
            "self",
            "directory",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_scan_root_files",
          "docstring": "Scan root-level files.",
          "line_range": [
            129,
            133
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_should_scan_file",
          "docstring": "Check if file should be scanned based on extension.",
          "line_range": [
            135,
            137
          ],
          "parameters": [
            "self",
            "file_path",
            "allowed_types"
          ],
          "decorators": []
        },
        {
          "name": "_scan_file",
          "docstring": "Scan individual file for project items.",
          "line_range": [
            139,
            152
          ],
          "parameters": [
            "self",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_text",
          "docstring": "Extract items from text/markdown files.",
          "line_range": [
            154,
            206
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_json",
          "docstring": "Extract items from JSON files.",
          "line_range": [
            208,
            225
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_item_from_match",
          "docstring": "Create ProjectItem from regex match.",
          "line_range": [
            227,
            249
          ],
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_checkbox_item",
          "docstring": "Create ProjectItem from checkbox match.",
          "line_range": [
            251,
            274
          ],
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_simple_item",
          "docstring": "Create simple ProjectItem.",
          "line_range": [
            276,
            297
          ],
          "parameters": [
            "self",
            "title",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_status",
          "docstring": "Detect item status from surrounding content.",
          "line_range": [
            299,
            308
          ],
          "parameters": [
            "self",
            "content",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_priority",
          "docstring": "Detect item priority from surrounding content.",
          "line_range": [
            310,
            319
          ],
          "parameters": [
            "self",
            "content",
            "position",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_assess_strategic_value",
          "docstring": "Assess strategic value of item.",
          "line_range": [
            321,
            330
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract context around position.",
          "line_range": [
            332,
            336
          ],
          "parameters": [
            "self",
            "content",
            "position",
            "length"
          ],
          "decorators": []
        },
        {
          "name": "_detect_category",
          "docstring": "Detect item category.",
          "line_range": [
            338,
            351
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_effort",
          "docstring": "Estimate effort required.",
          "line_range": [
            353,
            362
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tags",
          "docstring": "Extract relevant tags.",
          "line_range": [
            364,
            378
          ],
          "parameters": [
            "self",
            "title",
            "content",
            "source_dir"
          ],
          "decorators": []
        },
        {
          "name": "_is_noise_checkbox",
          "docstring": "Check if checkbox is noise (navigation, etc).",
          "line_range": [
            380,
            384
          ],
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "_parse_json_files",
          "docstring": "Parse structured JSON files for existing data.",
          "line_range": [
            386,
            402
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_process_structured_json",
          "docstring": "Process structured JSON data.",
          "line_range": [
            404,
            419
          ],
          "parameters": [
            "self",
            "data",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_add_json_item",
          "docstring": "Add item from JSON structure.",
          "line_range": [
            421,
            441
          ],
          "parameters": [
            "self",
            "item",
            "file_path",
            "item_type"
          ],
          "decorators": []
        },
        {
          "name": "_assess_json_strategic_value",
          "docstring": "Assess strategic value from JSON item.",
          "line_range": [
            443,
            450
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_extract_innovation_concepts",
          "docstring": "Extract innovation concepts from content.",
          "line_range": [
            452,
            482
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_enhance_items",
          "docstring": "Post-process items to enhance metadata and find relationships.",
          "line_range": [
            484,
            501
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_find_related_items",
          "docstring": "Find related items based on content similarity.",
          "line_range": [
            503,
            517
          ],
          "parameters": [
            "self",
            "item",
            "id_map",
            "title_map"
          ],
          "decorators": []
        },
        {
          "name": "generate_comprehensive_report",
          "docstring": "Generate comprehensive analysis report.",
          "line_range": [
            519,
            561
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_comprehensive_index",
          "docstring": "Save comprehensive index and reports.",
          "line_range": [
            563,
            582
          ],
          "parameters": [
            "self",
            "output_dir"
          ],
          "decorators": []
        },
        {
          "name": "_generate_analysis_report",
          "docstring": "Generate human-readable analysis report.",
          "line_range": [
            584,
            658
          ],
          "parameters": [
            "self",
            "report"
          ],
          "decorators": []
        },
        {
          "name": "_format_dict",
          "docstring": "Format dictionary for markdown display.",
          "line_range": [
            660,
            662
          ],
          "parameters": [
            "self",
            "d"
          ],
          "decorators": []
        },
        {
          "name": "_format_items_list",
          "docstring": "Format items list for markdown display.",
          "line_range": [
            664,
            677
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_tasks",
          "docstring": "Extract tasks from JSON tasks array.",
          "line_range": [
            679,
            684
          ],
          "parameters": [
            "self",
            "tasks_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_ideas",
          "docstring": "Extract ideas from JSON ideas array.",
          "line_range": [
            686,
            691
          ],
          "parameters": [
            "self",
            "ideas_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_sessions",
          "docstring": "Extract sessions from JSON sessions array.",
          "line_range": [
            693,
            698
          ],
          "parameters": [
            "self",
            "sessions_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_array",
          "docstring": "Extract items from JSON array.",
          "line_range": [
            700,
            711
          ],
          "parameters": [
            "self",
            "array_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ProjectItem",
          "docstring": "Unified representation of any project item (task, idea, session, concept).",
          "line_range": [
            22,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ComprehensiveIndexer",
          "docstring": "Comprehensive indexer for all project content.",
          "line_range": [
            42,
            711
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                45,
                58
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize comprehensive extraction patterns.",
              "line_range": [
                60,
                92
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "scan_all_directories",
              "docstring": "Scan all configured directories comprehensively.",
              "line_range": [
                94,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_scan_directory",
              "docstring": "Scan a specific directory according to its configuration.",
              "line_range": [
                113,
                127
              ],
              "parameters": [
                "self",
                "directory",
                "config"
              ]
            },
            {
              "name": "_scan_root_files",
              "docstring": "Scan root-level files.",
              "line_range": [
                129,
                133
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "_should_scan_file",
              "docstring": "Check if file should be scanned based on extension.",
              "line_range": [
                135,
                137
              ],
              "parameters": [
                "self",
                "file_path",
                "allowed_types"
              ]
            },
            {
              "name": "_scan_file",
              "docstring": "Scan individual file for project items.",
              "line_range": [
                139,
                152
              ],
              "parameters": [
                "self",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_text",
              "docstring": "Extract items from text/markdown files.",
              "line_range": [
                154,
                206
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_json",
              "docstring": "Extract items from JSON files.",
              "line_range": [
                208,
                225
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_item_from_match",
              "docstring": "Create ProjectItem from regex match.",
              "line_range": [
                227,
                249
              ],
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_checkbox_item",
              "docstring": "Create ProjectItem from checkbox match.",
              "line_range": [
                251,
                274
              ],
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_simple_item",
              "docstring": "Create simple ProjectItem.",
              "line_range": [
                276,
                297
              ],
              "parameters": [
                "self",
                "title",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority",
                "position"
              ]
            },
            {
              "name": "_detect_status",
              "docstring": "Detect item status from surrounding content.",
              "line_range": [
                299,
                308
              ],
              "parameters": [
                "self",
                "content",
                "position"
              ]
            },
            {
              "name": "_detect_priority",
              "docstring": "Detect item priority from surrounding content.",
              "line_range": [
                310,
                319
              ],
              "parameters": [
                "self",
                "content",
                "position",
                "default"
              ]
            },
            {
              "name": "_assess_strategic_value",
              "docstring": "Assess strategic value of item.",
              "line_range": [
                321,
                330
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract context around position.",
              "line_range": [
                332,
                336
              ],
              "parameters": [
                "self",
                "content",
                "position",
                "length"
              ]
            },
            {
              "name": "_detect_category",
              "docstring": "Detect item category.",
              "line_range": [
                338,
                351
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_estimate_effort",
              "docstring": "Estimate effort required.",
              "line_range": [
                353,
                362
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_tags",
              "docstring": "Extract relevant tags.",
              "line_range": [
                364,
                378
              ],
              "parameters": [
                "self",
                "title",
                "content",
                "source_dir"
              ]
            },
            {
              "name": "_is_noise_checkbox",
              "docstring": "Check if checkbox is noise (navigation, etc).",
              "line_range": [
                380,
                384
              ],
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "_parse_json_files",
              "docstring": "Parse structured JSON files for existing data.",
              "line_range": [
                386,
                402
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_process_structured_json",
              "docstring": "Process structured JSON data.",
              "line_range": [
                404,
                419
              ],
              "parameters": [
                "self",
                "data",
                "file_path"
              ]
            },
            {
              "name": "_add_json_item",
              "docstring": "Add item from JSON structure.",
              "line_range": [
                421,
                441
              ],
              "parameters": [
                "self",
                "item",
                "file_path",
                "item_type"
              ]
            },
            {
              "name": "_assess_json_strategic_value",
              "docstring": "Assess strategic value from JSON item.",
              "line_range": [
                443,
                450
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_extract_innovation_concepts",
              "docstring": "Extract innovation concepts from content.",
              "line_range": [
                452,
                482
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_enhance_items",
              "docstring": "Post-process items to enhance metadata and find relationships.",
              "line_range": [
                484,
                501
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_find_related_items",
              "docstring": "Find related items based on content similarity.",
              "line_range": [
                503,
                517
              ],
              "parameters": [
                "self",
                "item",
                "id_map",
                "title_map"
              ]
            },
            {
              "name": "generate_comprehensive_report",
              "docstring": "Generate comprehensive analysis report.",
              "line_range": [
                519,
                561
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_comprehensive_index",
              "docstring": "Save comprehensive index and reports.",
              "line_range": [
                563,
                582
              ],
              "parameters": [
                "self",
                "output_dir"
              ]
            },
            {
              "name": "_generate_analysis_report",
              "docstring": "Generate human-readable analysis report.",
              "line_range": [
                584,
                658
              ],
              "parameters": [
                "self",
                "report"
              ]
            },
            {
              "name": "_format_dict",
              "docstring": "Format dictionary for markdown display.",
              "line_range": [
                660,
                662
              ],
              "parameters": [
                "self",
                "d"
              ]
            },
            {
              "name": "_format_items_list",
              "docstring": "Format items list for markdown display.",
              "line_range": [
                664,
                677
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "_extract_json_tasks",
              "docstring": "Extract tasks from JSON tasks array.",
              "line_range": [
                679,
                684
              ],
              "parameters": [
                "self",
                "tasks_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_ideas",
              "docstring": "Extract ideas from JSON ideas array.",
              "line_range": [
                686,
                691
              ],
              "parameters": [
                "self",
                "ideas_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_sessions",
              "docstring": "Extract sessions from JSON sessions array.",
              "line_range": [
                693,
                698
              ],
              "parameters": [
                "self",
                "sessions_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_array",
              "docstring": "Extract items from JSON array.",
              "line_range": [
                700,
                711
              ],
              "parameters": [
                "self",
                "array_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._init_patterns",
          "Path"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "scan_all_directories": [
          "len",
          "self._parse_json_files",
          "self._scan_root_files",
          "logger.info",
          "self._enhance_items",
          "self._scan_directory"
        ],
        "_scan_directory": [
          "dir_path.exists",
          "self._should_scan_file",
          "logger.info",
          "self._scan_file",
          "file_path.is_file",
          "dir_path.glob",
          "logger.warning"
        ],
        "_scan_root_files": [
          "self._should_scan_file",
          "self._scan_file",
          "file_path.is_file"
        ],
        "_should_scan_file": [],
        "_scan_file": [
          "f.read",
          "logger.error",
          "self._extract_from_text",
          "open",
          "self._extract_from_json"
        ],
        "_extract_from_text": [
          "match.start",
          "self._create_simple_item",
          "self._create_item_from_match",
          "self._is_noise_checkbox",
          "self._extract_innovation_concepts",
          "match.group",
          "self._create_checkbox_item"
        ],
        "_extract_from_json": [
          "json.loads",
          "isinstance",
          "self._extract_json_array",
          "self._extract_json_sessions",
          "self._extract_json_tasks",
          "self._extract_json_ideas",
          "logger.warning"
        ],
        "_create_item_from_match": [
          "match.start",
          "str",
          "self._assess_strategic_value",
          "self._estimate_effort",
          "self._detect_category",
          "self._extract_tags",
          "title.strip",
          "self._detect_priority",
          "self._detect_status",
          "ProjectItem",
          "match.group",
          "datetime.now",
          "self._extract_context"
        ],
        "_create_checkbox_item": [
          "match.start",
          "str",
          "self._assess_strategic_value",
          "self._estimate_effort",
          "self._detect_category",
          "self._extract_tags",
          "self._detect_priority",
          "ProjectItem",
          "match.group",
          "datetime.now",
          "self._extract_context"
        ],
        "_create_simple_item": [
          "str",
          "title.strip",
          "ProjectItem",
          "datetime.now",
          "self._extract_context"
        ],
        "_detect_status": [
          "max"
        ],
        "_detect_priority": [
          "max"
        ],
        "_assess_strategic_value": [],
        "_extract_context": [
          "len",
          "max",
          "min"
        ],
        "_detect_category": [
          "title.lower",
          "any"
        ],
        "_estimate_effort": [
          "any"
        ],
        "_extract_tags": [
          "tags.append",
          "title.lower",
          "source_dir.replace"
        ],
        "_is_noise_checkbox": [
          "text.lower",
          "len",
          "text.strip",
          "any"
        ],
        "_parse_json_files": [
          "file_path.exists",
          "logger.error",
          "json.load",
          "open",
          "self._process_structured_json"
        ],
        "_process_structured_json": [
          "isinstance",
          "self._add_json_item"
        ],
        "_add_json_item": [
          "len",
          "str",
          "self._assess_json_strategic_value",
          "item.get",
          "ProjectItem",
          "datetime.now"
        ],
        "_assess_json_strategic_value": [
          "item.get"
        ],
        "_extract_innovation_concepts": [
          "content.find",
          "len",
          "str",
          "datetime.now",
          "line.strip",
          "content.split",
          "innovation_lines.append",
          "ProjectItem",
          "source_dir.replace",
          "enumerate",
          "self._extract_context"
        ],
        "_enhance_items": [
          "re.sub",
          "self._find_related_items",
          "logger.info"
        ],
        "_find_related_items": [
          "related.append",
          "ref_type.upper",
          "re.findall"
        ],
        "generate_comprehensive_report": [
          "len",
          "by_strategic_value.get",
          "by_status.get",
          "by_source.get",
          "by_type.get",
          "asdict",
          "by_priority.get",
          "datetime.now"
        ],
        "save_comprehensive_index": [
          "len",
          "f.write",
          "self.generate_comprehensive_report",
          "open",
          "self._generate_analysis_report",
          "os.makedirs",
          "json.dump",
          "logger.info"
        ],
        "_generate_analysis_report": [
          "len",
          "self._format_dict",
          "self._format_items_list"
        ],
        "_format_dict": [
          "sorted",
          "d.items"
        ],
        "_format_items_list": [
          "result.append"
        ],
        "_extract_json_tasks": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_ideas": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_sessions": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_array": [
          "isinstance",
          "str",
          "self._add_json_item"
        ],
        "main": [
          "len",
          "indexer.save_comprehensive_index",
          "by_strategic.get",
          "logger.info",
          "ComprehensiveIndexer",
          "print",
          "indexer.scan_all_directories"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": "3de71f291650a50e7e3c04fc660a7c31d909a1f929d375ec5324f909c0a81c97",
      "artifact_id": "698116ae-0951-4171-b05c-6de728efeeb4"
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "module_doc": "JSON Validation Script\nValidates JSON files against their respective schemas.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            13,
            23
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate a JSON file against a schema.",
          "line_range": [
            26,
            49
          ],
          "parameters": [
            "file_path",
            "schema_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "json.load",
          "open",
          "print"
        ],
        "validate_json": [
          "str",
          "validator.validate",
          "load_json",
          "Draft7Validator",
          "print",
          "Path"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "pathlib",
        "sys",
        "validate"
      ],
      "hash": "0d360b788079e8804f864e0cef5eb33006fb4dbae00eaaea95ef0d692e79640d",
      "artifact_id": "84ad3a86-76a2-4ef3-8261-3aef71275d62"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": [
            11,
            43
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            46,
            47
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "logger.error",
          "json.load",
          "json.dump",
          "Path",
          "idea.get",
          "logger.info",
          "broken_links.append",
          "logger.warning",
          "target_file.exists",
          "enumerate",
          "source_file.exists"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": "6c57e53f4e4e0afdb8e8c78f1e6d38f284721f6729a7197ff483ed29f5363607",
      "artifact_id": "dd785f71-a1ea-4ae8-be84-5177e73c5da7"
    },
    {
      "module_id": "scripts.create_tasks_index",
      "path": "scripts/create_tasks_index.py",
      "category": "core",
      "module_doc": "Tasks Index Creator\nScans all documentation files and creates comprehensive index of tasks, EPICs, TODOs, and other actionable items.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            469,
            515
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            42,
            44
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize regex patterns for task extraction.",
          "line_range": [
            46,
            73
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "extract_from_markdown",
          "docstring": "Extract tasks from markdown file.",
          "line_range": [
            75,
            107
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_status",
          "docstring": "Extract document status.",
          "line_range": [
            109,
            120
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_priority",
          "docstring": "Extract document priority.",
          "line_range": [
            122,
            135
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_date",
          "docstring": "Extract document date.",
          "line_range": [
            137,
            142
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_epics",
          "docstring": "Extract EPIC items.",
          "line_range": [
            144,
            168
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tasks",
          "docstring": "Extract explicit task items.",
          "line_range": [
            170,
            194
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_todos",
          "docstring": "Extract TODO items.",
          "line_range": [
            196,
            219
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_phases",
          "docstring": "Extract phase/step items.",
          "line_range": [
            221,
            245
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_checkboxes",
          "docstring": "Extract checkbox items as tasks.",
          "line_range": [
            247,
            275
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract surrounding context for a match.",
          "line_range": [
            277,
            286
          ],
          "parameters": [
            "self",
            "content",
            "start",
            "end",
            "context_lines"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            292,
            294
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_documentation",
          "docstring": "Scan all documentation files for tasks.",
          "line_range": [
            296,
            314
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_index",
          "docstring": "Generate comprehensive task index.",
          "line_range": [
            316,
            367
          ],
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "generate_summary_report",
          "docstring": "Generate human-readable summary report.",
          "line_range": [
            369,
            446
          ],
          "parameters": [
            "self",
            "index"
          ],
          "decorators": []
        },
        {
          "name": "save_index",
          "docstring": "Save index and summary to files.",
          "line_range": [
            448,
            466
          ],
          "parameters": [
            "self",
            "index",
            "summary",
            "output_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Task",
          "docstring": "Represents a single task or actionable item.",
          "line_range": [
            21,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "TaskExtractor",
          "docstring": "Extract tasks from various document formats.",
          "line_range": [
            39,
            286
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                42,
                44
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize regex patterns for task extraction.",
              "line_range": [
                46,
                73
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "extract_from_markdown",
              "docstring": "Extract tasks from markdown file.",
              "line_range": [
                75,
                107
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_status",
              "docstring": "Extract document status.",
              "line_range": [
                109,
                120
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_priority",
              "docstring": "Extract document priority.",
              "line_range": [
                122,
                135
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_date",
              "docstring": "Extract document date.",
              "line_range": [
                137,
                142
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_epics",
              "docstring": "Extract EPIC items.",
              "line_range": [
                144,
                168
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_tasks",
              "docstring": "Extract explicit task items.",
              "line_range": [
                170,
                194
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_todos",
              "docstring": "Extract TODO items.",
              "line_range": [
                196,
                219
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_phases",
              "docstring": "Extract phase/step items.",
              "line_range": [
                221,
                245
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_checkboxes",
              "docstring": "Extract checkbox items as tasks.",
              "line_range": [
                247,
                275
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract surrounding context for a match.",
              "line_range": [
                277,
                286
              ],
              "parameters": [
                "self",
                "content",
                "start",
                "end",
                "context_lines"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TaskIndexGenerator",
          "docstring": "Generate comprehensive task index.",
          "line_range": [
            289,
            466
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                292,
                294
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_documentation",
              "docstring": "Scan all documentation files for tasks.",
              "line_range": [
                296,
                314
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_index",
              "docstring": "Generate comprehensive task index.",
              "line_range": [
                316,
                367
              ],
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "generate_summary_report",
              "docstring": "Generate human-readable summary report.",
              "line_range": [
                369,
                446
              ],
              "parameters": [
                "self",
                "index"
              ]
            },
            {
              "name": "save_index",
              "docstring": "Save index and summary to files.",
              "line_range": [
                448,
                466
              ],
              "parameters": [
                "self",
                "index",
                "summary",
                "output_dir"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "TaskExtractor",
          "Path"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "extract_from_markdown": [
          "f.read",
          "self._extract_status",
          "tasks.extend",
          "self._extract_date",
          "logger.error",
          "self._extract_priority",
          "open",
          "self._extract_todos",
          "self._extract_tasks",
          "self._extract_checkboxes",
          "self._extract_epics",
          "self._extract_phases"
        ],
        "_extract_status": [
          "match.group"
        ],
        "_extract_priority": [
          "match.group"
        ],
        "_extract_date": [
          "match.group",
          "datetime.now"
        ],
        "_extract_epics": [
          "match.start",
          "str",
          "Task",
          "match.end",
          "match.group",
          "tasks.append",
          "self._extract_context"
        ],
        "_extract_tasks": [
          "match.start",
          "str",
          "Task",
          "match.end",
          "match.group",
          "tasks.append",
          "self._extract_context"
        ],
        "_extract_todos": [
          "match.start",
          "str",
          "Task",
          "match.group",
          "tasks.append"
        ],
        "_extract_phases": [
          "match.start",
          "str",
          "Task",
          "match.end",
          "match.group",
          "tasks.append",
          "self._extract_context"
        ],
        "_extract_checkboxes": [
          "match.start",
          "str",
          "Task",
          "any",
          "task_title.upper",
          "match.group",
          "tasks.append"
        ],
        "_extract_context": [
          "len",
          "min",
          "context.strip",
          "max",
          "content.split"
        ],
        "scan_documentation": [
          "docs_dir.exists",
          "all_tasks.extend",
          "logger.info",
          "docs_dir.glob"
        ],
        "generate_index": [
          "by_status.items",
          "len",
          "by_file.items",
          "by_category.items",
          "asdict",
          "datetime.now",
          "by_priority.items"
        ],
        "generate_summary_report": [
          "len",
          "file_categories.items",
          "category.upper",
          "priority.upper",
          "sorted",
          "status.upper",
          "Path"
        ],
        "save_index": [
          "f.write",
          "open",
          "json.dump",
          "logger.info",
          "output_path.mkdir",
          "Path"
        ],
        "main": [
          "by_status.items",
          "generator.scan_documentation",
          "len",
          "by_category.get",
          "by_status.get",
          "generator.save_index",
          "generator.generate_summary_report",
          "logger.info",
          "generator.generate_index",
          "parser.add_argument",
          "TaskIndexGenerator",
          "by_category.items",
          "print",
          "argparse.ArgumentParser",
          "sorted",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": "8dc454229e01725267e1ece8a1363faf1501013df5f34f371865de1d1d386035",
      "artifact_id": "4ec455a9-a555-45f9-91aa-d0060bbf71c3"
    },
    {
      "module_id": "scripts.github_sync_manager_enhanced",
      "path": "scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "module_doc": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout\n\u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442: processing results + GitHub API + token management + CLI fallback",
      "functions": [
        {
          "name": "print_info",
          "docstring": "",
          "line_range": [
            25,
            26
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_success",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_warning",
          "docstring": "",
          "line_range": [
            31,
            32
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_error",
          "docstring": "",
          "line_range": [
            34,
            35
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_step",
          "docstring": "",
          "line_range": [
            37,
            38
          ],
          "parameters": [
            "step",
            "total",
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Enhanced CLI interface",
          "line_range": [
            620,
            655
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            43,
            44
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            46,
            57
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_github_token",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
          "line_range": [
            59,
            73
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "check_gh_cli",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
          "line_range": [
            75,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_token_from_gh_cli",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
          "line_range": [
            84,
            93
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_github_token",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
          "line_range": [
            95,
            117
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            122,
            164
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "detect_repo_from_git",
          "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
          "line_range": [
            166,
            198
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results",
          "line_range": [
            200,
            211
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log",
          "line_range": [
            213,
            216
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Enhanced API request with CLI fallback",
          "line_range": [
            218,
            231
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_direct",
          "docstring": "Direct API request",
          "line_range": [
            233,
            261
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_via_cli",
          "docstring": "API request via GitHub CLI",
          "line_range": [
            263,
            293
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue_enhanced",
          "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
          "line_range": [
            295,
            359
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_acceptance_criteria",
          "docstring": "Format acceptance criteria from item metadata",
          "line_range": [
            361,
            380
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_implementation_notes",
          "docstring": "Format implementation notes",
          "line_range": [
            382,
            397
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Enhanced validation",
          "line_range": [
            399,
            434
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_enhanced_sync",
          "docstring": "Enhanced sync with full project rollout integration",
          "line_range": [
            436,
            494
          ],
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        },
        {
          "name": "sync_category_enhanced",
          "docstring": "Enhanced category sync",
          "line_range": [
            496,
            554
          ],
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced",
          "line_range": [
            556,
            560
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic_enhanced",
          "docstring": "Enhanced epic creation",
          "line_range": [
            562,
            607
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion_enhanced",
          "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
          "line_range": [
            609,
            618
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            18,
            23
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "GitHubTokenManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 GitHub \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 (\u0438\u0437 setup_github_token.sh)",
          "line_range": [
            40,
            117
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                43,
                44
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_env_file",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                46,
                57
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_github_token",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
              "line_range": [
                59,
                73
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "check_gh_cli",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
              "line_range": [
                75,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_token_from_gh_cli",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
              "line_range": [
                84,
                93
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_github_token",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
              "line_range": [
                95,
                117
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "EnhancedGitHubSyncManager",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 GitHub Sync Manager \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0432\u0441\u0435\u0445 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a",
          "line_range": [
            119,
            618
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                122,
                164
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "detect_repo_from_git",
              "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
              "line_range": [
                166,
                198
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results",
              "line_range": [
                200,
                211
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log",
              "line_range": [
                213,
                216
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Enhanced API request with CLI fallback",
              "line_range": [
                218,
                231
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_direct",
              "docstring": "Direct API request",
              "line_range": [
                233,
                261
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_via_cli",
              "docstring": "API request via GitHub CLI",
              "line_range": [
                263,
                293
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "create_github_issue_enhanced",
              "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
              "line_range": [
                295,
                359
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_acceptance_criteria",
              "docstring": "Format acceptance criteria from item metadata",
              "line_range": [
                361,
                380
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_implementation_notes",
              "docstring": "Format implementation notes",
              "line_range": [
                382,
                397
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Enhanced validation",
              "line_range": [
                399,
                434
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_enhanced_sync",
              "docstring": "Enhanced sync with full project rollout integration",
              "line_range": [
                436,
                494
              ],
              "parameters": [
                "self",
                "categories"
              ]
            },
            {
              "name": "sync_category_enhanced",
              "docstring": "Enhanced category sync",
              "line_range": [
                496,
                554
              ],
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced",
              "line_range": [
                556,
                560
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "create_github_epic_enhanced",
              "docstring": "Enhanced epic creation",
              "line_range": [
                562,
                607
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion_enhanced",
              "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
              "line_range": [
                609,
                618
              ],
              "parameters": [
                "self",
                "item"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "print_info": [
          "print"
        ],
        "print_success": [
          "print"
        ],
        "print_warning": [
          "print"
        ],
        "print_error": [
          "print"
        ],
        "print_step": [
          "print"
        ],
        "__init__": [
          "self.detect_repo_from_git",
          "GitHubTokenManager",
          "print_info",
          "self.load_sync_log",
          "Path"
        ],
        "load_env_file": [
          "key.strip",
          "env_file.exists",
          "line.split",
          "line.strip",
          "open",
          "value.strip",
          "line.startswith",
          "Path"
        ],
        "test_github_token": [
          "response.json",
          "requests.get"
        ],
        "check_gh_cli": [
          "subprocess.run"
        ],
        "get_token_from_gh_cli": [
          "subprocess.run"
        ],
        "get_github_token": [
          "print_warning",
          "self.get_token_from_gh_cli",
          "self.check_gh_cli",
          "os.getenv",
          "self.test_github_token"
        ],
        "detect_repo_from_git": [
          "len",
          "url.startswith",
          "print_warning",
          "print_info",
          "subprocess.run",
          "url.split",
          "url.endswith",
          "url.replace",
          "path.split"
        ],
        "load_sync_log": [
          "json.load",
          "open"
        ],
        "save_sync_log": [
          "open",
          "json.dump"
        ],
        "api_request": [
          "self._api_request_direct",
          "print_error",
          "time.sleep",
          "self._api_request_via_cli"
        ],
        "_api_request_direct": [
          "requests.patch",
          "ValueError",
          "print_warning",
          "requests.post",
          "method.upper",
          "requests.get",
          "int",
          "response.raise_for_status",
          "print_error",
          "response.json"
        ],
        "_api_request_via_cli": [
          "json.loads",
          "print_warning",
          "cmd.extend",
          "json.dumps",
          "method.upper",
          "subprocess.run",
          "print_error"
        ],
        "create_github_issue_enhanced": [
          "labels.append",
          "processing_meta.get",
          "self._format_implementation_notes",
          "print_info",
          "print_success",
          "item.get",
          "self._format_acceptance_criteria",
          "self.api_request"
        ],
        "_format_acceptance_criteria": [
          "criteria.extend",
          "criteria.append",
          "item.get"
        ],
        "_format_implementation_notes": [
          "notes.append",
          "processing_meta.get",
          "item.get"
        ],
        "validate_before_sync": [
          "file_path.exists",
          "print_success",
          "print_error",
          "print_step",
          "repo_info.get",
          "user_info.get",
          "self.api_request"
        ],
        "run_enhanced_sync": [
          "datetime.now",
          "self.save_sync_log",
          "result.get",
          "print_info",
          "self.validate_before_sync",
          "self.sync_category_enhanced",
          "print_success",
          "print_step",
          "print",
          "enumerate"
        ],
        "sync_category_enhanced": [
          "file_path.exists",
          "print_warning",
          "json.load",
          "open",
          "data.get",
          "self.create_github_issue_enhanced",
          "self.create_github_discussion_enhanced",
          "print_info",
          "result.get",
          "self.create_github_epic_enhanced",
          "print_error",
          "item.get",
          "self.item_already_synced",
          "datetime.now"
        ],
        "item_already_synced": [
          "item.get"
        ],
        "create_github_epic_enhanced": [
          "print_success",
          "self.api_request",
          "print_info",
          "item.get"
        ],
        "create_github_discussion_enhanced": [
          "print_info",
          "print_warning",
          "item.get"
        ],
        "main": [
          "len",
          "manager.run_enhanced_sync",
          "result.get",
          "parser.add_argument",
          "print_success",
          "EnhancedGitHubSyncManager",
          "print_error",
          "argparse.ArgumentParser",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "time",
        "typing"
      ],
      "hash": "dee5ab49d5c48115c3b9b6df054a1160c44fb7addfa035958aa7db8619301d96",
      "artifact_id": "7271a5cd-1f40-48fc-a984-8c863e8772e5"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": [
            13,
            29
          ],
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": [
            32,
            38
          ],
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": [
            41,
            88
          ],
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            91,
            92
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "fnmatch.fnmatch",
          "pattern.startswith",
          "filtered.append"
        ],
        "collect_files": [
          "str",
          "files.append",
          "apply_filters",
          "path.relative_to",
          "root_dir.rglob",
          "path.is_file"
        ],
        "generate_struct": [
          "existing.get",
          "str",
          "len",
          "json.load",
          "json.dump",
          "Path",
          "logger.info",
          "uuid.uuid4",
          "output_path.open",
          "collect_files",
          "output_path.exists"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": "251462380e2e135880f652ce7d9e6a1483d18a1202c336f76ac3f43536505049",
      "artifact_id": "fad4a7d0-08a6-4d1a-ab5f-cee89aab5537"
    },
    {
      "module_id": "scripts.validate_epics",
      "path": "scripts/validate_epics.py",
      "category": "core",
      "module_doc": "Epic Data Validator\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c GitHub issues",
      "functions": [
        {
          "name": "validate_epic_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            12,
            35
          ],
          "parameters": [
            "epic"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "task",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "validate_priorities",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u0432",
          "line_range": [
            55,
            68
          ],
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_ids",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c ID \u0437\u0430\u0434\u0430\u0447",
          "line_range": [
            70,
            82
          ],
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438",
          "line_range": [
            84,
            131
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_epic_structure": [
          "isinstance",
          "errors.append"
        ],
        "validate_task_structure": [
          "isinstance",
          "errors.append",
          "task.get"
        ],
        "validate_priorities": [
          "epic.get",
          "data.get",
          "errors.append",
          "task.get"
        ],
        "validate_task_ids": [
          "epic.get",
          "data.get",
          "errors.append",
          "task.get",
          "set",
          "seen_ids.add"
        ],
        "main": [
          "isinstance",
          "all_errors.extend",
          "all_errors.append",
          "validate_task_structure",
          "len",
          "sum",
          "validate_priorities",
          "json.load",
          "open",
          "epic.get",
          "e.get",
          "print",
          "validate_task_ids",
          "validate_epic_structure",
          "epics_file.exists",
          "sys.exit",
          "Path"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "pathlib",
        "sys",
        "typing"
      ],
      "hash": "43fb177eab31592c2b7c17c990f728cb1401eeba26a2e3191857ca218208a3df",
      "artifact_id": "4ce82390-81e5-4080-a5f9-99b169cf7b42"
    },
    {
      "module_id": "scripts.epic_roadmap_manager",
      "path": "scripts/epic_roadmap_manager.py",
      "category": "core",
      "module_doc": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u0438:\n- \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 roadmap \u0438 \u043f\u043b\u0430\u043d\u043e\u0432\n- \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439\n- \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441 GitHub epics\n- \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u0432",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            259,
            291
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            19,
            22
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_roadmap",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            24,
            31
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_roadmap",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "self",
            "roadmap"
          ],
          "decorators": []
        },
        {
          "name": "show_overview",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
          "line_range": [
            42,
            80
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "show_epic_details",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            82,
            125
          ],
          "parameters": [
            "self",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
          "line_range": [
            127,
            189
          ],
          "parameters": [
            "self",
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "complete_session",
          "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            191,
            257
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EpicRoadmapManager",
          "docstring": "",
          "line_range": [
            18,
            257
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                19,
                22
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_roadmap",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                24,
                31
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_roadmap",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
              "line_range": [
                33,
                40
              ],
              "parameters": [
                "self",
                "roadmap"
              ]
            },
            {
              "name": "show_overview",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
              "line_range": [
                42,
                80
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "show_epic_details",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
              "line_range": [
                82,
                125
              ],
              "parameters": [
                "self",
                "epic_id"
              ]
            },
            {
              "name": "start_session",
              "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
              "line_range": [
                127,
                189
              ],
              "parameters": [
                "self",
                "epic_id",
                "session_id"
              ]
            },
            {
              "name": "complete_session",
              "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                191,
                257
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "load_roadmap": [
          "json.load",
          "open",
          "print"
        ],
        "save_roadmap": [
          "open",
          "print",
          "json.dump",
          "datetime.now"
        ],
        "show_overview": [
          "epics.items",
          "epic.get",
          "roadmap.get",
          "self.load_roadmap",
          "print",
          "stats.get"
        ],
        "show_epic_details": [
          "len",
          "epic_data.get",
          "epic.get",
          "roadmap.get",
          "self.load_roadmap",
          "session.get",
          "print"
        ],
        "start_session": [
          "datetime.now",
          "epic_data.get",
          "epic.get",
          "roadmap.get",
          "self.save_roadmap",
          "os.makedirs",
          "open",
          "json.dump",
          "self.load_roadmap",
          "session.get",
          "print",
          "sess.get"
        ],
        "complete_session": [
          "sess.get",
          "all",
          "json.load",
          "open",
          "roadmap.get",
          "epic.get",
          "self.save_roadmap",
          "os.makedirs",
          "json.dump",
          "self.load_roadmap",
          "sessions_log.append",
          "session.get",
          "current_session.get",
          "print",
          "datetime.now",
          "os.remove"
        ],
        "main": [
          "manager.show_overview",
          "manager.complete_session",
          "manager.show_epic_details",
          "EpicRoadmapManager",
          "parser.add_argument",
          "print",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "manager.start_session"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib"
      ],
      "hash": "5125fc24bf131dbbbda814a26f75ecff0e8d6cebde166de88b637ee22ac7251e",
      "artifact_id": "aaa2f572-6f1b-408a-8bf3-bed9ef8ba810"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": [
            931,
            941
          ],
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": [
            944,
            950
          ],
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": [
            953,
            1007
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            1010,
            1011
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "validate",
          "logger.warning",
          "RefResolver",
          "logger.error"
        ],
        "backup_files": [
          "target_dir.exists",
          "datetime.now",
          "logger.info",
          "shutil.copytree"
        ],
        "deploy_embedded_files": [
          "EMBEDDED_FILES.get",
          "f.write",
          "logger.error",
          "target_path.open",
          "backup_files",
          "json.dump",
          "validate_json",
          "logger.info",
          "logger.warning",
          "Path.cwd",
          "target_path.exists",
          "Path"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": "965c984b688301f0d0c65fc65cc8c95a878218aec94afab5dca3b3c7f65cea19",
      "artifact_id": "b7d3cb7c-cbfa-43ff-b1da-20abcfef0c9c"
    },
    {
      "module_id": "scripts.team.__init__",
      "path": "scripts/team/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "artifact_id": "5178b495-6c1c-4989-ab91-baf85a8674c9"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "6c8a89ead1428796572a096daee1e9d2f972387a1556136e12c69e87350564d8",
      "artifact_id": "110c232a-671f-43a8-b86f-7c0ab55989d0"
    },
    {
      "module_id": "temp_personal_analysis.personal.boss.scripts.business_planning",
      "path": "temp_personal_analysis/personal/boss/scripts/business_planning.py",
      "category": "core",
      "module_doc": "Business Planning Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
      "functions": [
        {
          "name": "create_business_planning_manager",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
          "line_range": [
            216,
            218
          ],
          "parameters": [
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
          "line_range": [
            20,
            27
          ],
          "parameters": [
            "self",
            "boss_data_dir"
          ],
          "decorators": []
        },
        {
          "name": "create_business_roadmap",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.",
          "line_range": [
            29,
            55
          ],
          "parameters": [
            "self",
            "roadmap_data"
          ],
          "decorators": []
        },
        {
          "name": "create_financial_plan",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "plan_data"
          ],
          "decorators": []
        },
        {
          "name": "record_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.",
          "line_range": [
            84,
            116
          ],
          "parameters": [
            "self",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_business_metrics",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            118,
            154
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_business_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.",
          "line_range": [
            156,
            193
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
          "line_range": [
            195,
            204
          ],
          "parameters": [
            "self",
            "file_path",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
          "line_range": [
            206,
            213
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BusinessPlanningManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439.",
          "line_range": [
            17,
            213
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
              "line_range": [
                20,
                27
              ],
              "parameters": [
                "self",
                "boss_data_dir"
              ]
            },
            {
              "name": "create_business_roadmap",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.",
              "line_range": [
                29,
                55
              ],
              "parameters": [
                "self",
                "roadmap_data"
              ]
            },
            {
              "name": "create_financial_plan",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "plan_data"
              ]
            },
            {
              "name": "record_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.",
              "line_range": [
                84,
                116
              ],
              "parameters": [
                "self",
                "decision_data"
              ]
            },
            {
              "name": "analyze_business_metrics",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                118,
                154
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_business_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.",
              "line_range": [
                156,
                193
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
              "line_range": [
                195,
                204
              ],
              "parameters": [
                "self",
                "file_path",
                "default"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
              "line_range": [
                206,
                213
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "create_business_roadmap": [
          "self._save_data",
          "datetime.now",
          "logger.error",
          "logger.info"
        ],
        "create_financial_plan": [
          "self._save_data",
          "datetime.now",
          "logger.error",
          "logger.info"
        ],
        "record_strategic_decision": [
          "isinstance",
          "self._save_data",
          "logger.error",
          "logger.info",
          "decisions.append",
          "decision_data.get",
          "datetime.now",
          "self._load_data"
        ],
        "analyze_business_metrics": [
          "isinstance",
          "len",
          "logger.error",
          "datetime.now",
          "self._load_data"
        ],
        "get_business_summary": [
          "isinstance",
          "len",
          "bool",
          "logger.error",
          "roadmap.get",
          "financial.get",
          "datetime.now",
          "self._load_data"
        ],
        "_load_data": [
          "json.load",
          "file_path.open",
          "file_path.exists",
          "logger.error"
        ],
        "_save_data": [
          "file_path.open",
          "logger.error",
          "json.dump"
        ],
        "create_business_planning_manager": [
          "BusinessPlanningManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "timedelta",
        "typing"
      ],
      "hash": "0e53b669d4dfd9dc8ded438d877dde9176406ff0392f4b0129041ec3e70ed538",
      "artifact_id": "6d95daf7-3e55-4937-9681-706c08aa980d"
    },
    {
      "module_id": "temp_personal_analysis.personal.boss.scripts.team_management",
      "path": "temp_personal_analysis/personal/boss/scripts/team_management.py",
      "category": "core",
      "module_doc": "Team Management Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439, \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
      "functions": [
        {
          "name": "create_team_management_system",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            291,
            293
          ],
          "parameters": [
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            20,
            27
          ],
          "parameters": [
            "self",
            "boss_data_dir"
          ],
          "decorators": []
        },
        {
          "name": "create_team_strategy",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            29,
            54
          ],
          "parameters": [
            "self",
            "strategy_data"
          ],
          "decorators": []
        },
        {
          "name": "record_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            56,
            88
          ],
          "parameters": [
            "self",
            "evaluation_data"
          ],
          "decorators": []
        },
        {
          "name": "create_hiring_plan",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            90,
            115
          ],
          "parameters": [
            "self",
            "plan_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_team_performance",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            117,
            156
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_team_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            158,
            195
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_team_report",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            197,
            226
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_strategy",
          "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.",
          "line_range": [
            228,
            238
          ],
          "parameters": [
            "self",
            "strategy"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_evaluations",
          "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.",
          "line_range": [
            240,
            250
          ],
          "parameters": [
            "self",
            "evaluations"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.",
          "line_range": [
            252,
            268
          ],
          "parameters": [
            "self",
            "strategy",
            "evaluations"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
          "line_range": [
            270,
            279
          ],
          "parameters": [
            "self",
            "file_path",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
          "line_range": [
            281,
            288
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TeamManagementSystem",
          "docstring": "\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438.",
          "line_range": [
            17,
            288
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
              "line_range": [
                20,
                27
              ],
              "parameters": [
                "self",
                "boss_data_dir"
              ]
            },
            {
              "name": "create_team_strategy",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
              "line_range": [
                29,
                54
              ],
              "parameters": [
                "self",
                "strategy_data"
              ]
            },
            {
              "name": "record_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                56,
                88
              ],
              "parameters": [
                "self",
                "evaluation_data"
              ]
            },
            {
              "name": "create_hiring_plan",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                90,
                115
              ],
              "parameters": [
                "self",
                "plan_data"
              ]
            },
            {
              "name": "analyze_team_performance",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                117,
                156
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_team_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                158,
                195
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_team_report",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                197,
                226
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_summarize_strategy",
              "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.",
              "line_range": [
                228,
                238
              ],
              "parameters": [
                "self",
                "strategy"
              ]
            },
            {
              "name": "_summarize_evaluations",
              "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.",
              "line_range": [
                240,
                250
              ],
              "parameters": [
                "self",
                "evaluations"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.",
              "line_range": [
                252,
                268
              ],
              "parameters": [
                "self",
                "strategy",
                "evaluations"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
              "line_range": [
                270,
                279
              ],
              "parameters": [
                "self",
                "file_path",
                "default"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
              "line_range": [
                281,
                288
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "create_team_strategy": [
          "self._save_data",
          "datetime.now",
          "logger.error",
          "logger.info"
        ],
        "record_team_evaluation": [
          "isinstance",
          "self._save_data",
          "logger.error",
          "logger.info",
          "evaluations.append",
          "datetime.now",
          "self._load_data"
        ],
        "create_hiring_plan": [
          "self._save_data",
          "datetime.now",
          "logger.error",
          "logger.info"
        ],
        "analyze_team_performance": [
          "isinstance",
          "len",
          "bool",
          "logger.error",
          "datetime.now",
          "self._load_data"
        ],
        "get_team_summary": [
          "isinstance",
          "len",
          "bool",
          "logger.error",
          "strategy.get",
          "hiring_plans.get",
          "datetime.now",
          "self._load_data"
        ],
        "generate_team_report": [
          "self._summarize_strategy",
          "logger.error",
          "self._summarize_evaluations",
          "self._generate_recommendations",
          "datetime.now",
          "self._load_data"
        ],
        "_summarize_strategy": [
          "strategy.get"
        ],
        "_summarize_evaluations": [
          "isinstance",
          "len"
        ],
        "_generate_recommendations": [
          "len",
          "recommendations.append"
        ],
        "_load_data": [
          "json.load",
          "file_path.open",
          "file_path.exists",
          "logger.error"
        ],
        "_save_data": [
          "file_path.open",
          "logger.error",
          "json.dump"
        ],
        "create_team_management_system": [
          "TeamManagementSystem"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "timedelta",
        "typing"
      ],
      "hash": "3201ea679ec44992fb13752a988c8f8985987a0e3cbeb998e72dbe472221a67e",
      "artifact_id": "8cb33ef9-3032-4756-bbe5-bbad7572cdd5"
    },
    {
      "module_id": "temp_personal_analysis.personal.boss.scripts.boss_cli",
      "path": "temp_personal_analysis/personal/boss/scripts/boss_cli.py",
      "category": "core",
      "module_doc": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u043e\u0434\u0443\u043b\u0438",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f.",
          "line_range": [
            490,
            503
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
          "line_range": [
            42,
            101
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
          "line_range": [
            103,
            126
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            128,
            147
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_status",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.",
          "line_range": [
            150,
            157
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_audit",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.",
          "line_range": [
            159,
            166
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_context",
          "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.",
          "line_range": [
            168,
            175
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_queue",
          "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.",
          "line_range": [
            177,
            184
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_summary",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.",
          "line_range": [
            186,
            193
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_roadmap",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
          "line_range": [
            196,
            221
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_financial_plan",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.",
          "line_range": [
            223,
            256
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
          "line_range": [
            258,
            273
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            275,
            282
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_summary",
          "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
          "line_range": [
            284,
            291
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_strategy",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            294,
            308
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            310,
            326
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_hiring_plan",
          "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            328,
            346
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            348,
            355
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_report",
          "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            357,
            364
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_technical",
          "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
          "line_range": [
            367,
            379
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context_full",
          "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
          "line_range": [
            381,
            384
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace_override",
          "docstring": "Emergency workspace overrides.",
          "line_range": [
            387,
            396
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_capabilities",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
          "line_range": [
            399,
            422
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_boss_status",
          "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
          "line_range": [
            424,
            440
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
          "line_range": [
            442,
            487
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BossCLI",
          "docstring": "Boss CLI - \u043f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f.\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u0444\u0443\u043d\u043a\u0446\u0438\u0438.",
          "line_range": [
            36,
            487
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
              "line_range": [
                42,
                101
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "run_interactive",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
              "line_range": [
                103,
                126
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                128,
                147
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "cmd_ai_status",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.",
              "line_range": [
                150,
                157
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_audit",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.",
              "line_range": [
                159,
                166
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_context",
              "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.",
              "line_range": [
                168,
                175
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_queue",
              "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.",
              "line_range": [
                177,
                184
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_summary",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.",
              "line_range": [
                186,
                193
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_roadmap",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
              "line_range": [
                196,
                221
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_financial_plan",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.",
              "line_range": [
                223,
                256
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
              "line_range": [
                258,
                273
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                275,
                282
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_summary",
              "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
              "line_range": [
                284,
                291
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_strategy",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                294,
                308
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                310,
                326
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_hiring_plan",
              "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                328,
                346
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                348,
                355
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_report",
              "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                357,
                364
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_technical",
              "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
              "line_range": [
                367,
                379
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context_full",
              "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
              "line_range": [
                381,
                384
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace_override",
              "docstring": "Emergency workspace overrides.",
              "line_range": [
                387,
                396
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_capabilities",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
              "line_range": [
                399,
                422
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_boss_status",
              "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
              "line_range": [
                424,
                440
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
              "line_range": [
                442,
                487
              ],
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "AISelfAwarenessCLIIntegration",
          "str",
          "CLIConfig",
          "CLIUtils",
          "BusinessPlanningManager",
          "TeamManagementSystem",
          "CommandProcessor",
          "Path"
        ],
        "run_interactive": [
          "input",
          "print",
          "self.process_command",
          "user_input.lower"
        ],
        "process_command": [
          "len",
          "print",
          "command_line.split",
          "cmd.startswith"
        ],
        "cmd_ai_status": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_audit": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_context": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_queue": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_business_roadmap": [
          "print",
          "json.dumps"
        ],
        "cmd_financial_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_strategic_decision": [
          "print",
          "json.dumps"
        ],
        "cmd_business_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_business_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_team_strategy": [
          "print",
          "json.dumps"
        ],
        "cmd_team_evaluation": [
          "print",
          "json.dumps"
        ],
        "cmd_hiring_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_team_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_team_report": [
          "print",
          "json.dumps"
        ],
        "cmd_technical": [
          "print"
        ],
        "cmd_context_full": [
          "print"
        ],
        "cmd_workspace_override": [
          "print"
        ],
        "cmd_capabilities": [
          "bool",
          "print",
          "json.dumps"
        ],
        "cmd_boss_status": [
          "print",
          "json.dumps"
        ],
        "cmd_help": [
          "print"
        ],
        "main": [
          "BossCLI",
          "parser.add_argument",
          "boss_cli.process_command",
          "argparse.ArgumentParser",
          "boss_cli.run_interactive",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "Any",
        "BusinessPlanningManager",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "Dict",
        "Optional",
        "Path",
        "TeamManagementSystem",
        "argparse",
        "business_planning",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "os",
        "pathlib",
        "sys",
        "team_management",
        "typing"
      ],
      "hash": "fcd9f04d7641d774f0e698d44db67cf7172430d3a3cf4aa2b4cbf3350362b94d",
      "artifact_id": "f0b1c67a-c749-4eed-815d-6234d0e5f8a3"
    },
    {
      "module_id": "temp_personal_analysis.personal.boss.scripts.__init__",
      "path": "temp_personal_analysis/personal/boss/scripts/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "artifact_id": "51178fd9-1b1e-43f7-b965-37c523f0ad6d"
    },
    {
      "module_id": ".personal.boss.scripts.boss_cli",
      "path": ".personal/boss/scripts/boss_cli.py",
      "category": "core",
      "module_doc": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n\u0414\u043e\u0441\u0442\u0443\u043f \u043a\u043e \u0432\u0441\u0435\u043c \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430, \u0432\u043a\u043b\u044e\u0447\u0430\u044f business planning \u0438 team management.",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f.",
          "line_range": [
            493,
            506
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
          "line_range": [
            47,
            95
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
          "line_range": [
            97,
            119
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            121,
            141
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_status",
          "docstring": "\u0421\u0442\u0430\u0442\u0443\u0441 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
          "line_range": [
            144,
            151
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_audit",
          "docstring": "\u0410\u0443\u0434\u0438\u0442 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439.",
          "line_range": [
            153,
            160
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_context",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c.",
          "line_range": [
            162,
            170
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_queue",
          "docstring": "\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 AI \u043e\u0447\u0435\u0440\u0435\u0434\u0438.",
          "line_range": [
            172,
            179
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_summary",
          "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.",
          "line_range": [
            181,
            188
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_roadmap",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
          "line_range": [
            191,
            210
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_financial_plan",
          "docstring": "\u0424\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0435 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.",
          "line_range": [
            212,
            226
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
          "line_range": [
            228,
            242
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            244,
            251
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_summary",
          "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
          "line_range": [
            253,
            260
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_strategy",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            263,
            277
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            279,
            295
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_hiring_plan",
          "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            297,
            315
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            317,
            324
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_report",
          "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            326,
            333
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_technical",
          "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
          "line_range": [
            336,
            348
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context_full",
          "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
          "line_range": [
            350,
            353
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace_override",
          "docstring": "Emergency workspace overrides.",
          "line_range": [
            356,
            365
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_capabilities",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
          "line_range": [
            368,
            391
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_boss_status",
          "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
          "line_range": [
            393,
            409
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
          "line_range": [
            411,
            456
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_init_ai_integration",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.",
          "line_range": [
            458,
            464
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_init_command_processor",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430 \u043a\u043e\u043c\u0430\u043d\u0434.",
          "line_range": [
            466,
            472
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_init_business_manager",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430.",
          "line_range": [
            474,
            481
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_init_team_manager",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            483,
            490
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BossCLI",
          "docstring": "Boss CLI - \u043f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f.\n\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f \u043a\u043e \u0432\u0441\u0435\u043c \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
          "line_range": [
            41,
            490
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
              "line_range": [
                47,
                95
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "run_interactive",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
              "line_range": [
                97,
                119
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                121,
                141
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "cmd_ai_status",
              "docstring": "\u0421\u0442\u0430\u0442\u0443\u0441 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
              "line_range": [
                144,
                151
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_audit",
              "docstring": "\u0410\u0443\u0434\u0438\u0442 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439.",
              "line_range": [
                153,
                160
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_context",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c.",
              "line_range": [
                162,
                170
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_queue",
              "docstring": "\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 AI \u043e\u0447\u0435\u0440\u0435\u0434\u0438.",
              "line_range": [
                172,
                179
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_summary",
              "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.",
              "line_range": [
                181,
                188
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_roadmap",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
              "line_range": [
                191,
                210
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_financial_plan",
              "docstring": "\u0424\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0435 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.",
              "line_range": [
                212,
                226
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
              "line_range": [
                228,
                242
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                244,
                251
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_summary",
              "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
              "line_range": [
                253,
                260
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_strategy",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                263,
                277
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                279,
                295
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_hiring_plan",
              "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                297,
                315
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                317,
                324
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_report",
              "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                326,
                333
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_technical",
              "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
              "line_range": [
                336,
                348
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context_full",
              "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
              "line_range": [
                350,
                353
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace_override",
              "docstring": "Emergency workspace overrides.",
              "line_range": [
                356,
                365
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_capabilities",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
              "line_range": [
                368,
                391
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_boss_status",
              "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
              "line_range": [
                393,
                409
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
              "line_range": [
                411,
                456
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_init_ai_integration",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.",
              "line_range": [
                458,
                464
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_init_command_processor",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430 \u043a\u043e\u043c\u0430\u043d\u0434.",
              "line_range": [
                466,
                472
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_init_business_manager",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430.",
              "line_range": [
                474,
                481
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_init_team_manager",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                483,
                490
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "str",
          "self._init_business_manager",
          "self._init_team_manager",
          "self._init_ai_integration",
          "self._init_command_processor",
          "Path"
        ],
        "run_interactive": [
          "input",
          "print",
          "self.process_command",
          "user_input.lower"
        ],
        "process_command": [
          "print",
          "command_line.split",
          "cmd.startswith"
        ],
        "cmd_ai_status": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_audit": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_context": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_queue": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_business_roadmap": [
          "print",
          "json.dumps"
        ],
        "cmd_financial_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_strategic_decision": [
          "print",
          "json.dumps"
        ],
        "cmd_business_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_business_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_team_strategy": [
          "print",
          "json.dumps"
        ],
        "cmd_team_evaluation": [
          "print",
          "json.dumps"
        ],
        "cmd_hiring_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_team_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_team_report": [
          "print",
          "json.dumps"
        ],
        "cmd_technical": [
          "print"
        ],
        "cmd_context_full": [
          "print"
        ],
        "cmd_workspace_override": [
          "print"
        ],
        "cmd_capabilities": [
          "bool",
          "print",
          "json.dumps"
        ],
        "cmd_boss_status": [
          "print",
          "json.dumps"
        ],
        "cmd_help": [
          "print"
        ],
        "_init_ai_integration": [],
        "_init_command_processor": [],
        "_init_business_manager": [
          "BusinessPlanningManager",
          "logger.error"
        ],
        "_init_team_manager": [
          "logger.error",
          "TeamManagementSystem"
        ],
        "main": [
          "BossCLI",
          "parser.add_argument",
          "boss_cli.process_command",
          "argparse.ArgumentParser",
          "boss_cli.run_interactive",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "BusinessPlanningManager",
        "Path",
        "TeamManagementSystem",
        "argparse",
        "business_planning",
        "json",
        "logging",
        "pathlib",
        "sys",
        "team_management"
      ],
      "hash": "b898b48371f4e427d5a4ecdee44a51c7a948becbddcf9bf1a2baedb49a0c1dda",
      "artifact_id": "dfb13b85-b7b1-4c6e-8200-254d7b5bbe16"
    },
    {
      "module_id": "cursor_workflow_integration.scripts.install_ai_integration",
      "path": "cursor_workflow_integration/scripts/install_ai_integration.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor\n\u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u043b\u044e\u0431\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
      "functions": [
        {
          "name": "install_ai_integration",
          "docstring": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u0432 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            12,
            58
          ],
          "parameters": [
            "target_project"
          ],
          "decorators": []
        },
        {
          "name": "adapt_cursorrules",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c .cursorrules \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            60,
            99
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "adapt_auto_init",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c auto_init_ai_system.py \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            101,
            123
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "create_simplified_auto_init",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e auto_init \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0431\u0435\u0437 llmstruct",
          "line_range": [
            125,
            189
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438",
          "line_range": [
            191,
            207
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "install_ai_integration": [
          "target_root.exists",
          "vscode_dir.mkdir",
          "adapt_auto_init",
          "adapt_cursorrules",
          "source_path.exists",
          "print",
          "shutil.copy2",
          "Path"
        ],
        "adapt_cursorrules": [
          "len",
          "cursorrules_path.read_text",
          "cursorrules_path.write_text",
          "project_root.rglob",
          "cursorrules_path.exists",
          "list",
          "print",
          "content.replace"
        ],
        "adapt_auto_init": [
          "auto_init_path.write_text",
          "auto_init_path.exists",
          "print",
          "create_simplified_auto_init",
          "content.replace",
          "auto_init_path.read_text"
        ],
        "create_simplified_auto_init": [],
        "main": [
          "len",
          "print",
          "install_ai_integration"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "shutil",
        "sys"
      ],
      "hash": "353707fbf511631d58cc0ba0a5e0e01c4d4d1ecc8ddae9d60d759ba6dd524f56",
      "artifact_id": "b08fc5d7-d2bc-4813-b2ef-da4d4576daed"
    },
    {
      "module_id": "cursor_workflow_integration.files.auto_init_ai_system",
      "path": "cursor_workflow_integration/files/auto_init_ai_system.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor\n\u042d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439\nENHANCED: \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 workflow \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439, \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438 \u0438 context tags",
      "functions": [
        {
          "name": "auto_initialize_ai_system",
          "docstring": "\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            26,
            90
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_current_workflow_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 workflow \u0441\u0435\u0441\u0441\u0438\u0438 \u0438 workspace mode",
          "line_range": [
            92,
            128
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_workflow_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 workflow \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            130,
            178
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "switch_workspace_mode",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c workspace mode (\u0434\u043b\u044f CLI integration)",
          "line_range": [
            180,
            196
          ],
          "parameters": [
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            198,
            208
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "search_ai_capabilities",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u0445 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b (Enhanced with caching optimization)",
          "line_range": [
            210,
            271
          ],
          "parameters": [
            "query"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f AI \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435",
          "line_range": [
            273,
            304
          ],
          "parameters": [
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "get_epic_sessions_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u0441\u0435\u0445 \u044d\u043f\u0438\u043a-\u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            306,
            355
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "create_epic_session",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            357,
            378
          ],
          "parameters": [
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "switch_to_session",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            380,
            398
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "get_available_sessions",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            400,
            461
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "session_management_commands",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438",
          "line_range": [
            463,
            489
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "auto_initialize_ai_system": [
          "src_path.exists",
          "str",
          "AI_CAPABILITIES.discover_all_capabilities",
          "len",
          "logger.error",
          "f.exists",
          "SystemCapabilityDiscovery",
          "logger.info",
          "get_current_workflow_context",
          "print",
          "Path"
        ],
        "get_current_workflow_context": [
          "workspace.get",
          "json.load",
          "open",
          "roadmap.get",
          "epic_data.get",
          "session_file.exists",
          "workspace_file.exists",
          "logger.info",
          "roadmap_file.exists",
          "session.get",
          "logger.warning",
          "Path"
        ],
        "get_workflow_status": [
          "len",
          "str",
          "logger.error",
          "json.load",
          "open",
          "roadmap.get",
          "auto_initialize_ai_system",
          "e.get",
          "get_current_workflow_context",
          "roadmap_file.exists",
          "WorkspaceStateManager",
          "context.get",
          "Path"
        ],
        "switch_workspace_mode": [
          "str",
          "ws.set_mode",
          "logger.error",
          "logger.info",
          "get_current_workflow_context",
          "WorkspaceStateManager",
          "Path"
        ],
        "get_ai_status": [
          "AI_STATUS.get",
          "auto_initialize_ai_system",
          "AI_CAPABILITIES.get_enhanced_capabilities_summary",
          "get_workflow_status"
        ],
        "search_ai_capabilities": [
          "len",
          "query.lower",
          "results.append",
          "func.get",
          "json.load",
          "open",
          "data.get",
          "cache_file.stat",
          "auto_initialize_ai_system",
          "json.dump",
          "cache_file.exists",
          "logger.info",
          "logger.error",
          "module.get",
          "struct_file.stat",
          "Path"
        ],
        "get_ai_context": [
          "len",
          "AI_CAPABILITIES.discover_all_capabilities",
          "logger.error",
          "json.dumps",
          "auto_initialize_ai_system",
          "get_current_workflow_context"
        ],
        "get_epic_sessions_status": [
          "logger.error",
          "json.load",
          "open",
          "sessions_file.exists",
          "roadmap.get",
          "epic_data.get",
          "status_lines.append",
          "roadmap_file.exists",
          "session.get",
          "Path"
        ],
        "create_epic_session": [
          "logger.error",
          "logger.info",
          "os.system",
          "epic_id.split",
          "Path"
        ],
        "switch_to_session": [
          "logger.error",
          "logger.info",
          "os.system",
          "get_current_workflow_context",
          "Path"
        ],
        "get_available_sessions": [
          "sessions_data.get",
          "sessions_list.append",
          "current_session_file.exists",
          "logger.error",
          "sessions_file.exists",
          "open",
          "json.load",
          "current_data.get",
          "roadmap.get",
          "epic_data.get",
          "roadmap_file.exists",
          "session.get",
          "Path"
        ],
        "session_management_commands": []
      },
      "dependencies": [
        "Path",
        "SystemCapabilityDiscovery",
        "WorkspaceStateManager",
        "datetime",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.workspace",
        "logging",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": "3fe1ba4c90500c1b690805ce392f78d56304721b2b277c4809f9ba8c061f827a",
      "artifact_id": "9bc3990c-5430-4f68-b526-a28737828eb2"
    }
  ]
}