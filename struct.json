{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-06-02T20:45:43.685242Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": {
      "goals": [
        "Create universal JSON format for codebase structure (modules, functions, classes, calls, metadata)",
        "Ensure extensibility for new languages and entity types",
        "Develop modular, plugin-based parsers for new languages",
        "Maintain an open, RFC-style documented format",
        "Integrate with LLMs by generating and attaching JSON structure to queries"
      ]
    },
    "stats": {
      "modules_count": 119,
      "functions_count": 917,
      "classes_count": 138,
      "call_edges_count": 2803
    },
    "artifact_id": "290f1504-1690-4238-afd1-2d62d4f6d255",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "1c123222-011f-41ff-a060-289f7511f8ac",
        "metadata": {}
      },
      {
        "path": ".continue",
        "type": "directory",
        "artifact_id": "bb223104-e35d-4e67-9e7e-a4a4e950752b",
        "metadata": {}
      },
      {
        "path": ".continue/config.json",
        "type": "file",
        "artifact_id": "602ada4c-77c8-4090-9f65-d0f214c5cf38",
        "metadata": {}
      },
      {
        "path": ".cursor",
        "type": "directory",
        "artifact_id": "a119690b-4d11-4d7b-94e0-0568ab898bc4",
        "metadata": {}
      },
      {
        "path": ".cursor/rules",
        "type": "directory",
        "artifact_id": "83b55c1d-e5d3-4312-b50a-1663e4013543",
        "metadata": {}
      },
      {
        "path": ".github",
        "type": "directory",
        "artifact_id": "47fd577a-c8f7-4d26-aeed-f7fbd1006cef",
        "metadata": {}
      },
      {
        "path": ".github/ISSUE_TEMPLATE",
        "type": "directory",
        "artifact_id": "53b2de28-a40e-4350-b77c-1e8bca949e3c",
        "metadata": {}
      },
      {
        "path": ".github/ISSUE_TEMPLATE/epic_template.md",
        "type": "file",
        "artifact_id": "40bceb01-cdeb-4b82-9b63-f6f63f1d1a54",
        "metadata": {}
      },
      {
        "path": ".github/ISSUE_TEMPLATE/task_template.md",
        "type": "file",
        "artifact_id": "2a4c59a3-a23b-49d2-9f32-7d9f2b83ebe5",
        "metadata": {}
      },
      {
        "path": ".github/workflows",
        "type": "directory",
        "artifact_id": "956b5bf7-0638-40a4-84d9-649b84d5831b",
        "metadata": {}
      },
      {
        "path": ".llmstruct_cache",
        "type": "directory",
        "artifact_id": "7b11e6e2-6efd-4f61-a2a8-82dc170f7cac",
        "metadata": {}
      },
      {
        "path": ".llmstruct_cache/class_index.json",
        "type": "file",
        "artifact_id": "3f56e156-16bb-4761-8c88-2ffe5ff37c9b",
        "metadata": {}
      },
      {
        "path": ".llmstruct_cache/function_index.json",
        "type": "file",
        "artifact_id": "1c51c142-043c-49ea-be8c-9777123a57d2",
        "metadata": {}
      },
      {
        "path": ".llmstruct_cache/metadata.json",
        "type": "file",
        "artifact_id": "896a7a53-ec3e-4473-afc9-e42712f607db",
        "metadata": {}
      },
      {
        "path": ".llmstruct_cache/module_index.json",
        "type": "file",
        "artifact_id": "4c83b6fa-9c3c-4eda-a724-61f1fdcfeab5",
        "metadata": {}
      },
      {
        "path": ".llmstruct_cache/search_cache.json",
        "type": "file",
        "artifact_id": "098a6821-95f5-488f-a16c-4ffeb8835f53",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index",
        "type": "directory",
        "artifact_id": "54b0009d-9588-4f46-a037-bc9101175cbe",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE",
        "type": "directory",
        "artifact_id": "c27001db-0b7e-4b01-807d-87e158eaf3f1",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/.PHOENIX",
        "type": "directory",
        "artifact_id": "382458ba-efb2-4c7d-b201-da8ef7548d7f",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/.PHOENIX/executable_phoenix_plan.ast.json",
        "type": "file",
        "artifact_id": "db5b136b-3138-4d1d-a362-0a9c1cffa073",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/.PHOENIX/executable_phoenix_plan.struct.json",
        "type": "file",
        "artifact_id": "f1afdae7-24aa-44e7-89d9-f7ecb0c7c545",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/.personal",
        "type": "directory",
        "artifact_id": "583af1ba-5213-4b4f-82d9-d6544d0ebf39",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/.personal/boss",
        "type": "directory",
        "artifact_id": "f8cacc2e-2dc4-4f55-b32f-27c2c53ca88d",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/.personal/boss/scripts",
        "type": "directory",
        "artifact_id": "b0e28b9e-6690-45a4-b760-a4a9c411e044",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/.personal/boss/scripts/boss_cli.ast.json",
        "type": "file",
        "artifact_id": "b37f4dd3-48f9-4709-934d-9a10c57de91c",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/.personal/boss/scripts/boss_cli.struct.json",
        "type": "file",
        "artifact_id": "edf49c46-5ba3-4f86-805f-28b7a4b56ecb",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive",
        "type": "directory",
        "artifact_id": "80893df2-5963-455f-a08f-b0448562a35e",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_bots",
        "type": "directory",
        "artifact_id": "b5fac86a-9adf-4d16-85e5-d7b1cf2737ac",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_bots/chat_bot_enhanced.ast.json",
        "type": "file",
        "artifact_id": "17c4d2c9-cd25-4d34-9a33-3b0ede7bfc65",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_bots/chat_bot_enhanced.struct.json",
        "type": "file",
        "artifact_id": "3ed3d65d-5cc2-4536-a1f0-afb4714f3e8e",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_bots/cursor_reporter.ast.json",
        "type": "file",
        "artifact_id": "b3ce3b23-42b8-4644-84cf-2e81755f97cc",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_bots/cursor_reporter.struct.json",
        "type": "file",
        "artifact_id": "a6d65609-243d-419f-a6c3-34bfa608ddfd",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_bots/cursor_telegram_bridge.ast.json",
        "type": "file",
        "artifact_id": "47cccd1e-f1f0-4055-a9c9-4c2da78ab898",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_bots/cursor_telegram_bridge.struct.json",
        "type": "file",
        "artifact_id": "d18a0d9e-601a-4a17-9306-522d0a89990c",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_bots/demo_bot_features.ast.json",
        "type": "file",
        "artifact_id": "2e9561fb-1b9a-4e11-9102-57f5fc910c70",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_bots/demo_bot_features.struct.json",
        "type": "file",
        "artifact_id": "94b80465-b1a9-467e-97ad-0d348fe2b0f7",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_bots/ollama_api_bot.ast.json",
        "type": "file",
        "artifact_id": "f21f4e16-9dfa-43cd-b0af-02b171bc09c6",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_bots/ollama_api_bot.struct.json",
        "type": "file",
        "artifact_id": "c6f05be8-b8bd-40dc-91b4-f78f83175140",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_bots/ollama_chat_bot.ast.json",
        "type": "file",
        "artifact_id": "517dc7ca-b482-46e7-9a89-4b8b83b9c957",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_bots/ollama_chat_bot.struct.json",
        "type": "file",
        "artifact_id": "aa306356-9b6d-4e21-a669-14ea3c7bb225",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_bots/start_api_bot.ast.json",
        "type": "file",
        "artifact_id": "340c0bd0-19ce-4d03-90a3-3fb500a890ea",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_bots/start_api_bot.struct.json",
        "type": "file",
        "artifact_id": "2aeb2b66-45f1-49b0-9051-e86f853d8d94",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_bots/start_ollama_bot.ast.json",
        "type": "file",
        "artifact_id": "cbe62042-82a8-47cc-b9d9-0db8afd225d2",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_bots/start_ollama_bot.struct.json",
        "type": "file",
        "artifact_id": "937a578d-93ee-46bb-b0bc-a160a75f32df",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_bots/telegram_cursor_master.ast.json",
        "type": "file",
        "artifact_id": "46736dba-62cc-4817-82a6-5a79a930a89e",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_bots/telegram_cursor_master.struct.json",
        "type": "file",
        "artifact_id": "570a465e-07f3-49aa-9667-f0877978a0a8",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_bots/test_bot_quick.ast.json",
        "type": "file",
        "artifact_id": "3531413f-c3bd-46d4-9cab-709aafb06e49",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_bots/test_bot_quick.struct.json",
        "type": "file",
        "artifact_id": "cef16a24-f82d-4f46-a8b4-7e7e11aa58f0",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments",
        "type": "directory",
        "artifact_id": "695c8785-680a-43c7-9ce0-6140f68277ea",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/api_memory_endpoints.ast.json",
        "type": "file",
        "artifact_id": "610e0a15-ab4a-42e7-a42f-32eeeb38354b",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/api_memory_endpoints.struct.json",
        "type": "file",
        "artifact_id": "5de16608-9c99-4884-9fb4-84262befde38",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/chat_bot_fastapi_enhanced.ast.json",
        "type": "file",
        "artifact_id": "9f3d59d0-c11c-4419-b729-a9490949b87b",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/chat_bot_fastapi_enhanced.struct.json",
        "type": "file",
        "artifact_id": "2037f315-e0a9-487c-a669-eef551856090",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/cursor_bot_messenger.ast.json",
        "type": "file",
        "artifact_id": "5e7e2388-95c2-4cfe-b0c9-dff03b94d47c",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/cursor_bot_messenger.struct.json",
        "type": "file",
        "artifact_id": "1219934c-55ed-4d19-819c-6fc379bdc718",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/cursor_integration.ast.json",
        "type": "file",
        "artifact_id": "dbd7f3b4-2741-4eff-95a8-c7facc7226c6",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/cursor_integration.struct.json",
        "type": "file",
        "artifact_id": "0ea4f848-de1b-403b-8c01-5e72fc717a11",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/cursor_simple_integration.ast.json",
        "type": "file",
        "artifact_id": "dc14862d-439d-41cc-89f5-53cad3e486ed",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/cursor_simple_integration.struct.json",
        "type": "file",
        "artifact_id": "c57c2fed-5aae-4a67-bcbb-4f71a878e394",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/cursor_telegram_reader.ast.json",
        "type": "file",
        "artifact_id": "e1c0ffaf-c97a-4d91-bab8-783863cb0020",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/cursor_telegram_reader.struct.json",
        "type": "file",
        "artifact_id": "2be90c1b-810d-4f19-b137-bb8af70a201c",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/cursor_telegram_reader_enhanced.ast.json",
        "type": "file",
        "artifact_id": "198238b1-a5b8-451b-b6db-b6e93e279bdf",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/cursor_telegram_reader_enhanced.struct.json",
        "type": "file",
        "artifact_id": "6ded6331-aca1-41f7-bc45-546984c00668",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/dummy_work_executor.ast.json",
        "type": "file",
        "artifact_id": "3e89b97b-801f-4cd5-b27d-7d2df02fac69",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/dummy_work_executor.struct.json",
        "type": "file",
        "artifact_id": "4aefcab8-54e8-4712-855a-184264216dca",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/fastapi_ollama_server.ast.json",
        "type": "file",
        "artifact_id": "7581a11e-0519-426c-853b-b82f8cf24e6c",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/fastapi_ollama_server.struct.json",
        "type": "file",
        "artifact_id": "7c3a97e9-f12c-4a89-8857-44ad5df3a16e",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/send_cursor_response.ast.json",
        "type": "file",
        "artifact_id": "be15fff1-2cf6-4797-a0e4-22fecf476369",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/send_cursor_response.struct.json",
        "type": "file",
        "artifact_id": "a7b31a78-dd9b-444f-bd53-bd6c63ddcb77",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/send_test_message.ast.json",
        "type": "file",
        "artifact_id": "6e84cb1f-79cc-4d9b-9ffc-677569bc9a72",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/send_test_message.struct.json",
        "type": "file",
        "artifact_id": "78ca43c2-4433-4b3a-b024-7b27d772a9de",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/simple_telegram_bot.ast.json",
        "type": "file",
        "artifact_id": "c9e05239-5483-49eb-8451-0f54386658de",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/simple_telegram_bot.struct.json",
        "type": "file",
        "artifact_id": "d5d9221a-5346-447d-8309-1d935a700053",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/start_simple_telegram.ast.json",
        "type": "file",
        "artifact_id": "c0b0e746-40ca-4b1c-91e6-31851d44d7e6",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/start_simple_telegram.struct.json",
        "type": "file",
        "artifact_id": "bca79b01-8ce4-40b4-ad56-987a17bebb45",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/test_master_plan_flow.ast.json",
        "type": "file",
        "artifact_id": "30732913-7335-4b50-ba5f-f7413ffc4e49",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/test_master_plan_flow.struct.json",
        "type": "file",
        "artifact_id": "41bdf168-f39f-4bb8-8d59-4d2938b5a463",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/test_read_telegram.ast.json",
        "type": "file",
        "artifact_id": "78929317-a7b6-4cac-8b36-9e1554c412e5",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/archive/telegram_experiments/test_read_telegram.struct.json",
        "type": "file",
        "artifact_id": "553774b5-fcd8-46f9-975f-85ae3d01556f",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/board_cli.ast.json",
        "type": "file",
        "artifact_id": "415d2609-5e08-48d0-82bd-66e91d5366f1",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/board_cli.struct.json",
        "type": "file",
        "artifact_id": "14ae9441-dac9-474f-a7f0-4ba7066f0400",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/bot_api_server.ast.json",
        "type": "file",
        "artifact_id": "8b7c4470-8b3a-4b57-ae49-6896f341deda",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/bot_api_server.struct.json",
        "type": "file",
        "artifact_id": "96e50f92-467e-4fa3-9f52-fd3ef5eba976",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/bot_file_operations.ast.json",
        "type": "file",
        "artifact_id": "a1cb92d1-8e8f-48ca-ad38-9a05c223c9f8",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/bot_file_operations.struct.json",
        "type": "file",
        "artifact_id": "a9b553c6-6518-4314-8dda-4705025d22f2",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/chat_bot.ast.json",
        "type": "file",
        "artifact_id": "49388613-ec68-4916-b0f0-b65d8bf4e6c6",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/chat_bot.struct.json",
        "type": "file",
        "artifact_id": "7af5874e-3076-4584-bbcb-24c073f740fc",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/chat_bot_final.ast.json",
        "type": "file",
        "artifact_id": "413cadc7-7fa2-46cc-b269-d948858fd1de",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/chat_bot_final.struct.json",
        "type": "file",
        "artifact_id": "ae866df9-c9b2-4ef3-93ef-435076ed4082",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/chat_bot_working.ast.json",
        "type": "file",
        "artifact_id": "dc65cacb-f567-40ba-84ef-a87079139612",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/chat_bot_working.struct.json",
        "type": "file",
        "artifact_id": "f426b3dd-f933-4e3d-8682-a652fb43d4c6",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/debug_terminal.ast.json",
        "type": "file",
        "artifact_id": "4a1d3ec0-fefb-4a00-9e7b-079c148d0471",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/debug_terminal.struct.json",
        "type": "file",
        "artifact_id": "119ee4c7-4032-492a-9de5-d4ac276eb65f",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/fastapi_ollama_server_working.ast.json",
        "type": "file",
        "artifact_id": "f8891c44-393c-415b-8645-0cbad9463c1a",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/fastapi_ollama_server_working.struct.json",
        "type": "file",
        "artifact_id": "7fccda65-979b-4e7d-8d17-4b7cda06a351",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/final_system_check.ast.json",
        "type": "file",
        "artifact_id": "259f4a1b-51c6-43ff-a1b2-66003455faf4",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/final_system_check.struct.json",
        "type": "file",
        "artifact_id": "39ceb6c4-99ac-4d69-b614-ea9647fd4ad4",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/final_system_validation.ast.json",
        "type": "file",
        "artifact_id": "9e22cf09-53c3-4d6d-9814-2b0062ce4fc9",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/final_system_validation.struct.json",
        "type": "file",
        "artifact_id": "3a5fcbb5-521b-424f-88d9-25dfd04f38b2",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/force_ai_integration.ast.json",
        "type": "file",
        "artifact_id": "5eb221c5-0b72-48fa-8b14-34af64b1f957",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/force_ai_integration.struct.json",
        "type": "file",
        "artifact_id": "86b8f1fb-0ced-4274-90ec-aaf8b432f360",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules",
        "type": "directory",
        "artifact_id": "62b271e2-ecfe-4068-b1f8-124d2125d6ac",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/analyze_duplicates",
        "type": "directory",
        "artifact_id": "f79b6cd7-4b24-4072-9c08-3eccea4c3508",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/analyze_duplicates/__init__.ast.json",
        "type": "file",
        "artifact_id": "3da40e35-6e72-4e10-9366-f8a0fd54f4d7",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/analyze_duplicates/__init__.struct.json",
        "type": "file",
        "artifact_id": "1315452f-937a-4a30-8fd3-3764faf97632",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/analyze_duplicates/handlers.ast.json",
        "type": "file",
        "artifact_id": "6b25ca1e-cefe-4017-87b7-08f51f7bbf8f",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/analyze_duplicates/handlers.struct.json",
        "type": "file",
        "artifact_id": "e1406022-8a6b-4bca-b501-c5a15bd423f4",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/audit",
        "type": "directory",
        "artifact_id": "d802ea40-dc0b-46e1-9871-2c534bebab7c",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/audit/__init__.ast.json",
        "type": "file",
        "artifact_id": "f0d56cb1-28fd-475e-a2ff-aec9e9aef114",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/audit/__init__.struct.json",
        "type": "file",
        "artifact_id": "6189dd7b-54d8-4e90-aed3-a08053fe081a",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/audit/handlers.ast.json",
        "type": "file",
        "artifact_id": "8193ebc6-1e57-49c6-9b89-d1f6f95640d6",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/audit/handlers.struct.json",
        "type": "file",
        "artifact_id": "e66128e6-1ae7-4b68-91b7-46d577f83db8",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/bot",
        "type": "directory",
        "artifact_id": "f089acbb-93f9-49ec-9020-2880d88cd533",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/bot/__init__.ast.json",
        "type": "file",
        "artifact_id": "94b8156b-7fda-431e-8243-9f7d3ae07cdf",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/bot/__init__.struct.json",
        "type": "file",
        "artifact_id": "2e7a9d7c-3b76-429c-9a5c-6f879da826ef",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/bot/handlers.ast.json",
        "type": "file",
        "artifact_id": "92ae637c-9d22-488c-989d-7e3c0b1786f3",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/bot/handlers.struct.json",
        "type": "file",
        "artifact_id": "ffd30995-4764-4274-834d-5fccce8088c6",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/context",
        "type": "directory",
        "artifact_id": "2e6a0d91-df27-4896-ad3c-d69ec0bd9dfe",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/context/__init__.ast.json",
        "type": "file",
        "artifact_id": "5b00bbe8-b9e5-4011-be23-a42e882ead95",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/context/__init__.struct.json",
        "type": "file",
        "artifact_id": "90acc82d-20c5-41f7-bbcf-cd6710b6ceef",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/context/handlers.ast.json",
        "type": "file",
        "artifact_id": "4cd8780b-72d1-4617-9616-1b4b107fc2ea",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/context/handlers.struct.json",
        "type": "file",
        "artifact_id": "ed7b700f-cec1-47af-a766-254f283282c2",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/dogfood",
        "type": "directory",
        "artifact_id": "f275e630-5adb-4ec2-bd8f-9e651277d4c2",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/dogfood/__init__.ast.json",
        "type": "file",
        "artifact_id": "112bb0b5-f9b3-4c63-8514-ce83389f3638",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/dogfood/__init__.struct.json",
        "type": "file",
        "artifact_id": "574a14dd-eccd-4aa4-8e07-a96d1e3a174f",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/dogfood/handlers.ast.json",
        "type": "file",
        "artifact_id": "80259d68-1353-4f97-b4f4-1f4727e3d461",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/dogfood/handlers.struct.json",
        "type": "file",
        "artifact_id": "3d283e45-c043-41a6-b4a0-f6348508a22e",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/interactive",
        "type": "directory",
        "artifact_id": "1ad0c7f2-9073-4216-9b4b-91accbb12c95",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/interactive/__init__.ast.json",
        "type": "file",
        "artifact_id": "d1cc80da-4539-43a0-b103-559ccbfd1768",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/interactive/__init__.struct.json",
        "type": "file",
        "artifact_id": "243f893a-bff6-4381-a1db-fb528d09a05b",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/interactive/handlers.ast.json",
        "type": "file",
        "artifact_id": "f79be381-e8a1-4df2-9b10-b49756d03973",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/interactive/handlers.struct.json",
        "type": "file",
        "artifact_id": "12caef19-55d0-47ab-a84c-68d577e12198",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/metrics",
        "type": "directory",
        "artifact_id": "ae2e3054-2377-48d4-9ccc-89a22beb838f",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/metrics/__init__.ast.json",
        "type": "file",
        "artifact_id": "3de14945-27fd-4b93-8dba-94046263897a",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/metrics/__init__.struct.json",
        "type": "file",
        "artifact_id": "a9b05ec4-4b87-41d0-969d-0157e482e659",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/metrics/handlers.ast.json",
        "type": "file",
        "artifact_id": "15c6b5d4-0861-43c8-b5ca-8e645b6a83af",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/metrics/handlers.struct.json",
        "type": "file",
        "artifact_id": "64b689bd-b627-4a0a-a478-fb890e4d44ff",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/parse",
        "type": "directory",
        "artifact_id": "76e8cc18-889d-466d-9782-e936206d4a77",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/parse/__init__.ast.json",
        "type": "file",
        "artifact_id": "42223057-5d3f-48d6-9014-f1d3343b3323",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/parse/__init__.struct.json",
        "type": "file",
        "artifact_id": "67c7da00-2cfe-4717-8c51-2a9eeb70b5e2",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/parse/handlers.ast.json",
        "type": "file",
        "artifact_id": "7cb619a8-9f70-48d7-90ef-6e732bd68abb",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/parse/handlers.struct.json",
        "type": "file",
        "artifact_id": "1439e82b-9296-408d-ab21-6a3d443a93c7",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/query",
        "type": "directory",
        "artifact_id": "2f73e8dc-613f-41f2-b4ba-882232cb3040",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/query/__init__.ast.json",
        "type": "file",
        "artifact_id": "5fb2543b-323f-4a7d-8613-d1830ad5d831",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/query/__init__.struct.json",
        "type": "file",
        "artifact_id": "3d6a1b67-7a32-43f7-ab1c-670ba30004dd",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/query/handlers.ast.json",
        "type": "file",
        "artifact_id": "833131a8-f6c1-4136-9ead-cc6d54c67308",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/query/handlers.struct.json",
        "type": "file",
        "artifact_id": "dac1c55f-08f5-4c11-8446-2f4bc14bb18f",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/review",
        "type": "directory",
        "artifact_id": "1076baff-3c4e-4e73-9af6-81e4162c3691",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/review/__init__.ast.json",
        "type": "file",
        "artifact_id": "d26abf31-ffb1-4b89-9c5b-5016e79bcce9",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/review/__init__.struct.json",
        "type": "file",
        "artifact_id": "062be602-2d04-4021-b836-fb91297d0250",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/review/handlers.ast.json",
        "type": "file",
        "artifact_id": "dca0a233-14f8-4fba-b1d2-2029e3536013",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/review/handlers.struct.json",
        "type": "file",
        "artifact_id": "d4389c5b-feaf-4b72-8d2c-e74c085dc881",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/services",
        "type": "directory",
        "artifact_id": "97acf93c-1d6d-4f60-8a36-5b685e9b19fc",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/services/__init__.ast.json",
        "type": "file",
        "artifact_id": "0ead726c-e881-421d-bf54-770e65d2fcfb",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/services/__init__.struct.json",
        "type": "file",
        "artifact_id": "456818a1-9709-47de-8269-445111b2d363",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/services/handlers.ast.json",
        "type": "file",
        "artifact_id": "055d824b-f567-47d7-8ef8-1f9708ecf8c6",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/modules/services/handlers.struct.json",
        "type": "file",
        "artifact_id": "8f45e469-006a-4597-8a05-1b1fbd40e8ab",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/monitor_system.ast.json",
        "type": "file",
        "artifact_id": "ab3ceef4-88c1-4e6e-9ca7-4c1e0792a056",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/monitor_system.struct.json",
        "type": "file",
        "artifact_id": "098dac8b-1aab-43b8-aaf2-05d8c19d44fa",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/ollama_full_parser.ast.json",
        "type": "file",
        "artifact_id": "e37b98de-7174-4518-ac0f-3bd6605f9ef5",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/ollama_full_parser.struct.json",
        "type": "file",
        "artifact_id": "4e492259-6c25-4d4d-8640-90ec0e17f341",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/parse_ollama_fixed.ast.json",
        "type": "file",
        "artifact_id": "8ebc34c7-ae1b-4c8e-827f-98f6cb8b89de",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/parse_ollama_fixed.struct.json",
        "type": "file",
        "artifact_id": "378783ac-84f7-4af3-b574-d8810f6733ae",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/parse_ollama_for_grok.ast.json",
        "type": "file",
        "artifact_id": "33356006-c189-48a6-8906-2ff89c2663d2",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/parse_ollama_for_grok.struct.json",
        "type": "file",
        "artifact_id": "b1afbdc6-7fac-4ad7-af97-a9533bceab80",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/parse_ollama_full.ast.json",
        "type": "file",
        "artifact_id": "f0a29f7b-ae57-4dd4-8785-a02a23c8e1c8",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/parse_ollama_full.struct.json",
        "type": "file",
        "artifact_id": "b3ead00a-f182-48e9-9cea-f2b368ccc7e9",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/parse_ollama_improved.ast.json",
        "type": "file",
        "artifact_id": "358889fe-1acb-49d2-8e23-d8af1878287e",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/parse_ollama_improved.struct.json",
        "type": "file",
        "artifact_id": "ebfdff10-c323-4dcd-9e85-eeaea51ff9cc",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/parse_ollama_minimal.ast.json",
        "type": "file",
        "artifact_id": "dca76491-bdf2-4610-8cbe-cd0318bd24a2",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/parse_ollama_minimal.struct.json",
        "type": "file",
        "artifact_id": "4724831c-9bb2-4da6-b391-3b63410ff8c7",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/parse_ollama_models.ast.json",
        "type": "file",
        "artifact_id": "8aaa3d17-2a69-4602-8b38-b93de5009d61",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/parse_ollama_models.struct.json",
        "type": "file",
        "artifact_id": "33f9eac3-683f-4f89-8721-601005b5b734",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/telegram_bot_enhanced.ast.json",
        "type": "file",
        "artifact_id": "187b158b-9036-4ca1-8598-d14fd47a2889",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/telegram_bot_enhanced.struct.json",
        "type": "file",
        "artifact_id": "d28fefe1-f9a7-4012-aedd-322e1ca56126",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/telegram_bot_final.ast.json",
        "type": "file",
        "artifact_id": "b814c42e-1494-4f9b-928d-9b7e287f8062",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/telegram_bot_final.struct.json",
        "type": "file",
        "artifact_id": "a8d2132b-99c1-4fb4-a5da-1f7f3ae80ea7",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/telegram_bot_test.ast.json",
        "type": "file",
        "artifact_id": "4fae3934-c899-4e51-a380-0f9ed60fdbfd",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/telegram_bot_test.struct.json",
        "type": "file",
        "artifact_id": "5f653a46-e97d-43e8-83b8-95925a3de058",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_boss_missing",
        "type": "directory",
        "artifact_id": "18782bd8-4bfa-4fde-8370-7ca548b26146",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_boss_missing/scripts",
        "type": "directory",
        "artifact_id": "6c815bde-6551-4ce6-ae86-019e7371e9f0",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_boss_missing/scripts/__init__.ast.json",
        "type": "file",
        "artifact_id": "9b70c911-84f9-42ab-8bc6-371fb29e119e",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_boss_missing/scripts/__init__.struct.json",
        "type": "file",
        "artifact_id": "21d49fd5-544d-4ce2-bab2-514f981bca11",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_boss_missing/scripts/boss_cli.ast.json",
        "type": "file",
        "artifact_id": "854c8b61-e2cf-4297-8f62-251e1b875043",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_boss_missing/scripts/boss_cli.struct.json",
        "type": "file",
        "artifact_id": "47e25521-a236-408f-bed7-efb8f93dafc5",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_boss_missing/scripts/business_planning.ast.json",
        "type": "file",
        "artifact_id": "a9171347-4786-4825-a8af-ad49d5a0102c",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_boss_missing/scripts/business_planning.struct.json",
        "type": "file",
        "artifact_id": "29a625b6-21ce-45ff-81f3-6825397f6244",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_boss_missing/scripts/team_management.ast.json",
        "type": "file",
        "artifact_id": "ccea85ea-f104-4f2e-a8e3-ad1c30fb0972",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_boss_missing/scripts/team_management.struct.json",
        "type": "file",
        "artifact_id": "71372e32-527d-4e83-95d6-460d54f5bacd",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_personal_analysis",
        "type": "directory",
        "artifact_id": "5b55ac86-6ca8-4e33-8a8d-2f5f45e750a0",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_personal_analysis/personal",
        "type": "directory",
        "artifact_id": "6fe6dd33-bb5c-4ec3-b6ba-83328f361333",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_personal_analysis/personal/boss",
        "type": "directory",
        "artifact_id": "35fe9126-8181-4b05-a926-8e73b1a6898d",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_personal_analysis/personal/boss/scripts",
        "type": "directory",
        "artifact_id": "df19c818-1b99-4ab6-9260-b9f4a80adb20",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_personal_analysis/personal/boss/scripts/__init__.ast.json",
        "type": "file",
        "artifact_id": "15da9fd2-148a-474f-9d3f-8ec564da5f56",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_personal_analysis/personal/boss/scripts/__init__.struct.json",
        "type": "file",
        "artifact_id": "b56134e1-c27d-49b0-a84a-01da36c4c7d5",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_personal_analysis/personal/boss/scripts/boss_cli.ast.json",
        "type": "file",
        "artifact_id": "ad45e53f-3c3c-4465-b630-1fe9721f5198",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_personal_analysis/personal/boss/scripts/boss_cli.struct.json",
        "type": "file",
        "artifact_id": "fc2c35fb-f298-44f7-ab54-56765f12574d",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_personal_analysis/personal/boss/scripts/business_planning.ast.json",
        "type": "file",
        "artifact_id": "a54bb8d4-d392-4df0-86dc-c16170839044",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_personal_analysis/personal/boss/scripts/business_planning.struct.json",
        "type": "file",
        "artifact_id": "deda2c00-db0b-496d-ad45-e267111f3d20",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_personal_analysis/personal/boss/scripts/team_management.ast.json",
        "type": "file",
        "artifact_id": "2c57119a-1ad6-4be8-8806-3176ca027bcb",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_personal_analysis/personal/boss/scripts/team_management.struct.json",
        "type": "file",
        "artifact_id": "7756f70f-17ba-4206-ad83-c74c198ac343",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_personal_analysis/personal/commercial_planning.ast.json",
        "type": "file",
        "artifact_id": "9276e02c-2675-48da-8c40-ef70c6ddc932",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/temp_personal_analysis/personal/commercial_planning.struct.json",
        "type": "file",
        "artifact_id": "92ecef4e-a066-477a-aad4-ebf55dfb974a",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_ai_cli_debug.ast.json",
        "type": "file",
        "artifact_id": "36f8f3e5-f5fc-4e06-a6bd-44bb9cc3b89f",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_ai_cli_debug.struct.json",
        "type": "file",
        "artifact_id": "b11c65d7-03fa-4ea5-b3bc-932cba386375",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_api.ast.json",
        "type": "file",
        "artifact_id": "76ccc0c5-64a6-4dd0-9853-ac2b956b91db",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_api.struct.json",
        "type": "file",
        "artifact_id": "4ea2c04d-296a-462d-9a77-b93791e865e9",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_api_simple.ast.json",
        "type": "file",
        "artifact_id": "ea43b2b2-9736-4fce-97e8-53d243253bdd",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_api_simple.struct.json",
        "type": "file",
        "artifact_id": "6aec3489-787b-42e2-a9a8-fc3aaeca9d98",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_audit.ast.json",
        "type": "file",
        "artifact_id": "0f5ad1cb-2318-4bcf-98fe-25f69fb61721",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_audit.struct.json",
        "type": "file",
        "artifact_id": "2510aae8-27c5-4f40-9e3e-bbf45820abf4",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_bot_functionality.ast.json",
        "type": "file",
        "artifact_id": "af5c87c3-0e23-4c25-a0f8-5cd531d3ed8f",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_bot_functionality.struct.json",
        "type": "file",
        "artifact_id": "e25ddfad-81a8-45b0-8212-706c14db9ea1",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_cli.ast.json",
        "type": "file",
        "artifact_id": "00f5fe8d-1d1e-4e75-8405-de05878c59f4",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_cli.struct.json",
        "type": "file",
        "artifact_id": "b294fa52-55c8-479f-86d0-19c45624ef98",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_cli_demo.ast.json",
        "type": "file",
        "artifact_id": "4b2e7482-ccfd-4e09-9d86-684e3116483d",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_cli_demo.struct.json",
        "type": "file",
        "artifact_id": "2a3faa6e-6add-412b-a8bf-268d0ed57ba2",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_cli_integration.ast.json",
        "type": "file",
        "artifact_id": "0925e0c5-ea8b-4581-822d-aab84466bafe",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_cli_integration.struct.json",
        "type": "file",
        "artifact_id": "7854ce37-d1b9-41c1-9862-19c63fd5143c",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_context_orchestration.ast.json",
        "type": "file",
        "artifact_id": "25f2217d-23d4-4205-a8e5-48b6c0ebd4af",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_context_orchestration.struct.json",
        "type": "file",
        "artifact_id": "15929e78-e389-43a3-a5a7-2c2261eb2511",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_efficiency.ast.json",
        "type": "file",
        "artifact_id": "b5935930-9f6f-4951-9c08-158ba6621301",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_efficiency.struct.json",
        "type": "file",
        "artifact_id": "6d5d47bd-6458-49dd-8337-ab68ddeb1bd5",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_enhanced_ai_awareness.ast.json",
        "type": "file",
        "artifact_id": "94ccbb1b-0934-40f0-b108-fe92bd9711d5",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_enhanced_ai_awareness.struct.json",
        "type": "file",
        "artifact_id": "5ac64bb7-e921-4e5d-831b-f0c291796bdf",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_export.ast.json",
        "type": "file",
        "artifact_id": "c3fd6db0-de21-4613-8bc5-17ba739219f3",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_export.struct.json",
        "type": "file",
        "artifact_id": "ea89619a-39a8-4d12-9f49-4416085f980c",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_file_operations.ast.json",
        "type": "file",
        "artifact_id": "1f98b382-1b0f-4421-aa63-0049e2d4a23b",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_file_operations.struct.json",
        "type": "file",
        "artifact_id": "ae07b9ea-97f2-47b8-9b3b-7772f340dd9c",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_modular_cli.ast.json",
        "type": "file",
        "artifact_id": "4bbf04e9-67f2-42ab-8092-a1a5f6746ad7",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_modular_cli.struct.json",
        "type": "file",
        "artifact_id": "a6fa89b5-0283-4fa1-9f10-bf505015e391",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_websocket.ast.json",
        "type": "file",
        "artifact_id": "9011b34a-b1a1-4905-82d8-53bb6bc3b4ed",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/.ARCHIVE/test_websocket.struct.json",
        "type": "file",
        "artifact_id": "d75a26e5-40d9-472d-b187-d2b9f883856a",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/auto_init_ai_system.ast.json",
        "type": "file",
        "artifact_id": "21978839-451f-41bb-a191-471acfcc7c86",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/auto_init_ai_system.struct.json",
        "type": "file",
        "artifact_id": "85fecd71-03d6-4b3d-9c0b-c51f4db8d1a1",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/collect_json.ast.json",
        "type": "file",
        "artifact_id": "2beaecfd-5b94-4081-a0f6-f1948fe3f6cd",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/collect_json.struct.json",
        "type": "file",
        "artifact_id": "387f4771-ffa9-4a54-bec6-549f80b163f0",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/collector.ast.json",
        "type": "file",
        "artifact_id": "e3f63bec-f37d-47e9-b289-7cab6d83aed6",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/collector.struct.json",
        "type": "file",
        "artifact_id": "f7c290df-36fc-412f-b45e-af9d8036fc26",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/cursor_workflow_integration",
        "type": "directory",
        "artifact_id": "417d455f-f0df-4730-a1ed-167182e0d8c6",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/cursor_workflow_integration/files",
        "type": "directory",
        "artifact_id": "37feabfa-2044-4620-a84b-6b73e39a975f",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/cursor_workflow_integration/files/auto_init_ai_system.ast.json",
        "type": "file",
        "artifact_id": "8b168687-3b49-4b73-aebc-fe86cc06e3a3",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/cursor_workflow_integration/files/auto_init_ai_system.struct.json",
        "type": "file",
        "artifact_id": "0bdc9c10-f577-44d8-b6d8-cad9f31ec62a",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/cursor_workflow_integration/scripts",
        "type": "directory",
        "artifact_id": "99714b56-4f1c-4636-805e-888d6201a484",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/cursor_workflow_integration/scripts/install_ai_integration.ast.json",
        "type": "file",
        "artifact_id": "6abcebce-bdf0-4d4b-940b-f400ee340e0a",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/cursor_workflow_integration/scripts/install_ai_integration.struct.json",
        "type": "file",
        "artifact_id": "f79d11d0-9f80-4f83-bdf6-8650b08de2b6",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/docs",
        "type": "directory",
        "artifact_id": "b9fab2cb-7504-4151-baaa-a94cecd9d690",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/docs/cache.ast.json",
        "type": "file",
        "artifact_id": "ea654def-94bd-49cb-8133-a0aa705b91af",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/docs/cache.struct.json",
        "type": "file",
        "artifact_id": "a527d574-5fc5-4e90-ba97-4a83cf795ea0",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/docs/cli.ast.json",
        "type": "file",
        "artifact_id": "587f48a3-6f98-4af2-86f0-968cf2dcb1a7",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/docs/cli.struct.json",
        "type": "file",
        "artifact_id": "0b94578a-47c0-4e4d-88c7-b770b06ca058",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/docs/json_selector.ast.json",
        "type": "file",
        "artifact_id": "286e3509-1d62-4a8a-9c0c-f7f669462bf6",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/docs/json_selector.struct.json",
        "type": "file",
        "artifact_id": "5ec80fa6-45a1-4a7d-b699-d536d66b7e75",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/docs/self_run.ast.json",
        "type": "file",
        "artifact_id": "24dc4d44-50a9-4540-ab70-b2308d3fcb73",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/docs/self_run.struct.json",
        "type": "file",
        "artifact_id": "9a5a82c2-32b1-402d-9346-ef440062ae89",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/docs/test_self_run.ast.json",
        "type": "file",
        "artifact_id": "7c5087e0-eda3-4511-bb35-56ee8898baa4",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/docs/test_self_run.struct.json",
        "type": "file",
        "artifact_id": "fe259c5b-2972-4a35-abe5-4cc1446f53c0",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/examples",
        "type": "directory",
        "artifact_id": "98fcb628-841b-4531-bf8c-d6a2ad35d1bd",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/examples/python_project_main.ast.json",
        "type": "file",
        "artifact_id": "a3492b30-84d6-4457-a1e0-05b97dae5831",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/examples/python_project_main.struct.json",
        "type": "file",
        "artifact_id": "4d58bd38-9ff6-4f94-b78b-00f57e876c1b",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/examples/python_project_utils.ast.json",
        "type": "file",
        "artifact_id": "af0149e6-e9a9-4f51-96e8-09cc0dbcc019",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/examples/python_project_utils.struct.json",
        "type": "file",
        "artifact_id": "3d6f0d52-44ca-4af0-a8f1-c2ba1f5637b9",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/examples/telegram_bot",
        "type": "directory",
        "artifact_id": "d967f43b-fd3f-428b-93fe-d9a8d2f9e51e",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/examples/telegram_bot/test_bot.ast.json",
        "type": "file",
        "artifact_id": "f08805f8-9cbc-4827-98d8-023e744e4a12",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/examples/telegram_bot/test_bot.struct.json",
        "type": "file",
        "artifact_id": "739bc025-c734-42c1-8504-25b56b9abca6",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/grok.ast.json",
        "type": "file",
        "artifact_id": "3f031546-3f8e-474f-9cea-453a2eff32a3",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/grok.struct.json",
        "type": "file",
        "artifact_id": "f4f248bd-0399-4d6d-8637-bda659b37bd4",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/install_ai_integration.ast.json",
        "type": "file",
        "artifact_id": "99621452-83e5-4704-a362-e45425961fce",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/install_ai_integration.struct.json",
        "type": "file",
        "artifact_id": "4dbbe1f5-114d-4cac-8559-2be50f42b0b6",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/integrations",
        "type": "directory",
        "artifact_id": "f493b7f0-a3f0-431f-b590-00aec34940be",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/integrations/telegram_bot",
        "type": "directory",
        "artifact_id": "bd369324-fbdb-47f2-854b-bc1a2d83058d",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/integrations/telegram_bot/mp002_progress_bot.ast.json",
        "type": "file",
        "artifact_id": "d92e4162-a243-491a-8ef8-9401faacd259",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/integrations/telegram_bot/mp002_progress_bot.struct.json",
        "type": "file",
        "artifact_id": "973a2855-ce97-401a-ba54-d1d7d4e4c74d",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/integrations/telegram_bot/simple_bot.ast.json",
        "type": "file",
        "artifact_id": "b1d9e57e-bdd4-483b-869b-b1f5176c23cc",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/integrations/telegram_bot/simple_bot.struct.json",
        "type": "file",
        "artifact_id": "cc65ba4b-fbb8-4a26-bbbc-38d1ac0c5932",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/integrations/telegram_bot/test_bot.ast.json",
        "type": "file",
        "artifact_id": "20f70936-b688-4f68-944e-48d69d75a75b",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/integrations/telegram_bot/test_bot.struct.json",
        "type": "file",
        "artifact_id": "3d6e85e1-a84c-4b3b-a0c2-66b57252a32a",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/quick_ws_test.ast.json",
        "type": "file",
        "artifact_id": "e5c518a7-c32b-40ec-8e56-51c0e94039c7",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/quick_ws_test.struct.json",
        "type": "file",
        "artifact_id": "7d08b40e-301d-49e0-b334-a2c429ca7624",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/run_ai_diagnostics.ast.json",
        "type": "file",
        "artifact_id": "3ff9cb6d-f799-4873-99e9-54ff815e0675",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/run_ai_diagnostics.struct.json",
        "type": "file",
        "artifact_id": "fff436f8-ff63-400e-bdaf-42db3b604e21",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src",
        "type": "directory",
        "artifact_id": "acbaac49-a5fd-47a0-b7f6-d56aae31ff49",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct",
        "type": "directory",
        "artifact_id": "0865637c-e529-473e-8f1b-95fcb8b8ca45",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/__init__.ast.json",
        "type": "file",
        "artifact_id": "4205d9d4-2bdd-4f06-950b-78ffb8f8bcc7",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/__init__.struct.json",
        "type": "file",
        "artifact_id": "781f33bd-9c5b-484e-a211-b8bcd0e33d8c",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/__main__.ast.json",
        "type": "file",
        "artifact_id": "ad0900cf-8670-4896-96ed-c11553dcf463",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/__main__.struct.json",
        "type": "file",
        "artifact_id": "5dcc1c62-3b4d-419d-8232-adf1e5a0c203",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/ai_cli_integration.ast.json",
        "type": "file",
        "artifact_id": "252e8fce-eb7f-49c9-94d5-ff6edae0a7b2",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/ai_cli_integration.struct.json",
        "type": "file",
        "artifact_id": "cc5819d3-652f-457b-ac73-3280917bb748",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/ai_self_awareness.ast.json",
        "type": "file",
        "artifact_id": "37e0460b-386d-4e69-a022-dd1b79c299f9",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/ai_self_awareness.struct.json",
        "type": "file",
        "artifact_id": "0036d13a-04a4-4337-9674-b5dbfed707e8",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/ai_self_monitor.ast.json",
        "type": "file",
        "artifact_id": "9a31f253-d292-43b7-9e33-e1387a7124a2",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/ai_self_monitor.struct.json",
        "type": "file",
        "artifact_id": "1067c2cd-838c-41de-b52d-a3b6f6bdd1e6",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/ai_workflow_middleware.ast.json",
        "type": "file",
        "artifact_id": "a614b742-5207-4089-b61b-e6387a9169ee",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/ai_workflow_middleware.struct.json",
        "type": "file",
        "artifact_id": "96988eec-c932-4fa1-abf8-3a8396c618b0",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/cache.ast.json",
        "type": "file",
        "artifact_id": "1c4626b1-6269-47b9-b53c-10dc6d61b600",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/cache.struct.json",
        "type": "file",
        "artifact_id": "63a496cc-5cfe-4d34-8a46-dbc03628c2a5",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/cli.ast.json",
        "type": "file",
        "artifact_id": "9faf0458-4673-46b3-9ab7-9954e56125f2",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/cli.struct.json",
        "type": "file",
        "artifact_id": "3296c3b9-769e-4916-9a33-a15fcde55701",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/context_orchestrator.ast.json",
        "type": "file",
        "artifact_id": "0dfc513c-036b-4b30-ada4-c168de50f755",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/context_orchestrator.struct.json",
        "type": "file",
        "artifact_id": "86e7236a-eea8-4416-84c3-afb6bb318781",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/copilot.ast.json",
        "type": "file",
        "artifact_id": "41b8b481-b7dc-4c12-8251-cc020b94dd83",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/copilot.struct.json",
        "type": "file",
        "artifact_id": "60eaf052-b9fc-4e2e-9900-aadc98878c92",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/cursor_ai_bridge.ast.json",
        "type": "file",
        "artifact_id": "395b6e37-a530-43cf-a309-9e10b6eb9ce4",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/cursor_ai_bridge.struct.json",
        "type": "file",
        "artifact_id": "98aebe58-38e0-4fdb-a8aa-1af718d8aa7c",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/cursor_integration.ast.json",
        "type": "file",
        "artifact_id": "aed0bdb2-d00f-4ff0-ac2c-ca8567443792",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/cursor_integration.struct.json",
        "type": "file",
        "artifact_id": "f1a6245d-8c17-4c00-896d-b3c7ff2b0ada",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/generators",
        "type": "directory",
        "artifact_id": "f39f3696-6eb2-4ca4-9528-5ff360d8a9af",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/generators/__init__.ast.json",
        "type": "file",
        "artifact_id": "48b16fc9-6c05-400b-8776-aa5f725cd112",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/generators/__init__.struct.json",
        "type": "file",
        "artifact_id": "c683e4e8-22cf-47a7-8c22-bdc0d71654fc",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/generators/go_json_generator.ast.json",
        "type": "file",
        "artifact_id": "1152cfe0-dabc-425b-88f4-4c46e5002749",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/generators/go_json_generator.struct.json",
        "type": "file",
        "artifact_id": "70a36c8d-dd52-4969-8231-de26f089b143",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/generators/json_generator.ast.json",
        "type": "file",
        "artifact_id": "1e2ceaab-79f8-4197-a8ad-a4bcf417f397",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/generators/json_generator.struct.json",
        "type": "file",
        "artifact_id": "58745593-317e-4432-9d07-7197c8ec5bfd",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/gh_view.ast.json",
        "type": "file",
        "artifact_id": "19f140ec-c77c-4e0d-8be7-e0d85a019e1f",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/gh_view.struct.json",
        "type": "file",
        "artifact_id": "90a59231-6858-4c59-8c84-4f7d04a215de",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/grok.ast.json",
        "type": "file",
        "artifact_id": "5461e25f-ce75-4be9-9358-9855fd5a78f7",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/grok.struct.json",
        "type": "file",
        "artifact_id": "76985b93-8b26-42a6-9cac-4f362a326260",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/json_selector.ast.json",
        "type": "file",
        "artifact_id": "c08d19c4-5aa6-4b5c-99e7-b6474bfe4aff",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/json_selector.struct.json",
        "type": "file",
        "artifact_id": "0e38b1ae-32ca-461f-a1db-a4cb4d3b932d",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/llm_client.ast.json",
        "type": "file",
        "artifact_id": "9dd4aaac-0283-40bb-9e9f-0f014c363d8d",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/llm_client.struct.json",
        "type": "file",
        "artifact_id": "e1694042-f029-433b-b19b-74d3b1ee0f7d",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/metrics_tracker.ast.json",
        "type": "file",
        "artifact_id": "33bb47d1-562d-43e8-a501-35943147767a",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/metrics_tracker.struct.json",
        "type": "file",
        "artifact_id": "b3000301-8000-4ae6-92a6-4ea1b5a8784b",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/modules",
        "type": "directory",
        "artifact_id": "4d4bfd73-f07b-4ba6-984e-e76d81f1968b",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/modules/commands",
        "type": "directory",
        "artifact_id": "80928eb4-4cc8-4a64-a930-ae84a62952ff",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/modules/commands/__init__.ast.json",
        "type": "file",
        "artifact_id": "041b456e-d44e-49d1-8e48-c8ddbce7cc60",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/modules/commands/__init__.struct.json",
        "type": "file",
        "artifact_id": "95a2cc1c-2ce9-4568-ac85-12dd893f4c99",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/modules/commands/metrics.ast.json",
        "type": "file",
        "artifact_id": "8515dd3f-a853-4d4c-aa5b-4733e4afca77",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/modules/commands/metrics.struct.json",
        "type": "file",
        "artifact_id": "25c4789b-2db5-4091-9b72-5c32a9889206",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/modules/commands/queue.ast.json",
        "type": "file",
        "artifact_id": "0d52b175-f6a1-403c-8b99-9767031c5bd3",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/modules/commands/queue.struct.json",
        "type": "file",
        "artifact_id": "b706a0f9-94a5-46e3-b77f-7be502426d9a",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/modules/commands/services.ast.json",
        "type": "file",
        "artifact_id": "afd87be0-6405-47c3-971a-6b1bb1be34f3",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/modules/commands/services.struct.json",
        "type": "file",
        "artifact_id": "658df090-dae1-4e06-98cf-794f26d4cd2c",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/parsers",
        "type": "directory",
        "artifact_id": "185f4be5-39a1-4953-96ec-92800d6fb1e0",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/parsers/__init__.ast.json",
        "type": "file",
        "artifact_id": "422a5d39-cb34-49b6-9299-a14df505ca62",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/parsers/__init__.struct.json",
        "type": "file",
        "artifact_id": "ff448152-c452-46c0-94e2-256e962a201f",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/parsers/go_analyzer.ast.json",
        "type": "file",
        "artifact_id": "1f383375-89b4-4e5f-afac-d104879e83e6",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/parsers/go_analyzer.struct.json",
        "type": "file",
        "artifact_id": "ff167b58-d438-4230-83ba-286f725e6ba4",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/parsers/javascript_parser.ast.json",
        "type": "file",
        "artifact_id": "35bed2a2-144b-4ce7-ae92-a8c28bbcead8",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/parsers/javascript_parser.struct.json",
        "type": "file",
        "artifact_id": "fe139523-9144-4a57-93f8-a81e61798949",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/parsers/python_parser.ast.json",
        "type": "file",
        "artifact_id": "420230af-316d-4a47-94a4-0a27c547470a",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/parsers/python_parser.struct.json",
        "type": "file",
        "artifact_id": "aab1d1ed-c966-48b8-bffc-339f0f1cab23",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/parsers/universal_converter.ast.json",
        "type": "file",
        "artifact_id": "9fcd64ce-e19b-4046-bd6f-5c02ca581fe1",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/parsers/universal_converter.struct.json",
        "type": "file",
        "artifact_id": "cddc2315-d720-43e6-9a23-afe3ff8a384e",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/self_run.ast.json",
        "type": "file",
        "artifact_id": "02d8766e-407e-4be2-a0a5-34ae4a617286",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/self_run.struct.json",
        "type": "file",
        "artifact_id": "8e8932f0-5ce2-449d-ba44-3ccfb4a31fc5",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/templates",
        "type": "directory",
        "artifact_id": "f641a3f6-75f1-4c49-8db5-70c5dfe5f6a1",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/templates/__init__.ast.json",
        "type": "file",
        "artifact_id": "40034df9-bf21-48be-8886-e1a4abe1e680",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/templates/__init__.struct.json",
        "type": "file",
        "artifact_id": "eff446b9-36cb-4b8c-82cc-ef47624cec7d",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/transpiler.ast.json",
        "type": "file",
        "artifact_id": "22f15044-ba19-4dac-af6d-060a59226418",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/transpiler.struct.json",
        "type": "file",
        "artifact_id": "81355d55-d3fc-4232-9c00-d60081141f40",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/validators",
        "type": "directory",
        "artifact_id": "89093014-9c96-41c9-8aa3-8768b1a1a65a",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/validators/__init__.ast.json",
        "type": "file",
        "artifact_id": "5fdb00fd-3e47-4a8d-b47b-e62c568624bc",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/validators/__init__.struct.json",
        "type": "file",
        "artifact_id": "af6170ab-fa5e-4cd1-aa63-21454e2723c7",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/validators/json_validator.ast.json",
        "type": "file",
        "artifact_id": "1f437319-3085-4f16-bbbe-3556fcee83a2",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/validators/json_validator.struct.json",
        "type": "file",
        "artifact_id": "cc777156-9752-4119-8378-a94f1d38faa9",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/workflow_orchestrator.ast.json",
        "type": "file",
        "artifact_id": "a1e80ac4-06de-4d4d-ad13-322981e6323a",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/workflow_orchestrator.struct.json",
        "type": "file",
        "artifact_id": "d78ab1f2-bf02-4e61-9d56-6139c85cc53d",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/workspace.ast.json",
        "type": "file",
        "artifact_id": "ff63ed6f-0055-4d01-9ed5-5569a61e03f7",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmstruct/workspace.struct.json",
        "type": "file",
        "artifact_id": "efa67358-4b26-4cc5-873d-744c63f29f4c",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts",
        "type": "directory",
        "artifact_id": "1038925d-f494-4477-9421-e1d18398e709",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/auto_update_struct.ast.json",
        "type": "file",
        "artifact_id": "31c40fab-19fb-41e8-8455-7687bf6181e7",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/auto_update_struct.struct.json",
        "type": "file",
        "artifact_id": "e115f51e-77af-4339-81fe-5a98ff15ea30",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/collector.ast.json",
        "type": "file",
        "artifact_id": "dbfd9400-35f6-4a34-a424-8c4400864fd0",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/collector.struct.json",
        "type": "file",
        "artifact_id": "942b67f3-477e-447c-811e-f366480bda37",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/create_comprehensive_index.ast.json",
        "type": "file",
        "artifact_id": "ed781717-15a2-472b-ac85-f4a5b488b4cd",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/create_comprehensive_index.struct.json",
        "type": "file",
        "artifact_id": "49804e5f-c35d-4b76-8d5c-f4ce48c1646f",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/create_github_issues.ast.json",
        "type": "file",
        "artifact_id": "115c4873-ebc1-43e8-af1c-eaf41631e3d0",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/create_github_issues.struct.json",
        "type": "file",
        "artifact_id": "9b5093e9-ff8c-4769-b62e-d3801addc536",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/create_tasks_index.ast.json",
        "type": "file",
        "artifact_id": "64742555-1415-467a-836b-e9d0a085f52c",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/create_tasks_index.struct.json",
        "type": "file",
        "artifact_id": "a5300bdd-f8a3-4ad5-b9af-e3a412920668",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/deploy_embedded_files.ast.json",
        "type": "file",
        "artifact_id": "ae53f352-8e29-4711-b3b4-c410657a10c8",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/deploy_embedded_files.struct.json",
        "type": "file",
        "artifact_id": "7bef93c7-280e-44ac-9854-76b38b889d49",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/epic_roadmap_manager.ast.json",
        "type": "file",
        "artifact_id": "7001bdee-7161-4e7e-99eb-ddfdb81fbdec",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/epic_roadmap_manager.struct.json",
        "type": "file",
        "artifact_id": "f5a9ace2-3934-40d8-8646-4a5180315f62",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/export_to_github_projects.ast.json",
        "type": "file",
        "artifact_id": "e46b83bf-d718-4e8d-81d1-c8614557c89b",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/export_to_github_projects.struct.json",
        "type": "file",
        "artifact_id": "2cb248f5-5135-47c8-a9b8-985d3f7c561f",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/fix_github_script.ast.json",
        "type": "file",
        "artifact_id": "60a886bc-4315-485a-9e72-ee59ab9ee337",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/fix_github_script.struct.json",
        "type": "file",
        "artifact_id": "066ed8f5-de3f-4107-880d-15893c11187d",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/fix_hardcoded_usernames.ast.json",
        "type": "file",
        "artifact_id": "ef28aa2b-4399-4e41-a20f-d17e15fa34f0",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/fix_hardcoded_usernames.struct.json",
        "type": "file",
        "artifact_id": "17ca170d-6677-4fe1-a1b8-71fc7ea9cc0d",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/github_sync_manager.ast.json",
        "type": "file",
        "artifact_id": "e3ad3af0-153e-4006-aefb-350b4655a924",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/github_sync_manager.struct.json",
        "type": "file",
        "artifact_id": "d13ce835-9f57-4860-8baf-1be4390ec206",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/github_sync_manager_enhanced.ast.json",
        "type": "file",
        "artifact_id": "5254c72e-779c-4b99-8cdf-11fd563ff6ec",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/github_sync_manager_enhanced.struct.json",
        "type": "file",
        "artifact_id": "fd82ccb2-a591-4f42-aef2-80b3d8df4550",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/process_926_items.ast.json",
        "type": "file",
        "artifact_id": "c95968a2-9dbb-448a-9497-3aa71511b12f",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/process_926_items.struct.json",
        "type": "file",
        "artifact_id": "72a26d67-c67d-4772-a44b-548caacfe160",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/session_cli.ast.json",
        "type": "file",
        "artifact_id": "38c429df-9983-4e3a-94e1-d6bc1ed41fcd",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/session_cli.struct.json",
        "type": "file",
        "artifact_id": "757f5a3d-74e0-4b10-af28-7cb191ed28a0",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/team",
        "type": "directory",
        "artifact_id": "7ba0dfb3-d125-47ec-99c2-59a58bff5328",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/team/__init__.ast.json",
        "type": "file",
        "artifact_id": "2a0b75cf-038c-4092-b6eb-de8727f40783",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/team/__init__.struct.json",
        "type": "file",
        "artifact_id": "a9324be5-1db6-4b39-a882-d1fe36b7dffd",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/validate_epics.ast.json",
        "type": "file",
        "artifact_id": "e1576533-c367-4e9a-b0e2-d158f48f0a5a",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/validate_epics.struct.json",
        "type": "file",
        "artifact_id": "3ba84721-2e80-42f1-bd42-f7455d594c8e",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/validate_json.ast.json",
        "type": "file",
        "artifact_id": "349e1878-60a7-48e9-ac74-76a0b3fc8341",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/validate_json.struct.json",
        "type": "file",
        "artifact_id": "9e89b6b4-b6a1-4a93-a204-8dc5e5d98d0a",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/validate_refs.ast.json",
        "type": "file",
        "artifact_id": "4f419825-6a2c-4942-9f10-1265703e16ce",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/validate_refs.struct.json",
        "type": "file",
        "artifact_id": "bff7b74b-71ed-4080-923e-d4574b144961",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/validate_schemas.ast.json",
        "type": "file",
        "artifact_id": "5a63ab6e-48f8-4107-933f-905960a8e19a",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/scripts/validate_schemas.struct.json",
        "type": "file",
        "artifact_id": "b3638d27-9e92-48e6-b63d-2f39a08d244e",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/start_development.ast.json",
        "type": "file",
        "artifact_id": "6008a172-03c9-418d-8aac-c816333e2363",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/start_development.struct.json",
        "type": "file",
        "artifact_id": "e45e0a5d-687e-4164-86f3-522b8cdab0a3",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/struct_cache_manager.ast.json",
        "type": "file",
        "artifact_id": "fc673f8e-322d-48ba-9340-ce83807ded1e",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/struct_cache_manager.struct.json",
        "type": "file",
        "artifact_id": "2e35e81f-0c1c-4dac-b1e7-9e7f91c4546d",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/tests",
        "type": "directory",
        "artifact_id": "56a3af52-85bf-4c11-963d-900f814d4f14",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/tests/__init__.ast.json",
        "type": "file",
        "artifact_id": "f9b4a7ca-6579-4f00-9796-570111f3b720",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/tests/__init__.struct.json",
        "type": "file",
        "artifact_id": "7302ad9d-04c4-4753-b24d-28d213295909",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/tests/test_self_run.ast.json",
        "type": "file",
        "artifact_id": "a08adc0d-409a-4219-8700-1d29bbe452d7",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/tests/test_self_run.struct.json",
        "type": "file",
        "artifact_id": "9a243420-3b79-41df-aacb-5ef3a1d9bbdb",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/validate_schemas.ast.json",
        "type": "file",
        "artifact_id": "2f9d8d4c-6a9f-42c9-bdbd-58b7921e7d4a",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/validate_schemas.struct.json",
        "type": "file",
        "artifact_id": "88d6680f-14ab-4b09-b3d2-08cd8cd11154",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/validate_sessions.ast.json",
        "type": "file",
        "artifact_id": "6800b545-0a17-4d42-b6d4-83c7a6bf4d2d",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/validate_sessions.struct.json",
        "type": "file",
        "artifact_id": "f6f13a2d-e46c-4d46-ac7c-01a87d7b1a96",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/verify_llm_response.ast.json",
        "type": "file",
        "artifact_id": "14b71110-ec90-4db3-85d2-a897bb3e629d",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/verify_llm_response.struct.json",
        "type": "file",
        "artifact_id": "17e3141f-f1fa-4ee4-9cce-06137ef48d3b",
        "metadata": {}
      },
      {
        "path": ".metrics",
        "type": "directory",
        "artifact_id": "35a17c4c-9064-4068-990a-48b028b68abe",
        "metadata": {}
      },
      {
        "path": ".metrics/aggregate_metrics.json",
        "type": "file",
        "artifact_id": "a6defb96-f457-44e4-94da-5337449eaa61",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_161315.json",
        "type": "file",
        "artifact_id": "b155b0c0-55aa-4171-8d43-a537421745c5",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_161402.json",
        "type": "file",
        "artifact_id": "cc7aeb49-3ef3-476e-9951-94f3c22a9ceb",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_161527.json",
        "type": "file",
        "artifact_id": "32413c15-4341-45b2-a151-461d2ba4e1e7",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_161923.json",
        "type": "file",
        "artifact_id": "9005697d-62c8-448e-8749-df1fdfc567bb",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_162001.json",
        "type": "file",
        "artifact_id": "5ef7d482-1899-485b-ae84-e473b77b7d2f",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_162045.json",
        "type": "file",
        "artifact_id": "1fb90c7c-515d-4e73-8e23-d1c3c2aca157",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_162053.json",
        "type": "file",
        "artifact_id": "19586660-0490-4c70-9006-21e249a0b3e0",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_162217.json",
        "type": "file",
        "artifact_id": "a02ea839-067e-42e7-9944-346f45ff8a66",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_163119.json",
        "type": "file",
        "artifact_id": "57598798-1b91-49cb-9b25-734e7f9a1246",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_163610.json",
        "type": "file",
        "artifact_id": "bc37f752-906d-479e-afe4-33fbead84e34",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_164334.json",
        "type": "file",
        "artifact_id": "d64bb25a-48d5-4d48-bd2d-750027158134",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_164520.json",
        "type": "file",
        "artifact_id": "20091289-16fc-4279-bad0-4a901b8d3b10",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_165247.json",
        "type": "file",
        "artifact_id": "9baae905-3803-4a74-a1a6-20e6d21ae98a",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_165620.json",
        "type": "file",
        "artifact_id": "e4a9bef2-ab42-4d2a-bc25-5821422dfdf0",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_165934.json",
        "type": "file",
        "artifact_id": "a9034567-f67c-4ed6-bba5-1a1b1680d396",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_171259.json",
        "type": "file",
        "artifact_id": "a1d75449-f104-4633-879e-23e46a54162c",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_171358.json",
        "type": "file",
        "artifact_id": "14a0d096-256b-4b4b-abe7-a7fd9074824e",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_171841.json",
        "type": "file",
        "artifact_id": "6a7092e7-6ec9-44aa-bbb4-bffaf16c8172",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_184035.json",
        "type": "file",
        "artifact_id": "05b5c3b6-5126-4624-ab9b-760d8d14f707",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_184747.json",
        "type": "file",
        "artifact_id": "fe730b70-f9e5-402c-a111-2e42de2f91cd",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_190005.json",
        "type": "file",
        "artifact_id": "fae3e830-8d93-4785-8840-377845e037ed",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_190403.json",
        "type": "file",
        "artifact_id": "45e9eb0a-b219-44a7-a83d-f241eefc6580",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_190607.json",
        "type": "file",
        "artifact_id": "2cef3d3e-a97d-464b-a230-8b89b70725a7",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_190649.json",
        "type": "file",
        "artifact_id": "f9c8f879-e162-4ca6-8fb8-e039cab0396f",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_201742.json",
        "type": "file",
        "artifact_id": "86833e2b-9158-4a04-88b5-a243f64029d2",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_202119.json",
        "type": "file",
        "artifact_id": "0fe87fd8-b1f2-45cc-925c-38c8bd7af301",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_203023.json",
        "type": "file",
        "artifact_id": "38af1a70-645b-4c41-bd12-5448985d0ba6",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_203112.json",
        "type": "file",
        "artifact_id": "f4905ffa-9c04-4da4-9f4f-fbbb95018f95",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_203634.json",
        "type": "file",
        "artifact_id": "76cab771-d436-440b-8094-246b960f2f2a",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_204618.json",
        "type": "file",
        "artifact_id": "50b08aaa-a9de-46c4-a269-74f34e8fdbbe",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_204919.json",
        "type": "file",
        "artifact_id": "5baf1a23-a993-493e-81a8-1819f2fd5e44",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_205001.json",
        "type": "file",
        "artifact_id": "d1ef3333-50d8-4c07-9ae2-86d7caf4cbcc",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_205043.json",
        "type": "file",
        "artifact_id": "4df94806-7012-4d1e-827d-b304b8e23f66",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_205821.json",
        "type": "file",
        "artifact_id": "1bbf7ebd-e513-4dc5-a1a9-c07444aad9d4",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_205838.json",
        "type": "file",
        "artifact_id": "8c6c1d23-cb84-48e2-8059-aa951ee16bee",
        "metadata": {}
      },
      {
        "path": ".metrics/session_20250530_222813.json",
        "type": "file",
        "artifact_id": "556af5f2-1f32-4c30-99ed-31dd59427b3d",
        "metadata": {}
      },
      {
        "path": ".private",
        "type": "directory",
        "artifact_id": "c9bc66ce-09b4-43a8-b859-ed28b552e02d",
        "metadata": {}
      },
      {
        "path": ".private/ai_ecosystem_roadmap.md",
        "type": "file",
        "artifact_id": "d3a6033d-bb29-492d-a9a4-2fe01638d038",
        "metadata": {}
      },
      {
        "path": ".private/context_insights.json",
        "type": "file",
        "artifact_id": "acade2b3-ed10-4dd9-96f7-6a0a68ed8bc0",
        "metadata": {}
      },
      {
        "path": ".private/fastapi_design_sheet_01_architecture.md",
        "type": "file",
        "artifact_id": "0297ca87-20ec-45e6-9779-f24412ce79f9",
        "metadata": {}
      },
      {
        "path": ".private/fastapi_design_sheet_02_implementation.md",
        "type": "file",
        "artifact_id": "cdc1c27f-756d-4c07-885f-2a7c8552308d",
        "metadata": {}
      },
      {
        "path": ".private/fastapi_design_sheet_03_migration_plan.md",
        "type": "file",
        "artifact_id": "92f2fe1b-e954-43ef-96c2-774d76e2afbe",
        "metadata": {}
      },
      {
        "path": ".private/fastapi_implementation_plan.md",
        "type": "file",
        "artifact_id": "dfd6d299-3db4-4f45-9604-b52b2becc996",
        "metadata": {}
      },
      {
        "path": ".private/log_insight.py",
        "type": "file",
        "artifact_id": "8673d334-b0af-41a7-9431-b52d05ecf71e",
        "metadata": {}
      },
      {
        "path": ".private/project_assessment_2024-03-26.md",
        "type": "file",
        "artifact_id": "c81ea5be-e9bb-41ca-827c-5f0b89c2f77d",
        "metadata": {}
      },
      {
        "path": ".private/workflow_meta_learning.md",
        "type": "file",
        "artifact_id": "11450f54-db19-4bf3-ab02-70a6d24ac2d4",
        "metadata": {}
      },
      {
        "path": "README.md",
        "type": "file",
        "artifact_id": "b3abbff5-0864-4b83-8a2c-12a93eb4b87f",
        "metadata": {}
      },
      {
        "path": "TODO",
        "type": "directory",
        "artifact_id": "a99386a8-6049-41ad-8a4f-c0b9e8ab7d0b",
        "metadata": {}
      },
      {
        "path": "TODO/ast_fallback.md",
        "type": "file",
        "artifact_id": "99dcabb5-485d-4453-8589-a8b6c27ec6f9",
        "metadata": {}
      },
      {
        "path": "TODO/llmstruct_workflow_meta.md",
        "type": "file",
        "artifact_id": "d0746755-f320-4e2d-974a-5cbd1f3718fd",
        "metadata": {}
      },
      {
        "path": "UNKNOWN.egg-info",
        "type": "directory",
        "artifact_id": "2e82afbd-7904-4e27-b3a0-f0a49a59176e",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration",
        "type": "directory",
        "artifact_id": "4b839d45-192b-44e4-a58c-676bda3b1850",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/INSTALL.md",
        "type": "file",
        "artifact_id": "80243650-7d39-4e91-842b-2a239917c3ae",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/PACKAGE_OVERVIEW.md",
        "type": "file",
        "artifact_id": "2d7b7916-9e19-4d1f-9991-b00d6deeeef4",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/README.md",
        "type": "file",
        "artifact_id": "dcbf804c-a058-402f-988d-647da0928c80",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs",
        "type": "directory",
        "artifact_id": "ca5d738d-25a8-487b-ada6-0ca009f86aa8",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/CURSOR_AI_EXAMPLES.md",
        "type": "file",
        "artifact_id": "c50db840-ad21-4738-a5de-c352cac92621",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/SESSION_INTEGRATION_REPORT.md",
        "type": "file",
        "artifact_id": "9ed29881-c5b2-4ea3-a668-81ee59778526",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/SESSION_MANAGEMENT_GUIDE.md",
        "type": "file",
        "artifact_id": "491ae396-3603-4c7e-92f9-80d144db6210",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/WORKFLOW_CURSOR_INTEGRATION_REPORT.md",
        "type": "file",
        "artifact_id": "3583a6a6-b804-4549-878a-f1db84fe30bd",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/files",
        "type": "directory",
        "artifact_id": "0d745de1-c9c7-4867-95ec-46c63dc3c0cb",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/files/auto_init_ai_system.py",
        "type": "file",
        "artifact_id": "56c2dcf9-d852-4173-b794-ca4e8a45788c",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/scripts",
        "type": "directory",
        "artifact_id": "4a3adef7-6a1d-4261-a598-dfa16a3d5af0",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/scripts/install_ai_integration.py",
        "type": "file",
        "artifact_id": "4aa315bd-8beb-4ef6-9c65-e1794d4a2324",
        "metadata": {}
      },
      {
        "path": "data",
        "type": "directory",
        "artifact_id": "a101be57-9dc5-450d-905c-f18fe88624e3",
        "metadata": {}
      },
      {
        "path": "data/ai_workflow.json",
        "type": "file",
        "artifact_id": "f0705b20-680b-4f57-ac1e-5ef65bd8bc75",
        "metadata": {}
      },
      {
        "path": "data/epic_logs",
        "type": "directory",
        "artifact_id": "8c68abf6-d5dc-45a9-ae1a-d1dd6f93e42b",
        "metadata": {}
      },
      {
        "path": "data/epic_logs/epic_ai_workflow_rules_2024",
        "type": "directory",
        "artifact_id": "71806a73-5866-4dcd-a32f-d6e7c41be79f",
        "metadata": {}
      },
      {
        "path": "data/epic_logs/epic_ai_workflow_rules_2024/archive",
        "type": "directory",
        "artifact_id": "837b658d-5ef7-4dcc-b231-1b05ef37f977",
        "metadata": {}
      },
      {
        "path": "data/epic_logs/epic_session_control_2024",
        "type": "directory",
        "artifact_id": "d89d2c92-f367-4dc3-b7b6-90f0efd1af7a",
        "metadata": {}
      },
      {
        "path": "data/ideas.json",
        "type": "file",
        "artifact_id": "f9c850d3-bd9c-47bd-b89d-132fac7bffdb",
        "metadata": {}
      },
      {
        "path": "data/insights.json",
        "type": "file",
        "artifact_id": "f04ca3d0-905a-453c-ac74-f2c159e3531e",
        "metadata": {}
      },
      {
        "path": "data/project_manifest.json",
        "type": "file",
        "artifact_id": "2e1678f4-1b67-487d-bc0f-eface24cf13f",
        "metadata": {}
      },
      {
        "path": "data/sessions",
        "type": "directory",
        "artifact_id": "c33f82c9-7b00-49b8-961d-591495252f9a",
        "metadata": {}
      },
      {
        "path": "data/sessions/README.md",
        "type": "file",
        "artifact_id": "c1dea1af-1c54-4fd6-8d84-14e7afcf725d",
        "metadata": {}
      },
      {
        "path": "data/sessions/epic_llmstruct_code_quality.json",
        "type": "file",
        "artifact_id": "cd1fc191-3ca5-4231-983e-73975062f419",
        "metadata": {}
      },
      {
        "path": "data/sessions/epic_llmstruct_code_quality_meta.json",
        "type": "file",
        "artifact_id": "6753cb5c-6885-4024-8857-afab1753bf2e",
        "metadata": {}
      },
      {
        "path": "data/sessions/split_initial_structure_2024-06-12.json",
        "type": "file",
        "artifact_id": "9c6ce021-eb6a-4376-a521-64b16a5acd55",
        "metadata": {}
      },
      {
        "path": "data/sessions/worklog.json",
        "type": "file",
        "artifact_id": "c89a5420-96c9-4c94-9c9a-73d0c28d3ad1",
        "metadata": {}
      },
      {
        "path": "data/tasks.json",
        "type": "file",
        "artifact_id": "3fd7b103-eb25-48ca-bcf0-d2a37d0e16f1",
        "metadata": {}
      },
      {
        "path": "data/user_memory.json",
        "type": "file",
        "artifact_id": "e93c6d93-19e9-446e-91e1-b440679c1ace",
        "metadata": {}
      },
      {
        "path": "docker",
        "type": "directory",
        "artifact_id": "a8e97564-4b7c-4d9c-8765-9ff9dd5e1d69",
        "metadata": {}
      },
      {
        "path": "docker/parser_go",
        "type": "directory",
        "artifact_id": "3c253428-4120-403f-8476-9b1b02cd086c",
        "metadata": {}
      },
      {
        "path": "docs",
        "type": "directory",
        "artifact_id": "63e19a03-1958-41d2-aa9c-e240e1bdec01",
        "metadata": {}
      },
      {
        "path": "docs/AI_WORKFLOW_ARCHITECTURE.md",
        "type": "file",
        "artifact_id": "873db5bd-ef21-4dd7-a0ab-5b26175b9dfe",
        "metadata": {}
      },
      {
        "path": "docs/BEST_PRACTICES_LLMSTRUCT.md",
        "type": "file",
        "artifact_id": "ec8b49c1-3995-4630-8cba-817d8c0d749b",
        "metadata": {}
      },
      {
        "path": "docs/CONTINUE_INTEGRATION.md",
        "type": "file",
        "artifact_id": "9d94339b-e151-4208-a901-4a09fa0b132e",
        "metadata": {}
      },
      {
        "path": "docs/ONBOARDING_LLMSTRUCT.md",
        "type": "file",
        "artifact_id": "0e71cb3e-b290-4613-bdeb-f4faef208088",
        "metadata": {}
      },
      {
        "path": "docs/PROMPTS_FOR_AI.md",
        "type": "file",
        "artifact_id": "12ceb8ba-c559-4b07-a484-8f64e5fd5980",
        "metadata": {}
      },
      {
        "path": "docs/WORKFLOW_LLMSTRUCT_EPIC_MANAGEMENT.md",
        "type": "file",
        "artifact_id": "e1d4a078-0d4e-4118-a4b4-804cc42e14ce",
        "metadata": {}
      },
      {
        "path": "docs/WORKFLOW_LLMSTRUCT_PROMPT_ARCH.md",
        "type": "file",
        "artifact_id": "726bb012-e885-4fa7-bade-4120ff7ad7d9",
        "metadata": {}
      },
      {
        "path": "docs/WORKFLOW_METRICS_INTEGRATION.md",
        "type": "file",
        "artifact_id": "1fe8106c-7161-4c74-adf2-9ecda542c272",
        "metadata": {}
      },
      {
        "path": "docs/cli.md",
        "type": "file",
        "artifact_id": "fb8bff33-e295-44d0-8d39-8d0421cc002b",
        "metadata": {}
      },
      {
        "path": "docs/examples",
        "type": "directory",
        "artifact_id": "a4217c6a-827d-4fe5-ab47-2444561673d5",
        "metadata": {}
      },
      {
        "path": "docs/examples/struct.json",
        "type": "file",
        "artifact_id": "21c31d38-2ed9-4f36-9fc3-e373f455a640",
        "metadata": {}
      },
      {
        "path": "docs/hybrid_log.md",
        "type": "file",
        "artifact_id": "ed157f01-0973-47e0-a494-6ccbcd197d39",
        "metadata": {}
      },
      {
        "path": "docs/internal",
        "type": "directory",
        "artifact_id": "2e5c5c04-61c8-4b6a-9f2c-f8b3d2cfdb70",
        "metadata": {}
      },
      {
        "path": "docs/internal/memos",
        "type": "directory",
        "artifact_id": "6ad9cf80-7578-4928-b479-f16b1e17dab6",
        "metadata": {}
      },
      {
        "path": "docs/internal/memos/cursor_automation_note.md",
        "type": "file",
        "artifact_id": "6390fb0c-7e16-4b78-9d1f-9da915f16e68",
        "metadata": {}
      },
      {
        "path": "docs/internal/memos/session_control_epic_memo.md",
        "type": "file",
        "artifact_id": "3bdcfe95-6a4d-46a7-97b7-f5f7d1ac8692",
        "metadata": {}
      },
      {
        "path": "event_log",
        "type": "directory",
        "artifact_id": "c6458944-da85-42b1-a4af-990cea0d6217",
        "metadata": {}
      },
      {
        "path": "examples",
        "type": "directory",
        "artifact_id": "a4cfe768-1477-4028-a700-0ce1dfcb492f",
        "metadata": {}
      },
      {
        "path": "examples/python_project_main.py",
        "type": "file",
        "artifact_id": "b2f8d1bd-b637-4ee0-a5d4-2d94f6d3dd01",
        "metadata": {}
      },
      {
        "path": "examples/python_project_utils.py",
        "type": "file",
        "artifact_id": "c2acdfb3-9dde-4930-af4b-bccb9f4e0759",
        "metadata": {}
      },
      {
        "path": "examples/telegram_bot",
        "type": "directory",
        "artifact_id": "fab0212b-5e1f-422d-b9c1-96889a179d79",
        "metadata": {}
      },
      {
        "path": "examples/telegram_bot/README.md",
        "type": "file",
        "artifact_id": "794c8a8c-d207-4f83-bb0a-6b4646d25361",
        "metadata": {}
      },
      {
        "path": "examples/telegram_bot/bot.py",
        "type": "file",
        "artifact_id": "5b901632-9f14-4e86-adc0-738e750ca37a",
        "metadata": {}
      },
      {
        "path": "examples/telegram_bot/memory_manager.py",
        "type": "file",
        "artifact_id": "2b7558f6-3086-453f-bbcb-af5d03bbd07c",
        "metadata": {}
      },
      {
        "path": "examples/telegram_bot/test_bot.py",
        "type": "file",
        "artifact_id": "55ff56a7-c8a3-4bbb-93f5-7ce7e7aa27da",
        "metadata": {}
      },
      {
        "path": "integrations",
        "type": "directory",
        "artifact_id": "83c7596b-9650-4b59-be83-470543d2b5b8",
        "metadata": {}
      },
      {
        "path": "integrations/continue",
        "type": "directory",
        "artifact_id": "ff8685bd-7f65-4a2f-a916-9c702b3c1f8a",
        "metadata": {}
      },
      {
        "path": "integrations/continue/.continue",
        "type": "directory",
        "artifact_id": "edfd043d-21ca-47fa-9238-e5e279e7fcba",
        "metadata": {}
      },
      {
        "path": "integrations/continue/.continue/config.json",
        "type": "file",
        "artifact_id": "a8719437-cd55-45d7-9613-cd7da89cabbc",
        "metadata": {}
      },
      {
        "path": "integrations/continue/.continue/config.template.json",
        "type": "file",
        "artifact_id": "fcd97d7b-6406-4676-ad35-de30f8fc8888",
        "metadata": {}
      },
      {
        "path": "integrations/continue/CONTINUE_INTEGRATION.md",
        "type": "file",
        "artifact_id": "717ff47e-f42a-4980-b875-92748049dae2",
        "metadata": {}
      },
      {
        "path": "integrations/continue/README.md",
        "type": "file",
        "artifact_id": "04e7037e-57b5-4e88-a470-6293558d81b2",
        "metadata": {}
      },
      {
        "path": "integrations/continue/setup_config.py",
        "type": "file",
        "artifact_id": "511efdf7-8a8b-40ac-b2ed-f14b7d7d3d66",
        "metadata": {}
      },
      {
        "path": "integrations/continue/test_continue_api.py",
        "type": "file",
        "artifact_id": "adb3f9d7-5445-48b4-9378-a4195fbf3127",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot",
        "type": "directory",
        "artifact_id": "74b94157-f5d1-40a5-b544-4f90f85cf0b6",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot/README.md",
        "type": "file",
        "artifact_id": "125b4b1d-143c-4075-83c9-b3fdfb7918f2",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot/bot.py",
        "type": "file",
        "artifact_id": "11c3109e-a17a-4254-a52c-b26d1e3af1ea",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot/memory_manager.py",
        "type": "file",
        "artifact_id": "26768448-399e-438e-8ccd-868a9ca508c7",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot/mp002_progress_bot.py",
        "type": "file",
        "artifact_id": "e414eadc-cab4-4bc7-b9f7-343ce203835b",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot/simple_bot.py",
        "type": "file",
        "artifact_id": "79712839-0808-4b2a-9cc4-00c1bd9a475e",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot/test_bot.py",
        "type": "file",
        "artifact_id": "fc4f1c22-04cd-40e8-b050-d1e477859530",
        "metadata": {}
      },
      {
        "path": "pr_body.md",
        "type": "file",
        "artifact_id": "bc57c2c5-8f6d-4a95-a00f-a1e7640deb1d",
        "metadata": {}
      },
      {
        "path": "project_restructure_plan.md",
        "type": "file",
        "artifact_id": "d072bb4a-f069-45fa-975b-48b6ba11bfad",
        "metadata": {}
      },
      {
        "path": "prompts_collection.json",
        "type": "file",
        "artifact_id": "e824788d-1a75-43dd-b9fa-f0c818f1788d",
        "metadata": {}
      },
      {
        "path": "run_ai_diagnostics.py",
        "type": "file",
        "artifact_id": "70d1e8f9-0930-4d70-919b-bf318c26519c",
        "metadata": {}
      },
      {
        "path": "scripts",
        "type": "directory",
        "artifact_id": "ef7077da-54f7-41ba-a63b-639e308baf17",
        "metadata": {}
      },
      {
        "path": "scripts/log_viewer.py",
        "type": "file",
        "artifact_id": "f85ca638-6b1f-419c-a8a3-66d79f6a39e6",
        "metadata": {}
      },
      {
        "path": "src",
        "type": "directory",
        "artifact_id": "35fc2db9-c98f-4d13-ac48-0935a2cbae05",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index",
        "type": "directory",
        "artifact_id": "b1b8fd70-78f2-4889-8356-2755095b8a71",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct",
        "type": "directory",
        "artifact_id": "90e9417d-67b4-418b-9bcf-21a80b2f0cc3",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/__init__.ast.json",
        "type": "file",
        "artifact_id": "2ecd68b0-c89e-4b3d-b355-caeda85739dc",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/__init__.struct.json",
        "type": "file",
        "artifact_id": "d38a2c5e-1f50-46d1-b4b8-60f7ece144b7",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/__main__.ast.json",
        "type": "file",
        "artifact_id": "f82a689d-69d7-45ab-8bb0-b10cb452d7e0",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/__main__.struct.json",
        "type": "file",
        "artifact_id": "894cedd8-598a-42aa-9dd7-9b83ac6df12f",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/ai_cli_integration.ast.json",
        "type": "file",
        "artifact_id": "cbe8b6f8-3aa5-47d0-8b5d-d37d87124e76",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/ai_cli_integration.struct.json",
        "type": "file",
        "artifact_id": "600f60b7-47f9-4845-a5a0-e34564d26fcc",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/ai_self_awareness.ast.json",
        "type": "file",
        "artifact_id": "51a8dd8d-8f6e-4e96-9fa1-9e7cf3e11ffe",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/ai_self_awareness.struct.json",
        "type": "file",
        "artifact_id": "dc9cd399-ae41-499d-a3e1-809962d18360",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/ai_self_monitor.ast.json",
        "type": "file",
        "artifact_id": "f8a0c2ba-dd59-4be0-8924-5d249d016b7e",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/ai_self_monitor.struct.json",
        "type": "file",
        "artifact_id": "046e9218-48d3-4762-8f08-8f1505c77180",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/ai_workflow_middleware.ast.json",
        "type": "file",
        "artifact_id": "d7a57691-a76c-4c16-a309-7d7cce478f5d",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/ai_workflow_middleware.struct.json",
        "type": "file",
        "artifact_id": "94c0bf0f-f6f0-4f0a-a118-7597a012e718",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/cache.ast.json",
        "type": "file",
        "artifact_id": "2918b6f7-e79f-4d31-ab46-5a0b8386fe31",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/cache.struct.json",
        "type": "file",
        "artifact_id": "6dce3e67-78f2-401d-a37d-b8c639a518c7",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/cli.ast.json",
        "type": "file",
        "artifact_id": "37f029cc-13fb-463f-a9ca-76891283081b",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/cli.struct.json",
        "type": "file",
        "artifact_id": "641b305f-9041-484c-a05f-6a1f30b710dd",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/context_orchestrator.ast.json",
        "type": "file",
        "artifact_id": "fd05f388-f731-477b-a7aa-4605e079e24b",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/context_orchestrator.struct.json",
        "type": "file",
        "artifact_id": "3c296d2d-1b37-47a3-9f1b-6286bd6f3358",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/copilot.ast.json",
        "type": "file",
        "artifact_id": "7eca252a-5fc8-41f6-bfb0-7efe2dc3ecb0",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/copilot.struct.json",
        "type": "file",
        "artifact_id": "c7591d05-2de4-4d71-83bf-57cc1c462c46",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/cursor_ai_bridge.ast.json",
        "type": "file",
        "artifact_id": "f0d14b94-a1e9-4b7a-8f51-abe9484eec82",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/cursor_ai_bridge.struct.json",
        "type": "file",
        "artifact_id": "94f1a806-656a-4616-a2ba-c93929d7d9cf",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/cursor_integration.ast.json",
        "type": "file",
        "artifact_id": "64802d4b-0221-459a-9d97-96c6a7345066",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/cursor_integration.struct.json",
        "type": "file",
        "artifact_id": "8d74fe0d-fe0a-46d8-bca7-39e9516db968",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/generators",
        "type": "directory",
        "artifact_id": "7a223355-f97d-49a4-a58e-da80a44c4fa5",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/generators/__init__.ast.json",
        "type": "file",
        "artifact_id": "0f351d88-265a-48e2-9b7f-82015f2fbaf8",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/generators/__init__.struct.json",
        "type": "file",
        "artifact_id": "2d0a6c62-5193-4711-856f-f7775d18ddb4",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/generators/go_json_generator.ast.json",
        "type": "file",
        "artifact_id": "8b16f6b2-53cb-4564-a40a-001269b4dd65",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/generators/go_json_generator.struct.json",
        "type": "file",
        "artifact_id": "a475b4b8-7cc2-4828-9fd8-ad0bb1506f1d",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/generators/json_generator.ast.json",
        "type": "file",
        "artifact_id": "bed50ca5-ab2e-4e0f-9408-af82ad5eb12a",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/generators/json_generator.struct.json",
        "type": "file",
        "artifact_id": "5b671917-a69f-42ea-8836-107b1ab6fd16",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/gh_view.ast.json",
        "type": "file",
        "artifact_id": "2d0242e8-1196-4822-ac5b-b507e8db26e6",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/gh_view.struct.json",
        "type": "file",
        "artifact_id": "bc8ebc33-f339-47ac-9da4-e1048b5e09e8",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/grok.ast.json",
        "type": "file",
        "artifact_id": "d0d15139-30be-4c24-bf22-5f2355768b68",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/grok.struct.json",
        "type": "file",
        "artifact_id": "e7a2a48c-3ecd-494b-9832-fd5b1d99e3d0",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/json_selector.ast.json",
        "type": "file",
        "artifact_id": "ed9dae88-ed6e-44e2-b1c0-715c5d19b721",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/json_selector.struct.json",
        "type": "file",
        "artifact_id": "d7f4f4b1-b186-4b78-b427-abc3ca4bf419",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/llm_client.ast.json",
        "type": "file",
        "artifact_id": "090f017e-c614-4151-b3b5-f76105ab0eed",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/llm_client.struct.json",
        "type": "file",
        "artifact_id": "56cac6b2-1cd4-454a-8a25-e38d2e72d28a",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/metrics_tracker.ast.json",
        "type": "file",
        "artifact_id": "6de413eb-366a-46c9-b9c0-e747042f9689",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/metrics_tracker.struct.json",
        "type": "file",
        "artifact_id": "5843c3c8-aff7-48b7-8d1a-090428c575b9",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/modules",
        "type": "directory",
        "artifact_id": "701fe790-72c9-4de7-85f6-c26274ed41ec",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/modules/commands",
        "type": "directory",
        "artifact_id": "ae9c1f83-23a4-41ae-bd80-cb558351db0e",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/modules/commands/__init__.ast.json",
        "type": "file",
        "artifact_id": "f2d75b0e-5ff8-4522-bfd7-ea5c97d11b1d",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/modules/commands/__init__.struct.json",
        "type": "file",
        "artifact_id": "bce694fb-f0e7-4401-9601-cd765c13a210",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/modules/commands/metrics.ast.json",
        "type": "file",
        "artifact_id": "2e433887-783a-4b68-ab0a-58c4a7885842",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/modules/commands/metrics.struct.json",
        "type": "file",
        "artifact_id": "52ad3fe8-60cb-4b17-befc-7af22a08ee79",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/modules/commands/queue.ast.json",
        "type": "file",
        "artifact_id": "86674881-a1a6-473e-98ae-02a2b8fa2350",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/modules/commands/queue.struct.json",
        "type": "file",
        "artifact_id": "78b6d7a0-da00-48dc-9da2-d81abb0afe54",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/modules/commands/services.ast.json",
        "type": "file",
        "artifact_id": "352e0828-ca53-43b9-ab4c-12d0c73bb668",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/modules/commands/services.struct.json",
        "type": "file",
        "artifact_id": "50298c9f-38b1-49f4-86c7-5ee96c51f647",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/parsers",
        "type": "directory",
        "artifact_id": "afb06d55-3788-4629-ad7c-abd1d2ad5609",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/parsers/__init__.ast.json",
        "type": "file",
        "artifact_id": "4d9f98d0-c94f-49a2-8652-6aef3cfd1423",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/parsers/__init__.struct.json",
        "type": "file",
        "artifact_id": "15894669-73d6-4914-b546-c5dc79f4be15",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/parsers/go_analyzer.ast.json",
        "type": "file",
        "artifact_id": "3e62d5dd-6a4b-43b2-bba7-2afa116f497b",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/parsers/go_analyzer.struct.json",
        "type": "file",
        "artifact_id": "ca352a97-b2da-48e0-a625-379ea0657215",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/parsers/javascript_parser.ast.json",
        "type": "file",
        "artifact_id": "a4f18f6e-ad5d-41c3-939c-546c97ad4d42",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/parsers/javascript_parser.struct.json",
        "type": "file",
        "artifact_id": "0bac968d-a394-4543-bea4-c9180b2e8407",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/parsers/python_parser.ast.json",
        "type": "file",
        "artifact_id": "ed23f177-6f2d-43a9-849f-63323d1ce55e",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/parsers/python_parser.struct.json",
        "type": "file",
        "artifact_id": "f5b0eb53-13bd-4bde-bf66-476b13725d3d",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/parsers/universal_converter.ast.json",
        "type": "file",
        "artifact_id": "39812ceb-09a6-40ef-a996-01c80b9886bd",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/parsers/universal_converter.struct.json",
        "type": "file",
        "artifact_id": "d9288297-6d63-4a17-a52f-bf9539ef9639",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/self_run.ast.json",
        "type": "file",
        "artifact_id": "0e7d7a5e-6f37-4b2c-a28c-437c158c389a",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/self_run.struct.json",
        "type": "file",
        "artifact_id": "99184233-8119-4d46-adcc-7bfd4ea1cc18",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/templates",
        "type": "directory",
        "artifact_id": "b894a386-e14c-4eff-8d0e-42ba0c527054",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/templates/__init__.ast.json",
        "type": "file",
        "artifact_id": "29f2cd02-05fd-4fd8-84a3-26c13c496dbb",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/templates/__init__.struct.json",
        "type": "file",
        "artifact_id": "563d0b5c-a6de-413d-9fe1-061bceba7b0e",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/transpiler.ast.json",
        "type": "file",
        "artifact_id": "29d00dbd-80cb-477a-9e4b-812870eaa079",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/transpiler.struct.json",
        "type": "file",
        "artifact_id": "8f647b68-da9d-4b52-bfcb-cf66c176f61d",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/validators",
        "type": "directory",
        "artifact_id": "b57a0cae-4453-43cf-9ca1-3e73bf62dd9e",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/validators/__init__.ast.json",
        "type": "file",
        "artifact_id": "39300417-9c0a-425e-9a18-b672556d910a",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/validators/__init__.struct.json",
        "type": "file",
        "artifact_id": "94fef3d8-95c7-4cbd-8571-6b2e53693bdf",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/validators/json_validator.ast.json",
        "type": "file",
        "artifact_id": "1cb99afa-bbde-4fec-ad2b-08adff19c20f",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/validators/json_validator.struct.json",
        "type": "file",
        "artifact_id": "e11daec4-e832-480c-bd33-95ef59bba63a",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/workflow_orchestrator.ast.json",
        "type": "file",
        "artifact_id": "f805b711-901a-41af-8d8e-5e6e6b25ae70",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/workflow_orchestrator.struct.json",
        "type": "file",
        "artifact_id": "9d826357-63d2-4331-90d8-06cc95c5b895",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/workspace.ast.json",
        "type": "file",
        "artifact_id": "3ba96b6f-69d6-4550-8993-e03687461d30",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmstruct/workspace.struct.json",
        "type": "file",
        "artifact_id": "0c240852-22c2-48ac-8cfe-ac43bcc51fa3",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts",
        "type": "directory",
        "artifact_id": "7c062cce-ef8b-41a5-a600-6b54a24f7071",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/auto_update_struct.ast.json",
        "type": "file",
        "artifact_id": "5954d78e-f345-413d-90fe-7cebeac63fec",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/auto_update_struct.struct.json",
        "type": "file",
        "artifact_id": "8e9431f3-16d6-4e55-887e-6f64126858a7",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/collector.ast.json",
        "type": "file",
        "artifact_id": "33fb5e73-ccca-4524-be11-b15c44dace08",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/collector.struct.json",
        "type": "file",
        "artifact_id": "323021d3-9179-4b6f-84a1-0eacb41d3415",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/create_comprehensive_index.ast.json",
        "type": "file",
        "artifact_id": "4315c043-fe79-46b4-9249-b91f99585e2a",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/create_comprehensive_index.struct.json",
        "type": "file",
        "artifact_id": "6c92e073-420e-415a-b4e0-f7b3d9ec53ac",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/create_github_issues.ast.json",
        "type": "file",
        "artifact_id": "06bea97d-0ed1-4300-9f8d-a2aab750dd9d",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/create_github_issues.struct.json",
        "type": "file",
        "artifact_id": "ae476258-eabb-4fc5-ba75-485b170e3d4f",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/create_tasks_index.ast.json",
        "type": "file",
        "artifact_id": "ceea8147-75f7-427a-90c6-941feb089e15",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/create_tasks_index.struct.json",
        "type": "file",
        "artifact_id": "fe8fafc4-bc7c-4c1e-9e02-5bc4b503ce96",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/deploy_embedded_files.ast.json",
        "type": "file",
        "artifact_id": "3c53bca0-df1d-4a9d-92fd-fa0e2040084a",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/deploy_embedded_files.struct.json",
        "type": "file",
        "artifact_id": "c235491e-8d2d-40e4-8953-f22a81898f85",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/epic_roadmap_manager.ast.json",
        "type": "file",
        "artifact_id": "5a15fbfe-5b9e-4eee-912f-ad3869c15a19",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/epic_roadmap_manager.struct.json",
        "type": "file",
        "artifact_id": "1ca6fcb9-22a1-42f8-a3c5-9cb6441de48f",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/export_to_github_projects.ast.json",
        "type": "file",
        "artifact_id": "eb80f534-75e4-455a-b1d6-81bef5d57a8d",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/export_to_github_projects.struct.json",
        "type": "file",
        "artifact_id": "6c1d2898-d070-4dec-aac8-81a7ca7869b5",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/fix_github_script.ast.json",
        "type": "file",
        "artifact_id": "c623aad7-cc78-4ffe-a77a-83c9914cc708",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/fix_github_script.struct.json",
        "type": "file",
        "artifact_id": "677e9512-57af-48f3-bb1b-12572901f7a1",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/fix_hardcoded_usernames.ast.json",
        "type": "file",
        "artifact_id": "99692a29-846d-4f5f-a425-d198e42974ab",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/fix_hardcoded_usernames.struct.json",
        "type": "file",
        "artifact_id": "992bd07b-0f13-4b94-a97b-a28ed922f140",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/github_sync_manager.ast.json",
        "type": "file",
        "artifact_id": "5e7e32be-30d3-4aa7-ab85-7e8be6471f71",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/github_sync_manager.struct.json",
        "type": "file",
        "artifact_id": "4e774698-203a-49d7-898b-2a9e3171ebd1",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/github_sync_manager_enhanced.ast.json",
        "type": "file",
        "artifact_id": "03a53e9c-ffbe-4eee-ab6e-75bb80bccb46",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/github_sync_manager_enhanced.struct.json",
        "type": "file",
        "artifact_id": "00503542-ba00-4610-b874-76dc50b3bb62",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/process_926_items.ast.json",
        "type": "file",
        "artifact_id": "e6304305-eca5-4079-9562-1b4d28f8615e",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/process_926_items.struct.json",
        "type": "file",
        "artifact_id": "16679e00-798e-48ff-a7d2-9a8eb4e333db",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/session_cli.ast.json",
        "type": "file",
        "artifact_id": "8c4e0643-4e97-4083-9259-0e5a7c10cef8",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/session_cli.struct.json",
        "type": "file",
        "artifact_id": "e4f2581b-cc64-4af5-b8ec-1247a42b36d6",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/team",
        "type": "directory",
        "artifact_id": "d787ee60-a90d-4989-a5aa-58e63df8e821",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/team/__init__.ast.json",
        "type": "file",
        "artifact_id": "e09176ca-b6e2-46ef-b6d9-0d48625838f8",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/team/__init__.struct.json",
        "type": "file",
        "artifact_id": "f3a3206c-0b10-4a4f-8707-fdda141e0e51",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/validate_epics.ast.json",
        "type": "file",
        "artifact_id": "1ed70e34-829e-46c2-a706-6f6f3f28179f",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/validate_epics.struct.json",
        "type": "file",
        "artifact_id": "8b9d5f2a-e77a-4548-aef5-4e02da263789",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/validate_json.ast.json",
        "type": "file",
        "artifact_id": "9cecf39e-3c75-4d3e-b8eb-0be8064edac1",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/validate_json.struct.json",
        "type": "file",
        "artifact_id": "2c1bcf56-e520-4943-ba6c-9238ac8a1a07",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/validate_refs.ast.json",
        "type": "file",
        "artifact_id": "9c71d81f-60a4-46cc-8e34-3cf2f109bf4e",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/validate_refs.struct.json",
        "type": "file",
        "artifact_id": "04e945f7-14a0-46b1-8814-2cabe8389325",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/validate_schemas.ast.json",
        "type": "file",
        "artifact_id": "aa1beb8d-7af5-4324-ba59-ae9b6b6eb8e7",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/scripts/validate_schemas.struct.json",
        "type": "file",
        "artifact_id": "6800ecd6-a20f-4d24-880b-d8e1697f3498",
        "metadata": {}
      },
      {
        "path": "src/llmstruct",
        "type": "directory",
        "artifact_id": "af437249-6044-4814-b1bc-3afc19dcccc7",
        "metadata": {}
      },
      {
        "path": "src/llmstruct.egg-info",
        "type": "directory",
        "artifact_id": "4a218ab4-c111-4026-a411-7c940d8da681",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__init__.py",
        "type": "file",
        "artifact_id": "0eb90815-76cd-4b96-8da3-e8af4b8d4bdc",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__main__.py",
        "type": "file",
        "artifact_id": "e06237db-a5b7-42d8-8e19-56eb43bc0d3e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_cli_integration.py",
        "type": "file",
        "artifact_id": "e7c1eb17-9754-4390-b30e-9210f4b8cbde",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_self_awareness.py",
        "type": "file",
        "artifact_id": "9c8eed7d-5641-4678-9fc9-ac89cc6d276d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_self_monitor.py",
        "type": "file",
        "artifact_id": "4737a894-e7f1-4876-bdb2-e5937e435f37",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_workflow_middleware.py",
        "type": "file",
        "artifact_id": "6982ef5e-c28f-4b61-b03b-1cc37fd9739b",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cache.py",
        "type": "file",
        "artifact_id": "7e88df2a-de84-4f48-a251-d6f03540dfb3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli.py",
        "type": "file",
        "artifact_id": "f09d0a9b-455f-4974-bc02-f9adece00188",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/context_orchestrator.py",
        "type": "file",
        "artifact_id": "0edb9a53-d1ca-4907-8bc7-fff21ac4139f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/copilot.py",
        "type": "file",
        "artifact_id": "92eb5d81-6a5b-4497-89ec-26f6ad834266",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cursor_ai_bridge.py",
        "type": "file",
        "artifact_id": "6e3b7643-921f-4001-af86-f95c3453f000",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cursor_integration.py",
        "type": "file",
        "artifact_id": "1da9f9d4-2aeb-405f-9914-c3691443c181",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators",
        "type": "directory",
        "artifact_id": "11a72e4c-c923-4734-8636-bff67bb09191",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/__init__.py",
        "type": "file",
        "artifact_id": "d77ba725-cb5d-4229-91b0-0dfdbe658114",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/go_json_generator.py",
        "type": "file",
        "artifact_id": "f8b51a88-49a9-4b11-83cc-404f3654cd71",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/json_generator.py",
        "type": "file",
        "artifact_id": "5b806f2a-e2cc-455e-b5e1-cb37418dccc9",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/gh_view.py",
        "type": "file",
        "artifact_id": "a7ca9ba3-237e-49d8-8f51-8384b70c2b56",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/grok.py",
        "type": "file",
        "artifact_id": "b1e48d2d-d842-45d4-9753-7dfb371ac59d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/json_selector.py",
        "type": "file",
        "artifact_id": "dc48b044-2c5b-497b-b866-d10a586e8d6e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/llm_client.py",
        "type": "file",
        "artifact_id": "30397dbe-918c-4834-9f32-d6824747abe9",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/metrics_tracker.py",
        "type": "file",
        "artifact_id": "623f1107-471c-47c2-9f3b-df11fda9dcaf",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules",
        "type": "directory",
        "artifact_id": "bced5623-493d-46fe-bf67-9803d1825645",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules/commands",
        "type": "directory",
        "artifact_id": "22836666-c56d-41e3-9e9c-e0d800425998",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules/commands/__init__.py",
        "type": "file",
        "artifact_id": "fb3e2be0-e01f-4b84-a76e-e940a49e8611",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules/commands/metrics.py",
        "type": "file",
        "artifact_id": "dae8b80b-b70e-44e0-a306-aa41208865eb",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules/commands/queue.py",
        "type": "file",
        "artifact_id": "a2f2b0b4-f727-40ee-807c-5ad7b06ec8f4",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules/commands/services.py",
        "type": "file",
        "artifact_id": "8e739507-d683-4721-bb55-ef6edefa8907",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers",
        "type": "directory",
        "artifact_id": "b323cb8a-ff7c-468d-af47-4515fc3ff6ea",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/__init__.py",
        "type": "file",
        "artifact_id": "c0b89132-afb1-422a-bc72-b707afed6f3f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/go_analyzer.py",
        "type": "file",
        "artifact_id": "ce4b7963-6b5a-40f2-8949-26d827be5da5",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/javascript_parser.py",
        "type": "file",
        "artifact_id": "2d3f38e2-a09a-4440-bf78-ab6523ef1aae",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/python_parser.py",
        "type": "file",
        "artifact_id": "13b7a61b-fd1a-4930-a89d-e62a59d78b19",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/universal_converter.py",
        "type": "file",
        "artifact_id": "74e1b707-35bc-4469-bd31-eb13172a3e17",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/self_run.py",
        "type": "file",
        "artifact_id": "a8a79d5c-fb84-4a77-92e5-b302d5359553",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates",
        "type": "directory",
        "artifact_id": "f3792162-ebf1-4c62-a147-e5066727cab0",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates/__init__.py",
        "type": "file",
        "artifact_id": "d73a0815-02d9-4afe-98da-2c86960549b8",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/transpiler.py",
        "type": "file",
        "artifact_id": "0abb5108-fbb3-41b2-812a-806f6bbe6534",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators",
        "type": "directory",
        "artifact_id": "76209df5-9ba4-46c2-9653-65a40cd01c54",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/__init__.py",
        "type": "file",
        "artifact_id": "83426b04-9f57-4a1e-8d7e-d6fe08bb1fd2",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/json_validator.py",
        "type": "file",
        "artifact_id": "de537cda-3829-48d2-818a-aa7b2fef4934",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/workflow_orchestrator.py",
        "type": "file",
        "artifact_id": "1965e7ef-b193-4fb9-bab5-41a9f5d578ee",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/workspace.py",
        "type": "file",
        "artifact_id": "08251d19-5238-4838-a98d-19b8562a03f6",
        "metadata": {}
      },
      {
        "path": "src/scripts",
        "type": "directory",
        "artifact_id": "98b60bfb-7997-49c4-bfdd-e98a45475ca0",
        "metadata": {}
      },
      {
        "path": "src/scripts/auto_update_struct.py",
        "type": "file",
        "artifact_id": "e201fda0-dfa4-4458-9cfb-9d73465cc51c",
        "metadata": {}
      },
      {
        "path": "src/scripts/collector.py",
        "type": "file",
        "artifact_id": "fbfe5c12-df63-4758-b98c-4f207bfb0e59",
        "metadata": {}
      },
      {
        "path": "src/scripts/create_comprehensive_index.py",
        "type": "file",
        "artifact_id": "b41531c8-255d-4d15-b64b-fb7c9a0fab55",
        "metadata": {}
      },
      {
        "path": "src/scripts/create_github_issues.py",
        "type": "file",
        "artifact_id": "96dc25e6-f066-48d5-bc3b-fe368f1b9d8e",
        "metadata": {}
      },
      {
        "path": "src/scripts/create_tasks_index.py",
        "type": "file",
        "artifact_id": "f894ea2e-3f8a-4b42-9c9e-34ea52e71921",
        "metadata": {}
      },
      {
        "path": "src/scripts/deploy_embedded_files.py",
        "type": "file",
        "artifact_id": "348ea486-b115-4644-8159-4d93b2c4f915",
        "metadata": {}
      },
      {
        "path": "src/scripts/epic_roadmap_manager.py",
        "type": "file",
        "artifact_id": "7516f440-190f-4b85-a9e7-5f99a536b195",
        "metadata": {}
      },
      {
        "path": "src/scripts/export_to_github_projects.py",
        "type": "file",
        "artifact_id": "fd074a06-6f42-4c71-8240-751202161da0",
        "metadata": {}
      },
      {
        "path": "src/scripts/fix_github_script.py",
        "type": "file",
        "artifact_id": "982c1c42-af8c-4fed-bff1-e0deb9dc51dc",
        "metadata": {}
      },
      {
        "path": "src/scripts/fix_hardcoded_usernames.py",
        "type": "file",
        "artifact_id": "4a4b794d-fcc1-400d-9b7d-596a4ce09bcd",
        "metadata": {}
      },
      {
        "path": "src/scripts/github_sync_manager.py",
        "type": "file",
        "artifact_id": "bda40732-7b3f-4e9a-b51d-cd589fcea72c",
        "metadata": {}
      },
      {
        "path": "src/scripts/github_sync_manager_enhanced.py",
        "type": "file",
        "artifact_id": "38b3877c-dc18-45ac-a506-f82ae556773f",
        "metadata": {}
      },
      {
        "path": "src/scripts/old",
        "type": "directory",
        "artifact_id": "225775c0-b8b0-4cdd-9ce5-d1c9e0782a9f",
        "metadata": {}
      },
      {
        "path": "src/scripts/process_926_items.py",
        "type": "file",
        "artifact_id": "aeeb0513-cb2b-4108-8166-e1f25204ce16",
        "metadata": {}
      },
      {
        "path": "src/scripts/session_cli.py",
        "type": "file",
        "artifact_id": "33c8a9b0-af07-420e-86dc-0a8165f91708",
        "metadata": {}
      },
      {
        "path": "src/scripts/team",
        "type": "directory",
        "artifact_id": "d0e4d70c-77b9-49d2-a0f6-7c845795bda6",
        "metadata": {}
      },
      {
        "path": "src/scripts/team/__init__.py",
        "type": "file",
        "artifact_id": "f9db8489-7206-41aa-93ea-07f2070adb71",
        "metadata": {}
      },
      {
        "path": "src/scripts/validate_epics.py",
        "type": "file",
        "artifact_id": "4c92e670-1758-4b13-b7b6-dfea13ac6687",
        "metadata": {}
      },
      {
        "path": "src/scripts/validate_json.py",
        "type": "file",
        "artifact_id": "e2038280-b8f7-4610-bcf5-b499dfc60fd4",
        "metadata": {}
      },
      {
        "path": "src/scripts/validate_refs.py",
        "type": "file",
        "artifact_id": "d3ee52e2-3f0a-47eb-95e9-be62e360e31b",
        "metadata": {}
      },
      {
        "path": "src/scripts/validate_schemas.py",
        "type": "file",
        "artifact_id": "a313af49-9559-4bb7-a007-0fe1dffed71b",
        "metadata": {}
      },
      {
        "path": "src/struct.json",
        "type": "file",
        "artifact_id": "b4dcc9c8-2124-4256-b4f2-46ccfb4391cb",
        "metadata": {}
      },
      {
        "path": "start_development.py",
        "type": "file",
        "artifact_id": "e2b10a01-40dc-40ce-abd0-1138630a9702",
        "metadata": {}
      },
      {
        "path": "struct.json",
        "type": "file",
        "artifact_id": "7a3a8bb8-128f-4d2b-b589-020158f41f0f",
        "metadata": {}
      },
      {
        "path": "struct_cache_manager.py",
        "type": "file",
        "artifact_id": "5cd733ff-ef88-4dac-b2c6-653102bbf128",
        "metadata": {}
      },
      {
        "path": "validate_schemas.py",
        "type": "file",
        "artifact_id": "745acfe7-ae10-4d56-84eb-5228f5046f64",
        "metadata": {}
      },
      {
        "path": "validate_sessions.py",
        "type": "file",
        "artifact_id": "5942f93f-2898-4b14-bd5f-2e838cbce72b",
        "metadata": {}
      },
      {
        "path": "workspace_state.json",
        "type": "file",
        "artifact_id": "308999d6-4a3a-4b69-b7da-51df3e5811a2",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "Session Schema Validation Script for llmstruct",
      "artifact_id": "b1580f70-7129-464c-8824-04005763b033"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "JSON Schema Validation Script for llmstruct",
      "artifact_id": "051a52b0-8d59-45f8-b21f-9617a3d03c7f"
    },
    {
      "module_id": "run_ai_diagnostics",
      "path": "run_ai_diagnostics.py",
      "category": "core",
      "functions": 19,
      "classes": 0,
      "summary": "Comprehensive AI Self-Awareness Diagnostics Runner",
      "artifact_id": "9f1ff3c2-9035-4667-a59a-7d67be3fb49d"
    },
    {
      "module_id": "start_development",
      "path": "start_development.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "LLMStruct Development Startup Script",
      "artifact_id": "db310644-08bc-487a-b211-051373b2998c"
    },
    {
      "module_id": "struct_cache_manager",
      "path": "struct_cache_manager.py",
      "category": "core",
      "functions": 12,
      "classes": 1,
      "summary": "\ud83d\ude80 Smart struct.json Cache Manager for [code] Mode",
      "artifact_id": "37f32cda-f3bd-4383-b918-a8fd875a824d"
    },
    {
      "module_id": "src.scripts.session_cli",
      "path": "src/scripts/session_cli.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Session Management CLI",
      "artifact_id": "40fac56b-0c5d-4817-a31f-86e6e406c132"
    },
    {
      "module_id": "src.scripts.auto_update_struct",
      "path": "src/scripts/auto_update_struct.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Automatic struct.json update script",
      "artifact_id": "0d00c3f0-1eed-416c-834f-519d513ab9b4"
    },
    {
      "module_id": "src.scripts.fix_hardcoded_usernames",
      "path": "src/scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "functions": 12,
      "classes": 2,
      "summary": "Fix Hardcoded Usernames Script",
      "artifact_id": "ef7b3a02-56e1-438b-8bed-aca0af1dc197"
    },
    {
      "module_id": "src.scripts.create_github_issues",
      "path": "src/scripts/create_github_issues.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "GitHub Issues Creator for AI-Dogfooding Project",
      "artifact_id": "eb055582-6858-454c-8169-420ae2416b8e"
    },
    {
      "module_id": "src.scripts.export_to_github_projects",
      "path": "src/scripts/export_to_github_projects.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Export script for GitHub Projects integration",
      "artifact_id": "9b2cb520-cd97-47e5-b302-fa9e37c5ef0c"
    },
    {
      "module_id": "src.scripts.validate_schemas",
      "path": "src/scripts/validate_schemas.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "e1ac7213-5947-46c2-8ade-18649c71a45a"
    },
    {
      "module_id": "src.scripts.process_926_items",
      "path": "src/scripts/process_926_items.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "926 Items Processing Script - Updated Implementation",
      "artifact_id": "adcb8bde-67f5-4c66-866d-e7832f178346"
    },
    {
      "module_id": "src.scripts.fix_github_script",
      "path": "src/scripts/fix_github_script.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Quick fix for GitHub issues creation script",
      "artifact_id": "4a3a3272-85d7-4fa2-90e9-8bb2685a235a"
    },
    {
      "module_id": "src.scripts.github_sync_manager",
      "path": "src/scripts/github_sync_manager.py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub",
      "artifact_id": "0d282193-616c-4f7c-8688-f58a8da885f8"
    },
    {
      "module_id": "src.scripts.create_comprehensive_index",
      "path": "src/scripts/create_comprehensive_index.py",
      "category": "core",
      "functions": 37,
      "classes": 2,
      "summary": "Comprehensive Project Index Creator",
      "artifact_id": "62d8e87a-346f-420b-b68f-00ef062c8238"
    },
    {
      "module_id": "src.scripts.validate_json",
      "path": "src/scripts/validate_json.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "JSON Validation Script",
      "artifact_id": "ab8943fb-31ad-4a79-93cb-5602522108f8"
    },
    {
      "module_id": "src.scripts.validate_refs",
      "path": "src/scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "1462ac9c-c75b-455e-920f-772edf307d20"
    },
    {
      "module_id": "src.scripts.create_tasks_index",
      "path": "src/scripts/create_tasks_index.py",
      "category": "core",
      "functions": 18,
      "classes": 3,
      "summary": "Tasks Index Creator",
      "artifact_id": "307c1e01-6411-4833-a523-43e08a2971ad"
    },
    {
      "module_id": "src.scripts.github_sync_manager_enhanced",
      "path": "src/scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "functions": 28,
      "classes": 3,
      "summary": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout",
      "artifact_id": "b2955eb1-d259-42e8-b92d-b56f27b07aa5"
    },
    {
      "module_id": "src.scripts.collector",
      "path": "src/scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "b387ddbe-92a5-4998-ab82-3702fc98dbca"
    },
    {
      "module_id": "src.scripts.validate_epics",
      "path": "src/scripts/validate_epics.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "Epic Data Validator",
      "artifact_id": "3e5770d4-1b6b-4a4f-b3df-384fa945ba82"
    },
    {
      "module_id": "src.scripts.epic_roadmap_manager",
      "path": "src/scripts/epic_roadmap_manager.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439",
      "artifact_id": "7828aef9-a5e0-4576-8ec2-19700815a25a"
    },
    {
      "module_id": "src.scripts.deploy_embedded_files",
      "path": "src/scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "b066669e-c4ee-4d19-822f-35b570e70c40"
    },
    {
      "module_id": "src.scripts.team.__init__",
      "path": "src/scripts/team/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "8115e8b6-da49-4aaa-a9c4-0df7cf082782"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "functions": 20,
      "classes": 1,
      "summary": "Workspace State & Mode Management System",
      "artifact_id": "fd65182c-eeea-4dd5-8b2e-9daf04d2246f"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "3ca01bec-b3f5-470e-91f7-ca8aa31df3fe"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "2df03f73-0d83-430b-9727-0ec4288fc62f"
    },
    {
      "module_id": "src.llmstruct.workflow_orchestrator",
      "path": "src/llmstruct/workflow_orchestrator.py",
      "category": "core",
      "functions": 29,
      "classes": 5,
      "summary": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture",
      "artifact_id": "00abc24e-0d49-4314-90b8-c302fc6c31a2"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "GitHub visualization/graph feature (gh-view-v1)",
      "artifact_id": "6379a938-9821-42d4-bdfd-45e576bc0694"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "e62996c2-ade7-4f7a-98f6-5520ba655dca"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "functions": 26,
      "classes": 5,
      "summary": "LLMStruct Copilot Integration Module",
      "artifact_id": "b5c0da1a-6a0e-4d05-b369-ff914726a5fd"
    },
    {
      "module_id": "src.llmstruct.ai_workflow_middleware",
      "path": "src/llmstruct/ai_workflow_middleware.py",
      "category": "core",
      "functions": 22,
      "classes": 4,
      "summary": "AI Workflow Middleware - Forces AI Integration with LLMStruct",
      "artifact_id": "e3e9ff19-dfbb-44b9-a37d-aad7251f027b"
    },
    {
      "module_id": "src.llmstruct.ai_cli_integration",
      "path": "src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "functions": 14,
      "classes": 1,
      "summary": "AI Self-Awareness CLI Integration Module",
      "artifact_id": "c2e26677-8cc8-4b9b-964d-74cc462bf6be"
    },
    {
      "module_id": "src.llmstruct.cursor_integration",
      "path": "src/llmstruct/cursor_integration.py",
      "category": "core",
      "functions": 22,
      "classes": 6,
      "summary": "Cursor IDE Integration Module",
      "artifact_id": "ab9fce6f-0d81-44d6-987a-c9556ad7e06a"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "834addb3-40fd-470a-9cdd-8d732a7dd6bb"
    },
    {
      "module_id": "src.llmstruct.transpiler",
      "path": "src/llmstruct/transpiler.py",
      "category": "core",
      "functions": 10,
      "classes": 3,
      "summary": "AI-Powered Universal Transpiler",
      "artifact_id": "f621678e-254a-462b-ba82-1fb1ddad0c36"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "759cb6f5-f07b-4391-8d6b-412754c3204e"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "5ee1a46d-85a8-47ea-9717-62a97ba5d441"
    },
    {
      "module_id": "src.llmstruct.metrics_tracker",
      "path": "src/llmstruct/metrics_tracker.py",
      "category": "core",
      "functions": 29,
      "classes": 4,
      "summary": "LLMStruct Metrics Tracker - \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "artifact_id": "929913bb-f34f-4ce5-96bb-1def92842f0e"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "artifact_id": "7fa23ac8-61b1-46e2-97c0-e45a22267251"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "functions": 20,
      "classes": 5,
      "summary": "Smart Context Orchestration for LLMStruct",
      "artifact_id": "0fa562c6-f4f0-46e1-a4b8-98c57027ca55"
    },
    {
      "module_id": "src.llmstruct.ai_self_monitor",
      "path": "src/llmstruct/ai_self_monitor.py",
      "category": "core",
      "functions": 16,
      "classes": 4,
      "summary": "AI Self-Monitoring System",
      "artifact_id": "1365a1e5-7093-416b-ae58-485a0914bfc5"
    },
    {
      "module_id": "src.llmstruct.cursor_ai_bridge",
      "path": "src/llmstruct/cursor_ai_bridge.py",
      "category": "core",
      "functions": 21,
      "classes": 1,
      "summary": "Cursor AI Bridge - API Layer for AI Assistant Integration",
      "artifact_id": "4a03b429-549b-4ab7-8bfd-37115ca6f9df"
    },
    {
      "module_id": "src.llmstruct.ai_self_awareness",
      "path": "src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "functions": 47,
      "classes": 8,
      "summary": "AI Self-Awareness Enhancement Module",
      "artifact_id": "54c7d13b-06c4-4f5e-9806-45b0cc47116c"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "b0b4742c-4aa9-4881-98d8-c291d02cc2fd"
    },
    {
      "module_id": "src.llmstruct.modules.cli.epic",
      "path": "src/llmstruct/modules/cli/epic.py",
      "category": "cli",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "4fd31961-4201-4898-a499-89b815b4596d"
    },
    {
      "module_id": "src.llmstruct.modules.cli.handlers_legacy",
      "path": "src/llmstruct/modules/cli/handlers_legacy.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "13ea964e-2210-45d6-a108-9e2e4ab08903"
    },
    {
      "module_id": "src.llmstruct.modules.cli.analyze_duplicates",
      "path": "src/llmstruct/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "901a64a3-79a5-4991-b99a-c450d3484c1d"
    },
    {
      "module_id": "src.llmstruct.modules.cli.copilot",
      "path": "src/llmstruct/modules/cli/copilot.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "09888162-2af9-492d-bf54-c9849a46a101"
    },
    {
      "module_id": "src.llmstruct.modules.cli.handlers",
      "path": "src/llmstruct/modules/cli/handlers.py",
      "category": "cli",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "beb47441-8bdb-4e32-bac5-f5cdf4504288"
    },
    {
      "module_id": "src.llmstruct.modules.cli.review",
      "path": "src/llmstruct/modules/cli/review.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "5cfabcd6-d5d1-4483-9c1c-3aa1f5997c47"
    },
    {
      "module_id": "src.llmstruct.modules.cli.dogfood",
      "path": "src/llmstruct/modules/cli/dogfood.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "6ec406af-ba21-4f4e-9498-f197474d7b50"
    },
    {
      "module_id": "src.llmstruct.modules.cli.parse",
      "path": "src/llmstruct/modules/cli/parse.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "1c8343e9-957f-43db-87a1-82e3e6bc78fe"
    },
    {
      "module_id": "src.llmstruct.modules.cli.audit",
      "path": "src/llmstruct/modules/cli/audit.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "e8ac34bc-046c-43e1-88a1-1b1c95178ae4"
    },
    {
      "module_id": "src.llmstruct.modules.cli.query",
      "path": "src/llmstruct/modules/cli/query.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "9b5d77af-6900-4d6f-b821-1c30d06ee6e9"
    },
    {
      "module_id": "src.llmstruct.modules.cli.utils",
      "path": "src/llmstruct/modules/cli/utils.py",
      "category": "cli",
      "functions": 16,
      "classes": 0,
      "summary": "",
      "artifact_id": "137263aa-ea64-40c6-9995-8b951c93e8af"
    },
    {
      "module_id": "src.llmstruct.modules.cli.context",
      "path": "src/llmstruct/modules/cli/context.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "64018bbd-8222-4931-b6de-e673ee36ec57"
    },
    {
      "module_id": "src.llmstruct.modules.cli.__init__",
      "path": "src/llmstruct/modules/cli/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "f1fbaa49-f167-4338-a471-e665ac85218a"
    },
    {
      "module_id": "src.llmstruct.modules.commands.queue",
      "path": "src/llmstruct/modules/commands/queue.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "70364303-18ab-4c1e-a833-83d187496b47"
    },
    {
      "module_id": "src.llmstruct.modules.commands.metrics",
      "path": "src/llmstruct/modules/commands/metrics.py",
      "category": "core",
      "functions": 7,
      "classes": 0,
      "summary": "",
      "artifact_id": "d7de4b46-ea75-459d-bc94-14424e90c155"
    },
    {
      "module_id": "src.llmstruct.modules.commands.services",
      "path": "src/llmstruct/modules/commands/services.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "5ebdb88c-aaf8-4855-9503-9ad3579fee71"
    },
    {
      "module_id": "src.llmstruct.modules.commands.__init__",
      "path": "src/llmstruct/modules/commands/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "2be4e5eb-8caf-4cad-bead-35cb7a3e6c04"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "f3c095c4-de07-4f0a-b836-9ccaf34e2f13"
    },
    {
      "module_id": "src.llmstruct.api.config",
      "path": "src/llmstruct/api/config.py",
      "category": "core",
      "functions": 0,
      "classes": 1,
      "summary": "Configuration management for LLMStruct FastAPI",
      "artifact_id": "0ca1829c-c29f-4b23-9c98-aad506c9d379"
    },
    {
      "module_id": "src.llmstruct.api.app",
      "path": "src/llmstruct/api/app.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Main FastAPI application for LLMStruct",
      "artifact_id": "4abad3ed-6a04-48a4-9e66-485974518a51"
    },
    {
      "module_id": "src.llmstruct.api.__init__",
      "path": "src/llmstruct/api/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "LLMStruct FastAPI Module",
      "artifact_id": "98984e85-b845-4e66-a4f1-50d0678a7786"
    },
    {
      "module_id": "src.llmstruct.api.routes.chat",
      "path": "src/llmstruct/api/routes/chat.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "Chat Routes",
      "artifact_id": "b8bd96ac-775f-4ce9-89e8-179fb97ec32b"
    },
    {
      "module_id": "src.llmstruct.api.routes.continue_adapter",
      "path": "src/llmstruct/api/routes/continue_adapter.py",
      "category": "core",
      "functions": 5,
      "classes": 2,
      "summary": "Continue API Adapter",
      "artifact_id": "9fa0c346-2eb4-4632-8e12-e81ebcd7d7f0"
    },
    {
      "module_id": "src.llmstruct.api.routes.system",
      "path": "src/llmstruct/api/routes/system.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "System routes for LLMStruct FastAPI",
      "artifact_id": "fd0a6d71-9aa9-4a04-8ad4-970b4b12a59f"
    },
    {
      "module_id": "src.llmstruct.api.routes.__init__",
      "path": "src/llmstruct/api/routes/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Routes package for LLMStruct FastAPI",
      "artifact_id": "811a2006-2614-4e72-86de-5e57bc31a35e"
    },
    {
      "module_id": "src.llmstruct.api.models.responses",
      "path": "src/llmstruct/api/models/responses.py",
      "category": "core",
      "functions": 0,
      "classes": 19,
      "summary": "Response models for LLMStruct FastAPI",
      "artifact_id": "c7fd9cb9-6e02-4bc6-aba7-2f2d63f747f6"
    },
    {
      "module_id": "src.llmstruct.api.models.requests",
      "path": "src/llmstruct/api/models/requests.py",
      "category": "core",
      "functions": 0,
      "classes": 15,
      "summary": "Request models for LLMStruct FastAPI",
      "artifact_id": "071ed7e3-4595-4725-af4f-8496797daec9"
    },
    {
      "module_id": "src.llmstruct.api.models.__init__",
      "path": "src/llmstruct/api/models/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Pydantic models for LLMStruct FastAPI",
      "artifact_id": "b1ee75b6-5608-48f1-92da-ab9c38d4fe30"
    },
    {
      "module_id": "src.llmstruct.api.middleware.auth",
      "path": "src/llmstruct/api/middleware/auth.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Authentication middleware for LLMStruct FastAPI",
      "artifact_id": "0dd0dafc-663a-4de7-9861-23ee0558c7af"
    },
    {
      "module_id": "src.llmstruct.api.middleware.logging",
      "path": "src/llmstruct/api/middleware/logging.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Logging middleware for LLMStruct FastAPI",
      "artifact_id": "945ba669-deb4-4f47-ba0e-52c951d3d1b0"
    },
    {
      "module_id": "src.llmstruct.api.middleware.__init__",
      "path": "src/llmstruct/api/middleware/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Middleware package for LLMStruct FastAPI",
      "artifact_id": "3262357d-e5d7-48d9-99b1-82e822a569ff"
    },
    {
      "module_id": "src.llmstruct.api.services.llm_service",
      "path": "src/llmstruct/api/services/llm_service.py",
      "category": "core",
      "functions": 17,
      "classes": 4,
      "summary": "LLM Service",
      "artifact_id": "bd8cf775-2671-4755-9b9e-ab11bd104f2d"
    },
    {
      "module_id": "src.llmstruct.api.services.cli_bridge",
      "path": "src/llmstruct/api/services/cli_bridge.py",
      "category": "core",
      "functions": 9,
      "classes": 2,
      "summary": "CLI Bridge Service",
      "artifact_id": "c9126d0b-2484-441d-99c6-7fb18531ed11"
    },
    {
      "module_id": "src.llmstruct.api.services.chat_session",
      "path": "src/llmstruct/api/services/chat_session.py",
      "category": "core",
      "functions": 14,
      "classes": 2,
      "summary": "Chat Session Manager",
      "artifact_id": "32d3f940-a2ab-49ee-b862-56566549d186"
    },
    {
      "module_id": "src.llmstruct.api.services.__init__",
      "path": "src/llmstruct/api/services/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Services package for LLMStruct FastAPI",
      "artifact_id": "ce85f224-855b-4353-b9a3-ca7d3abf6c62"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "819e7637-22e2-454b-a3b5-f5b365893010"
    },
    {
      "module_id": "src.llmstruct.generators.go_json_generator",
      "path": "src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "bb669291-0814-4c76-a211-2e388bf7ace7"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "6016da0f-dd32-4341-8e40-9077130db7d8"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_core",
      "path": "src/llmstruct/ARCHIVE/cli_core.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Core CLI functionality and main loop.",
      "artifact_id": "3be7a613-384d-41d1-a6c6-4fa7924d2a66"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_config",
      "path": "src/llmstruct/ARCHIVE/cli_config.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "CLI configuration management.",
      "artifact_id": "fa4c3453-fa3c-4a27-8db1-a0a14e42f58f"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_argument_parser",
      "path": "src/llmstruct/ARCHIVE/cli_argument_parser.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "CLI argument parsing for LLMStruct.",
      "artifact_id": "fd8b0960-73fe-45be-b3a3-f1a09604932b"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_main_commands",
      "path": "src/llmstruct/ARCHIVE/cli_main_commands.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "Main CLI command handlers for LLMStruct.",
      "artifact_id": "9aab6aa5-b677-4526-863f-bf54e307cc44"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_utils",
      "path": "src/llmstruct/ARCHIVE/cli_utils.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "CLI utility functions.",
      "artifact_id": "15606e16-99b3-4f3d-b392-dd53894143d3"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_commands",
      "path": "src/llmstruct/ARCHIVE/cli_commands.py",
      "category": "core",
      "functions": 22,
      "classes": 1,
      "summary": "CLI command processing and handlers.",
      "artifact_id": "6fd54d7c-d9e5-4088-adea-f4677c73eff4"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "e030a3e4-b5b2-4d83-aeff-87aef233c37d"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "34065bdf-ac1f-4b8f-a161-ce485f04651c"
    },
    {
      "module_id": "src.llmstruct.parsers.universal_converter",
      "path": "src/llmstruct/parsers/universal_converter.py",
      "category": "core",
      "functions": 14,
      "classes": 3,
      "summary": "Universal Code Converter - Orchestrates all language parsers",
      "artifact_id": "09457030-8f39-47ba-b794-833a9786edb7"
    },
    {
      "module_id": "src.llmstruct.parsers.go_analyzer",
      "path": "src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430",
      "artifact_id": "c44e7186-ce72-44e0-8058-80915e10a038"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "03de4f39-da65-4a0a-8e36-e3c739fa4672"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "",
      "artifact_id": "a6b5e9b0-6e1e-45ff-bda3-f22f9904235b"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "8b890f4c-1225-4291-ae12-22f1744ecb4a"
    },
    {
      "module_id": ".private.log_insight",
      "path": ".private/log_insight.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Quick insight logging helper for workflow optimization",
      "artifact_id": "9baa1adb-3d27-4429-b176-af8288428d9a"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project.",
      "artifact_id": "db228285-791c-48b7-b86f-e225df7fbde6"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project.",
      "artifact_id": "41765a21-e9da-4d43-bf8a-7aaaaddd45fb"
    },
    {
      "module_id": "examples.telegram_bot.bot",
      "path": "examples/telegram_bot/bot.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Telegram Bot for LLMStruct Integration",
      "artifact_id": "ce94bd9d-23e9-467b-ad05-5198c13a8f92"
    },
    {
      "module_id": "examples.telegram_bot.test_bot",
      "path": "examples/telegram_bot/test_bot.py",
      "category": "test",
      "functions": 4,
      "classes": 0,
      "summary": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430 \u0431\u0435\u0437 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e Telegram",
      "artifact_id": "5454b55b-0b77-4e02-9508-51fa5e666689"
    },
    {
      "module_id": "examples.telegram_bot.memory_manager",
      "path": "examples/telegram_bot/memory_manager.py",
      "category": "core",
      "functions": 15,
      "classes": 3,
      "summary": "Memory Manager for LLMStruct Telegram Bot",
      "artifact_id": "23e10537-fa5e-42a0-b56f-84678ae3a2e2"
    },
    {
      "module_id": "integrations.continue.test_continue_api",
      "path": "integrations/continue/test_continue_api.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test Continue API Integration",
      "artifact_id": "c12d2fb7-db83-4225-b6da-d6739ac9431d"
    },
    {
      "module_id": "integrations.continue.setup_config",
      "path": "integrations/continue/setup_config.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "Setup script for Continue VS Code extension configuration",
      "artifact_id": "5479570c-7f93-4ced-9cc0-278ed1cd599e"
    },
    {
      "module_id": "integrations.telegram_bot.bot",
      "path": "integrations/telegram_bot/bot.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "Telegram Bot for LLMStruct Integration",
      "artifact_id": "cd5546ff-eab1-40d3-8686-ea3b369dccf8"
    },
    {
      "module_id": "integrations.telegram_bot.test_bot",
      "path": "integrations/telegram_bot/test_bot.py",
      "category": "test",
      "functions": 4,
      "classes": 0,
      "summary": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430 \u0431\u0435\u0437 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e Telegram",
      "artifact_id": "14739725-9a84-42ca-b708-9fc911b8b799"
    },
    {
      "module_id": "integrations.telegram_bot.mp002_progress_bot",
      "path": "integrations/telegram_bot/mp002_progress_bot.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "MP-002A Progress Bot - Telegram \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Smart Wrapper \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438",
      "artifact_id": "6d460f88-db63-4961-a752-2b5be66e9753"
    },
    {
      "module_id": "integrations.telegram_bot.simple_bot",
      "path": "integrations/telegram_bot/simple_bot.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "\u0423\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f LLMStruct \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u043c\u0435\u0442\u0440\u0438\u043a",
      "artifact_id": "21b91240-33b4-45ab-a837-2018a30f21e7"
    },
    {
      "module_id": "integrations.telegram_bot.memory_manager",
      "path": "integrations/telegram_bot/memory_manager.py",
      "category": "core",
      "functions": 15,
      "classes": 3,
      "summary": "Memory Manager for LLMStruct Telegram Bot",
      "artifact_id": "27969779-709e-441d-b19b-3b94d9094f20"
    },
    {
      "module_id": "scripts.log_viewer",
      "path": "scripts/log_viewer.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "42302091-37cb-4d98-953d-1b5f818bfc5f"
    },
    {
      "module_id": "ARCHIVE.auto_init_ai_system",
      "path": "ARCHIVE/auto_init_ai_system.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor",
      "artifact_id": "79b67975-5286-45c6-bb22-c8057be21561"
    },
    {
      "module_id": "ARCHIVE.collect_json",
      "path": "ARCHIVE/collect_json.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "897a18d9-d7e7-450c-bc2c-8128ca75095d"
    },
    {
      "module_id": "ARCHIVE.install_ai_integration",
      "path": "ARCHIVE/install_ai_integration.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor",
      "artifact_id": "4819c9af-b554-459f-8def-e80bc4c015f0"
    },
    {
      "module_id": "ARCHIVE.quick_ws_test",
      "path": "ARCHIVE/quick_ws_test.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Quick WebSocket Test Script",
      "artifact_id": "01433b88-da6c-45c9-bf38-ae74f91a3333"
    },
    {
      "module_id": "ARCHIVE.verify_llm_response",
      "path": "ARCHIVE/verify_llm_response.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "2136415b-9e3b-47e8-8a8e-fde26ecbd773"
    },
    {
      "module_id": "ARCHIVE.grok",
      "path": "ARCHIVE/grok.py",
      "category": "core",
      "functions": 4,
      "classes": 1,
      "summary": "",
      "artifact_id": "03f9c266-5817-4a2b-9375-3390d0f46867"
    },
    {
      "module_id": "ARCHIVE.collector",
      "path": "ARCHIVE/collector.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "1ec98e46-4534-42a4-bd86-581fc36252e8"
    },
    {
      "module_id": "cursor_workflow_integration.scripts.install_ai_integration",
      "path": "cursor_workflow_integration/scripts/install_ai_integration.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor",
      "artifact_id": "b9dfb58e-8fae-4443-9708-def963f5d0c4"
    },
    {
      "module_id": "cursor_workflow_integration.files.auto_init_ai_system",
      "path": "cursor_workflow_integration/files/auto_init_ai_system.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor",
      "artifact_id": "086157de-6db2-407e-8a90-37f9fe86d745"
    }
  ],
  "modules": [
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "module_doc": "Session Schema Validation Script for llmstruct\nValidates session management JSON files against their schemas.\nFocused validation for session system only.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            21,
            31
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": [
            33,
            52
          ],
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            54,
            124
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            13,
            19
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "json.load",
          "open",
          "print"
        ],
        "validate_json_against_schema": [
          "len",
          "validator.iter_errors",
          "list",
          "print",
          "str",
          "Draft7Validator"
        ],
        "main": [
          "validate_json_against_schema",
          "print",
          "errors.append",
          "load_json"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "b1580f70-7129-464c-8824-04005763b033"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "module_doc": "JSON Schema Validation Script for llmstruct\nValidates all enhanced JSON files against their appropriate schemas.\nPart of TSK-130 implementation.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            24,
            34
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            56,
            193
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            15,
            21
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "json.load",
          "open",
          "print"
        ],
        "validate_json_against_schema": [
          "print",
          "validate",
          "str"
        ],
        "main": [
          "validate_json_against_schema",
          "print",
          "errors.append",
          "load_json"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "051a52b0-8d59-45f8-b21f-9617a3d03c7f"
    },
    {
      "module_id": "run_ai_diagnostics",
      "path": "run_ai_diagnostics.py",
      "category": "core",
      "module_doc": "Comprehensive AI Self-Awareness Diagnostics Runner\nEnhanced with Cursor integration testing, multi-AI orchestration validation,\npersonal planning bridge testing, and real-time performance metrics.",
      "functions": [
        {
          "name": "print_section",
          "docstring": "Print a formatted section header.",
          "line_range": [
            20,
            23
          ],
          "parameters": [
            "title",
            "emoji"
          ],
          "decorators": []
        },
        {
          "name": "print_subsection",
          "docstring": "Print a formatted subsection header.",
          "line_range": [
            25,
            28
          ],
          "parameters": [
            "title",
            "emoji"
          ],
          "decorators": []
        },
        {
          "name": "test_basic_ai_awareness",
          "docstring": "Test basic AI self-awareness capabilities.",
          "line_range": [
            30,
            51
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_cursor_integration",
          "docstring": "Test Cursor IDE integration capabilities.",
          "line_range": [
            53,
            124
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_real_time_metrics",
          "docstring": "Test real-time metrics calculation.",
          "line_range": [
            126,
            146
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_personal_planning_bridge",
          "docstring": "Test personal planning bridge functionality.",
          "line_range": [
            148,
            196
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_session_management",
          "docstring": "Test session management capabilities.",
          "line_range": [
            198,
            233
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_configuration_loading",
          "docstring": "Test configuration file loading.",
          "line_range": [
            235,
            255
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_performance_benchmark",
          "docstring": "Run performance benchmarks for AI operations.",
          "line_range": [
            257,
            287
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_diagnostic_report",
          "docstring": "Generate a comprehensive diagnostic report.",
          "line_range": [
            289,
            333
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "continuous_monitoring_mode",
          "docstring": "Run continuous monitoring of AI system health.",
          "line_range": [
            335,
            382
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_specific_component",
          "docstring": "Test a specific AI component in detail.",
          "line_range": [
            384,
            423
          ],
          "parameters": [
            "component_name"
          ],
          "decorators": []
        },
        {
          "name": "test_cli_commands",
          "docstring": "Test CLI command processing capabilities.",
          "line_range": [
            425,
            447
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_context_scenarios",
          "docstring": "Test context orchestrator scenarios.",
          "line_range": [
            449,
            466
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_copilot_features",
          "docstring": "Test copilot manager features.",
          "line_range": [
            468,
            485
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_integration_health_check",
          "docstring": "Run comprehensive integration health check.",
          "line_range": [
            487,
            524
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_optimization_suggestions",
          "docstring": "Generate automated optimization suggestions based on diagnostics.",
          "line_range": [
            526,
            597
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_stress_test",
          "docstring": "Run stress test on AI system.",
          "line_range": [
            599,
            651
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run comprehensive AI diagnostics.",
          "line_range": [
            653,
            738
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "print_section": [
          "print",
          "len"
        ],
        "print_subsection": [
          "print",
          "len"
        ],
        "test_basic_ai_awareness": [
          "discovery.get_enhanced_capabilities_summary",
          "discovery.get_comprehensive_ai_status",
          "SystemCapabilityDiscovery",
          "len",
          "discovery.discover_all_capabilities",
          "print_section",
          "print"
        ],
        "test_cursor_integration": [
          "create_cursor_integration",
          "context_data.get",
          "cursor_integration.get_comprehensive_cursor_response",
          "delegation.get",
          "len",
          "print_section",
          "print",
          "response.get",
          "print_subsection"
        ],
        "test_real_time_metrics": [
          "discovery._calculate_real_cache_hit_rate",
          "print",
          "discovery.get_cursor_status_report",
          "SystemCapabilityDiscovery",
          "print_section",
          "discovery._get_real_system_load"
        ],
        "test_personal_planning_bridge": [
          "guidance.get",
          "PersonalPlanningCursorBridge",
          "bridge.get_goal_aligned_suggestions",
          "bridge.get_priority_guidance",
          "enumerate",
          "len",
          "top_feature.get",
          "print_section",
          "print"
        ],
        "test_session_management": [
          "print",
          "session_manager.start_session",
          "print_section",
          "CursorSessionManager",
          "session_manager.save_session_context"
        ],
        "test_configuration_loading": [
          "Path",
          "print",
          "open",
          "len",
          "print_section",
          "json.load",
          "config_path.exists"
        ],
        "run_performance_benchmark": [
          "create_cursor_integration",
          "time.time",
          "SystemCapabilityDiscovery",
          "discovery.discover_all_capabilities",
          "print_section",
          "print"
        ],
        "generate_diagnostic_report": [
          "time.strftime",
          "Path",
          "json.dump",
          "SystemCapabilityDiscovery",
          "open",
          "len",
          "discovery.discover_all_capabilities",
          "print_section",
          "print"
        ],
        "continuous_monitoring_mode": [
          "discovery._get_real_system_load",
          "time.strftime",
          "time.sleep",
          "discovery._calculate_real_cache_hit_rate",
          "SystemCapabilityDiscovery",
          "len",
          "discovery.discover_all_capabilities",
          "print_section",
          "print"
        ],
        "test_specific_component": [
          "test_copilot_features",
          "component_name.upper",
          "test_cli_commands",
          "test_context_scenarios",
          "len",
          "enumerate",
          "SystemCapabilityDiscovery",
          "list",
          "discovery.discover_all_capabilities",
          "print_section",
          "print"
        ],
        "test_cli_commands": [
          "CLIUtils",
          "CommandProcessor",
          "CLIConfig",
          "print"
        ],
        "test_context_scenarios": [
          "create_context_orchestrator",
          "print"
        ],
        "test_copilot_features": [
          "feature.replace",
          "initialize_copilot",
          "hasattr",
          "print"
        ],
        "run_integration_health_check": [
          "create_cursor_integration",
          "cursor_integration.get_comprehensive_cursor_response",
          "print_section",
          "print",
          "response.get"
        ],
        "generate_optimization_suggestions": [
          "enumerate",
          "SystemCapabilityDiscovery",
          "len",
          "discovery.discover_all_capabilities",
          "print_section",
          "print",
          "suggestions.append"
        ],
        "run_stress_test": [
          "range",
          "create_cursor_integration",
          "time.time",
          "context_data.get",
          "SystemCapabilityDiscovery",
          "delegation.get",
          "enumerate",
          "discovery.discover_all_capabilities",
          "print_section",
          "print"
        ],
        "main": [
          "generate_optimization_suggestions",
          "test_specific_component",
          "time.time",
          "run_integration_health_check",
          "continuous_monitoring_mode",
          "len",
          "test_func",
          "print_section",
          "run_stress_test",
          "print"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CursorSessionManager",
        "Path",
        "PersonalPlanningCursorBridge",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "create_cursor_integration",
        "initialize_copilot",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.cursor_integration",
        "os",
        "pathlib",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "9f1ff3c2-9035-4667-a59a-7d67be3fb49d"
    },
    {
      "module_id": "start_development",
      "path": "start_development.py",
      "category": "core",
      "module_doc": "LLMStruct Development Startup Script\nConvenient one-command startup for daily development workflow.\nEnhanced with AI Workflow Middleware and Self-Monitoring for seamless llmstruct integration.",
      "functions": [
        {
          "name": "print_header",
          "docstring": "Print startup header.",
          "line_range": [
            17,
            21
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_ai_integration_layer",
          "docstring": "Initialize AI integration layer - this is the NEW seamless integration",
          "line_range": [
            23,
            73
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_environment",
          "docstring": "Check if development environment is properly set up.",
          "line_range": [
            75,
            110
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_workflow_orchestrator",
          "docstring": "Initialize and test WorkflowOrchestrator integration.",
          "line_range": [
            112,
            156
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_cursor_ai_bridge",
          "docstring": "Initialize and test CursorAIBridge integration.",
          "line_range": [
            158,
            198
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "sync_architecture_components",
          "docstring": "Sync with existing llmstruct architecture components and AI integration.",
          "line_range": [
            200,
            240
          ],
          "parameters": [
            "orchestrator",
            "ai_integration"
          ],
          "decorators": []
        },
        {
          "name": "run_system_health_check",
          "docstring": "Run comprehensive system health check.",
          "line_range": [
            242,
            263
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_optimization_suggestions",
          "docstring": "Get AI optimization suggestions with WorkflowOrchestrator integration.",
          "line_range": [
            265,
            320
          ],
          "parameters": [
            "orchestrator"
          ],
          "decorators": []
        },
        {
          "name": "check_git_status",
          "docstring": "Check git repository status.",
          "line_range": [
            322,
            368
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_context",
          "docstring": "Show current project context and priorities.",
          "line_range": [
            370,
            411
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_useful_commands",
          "docstring": "Show useful commands for development.",
          "line_range": [
            413,
            472
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main startup routine with AI Workflow Middleware and WorkflowOrchestrator integration.",
          "line_range": [
            474,
            593
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "print_header": [
          "print"
        ],
        "initialize_ai_integration_layer": [
          "middleware.process_ai_request",
          "record_ai_usage",
          "Path",
          "initialize_ai_monitor",
          "initialize_ai_middleware",
          "print",
          "str"
        ],
        "check_environment": [
          "missing_files.append",
          "Path",
          "print",
          "hasattr"
        ],
        "initialize_workflow_orchestrator": [
          "dup_analysis.get",
          "context.get",
          "WorkflowOrchestrator",
          "orchestrator.get_current_context",
          "system_caps.get",
          "copilot_status.get",
          "len",
          "stats.get",
          "print",
          "struct_analysis.get"
        ],
        "initialize_cursor_ai_bridge": [
          "task_analysis.get",
          "bridge.ai_get_context",
          "context.get",
          "project_state.get",
          "CursorAIBridge",
          "len",
          "ai_rec.get",
          "print",
          "bridge.ai_analyze_task"
        ],
        "sync_architecture_components": [
          "ai_integration.get",
          "sync_results.items",
          "middleware.get_middleware_stats",
          "orchestrator.sync_with_existing_architecture",
          "print"
        ],
        "run_system_health_check": [
          "print",
          "subprocess.run"
        ],
        "get_optimization_suggestions": [
          "subprocess.run",
          "duplication_analysis.get",
          "orchestrator.analyze_codebase_for_duplicates",
          "line.strip",
          "enumerate",
          "r.get",
          "print",
          "suggestions.append"
        ],
        "check_git_status": [
          "print",
          "subprocess.run",
          "changes.split",
          "len"
        ],
        "show_current_context": [
          "init_file.exists",
          "Path",
          "business_obj.get",
          "init_data.get",
          "bridge_file.exists",
          "print",
          "vision.get",
          "open",
          "enumerate",
          "bridge_data.get",
          "json.load"
        ],
        "show_useful_commands": [
          "print"
        ],
        "main": [
          "ai_integration.get",
          "get_optimization_suggestions",
          "show_current_context",
          "monitor.analyze_behavior_trends",
          "initialize_ai_integration_layer",
          "initialize_workflow_orchestrator",
          "middleware.get_middleware_stats",
          "check_environment",
          "initialize_cursor_ai_bridge",
          "run_system_health_check",
          "sync_architecture_components",
          "show_useful_commands",
          "print_header",
          "print",
          "check_git_status"
        ]
      },
      "dependencies": [
        "AIWorkflowMode",
        "CursorAIBridge",
        "Path",
        "WorkflowOrchestrator",
        "initialize_ai_middleware",
        "initialize_ai_monitor",
        "json",
        "llmstruct.ai_self_monitor",
        "llmstruct.ai_workflow_middleware",
        "llmstruct.cursor_ai_bridge",
        "llmstruct.workflow_orchestrator",
        "os",
        "pathlib",
        "record_ai_usage",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "db310644-08bc-487a-b211-051373b2998c"
    },
    {
      "module_id": "struct_cache_manager",
      "path": "struct_cache_manager.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 Smart struct.json Cache Manager for [code] Mode\n\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "functions": [
        {
          "name": "test_cache_performance",
          "docstring": "\u0422\u0435\u0441\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u0435\u0448\u0430",
          "line_range": [
            321,
            355
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            17,
            29
          ],
          "parameters": [
            "self",
            "struct_file"
          ],
          "decorators": []
        },
        {
          "name": "get_file_hash",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0445\u0435\u0448 \u0444\u0430\u0439\u043b\u0430 struct.json \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439",
          "line_range": [
            31,
            38
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_cache_valid",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043a\u0435\u0448\u0430",
          "line_range": [
            40,
            54
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "build_cache",
          "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u043f\u043e\u043b\u043d\u044b\u0439 \u043a\u0435\u0448 \u0438\u0437 struct.json",
          "line_range": [
            56,
            150
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "search_modules",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043c\u043e\u0434\u0443\u043b\u0435\u0439",
          "line_range": [
            152,
            177
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        },
        {
          "name": "search_functions",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
          "line_range": [
            179,
            205
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        },
        {
          "name": "search_classes",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043a\u043b\u0430\u0441\u0441\u043e\u0432",
          "line_range": [
            207,
            233
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        },
        {
          "name": "get_module_details",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0435\u0442\u0430\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044f",
          "line_range": [
            235,
            248
          ],
          "parameters": [
            "self",
            "module_name"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_stats",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043a\u0435\u0448\u0430",
          "line_range": [
            250,
            265
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "invalidate_cache",
          "docstring": "\u0418\u043d\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043a\u0435\u0448",
          "line_range": [
            267,
            281
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "smart_search",
          "docstring": "\u0423\u043c\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0432\u0441\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c \u0441 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432",
          "line_range": [
            283,
            319
          ],
          "parameters": [
            "self",
            "query",
            "search_type"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "StructCacheManager",
          "docstring": "\u0423\u043c\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043a\u0435\u0448\u0430 \u0434\u043b\u044f struct.json \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 [code]",
          "line_range": [
            14,
            319
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                17,
                29
              ],
              "parameters": [
                "self",
                "struct_file"
              ]
            },
            {
              "name": "get_file_hash",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0445\u0435\u0448 \u0444\u0430\u0439\u043b\u0430 struct.json \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439",
              "line_range": [
                31,
                38
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_cache_valid",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043a\u0435\u0448\u0430",
              "line_range": [
                40,
                54
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "build_cache",
              "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u043f\u043e\u043b\u043d\u044b\u0439 \u043a\u0435\u0448 \u0438\u0437 struct.json",
              "line_range": [
                56,
                150
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "search_modules",
              "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043c\u043e\u0434\u0443\u043b\u0435\u0439",
              "line_range": [
                152,
                177
              ],
              "parameters": [
                "self",
                "query"
              ]
            },
            {
              "name": "search_functions",
              "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
              "line_range": [
                179,
                205
              ],
              "parameters": [
                "self",
                "query"
              ]
            },
            {
              "name": "search_classes",
              "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043a\u043b\u0430\u0441\u0441\u043e\u0432",
              "line_range": [
                207,
                233
              ],
              "parameters": [
                "self",
                "query"
              ]
            },
            {
              "name": "get_module_details",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0435\u0442\u0430\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044f",
              "line_range": [
                235,
                248
              ],
              "parameters": [
                "self",
                "module_name"
              ]
            },
            {
              "name": "get_cache_stats",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043a\u0435\u0448\u0430",
              "line_range": [
                250,
                265
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "invalidate_cache",
              "docstring": "\u0418\u043d\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043a\u0435\u0448",
              "line_range": [
                267,
                281
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "smart_search",
              "docstring": "\u0423\u043c\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0432\u0441\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c \u0441 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432",
              "line_range": [
                283,
                319
              ],
              "parameters": [
                "self",
                "query",
                "search_type"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "print"
        ],
        "get_file_hash": [
          "hashlib.md5",
          "open",
          "f.read"
        ],
        "is_cache_valid": [
          "self.get_file_hash",
          "json.load",
          "open",
          "metadata.get"
        ],
        "build_cache": [
          "module.get",
          "self.get_file_hash",
          "c.get",
          "cls.get",
          "time.time",
          "func.get",
          "print",
          "m.get",
          "data.get",
          "open",
          "len",
          "datetime.now",
          "json.dump",
          "json.load",
          "f.get"
        ],
        "search_modules": [
          "name.lower",
          "self.build_cache",
          "len",
          "print",
          "query.lower",
          "open",
          "modules.items",
          "results.append",
          "self.is_cache_valid",
          "json.load"
        ],
        "search_functions": [
          "name.lower",
          "sorted",
          "self.build_cache",
          "print",
          "query.lower",
          "open",
          "results.append",
          "self.is_cache_valid",
          "json.load",
          "functions.items"
        ],
        "search_classes": [
          "name.lower",
          "sorted",
          "self.build_cache",
          "len",
          "print",
          "query.lower",
          "classes.items",
          "open",
          "results.append",
          "self.is_cache_valid",
          "json.load"
        ],
        "get_module_details": [
          "self.build_cache",
          "print",
          "open",
          "modules.get",
          "self.is_cache_valid",
          "json.load"
        ],
        "get_cache_stats": [
          "self.is_cache_valid",
          "json.load",
          "open",
          "str"
        ],
        "invalidate_cache": [
          "cache_file.unlink",
          "print",
          "cache_file.exists"
        ],
        "smart_search": [
          "self.search_classes",
          "print",
          "query.lower",
          "open",
          "self.search_functions",
          "json.dump",
          "json.load",
          "self.search_modules"
        ],
        "test_cache_performance": [
          "time.time",
          "cache_manager.build_cache",
          "cache_manager.smart_search",
          "cache_manager.get_cache_stats",
          "sum",
          "len",
          "StructCacheManager",
          "stats.get",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "hashlib",
        "json",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "37f32cda-f3bd-4383-b918-a8fd875a824d"
    },
    {
      "module_id": "src.scripts.session_cli",
      "path": "src/scripts/session_cli.py",
      "category": "core",
      "module_doc": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct.\nPart of the comprehensive session management system.",
      "functions": [
        {
          "name": "get_current_branch",
          "docstring": "Get current git branch.",
          "line_range": [
            24,
            31
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "save_json_file",
          "docstring": "Save JSON file with error handling.",
          "line_range": [
            42,
            51
          ],
          "parameters": [
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_current_timestamp",
          "docstring": "Get current timestamp in ISO format.",
          "line_range": [
            53,
            55
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log_event",
          "docstring": "Log an event to worklog.json.",
          "line_range": [
            57,
            88
          ],
          "parameters": [
            "event_message",
            "author"
          ],
          "decorators": []
        },
        {
          "name": "switch_session",
          "docstring": "Switch to a different session or create new one.",
          "line_range": [
            90,
            141
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "list_sessions",
          "docstring": "List all available sessions.",
          "line_range": [
            143,
            166
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_session",
          "docstring": "Show current session details.",
          "line_range": [
            168,
            183
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_worklog",
          "docstring": "Show recent worklog entries.",
          "line_range": [
            185,
            203
          ],
          "parameters": [
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main CLI interface.",
          "line_range": [
            205,
            244
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            16,
            22
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "get_current_branch": [
          "subprocess.run"
        ],
        "load_json_file": [
          "json.load",
          "open",
          "print"
        ],
        "save_json_file": [
          "os.makedirs",
          "json.dump",
          "print",
          "open"
        ],
        "get_current_timestamp": [
          "datetime.now"
        ],
        "log_event": [
          "current_session.get",
          "get_current_timestamp",
          "save_json_file",
          "get_current_branch",
          "load_json_file",
          "print"
        ],
        "switch_session": [
          "log_event",
          "get_current_timestamp",
          "save_json_file",
          "get_current_branch",
          "load_json_file",
          "print"
        ],
        "list_sessions": [
          "load_json_file",
          "current_session.get",
          "print"
        ],
        "show_current_session": [
          "load_json_file",
          "current_session.get",
          "print"
        ],
        "show_worklog": [
          "load_json_file",
          "print",
          "reversed",
          "len"
        ],
        "main": [
          "show_worklog",
          "int",
          "show_current_session",
          "list_sessions",
          "log_event",
          "switch_session",
          "len",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "40fac56b-0c5d-4817-a31f-86e6e406c132"
    },
    {
      "module_id": "src.scripts.auto_update_struct",
      "path": "src/scripts/auto_update_struct.py",
      "category": "core",
      "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.",
      "functions": [
        {
          "name": "detect_project_changes",
          "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.",
          "line_range": [
            44,
            81
          ],
          "parameters": [
            "root_dir",
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_struct_json",
          "docstring": "Create a backup of existing struct.json.",
          "line_range": [
            84,
            97
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_struct_json",
          "docstring": "Validate generated struct.json for basic structure.",
          "line_range": [
            100,
            128
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "update_struct_json",
          "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful",
          "line_range": [
            131,
            225
          ],
          "parameters": [
            "root_dir",
            "struct_path",
            "force",
            "config_override"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for auto-update script.",
          "line_range": [
            228,
            286
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "",
          "line_range": [
            24,
            25
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            26,
            27
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_config": [],
        "load_gitignore": [],
        "generate_json": [
          "ImportError"
        ],
        "detect_project_changes": [
          "subprocess.run",
          "Path",
          "logger.info",
          "file_path.stat",
          "logger.warning"
        ],
        "backup_struct_json": [
          "subprocess.run",
          "Path",
          "logger.error",
          "logger.info",
          "datetime.now"
        ],
        "validate_struct_json": [
          "logger.info",
          "logger.error",
          "json.load",
          "open"
        ],
        "update_struct_json": [
          "cli_config.get",
          "config.get",
          "subprocess.run",
          "os.getcwd",
          "generate_json",
          "logger.error",
          "config.update",
          "logger.info",
          "load_gitignore",
          "open",
          "load_config",
          "json.dump",
          "validate_struct_json",
          "detect_project_changes",
          "backup_struct_json"
        ],
        "main": [
          "parser.add_argument",
          "detect_project_changes",
          "os.getcwd",
          "sys.exit",
          "parser.parse_args",
          "print",
          "argparse.ArgumentParser",
          "update_struct_json",
          "logging.getLogger"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "generate_json",
        "json",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "0d00c3f0-1eed-416c-834f-519d513ab9b4"
    },
    {
      "module_id": "src.scripts.fix_hardcoded_usernames",
      "path": "src/scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "module_doc": "Fix Hardcoded Usernames Script\nAutomatically detects and replaces hardcoded usernames with dynamic values from .env or git config.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            234,
            288
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            22,
            24
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_detect_user_info",
          "docstring": "Detect user info from .env, git config, or environment.",
          "line_range": [
            26,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_env",
          "docstring": "Load user info from .env file.",
          "line_range": [
            64,
            86
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_git",
          "docstring": "Load user info from git config.",
          "line_range": [
            88,
            120
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_environment",
          "docstring": "Load user info from environment variables.",
          "line_range": [
            122,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_user_info",
          "docstring": "Get detected user information.",
          "line_range": [
            130,
            132
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            138,
            148
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_files",
          "docstring": "Scan for files containing hardcoded usernames.",
          "line_range": [
            150,
            172
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "fix_file",
          "docstring": "Fix hardcoded usernames in a single file.",
          "line_range": [
            174,
            200
          ],
          "parameters": [
            "self",
            "file_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "fix_all_files",
          "docstring": "Fix hardcoded usernames in all project files.",
          "line_range": [
            202,
            214
          ],
          "parameters": [
            "self",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "generate_env_template",
          "docstring": "Generate .env template with required variables.",
          "line_range": [
            216,
            231
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "UserInfoDetector",
          "docstring": "Detect user information from various sources.",
          "line_range": [
            19,
            132
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                22,
                24
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_detect_user_info",
              "docstring": "Detect user info from .env, git config, or environment.",
              "line_range": [
                26,
                62
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_env",
              "docstring": "Load user info from .env file.",
              "line_range": [
                64,
                86
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_git",
              "docstring": "Load user info from git config.",
              "line_range": [
                88,
                120
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_environment",
              "docstring": "Load user info from environment variables.",
              "line_range": [
                122,
                128
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_user_info",
              "docstring": "Get detected user information.",
              "line_range": [
                130,
                132
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "HardcodeFixer",
          "docstring": "Fix hardcoded usernames in project files.",
          "line_range": [
            135,
            231
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                138,
                148
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_files",
              "docstring": "Scan for files containing hardcoded usernames.",
              "line_range": [
                150,
                172
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "fix_file",
              "docstring": "Fix hardcoded usernames in a single file.",
              "line_range": [
                174,
                200
              ],
              "parameters": [
                "self",
                "file_path",
                "dry_run"
              ]
            },
            {
              "name": "fix_all_files",
              "docstring": "Fix hardcoded usernames in all project files.",
              "line_range": [
                202,
                214
              ],
              "parameters": [
                "self",
                "dry_run"
              ]
            },
            {
              "name": "generate_env_template",
              "docstring": "Generate .env template with required variables.",
              "line_range": [
                216,
                231
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "UserInfoDetector"
        ],
        "_detect_user_info": [
          "self._load_from_env",
          "user_info.get",
          "self._load_from_environment",
          "logger.info",
          "env_vars.items",
          "self._load_from_git",
          "env_info.items",
          "user_info.update"
        ],
        "_load_from_env": [
          "value.strip",
          "line.startswith",
          "env_vars.get",
          "logger.error",
          "line.strip",
          "open",
          "line.split",
          "key.strip",
          "env_file.exists"
        ],
        "_load_from_git": [
          "re.search",
          "logger.error",
          "subprocess.run",
          "match.group"
        ],
        "_load_from_environment": [],
        "get_user_info": [],
        "scan_files": [
          "f.read",
          "open",
          "any",
          "content.count",
          "logger.warning",
          "str",
          "files_with_hardcode.append"
        ],
        "fix_file": [
          "content.replace",
          "logger.error",
          "logger.info",
          "open",
          "f.read",
          "f.write",
          "content.count"
        ],
        "fix_all_files": [
          "self.scan_files",
          "logger.info",
          "self.fix_file",
          "len",
          "str"
        ],
        "generate_env_template": [],
        "main": [
          "parser.add_argument",
          "fixer.generate_env_template",
          "results.items",
          "Path",
          "parser.parse_args",
          "print",
          "logger.info",
          "HardcodeFixer",
          "argparse.ArgumentParser",
          "fixer.fix_all_files",
          "open",
          "len",
          "f.write",
          "fixer.scan_files",
          "replacements.items"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ef7b3a02-56e1-438b-8bed-aca0af1dc197"
    },
    {
      "module_id": "src.scripts.create_github_issues",
      "path": "src/scripts/create_github_issues.py",
      "category": "core",
      "module_doc": "GitHub Issues Creator for AI-Dogfooding Project\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GitHub issues \u0438\u0437 \u043d\u0430\u0448\u0438\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447",
      "functions": [
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            16,
            28
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_epics_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438\u0437 JSON",
          "line_range": [
            205,
            213
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f issues",
          "line_range": [
            215,
            252
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "token",
            "use_cli"
          ],
          "decorators": []
        },
        {
          "name": "create_epic_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            45,
            83
          ],
          "parameters": [
            "self",
            "epic_data"
          ],
          "decorators": []
        },
        {
          "name": "create_task_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            85,
            128
          ],
          "parameters": [
            "self",
            "task_data",
            "epic_number"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_api",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
          "line_range": [
            130,
            150
          ],
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_cli",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
          "line_range": [
            152,
            186
          ],
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_format_criteria",
          "docstring": "",
          "line_range": [
            188,
            189
          ],
          "parameters": [
            "self",
            "criteria"
          ],
          "decorators": []
        },
        {
          "name": "_format_tasks",
          "docstring": "",
          "line_range": [
            191,
            200
          ],
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "_format_metrics",
          "docstring": "",
          "line_range": [
            202,
            203
          ],
          "parameters": [
            "self",
            "metrics"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubIssuesCreator",
          "docstring": "",
          "line_range": [
            33,
            203
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                34,
                43
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "token",
                "use_cli"
              ]
            },
            {
              "name": "create_epic_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
              "line_range": [
                45,
                83
              ],
              "parameters": [
                "self",
                "epic_data"
              ]
            },
            {
              "name": "create_task_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                85,
                128
              ],
              "parameters": [
                "self",
                "task_data",
                "epic_number"
              ]
            },
            {
              "name": "_create_issue_via_api",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
              "line_range": [
                130,
                150
              ],
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_create_issue_via_cli",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
              "line_range": [
                152,
                186
              ],
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_format_criteria",
              "docstring": "",
              "line_range": [
                188,
                189
              ],
              "parameters": [
                "self",
                "criteria"
              ]
            },
            {
              "name": "_format_tasks",
              "docstring": "",
              "line_range": [
                191,
                200
              ],
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "_format_metrics",
              "docstring": "",
              "line_range": [
                202,
                203
              ],
              "parameters": [
                "self",
                "metrics"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "load_env_file": [
          "value.strip",
          "Path",
          "line.startswith",
          "print",
          "line.strip",
          "open",
          "line.split",
          "key.strip",
          "env_file.exists"
        ],
        "__init__": [],
        "create_epic_issue": [
          "self._create_issue_via_cli",
          "self._format_criteria",
          "self._create_issue_via_api",
          "epic_data.get",
          "self._format_tasks",
          "self._format_metrics"
        ],
        "create_task_issue": [
          "self._create_issue_via_api",
          "task_data.get",
          "self._format_criteria",
          "self._create_issue_via_cli"
        ],
        "_create_issue_via_api": [
          "requests.post",
          "print",
          "response.json"
        ],
        "_create_issue_via_cli": [
          "int",
          "subprocess.run",
          "os.unlink",
          "os.getpid",
          "open",
          "issue_url.split",
          "f.write",
          "print"
        ],
        "_format_criteria": [],
        "_format_tasks": [],
        "_format_metrics": [
          "metrics.items"
        ],
        "load_epics_data": [
          "Path",
          "print",
          "open",
          "epics_file.exists",
          "json.load"
        ],
        "main": [
          "epics_data.get",
          "epic_data.get",
          "load_epics_data",
          "GitHubIssuesCreator",
          "len",
          "creator.create_task_issue",
          "os.getenv",
          "creator.create_epic_issue",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "eb055582-6858-454c-8169-420ae2416b8e"
    },
    {
      "module_id": "src.scripts.export_to_github_projects",
      "path": "src/scripts/export_to_github_projects.py",
      "category": "core",
      "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            183,
            266
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            23,
            26
          ],
          "parameters": [
            "self",
            "config_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "check_github_cli",
          "docstring": "Check if GitHub CLI is installed and authenticated",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "list_projects",
          "docstring": "List available GitHub Projects (via gh-projects extension)",
          "line_range": [
            38,
            55
          ],
          "parameters": [
            "self",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "create_project_item",
          "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "project_number",
            "title",
            "body",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_tasks_to_project",
          "docstring": "Export tasks to GitHub Project",
          "line_range": [
            84,
            123
          ],
          "parameters": [
            "self",
            "tasks",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_ideas_to_project",
          "docstring": "Export ideas to GitHub Project",
          "line_range": [
            125,
            164
          ],
          "parameters": [
            "self",
            "ideas",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "filter_data",
          "docstring": "Filter data by status and priority",
          "line_range": [
            166,
            180
          ],
          "parameters": [
            "self",
            "data",
            "status_filter",
            "priority_filter"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExportScript",
          "docstring": "Extended exporter with command-line interface and GitHub CLI integration",
          "line_range": [
            20,
            180
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                23,
                26
              ],
              "parameters": [
                "self",
                "config_path",
                "dry_run"
              ]
            },
            {
              "name": "check_github_cli",
              "docstring": "Check if GitHub CLI is installed and authenticated",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "list_projects",
              "docstring": "List available GitHub Projects (via gh-projects extension)",
              "line_range": [
                38,
                55
              ],
              "parameters": [
                "self",
                "owner",
                "repo"
              ]
            },
            {
              "name": "create_project_item",
              "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "project_number",
                "title",
                "body",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_tasks_to_project",
              "docstring": "Export tasks to GitHub Project",
              "line_range": [
                84,
                123
              ],
              "parameters": [
                "self",
                "tasks",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_ideas_to_project",
              "docstring": "Export ideas to GitHub Project",
              "line_range": [
                125,
                164
              ],
              "parameters": [
                "self",
                "ideas",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "filter_data",
              "docstring": "Filter data by status and priority",
              "line_range": [
                166,
                180
              ],
              "parameters": [
                "self",
                "data",
                "status_filter",
                "priority_filter"
              ]
            }
          ],
          "bases": [
            "GitHubProjectsExporter"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "super"
        ],
        "check_github_cli": [
          "print",
          "self._run_gh_command"
        ],
        "list_projects": [
          "isinstance",
          "print",
          "json.loads",
          "self._run_gh_command"
        ],
        "create_project_item": [
          "output.strip",
          "print",
          "str",
          "self._run_gh_command"
        ],
        "export_tasks_to_project": [
          "self.create_project_item",
          "self.format_task_for_github",
          "task.get",
          "len",
          "print"
        ],
        "export_ideas_to_project": [
          "idea.get",
          "self.create_project_item",
          "self.format_idea_for_github",
          "len",
          "print"
        ],
        "filter_data": [
          "item.get"
        ],
        "main": [
          "exporter.filter_data",
          "exporter.export_ideas_to_project",
          "parser.add_argument",
          "exporter.load_official_data",
          "exporter._save_mapping",
          "sys.exit",
          "parser.parse_args",
          "GitHubProjectsExportScript",
          "argparse.ArgumentParser",
          "exporter.export_tasks_to_project",
          "exporter.check_github_cli",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "GitHubProjectsExporter",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "datetime",
        "json",
        "llmstruct.gh_view",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9b2cb520-cd97-47e5-b302-fa9e37c5ef0c"
    },
    {
      "module_id": "src.scripts.validate_schemas",
      "path": "src/scripts/validate_schemas.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "e1ac7213-5947-46c2-8ade-18649c71a45a"
    },
    {
      "module_id": "src.scripts.process_926_items",
      "path": "src/scripts/process_926_items.py",
      "category": "core",
      "module_doc": "926 Items Processing Script - Updated Implementation\nProcesses items according to GitHub roadmap + personal management vision\nImplements all decisions from 926_items_processing_execution_plan.md",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            51
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_comprehensive_index",
          "docstring": "Load the 926 items from comprehensive index",
          "line_range": [
            53,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "calculate_confidence_score",
          "docstring": "Calculate confidence score for categorization decision",
          "line_range": [
            113,
            146
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "check_t_pot_related",
          "docstring": "Enhanced T-Pot detection",
          "line_range": [
            148,
            155
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_team_implementable",
          "docstring": "Check if team can implement without architecture review",
          "line_range": [
            157,
            176
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_personal_vs_team_vs_business",
          "docstring": "Classify as personal/team/business",
          "line_range": [
            178,
            214
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "identify_epic_candidates",
          "docstring": "Identify items that should be grouped into epics",
          "line_range": [
            216,
            233
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "extract_epic_name",
          "docstring": "Extract epic name from item",
          "line_range": [
            235,
            241
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "categorize_item",
          "docstring": "Main categorization logic with confidence scoring",
          "line_range": [
            243,
            278
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "find_duplicates",
          "docstring": "Enhanced duplicate detection with T-Pot special handling",
          "line_range": [
            280,
            319
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "calculate_similarity",
          "docstring": "Enhanced similarity calculation",
          "line_range": [
            321,
            342
          ],
          "parameters": [
            "self",
            "title1",
            "title2"
          ],
          "decorators": []
        },
        {
          "name": "suggest_merge_strategy",
          "docstring": "Enhanced merge strategy with T-Pot consideration",
          "line_range": [
            344,
            359
          ],
          "parameters": [
            "self",
            "item1",
            "item2"
          ],
          "decorators": []
        },
        {
          "name": "process_items",
          "docstring": "Main processing workflow implementing execution plan",
          "line_range": [
            361,
            468
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "save_results",
          "docstring": "Save categorized results with enhanced metadata",
          "line_range": [
            470,
            546
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_category_description",
          "docstring": "Category descriptions per execution plan",
          "line_range": [
            548,
            562
          ],
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Main execution workflow per execution plan",
          "line_range": [
            564,
            606
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskProcessor926",
          "docstring": "",
          "line_range": [
            15,
            606
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                51
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_comprehensive_index",
              "docstring": "Load the 926 items from comprehensive index",
              "line_range": [
                53,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "calculate_confidence_score",
              "docstring": "Calculate confidence score for categorization decision",
              "line_range": [
                113,
                146
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "check_t_pot_related",
              "docstring": "Enhanced T-Pot detection",
              "line_range": [
                148,
                155
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_team_implementable",
              "docstring": "Check if team can implement without architecture review",
              "line_range": [
                157,
                176
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_personal_vs_team_vs_business",
              "docstring": "Classify as personal/team/business",
              "line_range": [
                178,
                214
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "identify_epic_candidates",
              "docstring": "Identify items that should be grouped into epics",
              "line_range": [
                216,
                233
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "extract_epic_name",
              "docstring": "Extract epic name from item",
              "line_range": [
                235,
                241
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "categorize_item",
              "docstring": "Main categorization logic with confidence scoring",
              "line_range": [
                243,
                278
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "find_duplicates",
              "docstring": "Enhanced duplicate detection with T-Pot special handling",
              "line_range": [
                280,
                319
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "calculate_similarity",
              "docstring": "Enhanced similarity calculation",
              "line_range": [
                321,
                342
              ],
              "parameters": [
                "self",
                "title1",
                "title2"
              ]
            },
            {
              "name": "suggest_merge_strategy",
              "docstring": "Enhanced merge strategy with T-Pot consideration",
              "line_range": [
                344,
                359
              ],
              "parameters": [
                "self",
                "item1",
                "item2"
              ]
            },
            {
              "name": "process_items",
              "docstring": "Main processing workflow implementing execution plan",
              "line_range": [
                361,
                468
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "save_results",
              "docstring": "Save categorized results with enhanced metadata",
              "line_range": [
                470,
                546
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_category_description",
              "docstring": "Category descriptions per execution plan",
              "line_range": [
                548,
                562
              ],
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "run",
              "docstring": "Main execution workflow per execution plan",
              "line_range": [
                564,
                606
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "datetime.now",
          "Path"
        ],
        "load_comprehensive_index": [
          "index_path.exists",
          "data.items",
          "hash",
          "items.append",
          "unique_items.append",
          "set",
          "print",
          "value.items",
          "item.get",
          "len",
          "items.extend",
          "open",
          "isinstance",
          "any",
          "item_content.lower",
          "seen_items.add",
          "json.load",
          "str"
        ],
        "calculate_confidence_score": [
          "self.check_t_pot_related",
          "item.get",
          "sum",
          "min",
          "str"
        ],
        "check_t_pot_related": [
          "str",
          "any"
        ],
        "check_team_implementable": [
          "sum",
          "str"
        ],
        "check_personal_vs_team_vs_business": [
          "sum",
          "max",
          "item.get",
          "str"
        ],
        "identify_epic_candidates": [
          "epic_groups.items",
          "any",
          "item.get",
          "len",
          "self.extract_epic_name",
          "str"
        ],
        "extract_epic_name": [
          "title.split",
          "item.get"
        ],
        "categorize_item": [
          "self.check_t_pot_related",
          "self.calculate_confidence_score",
          "str",
          "self.check_team_implementable",
          "any",
          "self.check_personal_vs_team_vs_business"
        ],
        "find_duplicates": [
          "self.check_t_pot_related",
          "self.suggest_merge_strategy",
          "seen_items.items",
          "duplicates.append",
          "item.get",
          "self.calculate_similarity"
        ],
        "calculate_similarity": [
          "words1.union",
          "title1.split",
          "words1.intersection",
          "set",
          "title2.split",
          "len",
          "min"
        ],
        "suggest_merge_strategy": [
          "self.check_t_pot_related",
          "item2.get",
          "len",
          "item1.get",
          "str"
        ],
        "process_items": [
          "low_confidence_items.append",
          "self.check_t_pot_related",
          "self.categorize_item",
          "duplicate_item_ids.add",
          "self.find_duplicates",
          "any",
          "str",
          "set",
          "self.check_team_implementable",
          "processed_item.copy",
          "len",
          "datetime.now",
          "self.extract_epic_name",
          "print",
          "id",
          "category.startswith"
        ],
        "save_results": [
          "self.get_category_description",
          "item.get",
          "sum",
          "open",
          "len",
          "datetime.now",
          "json.dump",
          "print"
        ],
        "get_category_description": [
          "descriptions.get"
        ],
        "run": [
          "self.process_items",
          "self.save_results",
          "self.load_comprehensive_index",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "adcb8bde-67f5-4c66-866d-e7832f178346"
    },
    {
      "module_id": "src.scripts.fix_github_script",
      "path": "src/scripts/fix_github_script.py",
      "category": "core",
      "module_doc": "Quick fix for GitHub issues creation script\n\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 JSON \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445",
      "functions": [
        {
          "name": "fix_json_loading",
          "docstring": "\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 JSON \u0434\u0430\u043d\u043d\u044b\u0445",
          "line_range": [
            11,
            42
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "fix_json_loading": [
          "Path",
          "content.replace",
          "open",
          "f.read",
          "f.write",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "4a3a3272-85d7-4fa2-90e9-8bb2685a235a"
    },
    {
      "module_id": "src.scripts.github_sync_manager",
      "path": "src/scripts/github_sync_manager.py",
      "category": "core",
      "module_doc": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub\nSupports: Issues, Epics (Projects), Discussions\nSafety: dry-run mode, logging, collision detection",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface",
          "line_range": [
            375,
            408
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            17,
            48
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results for idempotency",
          "line_range": [
            50,
            60
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log for future idempotency",
          "line_range": [
            62,
            65
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Safe GitHub API request with rate limiting",
          "line_range": [
            67,
            94
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_issues",
          "docstring": "Get existing GitHub issues for collision detection",
          "line_range": [
            96,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_discussions",
          "docstring": "Get existing GitHub discussions",
          "line_range": [
            114,
            118
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced (idempotency)",
          "line_range": [
            120,
            125
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "find_existing_by_title",
          "docstring": "Find existing GitHub item by title similarity",
          "line_range": [
            127,
            143
          ],
          "parameters": [
            "self",
            "title",
            "existing_items"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue",
          "docstring": "Create GitHub issue from processed item",
          "line_range": [
            145,
            182
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion",
          "docstring": "Create GitHub discussion from processed item",
          "line_range": [
            184,
            194
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic",
          "docstring": "Create GitHub epic (as Project or enhanced Issue)",
          "line_range": [
            196,
            214
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "sync_category",
          "docstring": "Sync specific category with GitHub",
          "line_range": [
            216,
            290
          ],
          "parameters": [
            "self",
            "category",
            "filename"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Pre-sync validation checks",
          "line_range": [
            292,
            322
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "Main sync execution",
          "line_range": [
            324,
            373
          ],
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubSyncManager",
          "docstring": "",
          "line_range": [
            16,
            373
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                17,
                48
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results for idempotency",
              "line_range": [
                50,
                60
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log for future idempotency",
              "line_range": [
                62,
                65
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Safe GitHub API request with rate limiting",
              "line_range": [
                67,
                94
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "get_existing_issues",
              "docstring": "Get existing GitHub issues for collision detection",
              "line_range": [
                96,
                112
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_existing_discussions",
              "docstring": "Get existing GitHub discussions",
              "line_range": [
                114,
                118
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced (idempotency)",
              "line_range": [
                120,
                125
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "find_existing_by_title",
              "docstring": "Find existing GitHub item by title similarity",
              "line_range": [
                127,
                143
              ],
              "parameters": [
                "self",
                "title",
                "existing_items"
              ]
            },
            {
              "name": "create_github_issue",
              "docstring": "Create GitHub issue from processed item",
              "line_range": [
                145,
                182
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion",
              "docstring": "Create GitHub discussion from processed item",
              "line_range": [
                184,
                194
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_epic",
              "docstring": "Create GitHub epic (as Project or enhanced Issue)",
              "line_range": [
                196,
                214
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "sync_category",
              "docstring": "Sync specific category with GitHub",
              "line_range": [
                216,
                290
              ],
              "parameters": [
                "self",
                "category",
                "filename"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Pre-sync validation checks",
              "line_range": [
                292,
                322
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "Main sync execution",
              "line_range": [
                324,
                373
              ],
              "parameters": [
                "self",
                "categories"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getenv",
          "Path",
          "print",
          "self.load_sync_log"
        ],
        "load_sync_log": [
          "json.load",
          "open"
        ],
        "save_sync_log": [
          "json.dump",
          "open"
        ],
        "api_request": [
          "requests.get",
          "int",
          "requests.patch",
          "method.upper",
          "requests.post",
          "time.sleep",
          "response.json",
          "response.raise_for_status",
          "ValueError",
          "print"
        ],
        "get_existing_issues": [
          "issues.extend",
          "self.api_request",
          "len"
        ],
        "get_existing_discussions": [],
        "item_already_synced": [
          "item.get"
        ],
        "find_existing_by_title": [
          "title.lower",
          "item.get",
          "len"
        ],
        "create_github_issue": [
          "processing_meta.get",
          "item.get",
          "self.api_request",
          "labels.append",
          "print"
        ],
        "create_github_discussion": [
          "print",
          "item.get"
        ],
        "create_github_epic": [
          "print",
          "item.get",
          "self.api_request"
        ],
        "sync_category": [
          "self.item_already_synced",
          "self.create_github_issue",
          "item.get",
          "print",
          "result.get",
          "self.create_github_discussion",
          "file_path.exists",
          "data.get",
          "open",
          "self.get_existing_issues",
          "self.create_github_epic",
          "datetime.now",
          "self.get_existing_discussions",
          "json.load",
          "self.find_existing_by_title",
          "existing.get"
        ],
        "validate_before_sync": [
          "user_info.get",
          "core_limit.get",
          "repo_info.get",
          "self.api_request",
          "print",
          "rate_limit.get"
        ],
        "run_sync": [
          "self.validate_before_sync",
          "sum",
          "self.sync_category",
          "self.save_sync_log",
          "results.values",
          "datetime.now",
          "r.get",
          "print"
        ],
        "main": [
          "parser.add_argument",
          "parser.parse_args",
          "result.get",
          "argparse.ArgumentParser",
          "GitHubSyncManager",
          "len",
          "manager.run_sync",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "0d282193-616c-4f7c-8688-f58a8da885f8"
    },
    {
      "module_id": "src.scripts.create_comprehensive_index",
      "path": "src/scripts/create_comprehensive_index.py",
      "category": "core",
      "module_doc": "Comprehensive Project Index Creator\nScans ALL project directories for tasks, ideas, sessions, and concepts.\nProvides complete visibility into project state and unaccounted innovations.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            714,
            735
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            45,
            58
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize comprehensive extraction patterns.",
          "line_range": [
            60,
            92
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "scan_all_directories",
          "docstring": "Scan all configured directories comprehensively.",
          "line_range": [
            94,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_scan_directory",
          "docstring": "Scan a specific directory according to its configuration.",
          "line_range": [
            113,
            127
          ],
          "parameters": [
            "self",
            "directory",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_scan_root_files",
          "docstring": "Scan root-level files.",
          "line_range": [
            129,
            133
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_should_scan_file",
          "docstring": "Check if file should be scanned based on extension.",
          "line_range": [
            135,
            137
          ],
          "parameters": [
            "self",
            "file_path",
            "allowed_types"
          ],
          "decorators": []
        },
        {
          "name": "_scan_file",
          "docstring": "Scan individual file for project items.",
          "line_range": [
            139,
            152
          ],
          "parameters": [
            "self",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_text",
          "docstring": "Extract items from text/markdown files.",
          "line_range": [
            154,
            206
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_json",
          "docstring": "Extract items from JSON files.",
          "line_range": [
            208,
            225
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_item_from_match",
          "docstring": "Create ProjectItem from regex match.",
          "line_range": [
            227,
            249
          ],
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_checkbox_item",
          "docstring": "Create ProjectItem from checkbox match.",
          "line_range": [
            251,
            274
          ],
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_simple_item",
          "docstring": "Create simple ProjectItem.",
          "line_range": [
            276,
            297
          ],
          "parameters": [
            "self",
            "title",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_status",
          "docstring": "Detect item status from surrounding content.",
          "line_range": [
            299,
            308
          ],
          "parameters": [
            "self",
            "content",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_priority",
          "docstring": "Detect item priority from surrounding content.",
          "line_range": [
            310,
            319
          ],
          "parameters": [
            "self",
            "content",
            "position",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_assess_strategic_value",
          "docstring": "Assess strategic value of item.",
          "line_range": [
            321,
            330
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract context around position.",
          "line_range": [
            332,
            336
          ],
          "parameters": [
            "self",
            "content",
            "position",
            "length"
          ],
          "decorators": []
        },
        {
          "name": "_detect_category",
          "docstring": "Detect item category.",
          "line_range": [
            338,
            351
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_effort",
          "docstring": "Estimate effort required.",
          "line_range": [
            353,
            362
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tags",
          "docstring": "Extract relevant tags.",
          "line_range": [
            364,
            378
          ],
          "parameters": [
            "self",
            "title",
            "content",
            "source_dir"
          ],
          "decorators": []
        },
        {
          "name": "_is_noise_checkbox",
          "docstring": "Check if checkbox is noise (navigation, etc).",
          "line_range": [
            380,
            384
          ],
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "_parse_json_files",
          "docstring": "Parse structured JSON files for existing data.",
          "line_range": [
            386,
            402
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_process_structured_json",
          "docstring": "Process structured JSON data.",
          "line_range": [
            404,
            419
          ],
          "parameters": [
            "self",
            "data",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_add_json_item",
          "docstring": "Add item from JSON structure.",
          "line_range": [
            421,
            441
          ],
          "parameters": [
            "self",
            "item",
            "file_path",
            "item_type"
          ],
          "decorators": []
        },
        {
          "name": "_assess_json_strategic_value",
          "docstring": "Assess strategic value from JSON item.",
          "line_range": [
            443,
            450
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_extract_innovation_concepts",
          "docstring": "Extract innovation concepts from content.",
          "line_range": [
            452,
            482
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_enhance_items",
          "docstring": "Post-process items to enhance metadata and find relationships.",
          "line_range": [
            484,
            501
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_find_related_items",
          "docstring": "Find related items based on content similarity.",
          "line_range": [
            503,
            517
          ],
          "parameters": [
            "self",
            "item",
            "id_map",
            "title_map"
          ],
          "decorators": []
        },
        {
          "name": "generate_comprehensive_report",
          "docstring": "Generate comprehensive analysis report.",
          "line_range": [
            519,
            561
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_comprehensive_index",
          "docstring": "Save comprehensive index and reports.",
          "line_range": [
            563,
            582
          ],
          "parameters": [
            "self",
            "output_dir"
          ],
          "decorators": []
        },
        {
          "name": "_generate_analysis_report",
          "docstring": "Generate human-readable analysis report.",
          "line_range": [
            584,
            658
          ],
          "parameters": [
            "self",
            "report"
          ],
          "decorators": []
        },
        {
          "name": "_format_dict",
          "docstring": "Format dictionary for markdown display.",
          "line_range": [
            660,
            662
          ],
          "parameters": [
            "self",
            "d"
          ],
          "decorators": []
        },
        {
          "name": "_format_items_list",
          "docstring": "Format items list for markdown display.",
          "line_range": [
            664,
            677
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_tasks",
          "docstring": "Extract tasks from JSON tasks array.",
          "line_range": [
            679,
            684
          ],
          "parameters": [
            "self",
            "tasks_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_ideas",
          "docstring": "Extract ideas from JSON ideas array.",
          "line_range": [
            686,
            691
          ],
          "parameters": [
            "self",
            "ideas_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_sessions",
          "docstring": "Extract sessions from JSON sessions array.",
          "line_range": [
            693,
            698
          ],
          "parameters": [
            "self",
            "sessions_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_array",
          "docstring": "Extract items from JSON array.",
          "line_range": [
            700,
            711
          ],
          "parameters": [
            "self",
            "array_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ProjectItem",
          "docstring": "Unified representation of any project item (task, idea, session, concept).",
          "line_range": [
            22,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ComprehensiveIndexer",
          "docstring": "Comprehensive indexer for all project content.",
          "line_range": [
            42,
            711
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                45,
                58
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize comprehensive extraction patterns.",
              "line_range": [
                60,
                92
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "scan_all_directories",
              "docstring": "Scan all configured directories comprehensively.",
              "line_range": [
                94,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_scan_directory",
              "docstring": "Scan a specific directory according to its configuration.",
              "line_range": [
                113,
                127
              ],
              "parameters": [
                "self",
                "directory",
                "config"
              ]
            },
            {
              "name": "_scan_root_files",
              "docstring": "Scan root-level files.",
              "line_range": [
                129,
                133
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "_should_scan_file",
              "docstring": "Check if file should be scanned based on extension.",
              "line_range": [
                135,
                137
              ],
              "parameters": [
                "self",
                "file_path",
                "allowed_types"
              ]
            },
            {
              "name": "_scan_file",
              "docstring": "Scan individual file for project items.",
              "line_range": [
                139,
                152
              ],
              "parameters": [
                "self",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_text",
              "docstring": "Extract items from text/markdown files.",
              "line_range": [
                154,
                206
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_json",
              "docstring": "Extract items from JSON files.",
              "line_range": [
                208,
                225
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_item_from_match",
              "docstring": "Create ProjectItem from regex match.",
              "line_range": [
                227,
                249
              ],
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_checkbox_item",
              "docstring": "Create ProjectItem from checkbox match.",
              "line_range": [
                251,
                274
              ],
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_simple_item",
              "docstring": "Create simple ProjectItem.",
              "line_range": [
                276,
                297
              ],
              "parameters": [
                "self",
                "title",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority",
                "position"
              ]
            },
            {
              "name": "_detect_status",
              "docstring": "Detect item status from surrounding content.",
              "line_range": [
                299,
                308
              ],
              "parameters": [
                "self",
                "content",
                "position"
              ]
            },
            {
              "name": "_detect_priority",
              "docstring": "Detect item priority from surrounding content.",
              "line_range": [
                310,
                319
              ],
              "parameters": [
                "self",
                "content",
                "position",
                "default"
              ]
            },
            {
              "name": "_assess_strategic_value",
              "docstring": "Assess strategic value of item.",
              "line_range": [
                321,
                330
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract context around position.",
              "line_range": [
                332,
                336
              ],
              "parameters": [
                "self",
                "content",
                "position",
                "length"
              ]
            },
            {
              "name": "_detect_category",
              "docstring": "Detect item category.",
              "line_range": [
                338,
                351
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_estimate_effort",
              "docstring": "Estimate effort required.",
              "line_range": [
                353,
                362
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_tags",
              "docstring": "Extract relevant tags.",
              "line_range": [
                364,
                378
              ],
              "parameters": [
                "self",
                "title",
                "content",
                "source_dir"
              ]
            },
            {
              "name": "_is_noise_checkbox",
              "docstring": "Check if checkbox is noise (navigation, etc).",
              "line_range": [
                380,
                384
              ],
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "_parse_json_files",
              "docstring": "Parse structured JSON files for existing data.",
              "line_range": [
                386,
                402
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_process_structured_json",
              "docstring": "Process structured JSON data.",
              "line_range": [
                404,
                419
              ],
              "parameters": [
                "self",
                "data",
                "file_path"
              ]
            },
            {
              "name": "_add_json_item",
              "docstring": "Add item from JSON structure.",
              "line_range": [
                421,
                441
              ],
              "parameters": [
                "self",
                "item",
                "file_path",
                "item_type"
              ]
            },
            {
              "name": "_assess_json_strategic_value",
              "docstring": "Assess strategic value from JSON item.",
              "line_range": [
                443,
                450
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_extract_innovation_concepts",
              "docstring": "Extract innovation concepts from content.",
              "line_range": [
                452,
                482
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_enhance_items",
              "docstring": "Post-process items to enhance metadata and find relationships.",
              "line_range": [
                484,
                501
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_find_related_items",
              "docstring": "Find related items based on content similarity.",
              "line_range": [
                503,
                517
              ],
              "parameters": [
                "self",
                "item",
                "id_map",
                "title_map"
              ]
            },
            {
              "name": "generate_comprehensive_report",
              "docstring": "Generate comprehensive analysis report.",
              "line_range": [
                519,
                561
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_comprehensive_index",
              "docstring": "Save comprehensive index and reports.",
              "line_range": [
                563,
                582
              ],
              "parameters": [
                "self",
                "output_dir"
              ]
            },
            {
              "name": "_generate_analysis_report",
              "docstring": "Generate human-readable analysis report.",
              "line_range": [
                584,
                658
              ],
              "parameters": [
                "self",
                "report"
              ]
            },
            {
              "name": "_format_dict",
              "docstring": "Format dictionary for markdown display.",
              "line_range": [
                660,
                662
              ],
              "parameters": [
                "self",
                "d"
              ]
            },
            {
              "name": "_format_items_list",
              "docstring": "Format items list for markdown display.",
              "line_range": [
                664,
                677
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "_extract_json_tasks",
              "docstring": "Extract tasks from JSON tasks array.",
              "line_range": [
                679,
                684
              ],
              "parameters": [
                "self",
                "tasks_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_ideas",
              "docstring": "Extract ideas from JSON ideas array.",
              "line_range": [
                686,
                691
              ],
              "parameters": [
                "self",
                "ideas_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_sessions",
              "docstring": "Extract sessions from JSON sessions array.",
              "line_range": [
                693,
                698
              ],
              "parameters": [
                "self",
                "sessions_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_array",
              "docstring": "Extract items from JSON array.",
              "line_range": [
                700,
                711
              ],
              "parameters": [
                "self",
                "array_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._init_patterns",
          "Path"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "scan_all_directories": [
          "self._enhance_items",
          "self._scan_root_files",
          "logger.info",
          "self._scan_directory",
          "len",
          "self._parse_json_files"
        ],
        "_scan_directory": [
          "self._should_scan_file",
          "self._scan_file",
          "dir_path.exists",
          "logger.info",
          "dir_path.glob",
          "logger.warning",
          "file_path.is_file"
        ],
        "_scan_root_files": [
          "self._should_scan_file",
          "file_path.is_file",
          "self._scan_file"
        ],
        "_should_scan_file": [],
        "_scan_file": [
          "self._extract_from_json",
          "logger.error",
          "open",
          "f.read",
          "self._extract_from_text"
        ],
        "_extract_from_text": [
          "self._create_item_from_match",
          "match.start",
          "self._is_noise_checkbox",
          "self._create_simple_item",
          "self._extract_innovation_concepts",
          "self._create_checkbox_item",
          "match.group"
        ],
        "_extract_from_json": [
          "self._extract_json_tasks",
          "self._extract_json_sessions",
          "self._extract_json_array",
          "logger.warning",
          "isinstance",
          "self._extract_json_ideas",
          "json.loads"
        ],
        "_create_item_from_match": [
          "self._detect_priority",
          "title.strip",
          "match.start",
          "str",
          "self._estimate_effort",
          "self._detect_status",
          "self._extract_tags",
          "self._detect_category",
          "match.group",
          "ProjectItem",
          "datetime.now",
          "self._extract_context",
          "self._assess_strategic_value"
        ],
        "_create_checkbox_item": [
          "self._detect_priority",
          "match.start",
          "str",
          "self._estimate_effort",
          "self._extract_tags",
          "self._detect_category",
          "match.group",
          "ProjectItem",
          "datetime.now",
          "self._extract_context",
          "self._assess_strategic_value"
        ],
        "_create_simple_item": [
          "title.strip",
          "self._extract_context",
          "ProjectItem",
          "datetime.now",
          "str"
        ],
        "_detect_status": [
          "max"
        ],
        "_detect_priority": [
          "max"
        ],
        "_assess_strategic_value": [],
        "_extract_context": [
          "min",
          "max",
          "len"
        ],
        "_detect_category": [
          "title.lower",
          "any"
        ],
        "_estimate_effort": [
          "any"
        ],
        "_extract_tags": [
          "title.lower",
          "tags.append",
          "source_dir.replace"
        ],
        "_is_noise_checkbox": [
          "text.lower",
          "text.strip",
          "len",
          "any"
        ],
        "_parse_json_files": [
          "logger.error",
          "self._process_structured_json",
          "file_path.exists",
          "open",
          "json.load"
        ],
        "_process_structured_json": [
          "self._add_json_item",
          "isinstance"
        ],
        "_add_json_item": [
          "ProjectItem",
          "self._assess_json_strategic_value",
          "item.get",
          "len",
          "datetime.now",
          "str"
        ],
        "_assess_json_strategic_value": [
          "item.get"
        ],
        "_extract_innovation_concepts": [
          "str",
          "self._extract_context",
          "content.find",
          "source_dir.replace",
          "enumerate",
          "content.split",
          "line.strip",
          "len",
          "innovation_lines.append",
          "datetime.now",
          "ProjectItem"
        ],
        "_enhance_items": [
          "logger.info",
          "re.sub",
          "self._find_related_items"
        ],
        "_find_related_items": [
          "re.findall",
          "ref_type.upper",
          "related.append"
        ],
        "generate_comprehensive_report": [
          "by_priority.get",
          "by_status.get",
          "by_type.get",
          "len",
          "datetime.now",
          "by_strategic_value.get",
          "asdict",
          "by_source.get"
        ],
        "save_comprehensive_index": [
          "self.generate_comprehensive_report",
          "logger.info",
          "os.makedirs",
          "self._generate_analysis_report",
          "open",
          "len",
          "f.write",
          "json.dump"
        ],
        "_generate_analysis_report": [
          "self._format_items_list",
          "self._format_dict",
          "len"
        ],
        "_format_dict": [
          "sorted",
          "d.items"
        ],
        "_format_items_list": [
          "result.append"
        ],
        "_extract_json_tasks": [
          "self._add_json_item",
          "isinstance"
        ],
        "_extract_json_ideas": [
          "self._add_json_item",
          "isinstance"
        ],
        "_extract_json_sessions": [
          "self._add_json_item",
          "isinstance"
        ],
        "_extract_json_array": [
          "self._add_json_item",
          "isinstance",
          "str"
        ],
        "main": [
          "ComprehensiveIndexer",
          "by_strategic.get",
          "indexer.scan_all_directories",
          "logger.info",
          "indexer.save_comprehensive_index",
          "len",
          "print"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "62d8e87a-346f-420b-b68f-00ef062c8238"
    },
    {
      "module_id": "src.scripts.validate_json",
      "path": "src/scripts/validate_json.py",
      "category": "core",
      "module_doc": "JSON Validation Script\nValidates JSON files against their respective schemas.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            13,
            23
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate a JSON file against a schema.",
          "line_range": [
            26,
            49
          ],
          "parameters": [
            "file_path",
            "schema_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "json.load",
          "open",
          "print"
        ],
        "validate_json": [
          "load_json",
          "Path",
          "validator.validate",
          "print",
          "str",
          "Draft7Validator"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "pathlib",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "ab8943fb-31ad-4a79-93cb-5602522108f8"
    },
    {
      "module_id": "src.scripts.validate_refs",
      "path": "src/scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": [
            11,
            43
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            46,
            47
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "source_file.exists",
          "idea.get",
          "target_file.exists",
          "Path",
          "broken_links.append",
          "logger.error",
          "logger.info",
          "enumerate",
          "json.dump",
          "json.load",
          "logger.warning"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "1462ac9c-c75b-455e-920f-772edf307d20"
    },
    {
      "module_id": "src.scripts.create_tasks_index",
      "path": "src/scripts/create_tasks_index.py",
      "category": "core",
      "module_doc": "Tasks Index Creator\nScans all documentation files and creates comprehensive index of tasks, EPICs, TODOs, and other actionable items.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            469,
            515
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            42,
            44
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize regex patterns for task extraction.",
          "line_range": [
            46,
            73
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "extract_from_markdown",
          "docstring": "Extract tasks from markdown file.",
          "line_range": [
            75,
            107
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_status",
          "docstring": "Extract document status.",
          "line_range": [
            109,
            120
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_priority",
          "docstring": "Extract document priority.",
          "line_range": [
            122,
            135
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_date",
          "docstring": "Extract document date.",
          "line_range": [
            137,
            142
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_epics",
          "docstring": "Extract EPIC items.",
          "line_range": [
            144,
            168
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tasks",
          "docstring": "Extract explicit task items.",
          "line_range": [
            170,
            194
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_todos",
          "docstring": "Extract TODO items.",
          "line_range": [
            196,
            219
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_phases",
          "docstring": "Extract phase/step items.",
          "line_range": [
            221,
            245
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_checkboxes",
          "docstring": "Extract checkbox items as tasks.",
          "line_range": [
            247,
            275
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract surrounding context for a match.",
          "line_range": [
            277,
            286
          ],
          "parameters": [
            "self",
            "content",
            "start",
            "end",
            "context_lines"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            292,
            294
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_documentation",
          "docstring": "Scan all documentation files for tasks.",
          "line_range": [
            296,
            314
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_index",
          "docstring": "Generate comprehensive task index.",
          "line_range": [
            316,
            367
          ],
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "generate_summary_report",
          "docstring": "Generate human-readable summary report.",
          "line_range": [
            369,
            446
          ],
          "parameters": [
            "self",
            "index"
          ],
          "decorators": []
        },
        {
          "name": "save_index",
          "docstring": "Save index and summary to files.",
          "line_range": [
            448,
            466
          ],
          "parameters": [
            "self",
            "index",
            "summary",
            "output_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Task",
          "docstring": "Represents a single task or actionable item.",
          "line_range": [
            21,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "TaskExtractor",
          "docstring": "Extract tasks from various document formats.",
          "line_range": [
            39,
            286
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                42,
                44
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize regex patterns for task extraction.",
              "line_range": [
                46,
                73
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "extract_from_markdown",
              "docstring": "Extract tasks from markdown file.",
              "line_range": [
                75,
                107
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_status",
              "docstring": "Extract document status.",
              "line_range": [
                109,
                120
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_priority",
              "docstring": "Extract document priority.",
              "line_range": [
                122,
                135
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_date",
              "docstring": "Extract document date.",
              "line_range": [
                137,
                142
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_epics",
              "docstring": "Extract EPIC items.",
              "line_range": [
                144,
                168
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_tasks",
              "docstring": "Extract explicit task items.",
              "line_range": [
                170,
                194
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_todos",
              "docstring": "Extract TODO items.",
              "line_range": [
                196,
                219
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_phases",
              "docstring": "Extract phase/step items.",
              "line_range": [
                221,
                245
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_checkboxes",
              "docstring": "Extract checkbox items as tasks.",
              "line_range": [
                247,
                275
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract surrounding context for a match.",
              "line_range": [
                277,
                286
              ],
              "parameters": [
                "self",
                "content",
                "start",
                "end",
                "context_lines"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TaskIndexGenerator",
          "docstring": "Generate comprehensive task index.",
          "line_range": [
            289,
            466
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                292,
                294
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_documentation",
              "docstring": "Scan all documentation files for tasks.",
              "line_range": [
                296,
                314
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_index",
              "docstring": "Generate comprehensive task index.",
              "line_range": [
                316,
                367
              ],
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "generate_summary_report",
              "docstring": "Generate human-readable summary report.",
              "line_range": [
                369,
                446
              ],
              "parameters": [
                "self",
                "index"
              ]
            },
            {
              "name": "save_index",
              "docstring": "Save index and summary to files.",
              "line_range": [
                448,
                466
              ],
              "parameters": [
                "self",
                "index",
                "summary",
                "output_dir"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "TaskExtractor"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "extract_from_markdown": [
          "self._extract_phases",
          "self._extract_date",
          "self._extract_priority",
          "self._extract_epics",
          "logger.error",
          "self._extract_status",
          "tasks.extend",
          "self._extract_tasks",
          "open",
          "f.read",
          "self._extract_checkboxes",
          "self._extract_todos"
        ],
        "_extract_status": [
          "match.group"
        ],
        "_extract_priority": [
          "match.group"
        ],
        "_extract_date": [
          "datetime.now",
          "match.group"
        ],
        "_extract_epics": [
          "match.start",
          "tasks.append",
          "str",
          "match.end",
          "Task",
          "match.group",
          "self._extract_context"
        ],
        "_extract_tasks": [
          "match.start",
          "tasks.append",
          "str",
          "match.end",
          "Task",
          "match.group",
          "self._extract_context"
        ],
        "_extract_todos": [
          "match.start",
          "tasks.append",
          "Task",
          "match.group",
          "str"
        ],
        "_extract_phases": [
          "match.start",
          "tasks.append",
          "str",
          "match.end",
          "Task",
          "match.group",
          "self._extract_context"
        ],
        "_extract_checkboxes": [
          "match.start",
          "tasks.append",
          "task_title.upper",
          "Task",
          "match.group",
          "any",
          "str"
        ],
        "_extract_context": [
          "context.strip",
          "content.split",
          "max",
          "len",
          "min"
        ],
        "scan_documentation": [
          "docs_dir.glob",
          "docs_dir.exists",
          "all_tasks.extend",
          "logger.info"
        ],
        "generate_index": [
          "by_priority.items",
          "by_category.items",
          "asdict",
          "len",
          "datetime.now",
          "by_status.items",
          "by_file.items"
        ],
        "generate_summary_report": [
          "priority.upper",
          "sorted",
          "Path",
          "file_categories.items",
          "len",
          "category.upper",
          "status.upper"
        ],
        "save_index": [
          "Path",
          "logger.info",
          "output_path.mkdir",
          "open",
          "f.write",
          "json.dump"
        ],
        "main": [
          "generator.generate_summary_report",
          "parser.add_argument",
          "sorted",
          "by_status.get",
          "TaskIndexGenerator",
          "generator.generate_index",
          "parser.parse_args",
          "by_category.items",
          "logger.info",
          "generator.scan_documentation",
          "argparse.ArgumentParser",
          "generator.save_index",
          "len",
          "by_category.get",
          "print",
          "by_status.items"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "307c1e01-6411-4833-a523-43e08a2971ad"
    },
    {
      "module_id": "src.scripts.github_sync_manager_enhanced",
      "path": "src/scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "module_doc": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout\n\u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442: processing results + GitHub API + token management + CLI fallback",
      "functions": [
        {
          "name": "print_info",
          "docstring": "",
          "line_range": [
            25,
            26
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_success",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_warning",
          "docstring": "",
          "line_range": [
            31,
            32
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_error",
          "docstring": "",
          "line_range": [
            34,
            35
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_step",
          "docstring": "",
          "line_range": [
            37,
            38
          ],
          "parameters": [
            "step",
            "total",
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Enhanced CLI interface",
          "line_range": [
            620,
            655
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            43,
            44
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            46,
            57
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_github_token",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
          "line_range": [
            59,
            73
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "check_gh_cli",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
          "line_range": [
            75,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_token_from_gh_cli",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
          "line_range": [
            84,
            93
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_github_token",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
          "line_range": [
            95,
            117
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            122,
            164
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "detect_repo_from_git",
          "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
          "line_range": [
            166,
            198
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results",
          "line_range": [
            200,
            211
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log",
          "line_range": [
            213,
            216
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Enhanced API request with CLI fallback",
          "line_range": [
            218,
            231
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_direct",
          "docstring": "Direct API request",
          "line_range": [
            233,
            261
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_via_cli",
          "docstring": "API request via GitHub CLI",
          "line_range": [
            263,
            293
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue_enhanced",
          "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
          "line_range": [
            295,
            359
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_acceptance_criteria",
          "docstring": "Format acceptance criteria from item metadata",
          "line_range": [
            361,
            380
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_implementation_notes",
          "docstring": "Format implementation notes",
          "line_range": [
            382,
            397
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Enhanced validation",
          "line_range": [
            399,
            434
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_enhanced_sync",
          "docstring": "Enhanced sync with full project rollout integration",
          "line_range": [
            436,
            494
          ],
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        },
        {
          "name": "sync_category_enhanced",
          "docstring": "Enhanced category sync",
          "line_range": [
            496,
            554
          ],
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced",
          "line_range": [
            556,
            560
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic_enhanced",
          "docstring": "Enhanced epic creation",
          "line_range": [
            562,
            607
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion_enhanced",
          "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
          "line_range": [
            609,
            618
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            18,
            23
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "GitHubTokenManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 GitHub \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 (\u0438\u0437 setup_github_token.sh)",
          "line_range": [
            40,
            117
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                43,
                44
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_env_file",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                46,
                57
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_github_token",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
              "line_range": [
                59,
                73
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "check_gh_cli",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
              "line_range": [
                75,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_token_from_gh_cli",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
              "line_range": [
                84,
                93
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_github_token",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
              "line_range": [
                95,
                117
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "EnhancedGitHubSyncManager",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 GitHub Sync Manager \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0432\u0441\u0435\u0445 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a",
          "line_range": [
            119,
            618
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                122,
                164
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "detect_repo_from_git",
              "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
              "line_range": [
                166,
                198
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results",
              "line_range": [
                200,
                211
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log",
              "line_range": [
                213,
                216
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Enhanced API request with CLI fallback",
              "line_range": [
                218,
                231
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_direct",
              "docstring": "Direct API request",
              "line_range": [
                233,
                261
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_via_cli",
              "docstring": "API request via GitHub CLI",
              "line_range": [
                263,
                293
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "create_github_issue_enhanced",
              "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
              "line_range": [
                295,
                359
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_acceptance_criteria",
              "docstring": "Format acceptance criteria from item metadata",
              "line_range": [
                361,
                380
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_implementation_notes",
              "docstring": "Format implementation notes",
              "line_range": [
                382,
                397
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Enhanced validation",
              "line_range": [
                399,
                434
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_enhanced_sync",
              "docstring": "Enhanced sync with full project rollout integration",
              "line_range": [
                436,
                494
              ],
              "parameters": [
                "self",
                "categories"
              ]
            },
            {
              "name": "sync_category_enhanced",
              "docstring": "Enhanced category sync",
              "line_range": [
                496,
                554
              ],
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced",
              "line_range": [
                556,
                560
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "create_github_epic_enhanced",
              "docstring": "Enhanced epic creation",
              "line_range": [
                562,
                607
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion_enhanced",
              "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
              "line_range": [
                609,
                618
              ],
              "parameters": [
                "self",
                "item"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "print_info": [
          "print"
        ],
        "print_success": [
          "print"
        ],
        "print_warning": [
          "print"
        ],
        "print_error": [
          "print"
        ],
        "print_step": [
          "print"
        ],
        "__init__": [
          "print_info",
          "Path",
          "GitHubTokenManager",
          "self.detect_repo_from_git",
          "self.load_sync_log"
        ],
        "load_env_file": [
          "value.strip",
          "Path",
          "line.startswith",
          "line.strip",
          "open",
          "line.split",
          "key.strip",
          "env_file.exists"
        ],
        "test_github_token": [
          "requests.get",
          "response.json"
        ],
        "check_gh_cli": [
          "subprocess.run"
        ],
        "get_token_from_gh_cli": [
          "subprocess.run"
        ],
        "get_github_token": [
          "self.check_gh_cli",
          "os.getenv",
          "self.get_token_from_gh_cli",
          "self.test_github_token",
          "print_warning"
        ],
        "detect_repo_from_git": [
          "url.startswith",
          "print_info",
          "url.replace",
          "subprocess.run",
          "path.split",
          "url.endswith",
          "len",
          "url.split",
          "print_warning"
        ],
        "load_sync_log": [
          "json.load",
          "open"
        ],
        "save_sync_log": [
          "json.dump",
          "open"
        ],
        "api_request": [
          "time.sleep",
          "self._api_request_via_cli",
          "print_error",
          "self._api_request_direct"
        ],
        "_api_request_direct": [
          "requests.get",
          "int",
          "requests.patch",
          "method.upper",
          "requests.post",
          "print_error",
          "response.json",
          "response.raise_for_status",
          "ValueError",
          "print_warning"
        ],
        "_api_request_via_cli": [
          "subprocess.run",
          "method.upper",
          "cmd.extend",
          "print_error",
          "json.dumps",
          "json.loads",
          "print_warning"
        ],
        "create_github_issue_enhanced": [
          "print_info",
          "print_success",
          "processing_meta.get",
          "item.get",
          "labels.append",
          "self._format_acceptance_criteria",
          "self.api_request",
          "self._format_implementation_notes"
        ],
        "_format_acceptance_criteria": [
          "criteria.append",
          "item.get",
          "criteria.extend"
        ],
        "_format_implementation_notes": [
          "notes.append",
          "processing_meta.get",
          "item.get"
        ],
        "validate_before_sync": [
          "user_info.get",
          "print_step",
          "print_success",
          "repo_info.get",
          "print_error",
          "file_path.exists",
          "self.api_request"
        ],
        "run_enhanced_sync": [
          "self.save_sync_log",
          "print_info",
          "print_step",
          "print_success",
          "self.validate_before_sync",
          "result.get",
          "self.sync_category_enhanced",
          "enumerate",
          "datetime.now",
          "print"
        ],
        "sync_category_enhanced": [
          "self.item_already_synced",
          "print_info",
          "self.create_github_issue_enhanced",
          "self.create_github_epic_enhanced",
          "print_error",
          "item.get",
          "self.create_github_discussion_enhanced",
          "result.get",
          "file_path.exists",
          "data.get",
          "open",
          "datetime.now",
          "json.load",
          "print_warning"
        ],
        "item_already_synced": [
          "item.get"
        ],
        "create_github_epic_enhanced": [
          "print_info",
          "self.api_request",
          "item.get",
          "print_success"
        ],
        "create_github_discussion_enhanced": [
          "print_info",
          "item.get",
          "print_warning"
        ],
        "main": [
          "parser.add_argument",
          "print_success",
          "manager.run_enhanced_sync",
          "print_error",
          "parser.parse_args",
          "result.get",
          "argparse.ArgumentParser",
          "len",
          "EnhancedGitHubSyncManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b2955eb1-d259-42e8-b92d-b56f27b07aa5"
    },
    {
      "module_id": "src.scripts.collector",
      "path": "src/scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": [
            13,
            29
          ],
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": [
            32,
            38
          ],
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": [
            41,
            88
          ],
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            91,
            92
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "fnmatch.fnmatch",
          "filtered.append"
        ],
        "collect_files": [
          "root_dir.rglob",
          "apply_filters",
          "path.relative_to",
          "path.is_file",
          "files.append",
          "str"
        ],
        "generate_struct": [
          "uuid.uuid4",
          "Path",
          "collect_files",
          "output_path.exists",
          "logger.info",
          "output_path.open",
          "len",
          "json.dump",
          "json.load",
          "str",
          "existing.get"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "b387ddbe-92a5-4998-ab82-3702fc98dbca"
    },
    {
      "module_id": "src.scripts.validate_epics",
      "path": "src/scripts/validate_epics.py",
      "category": "core",
      "module_doc": "Epic Data Validator\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c GitHub issues",
      "functions": [
        {
          "name": "validate_epic_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            12,
            35
          ],
          "parameters": [
            "epic"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "task",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "validate_priorities",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u0432",
          "line_range": [
            55,
            68
          ],
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_ids",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c ID \u0437\u0430\u0434\u0430\u0447",
          "line_range": [
            70,
            82
          ],
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438",
          "line_range": [
            84,
            131
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_epic_structure": [
          "errors.append",
          "isinstance"
        ],
        "validate_task_structure": [
          "task.get",
          "errors.append",
          "isinstance"
        ],
        "validate_priorities": [
          "task.get",
          "epic.get",
          "errors.append",
          "data.get"
        ],
        "validate_task_ids": [
          "set",
          "task.get",
          "seen_ids.add",
          "epic.get",
          "data.get",
          "errors.append"
        ],
        "main": [
          "json.load",
          "validate_priorities",
          "validate_epic_structure",
          "Path",
          "sys.exit",
          "validate_task_ids",
          "validate_task_structure",
          "len",
          "e.get",
          "sum",
          "epic.get",
          "open",
          "isinstance",
          "all_errors.append",
          "all_errors.extend",
          "epics_file.exists",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "pathlib",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "3e5770d4-1b6b-4a4f-b3df-384fa945ba82"
    },
    {
      "module_id": "src.scripts.epic_roadmap_manager",
      "path": "src/scripts/epic_roadmap_manager.py",
      "category": "core",
      "module_doc": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u0438:\n- \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 roadmap \u0438 \u043f\u043b\u0430\u043d\u043e\u0432\n- \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439\n- \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441 GitHub epics\n- \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u0432",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            259,
            291
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            19,
            22
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_roadmap",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            24,
            31
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_roadmap",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "self",
            "roadmap"
          ],
          "decorators": []
        },
        {
          "name": "show_overview",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
          "line_range": [
            42,
            80
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "show_epic_details",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            82,
            125
          ],
          "parameters": [
            "self",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
          "line_range": [
            127,
            189
          ],
          "parameters": [
            "self",
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "complete_session",
          "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            191,
            257
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EpicRoadmapManager",
          "docstring": "",
          "line_range": [
            18,
            257
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                19,
                22
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_roadmap",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                24,
                31
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_roadmap",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
              "line_range": [
                33,
                40
              ],
              "parameters": [
                "self",
                "roadmap"
              ]
            },
            {
              "name": "show_overview",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
              "line_range": [
                42,
                80
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "show_epic_details",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
              "line_range": [
                82,
                125
              ],
              "parameters": [
                "self",
                "epic_id"
              ]
            },
            {
              "name": "start_session",
              "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
              "line_range": [
                127,
                189
              ],
              "parameters": [
                "self",
                "epic_id",
                "session_id"
              ]
            },
            {
              "name": "complete_session",
              "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                191,
                257
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "load_roadmap": [
          "json.load",
          "print",
          "open"
        ],
        "save_roadmap": [
          "datetime.now",
          "json.dump",
          "print",
          "open"
        ],
        "show_overview": [
          "self.load_roadmap",
          "epic.get",
          "epics.items",
          "roadmap.get",
          "stats.get",
          "print"
        ],
        "show_epic_details": [
          "session.get",
          "self.load_roadmap",
          "epic_data.get",
          "epic.get",
          "len",
          "roadmap.get",
          "print"
        ],
        "start_session": [
          "session.get",
          "self.save_roadmap",
          "self.load_roadmap",
          "sess.get",
          "epic_data.get",
          "os.makedirs",
          "epic.get",
          "open",
          "roadmap.get",
          "datetime.now",
          "json.dump",
          "print"
        ],
        "complete_session": [
          "session.get",
          "current_session.get",
          "sessions_log.append",
          "os.remove",
          "self.save_roadmap",
          "self.load_roadmap",
          "print",
          "sess.get",
          "os.makedirs",
          "epic.get",
          "open",
          "roadmap.get",
          "datetime.now",
          "json.dump",
          "json.load",
          "all"
        ],
        "main": [
          "parser.add_argument",
          "manager.start_session",
          "manager.complete_session",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "manager.show_epic_details",
          "manager.show_overview",
          "print",
          "EpicRoadmapManager"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "7828aef9-a5e0-4576-8ec2-19700815a25a"
    },
    {
      "module_id": "src.scripts.deploy_embedded_files",
      "path": "src/scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": [
            931,
            941
          ],
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": [
            944,
            950
          ],
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": [
            953,
            1007
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            1010,
            1011
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.error",
          "RefResolver",
          "logger.warning",
          "validate"
        ],
        "backup_files": [
          "logger.info",
          "datetime.now",
          "target_dir.exists",
          "shutil.copytree"
        ],
        "deploy_embedded_files": [
          "validate_json",
          "backup_files",
          "Path",
          "logger.error",
          "logger.info",
          "target_path.exists",
          "f.write",
          "target_path.open",
          "json.dump",
          "EMBEDDED_FILES.get",
          "logger.warning",
          "Path.cwd"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "b066669e-c4ee-4d19-822f-35b570e70c40"
    },
    {
      "module_id": "src.scripts.team.__init__",
      "path": "src/scripts/team/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "8115e8b6-da49-4aaa-a9c4-0df7cf082782"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "module_doc": "Workspace State & Mode Management System\nEnhanced AI-Human Collaboration with Context Boundaries",
      "functions": [
        {
          "name": "create_workspace_manager",
          "docstring": "Factory function to create workspace manager",
          "line_range": [
            461,
            463
          ],
          "parameters": [
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_or_create_state",
          "docstring": "Load existing workspace state or create default",
          "line_range": [
            38,
            75
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_permission_templates",
          "docstring": "Load permission templates for different modes",
          "line_range": [
            77,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "set_mode",
          "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
          "line_range": [
            130,
            176
          ],
          "parameters": [
            "self",
            "modes",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_parse_modes_from_string",
          "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
          "line_range": [
            178,
            182
          ],
          "parameters": [
            "self",
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "_combine_mode_permissions",
          "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
          "line_range": [
            184,
            216
          ],
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "_get_mode_combination_name",
          "docstring": "Get descriptive name for mode combination",
          "line_range": [
            218,
            232
          ],
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "get_current_state",
          "docstring": "Get current workspace state",
          "line_range": [
            234,
            236
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "check_permission",
          "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
          "line_range": [
            238,
            302
          ],
          "parameters": [
            "self",
            "operation",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "_get_required_capability",
          "docstring": "Map operations to required capabilities",
          "line_range": [
            304,
            320
          ],
          "parameters": [
            "self",
            "operation"
          ],
          "decorators": []
        },
        {
          "name": "_is_restricted_target",
          "docstring": "Check if target matches any file restrictions",
          "line_range": [
            322,
            334
          ],
          "parameters": [
            "self",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "set_emergency_override",
          "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
          "line_range": [
            336,
            365
          ],
          "parameters": [
            "self",
            "level",
            "reason",
            "duration_minutes"
          ],
          "decorators": []
        },
        {
          "name": "_check_emergency_override",
          "docstring": "Check if emergency override is active and not expired",
          "line_range": [
            367,
            381
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_strict_mode",
          "docstring": "Integration with existing strict mode system",
          "line_range": [
            383,
            387
          ],
          "parameters": [
            "self",
            "strict_tags"
          ],
          "decorators": []
        },
        {
          "name": "add_decision_workflow",
          "docstring": "Add decision to workflow tracking (for [decide] mode)",
          "line_range": [
            389,
            396
          ],
          "parameters": [
            "self",
            "decision_id",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "get_workspace_status",
          "docstring": "Get comprehensive workspace status for debugging and display",
          "line_range": [
            398,
            420
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_override_time_remaining",
          "docstring": "Get formatted time remaining for emergency override",
          "line_range": [
            422,
            437
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_state",
          "docstring": "Save current state to file",
          "line_range": [
            439,
            442
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_mode_status",
          "docstring": "Get formatted status string for CLI display",
          "line_range": [
            444,
            458
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WorkspaceStateManager",
          "docstring": "Core workspace state management with mode-based permissions and context boundaries.\n\nFeatures:\n- Multi-dimensional mode system ([code][debug], [discuss][meta])\n- Hybrid permission system (capabilities + file restrictions)\n- Smart mode combinations with context awareness\n- Emergency override protocols with time-boxing\n- Integration with existing strict mode system",
          "line_range": [
            16,
            458
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "workspace_dir"
              ]
            },
            {
              "name": "_load_or_create_state",
              "docstring": "Load existing workspace state or create default",
              "line_range": [
                38,
                75
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_permission_templates",
              "docstring": "Load permission templates for different modes",
              "line_range": [
                77,
                128
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "set_mode",
              "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
              "line_range": [
                130,
                176
              ],
              "parameters": [
                "self",
                "modes",
                "session_id"
              ]
            },
            {
              "name": "_parse_modes_from_string",
              "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
              "line_range": [
                178,
                182
              ],
              "parameters": [
                "self",
                "mode_string"
              ]
            },
            {
              "name": "_combine_mode_permissions",
              "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
              "line_range": [
                184,
                216
              ],
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "_get_mode_combination_name",
              "docstring": "Get descriptive name for mode combination",
              "line_range": [
                218,
                232
              ],
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "get_current_state",
              "docstring": "Get current workspace state",
              "line_range": [
                234,
                236
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "check_permission",
              "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
              "line_range": [
                238,
                302
              ],
              "parameters": [
                "self",
                "operation",
                "target"
              ]
            },
            {
              "name": "_get_required_capability",
              "docstring": "Map operations to required capabilities",
              "line_range": [
                304,
                320
              ],
              "parameters": [
                "self",
                "operation"
              ]
            },
            {
              "name": "_is_restricted_target",
              "docstring": "Check if target matches any file restrictions",
              "line_range": [
                322,
                334
              ],
              "parameters": [
                "self",
                "target"
              ]
            },
            {
              "name": "set_emergency_override",
              "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
              "line_range": [
                336,
                365
              ],
              "parameters": [
                "self",
                "level",
                "reason",
                "duration_minutes"
              ]
            },
            {
              "name": "_check_emergency_override",
              "docstring": "Check if emergency override is active and not expired",
              "line_range": [
                367,
                381
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_strict_mode",
              "docstring": "Integration with existing strict mode system",
              "line_range": [
                383,
                387
              ],
              "parameters": [
                "self",
                "strict_tags"
              ]
            },
            {
              "name": "add_decision_workflow",
              "docstring": "Add decision to workflow tracking (for [decide] mode)",
              "line_range": [
                389,
                396
              ],
              "parameters": [
                "self",
                "decision_id",
                "decision_data"
              ]
            },
            {
              "name": "get_workspace_status",
              "docstring": "Get comprehensive workspace status for debugging and display",
              "line_range": [
                398,
                420
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_override_time_remaining",
              "docstring": "Get formatted time remaining for emergency override",
              "line_range": [
                422,
                437
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_state",
              "docstring": "Save current state to file",
              "line_range": [
                439,
                442
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_mode_status",
              "docstring": "Get formatted status string for CLI display",
              "line_range": [
                444,
                458
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_or_create_state",
          "Path",
          "self._load_permission_templates"
        ],
        "_load_or_create_state": [
          "datetime.now",
          "self._save_state",
          "json.load",
          "open"
        ],
        "_load_permission_templates": [],
        "set_mode": [
          "self._save_state",
          "len",
          "isinstance",
          "self._combine_mode_permissions",
          "self._parse_modes_from_string",
          "self._get_mode_combination_name",
          "datetime.now",
          "combined_permissions.get"
        ],
        "_parse_modes_from_string": [
          "re.findall"
        ],
        "_combine_mode_permissions": [
          "sorted",
          "set",
          "logger.info",
          "template.get",
          "list"
        ],
        "_get_mode_combination_name": [
          "sorted",
          "combination_names.get"
        ],
        "get_current_state": [],
        "check_permission": [
          "permissions.get",
          "self._check_emergency_override",
          "self._is_restricted_target",
          "self._get_required_capability"
        ],
        "_get_required_capability": [
          "capability_map.items",
          "operation.startswith"
        ],
        "_is_restricted_target": [
          "fnmatch.fnmatch",
          "restriction.startswith",
          "target.startswith"
        ],
        "set_emergency_override": [
          "datetime.now",
          "self._save_state",
          "expires_at.isoformat",
          "timedelta"
        ],
        "_check_emergency_override": [
          "datetime.now",
          "override.get",
          "datetime.fromisoformat",
          "self._save_state"
        ],
        "integrate_strict_mode": [
          "datetime.now",
          "self._save_state"
        ],
        "add_decision_workflow": [
          "datetime.now",
          "self._save_state"
        ],
        "get_workspace_status": [
          "self._get_mode_combination_name",
          "override.get",
          "self._get_override_time_remaining",
          "len"
        ],
        "_get_override_time_remaining": [
          "remaining.total_seconds",
          "int",
          "datetime.fromisoformat",
          "datetime.now",
          "override.get"
        ],
        "_save_state": [
          "json.dump",
          "open"
        ],
        "get_mode_status": [
          "self._get_mode_combination_name",
          "override.get"
        ],
        "create_workspace_manager": [
          "WorkspaceStateManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "Union",
        "datetime",
        "fnmatch",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "timedelta",
        "timezone",
        "typing"
      ],
      "hash": null,
      "artifact_id": "fd65182c-eeea-4dd5-8b2e-9daf04d2246f"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            21,
            25
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            27,
            49
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            51,
            90
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            92,
            108
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            110,
            126
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            128,
            130
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            20,
            130
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                27,
                49
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                51,
                90
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                92,
                108
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                110,
                126
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                128,
                130
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "sqlite3.connect",
          "self.create_tables"
        ],
        "create_tables": [],
        "cache_json": [
          "logging.info",
          "logging.error",
          "Path",
          "json_file.exists",
          "f.read",
          "open",
          "json.dumps",
          "content.encode",
          "hashlib.sha256",
          "str"
        ],
        "get_metadata": [
          "cursor.fetchone",
          "json.loads"
        ],
        "get_full_json": [
          "cursor.fetchone",
          "json.load",
          "open",
          "logging.error"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "3ca01bec-b3f5-470e-91f7-ca8aa31df3fe"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            20,
            46
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            49,
            116
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "isinstance",
          "data.get",
          "item.get",
          "filtered.append"
        ],
        "select_json": [
          "prefix.startswith",
          "ijson.parse",
          "json.load",
          "logging.error",
          "filtered.append",
          "Path",
          "json_file.exists",
          "open",
          "current_item.get",
          "f.seek",
          "filter_json",
          "path.append"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "2df03f73-0d83-430b-9727-0ec4288fc62f"
    },
    {
      "module_id": "src.llmstruct.workflow_orchestrator",
      "path": "src/llmstruct/workflow_orchestrator.py",
      "category": "core",
      "module_doc": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture\nExtends CopilotContextManager and SmartContextOrchestrator instead of duplicating",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface that integrates with existing llmstruct architecture",
          "line_range": [
            730,
            768
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            68,
            76
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            95,
            107
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            116,
            157
          ],
          "parameters": [
            "self",
            "project_root",
            "debug"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_onboarding_guide",
          "docstring": "Generate comprehensive AI onboarding guide using existing architecture",
          "line_range": [
            159,
            169
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_project_overview_from_struct",
          "docstring": "Get project overview from struct.json analysis",
          "line_range": [
            171,
            189
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_existing_architecture_guide",
          "docstring": "Guide to existing llmstruct architecture",
          "line_range": [
            191,
            213
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_copilot_integration_guide",
          "docstring": "Guide for proper CopilotContextManager usage",
          "line_range": [
            215,
            228
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_orchestration_guide",
          "docstring": "Guide for SmartContextOrchestrator usage",
          "line_range": [
            230,
            245
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_analysis_guide",
          "docstring": "Guide for proper struct.json analysis approach",
          "line_range": [
            247,
            265
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_current_context",
          "docstring": "Get comprehensive current context using existing architecture",
          "line_range": [
            267,
            306
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_analysis",
          "docstring": "Analyze struct.json for current codebase state",
          "line_range": [
            308,
            362
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_architecture_from_struct",
          "docstring": "Analyze architecture patterns from struct.json",
          "line_range": [
            364,
            382
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_function_duplication",
          "docstring": "Analyze function duplication across modules",
          "line_range": [
            384,
            405
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_metrics",
          "docstring": "Calculate complexity metrics from struct.json",
          "line_range": [
            407,
            423
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_score",
          "docstring": "Calculate overall complexity score",
          "line_range": [
            425,
            438
          ],
          "parameters": [
            "self",
            "stats"
          ],
          "decorators": []
        },
        {
          "name": "_get_orchestrator_state",
          "docstring": "Get SmartContextOrchestrator state",
          "line_range": [
            440,
            451
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_codebase_for_duplicates",
          "docstring": "Analyze codebase for duplicate functions using struct.json (AST/hash analysis by mode).",
          "line_range": [
            453,
            575
          ],
          "parameters": [
            "self",
            "deep_duplicates",
            "no_prod_filter"
          ],
          "decorators": []
        },
        {
          "name": "sync_with_existing_architecture",
          "docstring": "Sync with existing llmstruct architecture instead of duplicating",
          "line_range": [
            577,
            600
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "create_task",
          "docstring": "Create new task (this is new functionality, not duplication)",
          "line_range": [
            606,
            634
          ],
          "parameters": [
            "self",
            "title",
            "description",
            "priority",
            "tags",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_active_tasks",
          "docstring": "Get all active tasks",
          "line_range": [
            636,
            644
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_json_safe",
          "docstring": "Safe JSON loading with error handling",
          "line_range": [
            646,
            656
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_save_json_safe",
          "docstring": "Safe JSON saving with error handling",
          "line_range": [
            658,
            667
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_get_active_session_context",
          "docstring": "Get current session context",
          "line_range": [
            670,
            674
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_identify_key_components",
          "docstring": "Identify key components from struct analysis",
          "line_range": [
            676,
            687
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_patterns",
          "docstring": "Define workflow patterns that integrate with existing architecture",
          "line_range": [
            689,
            709
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_available_commands",
          "docstring": "Available commands that work with existing architecture",
          "line_range": [
            711,
            727
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_prod_func",
          "docstring": "",
          "line_range": [
            484,
            486
          ],
          "parameters": [
            "paths"
          ],
          "decorators": []
        },
        {
          "name": "is_only_tests_or_archive",
          "docstring": "",
          "line_range": [
            487,
            489
          ],
          "parameters": [
            "paths"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskStatus",
          "docstring": "",
          "line_range": [
            35,
            40
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "SessionType",
          "docstring": "",
          "line_range": [
            43,
            48
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "Task",
          "docstring": "Structured task representation",
          "line_range": [
            52,
            76
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                68,
                76
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "Session",
          "docstring": "AI work session with context and goals",
          "line_range": [
            80,
            107
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                95,
                107
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "WorkflowOrchestrator",
          "docstring": "Integration layer that extends existing llmstruct architecture\nUses CopilotContextManager, SmartContextOrchestrator, and struct.json analysis",
          "line_range": [
            110,
            727
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                116,
                157
              ],
              "parameters": [
                "self",
                "project_root",
                "debug"
              ]
            },
            {
              "name": "get_ai_onboarding_guide",
              "docstring": "Generate comprehensive AI onboarding guide using existing architecture",
              "line_range": [
                159,
                169
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_project_overview_from_struct",
              "docstring": "Get project overview from struct.json analysis",
              "line_range": [
                171,
                189
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_existing_architecture_guide",
              "docstring": "Guide to existing llmstruct architecture",
              "line_range": [
                191,
                213
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_copilot_integration_guide",
              "docstring": "Guide for proper CopilotContextManager usage",
              "line_range": [
                215,
                228
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_context_orchestration_guide",
              "docstring": "Guide for SmartContextOrchestrator usage",
              "line_range": [
                230,
                245
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_analysis_guide",
              "docstring": "Guide for proper struct.json analysis approach",
              "line_range": [
                247,
                265
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_current_context",
              "docstring": "Get comprehensive current context using existing architecture",
              "line_range": [
                267,
                306
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_analysis",
              "docstring": "Analyze struct.json for current codebase state",
              "line_range": [
                308,
                362
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_architecture_from_struct",
              "docstring": "Analyze architecture patterns from struct.json",
              "line_range": [
                364,
                382
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_analyze_function_duplication",
              "docstring": "Analyze function duplication across modules",
              "line_range": [
                384,
                405
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_calculate_complexity_metrics",
              "docstring": "Calculate complexity metrics from struct.json",
              "line_range": [
                407,
                423
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_calculate_complexity_score",
              "docstring": "Calculate overall complexity score",
              "line_range": [
                425,
                438
              ],
              "parameters": [
                "self",
                "stats"
              ]
            },
            {
              "name": "_get_orchestrator_state",
              "docstring": "Get SmartContextOrchestrator state",
              "line_range": [
                440,
                451
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_codebase_for_duplicates",
              "docstring": "Analyze codebase for duplicate functions using struct.json (AST/hash analysis by mode).",
              "line_range": [
                453,
                575
              ],
              "parameters": [
                "self",
                "deep_duplicates",
                "no_prod_filter"
              ]
            },
            {
              "name": "sync_with_existing_architecture",
              "docstring": "Sync with existing llmstruct architecture instead of duplicating",
              "line_range": [
                577,
                600
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "create_task",
              "docstring": "Create new task (this is new functionality, not duplication)",
              "line_range": [
                606,
                634
              ],
              "parameters": [
                "self",
                "title",
                "description",
                "priority",
                "tags",
                "dependencies"
              ]
            },
            {
              "name": "get_active_tasks",
              "docstring": "Get all active tasks",
              "line_range": [
                636,
                644
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_json_safe",
              "docstring": "Safe JSON loading with error handling",
              "line_range": [
                646,
                656
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_save_json_safe",
              "docstring": "Safe JSON saving with error handling",
              "line_range": [
                658,
                667
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            },
            {
              "name": "_get_active_session_context",
              "docstring": "Get current session context",
              "line_range": [
                670,
                674
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_identify_key_components",
              "docstring": "Identify key components from struct analysis",
              "line_range": [
                676,
                687
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_get_workflow_patterns",
              "docstring": "Define workflow patterns that integrate with existing architecture",
              "line_range": [
                689,
                709
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_available_commands",
              "docstring": "Available commands that work with existing architecture",
              "line_range": [
                711,
                727
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "CopilotContextManager",
          "SmartContextOrchestrator",
          "time.time",
          "Path",
          "SystemCapabilityDiscovery",
          "UniversalConverter",
          "load_config",
          "print",
          "str"
        ],
        "get_ai_onboarding_guide": [
          "self._get_workflow_patterns",
          "self._get_context_orchestration_guide",
          "self._get_existing_architecture_guide",
          "self._get_available_commands",
          "self._get_copilot_integration_guide",
          "self._get_project_overview_from_struct",
          "self._get_struct_analysis_guide"
        ],
        "_get_project_overview_from_struct": [
          "self._analyze_architecture_from_struct",
          "struct_path.exists",
          "self._identify_key_components",
          "logger.warning",
          "open",
          "len",
          "json.load",
          "struct_data.get"
        ],
        "_get_existing_architecture_guide": [],
        "_get_copilot_integration_guide": [],
        "_get_context_orchestration_guide": [],
        "_get_struct_analysis_guide": [],
        "get_current_context": [
          "time.time",
          "self.get_active_tasks",
          "self._get_orchestrator_state",
          "self._get_struct_analysis",
          "isinstance",
          "self._get_active_session_context",
          "print",
          "logger.warning",
          "str"
        ],
        "_get_struct_analysis": [
          "self._analyze_architecture_from_struct",
          "str",
          "time.time",
          "logger.error",
          "print",
          "struct_path.exists",
          "open",
          "self._calculate_complexity_metrics",
          "len",
          "json.load",
          "struct_data.get",
          "self._analyze_function_duplication"
        ],
        "_analyze_architecture_from_struct": [
          "Path",
          "len",
          "directories.keys",
          "directories.items",
          "list",
          "struct_data.get"
        ],
        "_analyze_function_duplication": [
          "function_names.items",
          "module.get",
          "struct_data.get",
          "len"
        ],
        "_calculate_complexity_metrics": [
          "round",
          "sum",
          "m.get",
          "self._calculate_complexity_score",
          "len",
          "stats.get",
          "struct_data.get"
        ],
        "_calculate_complexity_score": [
          "stats.get",
          "round"
        ],
        "_get_orchestrator_state": [
          "str"
        ],
        "analyze_codebase_for_duplicates": [
          "module.get",
          "all_func_bodies.append",
          "time.time",
          "func.get",
          "ast.dump",
          "self._get_struct_analysis",
          "hashlib.md5",
          "ast.parse",
          "print",
          "struct_analysis.get"
        ],
        "is_prod_func": [
          "p.split",
          "set",
          "any"
        ],
        "is_only_tests_or_archive": [
          "p.split",
          "set",
          "all"
        ],
        "sync_with_existing_architecture": [
          "logger.error",
          "json.dump",
          "open",
          "str"
        ],
        "create_task": [
          "uuid.uuid4",
          "str",
          "logger.info",
          "Task",
          "self._load_json_safe",
          "self._save_json_safe",
          "asdict"
        ],
        "get_active_tasks": [
          "t.get",
          "self._load_json_safe"
        ],
        "_load_json_safe": [
          "logger.error",
          "json.load",
          "file_path.exists",
          "open"
        ],
        "_save_json_safe": [
          "logger.error",
          "json.dump",
          "open"
        ],
        "_get_active_session_context": [
          "asdict"
        ],
        "_identify_key_components": [
          "module.get",
          "key_components.append",
          "struct_data.get",
          "len"
        ],
        "_get_workflow_patterns": [],
        "_get_available_commands": [],
        "main": [
          "parser.add_argument",
          "getattr",
          "results.items",
          "parser.parse_args",
          "WorkflowOrchestrator",
          "context.get",
          "orchestrator.get_current_context",
          "orchestrator.get_ai_onboarding_guide",
          "argparse.ArgumentParser",
          "orchestrator.analyze_codebase_for_duplicates",
          "len",
          "orchestrator.sync_with_existing_architecture",
          "print",
          "json.dumps"
        ]
      },
      "dependencies": [
        "Any",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "SystemCapabilityDiscovery",
        "Union",
        "UniversalConverter",
        "ai_self_awareness",
        "argparse",
        "asdict",
        "ast",
        "context_orchestrator",
        "copilot",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "get_cache_config",
        "get_context_config",
        "get_context_file_path",
        "get_copilot_config",
        "get_exclude_dirs",
        "get_exclude_patterns",
        "get_include_patterns",
        "get_max_file_size",
        "get_queue_config",
        "get_struct_file_path",
        "hashlib",
        "json",
        "llmstruct.modules.cli.utils",
        "load_config",
        "logging",
        "os",
        "parsers.universal_converter",
        "pathlib",
        "save_config",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "00abc24e-0d49-4314-90b8-c302fc6c31a2"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "module_doc": "GitHub visualization/graph feature (gh-view-v1)\nExport consolidated tasks/ideas from JSON files to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for GitHub Projects export",
          "line_range": [
            177,
            208
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize exporter with configuration",
          "line_range": [
            19,
            25
          ],
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from TOML file",
          "line_range": [
            27,
            35
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_mapping",
          "docstring": "Load existing ID mapping between local and GitHub",
          "line_range": [
            37,
            45
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_mapping",
          "docstring": "Save ID mapping to file",
          "line_range": [
            47,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_run_gh_command",
          "docstring": "Run GitHub CLI command and return success status and output",
          "line_range": [
            55,
            68
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "load_official_data",
          "docstring": "Load tasks and ideas from official JSON files",
          "line_range": [
            70,
            98
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "format_task_for_github",
          "docstring": "Format task data for GitHub Project card",
          "line_range": [
            100,
            137
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "format_idea_for_github",
          "docstring": "Format idea data for GitHub Project card",
          "line_range": [
            139,
            174
          ],
          "parameters": [
            "self",
            "idea"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExporter",
          "docstring": "Export tasks and ideas to GitHub Projects as cards",
          "line_range": [
            16,
            174
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize exporter with configuration",
              "line_range": [
                19,
                25
              ],
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from TOML file",
              "line_range": [
                27,
                35
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_mapping",
              "docstring": "Load existing ID mapping between local and GitHub",
              "line_range": [
                37,
                45
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_mapping",
              "docstring": "Save ID mapping to file",
              "line_range": [
                47,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_run_gh_command",
              "docstring": "Run GitHub CLI command and return success status and output",
              "line_range": [
                55,
                68
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "load_official_data",
              "docstring": "Load tasks and ideas from official JSON files",
              "line_range": [
                70,
                98
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "format_task_for_github",
              "docstring": "Format task data for GitHub Project card",
              "line_range": [
                100,
                137
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "format_idea_for_github",
              "docstring": "Format idea data for GitHub Project card",
              "line_range": [
                139,
                174
              ],
              "parameters": [
                "self",
                "idea"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_mapping",
          "self._load_config"
        ],
        "_load_config": [
          "print",
          "config.get",
          "open",
          "toml.load"
        ],
        "_load_mapping": [
          "json.load",
          "open"
        ],
        "_save_mapping": [
          "json.dump",
          "print",
          "open"
        ],
        "_run_gh_command": [
          "subprocess.run"
        ],
        "load_official_data": [
          "json.load",
          "tasks_data.get",
          "tasks_file.exists",
          "ideas_data.get",
          "ideas_file.exists",
          "open",
          "len",
          "print"
        ],
        "format_task_for_github": [
          "body_parts.append",
          "task.get",
          "status_map.get"
        ],
        "format_idea_for_github": [
          "idea.get",
          "status_map.get",
          "body_parts.append"
        ],
        "main": [
          "exporter.load_official_data",
          "GitHubProjectsExporter",
          "sys.exit",
          "exporter.format_idea_for_github",
          "len",
          "print",
          "exporter.format_task_for_github"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "pathlib",
        "subprocess",
        "sys",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "6379a938-9821-42d4-bdfd-45e576bc0694"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
          "line_range": [
            20,
            71
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            74,
            114
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "filter_json",
          "module.get",
          "struct.get",
          "item.get",
          "isinstance",
          "any",
          "prompt.lower",
          "str"
        ],
        "attach_to_llm_request": [
          "filter_json",
          "cache.get_metadata",
          "cache.cache_json",
          "logging.info",
          "logging.error",
          "Path",
          "filter_struct",
          "select_json",
          "prompt.lower",
          "context_file.exists",
          "cache.get_full_json",
          "json.dumps"
        ]
      },
      "dependencies": [
        "Any",
        "JSONCache",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "e62996c2-ade7-4f7a-98f6-5520ba655dca"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "module_doc": "LLMStruct Copilot Integration Module\nProvides context-aware development assistance with hybrid copilot capabilities.",
      "functions": [
        {
          "name": "initialize_copilot",
          "docstring": "Initialize copilot context manager for the project.\n\nArgs:\n    project_root: Project root directory\n\nReturns:\n    Configured CopilotContextManager instance",
          "line_range": [
            649,
            659
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "trigger_copilot_event",
          "docstring": "Trigger a copilot event and get relevant context.\n\nArgs:\n    manager: CopilotContextManager instance\n    event_type: Type of event\n    file_path: Optional file path\n    **kwargs: Additional event metadata\n\nReturns:\n    Dict with event context",
          "line_range": [
            662,
            679
          ],
          "parameters": [
            "manager",
            "event_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "smart_suggest",
          "docstring": "Get smart suggestions based on query and context.\n\nArgs:\n    manager: CopilotContextManager instance\n    query: Query string\n    context: Context type (code, workflow, task, etc.)\n\nReturns:\n    List of suggestions",
          "line_range": [
            682,
            702
          ],
          "parameters": [
            "manager",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context_for_scenario",
          "docstring": "Get optimized context for specific scenario - standalone function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            705,
            728
          ],
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
          "line_range": [
            68,
            90
          ],
          "parameters": [
            "self",
            "project_root",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load copilot configuration from JSON file.",
          "line_range": [
            92,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_layers",
          "docstring": "Initialize context layers from configuration.",
          "line_range": [
            106,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_context_layer",
          "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
          "line_range": [
            118,
            160
          ],
          "parameters": [
            "self",
            "layer_name",
            "force"
          ],
          "decorators": []
        },
        {
          "name": "unload_context_layer",
          "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
          "line_range": [
            162,
            180
          ],
          "parameters": [
            "self",
            "layer_name"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            182,
            225
          ],
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_context",
          "docstring": "Fallback to legacy context loading.",
          "line_range": [
            227,
            235
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_vscode",
          "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
          "line_range": [
            237,
            251
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_event",
          "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
          "line_range": [
            252,
            296
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_event_context",
          "docstring": "Legacy event context loading as fallback.",
          "line_range": [
            298,
            350
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "suggest_completion",
          "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
          "line_range": [
            352,
            397
          ],
          "parameters": [
            "self",
            "current_code",
            "file_path",
            "cursor_position"
          ],
          "decorators": []
        },
        {
          "name": "validate_change",
          "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
          "line_range": [
            399,
            445
          ],
          "parameters": [
            "self",
            "file_path",
            "change_type"
          ],
          "decorators": []
        },
        {
          "name": "_matches_scope",
          "docstring": "Check if file matches scope pattern.",
          "line_range": [
            447,
            452
          ],
          "parameters": [
            "self",
            "file_path",
            "scope"
          ],
          "decorators": []
        },
        {
          "name": "_matches_trigger",
          "docstring": "Check if change type matches trigger.",
          "line_range": [
            454,
            463
          ],
          "parameters": [
            "self",
            "change_type",
            "trigger"
          ],
          "decorators": []
        },
        {
          "name": "_validate_json_schema",
          "docstring": "Validate JSON file against schema.",
          "line_range": [
            465,
            480
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_check_circular_dependencies",
          "docstring": "Check for circular dependencies.",
          "line_range": [
            482,
            507
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_validate_task_references",
          "docstring": "Validate task references in tasks.json.",
          "line_range": [
            509,
            536
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
          "line_range": [
            538,
            568
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "refresh_all_contexts",
          "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
          "line_range": [
            570,
            584
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_status",
          "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
          "line_range": [
            586,
            607
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "export_context",
          "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
          "line_range": [
            609,
            631
          ],
          "parameters": [
            "self",
            "layers",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Clean up resources.",
          "line_range": [
            633,
            643
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextLayer",
          "docstring": "Context layer priorities for copilot integration.",
          "line_range": [
            22,
            28
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AttachMode",
          "docstring": "Context attachment modes.",
          "line_range": [
            31,
            37
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLayerConfig",
          "docstring": "Configuration for a context layer.",
          "line_range": [
            41,
            49
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotEvent",
          "docstring": "Represents a copilot event for context triggering.",
          "line_range": [
            53,
            59
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotContextManager",
          "docstring": "Manages context layers and integration with GitHub Copilot.\nProvides intelligent context loading and workflow assistance.",
          "line_range": [
            62,
            643
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
              "line_range": [
                68,
                90
              ],
              "parameters": [
                "self",
                "project_root",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load copilot configuration from JSON file.",
              "line_range": [
                92,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_initialize_layers",
              "docstring": "Initialize context layers from configuration.",
              "line_range": [
                106,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_context_layer",
              "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
              "line_range": [
                118,
                160
              ],
              "parameters": [
                "self",
                "layer_name",
                "force"
              ]
            },
            {
              "name": "unload_context_layer",
              "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
              "line_range": [
                162,
                180
              ],
              "parameters": [
                "self",
                "layer_name"
              ]
            },
            {
              "name": "get_optimized_context",
              "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
              "line_range": [
                182,
                225
              ],
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "max_tokens"
              ]
            },
            {
              "name": "_get_legacy_context",
              "docstring": "Fallback to legacy context loading.",
              "line_range": [
                227,
                235
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_vscode",
              "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
              "line_range": [
                237,
                251
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_context_for_event",
              "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
              "line_range": [
                252,
                296
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_get_legacy_event_context",
              "docstring": "Legacy event context loading as fallback.",
              "line_range": [
                298,
                350
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "suggest_completion",
              "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
              "line_range": [
                352,
                397
              ],
              "parameters": [
                "self",
                "current_code",
                "file_path",
                "cursor_position"
              ]
            },
            {
              "name": "validate_change",
              "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
              "line_range": [
                399,
                445
              ],
              "parameters": [
                "self",
                "file_path",
                "change_type"
              ]
            },
            {
              "name": "_matches_scope",
              "docstring": "Check if file matches scope pattern.",
              "line_range": [
                447,
                452
              ],
              "parameters": [
                "self",
                "file_path",
                "scope"
              ]
            },
            {
              "name": "_matches_trigger",
              "docstring": "Check if change type matches trigger.",
              "line_range": [
                454,
                463
              ],
              "parameters": [
                "self",
                "change_type",
                "trigger"
              ]
            },
            {
              "name": "_validate_json_schema",
              "docstring": "Validate JSON file against schema.",
              "line_range": [
                465,
                480
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_check_circular_dependencies",
              "docstring": "Check for circular dependencies.",
              "line_range": [
                482,
                507
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_validate_task_references",
              "docstring": "Validate task references in tasks.json.",
              "line_range": [
                509,
                536
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
              "line_range": [
                538,
                568
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "refresh_all_contexts",
              "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
              "line_range": [
                570,
                584
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_status",
              "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
              "line_range": [
                586,
                607
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "export_context",
              "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
              "line_range": [
                609,
                631
              ],
              "parameters": [
                "self",
                "layers",
                "format"
              ]
            },
            {
              "name": "close",
              "docstring": "Clean up resources.",
              "line_range": [
                633,
                643
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getcwd",
          "Path",
          "JSONCache",
          "self._load_config",
          "self._initialize_layers",
          "create_context_orchestrator",
          "str"
        ],
        "_load_config": [
          "Path",
          "logger.error",
          "logger.info",
          "open",
          "json.load",
          "logger.warning"
        ],
        "_initialize_layers": [
          "layers_config.items",
          "ContextLayerConfig",
          "layer_config.get"
        ],
        "load_context_layer": [
          "time.time",
          "logger.error",
          "logger.info",
          "logger.debug",
          "logger.warning",
          "open",
          "json.load",
          "source_path.exists"
        ],
        "unload_context_layer": [
          "logger.info"
        ],
        "get_optimized_context": [
          "scenario_mapping.get",
          "self._get_legacy_context",
          "logger.error"
        ],
        "_get_legacy_context": [
          "self.load_context_layer"
        ],
        "get_context_for_vscode": [
          "self.get_optimized_context"
        ],
        "get_context_for_event": [
          "scenario_mapping.get",
          "logger.error",
          "self._get_legacy_event_context",
          "self.get_optimized_context"
        ],
        "_get_legacy_event_context": [
          "json.load",
          "logger.error",
          "self.load_context_layer",
          "workflow_triggers.get",
          "open",
          "code_triggers.get",
          "triggers.get",
          "source_path.exists",
          "file_triggers.get"
        ],
        "suggest_completion": [
          "module.get",
          "current_module.get",
          "Path",
          "func.get",
          "self.load_context_layer",
          "struct_context.get",
          "str",
          "suggestions.append"
        ],
        "validate_change": [
          "self._check_circular_dependencies",
          "safety_features.get",
          "result.get",
          "self._matches_trigger",
          "rule.get",
          "len",
          "self._matches_scope",
          "self._validate_json_schema",
          "self._validate_task_references"
        ],
        "_matches_scope": [
          "Path",
          "str",
          "fnmatch"
        ],
        "_matches_trigger": [
          "trigger_map.get"
        ],
        "_validate_json_schema": [
          "open",
          "json.load",
          "file_path.endswith"
        ],
        "_check_circular_dependencies": [
          "module.get",
          "Path",
          "self.load_context_layer",
          "len",
          "struct_data.get",
          "str"
        ],
        "_validate_task_references": [
          "tasks_data.get",
          "set",
          "task.get",
          "task_ids.add",
          "open",
          "json.load",
          "file_path.endswith"
        ],
        "get_workflow_suggestions": [
          "command.lower",
          "self.load_context_layer",
          "workflows.items",
          "suggestions.extend",
          "workflow.get",
          "suggestions.append"
        ],
        "refresh_all_contexts": [
          "logger.info",
          "self.load_context_layer",
          "list"
        ],
        "get_context_status": [
          "list"
        ],
        "export_context": [
          "str",
          "json.dumps",
          "list"
        ],
        "close": [
          "logger.info",
          "hasattr"
        ],
        "initialize_copilot": [
          "CopilotContextManager"
        ],
        "trigger_copilot_event": [
          "manager.get_context_for_event",
          "CopilotEvent"
        ],
        "smart_suggest": [
          "manager.get_workflow_suggestions"
        ],
        "get_optimized_context_for_scenario": [
          "manager.get_optimized_context",
          "manager.close",
          "initialize_copilot",
          "locals"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "Union",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "fnmatch",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b5c0da1a-6a0e-4d05-b369-ff914726a5fd"
    },
    {
      "module_id": "src.llmstruct.ai_workflow_middleware",
      "path": "src/llmstruct/ai_workflow_middleware.py",
      "category": "core",
      "module_doc": "AI Workflow Middleware - Forces AI Integration with LLMStruct\nIntercepts all AI requests and ensures they go through our orchestration system.",
      "functions": [
        {
          "name": "initialize_ai_middleware",
          "docstring": "Initialize global AI middleware.",
          "line_range": [
            393,
            397
          ],
          "parameters": [
            "project_root",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_middleware",
          "docstring": "Get current AI middleware instance.",
          "line_range": [
            400,
            402
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "process_ai_query",
          "docstring": "Global function to process AI queries through middleware.",
          "line_range": [
            405,
            410
          ],
          "parameters": [
            "query",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "ensure_llmstruct_integration",
          "docstring": "Decorator that ensures function uses llmstruct system.",
          "line_range": [
            414,
            431
          ],
          "parameters": [
            "func"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            55,
            74
          ],
          "parameters": [
            "self",
            "project_root",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "_load_middleware_config",
          "docstring": "Load middleware configuration.",
          "line_range": [
            76,
            101
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_ai_request",
          "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration",
          "line_range": [
            103,
            135
          ],
          "parameters": [
            "self",
            "raw_query",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_parse_ai_request",
          "docstring": "Parse raw query into structured AI request.",
          "line_range": [
            137,
            160
          ],
          "parameters": [
            "self",
            "raw_query"
          ],
          "decorators": []
        },
        {
          "name": "_should_use_llmstruct",
          "docstring": "Determine if request should use llmstruct system.",
          "line_range": [
            162,
            186
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_process_with_llmstruct",
          "docstring": "Process request through full llmstruct system.",
          "line_range": [
            188,
            219
          ],
          "parameters": [
            "self",
            "request",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_process_bypass",
          "docstring": "Process request without llmstruct system.",
          "line_range": [
            221,
            236
          ],
          "parameters": [
            "self",
            "request",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_optimize_context",
          "docstring": "Optimize context using orchestrator.",
          "line_range": [
            238,
            261
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_ai_delegation",
          "docstring": "Analyze which AI should handle this request.",
          "line_range": [
            263,
            280
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_context",
          "docstring": "Get enhanced context with project awareness.",
          "line_range": [
            282,
            295
          ],
          "parameters": [
            "self",
            "request",
            "context_result"
          ],
          "decorators": []
        },
        {
          "name": "_get_capability_summary",
          "docstring": "Get current system capabilities.",
          "line_range": [
            297,
            310
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_generate_usage_guidance",
          "docstring": "Generate guidance for AI on how to use llmstruct system.",
          "line_range": [
            312,
            331
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_map_tags_to_scenario",
          "docstring": "Map context tags to orchestrator scenarios.",
          "line_range": [
            333,
            348
          ],
          "parameters": [
            "self",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "_default_ai_processing",
          "docstring": "Default AI processing when no custom handler provided.",
          "line_range": [
            350,
            365
          ],
          "parameters": [
            "self",
            "request",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_middleware_stats",
          "docstring": "Get middleware usage statistics.",
          "line_range": [
            367,
            376
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "force_llmstruct_mode",
          "docstring": "Force all future requests to use llmstruct system.",
          "line_range": [
            378,
            381
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enable_guidance_mode",
          "docstring": "Enable guided mode with llmstruct suggestions.",
          "line_range": [
            383,
            386
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "wrapper",
          "docstring": "",
          "line_range": [
            416,
            429
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AIWorkflowMode",
          "docstring": "AI workflow enforcement modes.",
          "line_range": [
            21,
            26
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AIRequest",
          "docstring": "Standardized AI request structure.",
          "line_range": [
            30,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIResponse",
          "docstring": "Standardized AI response structure.",
          "line_range": [
            40,
            46
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIWorkflowMiddleware",
          "docstring": "Middleware that ensures ALL AI interactions go through LLMStruct system.\nThis solves the problem of AI not using its own infrastructure.",
          "line_range": [
            49,
            386
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                55,
                74
              ],
              "parameters": [
                "self",
                "project_root",
                "mode"
              ]
            },
            {
              "name": "_load_middleware_config",
              "docstring": "Load middleware configuration.",
              "line_range": [
                76,
                101
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_ai_request",
              "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration",
              "line_range": [
                103,
                135
              ],
              "parameters": [
                "self",
                "raw_query",
                "ai_handler"
              ]
            },
            {
              "name": "_parse_ai_request",
              "docstring": "Parse raw query into structured AI request.",
              "line_range": [
                137,
                160
              ],
              "parameters": [
                "self",
                "raw_query"
              ]
            },
            {
              "name": "_should_use_llmstruct",
              "docstring": "Determine if request should use llmstruct system.",
              "line_range": [
                162,
                186
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_process_with_llmstruct",
              "docstring": "Process request through full llmstruct system.",
              "line_range": [
                188,
                219
              ],
              "parameters": [
                "self",
                "request",
                "ai_handler"
              ]
            },
            {
              "name": "_process_bypass",
              "docstring": "Process request without llmstruct system.",
              "line_range": [
                221,
                236
              ],
              "parameters": [
                "self",
                "request",
                "ai_handler"
              ]
            },
            {
              "name": "_optimize_context",
              "docstring": "Optimize context using orchestrator.",
              "line_range": [
                238,
                261
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_analyze_ai_delegation",
              "docstring": "Analyze which AI should handle this request.",
              "line_range": [
                263,
                280
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_get_enhanced_context",
              "docstring": "Get enhanced context with project awareness.",
              "line_range": [
                282,
                295
              ],
              "parameters": [
                "self",
                "request",
                "context_result"
              ]
            },
            {
              "name": "_get_capability_summary",
              "docstring": "Get current system capabilities.",
              "line_range": [
                297,
                310
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_generate_usage_guidance",
              "docstring": "Generate guidance for AI on how to use llmstruct system.",
              "line_range": [
                312,
                331
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_map_tags_to_scenario",
              "docstring": "Map context tags to orchestrator scenarios.",
              "line_range": [
                333,
                348
              ],
              "parameters": [
                "self",
                "tags"
              ]
            },
            {
              "name": "_default_ai_processing",
              "docstring": "Default AI processing when no custom handler provided.",
              "line_range": [
                350,
                365
              ],
              "parameters": [
                "self",
                "request",
                "context"
              ]
            },
            {
              "name": "get_middleware_stats",
              "docstring": "Get middleware usage statistics.",
              "line_range": [
                367,
                376
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "force_llmstruct_mode",
              "docstring": "Force all future requests to use llmstruct system.",
              "line_range": [
                378,
                381
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enable_guidance_mode",
              "docstring": "Enable guided mode with llmstruct suggestions.",
              "line_range": [
                383,
                386
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "logger.info",
          "CursorAIBridge",
          "SystemCapabilityDiscovery",
          "self._load_middleware_config",
          "create_context_orchestrator",
          "str"
        ],
        "_load_middleware_config": [
          "json.load",
          "open",
          "config_path.exists"
        ],
        "process_ai_request": [
          "self._process_bypass",
          "time.time",
          "self._process_with_llmstruct",
          "self._should_use_llmstruct",
          "logger.error",
          "self._parse_ai_request",
          "AIResponse",
          "str"
        ],
        "_parse_ai_request": [
          "context_tags.extend",
          "time.time",
          "AIRequest",
          "re.findall",
          "re.sub"
        ],
        "_should_use_llmstruct": [],
        "_process_with_llmstruct": [
          "self._get_enhanced_context",
          "self._analyze_ai_delegation",
          "time.time",
          "self._default_ai_processing",
          "self._optimize_context",
          "enhanced_context.get",
          "AIResponse",
          "ai_handler"
        ],
        "_process_bypass": [
          "AIResponse",
          "ai_handler"
        ],
        "_optimize_context": [
          "logger.error",
          "context.get",
          "self._map_tags_to_scenario",
          "len",
          "str"
        ],
        "_analyze_ai_delegation": [
          "logger.error",
          "delegation.get",
          "str"
        ],
        "_get_enhanced_context": [
          "self._get_capability_summary",
          "self._generate_usage_guidance"
        ],
        "_get_capability_summary": [
          "str"
        ],
        "_generate_usage_guidance": [
          "guidance.append"
        ],
        "_map_tags_to_scenario": [],
        "_default_ai_processing": [],
        "get_middleware_stats": [],
        "force_llmstruct_mode": [
          "logger.info"
        ],
        "enable_guidance_mode": [
          "logger.info"
        ],
        "initialize_ai_middleware": [
          "AIWorkflowMiddleware"
        ],
        "get_ai_middleware": [],
        "process_ai_query": [
          "RuntimeError",
          "_middleware_instance.process_ai_request"
        ],
        "ensure_llmstruct_integration": [],
        "wrapper": [
          "kwargs.get",
          "func",
          "middleware.process_ai_request",
          "logger.warning",
          "str",
          "get_ai_middleware"
        ]
      },
      "dependencies": [
        "Any",
        "Callable",
        "CursorAIBridge",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.context_orchestrator",
        "llmstruct.cursor_ai_bridge",
        "logging",
        "pathlib",
        "re",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "e3e9ff19-dfbb-44b9-a37d-aad7251f027b"
    },
    {
      "module_id": "src.llmstruct.ai_cli_integration",
      "path": "src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "module_doc": "AI Self-Awareness CLI Integration Module\nIntegrates unused CLI functions into the AI self-awareness system.",
      "functions": [
        {
          "name": "create_ai_cli_integration",
          "docstring": "Factory function to create AI CLI integration instance.",
          "line_range": [
            304,
            306
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_enhanced_cli_summary",
          "docstring": "Get a formatted summary of AI CLI integration capabilities.",
          "line_range": [
            309,
            346
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI integration system.",
          "line_range": [
            21,
            25
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_discover_available_commands",
          "docstring": "Discover which unused CLI commands are available for integration.",
          "line_range": [
            27,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_status_command",
          "docstring": "Integrate cmd_status for real-time AI system status awareness.",
          "line_range": [
            71,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_audit_command",
          "docstring": "Integrate cmd_audit for system health analysis awareness.",
          "line_range": [
            102,
            131
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_context_command",
          "docstring": "Integrate cmd_context for context mode awareness.",
          "line_range": [
            133,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_queue_command",
          "docstring": "Integrate cmd_queue for workflow queue monitoring.",
          "line_range": [
            164,
            193
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_integration_summary",
          "docstring": "Get summary of CLI command integrations for AI awareness.",
          "line_range": [
            195,
            215
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_ai_enhancement_impact",
          "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
          "line_range": [
            217,
            241
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_status",
          "docstring": "Create fallback status information if cmd_status is not available.",
          "line_range": [
            243,
            256
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_audit",
          "docstring": "Create fallback audit information if cmd_audit is not available.",
          "line_range": [
            258,
            271
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_context",
          "docstring": "Create fallback context information if cmd_context is not available.",
          "line_range": [
            273,
            286
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_queue",
          "docstring": "Create fallback queue information if cmd_queue is not available.",
          "line_range": [
            288,
            301
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AISelfAwarenessCLIIntegration",
          "docstring": "Integrates unused CLI functions to enhance AI self-awareness capabilities.\nTransforms 21 unused CLI commands into useful AI interaction tools.",
          "line_range": [
            15,
            301
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI integration system.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_discover_available_commands",
              "docstring": "Discover which unused CLI commands are available for integration.",
              "line_range": [
                27,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_status_command",
              "docstring": "Integrate cmd_status for real-time AI system status awareness.",
              "line_range": [
                71,
                100
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_audit_command",
              "docstring": "Integrate cmd_audit for system health analysis awareness.",
              "line_range": [
                102,
                131
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_context_command",
              "docstring": "Integrate cmd_context for context mode awareness.",
              "line_range": [
                133,
                162
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_queue_command",
              "docstring": "Integrate cmd_queue for workflow queue monitoring.",
              "line_range": [
                164,
                193
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_integration_summary",
              "docstring": "Get summary of CLI command integrations for AI awareness.",
              "line_range": [
                195,
                215
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_ai_enhancement_impact",
              "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
              "line_range": [
                217,
                241
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_status",
              "docstring": "Create fallback status information if cmd_status is not available.",
              "line_range": [
                243,
                256
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_audit",
              "docstring": "Create fallback audit information if cmd_audit is not available.",
              "line_range": [
                258,
                271
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_context",
              "docstring": "Create fallback context information if cmd_context is not available.",
              "line_range": [
                273,
                286
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_queue",
              "docstring": "Create fallback queue information if cmd_queue is not available.",
              "line_range": [
                288,
                301
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._discover_available_commands"
        ],
        "_discover_available_commands": [
          "logger.error",
          "unused_command_mapping.items",
          "hasattr",
          "getattr"
        ],
        "integrate_ai_status_command": [
          "logger.error",
          "cmd_status",
          "self._create_fallback_status",
          "str"
        ],
        "integrate_ai_audit_command": [
          "logger.error",
          "cmd_audit",
          "self._create_fallback_audit",
          "str"
        ],
        "integrate_ai_context_command": [
          "self._create_fallback_context",
          "cmd_context",
          "logger.error",
          "str"
        ],
        "integrate_ai_queue_command": [
          "cmd_queue",
          "logger.error",
          "str",
          "self._create_fallback_queue"
        ],
        "get_integration_summary": [
          "self._calculate_ai_enhancement_impact",
          "info.get",
          "cmd.get",
          "sum",
          "len"
        ],
        "_calculate_ai_enhancement_impact": [
          "info.get",
          "any",
          "len",
          "enhanced_categories.append",
          "capability_categories.items"
        ],
        "_create_fallback_status": [
          "str"
        ],
        "_create_fallback_audit": [
          "str"
        ],
        "_create_fallback_context": [],
        "_create_fallback_queue": [],
        "create_ai_cli_integration": [
          "AISelfAwarenessCLIIntegration"
        ],
        "get_ai_enhanced_cli_summary": [
          "integration.integrate_ai_context_command",
          "integration.integrate_ai_queue_command",
          "create_ai_cli_integration",
          "integration.integrate_ai_audit_command",
          "integration.integrate_ai_status_command",
          "integration.get_integration_summary"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "cli_commands",
        "json",
        "llmstruct",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c2e26677-8cc8-4b9b-964d-74cc462bf6be"
    },
    {
      "module_id": "src.llmstruct.cursor_integration",
      "path": "src/llmstruct/cursor_integration.py",
      "category": "core",
      "module_doc": "Cursor IDE Integration Module\nProvides seamless integration between llmstruct AI capabilities and Cursor IDE.",
      "functions": [
        {
          "name": "create_cursor_integration",
          "docstring": "Create a Cursor integration manager for the project.",
          "line_range": [
            435,
            437
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            31,
            35
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_optimized_context",
          "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
          "line_range": [
            37,
            71
          ],
          "parameters": [
            "self",
            "query_type",
            "file_context"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": [
            73,
            83
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": [
            85,
            101
          ],
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": [
            103,
            115
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            121,
            124
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "delegate_to_optimal_ai",
          "docstring": "Route tasks to best AI model based on preferences.",
          "line_range": [
            126,
            160
          ],
          "parameters": [
            "self",
            "task_type",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_delegation_confidence",
          "docstring": "Calculate confidence in AI delegation decision.",
          "line_range": [
            162,
            175
          ],
          "parameters": [
            "self",
            "task_type",
            "selected_ai"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor configuration.",
          "line_range": [
            177,
            187
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            193,
            195
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals.",
          "line_range": [
            197,
            242
          ],
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "get_priority_guidance",
          "docstring": "Provide priority guidance based on business objectives.",
          "line_range": [
            244,
            270
          ],
          "parameters": [
            "self",
            "feature_options"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_feature_score",
          "docstring": "Calculate priority score for a feature.",
          "line_range": [
            272,
            292
          ],
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_get_scoring_reasoning",
          "docstring": "Get reasoning for feature scoring.",
          "line_range": [
            294,
            307
          ],
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": [
            309,
            319
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            325,
            328
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "Start a new Cursor session.",
          "line_range": [
            330,
            349
          ],
          "parameters": [
            "self",
            "session_id",
            "user_preferences"
          ],
          "decorators": []
        },
        {
          "name": "save_session_context",
          "docstring": "Save important context for next session.",
          "line_range": [
            351,
            377
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load context from previous sessions.",
          "line_range": [
            379,
            388
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            394,
            400
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_cursor_response",
          "docstring": "Get comprehensive response optimized for Cursor.",
          "line_range": [
            402,
            431
          ],
          "parameters": [
            "self",
            "query",
            "file_context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorSession",
          "docstring": "Represents a Cursor IDE session with context and preferences.",
          "line_range": [
            19,
            25
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CursorContextManager",
          "docstring": "Manages context optimization specifically for Cursor interactions.",
          "line_range": [
            28,
            115
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_cursor_optimized_context",
              "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
              "line_range": [
                37,
                71
              ],
              "parameters": [
                "self",
                "query_type",
                "file_context"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": [
                73,
                83
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": [
                85,
                101
              ],
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": [
                103,
                115
              ],
              "parameters": [
                "self",
                "data"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorMultiAIOrchestrator",
          "docstring": "Coordinates different AI models through Cursor interface.",
          "line_range": [
            118,
            187
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                121,
                124
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "delegate_to_optimal_ai",
              "docstring": "Route tasks to best AI model based on preferences.",
              "line_range": [
                126,
                160
              ],
              "parameters": [
                "self",
                "task_type",
                "context"
              ]
            },
            {
              "name": "_calculate_delegation_confidence",
              "docstring": "Calculate confidence in AI delegation decision.",
              "line_range": [
                162,
                175
              ],
              "parameters": [
                "self",
                "task_type",
                "selected_ai"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor configuration.",
              "line_range": [
                177,
                187
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "PersonalPlanningCursorBridge",
          "docstring": "Bridge between personal planning and Cursor without exposing sensitive data.",
          "line_range": [
            190,
            319
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                193,
                195
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals.",
              "line_range": [
                197,
                242
              ],
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "get_priority_guidance",
              "docstring": "Provide priority guidance based on business objectives.",
              "line_range": [
                244,
                270
              ],
              "parameters": [
                "self",
                "feature_options"
              ]
            },
            {
              "name": "_calculate_feature_score",
              "docstring": "Calculate priority score for a feature.",
              "line_range": [
                272,
                292
              ],
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_get_scoring_reasoning",
              "docstring": "Get reasoning for feature scoring.",
              "line_range": [
                294,
                307
              ],
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": [
                309,
                319
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorSessionManager",
          "docstring": "Maintains context across Cursor sessions for better continuity.",
          "line_range": [
            322,
            388
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                325,
                328
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "start_session",
              "docstring": "Start a new Cursor session.",
              "line_range": [
                330,
                349
              ],
              "parameters": [
                "self",
                "session_id",
                "user_preferences"
              ]
            },
            {
              "name": "save_session_context",
              "docstring": "Save important context for next session.",
              "line_range": [
                351,
                377
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load context from previous sessions.",
              "line_range": [
                379,
                388
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorIntegrationManager",
          "docstring": "Main integration manager that coordinates all Cursor-specific features.",
          "line_range": [
            391,
            431
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                394,
                400
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_comprehensive_cursor_response",
              "docstring": "Get comprehensive response optimized for Cursor.",
              "line_range": [
                402,
                431
              ],
              "parameters": [
                "self",
                "query",
                "file_context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "PersonalPlanningCursorBridge",
          "SystemCapabilityDiscovery",
          "CursorMultiAIOrchestrator",
          "CursorContextManager",
          "CursorSessionManager"
        ],
        "get_cursor_optimized_context": [
          "self._apply_privacy_filter",
          "logger.error",
          "context_rules.get",
          "file_path.exists",
          "open",
          "optimal_config.get",
          "json.load",
          "str"
        ],
        "_load_cursor_config": [
          "Path",
          "logger.error",
          "open",
          "json.load",
          "config_path.exists"
        ],
        "_apply_privacy_filter": [
          "context_data.items",
          "isinstance",
          "self._filter_sensitive_dict"
        ],
        "_filter_sensitive_dict": [
          "data.items",
          "self._filter_sensitive_dict",
          "isinstance",
          "any",
          "key.lower"
        ],
        "delegate_to_optimal_ai": [
          "self._calculate_delegation_confidence",
          "Path",
          "logger.error",
          "delegation_rules.get",
          "str"
        ],
        "_calculate_delegation_confidence": [
          "delegation_rules.get"
        ],
        "get_goal_aligned_suggestions": [
          "technical_context.lower",
          "suggestions.extend",
          "logger.error",
          "any"
        ],
        "get_priority_guidance": [
          "self._get_scoring_reasoning",
          "scored_features.append",
          "decision_guidance.get",
          "logger.error",
          "self._calculate_feature_score",
          "scored_features.sort",
          "str"
        ],
        "_calculate_feature_score": [
          "float",
          "prioritization.get",
          "feature.lower",
          "any"
        ],
        "_get_scoring_reasoning": [
          "reasons.append",
          "feature.lower",
          "any"
        ],
        "_load_personal_bridge": [
          "logger.error",
          "json.load",
          "open",
          "bridge_path.exists"
        ],
        "start_session": [
          "logger.error",
          "previous_context.get",
          "self._load_session_context",
          "CursorSession"
        ],
        "save_session_context": [
          "Path",
          "logger.error",
          "open",
          "json.dump",
          "session_data.get",
          "str"
        ],
        "_load_session_context": [
          "logger.error",
          "json.load",
          "open"
        ],
        "get_comprehensive_cursor_response": [
          "logger.error",
          "str"
        ],
        "create_cursor_integration": [
          "CursorIntegrationManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.context_orchestrator",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ab9fce6f-0d81-44d6-987a-c9556ad7e06a"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": [
            24,
            30
          ],
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            6,
            11
          ],
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": [
            13,
            21
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": [
            5,
            21
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                6,
                11
              ],
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": [
                13,
                21
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "len",
          "prompt.split",
          "response.json",
          "response.raise_for_status"
        ],
        "test_grok": [
          "GrokClient",
          "time.perf_counter",
          "client.generate"
        ]
      },
      "dependencies": [
        "requests",
        "time"
      ],
      "hash": null,
      "artifact_id": "834addb3-40fd-470a-9cdd-8d732a7dd6bb"
    },
    {
      "module_id": "src.llmstruct.transpiler",
      "path": "src/llmstruct/transpiler.py",
      "category": "core",
      "module_doc": "AI-Powered Universal Transpiler\nConverts entire codebases from one language to another using LLM analysis",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for AI transpiler",
          "line_range": [
            475,
            527
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            142,
            149
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "analyze_source_project",
          "docstring": "Analyze source project structure",
          "line_range": [
            151,
            155
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "create_target_project_structure",
          "docstring": "Create target project directory structure",
          "line_range": [
            157,
            221
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_generate_structure_info",
          "docstring": "Generate structure information for README",
          "line_range": [
            223,
            253
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "transpile_module",
          "docstring": "Transpile a single module using AI",
          "line_range": [
            255,
            318
          ],
          "parameters": [
            "self",
            "module",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_format_functions",
          "docstring": "Format functions for prompt",
          "line_range": [
            320,
            333
          ],
          "parameters": [
            "self",
            "functions"
          ],
          "decorators": []
        },
        {
          "name": "_format_classes",
          "docstring": "Format classes for prompt",
          "line_range": [
            335,
            348
          ],
          "parameters": [
            "self",
            "classes"
          ],
          "decorators": []
        },
        {
          "name": "determine_target_path",
          "docstring": "Determine target file path for transpiled module",
          "line_range": [
            350,
            388
          ],
          "parameters": [
            "self",
            "module"
          ],
          "decorators": []
        },
        {
          "name": "transpile_project",
          "docstring": "Transpile entire project",
          "line_range": [
            390,
            472
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TranspilerConfig",
          "docstring": "Configuration for AI transpiler",
          "line_range": [
            24,
            35
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "LanguageTemplates",
          "docstring": "Templates and patterns for different target languages",
          "line_range": [
            38,
            136
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AITranspiler",
          "docstring": "AI-powered code transpiler",
          "line_range": [
            139,
            472
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                142,
                149
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "analyze_source_project",
              "docstring": "Analyze source project structure",
              "line_range": [
                151,
                155
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "create_target_project_structure",
              "docstring": "Create target project directory structure",
              "line_range": [
                157,
                221
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_generate_structure_info",
              "docstring": "Generate structure information for README",
              "line_range": [
                223,
                253
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "transpile_module",
              "docstring": "Transpile a single module using AI",
              "line_range": [
                255,
                318
              ],
              "parameters": [
                "self",
                "module",
                "context"
              ]
            },
            {
              "name": "_format_functions",
              "docstring": "Format functions for prompt",
              "line_range": [
                320,
                333
              ],
              "parameters": [
                "self",
                "functions"
              ]
            },
            {
              "name": "_format_classes",
              "docstring": "Format classes for prompt",
              "line_range": [
                335,
                348
              ],
              "parameters": [
                "self",
                "classes"
              ]
            },
            {
              "name": "determine_target_path",
              "docstring": "Determine target file path for transpiled module",
              "line_range": [
                350,
                388
              ],
              "parameters": [
                "self",
                "module"
              ]
            },
            {
              "name": "transpile_project",
              "docstring": "Transpile entire project",
              "line_range": [
                390,
                472
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "UniversalConverter",
          "LLMClient",
          "ConverterConfig"
        ],
        "analyze_source_project": [
          "logger.info"
        ],
        "create_target_project_structure": [
          "self._generate_structure_info",
          "Path",
          "output_path.exists",
          "shutil.rmtree",
          "output_path.mkdir",
          "src_dir.mkdir",
          "logger.warning"
        ],
        "_generate_structure_info": [
          "module.get",
          "category.title",
          "analysis.get",
          "len",
          "categories.items",
          "stats.get"
        ],
        "transpile_module": [
          "target_lang.upper",
          "module.get",
          "ctx_module.get",
          "self._format_functions",
          "target_lang.lower",
          "logger.error",
          "len",
          "response.strip",
          "str",
          "self._format_classes"
        ],
        "_format_functions": [
          "func.get",
          "len"
        ],
        "_format_classes": [
          "cls.get",
          "len"
        ],
        "determine_target_path": [
          "Path",
          "module.get",
          "module_id.split",
          "len"
        ],
        "transpile_project": [
          "full_target_path.write_text",
          "self.analyze_source_project",
          "report_path.write_text",
          "self.determine_target_path",
          "self.create_target_project_structure",
          "Path",
          "logger.error",
          "analysis.get",
          "logger.info",
          "self.transpile_module",
          "json.dumps",
          "len",
          "transpiled_files.append",
          "range",
          "errors.append",
          "str"
        ],
        "main": [
          "TranspilerConfig",
          "exit",
          "parser.add_argument",
          "parser.parse_args",
          "logger.error",
          "argparse.ArgumentParser",
          "transpiler.transpile_project",
          "len",
          "Language",
          "AITranspiler",
          "print",
          "traceback.print_exc"
        ]
      },
      "dependencies": [
        "Any",
        "ConverterConfig",
        "Dict",
        "Enum",
        "LLMClient",
        "Language",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "UniversalConverter",
        "argparse",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "llm_client",
        "logging",
        "os",
        "parsers.universal_converter",
        "pathlib",
        "shutil",
        "traceback",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f621678e-254a-462b-ba82-1fb1ddad0c36"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": [
            38,
            86
          ],
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": [
            88,
            115
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": [
            117,
            141
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": [
            143,
            156
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": [
            158,
            172
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": [
            27,
            172
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": [
                38,
                86
              ],
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": [
                88,
                115
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": [
                117,
                141
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": [
                143,
                156
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": [
                158,
                172
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getenv",
          "int",
          "logging.info"
        ],
        "query": [
          "logging.info",
          "logging.error",
          "logging.warning",
          "self._query_anthropic",
          "Path",
          "self._query_grok",
          "self._query_hybrid",
          "range",
          "self._query_ollama",
          "json.load",
          "asyncio.sleep",
          "json.dumps"
        ],
        "_query_grok": [
          "logging.info",
          "logging.error",
          "session.post",
          "result.get",
          "response.json",
          "aiohttp.ClientSession"
        ],
        "_query_anthropic": [
          "logging.info",
          "logging.error",
          "session.post",
          "result.get",
          "response.json",
          "aiohttp.ClientSession"
        ],
        "_query_ollama": [
          "logging.info",
          "logging.error",
          "session.post",
          "result.get",
          "response.json",
          "logging.debug",
          "aiohttp.ClientSession"
        ],
        "_query_hybrid": [
          "logging.info",
          "self._query_anthropic",
          "self._query_grok",
          "asyncio.gather",
          "isinstance",
          "len",
          "self._query_ollama"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "759cb6f5-f07b-4391-8d6b-412754c3204e"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "llmstruct.cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "5ee1a46d-85a8-47ea-9717-62a97ba5d441"
    },
    {
      "module_id": "src.llmstruct.metrics_tracker",
      "path": "src/llmstruct/metrics_tracker.py",
      "category": "core",
      "module_doc": "LLMStruct Metrics Tracker - \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u0442\u043e\u043a\u0435\u043d\u044b, performance, \u043e\u0448\u0438\u0431\u043a\u0438, \u043b\u043e\u0436\u043d\u044b\u0435 \u043f\u0443\u0442\u0438 \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 master-plans",
      "functions": [
        {
          "name": "get_metrics_tracker",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 MetricsTracker",
          "line_range": [
            366,
            371
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "track_token_usage",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            373,
            375
          ],
          "parameters": [
            "provider",
            "model",
            "input_tokens",
            "output_tokens",
            "cost"
          ],
          "decorators": []
        },
        {
          "name": "track_task_start",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            377,
            379
          ],
          "parameters": [
            "task_id",
            "task_type"
          ],
          "decorators": []
        },
        {
          "name": "track_task_complete",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            381,
            383
          ],
          "parameters": [
            "task_id",
            "status",
            "error"
          ],
          "decorators": []
        },
        {
          "name": "track_false_path",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439",
          "line_range": [
            385,
            387
          ],
          "parameters": [
            "task_id",
            "description"
          ],
          "decorators": []
        },
        {
          "name": "track_workflow_event",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f workflow \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": [
            389,
            391
          ],
          "parameters": [
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "track_telegram_interaction",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0447\u0435\u0440\u0435\u0437 Telegram \u0441 \u043f\u043e\u043b\u043d\u044b\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c",
          "line_range": [
            393,
            423
          ],
          "parameters": [
            "user_message",
            "bot_response",
            "context_size"
          ],
          "decorators": []
        },
        {
          "name": "track_api_interaction",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 API \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043f\u043e\u043b\u043d\u044b\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c",
          "line_range": [
            425,
            451
          ],
          "parameters": [
            "endpoint",
            "request_tokens",
            "response_tokens",
            "context_tokens"
          ],
          "decorators": []
        },
        {
          "name": "get_token_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0432\u043e\u0434\u043a\u0443 \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c",
          "line_range": [
            453,
            472
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            43,
            45
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            60,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            67,
            89
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_generate_session_id",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 ID \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            91,
            94
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_current_branch",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0443\u044e git \u0432\u0435\u0442\u043a\u0443",
          "line_range": [
            96,
            106
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_commit_hash",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 commit hash",
          "line_range": [
            108,
            118
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_json_hash",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 hash struct.json \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439",
          "line_range": [
            120,
            126
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "track_token_usage",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            128,
            144
          ],
          "parameters": [
            "self",
            "provider",
            "model",
            "input_tokens",
            "output_tokens",
            "cost_estimate"
          ],
          "decorators": []
        },
        {
          "name": "start_task",
          "docstring": "\u041d\u0430\u0447\u0430\u043b\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            146,
            157
          ],
          "parameters": [
            "self",
            "task_id",
            "task_type"
          ],
          "decorators": []
        },
        {
          "name": "complete_task",
          "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            159,
            176
          ],
          "parameters": [
            "self",
            "task_id",
            "status",
            "error_message"
          ],
          "decorators": []
        },
        {
          "name": "track_false_path",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439",
          "line_range": [
            178,
            187
          ],
          "parameters": [
            "self",
            "task_id",
            "false_path_description"
          ],
          "decorators": []
        },
        {
          "name": "track_rollback",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u043a\u0430\u0442\u043e\u0432",
          "line_range": [
            189,
            195
          ],
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        },
        {
          "name": "track_retry",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0445 \u043f\u043e\u043f\u044b\u0442\u043e\u043a",
          "line_range": [
            197,
            203
          ],
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        },
        {
          "name": "track_workflow_event",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 workflow \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": [
            205,
            228
          ],
          "parameters": [
            "self",
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "calculate_efficiency_score",
          "docstring": "\u0420\u0430\u0441\u0447\u0435\u0442 \u043e\u0446\u0435\u043d\u043a\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438",
          "line_range": [
            230,
            255
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_session_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            257,
            279
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_session_duration",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0435\u0441\u0441\u0438\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445",
          "line_range": [
            281,
            284
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_session",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            286,
            294
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_update_aggregate_metrics",
          "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            296,
            324
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_analytics_data",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432",
          "line_range": [
            326,
            360
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TokenUsage",
          "docstring": "\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            19,
            27
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "TaskExecution",
          "docstring": "\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            30,
            45
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                43,
                45
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "WorkflowMetrics",
          "docstring": "\u041c\u0435\u0442\u0440\u0438\u043a\u0438 workflow",
          "line_range": [
            48,
            62
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                60,
                62
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "MetricsTracker",
          "docstring": "\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            64,
            360
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                67,
                89
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_generate_session_id",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 ID \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                91,
                94
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_current_branch",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0443\u044e git \u0432\u0435\u0442\u043a\u0443",
              "line_range": [
                96,
                106
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_commit_hash",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 commit hash",
              "line_range": [
                108,
                118
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_json_hash",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 hash struct.json \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439",
              "line_range": [
                120,
                126
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "track_token_usage",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
              "line_range": [
                128,
                144
              ],
              "parameters": [
                "self",
                "provider",
                "model",
                "input_tokens",
                "output_tokens",
                "cost_estimate"
              ]
            },
            {
              "name": "start_task",
              "docstring": "\u041d\u0430\u0447\u0430\u043b\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                146,
                157
              ],
              "parameters": [
                "self",
                "task_id",
                "task_type"
              ]
            },
            {
              "name": "complete_task",
              "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                159,
                176
              ],
              "parameters": [
                "self",
                "task_id",
                "status",
                "error_message"
              ]
            },
            {
              "name": "track_false_path",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439",
              "line_range": [
                178,
                187
              ],
              "parameters": [
                "self",
                "task_id",
                "false_path_description"
              ]
            },
            {
              "name": "track_rollback",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u043a\u0430\u0442\u043e\u0432",
              "line_range": [
                189,
                195
              ],
              "parameters": [
                "self",
                "task_id"
              ]
            },
            {
              "name": "track_retry",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0445 \u043f\u043e\u043f\u044b\u0442\u043e\u043a",
              "line_range": [
                197,
                203
              ],
              "parameters": [
                "self",
                "task_id"
              ]
            },
            {
              "name": "track_workflow_event",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 workflow \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
              "line_range": [
                205,
                228
              ],
              "parameters": [
                "self",
                "event_type",
                "details"
              ]
            },
            {
              "name": "calculate_efficiency_score",
              "docstring": "\u0420\u0430\u0441\u0447\u0435\u0442 \u043e\u0446\u0435\u043d\u043a\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438",
              "line_range": [
                230,
                255
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_session_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                257,
                279
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_session_duration",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0435\u0441\u0441\u0438\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445",
              "line_range": [
                281,
                284
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_session",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                286,
                294
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_update_aggregate_metrics",
              "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a",
              "line_range": [
                296,
                324
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_analytics_data",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432",
              "line_range": [
                326,
                360
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "self._generate_session_id",
          "self._get_commit_hash",
          "logging.info",
          "Path",
          "self._get_current_branch",
          "self._get_struct_json_hash",
          "WorkflowMetrics",
          "datetime.now",
          "asdict"
        ],
        "_generate_session_id": [
          "datetime.now",
          "hashlib.md5",
          "timestamp.encode"
        ],
        "_get_current_branch": [
          "subprocess.run"
        ],
        "_get_commit_hash": [
          "subprocess.run"
        ],
        "_get_struct_json_hash": [
          "struct_file.exists",
          "hashlib.md5",
          "open",
          "f.read"
        ],
        "track_token_usage": [
          "get_metrics_tracker"
        ],
        "start_task": [
          "datetime.now",
          "TaskExecution",
          "logging.info",
          "asdict"
        ],
        "complete_task": [
          "datetime.now",
          "datetime.fromisoformat",
          "logging.info",
          "task_data.get"
        ],
        "track_false_path": [
          "get_metrics_tracker"
        ],
        "track_rollback": [
          "logging.warning"
        ],
        "track_retry": [
          "logging.info"
        ],
        "track_workflow_event": [
          "get_metrics_tracker"
        ],
        "calculate_efficiency_score": [
          "t.get",
          "sum",
          "max",
          "len",
          "min"
        ],
        "get_session_summary": [
          "self.calculate_efficiency_score",
          "t.get",
          "self._get_session_duration",
          "sum",
          "usage.get",
          "len"
        ],
        "_get_session_duration": [
          "datetime.now",
          "datetime.fromisoformat"
        ],
        "save_session": [
          "json.dump",
          "self._update_aggregate_metrics",
          "open",
          "logging.info"
        ],
        "_update_aggregate_metrics": [
          "self.get_session_summary",
          "sum",
          "open",
          "len",
          "json.dump",
          "json.load"
        ],
        "get_analytics_data": [
          "max",
          "json.load",
          "open"
        ],
        "get_metrics_tracker": [
          "MetricsTracker"
        ],
        "track_task_start": [
          "get_metrics_tracker"
        ],
        "track_task_complete": [
          "get_metrics_tracker"
        ],
        "track_telegram_interaction": [
          "logger.error",
          "get_metrics_tracker",
          "logger.info",
          "len",
          "datetime.now"
        ],
        "track_api_interaction": [
          "get_metrics_tracker",
          "datetime.now",
          "logger.error",
          "logger.info"
        ],
        "get_token_summary": [
          "get_metrics_tracker",
          "logger.error",
          "len"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "subprocess",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "929913bb-f34f-4ce5-96bb-1def92842f0e"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            55,
            318
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "normalize_patterns",
          "docstring": "",
          "line_range": [
            281,
            292
          ],
          "parameters": [
            "arglist"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "parser.add_subparsers",
          "parse_parser.add_argument",
          "audit_parser.add_argument",
          "subparsers.add_parser",
          "dogfood_parser.add_argument",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "query_parser.add_argument",
          "epic.add_epic_cli_subparser",
          "context_parser.add_argument",
          "copilot_parser.add_argument",
          "review_parser.add_argument",
          "duplicates_parser.add_argument"
        ],
        "normalize_patterns": [
          "p.strip",
          "result.append",
          "item.strip",
          "result.extend",
          "item.split"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "analyze_duplicates",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "audit",
        "cli_core",
        "context",
        "copilot",
        "create_cli_core",
        "dogfood",
        "epic",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "interactive",
        "interactive_legacy",
        "interactive_modular",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.analyze_duplicates",
        "llmstruct.modules.cli.audit",
        "llmstruct.modules.cli.context",
        "llmstruct.modules.cli.copilot",
        "llmstruct.modules.cli.dogfood",
        "llmstruct.modules.cli.handlers",
        "llmstruct.modules.cli.parse",
        "llmstruct.modules.cli.query",
        "llmstruct.modules.cli.review",
        "llmstruct.modules.cli.utils",
        "llmstruct.modules.commands.queue",
        "llmstruct.self_run",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "parse_files_from_response",
        "pathlib",
        "process_cli_queue_enhanced",
        "query",
        "re",
        "read_file_content",
        "review",
        "shutil",
        "sys",
        "time",
        "toml",
        "typing",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "7fa23ac8-61b1-46e2-97c0-e45a22267251"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "module_doc": "Smart Context Orchestration for LLMStruct\nOptimizes context loading for different LLM usage scenarios",
      "functions": [
        {
          "name": "create_context_orchestrator",
          "docstring": "Factory function to create context orchestrator.",
          "line_range": [
            506,
            508
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context for scenario - convenience function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (cli_direct, vscode_copilot, session_work)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            511,
            543
          ],
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            57,
            75
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load context orchestration configuration.",
          "line_range": [
            77,
            119
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_scenario",
          "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            121,
            161
          ],
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "custom_budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_budget_for_scenario",
          "docstring": "Create budget configuration for scenario.",
          "line_range": [
            163,
            172
          ],
          "parameters": [
            "self",
            "scenario_config"
          ],
          "decorators": []
        },
        {
          "name": "_load_full_context",
          "docstring": "Load complete context without token restrictions.",
          "line_range": [
            174,
            187
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_extract_relationship_summary",
          "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438",
          "line_range": [
            189,
            216
          ],
          "parameters": [
            "self",
            "max_modules"
          ],
          "decorators": []
        },
        {
          "name": "_load_focused_context",
          "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441",
          "line_range": [
            218,
            275
          ],
          "parameters": [
            "self",
            "file_path",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load session-specific context.",
          "line_range": [
            277,
            299
          ],
          "parameters": [
            "self",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_minimal_context",
          "docstring": "Load minimal context for quick operations.",
          "line_range": [
            301,
            319
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_source_with_filtering",
          "docstring": "Load source with optional filtering based on budget.",
          "line_range": [
            321,
            344
          ],
          "parameters": [
            "self",
            "source_name",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_file_context",
          "docstring": "Get context specific to a file.",
          "line_range": [
            346,
            357
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_essential_parts",
          "docstring": "Extract essential parts of data to fit token budget.",
          "line_range": [
            359,
            381
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_filter_for_current_session",
          "docstring": "Filter data to items relevant to current session.",
          "line_range": [
            383,
            422
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_summary",
          "docstring": "Extract summary information from data.",
          "line_range": [
            424,
            443
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_apply_section_filtering",
          "docstring": "Apply section filtering to exclude specified sections.",
          "line_range": [
            445,
            457
          ],
          "parameters": [
            "self",
            "data",
            "exclude_sections"
          ],
          "decorators": []
        },
        {
          "name": "_update_metrics",
          "docstring": "Update performance metrics.",
          "line_range": [
            459,
            477
          ],
          "parameters": [
            "self",
            "scenario",
            "context",
            "load_time"
          ],
          "decorators": []
        },
        {
          "name": "get_metrics_summary",
          "docstring": "Get summary of context loading metrics.",
          "line_range": [
            479,
            494
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_metrics",
          "docstring": "Save metrics to file for analysis.",
          "line_range": [
            496,
            501
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextMode",
          "docstring": "Context loading modes for different scenarios.",
          "line_range": [
            17,
            22
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLevel",
          "docstring": "Progressive context levels with token budgets.",
          "line_range": [
            25,
            30
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextBudget",
          "docstring": "Token budget configuration for context loading.",
          "line_range": [
            34,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextMetrics",
          "docstring": "Metrics for context loading performance.",
          "line_range": [
            43,
            48
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SmartContextOrchestrator",
          "docstring": "Orchestrates context loading based on usage scenario and token budget.\nProvides optimized context for different LLM integration patterns.",
          "line_range": [
            51,
            501
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                57,
                75
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load context orchestration configuration.",
              "line_range": [
                77,
                119
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_scenario",
              "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
              "line_range": [
                121,
                161
              ],
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "custom_budget"
              ]
            },
            {
              "name": "_get_budget_for_scenario",
              "docstring": "Create budget configuration for scenario.",
              "line_range": [
                163,
                172
              ],
              "parameters": [
                "self",
                "scenario_config"
              ]
            },
            {
              "name": "_load_full_context",
              "docstring": "Load complete context without token restrictions.",
              "line_range": [
                174,
                187
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_extract_relationship_summary",
              "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438",
              "line_range": [
                189,
                216
              ],
              "parameters": [
                "self",
                "max_modules"
              ]
            },
            {
              "name": "_load_focused_context",
              "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441",
              "line_range": [
                218,
                275
              ],
              "parameters": [
                "self",
                "file_path",
                "budget"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load session-specific context.",
              "line_range": [
                277,
                299
              ],
              "parameters": [
                "self",
                "budget"
              ]
            },
            {
              "name": "_load_minimal_context",
              "docstring": "Load minimal context for quick operations.",
              "line_range": [
                301,
                319
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_source_with_filtering",
              "docstring": "Load source with optional filtering based on budget.",
              "line_range": [
                321,
                344
              ],
              "parameters": [
                "self",
                "source_name",
                "budget"
              ]
            },
            {
              "name": "_get_file_context",
              "docstring": "Get context specific to a file.",
              "line_range": [
                346,
                357
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_essential_parts",
              "docstring": "Extract essential parts of data to fit token budget.",
              "line_range": [
                359,
                381
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_filter_for_current_session",
              "docstring": "Filter data to items relevant to current session.",
              "line_range": [
                383,
                422
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_extract_summary",
              "docstring": "Extract summary information from data.",
              "line_range": [
                424,
                443
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_apply_section_filtering",
              "docstring": "Apply section filtering to exclude specified sections.",
              "line_range": [
                445,
                457
              ],
              "parameters": [
                "self",
                "data",
                "exclude_sections"
              ]
            },
            {
              "name": "_update_metrics",
              "docstring": "Update performance metrics.",
              "line_range": [
                459,
                477
              ],
              "parameters": [
                "self",
                "scenario",
                "context",
                "load_time"
              ]
            },
            {
              "name": "get_metrics_summary",
              "docstring": "Get summary of context loading metrics.",
              "line_range": [
                479,
                494
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_metrics",
              "docstring": "Save metrics to file for analysis.",
              "line_range": [
                496,
                501
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config"
        ],
        "_load_config": [
          "json.load",
          "open",
          "config_path.exists"
        ],
        "get_context_for_scenario": [
          "ContextMode",
          "time.time",
          "self._update_metrics",
          "self._load_focused_context",
          "self._load_full_context",
          "self._load_session_context",
          "self._get_budget_for_scenario",
          "scenario_config.get",
          "self._load_minimal_context"
        ],
        "_get_budget_for_scenario": [
          "scenario_config.get",
          "budget_config.get",
          "ContextBudget"
        ],
        "_load_full_context": [
          "logger.warning",
          "json.load",
          "open",
          "full_path.exists"
        ],
        "_extract_relationship_summary": [
          "struct.get",
          "struct_path.exists",
          "m.get",
          "summary.append",
          "open",
          "json.load",
          "logger.warning"
        ],
        "_load_focused_context": [
          "self._get_file_context",
          "session_path.exists",
          "open",
          "init_path.exists",
          "len",
          "self._extract_summary",
          "self._extract_relationship_summary",
          "json.load",
          "logger.warning",
          "json.dumps",
          "file_path.endswith"
        ],
        "_load_session_context": [
          "self._filter_for_current_session",
          "self._load_source_with_filtering"
        ],
        "_load_minimal_context": [
          "source_path.exists",
          "open",
          "self._extract_summary",
          "json.load",
          "logger.warning"
        ],
        "_load_source_with_filtering": [
          "logger.warning",
          "open",
          "self._apply_section_filtering",
          "json.load",
          "source_path.exists"
        ],
        "_get_file_context": [
          "Path"
        ],
        "_extract_essential_parts": [
          "task.get",
          "isinstance"
        ],
        "_filter_for_current_session": [
          "current_session.get",
          "data.items",
          "idea.get",
          "task.get",
          "open",
          "json.load",
          "logger.warning",
          "current_session_path.exists"
        ],
        "_extract_summary": [
          "t.get",
          "isinstance",
          "len"
        ],
        "_apply_section_filtering": [
          "data.items"
        ],
        "_update_metrics": [
          "ContextMetrics",
          "context.get",
          "len"
        ],
        "get_metrics_summary": [
          "sum",
          "len"
        ],
        "save_metrics": [
          "json.dump",
          "open",
          "self.get_metrics_summary"
        ],
        "create_context_orchestrator": [
          "SmartContextOrchestrator"
        ],
        "get_optimized_context": [
          "orchestrator.get_context_for_scenario",
          "create_context_orchestrator",
          "ContextBudget"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Union",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "0fa562c6-f4f0-46e1-a4b8-98c57027ca55"
    },
    {
      "module_id": "src.llmstruct.ai_self_monitor",
      "path": "src/llmstruct/ai_self_monitor.py",
      "category": "core",
      "module_doc": "AI Self-Monitoring System\nTracks AI usage patterns and ensures proper llmstruct integration.",
      "functions": [
        {
          "name": "initialize_ai_monitor",
          "docstring": "Initialize global AI monitor.",
          "line_range": [
            433,
            437
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_monitor",
          "docstring": "Get current AI monitor instance.",
          "line_range": [
            440,
            442
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "record_ai_usage",
          "docstring": "Global function to record AI usage.",
          "line_range": [
            445,
            456
          ],
          "parameters": [
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            60,
            80
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "record_ai_interaction",
          "docstring": "Record an AI interaction for monitoring.",
          "line_range": [
            82,
            121
          ],
          "parameters": [
            "self",
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_interaction_patterns",
          "docstring": "Analyze patterns in AI interaction.",
          "line_range": [
            123,
            157
          ],
          "parameters": [
            "self",
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_effectiveness_score",
          "docstring": "Calculate effectiveness score for interaction.",
          "line_range": [
            159,
            188
          ],
          "parameters": [
            "self",
            "patterns",
            "tools_used",
            "used_llmstruct"
          ],
          "decorators": []
        },
        {
          "name": "_check_immediate_feedback",
          "docstring": "Check if immediate feedback/correction is needed.",
          "line_range": [
            190,
            209
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_log_immediate_feedback",
          "docstring": "Log immediate feedback message.",
          "line_range": [
            211,
            214
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "analyze_behavior_trends",
          "docstring": "Analyze AI behavior trends over specified period.",
          "line_range": [
            216,
            300
          ],
          "parameters": [
            "self",
            "days"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "Generate specific recommendations for improvement.",
          "line_range": [
            302,
            335
          ],
          "parameters": [
            "self",
            "llmstruct_usage",
            "context_awareness",
            "tool_diversity",
            "effectiveness"
          ],
          "decorators": []
        },
        {
          "name": "get_real_time_guidance",
          "docstring": "Get real-time guidance for current query.",
          "line_range": [
            337,
            365
          ],
          "parameters": [
            "self",
            "current_query"
          ],
          "decorators": []
        },
        {
          "name": "_load_events",
          "docstring": "Load events from disk.",
          "line_range": [
            367,
            379
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_events",
          "docstring": "Save events to disk.",
          "line_range": [
            381,
            388
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_analysis",
          "docstring": "Save behavior analysis to disk.",
          "line_range": [
            390,
            397
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "get_monitoring_report",
          "docstring": "Get comprehensive monitoring report.",
          "line_range": [
            399,
            426
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AIBehaviorPattern",
          "docstring": "AI behavior patterns to monitor.",
          "line_range": [
            18,
            26
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AIUsageEvent",
          "docstring": "Single AI usage event.",
          "line_range": [
            30,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIBehaviorAnalysis",
          "docstring": "Analysis of AI behavior patterns.",
          "line_range": [
            43,
            51
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AISelfMonitor",
          "docstring": "Monitors AI behavior and ensures proper llmstruct integration.\nProvides feedback and corrective guidance.",
          "line_range": [
            54,
            426
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                60,
                80
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "record_ai_interaction",
              "docstring": "Record an AI interaction for monitoring.",
              "line_range": [
                82,
                121
              ],
              "parameters": [
                "self",
                "query",
                "tools_used",
                "used_llmstruct",
                "context_tags",
                "metadata"
              ]
            },
            {
              "name": "_analyze_interaction_patterns",
              "docstring": "Analyze patterns in AI interaction.",
              "line_range": [
                123,
                157
              ],
              "parameters": [
                "self",
                "query",
                "tools_used",
                "used_llmstruct",
                "context_tags"
              ]
            },
            {
              "name": "_calculate_effectiveness_score",
              "docstring": "Calculate effectiveness score for interaction.",
              "line_range": [
                159,
                188
              ],
              "parameters": [
                "self",
                "patterns",
                "tools_used",
                "used_llmstruct"
              ]
            },
            {
              "name": "_check_immediate_feedback",
              "docstring": "Check if immediate feedback/correction is needed.",
              "line_range": [
                190,
                209
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_log_immediate_feedback",
              "docstring": "Log immediate feedback message.",
              "line_range": [
                211,
                214
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "analyze_behavior_trends",
              "docstring": "Analyze AI behavior trends over specified period.",
              "line_range": [
                216,
                300
              ],
              "parameters": [
                "self",
                "days"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "Generate specific recommendations for improvement.",
              "line_range": [
                302,
                335
              ],
              "parameters": [
                "self",
                "llmstruct_usage",
                "context_awareness",
                "tool_diversity",
                "effectiveness"
              ]
            },
            {
              "name": "get_real_time_guidance",
              "docstring": "Get real-time guidance for current query.",
              "line_range": [
                337,
                365
              ],
              "parameters": [
                "self",
                "current_query"
              ]
            },
            {
              "name": "_load_events",
              "docstring": "Load events from disk.",
              "line_range": [
                367,
                379
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_events",
              "docstring": "Save events to disk.",
              "line_range": [
                381,
                388
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_analysis",
              "docstring": "Save behavior analysis to disk.",
              "line_range": [
                390,
                397
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "get_monitoring_report",
              "docstring": "Get comprehensive monitoring report.",
              "line_range": [
                399,
                426
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logger.info",
          "Path",
          "self._load_events"
        ],
        "record_ai_interaction": [
          "AIUsageEvent",
          "self._analyze_interaction_patterns",
          "self._save_events",
          "self._check_immediate_feedback",
          "self._calculate_effectiveness_score",
          "len",
          "datetime.now"
        ],
        "_analyze_interaction_patterns": [
          "query.lower",
          "patterns.append",
          "any"
        ],
        "_calculate_effectiveness_score": [
          "min",
          "pattern_scores.get",
          "set",
          "len"
        ],
        "_check_immediate_feedback": [
          "self._log_immediate_feedback",
          "any"
        ],
        "_log_immediate_feedback": [
          "print",
          "logger.warning"
        ],
        "analyze_behavior_trends": [
          "self._save_analysis",
          "any",
          "AIBehaviorAnalysis",
          "timedelta",
          "set",
          "sum",
          "datetime.fromisoformat",
          "all_tools.update",
          "improvements.append",
          "len",
          "datetime.now",
          "self._generate_recommendations",
          "strengths.append"
        ],
        "_generate_recommendations": [
          "recommendations.append",
          "recommendations.extend"
        ],
        "get_real_time_guidance": [
          "current_query.lower",
          "guidance.append",
          "any"
        ],
        "_load_events": [
          "AIUsageEvent",
          "logger.error",
          "logger.info",
          "open",
          "len",
          "json.load"
        ],
        "_save_events": [
          "logger.error",
          "json.dump",
          "open",
          "asdict"
        ],
        "_save_analysis": [
          "logger.error",
          "json.dump",
          "open",
          "asdict"
        ],
        "get_monitoring_report": [
          "datetime.now",
          "chr",
          "self.analyze_behavior_trends",
          "len"
        ],
        "initialize_ai_monitor": [
          "AISelfMonitor"
        ],
        "get_ai_monitor": [],
        "record_ai_usage": [
          "_monitor_instance.record_ai_interaction"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "1365a1e5-7093-416b-ae58-485a0914bfc5"
    },
    {
      "module_id": "src.llmstruct.cursor_ai_bridge",
      "path": "src/llmstruct/cursor_ai_bridge.py",
      "category": "core",
      "module_doc": "Cursor AI Bridge - API Layer for AI Assistant Integration\nProvides CLI and HTTP endpoints so Cursor AI can use WorkflowOrchestrator",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for Cursor AI Bridge.",
          "line_range": [
            350,
            401
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            29,
            32
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "ai_get_context",
          "docstring": "Get AI-optimized context for current development state.",
          "line_range": [
            34,
            67
          ],
          "parameters": [
            "self",
            "query_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "ai_analyze_task",
          "docstring": "Analyze a task and provide AI-optimized guidance.",
          "line_range": [
            69,
            93
          ],
          "parameters": [
            "self",
            "task_description"
          ],
          "decorators": []
        },
        {
          "name": "ai_create_task",
          "docstring": "Create a task through AI interface.",
          "line_range": [
            95,
            114
          ],
          "parameters": [
            "self",
            "title",
            "description",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "ai_get_onboarding_guide",
          "docstring": "Get comprehensive AI onboarding guide.",
          "line_range": [
            116,
            145
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "ai_check_duplicates",
          "docstring": "Check for code duplicates with AI-friendly output.",
          "line_range": [
            147,
            171
          ],
          "parameters": [
            "self",
            "threshold"
          ],
          "decorators": []
        },
        {
          "name": "ai_suggest",
          "docstring": "Get AI suggestions based on context.",
          "line_range": [
            173,
            199
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_task_complexity",
          "docstring": "Estimate task complexity based on codebase analysis.",
          "line_range": [
            201,
            215
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_suggest_approach",
          "docstring": "Suggest approach based on task and codebase state.",
          "line_range": [
            217,
            234
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_find_relevant_modules",
          "docstring": "Find modules relevant to the task.",
          "line_range": [
            236,
            248
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_check_potential_duplicates",
          "docstring": "Check if task might create duplicates.",
          "line_range": [
            250,
            253
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_recommend_ai_for_task",
          "docstring": "Recommend which AI to use for the task.",
          "line_range": [
            255,
            264
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_generate_workflow_steps",
          "docstring": "Generate workflow steps for the task.",
          "line_range": [
            266,
            276
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_determine_context_requirements",
          "docstring": "Determine what context is needed for the task.",
          "line_range": [
            278,
            290
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on context.",
          "line_range": [
            292,
            299
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_available_ai_commands",
          "docstring": "Get available AI commands.",
          "line_range": [
            301,
            310
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_identify_high_priority_duplicates",
          "docstring": "Identify high-priority duplicates for refactoring.",
          "line_range": [
            312,
            315
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_generate_refactoring_suggestions",
          "docstring": "Generate refactoring suggestions.",
          "line_range": [
            317,
            323
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_classify_task_type",
          "docstring": "Classify task type for AI delegation.",
          "line_range": [
            325,
            338
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_generate_next_steps",
          "docstring": "Generate next steps based on context.",
          "line_range": [
            340,
            347
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorAIBridge",
          "docstring": "Bridge that allows Cursor AI assistant to use WorkflowOrchestrator\nthrough CLI commands and structured JSON responses.",
          "line_range": [
            23,
            347
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                29,
                32
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "ai_get_context",
              "docstring": "Get AI-optimized context for current development state.",
              "line_range": [
                34,
                67
              ],
              "parameters": [
                "self",
                "query_type",
                "file_path"
              ]
            },
            {
              "name": "ai_analyze_task",
              "docstring": "Analyze a task and provide AI-optimized guidance.",
              "line_range": [
                69,
                93
              ],
              "parameters": [
                "self",
                "task_description"
              ]
            },
            {
              "name": "ai_create_task",
              "docstring": "Create a task through AI interface.",
              "line_range": [
                95,
                114
              ],
              "parameters": [
                "self",
                "title",
                "description",
                "priority"
              ]
            },
            {
              "name": "ai_get_onboarding_guide",
              "docstring": "Get comprehensive AI onboarding guide.",
              "line_range": [
                116,
                145
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "ai_check_duplicates",
              "docstring": "Check for code duplicates with AI-friendly output.",
              "line_range": [
                147,
                171
              ],
              "parameters": [
                "self",
                "threshold"
              ]
            },
            {
              "name": "ai_suggest",
              "docstring": "Get AI suggestions based on context.",
              "line_range": [
                173,
                199
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_estimate_task_complexity",
              "docstring": "Estimate task complexity based on codebase analysis.",
              "line_range": [
                201,
                215
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_suggest_approach",
              "docstring": "Suggest approach based on task and codebase state.",
              "line_range": [
                217,
                234
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_find_relevant_modules",
              "docstring": "Find modules relevant to the task.",
              "line_range": [
                236,
                248
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_check_potential_duplicates",
              "docstring": "Check if task might create duplicates.",
              "line_range": [
                250,
                253
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_recommend_ai_for_task",
              "docstring": "Recommend which AI to use for the task.",
              "line_range": [
                255,
                264
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_generate_workflow_steps",
              "docstring": "Generate workflow steps for the task.",
              "line_range": [
                266,
                276
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_determine_context_requirements",
              "docstring": "Determine what context is needed for the task.",
              "line_range": [
                278,
                290
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on context.",
              "line_range": [
                292,
                299
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_get_available_ai_commands",
              "docstring": "Get available AI commands.",
              "line_range": [
                301,
                310
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_identify_high_priority_duplicates",
              "docstring": "Identify high-priority duplicates for refactoring.",
              "line_range": [
                312,
                315
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_generate_refactoring_suggestions",
              "docstring": "Generate refactoring suggestions.",
              "line_range": [
                317,
                323
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_classify_task_type",
              "docstring": "Classify task type for AI delegation.",
              "line_range": [
                325,
                338
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_generate_next_steps",
              "docstring": "Generate next steps based on context.",
              "line_range": [
                340,
                347
              ],
              "parameters": [
                "self",
                "context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "CursorIntegrationManager",
          "WorkflowOrchestrator",
          "str"
        ],
        "ai_get_context": [
          "cursor_context.get",
          "datetime.utcnow",
          "context.get",
          "self._get_workflow_suggestions",
          "len",
          "self._get_available_ai_commands",
          "str"
        ],
        "ai_analyze_task": [
          "self._check_potential_duplicates",
          "self._suggest_approach",
          "self._estimate_task_complexity",
          "str",
          "context.get",
          "self._recommend_ai_for_task",
          "self._find_relevant_modules",
          "self._generate_workflow_steps",
          "self._determine_context_requirements"
        ],
        "ai_create_task": [
          "datetime.utcnow",
          "self.ai_analyze_task",
          "str"
        ],
        "ai_get_onboarding_guide": [
          "str"
        ],
        "ai_check_duplicates": [
          "str",
          "self._generate_refactoring_suggestions",
          "analysis.get",
          "self._identify_high_priority_duplicates"
        ],
        "ai_suggest": [
          "self._generate_next_steps",
          "self._get_workflow_suggestions",
          "delegation.get",
          "self._classify_task_type",
          "str"
        ],
        "_estimate_task_complexity": [
          "task.lower",
          "complexity_keywords.items",
          "any"
        ],
        "_suggest_approach": [
          "task.lower",
          "approaches.append"
        ],
        "_find_relevant_modules": [
          "struct_analysis.get",
          "module.get",
          "any",
          "task.lower",
          "relevant.append"
        ],
        "_check_potential_duplicates": [],
        "_recommend_ai_for_task": [
          "task.lower",
          "any"
        ],
        "_generate_workflow_steps": [],
        "_determine_context_requirements": [
          "task.lower",
          "requirements.append"
        ],
        "_get_workflow_suggestions": [],
        "_get_available_ai_commands": [],
        "_identify_high_priority_duplicates": [],
        "_generate_refactoring_suggestions": [],
        "_classify_task_type": [
          "context.lower",
          "any"
        ],
        "_generate_next_steps": [],
        "main": [
          "parser.add_argument",
          "bridge.ai_onboarding_guide",
          "bridge.ai_get_context",
          "parser.parse_args",
          "CursorAIBridge",
          "argparse.ArgumentParser",
          "json.dumps",
          "bridge.ai_check_duplicates",
          "bridge.ai_suggest",
          "bridge.ai_create_task",
          "print",
          "bridge.ai_analyze_task"
        ]
      },
      "dependencies": [
        "Any",
        "CursorIntegrationManager",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "WorkflowOrchestrator",
        "ai_self_awareness",
        "argparse",
        "cursor_integration",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": null,
      "artifact_id": "4a03b429-549b-4ab7-8bfd-37115ca6f9df"
    },
    {
      "module_id": "src.llmstruct.ai_self_awareness",
      "path": "src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "module_doc": "AI Self-Awareness Enhancement Module\nProvides comprehensive system introspection and capability discovery for llmstruct AI systems.\nEnhanced with Cursor IDE integration and real-time metrics.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize the capability discovery system with CLI integration.",
          "line_range": [
            101,
            107
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_ensure_directories",
          "docstring": "Ensure required directories exist.",
          "line_range": [
            109,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "discover_all_capabilities",
          "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
          "line_range": [
            113,
            154
          ],
          "parameters": [
            "self",
            "force_refresh"
          ],
          "decorators": []
        },
        {
          "name": "_get_integration_metrics",
          "docstring": "Get metrics about unused function integration success.",
          "line_range": [
            156,
            163
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_enhanced_capabilities_summary",
          "docstring": "Get enhanced capabilities summary including unused function integration.",
          "line_range": [
            165,
            203
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_ai_status",
          "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
          "line_range": [
            205,
            246
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_tools",
          "docstring": "Discover and check health of all available tools.",
          "line_range": [
            248,
            260
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cli_processor",
          "docstring": "Check CLI processor health.",
          "line_range": [
            262,
            297
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_copilot_manager",
          "docstring": "Check Copilot manager health.",
          "line_range": [
            299,
            336
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_context_orchestrator",
          "docstring": "Check context orchestrator health.",
          "line_range": [
            338,
            393
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cache_system",
          "docstring": "Check cache system health.",
          "line_range": [
            395,
            438
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_struct_parser",
          "docstring": "Check struct.json parser health.",
          "line_range": [
            440,
            484
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_docs_system",
          "docstring": "Check docs.json system health.",
          "line_range": [
            486,
            517
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_capabilities",
          "docstring": "Discover available context capabilities.",
          "line_range": [
            519,
            556
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_integration_health",
          "docstring": "Check health of all system integrations.",
          "line_range": [
            558,
            567
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_component_status",
          "docstring": "Check status of a specific component.",
          "line_range": [
            569,
            574
          ],
          "parameters": [
            "self",
            "component_name"
          ],
          "decorators": []
        },
        {
          "name": "_discover_vscode_capabilities",
          "docstring": "Discover VS Code specific capabilities.",
          "line_range": [
            576,
            585
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_cache_hit_rate",
          "docstring": "Calculate cache hit rate using real metrics.",
          "line_range": [
            587,
            589
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_system_load",
          "docstring": "Estimate current system load using real metrics.",
          "line_range": [
            591,
            593
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_cache_valid",
          "docstring": "Check if cached capabilities are still valid.",
          "line_range": [
            595,
            602
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cached_capabilities",
          "docstring": "Load capabilities from cache.",
          "line_range": [
            604,
            618
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cache_capabilities",
          "docstring": "Cache capabilities to disk.",
          "line_range": [
            620,
            630
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "get_capabilities_summary",
          "docstring": "Get a human-readable summary of current capabilities.",
          "line_range": [
            632,
            691
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_project_structure",
          "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
          "line_range": [
            693,
            739
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_directory_structure",
          "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
          "line_range": [
            741,
            760
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_unused_capabilities",
          "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
          "line_range": [
            762,
            819
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_discover_config_capabilities",
          "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
          "line_range": [
            821,
            849
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_scenarios",
          "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
          "line_range": [
            851,
            890
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_command",
          "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
          "line_range": [
            892,
            898
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_config",
          "docstring": "Determine if a config function would be useful for AI configuration awareness.",
          "line_range": [
            900,
            906
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_utility",
          "docstring": "Determine if a utility function would be useful for AI operations.",
          "line_range": [
            908,
            914
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_prioritize_integrations",
          "docstring": "Prioritize which unused functions should be integrated first.",
          "line_range": [
            916,
            932
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_basic_directory_scan",
          "docstring": "Basic directory scan for fallback scenarios.",
          "line_range": [
            934,
            946
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_status_report",
          "docstring": "Generate Cursor-specific status optimized for IDE integration.",
          "line_range": [
            949,
            967
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "optimize_context_for_cursor",
          "docstring": "Provide perfectly sized context for Cursor interactions.",
          "line_range": [
            969,
            1001
          ],
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals from personal bridge.",
          "line_range": [
            1003,
            1038
          ],
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_real_cache_hit_rate",
          "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
          "line_range": [
            1040,
            1066
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_real_system_load",
          "docstring": "Get actual system performance metrics.",
          "line_range": [
            1068,
            1090
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": [
            1092,
            1102
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": [
            1104,
            1114
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_query_type",
          "docstring": "Analyze query to determine optimal context type.",
          "line_range": [
            1116,
            1144
          ],
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": [
            1146,
            1163
          ],
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": [
            1165,
            1177
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_get_overall_health_emoji",
          "docstring": "Get emoji representing overall system health.",
          "line_range": [
            1179,
            1202
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_status_emoji",
          "docstring": "Get emoji for context engine status.",
          "line_range": [
            1204,
            1214
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_ai_integration_emoji",
          "docstring": "Get emoji for AI integration status.",
          "line_range": [
            1216,
            1224
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_goal_alignment_status",
          "docstring": "Get goal alignment status.",
          "line_range": [
            1226,
            1235
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CapabilityStatus",
          "docstring": "Status of system capabilities.",
          "line_range": [
            22,
            27
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextMode",
          "docstring": "Available context modes.",
          "line_range": [
            30,
            35
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ToolHealth",
          "docstring": "Health status of a specific tool.",
          "line_range": [
            39,
            46
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextCapabilities",
          "docstring": "Available context capabilities.",
          "line_range": [
            50,
            57
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "IntegrationHealth",
          "docstring": "Status of system integrations.",
          "line_range": [
            61,
            68
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "VSCodeCapabilities",
          "docstring": "VS Code specific capabilities.",
          "line_range": [
            72,
            79
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilities",
          "docstring": "Complete system capabilities overview.",
          "line_range": [
            83,
            91
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilityDiscovery",
          "docstring": "Discovers and monitors system capabilities in real-time.\nProvides AI with comprehensive understanding of available tools and systems.\nEnhanced with unused function integration for maximum AI self-awareness.",
          "line_range": [
            94,
            1235
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the capability discovery system with CLI integration.",
              "line_range": [
                101,
                107
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_ensure_directories",
              "docstring": "Ensure required directories exist.",
              "line_range": [
                109,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "discover_all_capabilities",
              "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
              "line_range": [
                113,
                154
              ],
              "parameters": [
                "self",
                "force_refresh"
              ]
            },
            {
              "name": "_get_integration_metrics",
              "docstring": "Get metrics about unused function integration success.",
              "line_range": [
                156,
                163
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_enhanced_capabilities_summary",
              "docstring": "Get enhanced capabilities summary including unused function integration.",
              "line_range": [
                165,
                203
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_comprehensive_ai_status",
              "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
              "line_range": [
                205,
                246
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_tools",
              "docstring": "Discover and check health of all available tools.",
              "line_range": [
                248,
                260
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cli_processor",
              "docstring": "Check CLI processor health.",
              "line_range": [
                262,
                297
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_copilot_manager",
              "docstring": "Check Copilot manager health.",
              "line_range": [
                299,
                336
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_context_orchestrator",
              "docstring": "Check context orchestrator health.",
              "line_range": [
                338,
                393
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cache_system",
              "docstring": "Check cache system health.",
              "line_range": [
                395,
                438
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_struct_parser",
              "docstring": "Check struct.json parser health.",
              "line_range": [
                440,
                484
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_docs_system",
              "docstring": "Check docs.json system health.",
              "line_range": [
                486,
                517
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_capabilities",
              "docstring": "Discover available context capabilities.",
              "line_range": [
                519,
                556
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_integration_health",
              "docstring": "Check health of all system integrations.",
              "line_range": [
                558,
                567
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_component_status",
              "docstring": "Check status of a specific component.",
              "line_range": [
                569,
                574
              ],
              "parameters": [
                "self",
                "component_name"
              ]
            },
            {
              "name": "_discover_vscode_capabilities",
              "docstring": "Discover VS Code specific capabilities.",
              "line_range": [
                576,
                585
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_cache_hit_rate",
              "docstring": "Calculate cache hit rate using real metrics.",
              "line_range": [
                587,
                589
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_estimate_system_load",
              "docstring": "Estimate current system load using real metrics.",
              "line_range": [
                591,
                593
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_cache_valid",
              "docstring": "Check if cached capabilities are still valid.",
              "line_range": [
                595,
                602
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cached_capabilities",
              "docstring": "Load capabilities from cache.",
              "line_range": [
                604,
                618
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cache_capabilities",
              "docstring": "Cache capabilities to disk.",
              "line_range": [
                620,
                630
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "get_capabilities_summary",
              "docstring": "Get a human-readable summary of current capabilities.",
              "line_range": [
                632,
                691
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_project_structure",
              "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
              "line_range": [
                693,
                739
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_enhanced_directory_structure",
              "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
              "line_range": [
                741,
                760
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_unused_capabilities",
              "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
              "line_range": [
                762,
                819
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_discover_config_capabilities",
              "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
              "line_range": [
                821,
                849
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_scenarios",
              "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
              "line_range": [
                851,
                890
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_ai_useful_command",
              "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
              "line_range": [
                892,
                898
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_config",
              "docstring": "Determine if a config function would be useful for AI configuration awareness.",
              "line_range": [
                900,
                906
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_utility",
              "docstring": "Determine if a utility function would be useful for AI operations.",
              "line_range": [
                908,
                914
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_prioritize_integrations",
              "docstring": "Prioritize which unused functions should be integrated first.",
              "line_range": [
                916,
                932
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_basic_directory_scan",
              "docstring": "Basic directory scan for fallback scenarios.",
              "line_range": [
                934,
                946
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cursor_status_report",
              "docstring": "Generate Cursor-specific status optimized for IDE integration.",
              "line_range": [
                949,
                967
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "optimize_context_for_cursor",
              "docstring": "Provide perfectly sized context for Cursor interactions.",
              "line_range": [
                969,
                1001
              ],
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals from personal bridge.",
              "line_range": [
                1003,
                1038
              ],
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "_calculate_real_cache_hit_rate",
              "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
              "line_range": [
                1040,
                1066
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_real_system_load",
              "docstring": "Get actual system performance metrics.",
              "line_range": [
                1068,
                1090
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": [
                1092,
                1102
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": [
                1104,
                1114
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_query_type",
              "docstring": "Analyze query to determine optimal context type.",
              "line_range": [
                1116,
                1144
              ],
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": [
                1146,
                1163
              ],
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": [
                1165,
                1177
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_get_overall_health_emoji",
              "docstring": "Get emoji representing overall system health.",
              "line_range": [
                1179,
                1202
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_get_context_status_emoji",
              "docstring": "Get emoji for context engine status.",
              "line_range": [
                1204,
                1214
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_get_ai_integration_emoji",
              "docstring": "Get emoji for AI integration status.",
              "line_range": [
                1216,
                1224
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_goal_alignment_status",
              "docstring": "Get goal alignment status.",
              "line_range": [
                1226,
                1235
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._ensure_directories",
          "Path",
          "create_ai_cli_integration"
        ],
        "_ensure_directories": [],
        "discover_all_capabilities": [
          "self._discover_vscode_capabilities",
          "self._is_cache_valid",
          "self._estimate_system_load",
          "time.time",
          "self._analyze_project_structure",
          "self._discover_context_capabilities",
          "logger.info",
          "self._calculate_cache_hit_rate",
          "SystemCapabilities",
          "self._get_integration_metrics",
          "self._cache_capabilities",
          "self._check_integration_health",
          "datetime.now",
          "self._discover_tools",
          "self._load_cached_capabilities"
        ],
        "_get_integration_metrics": [],
        "get_enhanced_capabilities_summary": [
          "self.get_capabilities_summary",
          "hasattr",
          "enhanced_info.append",
          "str"
        ],
        "get_comprehensive_ai_status": [
          "self.get_enhanced_capabilities_summary",
          "str",
          "get_ai_enhanced_cli_summary"
        ],
        "_discover_tools": [
          "self._check_docs_system",
          "self._check_context_orchestrator",
          "self._check_cli_processor",
          "self._check_copilot_manager",
          "self._check_cache_system",
          "self._check_struct_parser"
        ],
        "_check_cli_processor": [
          "CommandProcessor",
          "CLIConfig",
          "ToolHealth",
          "time.time",
          "CLIUtils",
          "datetime.now",
          "str"
        ],
        "_check_copilot_manager": [
          "initialize_copilot",
          "ToolHealth",
          "manager.get_context_status",
          "time.time",
          "hasattr",
          "datetime.now",
          "str"
        ],
        "_check_context_orchestrator": [
          "ToolHealth",
          "time.time",
          "get_optimized_context",
          "hasattr",
          "datetime.now",
          "create_context_orchestrator",
          "logger.warning",
          "str"
        ],
        "_check_cache_system": [
          "cache.cache_json",
          "ToolHealth",
          "time.time",
          "cache.close",
          "JSONCache",
          "struct_file.exists",
          "datetime.now",
          "cache.get_full_json",
          "str"
        ],
        "_check_struct_parser": [
          "missing_keys.append",
          "ToolHealth",
          "time.time",
          "FileNotFoundError",
          "struct_file.exists",
          "open",
          "datetime.now",
          "json.load",
          "struct_data.get",
          "str"
        ],
        "_check_docs_system": [
          "docs_file.exists",
          "ToolHealth",
          "time.time",
          "FileNotFoundError",
          "open",
          "datetime.now",
          "json.load",
          "str"
        ],
        "_discover_context_capabilities": [
          "config.get",
          "logger.error",
          "isinstance",
          "list",
          "scenario_mappings.keys",
          "ContextCapabilities",
          "create_context_orchestrator",
          "str"
        ],
        "_check_integration_health": [
          "IntegrationHealth",
          "self._check_component_status"
        ],
        "_check_component_status": [
          "hasattr"
        ],
        "_discover_vscode_capabilities": [
          "VSCodeCapabilities"
        ],
        "_calculate_cache_hit_rate": [
          "self._calculate_real_cache_hit_rate"
        ],
        "_estimate_system_load": [
          "self._get_real_system_load"
        ],
        "_is_cache_valid": [
          "time.time"
        ],
        "_load_cached_capabilities": [
          "logger.error",
          "json.load",
          "open"
        ],
        "_cache_capabilities": [
          "logger.error",
          "json.dump",
          "open",
          "asdict"
        ],
        "get_capabilities_summary": [
          "str",
          "chr",
          "self.discover_all_capabilities",
          "len"
        ],
        "_analyze_project_structure": [
          "module.get",
          "self._discover_config_capabilities",
          "self._discover_context_scenarios",
          "self._get_enhanced_directory_structure",
          "self._analyze_unused_capabilities",
          "sum",
          "struct_file.exists",
          "open",
          "len",
          "json.load",
          "struct_data.get",
          "str"
        ],
        "_get_enhanced_directory_structure": [
          "self._basic_directory_scan",
          "get_directory_structure",
          "str"
        ],
        "_analyze_unused_capabilities": [
          "min",
          "self._is_ai_useful_utility",
          "self._is_ai_useful_command",
          "self._is_ai_useful_config",
          "config_module.get",
          "cli_module.get",
          "modules.get",
          "len",
          "f.startswith",
          "utils_module.get",
          "self._prioritize_integrations",
          "struct_data.get",
          "str"
        ],
        "_discover_config_capabilities": [
          "get_context_config",
          "is_auto_update_enabled",
          "get_copilot_config",
          "get_queue_config",
          "str"
        ],
        "_discover_context_scenarios": [
          "get_context_for_scenario",
          "get_metrics_summary",
          "str"
        ],
        "_is_ai_useful_command": [],
        "_is_ai_useful_config": [],
        "_is_ai_useful_utility": [],
        "_prioritize_integrations": [
          "priorities.append"
        ],
        "_basic_directory_scan": [
          "item.is_dir",
          "logger.error",
          "str",
          "item.is_file"
        ],
        "get_cursor_status_report": [
          "self.discover_all_capabilities",
          "self._load_cursor_config",
          "self._get_goal_alignment_status",
          "self._get_context_status_emoji",
          "self._get_overall_health_emoji",
          "self._get_ai_integration_emoji",
          "str"
        ],
        "optimize_context_for_cursor": [
          "self._apply_privacy_filter",
          "logger.error",
          "context_rules.get",
          "self._analyze_query_type",
          "self._load_cursor_config",
          "file_path.exists",
          "open",
          "optimal_config.get",
          "json.load",
          "str",
          "cursor_config.get"
        ],
        "get_goal_aligned_suggestions": [
          "personal_bridge.get",
          "logger.error",
          "technical_context.lower",
          "any",
          "suggestions.extend",
          "self._load_personal_bridge"
        ],
        "_calculate_real_cache_hit_rate": [
          "cache_dir.glob",
          "time.time",
          "logger.error",
          "cache_file.stat",
          "list",
          "len",
          "cache_dir.exists"
        ],
        "_get_real_system_load": [
          "min",
          "logger.error",
          "psutil.disk_usage",
          "psutil.cpu_percent",
          "psutil.virtual_memory",
          "str"
        ],
        "_load_cursor_config": [
          "logger.error",
          "json.load",
          "open",
          "config_path.exists"
        ],
        "_load_personal_bridge": [
          "logger.error",
          "json.load",
          "open",
          "bridge_path.exists"
        ],
        "_analyze_query_type": [
          "query_analysis.get",
          "any"
        ],
        "_apply_privacy_filter": [
          "context_data.items",
          "isinstance",
          "self._filter_sensitive_dict"
        ],
        "_filter_sensitive_dict": [
          "data.items",
          "self._filter_sensitive_dict",
          "isinstance",
          "any",
          "key.lower"
        ],
        "_get_overall_health_emoji": [],
        "_get_context_status_emoji": [
          "len"
        ],
        "_get_ai_integration_emoji": [
          "hasattr"
        ],
        "_get_goal_alignment_status": [
          "self._load_personal_bridge"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "asdict",
        "create_ai_cli_integration",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "get_ai_enhanced_cli_summary",
        "get_auto_update_config",
        "get_context_config",
        "get_context_for_scenario",
        "get_copilot_config",
        "get_directory_structure",
        "get_metrics_summary",
        "get_optimized_context",
        "get_queue_config",
        "initialize_copilot",
        "is_auto_update_enabled",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cache",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "logging",
        "os",
        "pathlib",
        "psutil",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "54c7d13b-06c4-4f5e-9806-45b0cc47116c"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "LLMClient",
        "SystemCapabilityDiscovery",
        "ai_cli_integration",
        "ai_self_awareness",
        "llm_client"
      ],
      "hash": null,
      "artifact_id": "b0b4742c-4aa9-4881-98d8-c291d02cc2fd"
    },
    {
      "module_id": "src.llmstruct.modules.cli.epic",
      "path": "src/llmstruct/modules/cli/epic.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": [
            5,
            7
          ],
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "show_links",
          "docstring": "",
          "line_range": [
            9,
            57
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "add_epic_cli_subparser",
          "docstring": "",
          "line_range": [
            59,
            67
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "json.load",
          "open"
        ],
        "show_links": [
          "epic_path.exists",
          "results.items",
          "Path",
          "link_map.items",
          "t.upper",
          "item.get",
          "epic.get",
          "data.get",
          "json.dumps",
          "status_filter.lower",
          "print",
          "str",
          "load_json"
        ],
        "add_epic_cli_subparser": [
          "show_links_parser.add_argument",
          "subparsers.add_parser",
          "show_links_parser.set_defaults",
          "epic_parser.add_subparsers",
          "epic_sub.add_parser"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "4fd31961-4201-4898-a499-89b815b4596d"
    },
    {
      "module_id": "src.llmstruct.modules.cli.handlers_legacy",
      "path": "src/llmstruct/modules/cli/handlers_legacy.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            14,
            149
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive_legacy": [
          "logging.warning",
          "cache.close",
          "JSONCache",
          "os.listdir",
          "attach_to_llm_request",
          "user_input.lower",
          "get_folder_structure",
          "logging.error",
          "sorted",
          "m.group",
          "args_str.strip",
          "print",
          "parse",
          "client.query",
          "write_to_file",
          "input",
          "read_file_content",
          "json.dumps",
          "user_input.startswith",
          "Path",
          "re.match",
          "LLMClient",
          "load_gitignore"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "13ea964e-2210-45d6-a108-9e2e4ab08903"
    },
    {
      "module_id": "src.llmstruct.modules.cli.analyze_duplicates",
      "path": "src/llmstruct/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": [
            1,
            81
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "analyze_duplicates": [
          "duplication_data.get",
          "filtered_duplicates.items",
          "getattr",
          "sorted",
          "json.dump",
          "WorkflowOrchestrator",
          "analysis.get",
          "enumerate",
          "orchestrator.analyze_codebase_for_duplicates",
          "hasattr",
          "rec.get",
          "len",
          "open",
          "duplicates.items",
          "r.get",
          "print",
          "traceback.print_exc",
          "json.dumps"
        ]
      },
      "dependencies": [
        "WorkflowOrchestrator",
        "json",
        "llmstruct.workflow_orchestrator",
        "traceback"
      ],
      "hash": null,
      "artifact_id": "901a64a3-79a5-4991-b99a-c450d3484c1d"
    },
    {
      "module_id": "src.llmstruct.modules.cli.copilot",
      "path": "src/llmstruct/modules/cli/copilot.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            5,
            113
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "copilot": [
          "smart_suggest",
          "hasattr",
          "open",
          "f.write",
          "manager.load_context_layer",
          "initialize_copilot",
          "logging.error",
          "manager.refresh_all_contexts",
          "manager.export_context",
          "shutil.copy",
          "print",
          "getattr",
          "layers.split",
          "enumerate",
          "manager.validate_change",
          "logging.info",
          "template_path.exists",
          "manager.get_context_status",
          "Path",
          "manager.unload_context_layer",
          "manager.close",
          "config_path.exists"
        ]
      },
      "dependencies": [
        "Path",
        "initialize_copilot",
        "llmstruct.copilot",
        "logging",
        "pathlib",
        "shutil",
        "smart_suggest"
      ],
      "hash": null,
      "artifact_id": "09888162-2af9-492d-bf54-c9849a46a101"
    },
    {
      "module_id": "src.llmstruct.modules.cli.handlers",
      "path": "src/llmstruct/modules/cli/handlers.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            14,
            21
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            23,
            32
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive": [
          "interactive_legacy",
          "interactive_modular",
          "logging.warning"
        ],
        "interactive_modular": [
          "cli_core.run_interactive_mode",
          "hasattr",
          "create_cli_core",
          "logging.info"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "create_cli_core",
        "get_folder_structure",
        "interactive_legacy",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.cli_core",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.handlers_legacy",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "beb47441-8bdb-4e32-bac5-f5cdf4504288"
    },
    {
      "module_id": "src.llmstruct.modules.cli.review",
      "path": "src/llmstruct/modules/cli/review.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "review": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "5cfabcd6-d5d1-4483-9c1c-3aa1f5997c47"
    },
    {
      "module_id": "src.llmstruct.modules.cli.dogfood",
      "path": "src/llmstruct/modules/cli/dogfood.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "dogfood": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "6ec406af-ba21-4f4e-9498-f197474d7b50"
    },
    {
      "module_id": "src.llmstruct.modules.cli.parse",
      "path": "src/llmstruct/modules/cli/parse.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            9,
            93
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse": [
          "logging.warning",
          "cache.close",
          "JSONCache",
          "json.dump",
          "struct_data.get",
          "cache.cache_json",
          "logging.error",
          "mod_dir.mkdir",
          "module.get",
          "cli_config.get",
          "getattr",
          "func.get",
          "ast_path.open",
          "struct_path.open",
          "load_config",
          "generate_json",
          "parsing_config.get",
          "logging.info",
          "config.get",
          "Path"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "generate_json",
        "json",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "load_config",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "1c8343e9-957f-43db-87a1-82e3e6bc78fe"
    },
    {
      "module_id": "src.llmstruct.modules.cli.audit",
      "path": "src/llmstruct/modules/cli/audit.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": [
            4,
            17
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "audit": [
          "Path",
          "analyze_duplicates",
          "file_path.exists",
          "hasattr",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "analyze_duplicates",
        "llmstruct.cli",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "e8ac34bc-046c-43e1-88a1-1b1c95178ae4"
    },
    {
      "module_id": "src.llmstruct.modules.cli.query",
      "path": "src/llmstruct/modules/cli/query.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            8,
            64
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "query": [
          "orchestrator.get_context_for_scenario",
          "logging.info",
          "logging.error",
          "logging.warning",
          "cache.close",
          "Path",
          "json.dump",
          "JSONCache",
          "hasattr",
          "LLMClient",
          "client.query_with_context",
          "create_context_orchestrator",
          "client.query"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "create_context_orchestrator",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "9b5d77af-6900-4d6f-b821-1c30d06ee6e9"
    },
    {
      "module_id": "src.llmstruct.modules.cli.utils",
      "path": "src/llmstruct/modules/cli/utils.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            6,
            20
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            22,
            32
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": [
            45,
            63
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            65,
            72
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "",
          "line_range": [
            74,
            75
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "",
          "line_range": [
            77,
            78
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "",
          "line_range": [
            80,
            81
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "",
          "line_range": [
            83,
            84
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "",
          "line_range": [
            86,
            93
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "",
          "line_range": [
            95,
            98
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "",
          "line_range": [
            100,
            103
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "",
          "line_range": [
            105,
            106
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "",
          "line_range": [
            108,
            109
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "",
          "line_range": [
            111,
            112
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "",
          "line_range": [
            114,
            121
          ],
          "parameters": [
            "config",
            "root_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "logging.error",
          "gitignore_path.open",
          "Path",
          "line.startswith",
          "line.strip",
          "gitignore_path.exists"
        ],
        "load_config": [
          "logging.error",
          "Path",
          "toml.load",
          "config_path.open",
          "config_path.exists"
        ],
        "read_file_content": [
          "logging.error",
          "Path",
          "path.is_file",
          "f.read",
          "path.open"
        ],
        "write_to_file": [
          "logging.info",
          "logging.error",
          "logging.warning",
          "Path",
          "base_path.mkdir",
          "file_path.exists",
          "file_path.open",
          "f.write",
          "re.sub",
          "str"
        ],
        "parse_files_from_response": [
          "re.findall",
          "content.strip",
          "filename.strip",
          "files.append"
        ],
        "get_cache_config": [
          "config.get"
        ],
        "get_copilot_config": [
          "config.get"
        ],
        "get_queue_config": [
          "config.get"
        ],
        "get_context_config": [
          "config.get"
        ],
        "get_exclude_dirs": [
          "parsing_config.get",
          "cli_config.get",
          "config.get",
          "set",
          "list"
        ],
        "get_include_patterns": [
          "parsing_config.get",
          "cli_config.get",
          "config.get"
        ],
        "get_exclude_patterns": [
          "parsing_config.get",
          "cli_config.get",
          "config.get"
        ],
        "get_max_file_size": [
          "config.get"
        ],
        "get_struct_file_path": [
          "config.get"
        ],
        "get_context_file_path": [
          "config.get"
        ],
        "save_config": [
          "config_path.open",
          "Path",
          "logging.error",
          "toml.dump"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "logging",
        "pathlib",
        "re",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "137263aa-ea64-40c6-9995-8b951c93e8af"
    },
    {
      "module_id": "src.llmstruct.modules.cli.context",
      "path": "src/llmstruct/modules/cli/context.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "context": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "64018bbd-8222-4931-b6de-e673ee36ec57"
    },
    {
      "module_id": "src.llmstruct.modules.cli.__init__",
      "path": "src/llmstruct/modules/cli/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "f1fbaa49-f167-4338-a471-e665ac85218a"
    },
    {
      "module_id": "src.llmstruct.modules.commands.queue",
      "path": "src/llmstruct/modules/commands/queue.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": [
            9,
            208
          ],
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "process_cli_queue_enhanced": [
          "write_to_file",
          "logging.info",
          "logging.error",
          "get_folder_structure",
          "time.time",
          "item.get",
          "print",
          "len",
          "open",
          "isinstance",
          "enumerate",
          "load_gitignore",
          "read_file_content",
          "attach_to_llm_request",
          "json.load",
          "workflow.get",
          "options.get",
          "client.query"
        ]
      },
      "dependencies": [
        "attach_to_llm_request",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "70364303-18ab-4c1e-a833-83d187496b47"
    },
    {
      "module_id": "src.llmstruct.modules.commands.metrics",
      "path": "src/llmstruct/modules/commands/metrics.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "metrics_status",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            1,
            20
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_summary",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0432\u043e\u0434\u043a\u0443 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            22,
            66
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_analytics",
          "docstring": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            68,
            104
          ],
          "parameters": [
            "output_file",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "metrics_report",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0435\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u043e\u0442\u0447\u0435\u0442",
          "line_range": [
            106,
            134
          ],
          "parameters": [
            "sessions",
            "output_file"
          ],
          "decorators": []
        },
        {
          "name": "metrics_track",
          "docstring": "\u0420\u0443\u0447\u043d\u043e\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": [
            136,
            145
          ],
          "parameters": [
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "metrics_tokens",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            147,
            185
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "cmd_metrics",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            187,
            205
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "metrics_status": [
          "get_metrics_tracker",
          "tracker.get_session_summary",
          "print"
        ],
        "metrics_summary": [
          "get_metrics_tracker",
          "tracker.get_session_summary",
          "max",
          "print"
        ],
        "metrics_analytics": [
          "csv.writer",
          "tracker.get_session_summary",
          "tracker.get_analytics_data",
          "time.strftime",
          "get_metrics_tracker",
          "writer.writerow",
          "open",
          "enumerate",
          "json.dump",
          "print",
          "json.dumps"
        ],
        "metrics_report": [
          "tracker.get_analytics_data",
          "time.strftime",
          "get_metrics_tracker",
          "sum",
          "open",
          "analytics.get",
          "len",
          "min",
          "f.write",
          "print"
        ],
        "metrics_track": [
          "print",
          "track_workflow_event"
        ],
        "metrics_tokens": [
          "interaction.get",
          "print",
          "get_metrics_tracker",
          "enumerate",
          "get_token_summary",
          "summary.get"
        ],
        "cmd_metrics": [
          "metrics_summary",
          "metrics_track",
          "metrics_analytics",
          "metrics_status",
          "metrics_report",
          "metrics_tokens",
          "print"
        ]
      },
      "dependencies": [
        "csv",
        "get_metrics_tracker",
        "get_token_summary",
        "json",
        "llmstruct.metrics_tracker",
        "time",
        "track_workflow_event"
      ],
      "hash": null,
      "artifact_id": "d7de4b46-ea75-459d-bc94-14424e90c155"
    },
    {
      "module_id": "src.llmstruct.modules.commands.services",
      "path": "src/llmstruct/modules/commands/services.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "add_api_bot_commands",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f API \u0438 Bot \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438",
          "line_range": [
            10,
            47
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        },
        {
          "name": "cmd_api_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 API \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c",
          "line_range": [
            49,
            111
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_bot_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430\u043c\u0438",
          "line_range": [
            113,
            190
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_services",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 (API + Bots)",
          "line_range": [
            192,
            233
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "add_api_bot_commands": [
          "api_start.add_argument",
          "metrics_parser.add_subparsers",
          "bot_subparsers.add_parser",
          "api_subparsers.add_parser",
          "subparsers.add_parser",
          "metrics_report.add_argument",
          "metrics_track.add_argument",
          "bot_parser.add_subparsers",
          "services_subparsers.add_parser",
          "metrics_subparsers.add_parser",
          "metrics_analytics.add_argument",
          "services_parser.add_subparsers",
          "bot_start.add_argument",
          "api_parser.add_subparsers"
        ],
        "cmd_api_management": [
          "requests.get",
          "int",
          "pid_file.exists",
          "requests.post",
          "pid_file.unlink",
          "Path",
          "process.terminate",
          "response.json",
          "process.wait",
          "open",
          "f.write",
          "data.get",
          "subprocess.Popen",
          "f.read",
          "venv_path.exists",
          "print",
          "psutil.Process",
          "str"
        ],
        "cmd_bot_management": [
          "int",
          "pid_file.exists",
          "pid_file.unlink",
          "Path",
          "process.terminate",
          "process.is_running",
          "bot_scripts.get",
          "process.wait",
          "open",
          "f.write",
          "f.read",
          "subprocess.Popen",
          "os.getenv",
          "print",
          "psutil.Process",
          "str",
          "active_bots.append"
        ],
        "cmd_services": [
          "cmd_api_management",
          "time.sleep",
          "cmd_bot_management",
          "print",
          "type"
        ]
      },
      "dependencies": [
        "Path",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "signal",
        "subprocess",
        "time"
      ],
      "hash": null,
      "artifact_id": "5ebdb88c-aaf8-4855-9503-9ad3579fee71"
    },
    {
      "module_id": "src.llmstruct.modules.commands.__init__",
      "path": "src/llmstruct/modules/commands/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "2be4e5eb-8caf-4cad-bead-35cb7a3e6c04"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "f3c095c4-de07-4f0a-b836-9ccaf34e2f13"
    },
    {
      "module_id": "src.llmstruct.api.config",
      "path": "src/llmstruct/api/config.py",
      "category": "core",
      "module_doc": "Configuration management for LLMStruct FastAPI",
      "functions": [],
      "classes": [
        {
          "name": "Settings",
          "docstring": "Application settings with environment variable support",
          "line_range": [
            12,
            43
          ],
          "methods": [],
          "bases": [
            "BaseSettings"
          ]
        }
      ],
      "callgraph": {},
      "dependencies": [
        "BaseSettings",
        "List",
        "pydantic",
        "pydantic_settings",
        "typing"
      ],
      "hash": null,
      "artifact_id": "0ca1829c-c29f-4b23-9c98-aad506c9d379"
    },
    {
      "module_id": "src.llmstruct.api.app",
      "path": "src/llmstruct/api/app.py",
      "category": "core",
      "module_doc": "Main FastAPI application for LLMStruct",
      "functions": [
        {
          "name": "root",
          "docstring": "Root endpoint with API information",
          "line_range": [
            78,
            86
          ],
          "parameters": [],
          "decorators": [
            "app.get('/', tags=['root'])"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "root": [
          "app.get"
        ]
      },
      "dependencies": [
        "CORSMiddleware",
        "Depends",
        "FastAPI",
        "GZipMiddleware",
        "api_key_middleware",
        "chat",
        "config",
        "continue_adapter",
        "fastapi",
        "fastapi.middleware.cors",
        "fastapi.middleware.gzip",
        "logging",
        "middleware.auth",
        "middleware.logging",
        "request_logging_middleware",
        "routes",
        "settings",
        "system",
        "uvicorn"
      ],
      "hash": null,
      "artifact_id": "4abad3ed-6a04-48a4-9e66-485974518a51"
    },
    {
      "module_id": "src.llmstruct.api.__init__",
      "path": "src/llmstruct/api/__init__.py",
      "category": "cli",
      "module_doc": "LLMStruct FastAPI Module\n\nProvides HTTP REST API access to LLMStruct CLI functionality.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "98984e85-b845-4e66-a4f1-50d0678a7786"
    },
    {
      "module_id": "src.llmstruct.api.routes.chat",
      "path": "src/llmstruct/api/routes/chat.py",
      "category": "core",
      "module_doc": "Chat Routes\n\nWebSocket-based real-time chat with LLM integration",
      "functions": [
        {
          "name": "websocket_chat",
          "docstring": "WebSocket endpoint for real-time chat",
          "line_range": [
            52,
            131
          ],
          "parameters": [
            "websocket",
            "session_id",
            "api_key"
          ],
          "decorators": [
            "router.websocket('/chat/ws')"
          ]
        },
        {
          "name": "list_sessions",
          "docstring": "List active chat sessions",
          "line_range": [
            134,
            137
          ],
          "parameters": [],
          "decorators": [
            "router.get('/chat/sessions', dependencies=[Depends(get_api_key)])"
          ]
        },
        {
          "name": "get_session",
          "docstring": "Get session details and history",
          "line_range": [
            140,
            145
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": [
            "router.get('/chat/sessions/{session_id}', dependencies=[Depends(get_api_key)])"
          ]
        },
        {
          "name": "delete_session",
          "docstring": "Delete a chat session",
          "line_range": [
            148,
            153
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": [
            "router.delete('/chat/sessions/{session_id}', dependencies=[Depends(get_api_key)])"
          ]
        },
        {
          "name": "send_message",
          "docstring": "Send a message via HTTP (alternative to WebSocket)",
          "line_range": [
            156,
            179
          ],
          "parameters": [
            "message"
          ],
          "decorators": [
            "router.post('/chat/message', dependencies=[Depends(get_api_key)])"
          ]
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            32,
            33
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "connect",
          "docstring": "",
          "line_range": [
            35,
            38
          ],
          "parameters": [
            "self",
            "websocket",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "disconnect",
          "docstring": "",
          "line_range": [
            40,
            43
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "",
          "line_range": [
            45,
            47
          ],
          "parameters": [
            "self",
            "session_id",
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ConnectionManager",
          "docstring": "Manages WebSocket connections",
          "line_range": [
            29,
            47
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                32,
                33
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "connect",
              "docstring": "",
              "line_range": [
                35,
                38
              ],
              "parameters": [
                "self",
                "websocket",
                "session_id"
              ]
            },
            {
              "name": "disconnect",
              "docstring": "",
              "line_range": [
                40,
                43
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "send_message",
              "docstring": "",
              "line_range": [
                45,
                47
              ],
              "parameters": [
                "self",
                "session_id",
                "message"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "connect": [
          "logger.info",
          "websocket.accept"
        ],
        "disconnect": [
          "logger.info"
        ],
        "send_message": [
          "router.post",
          "llm_service.process_message",
          "Depends",
          "logger.error",
          "session_manager.add_message",
          "HTTPException",
          "ChatResponse",
          "str"
        ],
        "websocket_chat": [
          "websocket.close",
          "session_manager.get_or_create_session",
          "uuid.uuid4",
          "websocket.receive_text",
          "message_data.get",
          "llm_service.process_message",
          "logger.error",
          "logger.info",
          "session_manager.add_message",
          "router.websocket",
          "datetime.now",
          "manager.connect",
          "manager.disconnect",
          "json.loads",
          "str",
          "manager.send_message"
        ],
        "list_sessions": [
          "Depends",
          "session_manager.list_sessions",
          "router.get"
        ],
        "get_session": [
          "session_manager.get_session",
          "Depends",
          "HTTPException",
          "router.get"
        ],
        "delete_session": [
          "router.delete",
          "Depends",
          "HTTPException",
          "session_manager.delete_session"
        ]
      },
      "dependencies": [
        "APIRouter",
        "Any",
        "ChatMessage",
        "ChatResponse",
        "ChatSessionManager",
        "Depends",
        "Dict",
        "HTTPBearer",
        "HTTPException",
        "LLMService",
        "Optional",
        "WebSocket",
        "WebSocketDisconnect",
        "asyncio",
        "datetime",
        "fastapi",
        "fastapi.security",
        "get_api_key",
        "json",
        "logging",
        "middleware.auth",
        "models.requests",
        "models.responses",
        "services.chat_session",
        "services.llm_service",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "b8bd96ac-775f-4ce9-89e8-179fb97ec32b"
    },
    {
      "module_id": "src.llmstruct.api.routes.continue_adapter",
      "path": "src/llmstruct/api/routes/continue_adapter.py",
      "category": "core",
      "module_doc": "Continue API Adapter\n\nTranslates Continue extension requests to LLMStruct chat API format",
      "functions": [
        {
          "name": "continue_chat_completion",
          "docstring": "Continue-compatible chat completion endpoint\nTranslates Continue requests to our LLMStruct format",
          "line_range": [
            59,
            129
          ],
          "parameters": [
            "request",
            "api_key"
          ],
          "decorators": [
            "router.post('/v1/chat/completions')"
          ]
        },
        {
          "name": "continue_models",
          "docstring": "List available models for Continue",
          "line_range": [
            132,
            158
          ],
          "parameters": [
            "api_key"
          ],
          "decorators": [
            "router.get('/v1/models')"
          ]
        },
        {
          "name": "continue_embeddings",
          "docstring": "Embeddings endpoint for Continue (placeholder)",
          "line_range": [
            161,
            193
          ],
          "parameters": [
            "request",
            "api_key"
          ],
          "decorators": [
            "router.post('/v1/embeddings')"
          ]
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            25,
            35
          ],
          "parameters": [
            "self",
            "messages",
            "model",
            "temperature",
            "max_tokens",
            "stream"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            39,
            56
          ],
          "parameters": [
            "self",
            "content",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContinueRequest",
          "docstring": "Continue API request format",
          "line_range": [
            23,
            35
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                25,
                35
              ],
              "parameters": [
                "self",
                "messages",
                "model",
                "temperature",
                "max_tokens",
                "stream"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "ContinueResponse",
          "docstring": "Continue API response format (OpenAI-compatible)",
          "line_range": [
            37,
            56
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                39,
                56
              ],
              "parameters": [
                "self",
                "content",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "datetime.now",
          "int",
          "content.split",
          "len"
        ],
        "continue_chat_completion": [
          "request.json",
          "ContinueResponse",
          "router.post",
          "str",
          "llm_service.process_message",
          "Depends",
          "request_data.get",
          "reversed",
          "logger.error",
          "logger.info",
          "HTTPException",
          "len",
          "datetime.now",
          "msg.get"
        ],
        "continue_models": [
          "datetime.now",
          "Depends",
          "int",
          "router.get"
        ],
        "continue_embeddings": [
          "request.json",
          "router.post",
          "str",
          "Depends",
          "request_data.get",
          "logger.error",
          "HTTPException",
          "len",
          "input_text.split"
        ]
      },
      "dependencies": [
        "APIRouter",
        "Any",
        "ChatMessage",
        "ChatResponse",
        "Depends",
        "Dict",
        "HTTPException",
        "LLMService",
        "List",
        "Optional",
        "Request",
        "datetime",
        "fastapi",
        "get_api_key",
        "logging",
        "middleware.auth",
        "models.requests",
        "models.responses",
        "services.llm_service",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9fa0c346-2eb4-4632-8e12-e81ebcd7d7f0"
    },
    {
      "module_id": "src.llmstruct.api.routes.system",
      "path": "src/llmstruct/api/routes/system.py",
      "category": "core",
      "module_doc": "System routes for LLMStruct FastAPI\n\nHealth checks, metrics, and system information endpoints.",
      "functions": [
        {
          "name": "get_cli_bridge",
          "docstring": "Dependency to get CLI bridge instance",
          "line_range": [
            17,
            19
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "health_check",
          "docstring": "Health check endpoint\n\nReturns the health status of the API and its dependencies.\nThis endpoint does not require authentication.",
          "line_range": [
            23,
            61
          ],
          "parameters": [
            "cli"
          ],
          "decorators": [
            "router.get('/health', response_model=HealthResponse)"
          ]
        },
        {
          "name": "get_system_status",
          "docstring": "Get detailed system status\n\nReturns detailed system information including:\n- API version and configuration\n- CLI status and version\n- Resource usage (if available)",
          "line_range": [
            65,
            97
          ],
          "parameters": [],
          "decorators": [
            "router.get('/status')"
          ]
        },
        {
          "name": "get_version",
          "docstring": "Get API version information\n\nReturns version information for the API and underlying components.",
          "line_range": [
            101,
            123
          ],
          "parameters": [],
          "decorators": [
            "router.get('/version')"
          ]
        },
        {
          "name": "ping",
          "docstring": "Simple ping endpoint for basic connectivity testing",
          "line_range": [
            127,
            134
          ],
          "parameters": [],
          "decorators": [
            "router.get('/ping')"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "get_cli_bridge": [
          "CLIBridge"
        ],
        "health_check": [
          "cli.health_check",
          "datetime.utcnow",
          "Depends",
          "cli_health.get",
          "router.get",
          "str",
          "HealthResponse"
        ],
        "get_system_status": [
          "cli.health_check",
          "datetime.utcnow",
          "CLIBridge",
          "cli_health.get",
          "HTTPException",
          "str",
          "router.get"
        ],
        "get_version": [
          "cli.health_check",
          "datetime.utcnow",
          "CLIBridge",
          "cli_health.get",
          "HTTPException",
          "str",
          "router.get"
        ],
        "ping": [
          "datetime.utcnow",
          "router.get"
        ]
      },
      "dependencies": [
        "APIRouter",
        "CLIBridge",
        "Depends",
        "HTTPException",
        "HealthResponse",
        "HealthStatus",
        "asyncio",
        "datetime",
        "fastapi",
        "models.responses",
        "services.cli_bridge"
      ],
      "hash": null,
      "artifact_id": "fd0a6d71-9aa9-4a04-8ad4-970b4b12a59f"
    },
    {
      "module_id": "src.llmstruct.api.routes.__init__",
      "path": "src/llmstruct/api/routes/__init__.py",
      "category": "cli",
      "module_doc": "Routes package for LLMStruct FastAPI\n\nContains all API endpoint routers.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "811a2006-2614-4e72-86de-5e57bc31a35e"
    },
    {
      "module_id": "src.llmstruct.api.models.responses",
      "path": "src/llmstruct/api/models/responses.py",
      "category": "core",
      "module_doc": "Response models for LLMStruct FastAPI",
      "functions": [],
      "classes": [
        {
          "name": "TaskStatus",
          "docstring": "",
          "line_range": [
            11,
            15
          ],
          "methods": [],
          "bases": [
            "str",
            "Enum"
          ]
        },
        {
          "name": "HealthStatus",
          "docstring": "",
          "line_range": [
            18,
            21
          ],
          "methods": [],
          "bases": [
            "str",
            "Enum"
          ]
        },
        {
          "name": "ProjectInfo",
          "docstring": "Response model for project information",
          "line_range": [
            24,
            49
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ScanResponse",
          "docstring": "Response model for project scan results",
          "line_range": [
            52,
            77
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ContextResponse",
          "docstring": "Response model for context generation",
          "line_range": [
            80,
            100
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "TaskResponse",
          "docstring": "Response model for task operations",
          "line_range": [
            103,
            128
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "QueryResponse",
          "docstring": "Response model for LLM queries",
          "line_range": [
            131,
            155
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ValidationResponse",
          "docstring": "Response model for JSON validation",
          "line_range": [
            158,
            175
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HealthResponse",
          "docstring": "Response model for health checks",
          "line_range": [
            178,
            199
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ErrorResponse",
          "docstring": "Response model for API errors",
          "line_range": [
            202,
            217
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ChatResponse",
          "docstring": "Chat response",
          "line_range": [
            220,
            226
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            36,
            49
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            62,
            77
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            88,
            100
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            115,
            128
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            139,
            155
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            166,
            175
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            186,
            199
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            209,
            217
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {},
      "dependencies": [
        "Any",
        "BaseModel",
        "Dict",
        "Enum",
        "Field",
        "List",
        "Optional",
        "datetime",
        "enum",
        "pydantic",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c7fd9cb9-6e02-4bc6-aba7-2f2d63f747f6"
    },
    {
      "module_id": "src.llmstruct.api.models.requests",
      "path": "src/llmstruct/api/models/requests.py",
      "category": "core",
      "module_doc": "Request models for LLMStruct FastAPI",
      "functions": [],
      "classes": [
        {
          "name": "ContextMode",
          "docstring": "",
          "line_range": [
            10,
            14
          ],
          "methods": [],
          "bases": [
            "str",
            "Enum"
          ]
        },
        {
          "name": "Priority",
          "docstring": "",
          "line_range": [
            17,
            21
          ],
          "methods": [],
          "bases": [
            "str",
            "Enum"
          ]
        },
        {
          "name": "ScanRequest",
          "docstring": "Request model for project scanning",
          "line_range": [
            24,
            38
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ContextRequest",
          "docstring": "Request model for context generation",
          "line_range": [
            41,
            54
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "TaskCreateRequest",
          "docstring": "Request model for creating tasks",
          "line_range": [
            57,
            74
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "TaskUpdateRequest",
          "docstring": "Request model for updating tasks",
          "line_range": [
            77,
            92
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "QueryRequest",
          "docstring": "Request model for LLM queries",
          "line_range": [
            95,
            110
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ValidationRequest",
          "docstring": "Request model for JSON validation",
          "line_range": [
            113,
            124
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ChatMessage",
          "docstring": "Chat message request",
          "line_range": [
            127,
            132
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            31,
            38
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            47,
            54
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            65,
            74
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            86,
            92
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            102,
            110
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            118,
            124
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {},
      "dependencies": [
        "Any",
        "BaseModel",
        "Dict",
        "Enum",
        "Field",
        "List",
        "Optional",
        "enum",
        "pydantic",
        "typing"
      ],
      "hash": null,
      "artifact_id": "071ed7e3-4595-4725-af4f-8496797daec9"
    },
    {
      "module_id": "src.llmstruct.api.models.__init__",
      "path": "src/llmstruct/api/models/__init__.py",
      "category": "cli",
      "module_doc": "Pydantic models for LLMStruct FastAPI\n\nDefines request and response models for API endpoints.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "b1ee75b6-5608-48f1-92da-ab9c38d4fe30"
    },
    {
      "module_id": "src.llmstruct.api.middleware.auth",
      "path": "src/llmstruct/api/middleware/auth.py",
      "category": "core",
      "module_doc": "Authentication middleware for LLMStruct FastAPI",
      "functions": [
        {
          "name": "get_api_key",
          "docstring": "FastAPI dependency for API key authentication",
          "line_range": [
            16,
            48
          ],
          "parameters": [
            "request",
            "credentials"
          ],
          "decorators": []
        },
        {
          "name": "api_key_middleware",
          "docstring": "API key authentication middleware",
          "line_range": [
            50,
            87
          ],
          "parameters": [
            "request",
            "call_next"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_api_key": [
          "Depends",
          "HTTPException"
        ],
        "api_key_middleware": [
          "time.time",
          "call_next",
          "auth_header.startswith",
          "JSONResponse"
        ]
      },
      "dependencies": [
        "Callable",
        "Depends",
        "HTTPAuthorizationCredentials",
        "HTTPBearer",
        "HTTPException",
        "JSONResponse",
        "Optional",
        "Request",
        "config",
        "fastapi",
        "fastapi.security",
        "settings",
        "starlette.responses",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "0dd0dafc-663a-4de7-9861-23ee0558c7af"
    },
    {
      "module_id": "src.llmstruct.api.middleware.logging",
      "path": "src/llmstruct/api/middleware/logging.py",
      "category": "core",
      "module_doc": "Logging middleware for LLMStruct FastAPI",
      "functions": [
        {
          "name": "request_logging_middleware",
          "docstring": "Request and response logging middleware",
          "line_range": [
            14,
            72
          ],
          "parameters": [
            "request",
            "call_next"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "request_logging_middleware": [
          "uuid.uuid4",
          "getattr",
          "time.time",
          "logger.error",
          "logger.info",
          "call_next",
          "str"
        ]
      },
      "dependencies": [
        "Callable",
        "Request",
        "fastapi",
        "logging",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "945ba669-deb4-4f47-ba0e-52c951d3d1b0"
    },
    {
      "module_id": "src.llmstruct.api.middleware.__init__",
      "path": "src/llmstruct/api/middleware/__init__.py",
      "category": "cli",
      "module_doc": "Middleware package for LLMStruct FastAPI\n\nContains authentication, logging, and other middleware.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "3262357d-e5d7-48d9-99b1-82e822a569ff"
    },
    {
      "module_id": "src.llmstruct.api.services.llm_service",
      "path": "src/llmstruct/api/services/llm_service.py",
      "category": "core",
      "module_doc": "LLM Service\n\nIntegrates with existing LLM models and context orchestration",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            28
          ],
          "parameters": [
            "self",
            "content",
            "context_info",
            "token_usage"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            33,
            36
          ],
          "parameters": [
            "self",
            "api_key"
          ],
          "decorators": []
        },
        {
          "name": "chat_completion",
          "docstring": "Send chat completion request to Anthropic",
          "line_range": [
            38,
            77
          ],
          "parameters": [
            "self",
            "messages",
            "temperature"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            82,
            85
          ],
          "parameters": [
            "self",
            "api_key"
          ],
          "decorators": []
        },
        {
          "name": "chat_completion",
          "docstring": "Send chat completion request to Grok",
          "line_range": [
            87,
            113
          ],
          "parameters": [
            "self",
            "messages",
            "temperature"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_components",
          "docstring": "Initialize context orchestrator and copilot manager",
          "line_range": [
            126,
            140
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_message",
          "docstring": "Process a user message and return AI response",
          "line_range": [
            143,
            168
          ],
          "parameters": [
            "self",
            "message",
            "session_id",
            "context_mode"
          ],
          "decorators": []
        },
        {
          "name": "_try_llm_providers",
          "docstring": "Try LLM providers in order and return response",
          "line_range": [
            170,
            195
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_get_context",
          "docstring": "Get relevant context for the message",
          "line_range": [
            197,
            229
          ],
          "parameters": [
            "self",
            "message",
            "context_mode"
          ],
          "decorators": []
        },
        {
          "name": "_get_full_context",
          "docstring": "Get full project context",
          "line_range": [
            231,
            243
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_focused_context",
          "docstring": "Get focused context based on message content",
          "line_range": [
            245,
            260
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "_get_minimal_context",
          "docstring": "Get minimal context - basic project info",
          "line_range": [
            262,
            267
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_generate_grok_response",
          "docstring": "Generate response using Grok API",
          "line_range": [
            269,
            287
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_generate_anthropic_response",
          "docstring": "Generate response using Anthropic API",
          "line_range": [
            289,
            307
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_build_system_prompt",
          "docstring": "Build system prompt with project context",
          "line_range": [
            309,
            344
          ],
          "parameters": [
            "self",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_generate_mock_response",
          "docstring": "Generate a mock AI response (placeholder for real LLM)",
          "line_range": [
            346,
            380
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMResponse",
          "docstring": "Response from LLM processing",
          "line_range": [
            21,
            28
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                28
              ],
              "parameters": [
                "self",
                "content",
                "context_info",
                "token_usage"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "AnthropicClient",
          "docstring": "Client for Anthropic Claude API",
          "line_range": [
            30,
            77
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                33,
                36
              ],
              "parameters": [
                "self",
                "api_key"
              ]
            },
            {
              "name": "chat_completion",
              "docstring": "Send chat completion request to Anthropic",
              "line_range": [
                38,
                77
              ],
              "parameters": [
                "self",
                "messages",
                "temperature"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "GrokClient",
          "docstring": "Client for Grok API integration",
          "line_range": [
            79,
            113
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                82,
                85
              ],
              "parameters": [
                "self",
                "api_key"
              ]
            },
            {
              "name": "chat_completion",
              "docstring": "Send chat completion request to Grok",
              "line_range": [
                87,
                113
              ],
              "parameters": [
                "self",
                "messages",
                "temperature"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "LLMService",
          "docstring": "Service for LLM processing with context integration",
          "line_range": [
            115,
            380
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self",
                "base_path"
              ]
            },
            {
              "name": "_initialize_components",
              "docstring": "Initialize context orchestrator and copilot manager",
              "line_range": [
                126,
                140
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_message",
              "docstring": "Process a user message and return AI response",
              "line_range": [
                143,
                168
              ],
              "parameters": [
                "self",
                "message",
                "session_id",
                "context_mode"
              ]
            },
            {
              "name": "_try_llm_providers",
              "docstring": "Try LLM providers in order and return response",
              "line_range": [
                170,
                195
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            },
            {
              "name": "_get_context",
              "docstring": "Get relevant context for the message",
              "line_range": [
                197,
                229
              ],
              "parameters": [
                "self",
                "message",
                "context_mode"
              ]
            },
            {
              "name": "_get_full_context",
              "docstring": "Get full project context",
              "line_range": [
                231,
                243
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_focused_context",
              "docstring": "Get focused context based on message content",
              "line_range": [
                245,
                260
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "_get_minimal_context",
              "docstring": "Get minimal context - basic project info",
              "line_range": [
                262,
                267
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_generate_grok_response",
              "docstring": "Generate response using Grok API",
              "line_range": [
                269,
                287
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            },
            {
              "name": "_generate_anthropic_response",
              "docstring": "Generate response using Anthropic API",
              "line_range": [
                289,
                307
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            },
            {
              "name": "_build_system_prompt",
              "docstring": "Build system prompt with project context",
              "line_range": [
                309,
                344
              ],
              "parameters": [
                "self",
                "context_info"
              ]
            },
            {
              "name": "_generate_mock_response",
              "docstring": "Generate a mock AI response (placeholder for real LLM)",
              "line_range": [
                346,
                380
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "AnthropicClient",
          "self._initialize_components",
          "GrokClient",
          "Path.cwd"
        ],
        "chat_completion": [
          "httpx.AsyncClient",
          "response.json",
          "response.raise_for_status",
          "client.post",
          "ValueError"
        ],
        "_initialize_components": [
          "CopilotContextManager",
          "SmartContextOrchestrator",
          "logger.error",
          "logger.info",
          "str"
        ],
        "process_message": [
          "self._get_context",
          "LLMResponse",
          "self._try_llm_providers",
          "logger.error",
          "str"
        ],
        "_try_llm_providers": [
          "self._generate_mock_response",
          "self._generate_grok_response",
          "logger.info",
          "len",
          "logger.warning",
          "self._generate_anthropic_response"
        ],
        "_get_context": [
          "logger.error",
          "self._get_full_context",
          "self._get_minimal_context",
          "context_info.update",
          "self._get_focused_context",
          "str"
        ],
        "_get_full_context": [
          "struct_file.exists",
          "open",
          "list",
          "len",
          "json.load",
          "struct_data.get"
        ],
        "_get_focused_context": [
          "message.lower",
          "any"
        ],
        "_get_minimal_context": [
          "datetime.now",
          "str"
        ],
        "_generate_grok_response": [
          "self._build_system_prompt",
          "ValueError",
          "len"
        ],
        "_generate_anthropic_response": [
          "self._build_system_prompt",
          "ValueError",
          "len"
        ],
        "_build_system_prompt": [
          "context_info.get"
        ],
        "_generate_mock_response": [
          "context_info.get",
          "message.lower",
          "len"
        ]
      },
      "dependencies": [
        "Any",
        "CopilotContextManager",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "asyncio",
        "context_orchestrator",
        "copilot",
        "datetime",
        "httpx",
        "json",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "bd8cf775-2671-4755-9b9e-ab11bd104f2d"
    },
    {
      "module_id": "src.llmstruct.api.services.cli_bridge",
      "path": "src/llmstruct/api/services/cli_bridge.py",
      "category": "core",
      "module_doc": "CLI Bridge Service\n\nProvides async integration between FastAPI and existing LLMStruct CLI functionality.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            29,
            33
          ],
          "parameters": [
            "self",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "_get_python_command",
          "docstring": "Determine the best Python command to use",
          "line_range": [
            35,
            40
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "scan_project",
          "docstring": "Execute project scan via CLI",
          "line_range": [
            42,
            87
          ],
          "parameters": [
            "self",
            "options"
          ],
          "decorators": []
        },
        {
          "name": "get_context",
          "docstring": "Get project context in specified mode",
          "line_range": [
            89,
            98
          ],
          "parameters": [
            "self",
            "mode",
            "include_files"
          ],
          "decorators": []
        },
        {
          "name": "get_project_info",
          "docstring": "Get basic project information",
          "line_range": [
            100,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON structure",
          "line_range": [
            106,
            110
          ],
          "parameters": [
            "self",
            "json_path"
          ],
          "decorators": []
        },
        {
          "name": "health_check",
          "docstring": "Check CLI health and availability",
          "line_range": [
            112,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_run_command",
          "docstring": "Run CLI command asynchronously",
          "line_range": [
            130,
            161
          ],
          "parameters": [
            "self",
            "cmd",
            "timeout"
          ],
          "decorators": []
        },
        {
          "name": "_parse_cli_output",
          "docstring": "Parse CLI JSON output",
          "line_range": [
            163,
            176
          ],
          "parameters": [
            "self",
            "output"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIBridgeError",
          "docstring": "CLI Bridge specific errors",
          "line_range": [
            21,
            23
          ],
          "methods": [],
          "bases": [
            "Exception"
          ]
        },
        {
          "name": "CLIBridge",
          "docstring": "Bridge between FastAPI and existing CLI functionality",
          "line_range": [
            26,
            176
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                29,
                33
              ],
              "parameters": [
                "self",
                "base_path"
              ]
            },
            {
              "name": "_get_python_command",
              "docstring": "Determine the best Python command to use",
              "line_range": [
                35,
                40
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "scan_project",
              "docstring": "Execute project scan via CLI",
              "line_range": [
                42,
                87
              ],
              "parameters": [
                "self",
                "options"
              ]
            },
            {
              "name": "get_context",
              "docstring": "Get project context in specified mode",
              "line_range": [
                89,
                98
              ],
              "parameters": [
                "self",
                "mode",
                "include_files"
              ]
            },
            {
              "name": "get_project_info",
              "docstring": "Get basic project information",
              "line_range": [
                100,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON structure",
              "line_range": [
                106,
                110
              ],
              "parameters": [
                "self",
                "json_path"
              ]
            },
            {
              "name": "health_check",
              "docstring": "Check CLI health and availability",
              "line_range": [
                112,
                128
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_run_command",
              "docstring": "Run CLI command asynchronously",
              "line_range": [
                130,
                161
              ],
              "parameters": [
                "self",
                "cmd",
                "timeout"
              ]
            },
            {
              "name": "_parse_cli_output",
              "docstring": "Parse CLI JSON output",
              "line_range": [
                163,
                176
              ],
              "parameters": [
                "self",
                "output"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._get_python_command",
          "Path.cwd"
        ],
        "_get_python_command": [
          "venv_python.exists",
          "str"
        ],
        "scan_project": [
          "os.close",
          "self._parse_cli_output",
          "cmd.extend",
          "cmd.append",
          "logger.error",
          "os.unlink",
          "open",
          "options.get",
          "tempfile.mkstemp",
          "json.load",
          "self._run_command"
        ],
        "get_context": [
          "self._parse_cli_output",
          "cmd.extend",
          "self._run_command"
        ],
        "get_project_info": [
          "self._parse_cli_output",
          "self._run_command"
        ],
        "validate_json": [
          "self._parse_cli_output",
          "self._run_command"
        ],
        "health_check": [
          "str",
          "self._run_command"
        ],
        "_run_command": [
          "asyncio.create_subprocess_exec",
          "asyncio.wait_for",
          "CLIBridgeError",
          "logger.error",
          "process.communicate",
          "logger.info",
          "stdout.decode",
          "stderr.decode",
          "str"
        ],
        "_parse_cli_output": [
          "output.strip",
          "json.loads"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asyncio",
        "config",
        "json",
        "logging",
        "os",
        "pathlib",
        "settings",
        "subprocess",
        "tempfile",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c9126d0b-2484-441d-99c6-7fb18531ed11"
    },
    {
      "module_id": "src.llmstruct.api.services.chat_session",
      "path": "src/llmstruct/api/services/chat_session.py",
      "category": "core",
      "module_doc": "Chat Session Manager\n\nManages persistent chat sessions and conversation history",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            19,
            24
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "add_message",
          "docstring": "Add a message to the session",
          "line_range": [
            26,
            36
          ],
          "parameters": [
            "self",
            "role",
            "content",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "get_messages",
          "docstring": "Get messages from session, optionally limited",
          "line_range": [
            38,
            42
          ],
          "parameters": [
            "self",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "get_context_string",
          "docstring": "Get recent messages as context string",
          "line_range": [
            44,
            54
          ],
          "parameters": [
            "self",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "to_dict",
          "docstring": "Convert session to dictionary",
          "line_range": [
            56,
            65
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            70,
            73
          ],
          "parameters": [
            "self",
            "storage_path"
          ],
          "decorators": []
        },
        {
          "name": "get_or_create_session",
          "docstring": "Get existing session or create new one",
          "line_range": [
            75,
            87
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "get_session",
          "docstring": "Get session by ID",
          "line_range": [
            89,
            101
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "add_message",
          "docstring": "Add message to session",
          "line_range": [
            103,
            109
          ],
          "parameters": [
            "self",
            "session_id",
            "role",
            "content",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "list_sessions",
          "docstring": "List all sessions with summary info",
          "line_range": [
            111,
            138
          ],
          "parameters": [
            "self",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "delete_session",
          "docstring": "Delete a session",
          "line_range": [
            140,
            152
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_load_session",
          "docstring": "Load session from storage",
          "line_range": [
            154,
            167
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_save_session",
          "docstring": "Save session to storage",
          "line_range": [
            169,
            178
          ],
          "parameters": [
            "self",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_sessions",
          "docstring": "Clean up sessions older than specified days",
          "line_range": [
            180,
            183
          ],
          "parameters": [
            "self",
            "days"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ChatSession",
          "docstring": "Represents a chat session with history",
          "line_range": [
            16,
            65
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                19,
                24
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "add_message",
              "docstring": "Add a message to the session",
              "line_range": [
                26,
                36
              ],
              "parameters": [
                "self",
                "role",
                "content",
                "metadata"
              ]
            },
            {
              "name": "get_messages",
              "docstring": "Get messages from session, optionally limited",
              "line_range": [
                38,
                42
              ],
              "parameters": [
                "self",
                "limit"
              ]
            },
            {
              "name": "get_context_string",
              "docstring": "Get recent messages as context string",
              "line_range": [
                44,
                54
              ],
              "parameters": [
                "self",
                "limit"
              ]
            },
            {
              "name": "to_dict",
              "docstring": "Convert session to dictionary",
              "line_range": [
                56,
                65
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "ChatSessionManager",
          "docstring": "Manages multiple chat sessions",
          "line_range": [
            67,
            183
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                70,
                73
              ],
              "parameters": [
                "self",
                "storage_path"
              ]
            },
            {
              "name": "get_or_create_session",
              "docstring": "Get existing session or create new one",
              "line_range": [
                75,
                87
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "get_session",
              "docstring": "Get session by ID",
              "line_range": [
                89,
                101
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "add_message",
              "docstring": "Add message to session",
              "line_range": [
                103,
                109
              ],
              "parameters": [
                "self",
                "session_id",
                "role",
                "content",
                "metadata"
              ]
            },
            {
              "name": "list_sessions",
              "docstring": "List all sessions with summary info",
              "line_range": [
                111,
                138
              ],
              "parameters": [
                "self",
                "limit"
              ]
            },
            {
              "name": "delete_session",
              "docstring": "Delete a session",
              "line_range": [
                140,
                152
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "_load_session",
              "docstring": "Load session from storage",
              "line_range": [
                154,
                167
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "_save_session",
              "docstring": "Save session to storage",
              "line_range": [
                169,
                178
              ],
              "parameters": [
                "self",
                "session"
              ]
            },
            {
              "name": "cleanup_old_sessions",
              "docstring": "Clean up sessions older than specified days",
              "line_range": [
                180,
                183
              ],
              "parameters": [
                "self",
                "days"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path.cwd"
        ],
        "add_message": [
          "self.get_or_create_session",
          "session.add_message",
          "self._save_session"
        ],
        "get_messages": [],
        "get_context_string": [
          "context_parts.append",
          "self.get_messages"
        ],
        "to_dict": [
          "len"
        ],
        "get_or_create_session": [
          "ChatSession",
          "session_file.exists",
          "self._load_session"
        ],
        "get_session": [
          "session_file.exists",
          "self._load_session"
        ],
        "list_sessions": [
          "logger.error",
          "self._load_session",
          "len",
          "sessions.append",
          "sessions.sort"
        ],
        "delete_session": [
          "session_file.unlink",
          "session_file.exists"
        ],
        "_load_session": [
          "data.get",
          "ChatSession",
          "json.load",
          "open"
        ],
        "_save_session": [
          "logger.error",
          "json.dump",
          "session.to_dict",
          "open"
        ],
        "cleanup_old_sessions": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asyncio",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "32d3f940-a2ab-49ee-b862-56566549d186"
    },
    {
      "module_id": "src.llmstruct.api.services.__init__",
      "path": "src/llmstruct/api/services/__init__.py",
      "category": "cli",
      "module_doc": "Services package for LLMStruct FastAPI\n\nContains business logic and integration services.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "ce85f224-855b-4353-b9a3-ca7d3abf6c62"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            15,
            89
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 include_dirs.",
          "line_range": [
            92,
            161
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs",
            "include_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 include_dirs.",
          "line_range": [
            164,
            233
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs",
            "include_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json_with_output_file",
          "docstring": "",
          "line_range": [
            236,
            261
          ],
          "parameters": [
            "root_dir",
            "output_file",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs",
            "include_ranges",
            "include_hashes",
            "goals"
          ],
          "decorators": []
        },
        {
          "name": "norm_dirname",
          "docstring": "",
          "line_range": [
            114,
            115
          ],
          "parameters": [
            "d"
          ],
          "decorators": []
        },
        {
          "name": "is_included_dir",
          "docstring": "",
          "line_range": [
            124,
            128
          ],
          "parameters": [
            "f"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "file_path.match",
          "p.endswith",
          "uuid.uuid4",
          "abs_dir_path.relative_to",
          "structure.append",
          "Path",
          "sorted",
          "set",
          "abs_dir_path.match",
          "os.walk",
          "p.rstrip",
          "any",
          "abs_dir_path.joinpath",
          "file_path.relative_to",
          "str"
        ],
        "build_toc_and_modules": [],
        "norm_dirname": [],
        "is_included_dir": [
          "norm_dirname",
          "any"
        ],
        "generate_json": [
          "uuid.uuid4",
          "get_folder_structure",
          "Path",
          "set",
          "sum",
          "list",
          "len",
          "build_toc_and_modules",
          "str"
        ],
        "generate_json_with_output_file": [
          "json.dump",
          "open",
          "generate_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "819e7637-22e2-454b-a3b5-f5b365893010"
    },
    {
      "module_id": "src.llmstruct.generators.go_json_generator",
      "path": "src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_go_folder_structure",
          "docstring": "Capture directory and file structure for Go projects with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            15,
            85
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_go_toc_and_modules",
          "docstring": "Build TOC and modules for Go projects with artifact_id and robust filtering.",
          "line_range": [
            88,
            143
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "extract_go_mod_info",
          "docstring": "Extract information from go.mod file.",
          "line_range": [
            146,
            182
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "generate_go_json",
          "docstring": "Generate JSON structure for Go project with artifact_id, summary, and tags.",
          "line_range": [
            185,
            259
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_go_folder_structure": [
          "file_path.match",
          "p.endswith",
          "uuid.uuid4",
          "structure.append",
          "Path",
          "sorted",
          "set",
          "os.walk",
          "p.rstrip",
          "any",
          "file_path.relative_to",
          "str"
        ],
        "build_go_toc_and_modules": [
          "p.endswith",
          "uuid.uuid4",
          "module.get",
          "Path",
          "toc.append",
          "modules.append",
          "set",
          "len",
          "analyze_module",
          "p.rstrip",
          "any",
          "f.match",
          "str"
        ],
        "extract_go_mod_info": [
          "content.strip",
          "logging.error",
          "Path",
          "line.startswith",
          "go_mod_path.exists",
          "line.strip",
          "open",
          "f.read",
          "len",
          "dependencies.append",
          "line.split"
        ],
        "generate_go_json": [
          "uuid.uuid4",
          "go_mod_info.get",
          "Path",
          "build_go_toc_and_modules",
          "get_go_folder_structure",
          "set",
          "sum",
          "m.get",
          "list",
          "len",
          "str",
          "extract_go_mod_info"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.go_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "bb669291-0814-4c76-a211-2e388bf7ace7"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "6016da0f-dd32-4341-8e40-9077130db7d8"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_core",
      "path": "src/llmstruct/ARCHIVE/cli_core.py",
      "category": "core",
      "module_doc": "Core CLI functionality and main loop.",
      "functions": [
        {
          "name": "create_cli_core",
          "docstring": "Factory function to create CLI core instance.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI core with root directory.",
          "line_range": [
            28,
            35
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_cache",
          "docstring": "Initialize cache if enabled in config.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_copilot",
          "docstring": "Initialize Copilot integration if enabled.",
          "line_range": [
            55,
            63
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive_mode",
          "docstring": "Run the interactive CLI mode.",
          "line_range": [
            65,
            97
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "Clean up resources.",
          "line_range": [
            99,
            107
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLICore",
          "docstring": "Core CLI class handling main loop and coordination.",
          "line_range": [
            25,
            107
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI core with root directory.",
              "line_range": [
                28,
                35
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "setup_cache",
              "docstring": "Initialize cache if enabled in config.",
              "line_range": [
                37,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_copilot",
              "docstring": "Initialize Copilot integration if enabled.",
              "line_range": [
                55,
                63
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_interactive_mode",
              "docstring": "Run the interactive CLI mode.",
              "line_range": [
                65,
                97
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources.",
              "line_range": [
                99,
                107
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CLIUtils",
          "CommandProcessor",
          "CLIConfig"
        ],
        "setup_cache": [
          "cache_path.mkdir",
          "logging.info",
          "logging.warning",
          "Path",
          "cache_config.get",
          "JSONCache",
          "str"
        ],
        "setup_copilot": [
          "initialize_copilot",
          "logging.info",
          "copilot_config.get",
          "logging.warning"
        ],
        "run_interactive_mode": [
          "user_input.lower",
          "user_input.startswith",
          "logging.error",
          "self.setup_cache",
          "self.setup_copilot",
          "input",
          "self.cleanup",
          "print"
        ],
        "cleanup": [
          "logging.info"
        ],
        "create_cli_core": [
          "CLICore"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "JSONCache",
        "Optional",
        "Path",
        "cli_commands",
        "cli_config",
        "cli_utils",
        "copilot",
        "initialize_copilot",
        "llmstruct.cache",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "3be7a613-384d-41d1-a6c6-4fa7924d2a66"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_config",
      "path": "src/llmstruct/ARCHIVE/cli_config.py",
      "category": "core",
      "module_doc": "CLI configuration management.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize configuration manager.",
          "line_range": [
            20,
            24
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from llmstruct.toml.",
          "line_range": [
            26,
            34
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "Get cache configuration section.",
          "line_range": [
            36,
            38
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "Get Copilot configuration section.",
          "line_range": [
            40,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "Get queue configuration section.",
          "line_range": [
            44,
            46
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "Get context configuration section.",
          "line_range": [
            48,
            50
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_gitignore_patterns",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            52,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "Get directories to exclude from scanning.",
          "line_range": [
            68,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "Get file patterns to include.",
          "line_range": [
            84,
            89
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "Get file patterns to exclude.",
          "line_range": [
            91,
            96
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "Get maximum file size for processing (in bytes).",
          "line_range": [
            98,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_auto_update_config",
          "docstring": "Get auto-update configuration.",
          "line_range": [
            102,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_auto_update_enabled",
          "docstring": "Check if auto-update is enabled.",
          "line_range": [
            106,
            108
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "Get path to struct.json file.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "Get path to context file.",
          "line_range": [
            114,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "Save current configuration to file.",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_config",
          "docstring": "Update configuration value.",
          "line_range": [
            126,
            131
          ],
          "parameters": [
            "self",
            "section",
            "key",
            "value"
          ],
          "decorators": []
        },
        {
          "name": "reload_config",
          "docstring": "Reload configuration from file.",
          "line_range": [
            133,
            135
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIConfig",
          "docstring": "Manages CLI configuration from llmstruct.toml and other sources.",
          "line_range": [
            17,
            135
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize configuration manager.",
              "line_range": [
                20,
                24
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from llmstruct.toml.",
              "line_range": [
                26,
                34
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cache_config",
              "docstring": "Get cache configuration section.",
              "line_range": [
                36,
                38
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_copilot_config",
              "docstring": "Get Copilot configuration section.",
              "line_range": [
                40,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_queue_config",
              "docstring": "Get queue configuration section.",
              "line_range": [
                44,
                46
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_config",
              "docstring": "Get context configuration section.",
              "line_range": [
                48,
                50
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_gitignore_patterns",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": [
                52,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "Get directories to exclude from scanning.",
              "line_range": [
                68,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_include_patterns",
              "docstring": "Get file patterns to include.",
              "line_range": [
                84,
                89
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "Get file patterns to exclude.",
              "line_range": [
                91,
                96
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_max_file_size",
              "docstring": "Get maximum file size for processing (in bytes).",
              "line_range": [
                98,
                100
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_auto_update_config",
              "docstring": "Get auto-update configuration.",
              "line_range": [
                102,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_auto_update_enabled",
              "docstring": "Check if auto-update is enabled.",
              "line_range": [
                106,
                108
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_struct_file_path",
              "docstring": "Get path to struct.json file.",
              "line_range": [
                110,
                112
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_file_path",
              "docstring": "Get path to context file.",
              "line_range": [
                114,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_config",
              "docstring": "Save current configuration to file.",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_config",
              "docstring": "Update configuration value.",
              "line_range": [
                126,
                131
              ],
              "parameters": [
                "self",
                "section",
                "key",
                "value"
              ]
            },
            {
              "name": "reload_config",
              "docstring": "Reload configuration from file.",
              "line_range": [
                133,
                135
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config"
        ],
        "_load_config": [
          "logging.error",
          "toml.load"
        ],
        "get_cache_config": [],
        "get_copilot_config": [],
        "get_queue_config": [],
        "get_context_config": [],
        "get_gitignore_patterns": [
          "logging.error",
          "gitignore_path.open",
          "Path",
          "line.startswith",
          "line.strip",
          "gitignore_path.exists"
        ],
        "get_exclude_dirs": [
          "parsing_config.get",
          "cli_config.get",
          "set",
          "list"
        ],
        "get_include_patterns": [
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_exclude_patterns": [
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_max_file_size": [],
        "get_auto_update_config": [],
        "is_auto_update_enabled": [
          "self.get_auto_update_config"
        ],
        "get_struct_file_path": [],
        "get_context_file_path": [],
        "save_config": [
          "toml.dump",
          "logging.error"
        ],
        "update_config": [
          "self.save_config"
        ],
        "reload_config": [
          "self._load_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "logging",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "fa4c3453-fa3c-4a27-8db1-a0a14e42f58f"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_argument_parser",
      "path": "src/llmstruct/ARCHIVE/cli_argument_parser.py",
      "category": "core",
      "module_doc": "CLI argument parsing for LLMStruct.",
      "functions": [
        {
          "name": "create_argument_parser",
          "docstring": "Create and configure the main argument parser.",
          "line_range": [
            14,
            113
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "add_api_bot_commands",
          "docstring": "Add API and bot management commands to the parser.",
          "line_range": [
            116,
            126
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        },
        {
          "name": "create_full_argument_parser",
          "docstring": "Create the full argument parser with all commands.",
          "line_range": [
            129,
            137
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "create_argument_parser": [
          "parser.add_subparsers",
          "parse_parser.add_argument",
          "audit_parser.add_argument",
          "subparsers.add_parser",
          "dogfood_parser.add_argument",
          "argparse.ArgumentParser",
          "query_parser.add_argument",
          "interactive_parser.add_argument",
          "context_parser.add_argument",
          "review_parser.add_argument",
          "copilot_parser.add_argument",
          "duplicates_parser.add_argument"
        ],
        "add_api_bot_commands": [
          "add_bot_commands",
          "add_api_commands"
        ],
        "create_full_argument_parser": [
          "add_api_bot_commands",
          "create_argument_parser"
        ]
      },
      "dependencies": [
        "Path",
        "add_api_commands",
        "add_bot_commands",
        "api_commands",
        "argparse",
        "bot_commands",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "fd8b0960-73fe-45be-b3a3-f1a09604932b"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_main_commands",
      "path": "src/llmstruct/ARCHIVE/cli_main_commands.py",
      "category": "core",
      "module_doc": "Main CLI command handlers for LLMStruct.",
      "functions": [
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            33,
            68
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            71,
            127
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            130,
            136
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            139,
            146
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            149,
            175
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "basic_interactive_processing",
          "docstring": "Basic interactive processing without enhanced features.",
          "line_range": [
            178,
            230
          ],
          "parameters": [
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            233,
            235
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            238,
            240
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            243,
            245
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            248,
            366
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": [
            369,
            387
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": [
            390,
            495
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse": [
          "logging.info",
          "logging.error",
          "cache.close",
          "JSONCache",
          "load_gitignore",
          "attach_to_llm_request",
          "generate_json"
        ],
        "query": [
          "orchestrator.get_context_for_scenario",
          "logging.info",
          "logging.error",
          "logging.warning",
          "cache.close",
          "Path",
          "json.dump",
          "JSONCache",
          "hasattr",
          "LLMClient",
          "client.query_with_context",
          "create_context_orchestrator",
          "client.query"
        ],
        "interactive": [
          "interactive_legacy",
          "interactive_modular",
          "logging.warning"
        ],
        "interactive_modular": [
          "cli_core.run_interactive_mode",
          "interactive_legacy",
          "create_cli_core",
          "logging.error"
        ],
        "interactive_legacy": [
          "process_cli_queue_enhanced",
          "logging.error",
          "cache.close",
          "Path",
          "JSONCache",
          "basic_interactive_processing",
          "LLMClient",
          "print"
        ],
        "basic_interactive_processing": [
          "user_input.lower",
          "user_input.startswith",
          "input",
          "f.read",
          "open",
          "print",
          "client.query"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "copilot": [
          "smart_suggest",
          "hasattr",
          "open",
          "f.write",
          "manager.load_context_layer",
          "initialize_copilot",
          "logging.error",
          "manager.refresh_all_contexts",
          "manager.export_context",
          "shutil.copy",
          "print",
          "getattr",
          "layers.split",
          "enumerate",
          "manager.validate_change",
          "logging.info",
          "template_path.exists",
          "manager.get_context_status",
          "Path",
          "manager.unload_context_layer",
          "manager.close",
          "config_path.exists"
        ],
        "audit": [
          "Path",
          "analyze_duplicates",
          "file_path.exists",
          "hasattr",
          "print"
        ],
        "analyze_duplicates": [
          "logging.error",
          "getattr",
          "func.get",
          "analysis.get",
          "WorkflowOrchestrator",
          "orchestrator.analyze_codebase_for_duplicates",
          "open",
          "len",
          "json.dump",
          "print",
          "json.dumps",
          "f.get"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Optional",
        "Path",
        "WorkflowOrchestrator",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "cli",
        "cli_core",
        "context_orchestrator",
        "copilot",
        "create_cli_core",
        "create_context_orchestrator",
        "generate_json",
        "initialize_copilot",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "process_cli_queue_enhanced",
        "shutil",
        "smart_suggest",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": null,
      "artifact_id": "9aab6aa5-b677-4526-863f-bf54e307cc44"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_utils",
      "path": "src/llmstruct/ARCHIVE/cli_utils.py",
      "category": "core",
      "module_doc": "CLI utility functions.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize utils with root directory.",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read file content with size limit.",
          "line_range": [
            28,
            50
          ],
          "parameters": [
            "self",
            "file_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "write_file_content",
          "docstring": "Write content to file.",
          "line_range": [
            52,
            70
          ],
          "parameters": [
            "self",
            "file_path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "get_directory_structure",
          "docstring": "Get directory structure using folder generator.",
          "line_range": [
            72,
            115
          ],
          "parameters": [
            "self",
            "path",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON content.",
          "line_range": [
            117,
            123
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "format_json",
          "docstring": "Format data as JSON string.",
          "line_range": [
            125,
            131
          ],
          "parameters": [
            "self",
            "data",
            "indent"
          ],
          "decorators": []
        },
        {
          "name": "generate_unique_id",
          "docstring": "Generate unique ID for commands, queues, etc.",
          "line_range": [
            133,
            137
          ],
          "parameters": [
            "self",
            "prefix"
          ],
          "decorators": []
        },
        {
          "name": "safe_path_join",
          "docstring": "Safely join path parts, preventing directory traversal.",
          "line_range": [
            139,
            149
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_exists",
          "docstring": "Check if file exists.",
          "line_range": [
            151,
            157
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "dir_exists",
          "docstring": "Check if directory exists.",
          "line_range": [
            159,
            165
          ],
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_size",
          "docstring": "Get file size in bytes.",
          "line_range": [
            167,
            173
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_file",
          "docstring": "Create backup of file with timestamp.",
          "line_range": [
            175,
            191
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_backups",
          "docstring": "Clean up old backup files, keeping only the most recent ones.",
          "line_range": [
            193,
            222
          ],
          "parameters": [
            "self",
            "file_path",
            "keep_count"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIUtils",
          "docstring": "Utility functions for CLI operations.",
          "line_range": [
            21,
            222
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize utils with root directory.",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "read_file_content",
              "docstring": "Read file content with size limit.",
              "line_range": [
                28,
                50
              ],
              "parameters": [
                "self",
                "file_path",
                "max_size"
              ]
            },
            {
              "name": "write_file_content",
              "docstring": "Write content to file.",
              "line_range": [
                52,
                70
              ],
              "parameters": [
                "self",
                "file_path",
                "content"
              ]
            },
            {
              "name": "get_directory_structure",
              "docstring": "Get directory structure using folder generator.",
              "line_range": [
                72,
                115
              ],
              "parameters": [
                "self",
                "path",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ]
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON content.",
              "line_range": [
                117,
                123
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "format_json",
              "docstring": "Format data as JSON string.",
              "line_range": [
                125,
                131
              ],
              "parameters": [
                "self",
                "data",
                "indent"
              ]
            },
            {
              "name": "generate_unique_id",
              "docstring": "Generate unique ID for commands, queues, etc.",
              "line_range": [
                133,
                137
              ],
              "parameters": [
                "self",
                "prefix"
              ]
            },
            {
              "name": "safe_path_join",
              "docstring": "Safely join path parts, preventing directory traversal.",
              "line_range": [
                139,
                149
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_exists",
              "docstring": "Check if file exists.",
              "line_range": [
                151,
                157
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "dir_exists",
              "docstring": "Check if directory exists.",
              "line_range": [
                159,
                165
              ],
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "get_file_size",
              "docstring": "Get file size in bytes.",
              "line_range": [
                167,
                173
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "backup_file",
              "docstring": "Create backup of file with timestamp.",
              "line_range": [
                175,
                191
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "cleanup_old_backups",
              "docstring": "Clean up old backup files, keeping only the most recent ones.",
              "line_range": [
                193,
                222
              ],
              "parameters": [
                "self",
                "file_path",
                "keep_count"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "read_file_content": [
          "logging.error",
          "os.stat",
          "logging.warning",
          "f.read",
          "open"
        ],
        "write_file_content": [
          "logging.info",
          "logging.error",
          "Path",
          "open",
          "f.write"
        ],
        "get_directory_structure": [
          "logging.error",
          "sorted",
          "os.listdir",
          "get_folder_structure"
        ],
        "validate_json": [
          "json.loads",
          "str"
        ],
        "format_json": [
          "logging.error",
          "json.dumps",
          "str"
        ],
        "generate_unique_id": [
          "time.time",
          "uuid.uuid4",
          "int",
          "str"
        ],
        "safe_path_join": [
          "ValueError",
          "resolved_path.startswith"
        ],
        "file_exists": [
          "self.safe_path_join"
        ],
        "dir_exists": [
          "self.safe_path_join"
        ],
        "get_file_size": [
          "self.safe_path_join"
        ],
        "backup_file": [
          "int",
          "logging.error",
          "time.time",
          "self.safe_path_join",
          "src.read",
          "open",
          "dst.write"
        ],
        "cleanup_old_backups": [
          "os.remove",
          "int",
          "backups.append",
          "logging.info",
          "backups.sort",
          "logging.warning",
          "logging.error",
          "filename.startswith",
          "self.safe_path_join",
          "filename.split",
          "os.listdir"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "15606e16-99b3-4f3d-b392-dd53894143d3"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_commands",
      "path": "src/llmstruct/ARCHIVE/cli_commands.py",
      "category": "core",
      "module_doc": "CLI command processing and handlers.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize command processor.",
          "line_range": [
            33,
            72
          ],
          "parameters": [
            "self",
            "root_dir",
            "config",
            "utils"
          ],
          "decorators": []
        },
        {
          "name": "set_cache",
          "docstring": "Set cache instance.",
          "line_range": [
            74,
            76
          ],
          "parameters": [
            "self",
            "cache"
          ],
          "decorators": []
        },
        {
          "name": "set_copilot",
          "docstring": "Set Copilot manager instance.",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "self",
            "copilot_manager"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "Process a command starting with /.",
          "line_range": [
            82,
            98
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "process_prompt",
          "docstring": "Process a regular user prompt (not a command).",
          "line_range": [
            100,
            152
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Show help information.",
          "line_range": [
            154,
            217
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace",
          "docstring": "Handle workspace state and permissions management.",
          "line_range": [
            219,
            334
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_mode",
          "docstring": "Handle context mode operations with workspace integration.",
          "line_range": [
            336,
            437
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_view",
          "docstring": "View file or directory contents.",
          "line_range": [
            439,
            478
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_write",
          "docstring": "Write content to a file.",
          "line_range": [
            480,
            505
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_queue",
          "docstring": "Handle queue operations.",
          "line_range": [
            507,
            549
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_cache",
          "docstring": "Handle cache operations.",
          "line_range": [
            551,
            590
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_copilot",
          "docstring": "Handle Copilot operations.",
          "line_range": [
            592,
            626
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_config",
          "docstring": "Handle configuration operations.",
          "line_range": [
            628,
            660
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Show system status.",
          "line_range": [
            662,
            676
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_backup",
          "docstring": "Create backup of a file.",
          "line_range": [
            678,
            693
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_parse",
          "docstring": "Parse project structure.",
          "line_range": [
            695,
            715
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_audit",
          "docstring": "Handle audit operations.",
          "line_range": [
            717,
            743
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_auto_update",
          "docstring": "Handle auto-update operations.",
          "line_range": [
            745,
            765
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_struct_status",
          "docstring": "Handle struct status operations.",
          "line_range": [
            767,
            791
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context",
          "docstring": "Handle context operations.",
          "line_range": [
            793,
            849
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_session",
          "docstring": "Handle session operations.",
          "line_range": [
            851,
            902
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CommandProcessor",
          "docstring": "Processes CLI commands and user prompts.",
          "line_range": [
            30,
            902
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize command processor.",
              "line_range": [
                33,
                72
              ],
              "parameters": [
                "self",
                "root_dir",
                "config",
                "utils"
              ]
            },
            {
              "name": "set_cache",
              "docstring": "Set cache instance.",
              "line_range": [
                74,
                76
              ],
              "parameters": [
                "self",
                "cache"
              ]
            },
            {
              "name": "set_copilot",
              "docstring": "Set Copilot manager instance.",
              "line_range": [
                78,
                80
              ],
              "parameters": [
                "self",
                "copilot_manager"
              ]
            },
            {
              "name": "process_command",
              "docstring": "Process a command starting with /.",
              "line_range": [
                82,
                98
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "process_prompt",
              "docstring": "Process a regular user prompt (not a command).",
              "line_range": [
                100,
                152
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Show help information.",
              "line_range": [
                154,
                217
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace",
              "docstring": "Handle workspace state and permissions management.",
              "line_range": [
                219,
                334
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_mode",
              "docstring": "Handle context mode operations with workspace integration.",
              "line_range": [
                336,
                437
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_view",
              "docstring": "View file or directory contents.",
              "line_range": [
                439,
                478
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_write",
              "docstring": "Write content to a file.",
              "line_range": [
                480,
                505
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_queue",
              "docstring": "Handle queue operations.",
              "line_range": [
                507,
                549
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_cache",
              "docstring": "Handle cache operations.",
              "line_range": [
                551,
                590
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_copilot",
              "docstring": "Handle Copilot operations.",
              "line_range": [
                592,
                626
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_config",
              "docstring": "Handle configuration operations.",
              "line_range": [
                628,
                660
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Show system status.",
              "line_range": [
                662,
                676
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_backup",
              "docstring": "Create backup of a file.",
              "line_range": [
                678,
                693
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_parse",
              "docstring": "Parse project structure.",
              "line_range": [
                695,
                715
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_audit",
              "docstring": "Handle audit operations.",
              "line_range": [
                717,
                743
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_auto_update",
              "docstring": "Handle auto-update operations.",
              "line_range": [
                745,
                765
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_struct_status",
              "docstring": "Handle struct status operations.",
              "line_range": [
                767,
                791
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context",
              "docstring": "Handle context operations.",
              "line_range": [
                793,
                849
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_session",
              "docstring": "Handle session operations.",
              "line_range": [
                851,
                902
              ],
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "print",
          "WorkspaceStateManager"
        ],
        "set_cache": [],
        "set_copilot": [],
        "process_command": [
          "command_line.strip",
          "command_line.split",
          "logging.error",
          "len",
          "print"
        ],
        "process_prompt": [
          "context_info.get",
          "CopilotEvent",
          "logging.info",
          "logging.error",
          "logging.warning",
          "context_data.get",
          "get_optimized_context",
          "prompt.strip",
          "len",
          "print"
        ],
        "cmd_help": [
          "print"
        ],
        "cmd_workspace": [
          "entry.get",
          "int",
          "logging.error",
          "permissions.get",
          "result.get",
          "state.get",
          "args.strip",
          "action_args.split",
          "len",
          "override.get",
          "print",
          "boundaries.get"
        ],
        "cmd_mode": [
          "args.upper",
          "permissions.get",
          "metrics.get",
          "context_data.get",
          "result.get",
          "len",
          "args.strip",
          "get_optimized_context",
          "args.lower",
          "re.findall",
          "print"
        ],
        "cmd_view": [
          "args.strip",
          "os.listdir",
          "print",
          "sorted"
        ],
        "cmd_write": [
          "content.startswith",
          "args.split",
          "content.endswith",
          "len",
          "print"
        ],
        "cmd_queue": [
          "os.remove",
          "queue_data.get",
          "cmd.get",
          "print",
          "args.strip",
          "enumerate",
          "open",
          "len",
          "json.load"
        ],
        "cmd_cache": [
          "args.strip",
          "len",
          "stats.get",
          "os.listdir",
          "print"
        ],
        "cmd_copilot": [
          "print",
          "args.strip",
          "open",
          "json.load",
          "json.dumps"
        ],
        "cmd_config": [
          "args.strip",
          "print",
          "json.dumps"
        ],
        "cmd_status": [
          "print"
        ],
        "cmd_backup": [
          "args.strip",
          "print"
        ],
        "cmd_parse": [
          "print",
          "generate_json"
        ],
        "cmd_audit": [
          "args.strip",
          "print"
        ],
        "handle_auto_update": [
          "print",
          "generate_json"
        ],
        "handle_struct_status": [
          "os.stat",
          "datetime.fromtimestamp",
          "print",
          "open",
          "len",
          "json.load",
          "struct_data.get"
        ],
        "cmd_context": [
          "metrics.get",
          "context_data.get",
          "args.strip",
          "get_optimized_context",
          "len",
          "print"
        ],
        "cmd_session": [
          "state.get",
          "args.strip",
          "len",
          "datetime.now",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CopilotContextManager",
        "CopilotEvent",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "WorkspaceStateManager",
        "cli_config",
        "cli_utils",
        "copilot",
        "create_context_orchestrator",
        "datetime",
        "generate_json",
        "get_optimized_context",
        "get_optimized_context_for_scenario",
        "initialize_copilot",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "sys",
        "trigger_copilot_event",
        "typing",
        "workspace"
      ],
      "hash": null,
      "artifact_id": "6fd54d7c-d9e5-4088-adea-f4677c73eff4"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": [
            12,
            40
          ],
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": [
            43,
            61
          ],
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "schema_file.exists",
          "logging.error",
          "logging.info",
          "Path",
          "json_file.exists",
          "open",
          "validate",
          "json.load",
          "str"
        ],
        "validate_directory": [
          "Path",
          "json_file.match",
          "any",
          "validate_struct_json",
          "str"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "e030a3e4-b5b2-4d83-aeff-87aef233c37d"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "34065bdf-ac1f-4b8f-a161-ce485f04651c"
    },
    {
      "module_id": "src.llmstruct.parsers.universal_converter",
      "path": "src/llmstruct/parsers/universal_converter.py",
      "category": "core",
      "module_doc": "Universal Code Converter - Orchestrates all language parsers\nConverts any codebase to llmstruct JSON format",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for universal converter",
          "line_range": [
            375,
            428
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            55,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            79,
            82
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "detect_language",
          "docstring": "Detect programming language from file extension",
          "line_range": [
            84,
            92
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "detect_project_languages",
          "docstring": "Detect all languages in project and count files",
          "line_range": [
            94,
            109
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "get_project_files",
          "docstring": "Get all relevant files for conversion",
          "line_range": [
            111,
            138
          ],
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_python_project",
          "docstring": "Convert Python project to llmstruct format",
          "line_range": [
            140,
            171
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_go_project",
          "docstring": "Convert Go project to llmstruct format",
          "line_range": [
            173,
            190
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_javascript_project",
          "docstring": "Convert JavaScript project to llmstruct format",
          "line_range": [
            192,
            223
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_project",
          "docstring": "Convert any project to llmstruct format",
          "line_range": [
            225,
            250
          ],
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_multi_language_project",
          "docstring": "Convert multi-language project with separate sections per language",
          "line_range": [
            252,
            282
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_build_project_structure",
          "docstring": "Build standard llmstruct project structure",
          "line_range": [
            284,
            312
          ],
          "parameters": [
            "self",
            "language",
            "project_path",
            "modules",
            "toc"
          ],
          "decorators": []
        },
        {
          "name": "_build_empty_project_structure",
          "docstring": "Build empty structure when conversion fails",
          "line_range": [
            314,
            329
          ],
          "parameters": [
            "self",
            "language",
            "project_path",
            "error"
          ],
          "decorators": []
        },
        {
          "name": "_merge_language_results",
          "docstring": "Merge multiple language results into unified structure",
          "line_range": [
            331,
            372
          ],
          "parameters": [
            "self",
            "project_path",
            "language_results"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Language",
          "docstring": "",
          "line_range": [
            33,
            42
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ConverterConfig",
          "docstring": "Configuration for universal converter",
          "line_range": [
            46,
            62
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                55,
                62
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "UniversalConverter",
          "docstring": "Universal code converter for any programming language",
          "line_range": [
            65,
            372
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                79,
                82
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "detect_language",
              "docstring": "Detect programming language from file extension",
              "line_range": [
                84,
                92
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "detect_project_languages",
              "docstring": "Detect all languages in project and count files",
              "line_range": [
                94,
                109
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "get_project_files",
              "docstring": "Get all relevant files for conversion",
              "line_range": [
                111,
                138
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_python_project",
              "docstring": "Convert Python project to llmstruct format",
              "line_range": [
                140,
                171
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_go_project",
              "docstring": "Convert Go project to llmstruct format",
              "line_range": [
                173,
                190
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_javascript_project",
              "docstring": "Convert JavaScript project to llmstruct format",
              "line_range": [
                192,
                223
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_project",
              "docstring": "Convert any project to llmstruct format",
              "line_range": [
                225,
                250
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_multi_language_project",
              "docstring": "Convert multi-language project with separate sections per language",
              "line_range": [
                252,
                282
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_build_project_structure",
              "docstring": "Build standard llmstruct project structure",
              "line_range": [
                284,
                312
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "modules",
                "toc"
              ]
            },
            {
              "name": "_build_empty_project_structure",
              "docstring": "Build empty structure when conversion fails",
              "line_range": [
                314,
                329
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "error"
              ]
            },
            {
              "name": "_merge_language_results",
              "docstring": "Merge multiple language results into unified structure",
              "line_range": [
                331,
                372
              ],
              "parameters": [
                "self",
                "project_path",
                "language_results"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "JavaScriptParser",
          "GoAnalyzer",
          "ConverterConfig"
        ],
        "detect_language": [
          "Path"
        ],
        "detect_project_languages": [
          "self.detect_language",
          "os.walk",
          "languages.get",
          "any"
        ],
        "get_project_files": [
          "self.detect_language",
          "os.walk",
          "files.append",
          "any"
        ],
        "convert_python_project": [
          "self.get_project_files",
          "self._build_project_structure",
          "module_data.get",
          "toc.append",
          "len",
          "logger.info",
          "analyze_python",
          "modules.append",
          "logger.warning"
        ],
        "convert_go_project": [
          "self._build_empty_project_structure",
          "logger.error",
          "logger.info",
          "convert_to_llmstruct_format",
          "str"
        ],
        "convert_javascript_project": [
          "self.get_project_files",
          "self._build_project_structure",
          "module_data.get",
          "toc.append",
          "logger.info",
          "len",
          "modules.append",
          "logger.warning"
        ],
        "convert_project": [
          "self.convert_python_project",
          "self.convert_go_project",
          "self.convert_javascript_project",
          "languages.keys",
          "NotImplementedError",
          "logger.info",
          "max",
          "ValueError",
          "self.detect_project_languages"
        ],
        "convert_multi_language_project": [
          "self.convert_python_project",
          "self.convert_go_project",
          "self._merge_language_results",
          "self.convert_javascript_project",
          "languages.keys",
          "logger.error",
          "logger.info",
          "ValueError",
          "self.detect_project_languages",
          "logger.warning"
        ],
        "_build_project_structure": [
          "sum",
          "m.get",
          "language.title",
          "len"
        ],
        "_build_empty_project_structure": [],
        "_merge_language_results": [
          "result.get",
          "list",
          "all_modules.append",
          "stats.get",
          "language_results.items",
          "language_results.keys",
          "all_toc.append"
        ],
        "main": [
          "exit",
          "parser.add_argument",
          "parser.parse_args",
          "converter.convert_project",
          "result.get",
          "logger.error",
          "argparse.ArgumentParser",
          "UniversalConverter",
          "json.dumps",
          "open",
          "ConverterConfig",
          "f.write",
          "Language",
          "stats.get",
          "print",
          "traceback.print_exc",
          "converter.convert_multi_language_project"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "GoAnalyzer",
        "JavaScriptParser",
        "List",
        "Optional",
        "Path",
        "Union",
        "analyze_module",
        "argparse",
        "convert_to_llmstruct_format",
        "dataclass",
        "dataclasses",
        "enum",
        "go_analyzer",
        "javascript_parser",
        "json",
        "logging",
        "os",
        "pathlib",
        "python_parser",
        "sys",
        "traceback",
        "typing"
      ],
      "hash": null,
      "artifact_id": "09457030-8f39-47ba-b794-833a9786edb7"
    },
    {
      "module_id": "src.llmstruct.parsers.go_analyzer",
      "path": "src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "module_doc": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b: go/packages, go/analysis",
      "functions": [
        {
          "name": "convert_to_llmstruct_format",
          "docstring": "\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 llmstruct",
          "line_range": [
            203,
            337
          ],
          "parameters": [
            "analysis",
            "include_ranges",
            "goals"
          ],
          "decorators": []
        },
        {
          "name": "_compute_file_hash",
          "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 SHA-256 \u0445\u044d\u0448 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            339,
            345
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            347,
            402
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_setup_analyzer",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
          "line_range": [
            28,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cleanup",
          "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
          "line_range": [
            68,
            72
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_project",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            74,
            125
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_fallback_analysis",
          "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            127,
            201
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GoAnalyzer",
          "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 Go \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432",
          "line_range": [
            21,
            201
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_setup_analyzer",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
              "line_range": [
                28,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cleanup",
              "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
              "line_range": [
                68,
                72
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_project",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
              "line_range": [
                74,
                125
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_fallback_analysis",
              "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                127,
                201
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "_setup_analyzer": [
          "tempfile.mkdtemp",
          "analyzer_file.write_text",
          "subprocess.run",
          "logging.warning",
          "analyzer_source.read_text",
          "Path",
          "str"
        ],
        "_cleanup": [
          "shutil.rmtree",
          "Path"
        ],
        "analyze_project": [
          "self._setup_analyzer",
          "subprocess.run",
          "logging.info",
          "logging.error",
          "logging.warning",
          "self._fallback_analysis",
          "self._cleanup",
          "json.loads"
        ],
        "_fallback_analysis": [
          "file_path.read_text",
          "logging.info",
          "go_mod_path.read_text",
          "logging.warning",
          "sorted",
          "Path",
          "line.startswith",
          "set",
          "len",
          "packages.add",
          "go_mod_path.exists",
          "content.split",
          "line.strip",
          "list",
          "file_path.relative_to",
          "line.split",
          "str"
        ],
        "convert_to_llmstruct_format": [
          "path.replace",
          "_compute_file_hash",
          "fn.get",
          "uuid.uuid4",
          "module.get",
          "struct.get",
          "file_data.get",
          "toc.append",
          "classes.append",
          "analysis.get",
          "path.endswith",
          "sum",
          "iface.get",
          "len",
          "modules.append",
          "functions.append",
          "str"
        ],
        "_compute_file_hash": [
          "hashlib.sha256",
          "open",
          "f.read"
        ],
        "main": [
          "parser.add_argument",
          "stats.get",
          "Path",
          "sys.exit",
          "parser.parse_args",
          "analyzer.analyze_project",
          "result.get",
          "argparse.ArgumentParser",
          "open",
          "len",
          "f.write",
          "convert_to_llmstruct_format",
          "print",
          "traceback.print_exc",
          "json.dumps",
          "GoAnalyzer"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "subprocess",
        "sys",
        "tempfile",
        "traceback",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "c44e7186-ce72-44e0-8058-80915e10a038"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            9,
            13
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": [
            15,
            20
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": [
            22,
            41
          ],
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": [
            43,
            124
          ],
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": [
            8,
            124
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                9,
                13
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": [
                15,
                20
              ],
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": [
                22,
                41
              ],
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": [
                43,
                124
              ],
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "hashlib.sha256",
          "open",
          "f.read"
        ],
        "compute_file_metadata": [
          "sum",
          "open",
          "os.stat",
          "self.file_hash"
        ],
        "parse_module": [
          "esprima.parseModule",
          "open",
          "f.read",
          "self.compute_file_metadata",
          "str"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "03de4f39-da65-4a0a-8e36-e3c739fa4672"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": [
            13,
            20
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content.",
          "line_range": [
            72,
            79
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data.",
          "line_range": [
            82,
            154
          ],
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            26,
            29
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": [
            31,
            35
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": [
            37,
            43
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": [
            45,
            50
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": [
            52,
            57
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": [
            59,
            69
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": [
            23,
            69
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                29
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": [
                37,
                43
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": [
                45,
                50
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": [
                52,
                57
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": [
                59,
                69
              ],
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_AsyncFunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "compute_file_hash": [
          "logging.error",
          "hashlib.sha256",
          "open",
          "f.read"
        ],
        "analyze_module": [
          "logging.error",
          "sorted",
          "Path",
          "visitor.visit",
          "ast.unparse",
          "classes.append",
          "ast.get_docstring",
          "CallVisitor",
          "infer_category",
          "compute_file_hash",
          "open",
          "f.read",
          "ast.walk",
          "isinstance",
          "list",
          "functions.append",
          "ast.parse",
          "str"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "a6b5e9b0-6e1e-45ff-bda3-f22f9904235b"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "javascript_parser"
      ],
      "hash": null,
      "artifact_id": "8b890f4c-1225-4291-ae12-22f1744ecb4a"
    },
    {
      "module_id": ".private.log_insight",
      "path": ".private/log_insight.py",
      "category": "core",
      "module_doc": "Quick insight logging helper for workflow optimization\nUsage: python .private/log_insight.py \"category\" \"type\" \"insight text\"",
      "functions": [
        {
          "name": "log_insight",
          "docstring": "Log a workflow insight to the JSON file",
          "line_range": [
            12,
            53
          ],
          "parameters": [
            "category",
            "insight_type",
            "insight_text",
            "context",
            "solution",
            "improvement"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "log_insight": [
          "Path",
          "print",
          "insights_file.exists",
          "open",
          "datetime.now",
          "json.dump",
          "json.load"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "9baa1adb-3d27-4429-b176-af8288428d9a"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": [
            6,
            8
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": [
            11,
            13
          ],
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "db228285-791c-48b7-b86f-e225df7fbde6"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": [
            6,
            9
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": [
            15,
            17
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": [
            12,
            17
          ],
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": [
                15,
                17
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "utils.helper",
          "print"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": null,
      "artifact_id": "41765a21-e9da-4d43-bf8a-7aaaaddd45fb"
    },
    {
      "module_id": "examples.telegram_bot.bot",
      "path": "examples/telegram_bot/bot.py",
      "category": "core",
      "module_doc": "Telegram Bot for LLMStruct Integration\n\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0432 tmp \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438\n\u0421 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u0438 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0422\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430",
          "line_range": [
            310,
            335
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            21,
            37
          ],
          "parameters": [
            "self",
            "bot_token",
            "api_base"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
          "line_range": [
            39,
            55
          ],
          "parameters": [
            "self",
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "get_updates",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0442 Telegram",
          "line_range": [
            57,
            72
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "execute_command",
          "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e",
          "line_range": [
            74,
            101
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_llm",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 LLM \u0447\u0435\u0440\u0435\u0437 \u043d\u0430\u0448 API \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            103,
            141
          ],
          "parameters": [
            "self",
            "message",
            "context_mode",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u044c\u044e",
          "line_range": [
            143,
            281
          ],
          "parameters": [
            "self",
            "update"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0446\u0438\u043a\u043b \u0431\u043e\u0442\u0430",
          "line_range": [
            283,
            308
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMStructTelegramBot",
          "docstring": "",
          "line_range": [
            20,
            308
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                21,
                37
              ],
              "parameters": [
                "self",
                "bot_token",
                "api_base"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
              "line_range": [
                39,
                55
              ],
              "parameters": [
                "self",
                "chat_id",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "get_updates",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0442 Telegram",
              "line_range": [
                57,
                72
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "execute_command",
              "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e",
              "line_range": [
                74,
                101
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "chat_with_llm",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 LLM \u0447\u0435\u0440\u0435\u0437 \u043d\u0430\u0448 API \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043f\u0430\u043c\u044f\u0442\u0438",
              "line_range": [
                103,
                141
              ],
              "parameters": [
                "self",
                "message",
                "context_mode",
                "session"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u044c\u044e",
              "line_range": [
                143,
                281
              ],
              "parameters": [
                "self",
                "update"
              ]
            },
            {
              "name": "run",
              "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0446\u0438\u043a\u043b \u0431\u043e\u0442\u0430",
              "line_range": [
                283,
                308
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logging.basicConfig",
          "logging.getLogger",
          "TelegramMemoryManager"
        ],
        "send_message": [
          "client.post",
          "httpx.AsyncClient",
          "response.json"
        ],
        "get_updates": [
          "client.get",
          "httpx.AsyncClient",
          "response.json"
        ],
        "execute_command": [
          "safe_commands.keys",
          "subprocess.run",
          "str"
        ],
        "chat_with_llm": [
          "httpx.AsyncClient",
          "chr",
          "result.get",
          "response.json",
          "recent_context.append",
          "client.post",
          "len",
          "str"
        ],
        "handle_message": [
          "text.startswith",
          "client.get",
          "range",
          "httpx.AsyncClient",
          "self.chat_with_llm",
          "update.get",
          "profile.get",
          "enumerate",
          "self.execute_command",
          "self.send_message",
          "len",
          "message.get",
          "str"
        ],
        "run": [
          "updates.get",
          "self.get_updates",
          "asyncio.sleep",
          "self.handle_message"
        ],
        "main": [
          "client.get",
          "httpx.AsyncClient",
          "bot.run",
          "os.getenv",
          "print",
          "LLMStructTelegramBot"
        ]
      },
      "dependencies": [
        "Optional",
        "TelegramMemoryManager",
        "asyncio",
        "httpx",
        "json",
        "logging",
        "memory_manager",
        "os",
        "subprocess",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ce94bd9d-23e9-467b-ad05-5198c13a8f92"
    },
    {
      "module_id": "examples.telegram_bot.test_bot",
      "path": "examples/telegram_bot/test_bot.py",
      "category": "test",
      "module_doc": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430 \u0431\u0435\u0437 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e Telegram",
      "functions": [
        {
          "name": "test_bot_functions",
          "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0431\u043e\u0442\u0430",
          "line_range": [
            15,
            98
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_api_status",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 API",
          "line_range": [
            100,
            119
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "mock_send_message",
          "docstring": "",
          "line_range": [
            83,
            85
          ],
          "parameters": [
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "test_commands_only",
          "docstring": "",
          "line_range": [
            136,
            142
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_bot_functions": [
          "bot.execute_command",
          "len",
          "bot.chat_with_llm",
          "print",
          "LLMStructTelegramBot"
        ],
        "mock_send_message": [
          "print",
          "len"
        ],
        "check_api_status": [
          "client.get",
          "httpx.AsyncClient",
          "print",
          "LLMStructTelegramBot"
        ],
        "test_commands_only": [
          "bot.execute_command",
          "print",
          "LLMStructTelegramBot",
          "len"
        ]
      },
      "dependencies": [
        "LLMStructTelegramBot",
        "asyncio",
        "bot",
        "httpx",
        "os",
        "sys"
      ],
      "hash": null,
      "artifact_id": "5454b55b-0b77-4e02-9508-51fa5e666689"
    },
    {
      "module_id": "examples.telegram_bot.memory_manager",
      "path": "examples/telegram_bot/memory_manager.py",
      "category": "core",
      "module_doc": "Memory Manager for LLMStruct Telegram Bot\n\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0430\u043c\u044f\u0442\u044c\u044e, \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0438 \u043f\u0435\u0440\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u044b\u043c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            44,
            64
          ],
          "parameters": [
            "self",
            "storage_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            66,
            103
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u0430\u0439\u043b\u044b",
          "line_range": [
            105,
            136
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_or_create_session",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430",
          "line_range": [
            138,
            154
          ],
          "parameters": [
            "self",
            "chat_id",
            "user_id",
            "user_name"
          ],
          "decorators": []
        },
        {
          "name": "_create_new_session",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            156,
            170
          ],
          "parameters": [
            "self",
            "chat_id",
            "user_id",
            "user_name"
          ],
          "decorators": []
        },
        {
          "name": "add_message",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            172,
            198
          ],
          "parameters": [
            "self",
            "session",
            "role",
            "content",
            "user_name"
          ],
          "decorators": []
        },
        {
          "name": "get_conversation_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430 \u0434\u043b\u044f LLM",
          "line_range": [
            200,
            228
          ],
          "parameters": [
            "self",
            "session",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "_build_system_context",
          "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f LLM",
          "line_range": [
            230,
            266
          ],
          "parameters": [
            "self",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "_update_user_profile",
          "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            268,
            316
          ],
          "parameters": [
            "self",
            "user_id",
            "content",
            "role"
          ],
          "decorators": []
        },
        {
          "name": "_archive_session",
          "docstring": "\u0410\u0440\u0445\u0438\u0432\u0438\u0440\u0443\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            318,
            337
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_create_session_summary",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u0440\u0435\u0437\u044e\u043c\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            339,
            362
          ],
          "parameters": [
            "self",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "get_user_stats",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            364,
            382
          ],
          "parameters": [
            "self",
            "user_id"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_sessions",
          "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0441\u0442\u0430\u0440\u044b\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            384,
            399
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_memory_stats",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            401,
            412
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save",
          "docstring": "\u041f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            414,
            417
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ConversationMessage",
          "docstring": "\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0435",
          "line_range": [
            18,
            25
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ConversationSession",
          "docstring": "\u0421\u0435\u0441\u0441\u0438\u044f \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430",
          "line_range": [
            28,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "TelegramMemoryManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0434\u043b\u044f Telegram \u0431\u043e\u0442\u0430",
          "line_range": [
            41,
            417
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                44,
                64
              ],
              "parameters": [
                "self",
                "storage_dir"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                66,
                103
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u0430\u0439\u043b\u044b",
              "line_range": [
                105,
                136
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_or_create_session",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430",
              "line_range": [
                138,
                154
              ],
              "parameters": [
                "self",
                "chat_id",
                "user_id",
                "user_name"
              ]
            },
            {
              "name": "_create_new_session",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                156,
                170
              ],
              "parameters": [
                "self",
                "chat_id",
                "user_id",
                "user_name"
              ]
            },
            {
              "name": "add_message",
              "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                172,
                198
              ],
              "parameters": [
                "self",
                "session",
                "role",
                "content",
                "user_name"
              ]
            },
            {
              "name": "get_conversation_context",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430 \u0434\u043b\u044f LLM",
              "line_range": [
                200,
                228
              ],
              "parameters": [
                "self",
                "session",
                "max_tokens"
              ]
            },
            {
              "name": "_build_system_context",
              "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f LLM",
              "line_range": [
                230,
                266
              ],
              "parameters": [
                "self",
                "session"
              ]
            },
            {
              "name": "_update_user_profile",
              "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                268,
                316
              ],
              "parameters": [
                "self",
                "user_id",
                "content",
                "role"
              ]
            },
            {
              "name": "_archive_session",
              "docstring": "\u0410\u0440\u0445\u0438\u0432\u0438\u0440\u0443\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                318,
                337
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "_create_session_summary",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u0440\u0435\u0437\u044e\u043c\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                339,
                362
              ],
              "parameters": [
                "self",
                "session"
              ]
            },
            {
              "name": "get_user_stats",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                364,
                382
              ],
              "parameters": [
                "self",
                "user_id"
              ]
            },
            {
              "name": "cleanup_old_sessions",
              "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0441\u0442\u0430\u0440\u044b\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                384,
                399
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_memory_stats",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043f\u0430\u043c\u044f\u0442\u0438",
              "line_range": [
                401,
                412
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save",
              "docstring": "\u041f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
              "line_range": [
                414,
                417
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_data"
        ],
        "_load_data": [
          "int",
          "logger.error",
          "logger.info",
          "data.values",
          "open",
          "len",
          "ConversationMessage",
          "ConversationSession",
          "session_data.get",
          "json.load"
        ],
        "_save_data": [
          "str",
          "logger.error",
          "open",
          "json.dump",
          "asdict"
        ],
        "get_or_create_session": [
          "self._create_new_session",
          "timedelta",
          "self._archive_session",
          "datetime.fromisoformat",
          "datetime.now"
        ],
        "_create_new_session": [
          "datetime.now",
          "ConversationSession"
        ],
        "add_message": [
          "ConversationMessage",
          "len",
          "datetime.now",
          "self._update_user_profile",
          "self._save_data"
        ],
        "get_conversation_context": [
          "system_content.split",
          "reversed",
          "self._build_system_context",
          "messages.insert",
          "len",
          "messages.append"
        ],
        "_build_system_context": [
          "user_profile.get"
        ],
        "_update_user_profile": [
          "content.lower",
          "any",
          "set",
          "profile.get",
          "isinstance",
          "tech_keywords.items",
          "len",
          "list",
          "datetime.now",
          "interests.add"
        ],
        "_archive_session": [
          "datetime.now",
          "time.time",
          "self._create_session_summary",
          "int"
        ],
        "_create_session_summary": [
          "content_lower.split",
          "keywords.extend",
          "set",
          "len",
          "Counter"
        ],
        "get_user_stats": [
          "len"
        ],
        "cleanup_old_sessions": [
          "timedelta",
          "logger.info",
          "to_archive.append",
          "datetime.fromisoformat",
          "self._archive_session",
          "len",
          "datetime.now",
          "self._save_data"
        ],
        "get_memory_stats": [
          "sum",
          "set",
          "str",
          "len"
        ],
        "save": [
          "logger.info",
          "self._save_data"
        ]
      },
      "dependencies": [
        "Any",
        "Counter",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asdict",
        "collections",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "23e10537-fa5e-42a0-b56f-84678ae3a2e2"
    },
    {
      "module_id": "integrations.continue.test_continue_api",
      "path": "integrations/continue/test_continue_api.py",
      "category": "test",
      "module_doc": "Test Continue API Integration",
      "functions": [
        {
          "name": "test_continue_api",
          "docstring": "Test Continue API endpoints",
          "line_range": [
            11,
            90
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_continue_api": [
          "client.get",
          "httpx.AsyncClient",
          "response.json",
          "client.post",
          "len",
          "print"
        ]
      },
      "dependencies": [
        "asyncio",
        "httpx",
        "json",
        "sys"
      ],
      "hash": null,
      "artifact_id": "c12d2fb7-db83-4225-b6da-d6739ac9431d"
    },
    {
      "module_id": "integrations.continue.setup_config",
      "path": "integrations/continue/setup_config.py",
      "category": "core",
      "module_doc": "Setup script for Continue VS Code extension configuration\n\u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432 config.template.json \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0437 .env",
      "functions": [
        {
          "name": "load_env_vars",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            13,
            33
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "substitute_variables",
          "docstring": "\u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 ${VAR:-default} \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0437 env_vars",
          "line_range": [
            35,
            58
          ],
          "parameters": [
            "config",
            "env_vars"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            60,
            95
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "replace_var",
          "docstring": "",
          "line_range": [
            45,
            52
          ],
          "parameters": [
            "match"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_env_vars": [
          "value.strip",
          "Path",
          "line.startswith",
          "line.strip",
          "open",
          "env_vars.update",
          "line.split",
          "key.strip",
          "env_file.exists"
        ],
        "substitute_variables": [
          "isinstance",
          "substitute_variables",
          "config.items"
        ],
        "replace_var": [
          "var_expr.split",
          "env_vars.get",
          "match.group"
        ],
        "main": [
          "json.load",
          "Path",
          "template_file.exists",
          "sys.exit",
          "env_vars.get",
          "open",
          "load_env_vars",
          "json.dump",
          "print",
          "substitute_variables"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Path",
        "json",
        "os",
        "pathlib",
        "re",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "5479570c-7f93-4ced-9cc0-278ed1cd599e"
    },
    {
      "module_id": "integrations.telegram_bot.bot",
      "path": "integrations/telegram_bot/bot.py",
      "category": "core",
      "module_doc": "Telegram Bot for LLMStruct Integration\n\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0432 tmp \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438\n\u0421 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u0438 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0422\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430",
          "line_range": [
            406,
            431
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            34,
            61
          ],
          "parameters": [
            "self",
            "bot_token",
            "api_base"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
          "line_range": [
            63,
            79
          ],
          "parameters": [
            "self",
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "get_updates",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0442 Telegram",
          "line_range": [
            81,
            96
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "execute_command",
          "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e",
          "line_range": [
            98,
            125
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_llm",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 LLM \u0447\u0435\u0440\u0435\u0437 \u043d\u0430\u0448 API \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            127,
            165
          ],
          "parameters": [
            "self",
            "message",
            "context_mode",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u044c\u044e",
          "line_range": [
            167,
            350
          ],
          "parameters": [
            "self",
            "update"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0446\u0438\u043a\u043b \u0431\u043e\u0442\u0430",
          "line_range": [
            352,
            377
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_epic_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447",
          "line_range": [
            379,
            404
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMStructTelegramBot",
          "docstring": "",
          "line_range": [
            33,
            404
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                34,
                61
              ],
              "parameters": [
                "self",
                "bot_token",
                "api_base"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
              "line_range": [
                63,
                79
              ],
              "parameters": [
                "self",
                "chat_id",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "get_updates",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0442 Telegram",
              "line_range": [
                81,
                96
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "execute_command",
              "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e",
              "line_range": [
                98,
                125
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "chat_with_llm",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 LLM \u0447\u0435\u0440\u0435\u0437 \u043d\u0430\u0448 API \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043f\u0430\u043c\u044f\u0442\u0438",
              "line_range": [
                127,
                165
              ],
              "parameters": [
                "self",
                "message",
                "context_mode",
                "session"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u044c\u044e",
              "line_range": [
                167,
                350
              ],
              "parameters": [
                "self",
                "update"
              ]
            },
            {
              "name": "run",
              "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0446\u0438\u043a\u043b \u0431\u043e\u0442\u0430",
              "line_range": [
                352,
                377
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_epic_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447",
              "line_range": [
                379,
                404
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logging.basicConfig",
          "logging.getLogger",
          "WorkspaceStateManager",
          "TelegramMemoryManager"
        ],
        "send_message": [
          "client.post",
          "httpx.AsyncClient",
          "response.json"
        ],
        "get_updates": [
          "client.get",
          "httpx.AsyncClient",
          "response.json"
        ],
        "execute_command": [
          "safe_commands.keys",
          "subprocess.run",
          "str"
        ],
        "chat_with_llm": [
          "httpx.AsyncClient",
          "chr",
          "result.get",
          "response.json",
          "recent_context.append",
          "client.post",
          "len",
          "str"
        ],
        "handle_message": [
          "text.startswith",
          "client.get",
          "context_info.get",
          "entity.get",
          "httpx.AsyncClient",
          "range",
          "self.chat_with_llm",
          "text.replace",
          "update.get",
          "len",
          "self.get_epic_status",
          "profile.get",
          "enumerate",
          "self.execute_command",
          "self.send_message",
          "mention_text.lower",
          "message.get",
          "str"
        ],
        "run": [
          "updates.get",
          "self.get_updates",
          "asyncio.sleep",
          "self.handle_message"
        ],
        "get_epic_status": [
          "Path",
          "subprocess.run",
          "str",
          "len"
        ],
        "main": [
          "client.get",
          "httpx.AsyncClient",
          "bot.run",
          "os.getenv",
          "print",
          "LLMStructTelegramBot"
        ]
      },
      "dependencies": [
        "Optional",
        "Path",
        "TelegramMemoryManager",
        "WorkspaceStateManager",
        "asyncio",
        "httpx",
        "json",
        "llmstruct.workspace",
        "logging",
        "memory_manager",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "cd5546ff-eab1-40d3-8686-ea3b369dccf8"
    },
    {
      "module_id": "integrations.telegram_bot.test_bot",
      "path": "integrations/telegram_bot/test_bot.py",
      "category": "test",
      "module_doc": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430 \u0431\u0435\u0437 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e Telegram",
      "functions": [
        {
          "name": "test_bot_functions",
          "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0431\u043e\u0442\u0430",
          "line_range": [
            15,
            98
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_api_status",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 API",
          "line_range": [
            100,
            119
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "mock_send_message",
          "docstring": "",
          "line_range": [
            83,
            85
          ],
          "parameters": [
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "test_commands_only",
          "docstring": "",
          "line_range": [
            136,
            142
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_bot_functions": [
          "bot.execute_command",
          "len",
          "bot.chat_with_llm",
          "print",
          "LLMStructTelegramBot"
        ],
        "mock_send_message": [
          "print",
          "len"
        ],
        "check_api_status": [
          "client.get",
          "httpx.AsyncClient",
          "print",
          "LLMStructTelegramBot"
        ],
        "test_commands_only": [
          "bot.execute_command",
          "print",
          "LLMStructTelegramBot",
          "len"
        ]
      },
      "dependencies": [
        "LLMStructTelegramBot",
        "asyncio",
        "bot",
        "httpx",
        "os",
        "sys"
      ],
      "hash": null,
      "artifact_id": "14739725-9a84-42ca-b708-9fc911b8b799"
    },
    {
      "module_id": "integrations.telegram_bot.mp002_progress_bot",
      "path": "integrations/telegram_bot/mp002_progress_bot.py",
      "category": "core",
      "module_doc": "MP-002A Progress Bot - Telegram \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Smart Wrapper \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\n\u042d\u0442\u0430\u043f\u043d\u0430\u044f \u043e\u0442\u0447\u0435\u0442\u043d\u043e\u0441\u0442\u044c, \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430, \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435",
      "functions": [
        {
          "name": "start_mp002_bot",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a MP-002A \u0431\u043e\u0442\u0430",
          "line_range": [
            431,
            452
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            23,
            82
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "init_progress_tracking",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            84,
            109
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_progress",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            111,
            118
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_progress",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            120,
            123
          ],
          "parameters": [
            "self",
            "progress"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
          "line_range": [
            125,
            139
          ],
          "parameters": [
            "self",
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "report_phase_start",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435 \u0444\u0430\u0437\u044b",
          "line_range": [
            141,
            172
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id"
          ],
          "decorators": []
        },
        {
          "name": "report_task_completion",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            174,
            207
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id",
            "task_description",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "request_phase_approval",
          "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441 \u043e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0430\u0437\u044b",
          "line_range": [
            209,
            232
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id"
          ],
          "decorators": []
        },
        {
          "name": "report_issue",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0435",
          "line_range": [
            234,
            264
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id",
            "issue_description"
          ],
          "decorators": []
        },
        {
          "name": "get_overall_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            266,
            307
          ],
          "parameters": [
            "self",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            309,
            326
          ],
          "parameters": [
            "self",
            "update"
          ],
          "decorators": []
        },
        {
          "name": "handle_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            328,
            349
          ],
          "parameters": [
            "self",
            "chat_id",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "send_welcome",
          "docstring": "\u041f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
          "line_range": [
            351,
            367
          ],
          "parameters": [
            "self",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "approve_phase",
          "docstring": "\u041e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u0435 \u0444\u0430\u0437\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c",
          "line_range": [
            369,
            413
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id"
          ],
          "decorators": []
        },
        {
          "name": "handle_feedback",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043a\u0430\u043a feedback",
          "line_range": [
            415,
            427
          ],
          "parameters": [
            "self",
            "chat_id",
            "text"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "MP002ProgressBot",
          "docstring": "Telegram \u0431\u043e\u0442 \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 MP-002A Smart Wrapper",
          "line_range": [
            18,
            427
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                23,
                82
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "init_progress_tracking",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                84,
                109
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_progress",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                111,
                118
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_progress",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                120,
                123
              ],
              "parameters": [
                "self",
                "progress"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
              "line_range": [
                125,
                139
              ],
              "parameters": [
                "self",
                "chat_id",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "report_phase_start",
              "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435 \u0444\u0430\u0437\u044b",
              "line_range": [
                141,
                172
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id"
              ]
            },
            {
              "name": "report_task_completion",
              "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                174,
                207
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id",
                "task_description",
                "details"
              ]
            },
            {
              "name": "request_phase_approval",
              "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441 \u043e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0430\u0437\u044b",
              "line_range": [
                209,
                232
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id"
              ]
            },
            {
              "name": "report_issue",
              "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0435",
              "line_range": [
                234,
                264
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id",
                "issue_description"
              ]
            },
            {
              "name": "get_overall_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                266,
                307
              ],
              "parameters": [
                "self",
                "chat_id"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                309,
                326
              ],
              "parameters": [
                "self",
                "update"
              ]
            },
            {
              "name": "handle_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                328,
                349
              ],
              "parameters": [
                "self",
                "chat_id",
                "command"
              ]
            },
            {
              "name": "send_welcome",
              "docstring": "\u041f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
              "line_range": [
                351,
                367
              ],
              "parameters": [
                "self",
                "chat_id"
              ]
            },
            {
              "name": "approve_phase",
              "docstring": "\u041e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u0435 \u0444\u0430\u0437\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c",
              "line_range": [
                369,
                413
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id"
              ]
            },
            {
              "name": "handle_feedback",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043a\u0430\u043a feedback",
              "line_range": [
                415,
                427
              ],
              "parameters": [
                "self",
                "chat_id",
                "text"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self.init_progress_tracking"
        ],
        "init_progress_tracking": [
          "datetime.now",
          "json.dump",
          "open"
        ],
        "load_progress": [
          "self.load_progress",
          "json.load",
          "open",
          "self.init_progress_tracking"
        ],
        "save_progress": [
          "json.dump",
          "open"
        ],
        "send_message": [
          "httpx.AsyncClient",
          "response.json",
          "client.post",
          "print",
          "str"
        ],
        "report_phase_start": [
          "self.load_progress",
          "self.save_progress",
          "phase_id.upper",
          "self.send_message",
          "enumerate",
          "datetime.now"
        ],
        "report_task_completion": [
          "self.request_phase_approval",
          "self.load_progress",
          "self.save_progress",
          "self.send_message",
          "len",
          "datetime.now"
        ],
        "request_phase_approval": [
          "phase_id.upper",
          "self.send_message",
          "enumerate"
        ],
        "report_issue": [
          "self.load_progress",
          "datetime.now",
          "self.send_message",
          "self.save_progress"
        ],
        "get_overall_status": [
          "progress.get",
          "self.load_progress",
          "phase_data.get",
          "self.send_message",
          "len"
        ],
        "handle_message": [
          "text.startswith",
          "message.get",
          "self.handle_command",
          "self.handle_feedback"
        ],
        "handle_command": [
          "self.continue_work",
          "self.show_phase_details",
          "command.split",
          "self.report_user_issues",
          "self.send_welcome",
          "self.send_message",
          "len",
          "self.approve_phase",
          "self.show_help",
          "self.get_overall_status"
        ],
        "send_welcome": [
          "self.send_message"
        ],
        "approve_phase": [
          "self.load_progress",
          "self.save_progress",
          "phase_id.upper",
          "len",
          "phases_list.index",
          "self.report_phase_start",
          "self.send_message",
          "list",
          "datetime.now"
        ],
        "handle_feedback": [
          "progress.get",
          "self.load_progress",
          "self.save_progress",
          "self.send_message",
          "datetime.now"
        ],
        "start_mp002_bot": [
          "os.getenv",
          "MP002ProgressBot",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "asyncio",
        "datetime",
        "httpx",
        "json",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "6d460f88-db63-4961-a752-2b5be66e9753"
    },
    {
      "module_id": "integrations.telegram_bot.simple_bot",
      "path": "integrations/telegram_bot/simple_bot.py",
      "category": "core",
      "module_doc": "\u0423\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f LLMStruct \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\n\u0411\u0435\u0437 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439, \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            360,
            371
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            39,
            45
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            47,
            55
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            57,
            73
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "help_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
          "line_range": [
            75,
            93
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
          "line_range": [
            95,
            154
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "metrics_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics",
          "line_range": [
            156,
            188
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "struct_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /struct",
          "line_range": [
            190,
            223
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "parse_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /parse",
          "line_range": [
            225,
            270
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            272,
            321
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
          "line_range": [
            323,
            358
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "SimpleLLMStructBot",
          "docstring": "\u0423\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f LLMStruct",
          "line_range": [
            36,
            358
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                39,
                45
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                47,
                55
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                57,
                73
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "help_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
              "line_range": [
                75,
                93
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
              "line_range": [
                95,
                154
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "metrics_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics",
              "line_range": [
                156,
                188
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "struct_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /struct",
              "line_range": [
                190,
                223
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "parse_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /parse",
              "line_range": [
                225,
                270
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                272,
                321
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
              "line_range": [
                323,
                358
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "track_workflow_event",
          "Application.builder",
          "self.setup_handlers"
        ],
        "setup_handlers": [
          "CommandHandler",
          "MessageHandler"
        ],
        "start_command": [
          "track_workflow_event"
        ],
        "help_command": [
          "track_workflow_event"
        ],
        "status_command": [
          "requests.get",
          "tracker.get_session_summary",
          "struct_file.stat",
          "int",
          "time.strftime",
          "str",
          "time.time",
          "Path",
          "track_task_complete",
          "get_metrics_tracker",
          "struct_file.exists",
          "track_task_start",
          "track_workflow_event"
        ],
        "metrics_command": [
          "get_metrics_tracker",
          "tracker.get_session_summary",
          "track_workflow_event"
        ],
        "struct_command": [
          "struct_file.stat",
          "time.time",
          "Path",
          "struct_file.exists",
          "track_workflow_event",
          "time.ctime"
        ],
        "parse_command": [
          "int",
          "subprocess.run",
          "str",
          "time.time",
          "track_task_complete",
          "os.chdir",
          "track_task_start",
          "track_workflow_event"
        ],
        "handle_message": [
          "user_message.lower",
          "int",
          "str",
          "time.time",
          "response.split",
          "track_task_complete",
          "len",
          "get_metrics_tracker",
          "user_message.split",
          "self.metrics_command",
          "self.status_command",
          "self.struct_command",
          "track_task_start",
          "track_workflow_event",
          "tracker.track_token_usage"
        ],
        "run_sync": [
          "asyncio.set_event_loop",
          "track_workflow_event",
          "str",
          "logger.error",
          "logger.info",
          "get_metrics_tracker",
          "BotCommand",
          "loop.run_until_complete",
          "tracker.save_session",
          "asyncio.new_event_loop"
        ],
        "main": [
          "bot.run_sync",
          "os.getenv",
          "print",
          "SimpleLLMStructBot"
        ]
      },
      "dependencies": [
        "Application",
        "BotCommand",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "Optional",
        "Path",
        "Update",
        "asyncio",
        "filters",
        "get_metrics_tracker",
        "json",
        "logging",
        "os",
        "pathlib",
        "requests",
        "src.llmstruct.metrics_tracker",
        "subprocess",
        "sys",
        "telegram",
        "telegram.ext",
        "time",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event",
        "typing"
      ],
      "hash": null,
      "artifact_id": "21b91240-33b4-45ab-a837-2018a30f21e7"
    },
    {
      "module_id": "integrations.telegram_bot.memory_manager",
      "path": "integrations/telegram_bot/memory_manager.py",
      "category": "core",
      "module_doc": "Memory Manager for LLMStruct Telegram Bot\n\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0430\u043c\u044f\u0442\u044c\u044e, \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0438 \u043f\u0435\u0440\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u044b\u043c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            44,
            64
          ],
          "parameters": [
            "self",
            "storage_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            66,
            103
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u0430\u0439\u043b\u044b",
          "line_range": [
            105,
            136
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_or_create_session",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430",
          "line_range": [
            138,
            154
          ],
          "parameters": [
            "self",
            "chat_id",
            "user_id",
            "user_name"
          ],
          "decorators": []
        },
        {
          "name": "_create_new_session",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            156,
            170
          ],
          "parameters": [
            "self",
            "chat_id",
            "user_id",
            "user_name"
          ],
          "decorators": []
        },
        {
          "name": "add_message",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            172,
            210
          ],
          "parameters": [
            "self",
            "session",
            "role",
            "content",
            "user_name"
          ],
          "decorators": []
        },
        {
          "name": "get_conversation_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430 \u0434\u043b\u044f LLM",
          "line_range": [
            212,
            240
          ],
          "parameters": [
            "self",
            "session",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "_build_system_context",
          "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f LLM",
          "line_range": [
            242,
            278
          ],
          "parameters": [
            "self",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "_update_user_profile",
          "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            280,
            328
          ],
          "parameters": [
            "self",
            "user_id",
            "content",
            "role"
          ],
          "decorators": []
        },
        {
          "name": "_archive_session",
          "docstring": "\u0410\u0440\u0445\u0438\u0432\u0438\u0440\u0443\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            330,
            349
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_create_session_summary",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u0440\u0435\u0437\u044e\u043c\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            351,
            374
          ],
          "parameters": [
            "self",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "get_user_stats",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            376,
            394
          ],
          "parameters": [
            "self",
            "user_id"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_sessions",
          "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0441\u0442\u0430\u0440\u044b\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            396,
            411
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_memory_stats",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            413,
            424
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save",
          "docstring": "\u041f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            426,
            429
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ConversationMessage",
          "docstring": "\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0435",
          "line_range": [
            18,
            25
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ConversationSession",
          "docstring": "\u0421\u0435\u0441\u0441\u0438\u044f \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430",
          "line_range": [
            28,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "TelegramMemoryManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0434\u043b\u044f Telegram \u0431\u043e\u0442\u0430",
          "line_range": [
            41,
            429
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                44,
                64
              ],
              "parameters": [
                "self",
                "storage_dir"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                66,
                103
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u0430\u0439\u043b\u044b",
              "line_range": [
                105,
                136
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_or_create_session",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430",
              "line_range": [
                138,
                154
              ],
              "parameters": [
                "self",
                "chat_id",
                "user_id",
                "user_name"
              ]
            },
            {
              "name": "_create_new_session",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                156,
                170
              ],
              "parameters": [
                "self",
                "chat_id",
                "user_id",
                "user_name"
              ]
            },
            {
              "name": "add_message",
              "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                172,
                210
              ],
              "parameters": [
                "self",
                "session",
                "role",
                "content",
                "user_name"
              ]
            },
            {
              "name": "get_conversation_context",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430 \u0434\u043b\u044f LLM",
              "line_range": [
                212,
                240
              ],
              "parameters": [
                "self",
                "session",
                "max_tokens"
              ]
            },
            {
              "name": "_build_system_context",
              "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f LLM",
              "line_range": [
                242,
                278
              ],
              "parameters": [
                "self",
                "session"
              ]
            },
            {
              "name": "_update_user_profile",
              "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                280,
                328
              ],
              "parameters": [
                "self",
                "user_id",
                "content",
                "role"
              ]
            },
            {
              "name": "_archive_session",
              "docstring": "\u0410\u0440\u0445\u0438\u0432\u0438\u0440\u0443\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                330,
                349
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "_create_session_summary",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u0440\u0435\u0437\u044e\u043c\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                351,
                374
              ],
              "parameters": [
                "self",
                "session"
              ]
            },
            {
              "name": "get_user_stats",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                376,
                394
              ],
              "parameters": [
                "self",
                "user_id"
              ]
            },
            {
              "name": "cleanup_old_sessions",
              "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0441\u0442\u0430\u0440\u044b\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                396,
                411
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_memory_stats",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043f\u0430\u043c\u044f\u0442\u0438",
              "line_range": [
                413,
                424
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save",
              "docstring": "\u041f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
              "line_range": [
                426,
                429
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_data"
        ],
        "_load_data": [
          "int",
          "logger.error",
          "logger.info",
          "data.values",
          "open",
          "len",
          "ConversationMessage",
          "ConversationSession",
          "session_data.get",
          "json.load"
        ],
        "_save_data": [
          "str",
          "logger.error",
          "open",
          "json.dump",
          "asdict"
        ],
        "get_or_create_session": [
          "self._create_new_session",
          "timedelta",
          "self._archive_session",
          "datetime.fromisoformat",
          "datetime.now"
        ],
        "_create_new_session": [
          "datetime.now",
          "ConversationSession"
        ],
        "add_message": [
          "important_messages.append",
          "content.lower",
          "len",
          "ConversationMessage",
          "any",
          "datetime.now",
          "self._update_user_profile",
          "self._save_data"
        ],
        "get_conversation_context": [
          "system_content.split",
          "reversed",
          "self._build_system_context",
          "messages.insert",
          "len",
          "messages.append"
        ],
        "_build_system_context": [
          "user_profile.get"
        ],
        "_update_user_profile": [
          "content.lower",
          "any",
          "set",
          "profile.get",
          "isinstance",
          "tech_keywords.items",
          "len",
          "list",
          "datetime.now",
          "interests.add"
        ],
        "_archive_session": [
          "datetime.now",
          "time.time",
          "self._create_session_summary",
          "int"
        ],
        "_create_session_summary": [
          "content_lower.split",
          "keywords.extend",
          "set",
          "len",
          "Counter"
        ],
        "get_user_stats": [
          "len"
        ],
        "cleanup_old_sessions": [
          "timedelta",
          "logger.info",
          "to_archive.append",
          "datetime.fromisoformat",
          "self._archive_session",
          "len",
          "datetime.now",
          "self._save_data"
        ],
        "get_memory_stats": [
          "sum",
          "set",
          "str",
          "len"
        ],
        "save": [
          "logger.info",
          "self._save_data"
        ]
      },
      "dependencies": [
        "Any",
        "Counter",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asdict",
        "collections",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "27969779-709e-441d-b19b-3b94d9094f20"
    },
    {
      "module_id": "scripts.log_viewer",
      "path": "scripts/log_viewer.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "parse_date",
          "docstring": "",
          "line_range": [
            9,
            16
          ],
          "parameters": [
            "date_str"
          ],
          "decorators": []
        },
        {
          "name": "load_log",
          "docstring": "",
          "line_range": [
            18,
            20
          ],
          "parameters": [
            "log_path"
          ],
          "decorators": []
        },
        {
          "name": "filter_log",
          "docstring": "",
          "line_range": [
            22,
            38
          ],
          "parameters": [
            "log",
            "epic",
            "event_type",
            "author",
            "request_id",
            "from_date",
            "to_date"
          ],
          "decorators": []
        },
        {
          "name": "aggregate_log",
          "docstring": "",
          "line_range": [
            40,
            42
          ],
          "parameters": [
            "log",
            "field"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            44,
            73
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_date": [
          "datetime.strptime",
          "ValueError"
        ],
        "load_log": [
          "json.loads",
          "line.strip",
          "open"
        ],
        "filter_log": [
          "e.get",
          "parse_date"
        ],
        "aggregate_log": [
          "e.get",
          "counter.items",
          "Counter"
        ],
        "main": [
          "parser.add_argument",
          "e.get",
          "aggregate_log",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "tabulate",
          "json.dumps",
          "filter_log",
          "print",
          "load_log"
        ]
      },
      "dependencies": [
        "Counter",
        "Path",
        "argparse",
        "collections",
        "datetime",
        "json",
        "pathlib",
        "tabulate"
      ],
      "hash": null,
      "artifact_id": "42302091-37cb-4d98-953d-1b5f818bfc5f"
    },
    {
      "module_id": "ARCHIVE.auto_init_ai_system",
      "path": "ARCHIVE/auto_init_ai_system.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor\n\u042d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439\nENHANCED: \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 workflow \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439, \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438 \u0438 context tags",
      "functions": [
        {
          "name": "auto_initialize_ai_system",
          "docstring": "\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            27,
            91
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_current_workflow_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 workflow \u0441\u0435\u0441\u0441\u0438\u0438 \u0438 workspace mode",
          "line_range": [
            93,
            129
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_workflow_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 workflow \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            131,
            215
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "switch_workspace_mode",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c workspace mode (\u0434\u043b\u044f CLI integration)",
          "line_range": [
            217,
            233
          ],
          "parameters": [
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            235,
            245
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "search_ai_capabilities",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 AI \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e struct.json \u0438 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            247,
            314
          ],
          "parameters": [
            "query"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f AI \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435",
          "line_range": [
            316,
            347
          ],
          "parameters": [
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "get_epic_sessions_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u0441\u0435\u0445 \u044d\u043f\u0438\u043a-\u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            349,
            398
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "create_epic_session",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            400,
            421
          ],
          "parameters": [
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "switch_to_session",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            423,
            441
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "get_available_sessions",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            443,
            504
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "session_management_commands",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438",
          "line_range": [
            506,
            532
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "auto_initialize_ai_system": [
          "src_path.exists",
          "get_current_workflow_context",
          "Path",
          "f.exists",
          "logger.error",
          "logger.info",
          "SystemCapabilityDiscovery",
          "len",
          "AI_CAPABILITIES.discover_all_capabilities",
          "print",
          "str"
        ],
        "get_current_workflow_context": [
          "session.get",
          "roadmap_file.exists",
          "Path",
          "roadmap.get",
          "session_file.exists",
          "epic_data.get",
          "logger.info",
          "open",
          "workspace.get",
          "workspace_file.exists",
          "json.load",
          "logger.warning"
        ],
        "get_workflow_status": [
          "session_info.get",
          "time.time",
          "e.get",
          "workspace_manager.get_current_mode",
          "get_metrics_tracker",
          "metrics_tracker.get_session_summary",
          "open",
          "str",
          "roadmap_file.exists",
          "json.load",
          "track_workflow_event",
          "WorkspaceStateManager",
          "struct_status.upper",
          "workspace_manager.get_session_info",
          "struct_file.exists",
          "len",
          "roadmap.get",
          "workspace_manager.get_epic_summaries",
          "workspace_manager.get_mode_description",
          "Path",
          "workspace_manager._get_git_branch"
        ],
        "switch_workspace_mode": [
          "ws.set_mode",
          "WorkspaceStateManager",
          "get_current_workflow_context",
          "Path",
          "logger.error",
          "logger.info",
          "str"
        ],
        "get_ai_status": [
          "auto_initialize_ai_system",
          "get_workflow_status",
          "AI_STATUS.get",
          "AI_CAPABILITIES.get_enhanced_capabilities_summary"
        ],
        "search_ai_capabilities": [
          "json.load",
          "int",
          "cls.get",
          "str",
          "time.time",
          "Path",
          "track_task_complete",
          "func.get",
          "len",
          "file_info.get",
          "query.lower",
          "struct_file.exists",
          "enumerate",
          "open",
          "results.append",
          "track_task_start",
          "struct_data.get",
          "track_workflow_event"
        ],
        "get_ai_context": [
          "get_current_workflow_context",
          "auto_initialize_ai_system",
          "logger.error",
          "len",
          "AI_CAPABILITIES.discover_all_capabilities",
          "json.dumps"
        ],
        "get_epic_sessions_status": [
          "session.get",
          "roadmap_file.exists",
          "status_lines.append",
          "Path",
          "roadmap.get",
          "logger.error",
          "epic_data.get",
          "open",
          "sessions_file.exists",
          "json.load"
        ],
        "create_epic_session": [
          "os.system",
          "Path",
          "logger.error",
          "logger.info",
          "epic_id.split"
        ],
        "switch_to_session": [
          "os.system",
          "get_current_workflow_context",
          "Path",
          "logger.error",
          "logger.info"
        ],
        "get_available_sessions": [
          "session.get",
          "current_session_file.exists",
          "roadmap_file.exists",
          "Path",
          "roadmap.get",
          "current_data.get",
          "logger.error",
          "epic_data.get",
          "open",
          "sessions_file.exists",
          "sessions_list.append",
          "json.load",
          "sessions_data.get"
        ],
        "session_management_commands": []
      },
      "dependencies": [
        "Path",
        "SystemCapabilityDiscovery",
        "WorkspaceStateManager",
        "datetime",
        "get_metrics_tracker",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.workspace",
        "logging",
        "os",
        "pathlib",
        "src.llmstruct.metrics_tracker",
        "src.llmstruct.workspace",
        "sys",
        "time",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event"
      ],
      "hash": null,
      "artifact_id": "79b67975-5286-45c6-bb22-c8057be21561"
    },
    {
      "module_id": "ARCHIVE.collect_json",
      "path": "ARCHIVE/collect_json.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json_files",
          "docstring": "",
          "line_range": [
            5,
            19
          ],
          "parameters": [
            "base_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json_files": [
          "sorted",
          "base_dir.rglob",
          "path.relative_to",
          "current.setdefault",
          "path.open",
          "json.load"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "897a18d9-d7e7-450c-bc2c-8128ca75095d"
    },
    {
      "module_id": "ARCHIVE.install_ai_integration",
      "path": "ARCHIVE/install_ai_integration.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor\n\u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u043b\u044e\u0431\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
      "functions": [
        {
          "name": "install_ai_integration",
          "docstring": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u0432 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            12,
            58
          ],
          "parameters": [
            "target_project"
          ],
          "decorators": []
        },
        {
          "name": "adapt_cursorrules",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c .cursorrules \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            60,
            99
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "adapt_auto_init",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c auto_init_ai_system.py \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            101,
            123
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "create_simplified_auto_init",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e auto_init \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0431\u0435\u0437 llmstruct",
          "line_range": [
            125,
            189
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438",
          "line_range": [
            191,
            207
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "install_ai_integration": [
          "vscode_dir.mkdir",
          "target_root.exists",
          "adapt_auto_init",
          "Path",
          "adapt_cursorrules",
          "print",
          "source_path.exists",
          "shutil.copy2"
        ],
        "adapt_cursorrules": [
          "cursorrules_path.exists",
          "cursorrules_path.write_text",
          "content.replace",
          "len",
          "project_root.rglob",
          "list",
          "print",
          "cursorrules_path.read_text"
        ],
        "adapt_auto_init": [
          "content.replace",
          "create_simplified_auto_init",
          "auto_init_path.exists",
          "auto_init_path.read_text",
          "print",
          "auto_init_path.write_text"
        ],
        "create_simplified_auto_init": [],
        "main": [
          "install_ai_integration",
          "print",
          "len"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "shutil",
        "sys"
      ],
      "hash": null,
      "artifact_id": "4819c9af-b554-459f-8def-e80bc4c015f0"
    },
    {
      "module_id": "ARCHIVE.quick_ws_test",
      "path": "ARCHIVE/quick_ws_test.py",
      "category": "core",
      "module_doc": "Quick WebSocket Test Script",
      "functions": [
        {
          "name": "test_websocket",
          "docstring": "Test WebSocket with automatic messages",
          "line_range": [
            11,
            65
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_websocket": [
          "asyncio.sleep",
          "websocket.send",
          "data.get",
          "len",
          "websocket.recv",
          "print",
          "json.loads",
          "json.dumps",
          "websockets.connect"
        ]
      },
      "dependencies": [
        "asyncio",
        "json",
        "sys",
        "websockets"
      ],
      "hash": null,
      "artifact_id": "01433b88-da6c-45c9-bf38-ae74f91a3333"
    },
    {
      "module_id": "ARCHIVE.verify_llm_response",
      "path": "ARCHIVE/verify_llm_response.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json_file",
          "docstring": "Load a JSON file and return its contents.",
          "line_range": [
            15,
            25
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_with_struct",
          "docstring": "Verify llm_response.json against struct.json.",
          "line_range": [
            28,
            71
          ],
          "parameters": [
            "response_text",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_without_struct",
          "docstring": "Verify llm_response.json based on LLMstruct principles.",
          "line_range": [
            74,
            108
          ],
          "parameters": [
            "response_text"
          ],
          "decorators": []
        },
        {
          "name": "generate_metrics",
          "docstring": "Generate metrics for the response per EXT-004.",
          "line_range": [
            111,
            141
          ],
          "parameters": [
            "response_data",
            "server_log"
          ],
          "decorators": []
        },
        {
          "name": "update_tasks_json",
          "docstring": "Append a new task to tasks.json.",
          "line_range": [
            144,
            151
          ],
          "parameters": [
            "tasks_file",
            "new_task"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            154,
            225
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json_file": [
          "json.load",
          "open",
          "logging.error"
        ],
        "verify_response_with_struct": [
          "logging.info",
          "logging.error",
          "e.startswith",
          "set",
          "expected_goals.issubset",
          "expected_extensions.issubset",
          "re.findall",
          "struct_data.get",
          "expected_files.issubset"
        ],
        "verify_response_without_struct": [
          "principle.lower",
          "logging.info",
          "logging.error",
          "set",
          "expected_goals.issubset",
          "expected_extensions.issubset",
          "response_text.lower",
          "re.findall",
          "expected_files.issubset"
        ],
        "generate_metrics": [
          "datetime.utcnow",
          "response_text.split",
          "server_log.get",
          "len",
          "re.findall"
        ],
        "update_tasks_json": [
          "logging.info",
          "open",
          "load_json_file",
          "json.dump",
          "tasks.get"
        ],
        "main": [
          "verify_response_with_struct",
          "parser.add_argument",
          "logging.info",
          "verify_response_without_struct",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "open",
          "update_tasks_json",
          "load_json_file",
          "json.dump",
          "generate_metrics"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "argparse",
        "datetime",
        "json",
        "logging",
        "os",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "2136415b-9e3b-47e8-8a8e-fde26ecbd773"
    },
    {
      "module_id": "ARCHIVE.grok",
      "path": "ARCHIVE/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": [
            24,
            30
          ],
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_brok",
          "docstring": "",
          "line_range": [
            33,
            39
          ],
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            6,
            11
          ],
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": [
            13,
            21
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": [
            5,
            21
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                6,
                11
              ],
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": [
                13,
                21
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "len",
          "prompt.split",
          "response.json",
          "response.raise_for_status"
        ],
        "test_grok": [
          "GrokClient",
          "time.perf_counter",
          "client.generate"
        ],
        "test_brok": [
          "GrokClient",
          "time.perf_counter",
          "client.generate"
        ]
      },
      "dependencies": [
        "requests",
        "time"
      ],
      "hash": null,
      "artifact_id": "03f9c266-5817-4a2b-9375-3390d0f46867"
    },
    {
      "module_id": "ARCHIVE.collector",
      "path": "ARCHIVE/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            13,
            17
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_text_file",
          "docstring": "Check if file is likely a text file based on extension.",
          "line_range": [
            20,
            31
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": [
            34,
            66
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "gitignore_parser.parse_gitignore",
          "gitignore_path.exists"
        ],
        "is_text_file": [],
        "collect_project": [
          "root_dir.rglob",
          "str",
          "doc_files.items",
          "Path",
          "is_text_file",
          "logger.error",
          "len",
          "logger.info",
          "gitignore",
          "load_gitignore",
          "open",
          "any",
          "f.read",
          "json.dump",
          "logger.warning",
          "file_path.is_file"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "1ec98e46-4534-42a4-bd86-581fc36252e8"
    },
    {
      "module_id": "cursor_workflow_integration.scripts.install_ai_integration",
      "path": "cursor_workflow_integration/scripts/install_ai_integration.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor\n\u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u043b\u044e\u0431\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
      "functions": [
        {
          "name": "install_ai_integration",
          "docstring": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u0432 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            12,
            58
          ],
          "parameters": [
            "target_project"
          ],
          "decorators": []
        },
        {
          "name": "adapt_cursorrules",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c .cursorrules \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            60,
            99
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "adapt_auto_init",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c auto_init_ai_system.py \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            101,
            123
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "create_simplified_auto_init",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e auto_init \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0431\u0435\u0437 llmstruct",
          "line_range": [
            125,
            189
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438",
          "line_range": [
            191,
            207
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "install_ai_integration": [
          "vscode_dir.mkdir",
          "target_root.exists",
          "adapt_auto_init",
          "Path",
          "adapt_cursorrules",
          "print",
          "source_path.exists",
          "shutil.copy2"
        ],
        "adapt_cursorrules": [
          "cursorrules_path.exists",
          "cursorrules_path.write_text",
          "content.replace",
          "len",
          "project_root.rglob",
          "list",
          "print",
          "cursorrules_path.read_text"
        ],
        "adapt_auto_init": [
          "content.replace",
          "create_simplified_auto_init",
          "auto_init_path.exists",
          "auto_init_path.read_text",
          "print",
          "auto_init_path.write_text"
        ],
        "create_simplified_auto_init": [],
        "main": [
          "install_ai_integration",
          "print",
          "len"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "shutil",
        "sys"
      ],
      "hash": null,
      "artifact_id": "b9dfb58e-8fae-4443-9708-def963f5d0c4"
    },
    {
      "module_id": "cursor_workflow_integration.files.auto_init_ai_system",
      "path": "cursor_workflow_integration/files/auto_init_ai_system.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor\n\u042d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439\nENHANCED: \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 workflow \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439, \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438 \u0438 context tags",
      "functions": [
        {
          "name": "auto_initialize_ai_system",
          "docstring": "\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            26,
            90
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_current_workflow_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 workflow \u0441\u0435\u0441\u0441\u0438\u0438 \u0438 workspace mode",
          "line_range": [
            92,
            128
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_workflow_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 workflow \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            130,
            178
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "switch_workspace_mode",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c workspace mode (\u0434\u043b\u044f CLI integration)",
          "line_range": [
            180,
            196
          ],
          "parameters": [
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            198,
            208
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "search_ai_capabilities",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u0445 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b (Enhanced with caching optimization)",
          "line_range": [
            210,
            271
          ],
          "parameters": [
            "query"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f AI \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435",
          "line_range": [
            273,
            304
          ],
          "parameters": [
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "get_epic_sessions_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u0441\u0435\u0445 \u044d\u043f\u0438\u043a-\u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            306,
            355
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "create_epic_session",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            357,
            378
          ],
          "parameters": [
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "switch_to_session",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            380,
            398
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "get_available_sessions",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            400,
            461
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "session_management_commands",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438",
          "line_range": [
            463,
            489
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "auto_initialize_ai_system": [
          "src_path.exists",
          "get_current_workflow_context",
          "Path",
          "f.exists",
          "logger.error",
          "logger.info",
          "SystemCapabilityDiscovery",
          "len",
          "AI_CAPABILITIES.discover_all_capabilities",
          "print",
          "str"
        ],
        "get_current_workflow_context": [
          "session.get",
          "roadmap_file.exists",
          "Path",
          "roadmap.get",
          "session_file.exists",
          "epic_data.get",
          "logger.info",
          "open",
          "workspace.get",
          "workspace_file.exists",
          "json.load",
          "logger.warning"
        ],
        "get_workflow_status": [
          "roadmap_file.exists",
          "WorkspaceStateManager",
          "get_current_workflow_context",
          "e.get",
          "Path",
          "auto_initialize_ai_system",
          "context.get",
          "logger.error",
          "open",
          "len",
          "roadmap.get",
          "json.load",
          "str"
        ],
        "switch_workspace_mode": [
          "ws.set_mode",
          "WorkspaceStateManager",
          "get_current_workflow_context",
          "Path",
          "logger.error",
          "logger.info",
          "str"
        ],
        "get_ai_status": [
          "auto_initialize_ai_system",
          "get_workflow_status",
          "AI_STATUS.get",
          "AI_CAPABILITIES.get_enhanced_capabilities_summary"
        ],
        "search_ai_capabilities": [
          "struct_file.stat",
          "module.get",
          "Path",
          "auto_initialize_ai_system",
          "func.get",
          "logger.error",
          "len",
          "cache_file.exists",
          "cache_file.stat",
          "logger.info",
          "query.lower",
          "open",
          "data.get",
          "results.append",
          "json.dump",
          "json.load"
        ],
        "get_ai_context": [
          "get_current_workflow_context",
          "auto_initialize_ai_system",
          "logger.error",
          "len",
          "AI_CAPABILITIES.discover_all_capabilities",
          "json.dumps"
        ],
        "get_epic_sessions_status": [
          "session.get",
          "roadmap_file.exists",
          "status_lines.append",
          "Path",
          "roadmap.get",
          "logger.error",
          "epic_data.get",
          "open",
          "sessions_file.exists",
          "json.load"
        ],
        "create_epic_session": [
          "os.system",
          "Path",
          "logger.error",
          "logger.info",
          "epic_id.split"
        ],
        "switch_to_session": [
          "os.system",
          "get_current_workflow_context",
          "Path",
          "logger.error",
          "logger.info"
        ],
        "get_available_sessions": [
          "session.get",
          "current_session_file.exists",
          "roadmap_file.exists",
          "Path",
          "roadmap.get",
          "current_data.get",
          "logger.error",
          "epic_data.get",
          "open",
          "sessions_file.exists",
          "sessions_list.append",
          "json.load",
          "sessions_data.get"
        ],
        "session_management_commands": []
      },
      "dependencies": [
        "Path",
        "SystemCapabilityDiscovery",
        "WorkspaceStateManager",
        "datetime",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.workspace",
        "logging",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "086157de-6db2-407e-8a90-37f9fe86d745"
    }
  ]
}