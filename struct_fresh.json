{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-05-24T11:05:10.091344Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": {
      "goals": [
        "Create universal JSON format for codebase structure (modules, functions, classes, calls, metadata)",
        "Ensure extensibility for new languages and entity types",
        "Develop modular, plugin-based parsers for new languages",
        "Maintain an open, RFC-style documented format",
        "Integrate with LLMs by generating and attaching JSON structure to queries"
      ]
    },
    "stats": {
      "modules_count": 113,
      "functions_count": 480,
      "classes_count": 33,
      "call_edges_count": 1907
    },
    "artifact_id": "1e6c7238-4c68-4087-95db-fe598fc8d2e6",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "b4184257-08ff-46bf-8d1f-b85db8508b03",
        "metadata": {}
      },
      {
        "path": ".github",
        "type": "directory",
        "artifact_id": "74c4fc7b-12fb-4092-810f-3c4922107861",
        "metadata": {}
      },
      {
        "path": ".github/workflows",
        "type": "directory",
        "artifact_id": "2a436ef4-bf16-4af2-9b62-526d2b9116c1",
        "metadata": {}
      },
      {
        "path": ".llmstruct_cache",
        "type": "directory",
        "artifact_id": "44fb5e96-703c-4758-89f2-ddf86c762818",
        "metadata": {}
      },
      {
        "path": "bak",
        "type": "directory",
        "artifact_id": "51d1c96d-65ff-4bbd-98f1-649338e59d7d",
        "metadata": {}
      },
      {
        "path": "collector.py",
        "type": "file",
        "artifact_id": "de84cb13-c48a-41db-9f8c-ef0c6ba940bd",
        "metadata": {}
      },
      {
        "path": "data",
        "type": "directory",
        "artifact_id": "f79025f5-7e96-4d3a-8aae-8e207af3e44f",
        "metadata": {}
      },
      {
        "path": "data/artifacts",
        "type": "directory",
        "artifact_id": "86808a34-394b-4dcb-b363-b8ffe3f61307",
        "metadata": {}
      },
      {
        "path": "data/copilot",
        "type": "directory",
        "artifact_id": "c9f7de40-bd5e-469d-be3d-f59faacd9c04",
        "metadata": {}
      },
      {
        "path": "docs",
        "type": "directory",
        "artifact_id": "2958572b-a5fd-4b42-8005-e962f928af69",
        "metadata": {}
      },
      {
        "path": "docs/ai-session-monitor",
        "type": "directory",
        "artifact_id": "e30162ec-0427-48ec-8e26-b3e150dbbe33",
        "metadata": {}
      },
      {
        "path": "docs/cache.py",
        "type": "file",
        "artifact_id": "552646d4-4024-42a9-b5f5-caeed36d9948",
        "metadata": {}
      },
      {
        "path": "docs/cli.py",
        "type": "file",
        "artifact_id": "63b1965b-ecbe-45a6-b05d-86584fd24dff",
        "metadata": {}
      },
      {
        "path": "docs/examples",
        "type": "directory",
        "artifact_id": "b2742ad4-673b-418c-8ff9-0104ea7626cb",
        "metadata": {}
      },
      {
        "path": "docs/internal",
        "type": "directory",
        "artifact_id": "a8903a04-3bbc-406b-b372-b50f77662ea8",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru",
        "type": "directory",
        "artifact_id": "2d4ede2d-7410-4f13-a0ca-99d384673055",
        "metadata": {}
      },
      {
        "path": "docs/json_selector.py",
        "type": "file",
        "artifact_id": "eb18639e-1314-4560-9f0d-c9fa597d62bf",
        "metadata": {}
      },
      {
        "path": "docs/ru",
        "type": "directory",
        "artifact_id": "d9b36e3f-ef0a-4fd7-b8b5-14cfa4c73243",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples",
        "type": "directory",
        "artifact_id": "a20e014e-e030-40f1-803d-ae39b10c5934",
        "metadata": {}
      },
      {
        "path": "docs/self_run.py",
        "type": "file",
        "artifact_id": "3395635e-746f-46aa-b886-23fa9940c62b",
        "metadata": {}
      },
      {
        "path": "docs/test_self_run.py",
        "type": "file",
        "artifact_id": "d8547e24-6a9a-49a4-8af6-3821b8db2d6c",
        "metadata": {}
      },
      {
        "path": "examples",
        "type": "directory",
        "artifact_id": "ad1011bb-5412-4042-8b27-e82a1156e5d5",
        "metadata": {}
      },
      {
        "path": "examples/python_project_main.py",
        "type": "file",
        "artifact_id": "72dab63d-9ec6-4b23-98ee-495ba794d08f",
        "metadata": {}
      },
      {
        "path": "examples/python_project_utils.py",
        "type": "file",
        "artifact_id": "20bbfb62-57eb-4df7-9bb2-b95ce32b06b3",
        "metadata": {}
      },
      {
        "path": "internal",
        "type": "directory",
        "artifact_id": "c0ec061c-8a3f-416e-9114-961ca05a331b",
        "metadata": {}
      },
      {
        "path": "schema",
        "type": "directory",
        "artifact_id": "6fb66899-1748-4b8b-91f6-1c9efa5248e1",
        "metadata": {}
      },
      {
        "path": "schema/common",
        "type": "directory",
        "artifact_id": "55c19aaa-806b-46d8-8bd2-451cdf00f640",
        "metadata": {}
      },
      {
        "path": "schema/plugins",
        "type": "directory",
        "artifact_id": "3546b13d-233a-42bf-821a-fbbbf3479f6e",
        "metadata": {}
      },
      {
        "path": "scripts",
        "type": "directory",
        "artifact_id": "387354f6-f93b-4d2f-a50b-8028e5f741e2",
        "metadata": {}
      },
      {
        "path": "scripts/auto_update_struct.py",
        "type": "file",
        "artifact_id": "d201b36d-f412-4537-a592-096a4cc85120",
        "metadata": {}
      },
      {
        "path": "scripts/collector.py",
        "type": "file",
        "artifact_id": "ee2d314d-cb8a-4f19-af86-46bbb836a16f",
        "metadata": {}
      },
      {
        "path": "scripts/deploy_embedded_files.py",
        "type": "file",
        "artifact_id": "7a81f25e-4628-4c5e-aab7-8693dc486bc9",
        "metadata": {}
      },
      {
        "path": "scripts/validate_refs.py",
        "type": "file",
        "artifact_id": "77c08309-5978-483f-b38a-7456d1d04339",
        "metadata": {}
      },
      {
        "path": "sorting_workspace",
        "type": "directory",
        "artifact_id": "e2aaf5bf-7084-4966-8ebc-fa95e7bc3e3d",
        "metadata": {}
      },
      {
        "path": "src",
        "type": "directory",
        "artifact_id": "0b786100-a434-480c-8ca5-10bb976f00ed",
        "metadata": {}
      },
      {
        "path": "src/llmstruct",
        "type": "directory",
        "artifact_id": "4c6cdffc-30fe-47ce-9fbb-20bcb96eaa40",
        "metadata": {}
      },
      {
        "path": "src/llmstruct.egg-info",
        "type": "directory",
        "artifact_id": "9f8151fc-324a-4f68-b670-283e6b8f7b0f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__init__.py",
        "type": "file",
        "artifact_id": "6431d6a6-d71c-410e-9aa7-a9b00366c59f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__main__.py",
        "type": "file",
        "artifact_id": "7651c108-9340-45b9-9142-97a511442f4e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cache.py",
        "type": "file",
        "artifact_id": "b8556b4c-b342-43a9-9c4d-e799f6b3268c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli.py",
        "type": "file",
        "artifact_id": "fd9c89c3-45a5-43f7-bbc5-3bbd310d2de2",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_commands.py",
        "type": "file",
        "artifact_id": "75880b0b-ee4e-481e-9817-87b00ba4f80f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_config.py",
        "type": "file",
        "artifact_id": "b802957e-0c0e-4060-8f48-283338dbecf2",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_core.py",
        "type": "file",
        "artifact_id": "862575f8-cd9d-49cd-a030-72daca71ccef",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_utils.py",
        "type": "file",
        "artifact_id": "862b9977-e257-4cfb-bd09-474de19d83aa",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/copilot.py",
        "type": "file",
        "artifact_id": "96c939d2-856b-4be2-8ce1-ea6a53ef1816",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators",
        "type": "directory",
        "artifact_id": "1e2f7e7c-b312-4e93-b37e-8939afc61f22",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/__init__.py",
        "type": "file",
        "artifact_id": "44f98e78-93ef-4bb1-9c25-daa969e358db",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/json_generator.py",
        "type": "file",
        "artifact_id": "8ae15db5-f47c-43ce-ad4d-d8bebda3060d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/grok.py",
        "type": "file",
        "artifact_id": "a30d174c-f4ae-4cdb-8360-69719090849d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/json_selector.py",
        "type": "file",
        "artifact_id": "bf3d3713-e74c-49d3-b9b4-bd8cc26dc070",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/llm_client.py",
        "type": "file",
        "artifact_id": "9b0df050-c694-409d-aeba-379d964cafc4",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers",
        "type": "directory",
        "artifact_id": "d5b5656f-5b7c-49bd-a7a8-82598b9fe467",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/__init__.py",
        "type": "file",
        "artifact_id": "4a4cf8a2-52cf-4c85-9ef5-4bfc70974298",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/javascript_parser.py",
        "type": "file",
        "artifact_id": "b79d8ff7-7e1c-4477-8a6b-7cd3c0163d69",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/python_parser.py",
        "type": "file",
        "artifact_id": "bc48e260-be30-4873-bd1f-d1bfc45e87e3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/self_run.py",
        "type": "file",
        "artifact_id": "b2b4370a-0e13-4c7c-8f02-ccc3bda2ff97",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates",
        "type": "directory",
        "artifact_id": "1b997f12-219f-4849-a93e-e2e8621d1603",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates/__init__.py",
        "type": "file",
        "artifact_id": "0f890025-cadf-4507-bbbc-b4e48e5dd61b",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators",
        "type": "directory",
        "artifact_id": "bacc6292-f603-47c4-9a61-8b331aaf40be",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/__init__.py",
        "type": "file",
        "artifact_id": "c36ffc57-12d8-428d-b09b-61b3886cb51f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/json_validator.py",
        "type": "file",
        "artifact_id": "790d6d24-3cea-4c33-9e99-5f025a575003",
        "metadata": {}
      },
      {
        "path": "temp_workfiles",
        "type": "directory",
        "artifact_id": "b717bc2a-c362-4d65-a374-58bdf58bc2cc",
        "metadata": {}
      },
      {
        "path": "test_efficiency.py",
        "type": "file",
        "artifact_id": "c3398887-6eab-47d9-8a9e-dfef8cfe8a9e",
        "metadata": {}
      },
      {
        "path": "tests",
        "type": "directory",
        "artifact_id": "e38f91d9-8144-4b0d-ab59-3b436076216d",
        "metadata": {}
      },
      {
        "path": "tests/__init__.py",
        "type": "file",
        "artifact_id": "a45ab034-010b-4880-a2ea-e3875e520553",
        "metadata": {}
      },
      {
        "path": "tests/test_self_run.py",
        "type": "file",
        "artifact_id": "f272569e-7aa7-4ad4-9021-84fb9aaf0b6f",
        "metadata": {}
      },
      {
        "path": "tmp",
        "type": "directory",
        "artifact_id": "f6f90067-7f8b-433e-8f64-e5d30c698477",
        "metadata": {}
      },
      {
        "path": "validate_schemas.py",
        "type": "file",
        "artifact_id": "4fe84468-83cf-4206-a09c-5902c8473d70",
        "metadata": {}
      },
      {
        "path": "verify_llm_response.py",
        "type": "file",
        "artifact_id": "efda6186-acf5-40d5-8bf5-e998ff3b0a84",
        "metadata": {}
      },
      {
        "path": "workflow_archive",
        "type": "directory",
        "artifact_id": "d57dd4cc-3bb2-445a-8eb0-5b606173627e",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "test_efficiency",
      "path": "test_efficiency.py",
      "category": "test",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "3af6f492-ab7d-4d13-9f2b-08f10716b7fa"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "f6452f89-f982-4496-8358-5edd72e8ac1d"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "JSON Schema Validation Script for llmstruct",
      "artifact_id": "c3eaae8b-16a0-4d96-b85f-4492a8bb0604"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "2f57b273-1611-4b3e-8ea9-1e7862148f59"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project.",
      "artifact_id": "8df0b1a3-e72a-4f23-8946-498023bfcce6"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project.",
      "artifact_id": "2b70717b-f27d-465a-90a8-1e12ab42368e"
    },
    {
      "module_id": "docs.test_self_run",
      "path": "docs/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "425daf56-e231-4399-a09e-0ca42687b369"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "f9b5b268-a51e-4217-9d65-29f08b1e3c13"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "40fdec74-34e9-4521-81c3-87e696caaf8a"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "dbb06e60-ca3a-47c4-9545-e51453a8c033"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "8c5166f8-12c5-4ca2-9ffe-f97cd792ef73"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "CLI configuration management.",
      "artifact_id": "384f0bca-5661-4ffc-8dab-23921dd07380"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "69971eeb-f907-428e-b30e-920307503a4e"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "functions": 23,
      "classes": 1,
      "summary": "CLI command processing and handlers.",
      "artifact_id": "7e9c2ba3-1133-46a6-b2d8-649a977fb0b9"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "f5776bad-0dac-4bc5-9217-19dd28ddab7a"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "a241761e-7cb9-4387-89aa-d4ccbd2bfc42"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "CLI utility functions.",
      "artifact_id": "39f348bf-403c-4cfb-813f-72d5f253a473"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "functions": 21,
      "classes": 5,
      "summary": "LLMStruct Copilot Integration Module",
      "artifact_id": "fd2f97c7-b55c-4b0c-b3d6-425408ac45e1"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "a650ca09-cd10-4b0e-a655-6a033137dc18"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "74f0e50e-12b7-4f19-b272-3058dababdcf"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "88ff8446-b21b-42f6-a8b0-ac57ca3fcafa"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "fed8b055-322f-4167-a8b5-ce95a33ace01"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "functions": 16,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "artifact_id": "d8d7c22a-0479-4f9e-91c4-a2dee2b425a5"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Core CLI functionality and main loop.",
      "artifact_id": "efd6208b-02aa-4aed-a9e6-2c341687437e"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "6780758b-17dc-4c15-9156-84db7ed86df1"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "b960364c-40e9-44ba-8b89-c02eb44864d1"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "",
      "artifact_id": "b1d6be21-77b8-4ed0-8c06-b06ac9a96ddd"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "3f59850a-341d-4414-a83d-5500c13ac825"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "1558c799-9ea5-43ae-a919-ae0fa5529c52"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "e1bdb811-a045-488d-9216-e7ced12ecf6c"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "f5892e93-30b2-464d-8ed7-0b97605f6295"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "fca32f61-a798-4668-8c49-f0e29407bf96"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_self_run",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "d7fac6bf-d3d4-4871-a5fb-030716a37f55"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector (1).py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "2ed84d3f-b92d-4523-9a7b-bfc3cc866653"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_self_run",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "1a0469c3-d308-4989-9f53-fbcb33fb256d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_cli.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "34c4c817-227a-43a5-a1aa-a1efc6549fd4"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files (1).py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "ece6fa4a-3161-4a95-a757-9d7bbbf0a014"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_json_selector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "d339277c-7b14-49db-bb1a-2910ca815987"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "e00058a2-01ac-4691-90eb-f6c119f5fdb1"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "220b4872-40b4-4a9f-b56f-175d7ce0e68d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "923186ab-5407-48db-9b9e-7b0fcb11181e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli_parser",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli_parser.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "0037f3ff-4757-4e35-9e35-bdd149681d5f"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "af9b60a6-2b7a-47ab-86f2-089fcce53538"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cache.py",
      "category": "core",
      "functions": 7,
      "classes": 1,
      "summary": "",
      "artifact_id": "b594aa0b-2c70-4e2f-8f02-321cbee14319"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "0930120b-0d84-4fac-8507-648bea894b2e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_deploy_embedded_files",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_deploy_embedded_files.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "49758bac-8ddb-46c2-b250-304692f93191"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "52dda3d0-0848-42e0-b2b1-9a3d48a915f5"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "0d68ed48-77c7-40fe-8abd-a781bea1569b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "ad98fb62-670d-4000-ab44-3e6d25d61ddc"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.extract_artifacts",
      "path": "temp_workfiles/unsorted_mess/22.05.25/extract_artifacts.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "fb9aec0c-2eaf-4b10-b54f-cbd59c9bd633"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.dumper",
      "path": "temp_workfiles/unsorted_mess/dump/dumper.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "82bc272b-54c4-46dd-a7ee-c27379d3d1bb"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "167cc37d-999c-41ef-99d0-1b111dac542d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_utils",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project.",
      "artifact_id": "61e5476c-8d2f-416a-aa33-880779391d83"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ideas_tree",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ideas_tree.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "080b94cd-f7f2-42ab-89b5-646367ac4ece"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "LLMStruct: A tool for generating JSON-based code structures for LLM integration.",
      "artifact_id": "84995fa9-58ba-4886-b039-fe939371acc2"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency1",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency1.py",
      "category": "test",
      "functions": 7,
      "classes": 0,
      "summary": "",
      "artifact_id": "b8d103e6-2f3e-433c-ba75-a3061ae75e69"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency.py",
      "category": "test",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "ea8a7dba-6076-4c58-bb60-5e9176d27c8d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.grok",
      "path": "temp_workfiles/unsorted_mess/dump/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "7417a81b-92b7-416e-ac31-f21df22335e6"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___main__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___main__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "e4dcbcee-edeb-4ecb-b544-30018558e49a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs (1).py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "f079e3e3-bdc7-4026-bad0-e21e58e1f855"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency (1)",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency (1).py",
      "category": "test",
      "functions": 9,
      "classes": 0,
      "summary": "",
      "artifact_id": "3c8ea12a-6fc0-4d76-b2f1-652f18bee518"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "069aff4e-1b2d-489b-a1d0-43a15708e9f4"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_engines",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_engines.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "e7f19904-7ba2-4db9-b312-26930057c250"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_config",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_config.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "2d50d1a4-2e2c-429a-a8b4-972c5c944ecb"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "",
      "artifact_id": "33446a8a-a0fb-4585-95a7-2961a256d305"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "aa61da8e-7f8e-443c-8370-3c96637e6a6f"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "Generate JSON for workspace based on user instructions template.",
      "artifact_id": "7cfdfca2-8c91-40cd-b468-639d5409a32b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs (1).py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "4100773b-aac2-4a5d-b4c4-9633b7b5a43a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "e1025387-dce5-4119-be6b-a121ac038793"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collector",
      "path": "temp_workfiles/unsorted_mess/dump/collector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "add5a7b2-f4aa-4fa4-8034-444c3f345b21"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs (1).py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "4e47f6c2-48d8-4dc4-841c-2ca332225d8e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "9d1e15dc-0501-428f-ac18-10924c800ddc"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.refactored_structure",
      "path": "temp_workfiles/unsorted_mess/dump/refactored_structure.py",
      "category": "core",
      "functions": 5,
      "classes": 3,
      "summary": "",
      "artifact_id": "fc69f3b5-c5aa-4291-9ea6-82089f7e6558"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser (1).py",
      "category": "core",
      "functions": 4,
      "classes": 1,
      "summary": "",
      "artifact_id": "d7e2637b-7f7b-4625-a4d3-431d985d4b37"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_templates___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_templates___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "f755ae7d-48e6-4d81-81ce-4cfd5914c8cc"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end (1)",
      "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end (1).py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "3fd9d7a5-3262-4b65-bbc5-256b2355bed6"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "1138fb9b-b161-4f52-867b-d3841f820859"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_main",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project.",
      "artifact_id": "eb5d593b-cf28-4e74-8a22-3430ee789ff7"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.filter_llmstruct_json",
      "path": "temp_workfiles/unsorted_mess/dump/filter_llmstruct_json.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "3a38bcba-7ac7-412c-bcb6-554b587bba58"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_internal_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_internal_docs.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "e3ebdf9c-995c-4107-bffc-895817ec8d9e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "13cf8d2c-2723-4d68-8884-5f5434b47cc1"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client (3)",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client (3).py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "547be8ca-8116-4598-9bed-6abb2905f7f3"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.tests___init__",
      "path": "temp_workfiles/unsorted_mess/dump/tests___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "artifact_id": "eda0d243-3efa-4570-9951-7215d406f7dc"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.check_docs",
      "path": "temp_workfiles/unsorted_mess/dump/check_docs.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "e335030f-ab6d-42a4-a4bf-1ff2a0a4a9ff"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.javascript_parser",
      "path": "temp_workfiles/unsorted_mess/dump/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "a1386c97-a9ef-4874-9abf-2d879d07d4dd"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.self_run",
      "path": "temp_workfiles/unsorted_mess/dump/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "615f767b-95a8-452e-8903-853ef9a0bf5e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator (1).py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "6267b04a-7602-480a-b32b-2883b8ef367b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end",
      "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "0ac52a02-561e-4168-b582-d7a40e667ead"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/python_parser.py",
      "category": "core",
      "functions": 6,
      "classes": 2,
      "summary": "",
      "artifact_id": "42af02d4-2a41-4d96-a2fa-e1012b334797"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "de4e310c-d5f8-44f9-9028-c7292887ecf1"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli (1).py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "5414c99a-e165-47eb-9aa7-7d0a2ca63800"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency_proxybypass",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency_proxybypass.py",
      "category": "test",
      "functions": 8,
      "classes": 0,
      "summary": "",
      "artifact_id": "b8e1e28f-ba3d-4797-abc8-b1e8afe49ed0"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.scripts_setup_github",
      "path": "temp_workfiles/unsorted_mess/dump/scripts_setup_github.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "57bbacec-0a44-4fac-9486-644650512c8e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__ (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__ (1).py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "760b5d46-ed1d-4044-b4ff-36a75f3321ba"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.cli",
      "path": "temp_workfiles/unsorted_mess/dump/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "fafd4bcc-bb63-4cee-8928-822965c04cf7"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_validators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_validators___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "37c35902-5195-4fbb-ae27-230ffdf594d7"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct (1).py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "Generate JSON for workspace based on user instructions template.",
      "artifact_id": "2bfc2765-a646-486b-9a63-8f948b5c05fd"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_validator",
      "path": "temp_workfiles/unsorted_mess/dump/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "78de3cca-dad0-44b9-aecb-6cb04e193c7e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.validate_json",
      "path": "temp_workfiles/unsorted_mess/dump/validate_json.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "819494c5-64bc-4302-9643-45ab293fc906"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "4e1b15df-9793-4eaf-941b-ef96cac6372a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.clean.internal_cleaner",
      "path": "temp_workfiles/unsorted_mess/dump/clean/internal_cleaner.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "ff2a6160-da0b-4e64-b6e5-a13c5a287bac"
    },
    {
      "module_id": "bak.20250522_102827.scripts.collector",
      "path": "bak/20250522_102827/scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "4065ef84-48b3-406a-82a0-170fc9716ecd"
    },
    {
      "module_id": "bak.20250522_102827.scripts.validate_refs",
      "path": "bak/20250522_102827/scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "9c5e88de-fb9d-41fa-8d61-84f754cce0b3"
    },
    {
      "module_id": "bak.20250522_102827.scripts.deploy_embedded_files",
      "path": "bak/20250522_102827/scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "7a51b614-ff8c-4b4e-813a-4eee254c75c0"
    },
    {
      "module_id": "bak.20250522_131121.scripts.collector",
      "path": "bak/20250522_131121/scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "45245e98-7d93-4cda-8837-200ad3478360"
    },
    {
      "module_id": "bak.20250522_131121.scripts.validate_refs",
      "path": "bak/20250522_131121/scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "bd2d8965-d179-4b15-96d4-ec22b6ebb696"
    },
    {
      "module_id": "bak.20250522_131121.scripts.deploy_embedded_files",
      "path": "bak/20250522_131121/scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "f47643d0-4744-4a55-922f-785840810882"
    },
    {
      "module_id": "tests.test_self_run",
      "path": "tests/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "e5759d37-b429-43d9-8f88-fd98fad4a9e6"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "artifact_id": "8260cef4-aef9-4e4b-9165-9add27b14da3"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "4c5adbc2-9ac9-4018-ae29-c8e05eea544b"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Automatic struct.json update script",
      "artifact_id": "c00749a9-9344-4d3f-959e-d1e8fceb69b9"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "bc924ebb-eb0d-4b49-9baa-2732ee88d954"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "e6154200-c174-4282-9d5e-0ec7afb70485"
    }
  ],
  "modules": [
    {
      "module_id": "test_efficiency",
      "path": "test_efficiency.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_local_address",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "check_ollama",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url"
          ],
          "decorators": []
        },
        {
          "name": "optimize_prompt",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "struct_data",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "check_llmstruct_cli",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_grok",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_key",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "is_local_address": [
          "ipaddress.ip_address",
          "urlparse"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "check_ollama": [
          "str",
          "api_url.replace",
          "response.json",
          "requests.get"
        ],
        "optimize_prompt": [
          "struct_data.split",
          "print",
          "len"
        ],
        "run_llm_request": [
          "response.json",
          "session.post",
          "print",
          "requests.Session",
          "len",
          "is_local_address",
          "time.perf_counter",
          "response.raise_for_status",
          "type",
          "get_system_metrics"
        ],
        "check_llmstruct_cli": [
          "shutil.which"
        ],
        "test_with_llmstruct": [
          "Path",
          "run_llm_request",
          "open",
          "target_path.exists",
          "FileNotFoundError",
          "json.dump",
          "f.read",
          "str",
          "subprocess.run",
          "optimize_prompt",
          "check_llmstruct_cli"
        ],
        "test_without_llmstruct": [
          "run_llm_request",
          "Path",
          "open",
          "f.read",
          "optimize_prompt"
        ],
        "test_with_grok": [
          "test_grok",
          "Path",
          "open",
          "target_path.exists",
          "FileNotFoundError",
          "json.dump",
          "f.read",
          "optimize_prompt"
        ],
        "evaluate_accuracy": [
          "sum",
          "response_text.lower",
          "len"
        ],
        "main": [
          "test_with_llmstruct",
          "parser.add_argument",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "evaluate_accuracy",
          "test_with_grok",
          "open",
          "print",
          "json.dump",
          "str",
          "setup_proxy",
          "check_llmstruct_cli",
          "range",
          "test_without_llmstruct",
          "check_ollama"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "ipaddress",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "shutil",
        "src.llmstruct.grok",
        "subprocess",
        "test_grok",
        "time",
        "urllib.parse",
        "urlparse"
      ],
      "hash": null,
      "artifact_id": "3af6f492-ab7d-4d13-9f2b-08f10716b7fa"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_text_file",
          "docstring": "Check if file is likely a text file based on extension.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_path.exists",
          "Path",
          "gitignore_parser.parse_gitignore"
        ],
        "is_text_file": [],
        "collect_project": [
          "is_text_file",
          "any",
          "Path",
          "root_dir.rglob",
          "logger.error",
          "open",
          "f.read",
          "logger.warning",
          "json.dump",
          "logger.info",
          "str",
          "len",
          "doc_files.items",
          "gitignore",
          "load_gitignore",
          "file_path.is_file"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "f6452f89-f982-4496-8358-5edd72e8ac1d"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "module_doc": "JSON Schema Validation Script for llmstruct\nValidates all enhanced JSON files against their appropriate schemas.\nPart of TSK-130 implementation.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": null,
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "open",
          "print",
          "json.load"
        ],
        "validate_json_against_schema": [
          "str",
          "validate",
          "print"
        ],
        "main": [
          "load_json",
          "print",
          "errors.append",
          "validate_json_against_schema"
        ]
      },
      "dependencies": [
        "ValidationError",
        "draft7_format_checker",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "c3eaae8b-16a0-4d96-b85f-4492a8bb0604"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json_file",
          "docstring": "Load a JSON file and return its contents.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_with_struct",
          "docstring": "Verify llm_response.json against struct.json.",
          "line_range": null,
          "parameters": [
            "response_text",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_without_struct",
          "docstring": "Verify llm_response.json based on LLMstruct principles.",
          "line_range": null,
          "parameters": [
            "response_text"
          ],
          "decorators": []
        },
        {
          "name": "generate_metrics",
          "docstring": "Generate metrics for the response per EXT-004.",
          "line_range": null,
          "parameters": [
            "response_data",
            "server_log"
          ],
          "decorators": []
        },
        {
          "name": "update_tasks_json",
          "docstring": "Append a new task to tasks.json.",
          "line_range": null,
          "parameters": [
            "tasks_file",
            "new_task"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json_file": [
          "logging.error",
          "open",
          "json.load"
        ],
        "verify_response_with_struct": [
          "expected_files.issubset",
          "e.startswith",
          "expected_extensions.issubset",
          "set",
          "expected_goals.issubset",
          "logging.info",
          "struct_data.get",
          "re.findall",
          "logging.error"
        ],
        "verify_response_without_struct": [
          "expected_files.issubset",
          "principle.lower",
          "response_text.lower",
          "expected_extensions.issubset",
          "set",
          "expected_goals.issubset",
          "logging.info",
          "logging.error",
          "re.findall"
        ],
        "generate_metrics": [
          "datetime.utcnow",
          "response_text.split",
          "server_log.get",
          "len",
          "re.findall"
        ],
        "update_tasks_json": [
          "open",
          "json.dump",
          "logging.info",
          "load_json_file",
          "tasks.get"
        ],
        "main": [
          "update_tasks_json",
          "parser.add_argument",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "generate_metrics",
          "open",
          "verify_response_without_struct",
          "json.dump",
          "logging.info",
          "load_json_file",
          "verify_response_with_struct"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "argparse",
        "datetime",
        "json",
        "logging",
        "os",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "2f57b273-1611-4b3e-8ea9-1e7862148f59"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": null,
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "8df0b1a3-e72a-4f23-8946-498023bfcce6"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": null,
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "print",
          "utils.helper"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": null,
      "artifact_id": "2b70717b-f27d-465a-90a8-1e12ab42368e"
    },
    {
      "module_id": "docs.test_self_run",
      "path": "docs/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "str",
          "select_json",
          "open",
          "json.dump"
        ],
        "test_cache_json": [
          "open",
          "cache.get_full_json",
          "json.dump",
          "str",
          "JSONCache",
          "cache.get_metadata",
          "cache.close",
          "cache.cache_json"
        ],
        "test_attach_to_llm_request_init_json": [
          "attach_to_llm_request",
          "open",
          "json.dump",
          "str",
          "JSONCache",
          "cache.close"
        ],
        "test_attach_to_llm_request_missing_file": [
          "attach_to_llm_request",
          "str"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "attach_to_llm_request",
        "filter_json",
        "filter_struct",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "pathlib",
        "pytest",
        "select_json"
      ],
      "hash": null,
      "artifact_id": "425daf56-e231-4399-a09e-0ca42687b369"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": null,
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": null,
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "Path",
          "open",
          "f.read",
          "json.dumps",
          "str",
          "content.encode",
          "json_file.exists",
          "logging.info",
          "logging.error",
          "hashlib.sha256"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "open",
          "logging.error",
          "cursor.fetchone",
          "json.load"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f9b5b268-a51e-4217-9d65-29f08b1e3c13"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "any",
          "module.get",
          "struct.get",
          "filter_json",
          "prompt.lower"
        ],
        "attach_to_llm_request": [
          "filter_struct",
          "Path",
          "select_json",
          "cache.get_full_json",
          "json.dumps",
          "context_file.exists",
          "filter_json",
          "cache.get_metadata",
          "logging.info",
          "logging.error",
          "prompt.lower",
          "cache.cache_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "40fdec74-34e9-4521-81c3-87e696caaf8a"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": null,
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": null,
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "data.get",
          "isinstance",
          "item.get",
          "filtered.append"
        ],
        "select_json": [
          "prefix.startswith",
          "Path",
          "filtered.append",
          "open",
          "path.append",
          "json_file.exists",
          "f.seek",
          "filter_json",
          "ijson.parse",
          "logging.error",
          "current_item.get",
          "json.load"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "dbb06e60-ca3a-47c4-9545-e51453a8c033"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "line.strip",
          "gitignore_path.exists",
          "line.startswith",
          "gitignore_path.open",
          "logging.error"
        ],
        "load_config": [
          "config_path.exists",
          "Path",
          "toml.load",
          "logging.error",
          "config_path\u30aa\u30fc\u30d7\u30f3"
        ],
        "read_file_content": [
          "path.is_file",
          "Path",
          "f.read",
          "path.open",
          "logging.error"
        ],
        "write_to_file": [
          "file_path.open",
          "Path",
          "f.write",
          "str",
          "file_path.exists",
          "logging.warning",
          "base_path.mkdir",
          "logging.info",
          "logging.error"
        ],
        "parse_files_from_response": [
          "files.append",
          "filename.strip",
          "content.strip",
          "re.findall"
        ],
        "interactive": [
          "attach_to_llm_request",
          "get_folder_structure",
          "print",
          "scan_match.group",
          "read_file_content",
          "logging.error",
          "load_gitignore",
          "write_dir.startswith",
          "input",
          "JSONCache",
          "client.query",
          "cache.close",
          "parse",
          "LLMClient",
          "sorted",
          "write_to_file",
          "re.search",
          "json.dumps",
          "write_match.group",
          "logging.warning",
          "os.listdir",
          "Path",
          "parse_files_from_response",
          "files_to_write.append",
          "user_input.lower"
        ],
        "parse": [
          "Path",
          "json.dump",
          "JSONCache",
          "logging.warning",
          "generate_json",
          "logging.info",
          "cache.close",
          "load_config",
          "logging.error",
          "config.get",
          "load_gitignore",
          "cache.cache_json"
        ],
        "query": [
          "Path",
          "json.dump",
          "JSONCache",
          "client.query",
          "logging.info",
          "cache.close",
          "logging.error",
          "LLMClient"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "parser.add_subparsers",
          "subparsers.add_parser",
          "context",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "interactive",
          "review",
          "dogfood",
          "asyncio.run",
          "query_parser.add_argument",
          "interactive_parser.add_argument",
          "query",
          "dogfood_parser.add_argument",
          "review_parser.add_argument",
          "parse",
          "context_parser.add_argument",
          "parse_parser.add_argument"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "8c5166f8-12c5-4ca2-9ffe-f97cd792ef73"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "module_doc": "CLI configuration management.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize configuration manager.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from llmstruct.toml.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "Get cache configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "Get Copilot configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "Get queue configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "Get context configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_gitignore_patterns",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "Get directories to exclude from scanning.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "Get file patterns to include.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "Get file patterns to exclude.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "Get maximum file size for processing (in bytes).",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_auto_update_config",
          "docstring": "Get auto-update configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_auto_update_enabled",
          "docstring": "Check if auto-update is enabled.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "Get path to struct.json file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "Get path to context file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "Save current configuration to file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_config",
          "docstring": "Update configuration value.",
          "line_range": null,
          "parameters": [
            "self",
            "section",
            "key",
            "value"
          ],
          "decorators": []
        },
        {
          "name": "reload_config",
          "docstring": "Reload configuration from file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIConfig",
          "docstring": "Manages CLI configuration from llmstruct.toml and other sources.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize configuration manager.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from llmstruct.toml.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cache_config",
              "docstring": "Get cache configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_copilot_config",
              "docstring": "Get Copilot configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_queue_config",
              "docstring": "Get queue configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_config",
              "docstring": "Get context configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_gitignore_patterns",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "Get directories to exclude from scanning.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_include_patterns",
              "docstring": "Get file patterns to include.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "Get file patterns to exclude.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_max_file_size",
              "docstring": "Get maximum file size for processing (in bytes).",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_auto_update_config",
              "docstring": "Get auto-update configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_auto_update_enabled",
              "docstring": "Check if auto-update is enabled.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_struct_file_path",
              "docstring": "Get path to struct.json file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_file_path",
              "docstring": "Get path to context file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_config",
              "docstring": "Save current configuration to file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_config",
              "docstring": "Update configuration value.",
              "line_range": null,
              "parameters": [
                "self",
                "section",
                "key",
                "value"
              ]
            },
            {
              "name": "reload_config",
              "docstring": "Reload configuration from file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path"
        ],
        "_load_config": [
          "toml.load",
          "logging.error"
        ],
        "get_cache_config": [],
        "get_copilot_config": [],
        "get_queue_config": [],
        "get_context_config": [],
        "get_gitignore_patterns": [
          "Path",
          "line.strip",
          "gitignore_path.exists",
          "line.startswith",
          "gitignore_path.open",
          "logging.error"
        ],
        "get_exclude_dirs": [
          "list",
          "set"
        ],
        "get_include_patterns": [],
        "get_exclude_patterns": [],
        "get_max_file_size": [],
        "get_auto_update_config": [],
        "is_auto_update_enabled": [
          "self.get_auto_update_config"
        ],
        "get_struct_file_path": [],
        "get_context_file_path": [],
        "save_config": [
          "logging.error",
          "toml.dump"
        ],
        "update_config": [
          "self.save_config"
        ],
        "reload_config": [
          "self._load_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "logging",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "384f0bca-5661-4ffc-8dab-23921dd07380"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "prompt.split",
          "response.json",
          "response.raise_for_status",
          "len"
        ],
        "test_grok": [
          "client.generate",
          "GrokClient",
          "time.perf_counter"
        ]
      },
      "dependencies": [
        "requests",
        "time"
      ],
      "hash": null,
      "artifact_id": "69971eeb-f907-428e-b30e-920307503a4e"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "module_doc": "CLI command processing and handlers.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize command processor.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir",
            "config",
            "utils"
          ],
          "decorators": []
        },
        {
          "name": "set_cache",
          "docstring": "Set cache instance.",
          "line_range": null,
          "parameters": [
            "self",
            "cache"
          ],
          "decorators": []
        },
        {
          "name": "set_copilot",
          "docstring": "Set Copilot manager instance.",
          "line_range": null,
          "parameters": [
            "self",
            "copilot_manager"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "Process a command starting with /.",
          "line_range": null,
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "process_prompt",
          "docstring": "Process a regular user prompt (not a command).",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Show help information.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_view",
          "docstring": "View file or directory contents.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_write",
          "docstring": "Write content to file.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_queue",
          "docstring": "Handle queue operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_cache",
          "docstring": "Handle cache operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_copilot",
          "docstring": "Handle Copilot operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_config",
          "docstring": "View or modify configuration.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Show system status.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_backup",
          "docstring": "Create backup of file.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_parse",
          "docstring": "Parse project structure.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_process_queue",
          "docstring": "Process command queue.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_show_queue_status",
          "docstring": "Show queue status.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_clear_queue",
          "docstring": "Clear command queue.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_list_queue",
          "docstring": "List queue items.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_trigger_auto_update",
          "docstring": "Trigger auto-update of struct.json.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "handle_auto_update",
          "docstring": "Handle auto-update struct.json command.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_struct_status",
          "docstring": "Show struct.json status and last update info.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_workflow_trigger",
          "docstring": "Trigger workflow events that may require struct.json update.",
          "line_range": null,
          "parameters": [
            "self",
            "event_type",
            "context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CommandProcessor",
          "docstring": "Processes CLI commands and user prompts.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize command processor.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir",
                "config",
                "utils"
              ]
            },
            {
              "name": "set_cache",
              "docstring": "Set cache instance.",
              "line_range": null,
              "parameters": [
                "self",
                "cache"
              ]
            },
            {
              "name": "set_copilot",
              "docstring": "Set Copilot manager instance.",
              "line_range": null,
              "parameters": [
                "self",
                "copilot_manager"
              ]
            },
            {
              "name": "process_command",
              "docstring": "Process a command starting with /.",
              "line_range": null,
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "process_prompt",
              "docstring": "Process a regular user prompt (not a command).",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Show help information.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_view",
              "docstring": "View file or directory contents.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_write",
              "docstring": "Write content to file.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_queue",
              "docstring": "Handle queue operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_cache",
              "docstring": "Handle cache operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_copilot",
              "docstring": "Handle Copilot operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_config",
              "docstring": "View or modify configuration.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Show system status.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_backup",
              "docstring": "Create backup of file.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_parse",
              "docstring": "Parse project structure.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_process_queue",
              "docstring": "Process command queue.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_show_queue_status",
              "docstring": "Show queue status.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_clear_queue",
              "docstring": "Clear command queue.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_list_queue",
              "docstring": "List queue items.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_trigger_auto_update",
              "docstring": "Trigger auto-update of struct.json.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "handle_auto_update",
              "docstring": "Handle auto-update struct.json command.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_struct_status",
              "docstring": "Show struct.json status and last update info.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_workflow_trigger",
              "docstring": "Trigger workflow events that may require struct.json update.",
              "line_range": null,
              "parameters": [
                "self",
                "event_type",
                "context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "set_cache": [],
        "set_copilot": [],
        "process_command": [
          "command_line.split",
          "print",
          "len",
          "command_line.strip",
          "logging.error"
        ],
        "process_prompt": [
          "logging.error",
          "CopilotEvent",
          "print",
          "prompt.strip"
        ],
        "cmd_help": [
          "print"
        ],
        "cmd_view": [
          "print",
          "args.strip"
        ],
        "cmd_write": [
          "content.endswith",
          "content.startswith",
          "print",
          "match.groups",
          "content.strip",
          "re.match",
          "self._trigger_auto_update"
        ],
        "cmd_queue": [
          "self._list_queue",
          "self._process_queue",
          "print",
          "args.strip",
          "self._clear_queue",
          "self._show_queue_status"
        ],
        "cmd_cache": [
          "len",
          "print",
          "args.strip"
        ],
        "cmd_copilot": [
          "print",
          "CopilotEvent",
          "args.strip"
        ],
        "cmd_config": [
          "print",
          "section.title",
          "args.strip"
        ],
        "cmd_status": [
          "print"
        ],
        "cmd_backup": [
          "print",
          "args.strip"
        ],
        "cmd_parse": [
          "logging.error",
          "print",
          "generate_json"
        ],
        "_process_queue": [
          "queue_data.get",
          "Path",
          "queue_file.open",
          "print",
          "item.get",
          "json.load",
          "queue_file.exists",
          "logging.error"
        ],
        "_show_queue_status": [
          "sum",
          "queue_data.get",
          "Path",
          "queue_file.open",
          "print",
          "len",
          "item.get",
          "json.load",
          "queue_file.exists"
        ],
        "_clear_queue": [
          "Path",
          "queue_file.open",
          "print",
          "json.dump",
          "json.load",
          "queue_file.exists"
        ],
        "_list_queue": [
          "queue_data.get",
          "Path",
          "enumerate",
          "queue_file.open",
          "print",
          "item.get",
          "json.load",
          "queue_file.exists"
        ],
        "_trigger_auto_update": [
          "logging.error",
          "self.handle_auto_update"
        ],
        "handle_auto_update": [
          "Path",
          "script_path.exists",
          "print",
          "str",
          "subprocess.run"
        ],
        "handle_struct_status": [
          "Path",
          "os.stat",
          "struct_path.exists",
          "print",
          "datetime.fromtimestamp"
        ],
        "handle_workflow_trigger": [
          "copilot.close",
          "len",
          "str",
          "initialize_copilot",
          "trigger_copilot_event",
          "self.handle_auto_update"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CopilotContextManager",
        "CopilotEvent",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "cli_config",
        "cli_utils",
        "copilot",
        "datetime",
        "generate_json",
        "initialize_copilot",
        "json",
        "llmstruct.cache",
        "llmstruct.copilot",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "sys",
        "trigger_copilot_event",
        "typing"
      ],
      "hash": null,
      "artifact_id": "7e9c2ba3-1133-46a6-b2d8-649a977fb0b9"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "LLMClient",
        "llm_client"
      ],
      "hash": null,
      "artifact_id": "f5776bad-0dac-4bc5-9217-19dd28ddab7a"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "llmstruct.cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "a241761e-7cb9-4387-89aa-d4ccbd2bfc42"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "module_doc": "CLI utility functions.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize utils with root directory.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read file content with size limit.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "write_file_content",
          "docstring": "Write content to file.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "get_directory_structure",
          "docstring": "Get directory structure using folder generator.",
          "line_range": null,
          "parameters": [
            "self",
            "path",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON content.",
          "line_range": null,
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "format_json",
          "docstring": "Format data as JSON string.",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "indent"
          ],
          "decorators": []
        },
        {
          "name": "generate_unique_id",
          "docstring": "Generate unique ID for commands, queues, etc.",
          "line_range": null,
          "parameters": [
            "self",
            "prefix"
          ],
          "decorators": []
        },
        {
          "name": "safe_path_join",
          "docstring": "Safely join path parts, preventing directory traversal.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_exists",
          "docstring": "Check if file exists.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "dir_exists",
          "docstring": "Check if directory exists.",
          "line_range": null,
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_size",
          "docstring": "Get file size in bytes.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_file",
          "docstring": "Create backup of file with timestamp.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_backups",
          "docstring": "Clean up old backup files, keeping only the most recent ones.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "keep_count"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIUtils",
          "docstring": "Utility functions for CLI operations.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize utils with root directory.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "read_file_content",
              "docstring": "Read file content with size limit.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "max_size"
              ]
            },
            {
              "name": "write_file_content",
              "docstring": "Write content to file.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "content"
              ]
            },
            {
              "name": "get_directory_structure",
              "docstring": "Get directory structure using folder generator.",
              "line_range": null,
              "parameters": [
                "self",
                "path",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ]
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON content.",
              "line_range": null,
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "format_json",
              "docstring": "Format data as JSON string.",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "indent"
              ]
            },
            {
              "name": "generate_unique_id",
              "docstring": "Generate unique ID for commands, queues, etc.",
              "line_range": null,
              "parameters": [
                "self",
                "prefix"
              ]
            },
            {
              "name": "safe_path_join",
              "docstring": "Safely join path parts, preventing directory traversal.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_exists",
              "docstring": "Check if file exists.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "dir_exists",
              "docstring": "Check if directory exists.",
              "line_range": null,
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "get_file_size",
              "docstring": "Get file size in bytes.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "backup_file",
              "docstring": "Create backup of file with timestamp.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "cleanup_old_backups",
              "docstring": "Clean up old backup files, keeping only the most recent ones.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "keep_count"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "read_file_content": [
          "os.stat",
          "open",
          "f.read",
          "logging.warning",
          "logging.error"
        ],
        "write_file_content": [
          "Path",
          "open",
          "f.write",
          "logging.info",
          "logging.error"
        ],
        "get_directory_structure": [
          "get_folder_structure",
          "logging.error",
          "os.listdir",
          "sorted"
        ],
        "validate_json": [
          "json.loads",
          "str"
        ],
        "format_json": [
          "str",
          "logging.error",
          "json.dumps"
        ],
        "generate_unique_id": [
          "int",
          "uuid.uuid4",
          "time.time",
          "str"
        ],
        "safe_path_join": [
          "ValueError",
          "resolved_path.startswith"
        ],
        "file_exists": [
          "self.safe_path_join"
        ],
        "dir_exists": [
          "self.safe_path_join"
        ],
        "get_file_size": [
          "self.safe_path_join"
        ],
        "backup_file": [
          "open",
          "time.time",
          "self.safe_path_join",
          "dst.write",
          "int",
          "logging.error",
          "src.read"
        ],
        "cleanup_old_backups": [
          "os.remove",
          "backups.append",
          "self.safe_path_join",
          "logging.warning",
          "logging.info",
          "int",
          "backups.sort",
          "filename.startswith",
          "os.listdir",
          "filename.split",
          "logging.error"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "39f348bf-403c-4cfb-813f-72d5f253a473"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "module_doc": "LLMStruct Copilot Integration Module\nProvides context-aware development assistance with hybrid copilot capabilities.",
      "functions": [
        {
          "name": "initialize_copilot",
          "docstring": "Initialize copilot context manager for the project.\n\nArgs:\n    project_root: Project root directory\n\nReturns:\n    Configured CopilotContextManager instance",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "trigger_copilot_event",
          "docstring": "Trigger a copilot event and get relevant context.\n\nArgs:\n    manager: CopilotContextManager instance\n    event_type: Type of event\n    file_path: Optional file path\n    **kwargs: Additional event metadata\n\nReturns:\n    Dict with event context",
          "line_range": null,
          "parameters": [
            "manager",
            "event_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "smart_suggest",
          "docstring": "Get smart suggestions based on query and context.\n\nArgs:\n    manager: CopilotContextManager instance\n    query: Query string\n    context: Context type (code, workflow, task, etc.)\n\nReturns:\n    List of suggestions",
          "line_range": null,
          "parameters": [
            "manager",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
          "line_range": null,
          "parameters": [
            "self",
            "project_root",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load copilot configuration from JSON file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_layers",
          "docstring": "Initialize context layers from configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_context_layer",
          "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
          "line_range": null,
          "parameters": [
            "self",
            "layer_name",
            "force"
          ],
          "decorators": []
        },
        {
          "name": "unload_context_layer",
          "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
          "line_range": null,
          "parameters": [
            "self",
            "layer_name"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_event",
          "docstring": "Get relevant context for a copilot event.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
          "line_range": null,
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "suggest_completion",
          "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
          "line_range": null,
          "parameters": [
            "self",
            "current_code",
            "file_path",
            "cursor_position"
          ],
          "decorators": []
        },
        {
          "name": "validate_change",
          "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "change_type"
          ],
          "decorators": []
        },
        {
          "name": "_matches_scope",
          "docstring": "Check if file matches scope pattern.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "scope"
          ],
          "decorators": []
        },
        {
          "name": "_matches_trigger",
          "docstring": "Check if change type matches trigger.",
          "line_range": null,
          "parameters": [
            "self",
            "change_type",
            "trigger"
          ],
          "decorators": []
        },
        {
          "name": "_validate_json_schema",
          "docstring": "Validate JSON file against schema.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_check_circular_dependencies",
          "docstring": "Check for circular dependencies.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_validate_task_references",
          "docstring": "Validate task references in tasks.json.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
          "line_range": null,
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "refresh_all_contexts",
          "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_status",
          "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "export_context",
          "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
          "line_range": null,
          "parameters": [
            "self",
            "layers",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Clean up resources.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextLayer",
          "docstring": "Context layer priorities for copilot integration.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AttachMode",
          "docstring": "Context attachment modes.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLayerConfig",
          "docstring": "Configuration for a context layer.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotEvent",
          "docstring": "Represents a copilot event for context triggering.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotContextManager",
          "docstring": "Manages context layers and integration with GitHub Copilot.\nProvides intelligent context loading and workflow assistance.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
              "line_range": null,
              "parameters": [
                "self",
                "project_root",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load copilot configuration from JSON file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_initialize_layers",
              "docstring": "Initialize context layers from configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_context_layer",
              "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
              "line_range": null,
              "parameters": [
                "self",
                "layer_name",
                "force"
              ]
            },
            {
              "name": "unload_context_layer",
              "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
              "line_range": null,
              "parameters": [
                "self",
                "layer_name"
              ]
            },
            {
              "name": "get_context_for_event",
              "docstring": "Get relevant context for a copilot event.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
              "line_range": null,
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "suggest_completion",
              "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
              "line_range": null,
              "parameters": [
                "self",
                "current_code",
                "file_path",
                "cursor_position"
              ]
            },
            {
              "name": "validate_change",
              "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "change_type"
              ]
            },
            {
              "name": "_matches_scope",
              "docstring": "Check if file matches scope pattern.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "scope"
              ]
            },
            {
              "name": "_matches_trigger",
              "docstring": "Check if change type matches trigger.",
              "line_range": null,
              "parameters": [
                "self",
                "change_type",
                "trigger"
              ]
            },
            {
              "name": "_validate_json_schema",
              "docstring": "Validate JSON file against schema.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_check_circular_dependencies",
              "docstring": "Check for circular dependencies.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_validate_task_references",
              "docstring": "Validate task references in tasks.json.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
              "line_range": null,
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "refresh_all_contexts",
              "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_status",
              "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "export_context",
              "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
              "line_range": null,
              "parameters": [
                "self",
                "layers",
                "format"
              ]
            },
            {
              "name": "close",
              "docstring": "Clean up resources.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path",
          "JSONCache",
          "self._initialize_layers",
          "os.getcwd"
        ],
        "_load_config": [
          "Path",
          "logger.error",
          "open",
          "logger.warning",
          "logger.info",
          "json.load"
        ],
        "_initialize_layers": [
          "layer_config.get",
          "ContextLayerConfig",
          "layers_config.items"
        ],
        "load_context_layer": [
          "logger.error",
          "logger.debug",
          "open",
          "time.time",
          "source_path.exists",
          "logger.warning",
          "logger.info",
          "json.load"
        ],
        "unload_context_layer": [
          "logger.info"
        ],
        "get_context_for_event": [
          "self.load_context_layer",
          "workflow_triggers.get",
          "logger.error",
          "open",
          "source_path.exists",
          "file_triggers.get",
          "json.load",
          "code_triggers.get",
          "triggers.get"
        ],
        "suggest_completion": [
          "struct_context.get",
          "func.get",
          "Path",
          "self.load_context_layer",
          "module.get",
          "str",
          "suggestions.append",
          "current_module.get"
        ],
        "validate_change": [
          "rule.get",
          "self._validate_task_references",
          "self._matches_trigger",
          "len",
          "self._matches_scope",
          "self._validate_json_schema",
          "self._check_circular_dependencies",
          "safety_features.get",
          "result.get"
        ],
        "_matches_scope": [
          "str",
          "Path",
          "fnmatch"
        ],
        "_matches_trigger": [
          "trigger_map.get"
        ],
        "_validate_json_schema": [
          "open",
          "file_path.endswith",
          "json.load"
        ],
        "_check_circular_dependencies": [
          "Path",
          "self.load_context_layer",
          "module.get",
          "len",
          "str",
          "struct_data.get"
        ],
        "_validate_task_references": [
          "file_path.endswith",
          "task_ids.add",
          "open",
          "tasks_data.get",
          "set",
          "task.get",
          "json.load"
        ],
        "get_workflow_suggestions": [
          "workflows.items",
          "workflow.get",
          "self.load_context_layer",
          "suggestions.extend",
          "suggestions.append",
          "command.lower"
        ],
        "refresh_all_contexts": [
          "list",
          "self.load_context_layer",
          "logger.info"
        ],
        "get_context_status": [
          "list"
        ],
        "export_context": [
          "str",
          "list",
          "json.dumps"
        ],
        "close": [
          "logger.info"
        ],
        "initialize_copilot": [
          "CopilotContextManager"
        ],
        "trigger_copilot_event": [
          "manager.get_context_for_event",
          "CopilotEvent"
        ],
        "smart_suggest": [
          "manager.get_workflow_suggestions"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "Union",
        "dataclass",
        "dataclasses",
        "enum",
        "fnmatch",
        "json",
        "llmstruct.cache",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "fd2f97c7-b55c-4b0c-b3d6-425408ac45e1"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": null,
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": null,
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "int",
          "os.getenv",
          "logging.info"
        ],
        "query": [
          "self._query_ollama",
          "Path",
          "self._query_anthropic",
          "json.dumps",
          "self._query_hybrid",
          "self._query_grok",
          "logging.warning",
          "logging.info",
          "json.load",
          "range",
          "logging.error",
          "asyncio.sleep"
        ],
        "_query_grok": [
          "response.json",
          "session.post",
          "aiohttp.ClientSession",
          "logging.info",
          "logging.error",
          "result.get"
        ],
        "_query_anthropic": [
          "response.json",
          "session.post",
          "aiohttp.ClientSession",
          "logging.info",
          "logging.error",
          "result.get"
        ],
        "_query_ollama": [
          "response.json",
          "session.post",
          "aiohttp.ClientSession",
          "logging.info",
          "logging.error",
          "logging.debug",
          "result.get"
        ],
        "_query_hybrid": [
          "self._query_ollama",
          "self._query_anthropic",
          "len",
          "isinstance",
          "self._query_grok",
          "asyncio.gather",
          "logging.info"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "a650ca09-cd10-4b0e-a655-6a033137dc18"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": null,
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": null,
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "Path",
          "open",
          "f.read",
          "json.dumps",
          "str",
          "content.encode",
          "json_file.exists",
          "logging.info",
          "logging.error",
          "hashlib.sha256"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "open",
          "logging.error",
          "cursor.fetchone",
          "json.load"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "74f0e50e-12b7-4f19-b272-3058dababdcf"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "any",
          "module.get",
          "struct.get",
          "str",
          "isinstance",
          "item.get",
          "filter_json",
          "prompt.lower"
        ],
        "attach_to_llm_request": [
          "filter_struct",
          "Path",
          "select_json",
          "cache.get_full_json",
          "json.dumps",
          "context_file.exists",
          "filter_json",
          "cache.get_metadata",
          "logging.info",
          "logging.error",
          "prompt.lower",
          "cache.cache_json"
        ]
      },
      "dependencies": [
        "Any",
        "JSONCache",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "88ff8446-b21b-42f6-a8b0-ac57ca3fcafa"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": null,
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": null,
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "data.get",
          "isinstance",
          "item.get",
          "filtered.append"
        ],
        "select_json": [
          "prefix.startswith",
          "Path",
          "filtered.append",
          "open",
          "path.append",
          "json_file.exists",
          "f.seek",
          "filter_json",
          "ijson.parse",
          "logging.error",
          "current_item.get",
          "json.load"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "fed8b055-322f-4167-a8b5-ce95a33ace01"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "line.strip",
          "gitignore_path.exists",
          "line.startswith",
          "gitignore_path.open",
          "logging.error"
        ],
        "load_config": [
          "config_path.exists",
          "Path",
          "config_path.open",
          "toml.load",
          "logging.error"
        ],
        "read_file_content": [
          "path.is_file",
          "Path",
          "f.read",
          "path.open",
          "logging.error"
        ],
        "write_to_file": [
          "re.sub",
          "file_path.open",
          "Path",
          "f.write",
          "str",
          "file_path.exists",
          "base_path.mkdir",
          "logging.warning",
          "logging.info",
          "logging.error"
        ],
        "parse_files_from_response": [
          "files.append",
          "filename.strip",
          "content.strip",
          "re.findall"
        ],
        "interactive": [
          "interactive_modular",
          "logging.warning",
          "interactive_legacy"
        ],
        "interactive_modular": [
          "create_cli_core",
          "cli_core.run_interactive_mode"
        ],
        "interactive_legacy": [
          "attach_to_llm_request",
          "get_folder_structure",
          "os.stat",
          "print",
          "subprocess.run",
          "read_file_content",
          "logging.error",
          "load_gitignore",
          "events_data.append",
          "open",
          "input",
          "JSONCache",
          "client.query",
          "cache.close",
          "cache.clear",
          "parse",
          "args_str.strip",
          "LLMClient",
          "cache.list_keys",
          "os.makedirs",
          "workflow.get",
          "sorted",
          "write_to_file",
          "time.ctime",
          "json.dumps",
          "isinstance",
          "logging.warning",
          "re.match",
          "os.listdir",
          "m.group",
          "cache.get_stats",
          "Path",
          "time.time",
          "user_input.startswith",
          "json.dump",
          "len",
          "process_cli_queue_enhanced",
          "user_input.lower",
          "json.load",
          "int",
          "struct_data.get"
        ],
        "process_cli_queue_enhanced": [
          "attach_to_llm_request",
          "workflow.get",
          "options.get",
          "write_to_file",
          "enumerate",
          "get_folder_structure",
          "open",
          "print",
          "time.time",
          "len",
          "isinstance",
          "item.get",
          "client.query",
          "logging.info",
          "json.load",
          "read_file_content",
          "logging.error",
          "load_gitignore"
        ],
        "parse": [
          "Path",
          "json.dump",
          "JSONCache",
          "logging.warning",
          "generate_json",
          "logging.info",
          "cache.close",
          "load_config",
          "logging.error",
          "config.get",
          "load_gitignore",
          "cache.cache_json"
        ],
        "query": [
          "Path",
          "json.dump",
          "JSONCache",
          "client.query",
          "logging.info",
          "cache.close",
          "logging.error",
          "LLMClient"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "copilot": [
          "print",
          "hasattr",
          "manager.load_context_layer",
          "initialize_copilot",
          "manager.validate_change",
          "logging.error",
          "getattr",
          "config_path.exists",
          "open",
          "f.write",
          "template_path.exists",
          "manager.unload_context_layer",
          "manager.get_context_status",
          "manager.export_context",
          "layers.split",
          "manager.close",
          "manager.refresh_all_contexts",
          "Path",
          "shutil.copy",
          "logging.info",
          "enumerate",
          "smart_suggest"
        ],
        "main": [
          "parser.parse_args",
          "review_parser.add_argument",
          "parse_parser.add_argument",
          "copilot_parser.add_argument",
          "interactive_legacy",
          "interactive_parser.add_argument",
          "copilot",
          "dogfood_parser.add_argument",
          "parse",
          "context",
          "subparsers.add_parser",
          "asyncio.run",
          "dogfood",
          "context_parser.add_argument",
          "parser.add_subparsers",
          "argparse.ArgumentParser",
          "review",
          "query_parser.add_argument",
          "query"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "cli_core",
        "copilot",
        "create_cli_core",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "shutil",
        "smart_suggest",
        "subprocess",
        "sys",
        "time",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d8d7c22a-0479-4f9e-91c4-a2dee2b425a5"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "module_doc": "Core CLI functionality and main loop.",
      "functions": [
        {
          "name": "create_cli_core",
          "docstring": "Factory function to create CLI core instance.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI core with root directory.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_cache",
          "docstring": "Initialize cache if enabled in config.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_copilot",
          "docstring": "Initialize Copilot integration if enabled.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive_mode",
          "docstring": "Run the interactive CLI mode.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "Clean up resources.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLICore",
          "docstring": "Core CLI class handling main loop and coordination.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI core with root directory.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "setup_cache",
              "docstring": "Initialize cache if enabled in config.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_copilot",
              "docstring": "Initialize Copilot integration if enabled.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_interactive_mode",
              "docstring": "Run the interactive CLI mode.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CommandProcessor",
          "CLIUtils",
          "CLIConfig"
        ],
        "setup_cache": [
          "Path",
          "cache_path.mkdir",
          "str",
          "JSONCache",
          "logging.warning",
          "logging.info",
          "cache_config.get"
        ],
        "setup_copilot": [
          "copilot_config.get",
          "logging.warning",
          "initialize_copilot",
          "logging.info"
        ],
        "run_interactive_mode": [
          "print",
          "self.setup_cache",
          "input",
          "user_input.startswith",
          "user_input.lower",
          "logging.error",
          "self.setup_copilot",
          "self.cleanup"
        ],
        "cleanup": [
          "logging.info"
        ],
        "create_cli_core": [
          "CLICore"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "JSONCache",
        "Optional",
        "Path",
        "cli_commands",
        "cli_config",
        "cli_utils",
        "copilot",
        "initialize_copilot",
        "llmstruct.cache",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "efd6208b-02aa-4aed-a9e6-2c341687437e"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "javascript_parser"
      ],
      "hash": null,
      "artifact_id": "6780758b-17dc-4c15-9156-84db7ed86df1"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "open",
          "f.read",
          "hashlib.sha256"
        ],
        "compute_file_metadata": [
          "os.stat",
          "open",
          "sum",
          "self.file_hash"
        ],
        "parse_module": [
          "self.compute_file_metadata",
          "open",
          "f.read",
          "str",
          "esprima.parseModule"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b960364c-40e9-44ba-8b89-c02eb44864d1"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data.",
          "line_range": null,
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_AsyncFunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "compute_file_hash": [
          "open",
          "f.read",
          "hashlib.sha256",
          "logging.error"
        ],
        "analyze_module": [
          "classes.append",
          "functions.append",
          "sorted",
          "Path",
          "list",
          "visitor.visit",
          "open",
          "CallVisitor",
          "f.read",
          "str",
          "ast.get_docstring",
          "isinstance",
          "infer_category",
          "compute_file_hash",
          "ast.parse",
          "logging.error",
          "ast.walk",
          "ast.unparse"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b1d6be21-77b8-4ed0-8c06-b06ac9a96ddd"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "3f59850a-341d-4414-a83d-5500c13ac825"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "1558c799-9ea5-43ae-a919-ae0fa5529c52"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": null,
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": null,
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "Path",
          "open",
          "str",
          "json_file.exists",
          "schema_file.exists",
          "logging.info",
          "json.load",
          "logging.error",
          "validate"
        ],
        "validate_directory": [
          "any",
          "Path",
          "str",
          "json_file.match",
          "validate_struct_json"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "e1bdb811-a045-488d-9216-e7ced12ecf6c"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "p.rstrip",
          "p.endswith",
          "any",
          "sorted",
          "Path",
          "structure.append",
          "os.walk",
          "str",
          "set",
          "uuid.uuid4",
          "file_path.relative_to",
          "file_path.match"
        ],
        "build_toc_and_modules": [
          "p.rstrip",
          "p.endswith",
          "any",
          "modules.append",
          "Path",
          "toc.append",
          "str",
          "len",
          "set",
          "uuid.uuid4",
          "analyze_module",
          "f.match"
        ],
        "generate_json": [
          "sum",
          "Path",
          "get_folder_structure",
          "len",
          "build_toc_and_modules",
          "str",
          "set",
          "uuid.uuid4",
          "list"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "f5892e93-30b2-464d-8ed7-0b97605f6295"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "fca32f61-a798-4668-8c49-f0e29407bf96"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_self_run",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "any",
          "module.get",
          "struct.get",
          "filter_json",
          "prompt.lower"
        ],
        "attach_to_llm_request": [
          "filter_struct",
          "Path",
          "select_json",
          "cache.get_full_json",
          "json.dumps",
          "context_file.exists",
          "filter_json",
          "cache.get_metadata",
          "logging.info",
          "logging.error",
          "prompt.lower",
          "cache.cache_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d7fac6bf-d3d4-4871-a5fb-030716a37f55"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "filtered.append",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "path.relative_to",
          "path.is_file",
          "root_dir.rglob",
          "files.append",
          "str",
          "apply_filters"
        ],
        "generate_struct": [
          "existing.get",
          "Path",
          "json.dump",
          "output_path.open",
          "collect_files",
          "str",
          "len",
          "logger.info",
          "uuid.uuid4",
          "json.load",
          "output_path.exists"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "2ed84d3f-b92d-4523-9a7b-bfc3cc866653"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_self_run",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "str",
          "select_json",
          "open",
          "json.dump"
        ],
        "test_cache_json": [
          "open",
          "cache.get_full_json",
          "json.dump",
          "str",
          "JSONCache",
          "cache.get_metadata",
          "cache.close",
          "cache.cache_json"
        ],
        "test_attach_to_llm_request_init_json": [
          "attach_to_llm_request",
          "open",
          "json.dump",
          "str",
          "JSONCache",
          "cache.close"
        ],
        "test_attach_to_llm_request_missing_file": [
          "attach_to_llm_request",
          "str"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "attach_to_llm_request",
        "filter_json",
        "filter_struct",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "pathlib",
        "pytest",
        "select_json"
      ],
      "hash": null,
      "artifact_id": "1a0469c3-d308-4989-9f53-fbcb33fb256d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_cli.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "setup_files",
          "docstring": "Set up test files.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "test_interactive_with_cli_json",
          "docstring": "Test interactive mode with cli.json.",
          "line_range": null,
          "parameters": [
            "setup_files",
            "monkeypatch"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "setup_files": [
          "json.dumps"
        ],
        "test_interactive_with_cli_json": [
          "inputs.pop",
          "interactive",
          "AsyncMock",
          "str",
          "patch.object",
          "monkeypatch.setattr",
          "type"
        ]
      },
      "dependencies": [
        "AsyncMock",
        "LLMClient",
        "Path",
        "context",
        "dogfood",
        "interactive",
        "json",
        "llmstruct",
        "llmstruct.cli",
        "patch",
        "pathlib",
        "pytest",
        "read_file_content",
        "review",
        "unittest.mock"
      ],
      "hash": null,
      "artifact_id": "34c4c817-227a-43a5-a1aa-a1efc6549fd4"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "validate",
          "logger.warning"
        ],
        "backup_files": [
          "target_dir.exists",
          "shutil.copytree",
          "datetime.now",
          "logger.info"
        ],
        "deploy_embedded_files": [
          "Path",
          "EMBEDDED_FILES.get",
          "validate_json",
          "logger.error",
          "target_path.exists",
          "target_path.open",
          "json.dump",
          "backup_files",
          "f.write",
          "logger.info",
          "EMBEDDED_FILES.items"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "ece6fa4a-3161-4a95-a757-9d7bbbf0a014"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_json_selector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": null,
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": null,
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "data.get",
          "isinstance",
          "item.get",
          "filtered.append"
        ],
        "select_json": [
          "prefix.startswith",
          "Path",
          "filtered.append",
          "open",
          "path.append",
          "json_file.exists",
          "f.seek",
          "filter_json",
          "ijson.parse",
          "logging.error",
          "current_item.get",
          "json.load"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d339277c-7b14-49db-bb1a-2910ca815987"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "generate_project_json",
          "docstring": "Generate project JSON with schema validation.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "generate_project_json": [
          "Path",
          "open",
          "json.dump",
          "str",
          "cli_path.exists",
          "uuid.uuid4",
          "logging.info",
          "json.load",
          "cli_path.open",
          "validate"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "validate"
      ],
      "hash": null,
      "artifact_id": "e00058a2-01ac-4691-90eb-f6c119f5fdb1"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "idea.get",
          "source_file.exists",
          "Path",
          "logger.error",
          "broken_links.append",
          "logger.info",
          "logger.warning",
          "json.dump",
          "target_file.exists",
          "json.load",
          "enumerate"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "220b4872-40b4-4a9f-b56f-175d7ce0e68d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": null,
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": null,
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "Path",
          "open",
          "f.read",
          "json.dumps",
          "str",
          "content.encode",
          "json_file.exists",
          "logging.info",
          "logging.error",
          "hashlib.sha256"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "open",
          "logging.error",
          "cursor.fetchone",
          "json.load"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "923186ab-5407-48db-9b9e-7b0fcb11181e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli_parser",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "parse_argparse",
          "docstring": "Parse argparse setup in cli.py to extract commands and arguments.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "generate_cli_json",
          "docstring": "Generate cli.json from cli.py.",
          "line_range": null,
          "parameters": [
            "cli_path",
            "output_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_argparse": [
          "arg_name.startswith",
          "any",
          "open",
          "commands.append",
          "f.read",
          "isinstance",
          "next",
          "ast.parse",
          "cmd_args.append",
          "ast.walk",
          "arg_name.lstrip"
        ],
        "generate_cli_json": [
          "open",
          "json.dump",
          "str",
          "uuid.uuid4",
          "parse_argparse",
          "json.load",
          "validate"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "ast",
        "json",
        "jsonschema",
        "pathlib",
        "typing",
        "uuid",
        "validate"
      ],
      "hash": null,
      "artifact_id": "0037f3ff-4757-4e35-9e35-bdd149681d5f"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "filtered.append",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "path.relative_to",
          "path.is_file",
          "root_dir.rglob",
          "files.append",
          "str",
          "apply_filters"
        ],
        "generate_struct": [
          "existing.get",
          "Path",
          "json.dump",
          "output_path.open",
          "collect_files",
          "str",
          "len",
          "logger.info",
          "uuid.uuid4",
          "json.load",
          "output_path.exists"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "af9b60a6-2b7a-47ab-86f2-089fcce53538"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "cache_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "load_cache",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_cache",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_cache",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "task_id",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_context",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        },
        {
          "name": "clear_cache",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ChatCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "cache_path",
                "max_size"
              ]
            },
            {
              "name": "load_cache",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_cache",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_cache",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "task_id",
                "message"
              ]
            },
            {
              "name": "get_context",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "task_id"
              ]
            },
            {
              "name": "clear_cache",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "task_id"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.load_cache"
        ],
        "load_cache": [
          "open",
          "json.load"
        ],
        "save_cache": [
          "open",
          "json.dump"
        ],
        "update_cache": [
          "datetime.utcnow",
          "self.save_cache",
          "len"
        ],
        "get_context": [],
        "clear_cache": [
          "self.save_cache"
        ],
        "main": [
          "cache.get_context",
          "print",
          "json.dumps",
          "cache.update_cache",
          "ChatCache"
        ]
      },
      "dependencies": [
        "datetime",
        "json",
        "os"
      ],
      "hash": null,
      "artifact_id": "b594aa0b-2c70-4e2f-8f02-321cbee14319"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "idea.get",
          "source_file.exists",
          "Path",
          "logger.error",
          "broken_links.append",
          "logger.info",
          "logger.warning",
          "json.dump",
          "target_file.exists",
          "json.load",
          "enumerate"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "0930120b-0d84-4fac-8507-648bea894b2e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_deploy_embedded_files",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_deploy_embedded_files.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "setup_dirs",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "test_deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "setup_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "setup_dirs": [
          "json.dumps",
          "data_dir.mkdir",
          "schemas_dir.mkdir",
          "docs_dir.mkdir"
        ],
        "test_deploy_embedded_files": [
          "deploy_embedded_files",
          "backup_root.glob",
          "len",
          "json.load",
          "list"
        ]
      },
      "dependencies": [
        "Path",
        "deploy_embedded_files",
        "json",
        "pathlib",
        "pytest",
        "scripts.deploy_embedded_files"
      ],
      "hash": null,
      "artifact_id": "49758bac-8ddb-46c2-b250-304692f93191"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_cli_json",
          "docstring": "Load cli.json for command metadata.",
          "line_range": null,
          "parameters": [
            "cli_json_path"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, using cli.json for command metadata.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_cli_json": [
          "cli_json_path.open",
          "cli_json_path.exists",
          "Path",
          "json.load"
        ],
        "interactive": [
          "attach_to_llm_request",
          "print",
          "logging.error",
          "prompt.lower",
          "input",
          "JSONCache",
          "cmd.get",
          "cache.close",
          "client.query",
          "parse",
          "load_cli_json",
          "LLMClient",
          "write_to_file",
          "logging.warning",
          "t.format",
          "cli_json.get",
          "any",
          "Path",
          "parse_files_from_response",
          "user_input.lower"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "52dda3d0-0848-42e0-b2b1-9a3d48a915f5"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "validate",
          "logger.warning"
        ],
        "backup_files": [
          "target_dir.exists",
          "shutil.copytree",
          "datetime.now",
          "logger.info"
        ],
        "deploy_embedded_files": [
          "Path",
          "EMBEDDED_FILES.get",
          "validate_json",
          "logger.error",
          "target_path.exists",
          "target_path.open",
          "json.dump",
          "backup_files",
          "f.write",
          "logger.info",
          "EMBEDDED_FILES.items"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "0d68ed48-77c7-40fe-8abd-a781bea1569b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "line.strip",
          "gitignore_path.exists",
          "line.startswith",
          "gitignore_path.open",
          "logging.error"
        ],
        "load_config": [
          "config_path.exists",
          "Path",
          "toml.load",
          "logging.error",
          "config_path\u30aa\u30fc\u30d7\u30f3"
        ],
        "read_file_content": [
          "path.is_file",
          "Path",
          "f.read",
          "path.open",
          "logging.error"
        ],
        "write_to_file": [
          "file_path.open",
          "Path",
          "f.write",
          "str",
          "file_path.exists",
          "logging.warning",
          "base_path.mkdir",
          "logging.info",
          "logging.error"
        ],
        "parse_files_from_response": [
          "files.append",
          "filename.strip",
          "content.strip",
          "re.findall"
        ],
        "interactive": [
          "attach_to_llm_request",
          "get_folder_structure",
          "print",
          "scan_match.group",
          "read_file_content",
          "logging.error",
          "load_gitignore",
          "write_dir.startswith",
          "input",
          "JSONCache",
          "client.query",
          "cache.close",
          "parse",
          "LLMClient",
          "sorted",
          "write_to_file",
          "re.search",
          "json.dumps",
          "write_match.group",
          "logging.warning",
          "os.listdir",
          "Path",
          "parse_files_from_response",
          "files_to_write.append",
          "user_input.lower"
        ],
        "parse": [
          "Path",
          "json.dump",
          "JSONCache",
          "logging.warning",
          "generate_json",
          "logging.info",
          "cache.close",
          "load_config",
          "logging.error",
          "config.get",
          "load_gitignore",
          "cache.cache_json"
        ],
        "query": [
          "Path",
          "json.dump",
          "JSONCache",
          "client.query",
          "logging.info",
          "cache.close",
          "logging.error",
          "LLMClient"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "parser.add_subparsers",
          "subparsers.add_parser",
          "context",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "interactive",
          "review",
          "dogfood",
          "asyncio.run",
          "query_parser.add_argument",
          "interactive_parser.add_argument",
          "query",
          "dogfood_parser.add_argument",
          "review_parser.add_argument",
          "parse",
          "context_parser.add_argument",
          "parse_parser.add_argument"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "ad98fb62-670d-4000-ab44-3e6d25d61ddc"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.extract_artifacts",
      "path": "temp_workfiles/unsorted_mess/22.05.25/extract_artifacts.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "parse_args",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_artifacts_index",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "index_path"
          ],
          "decorators": []
        },
        {
          "name": "save_artifacts_index",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "index",
            "index_path"
          ],
          "decorators": []
        },
        {
          "name": "calculate_sha256",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "content"
          ],
          "decorators": []
        },
        {
          "name": "extract_artifacts",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "html_file",
            "output_dir",
            "index_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_args": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "parser.parse_args"
        ],
        "load_artifacts_index": [
          "open",
          "json.load"
        ],
        "save_artifacts_index": [
          "open",
          "json.dump"
        ],
        "calculate_sha256": [
          "content.encode",
          "hashlib.sha256"
        ],
        "extract_artifacts": [
          "os.makedirs",
          "title.endswith",
          "artifact.get",
          "datetime.utcnow",
          "save_artifacts_index",
          "BeautifulSoup",
          "open",
          "print",
          "f.read",
          "f.write",
          "load_artifacts_index",
          "calculate_sha256",
          "content_type.split",
          "soup.find_all",
          "extracted.append"
        ],
        "main": [
          "parse_args",
          "print",
          "extract_artifacts"
        ]
      },
      "dependencies": [
        "BeautifulSoup",
        "argparse",
        "bs4",
        "datetime",
        "hashlib",
        "json",
        "os",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "fb9aec0c-2eaf-4b10-b54f-cbd59c9bd633"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.dumper",
      "path": "temp_workfiles/unsorted_mess/dump/dumper.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "json_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "obj"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "json_hash": [
          "hashlib.md5",
          "dumped.encode",
          "json.dumps"
        ]
      },
      "dependencies": [
        "glob",
        "hashlib",
        "json",
        "os"
      ],
      "hash": null,
      "artifact_id": "82bc272b-54c4-46dd-a7ee-c27379d3d1bb"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators___init__.py",
      "category": "core",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JSONGenerator",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "167cc37d-999c-41ef-99d0-1b111dac542d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_utils",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": null,
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "61e5476c-8d2f-416a-aa33-880779391d83"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ideas_tree",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ideas_tree.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "080b94cd-f7f2-42ab-89b5-646367ac4ece"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__.py",
      "category": "core",
      "module_doc": "LLMStruct: A tool for generating JSON-based code structures for LLM integration.\n\nThis package provides modular parsers, generators, and validators to create and validate\nJSON representations of code projects, supporting automation and context-aware LLM assistance.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "84995fa9-58ba-4886-b039-fe939371acc2"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency1",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency1.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "run_llm_request": [
          "response.json",
          "session.post",
          "requests.Session",
          "len",
          "time.perf_counter",
          "get_system_metrics"
        ],
        "test_with_llmstruct": [
          "Path",
          "run_llm_request",
          "open",
          "struct_path.exists",
          "f.read",
          "str",
          "subprocess.run"
        ],
        "test_without_llmstruct": [
          "open",
          "run_llm_request",
          "f.read",
          "Path"
        ],
        "evaluate_accuracy": [
          "sum",
          "response_text.lower",
          "len"
        ],
        "main": [
          "test_with_llmstruct",
          "parser.add_argument",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "evaluate_accuracy",
          "open",
          "print",
          "json.dump",
          "setup_proxy",
          "range",
          "test_without_llmstruct"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "subprocess",
        "time"
      ],
      "hash": null,
      "artifact_id": "b8d103e6-2f3e-433c-ba75-a3061ae75e69"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "payload"
          ],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "run_llm_request": [
          "response.json",
          "requests.post",
          "len",
          "time.perf_counter",
          "get_system_metrics"
        ],
        "test_with_llmstruct": [
          "Path",
          "run_llm_request",
          "open",
          "struct_path.exists",
          "f.read",
          "str",
          "subprocess.run"
        ],
        "test_without_llmstruct": [
          "open",
          "run_llm_request",
          "f.read",
          "Path"
        ],
        "evaluate_accuracy": [
          "sum",
          "response_text.lower",
          "len"
        ],
        "main": [
          "test_with_llmstruct",
          "evaluate_accuracy",
          "open",
          "print",
          "json.dump",
          "range",
          "test_without_llmstruct"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "psutil",
        "requests",
        "subprocess",
        "time"
      ],
      "hash": null,
      "artifact_id": "ea8a7dba-6076-4c58-bb60-5e9176d27c8d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.grok",
      "path": "temp_workfiles/unsorted_mess/dump/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "prompt.split",
          "response.json",
          "response.raise_for_status",
          "len"
        ],
        "test_grok": [
          "client.generate",
          "GrokClient",
          "time.perf_counter"
        ]
      },
      "dependencies": [
        "os",
        "requests"
      ],
      "hash": null,
      "artifact_id": "7417a81b-92b7-416e-ac31-f21df22335e6"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___main__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___main__.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "e4dcbcee-edeb-4ecb-b544-30018558e49a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "f079e3e3-bdc7-4026-bad0-e21e58e1f855"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency (1)",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency (1).py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "check_llmstruct_cli",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_grok",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_key",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "run_llm_request": [
          "response.json",
          "session.post",
          "requests.Session",
          "len",
          "time.perf_counter",
          "get_system_metrics"
        ],
        "check_llmstruct_cli": [
          "shutil.which"
        ],
        "test_with_llmstruct": [
          "Path",
          "run_llm_request",
          "open",
          "target_path.exists",
          "FileNotFoundError",
          "json.dump",
          "f.read",
          "str",
          "subprocess.run",
          "check_llmstruct_cli"
        ],
        "test_without_llmstruct": [
          "open",
          "run_llm_request",
          "f.read",
          "Path"
        ],
        "test_with_grok": [
          "test_grok",
          "Path",
          "open",
          "target_path.exists",
          "FileNotFoundError",
          "json.dump",
          "f.read"
        ],
        "evaluate_accuracy": [
          "sum",
          "response_text.lower",
          "len"
        ],
        "main": [
          "test_with_llmstruct",
          "parser.add_argument",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "evaluate_accuracy",
          "test_with_grok",
          "open",
          "print",
          "json.dump",
          "str",
          "check_llmstruct_cli",
          "setup_proxy",
          "range",
          "test_without_llmstruct"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "shutil",
        "src.llmstruct.grok",
        "subprocess",
        "test_grok",
        "time"
      ],
      "hash": null,
      "artifact_id": "3c8ea12a-6fc0-4d76-b2f1-652f18bee518"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "p.rstrip",
          "p.endswith",
          "any",
          "sorted",
          "Path",
          "structure.append",
          "os.walk",
          "str",
          "set",
          "uuid.uuid4",
          "file_path.relative_to",
          "file_path.match"
        ],
        "build_toc_and_modules": [
          "p.rstrip",
          "p.endswith",
          "any",
          "modules.append",
          "Path",
          "toc.append",
          "str",
          "len",
          "set",
          "uuid.uuid4",
          "analyze_module",
          "f.match"
        ],
        "generate_json": [
          "sum",
          "Path",
          "get_folder_structure",
          "len",
          "build_toc_and_modules",
          "str",
          "set",
          "uuid.uuid4",
          "list"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "069aff4e-1b2d-489b-a1d0-43a15708e9f4"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_engines",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_engines.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "call_llm",
          "docstring": "Call the specified LLM backend with the given prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_ollama",
          "docstring": "Call Ollama with the specified prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_openai",
          "docstring": "Call OpenAI API with the specified prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_anthropic",
          "docstring": "Call Anthropic API with the specified prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_grok",
          "docstring": "Call xAI Grok API with the specified prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "call_llm": [
          "call_openai",
          "ValueError",
          "RuntimeError",
          "call_anthropic",
          "call_ollama",
          "str",
          "call_grok"
        ],
        "call_ollama": [
          "subprocess.run"
        ],
        "call_openai": [
          "ValueError",
          "os.getenv",
          "openai.OpenAI"
        ],
        "call_anthropic": [
          "ValueError",
          "os.getenv",
          "anthropic.Anthropic"
        ],
        "call_grok": [
          "response.json",
          "ValueError",
          "requests.post",
          "os.getenv",
          "response.raise_for_status"
        ]
      },
      "dependencies": [
        "LLM_BACKEND",
        "MODEL_NAME",
        "anthropic",
        "json",
        "llm_client.config",
        "openai",
        "os",
        "requests",
        "subprocess"
      ],
      "hash": null,
      "artifact_id": "e7f19904-7ba2-4db9-b312-26930057c250"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_config",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_config.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "os"
      ],
      "hash": null,
      "artifact_id": "2d50d1a4-2e2c-429a-a8b4-972c5c944ecb"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "file_hash",
          "docstring": "Compute SHA-256 hash of file contents.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "extract_comments",
          "docstring": "Extract single-line and multi-line comments using tokenize.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "Compute file size, last modified time, line count, and optional hash.",
          "line_range": null,
          "parameters": [
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path and dependencies.",
          "line_range": null,
          "parameters": [
            "path",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_signature",
          "docstring": "Generate function signature.",
          "line_range": null,
          "parameters": [
            "func_node"
          ],
          "decorators": []
        },
        {
          "name": "extract_dependencies",
          "docstring": "Extract module-level imports.",
          "line_range": null,
          "parameters": [
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module in a single pass.",
          "line_range": null,
          "parameters": [
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "Extract function calls and module dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "file_hash": [
          "open",
          "f.read",
          "hashlib.sha256",
          "logging.error"
        ],
        "extract_comments": [
          "open",
          "comments.append",
          "logging.error",
          "tokenize.tokenize"
        ],
        "compute_file_metadata": [
          "sum",
          "os.stat",
          "open",
          "file_hash",
          "logging.error"
        ],
        "infer_category": [
          "any",
          "path.lower"
        ],
        "get_signature": [],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "extract_dependencies": [
          "sorted",
          "dependencies.add",
          "dependencies.update",
          "isinstance",
          "set",
          "ast.walk"
        ],
        "analyze_module": [
          "CallVisitor",
          "extract_comments",
          "source.splitlines",
          "compute_file_metadata",
          "methods.append",
          "logging.error",
          "getattr",
          "hashlib.sha256",
          "open",
          "get_signature",
          "classes.append",
          "functions.append",
          "sorted",
          "visitor.visit",
          "str",
          "ast.get_docstring",
          "isinstance",
          "infer_category",
          "ast.parse",
          "extract_dependencies",
          "f.read"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "tokenize",
        "typing"
      ],
      "hash": null,
      "artifact_id": "33446a8a-a0fb-4585-95a7-2961a256d305"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with robust .gitignore filtering using pathlib.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "exclude_patterns.extend",
          "any",
          "sorted",
          "Path",
          "rel_dir.split",
          "structure.append",
          "os.walk",
          "fnmatch.fnmatch",
          "str",
          "dirnames.clear",
          "file_path.relative_to",
          "dir_path.relative_to",
          "logging.debug"
        ],
        "build_toc_and_modules": [
          "exclude_patterns.extend",
          "modules.append",
          "any",
          "sum",
          "Path",
          "rel_dir.split",
          "os.walk",
          "fnmatch.fnmatch",
          "str",
          "len",
          "toc.append",
          "file_path.relative_to",
          "logging.info",
          "analyze_module",
          "dir_path.relative_to",
          "logging.debug"
        ],
        "generate_json": [
          "get_folder_structure",
          "len",
          "build_toc_and_modules"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Tuple",
        "analyze_module",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "aa61da8e-7f8e-443c-8370-3c96637e6a6f"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct.py",
      "category": "core",
      "module_doc": "Generate JSON for workspace based on user instructions template.\n\nCreates structure:\n- metadata with description, instructions, and version\n- toc with module summaries and categories\n- modules with detailed function/class info, comments, call graphs, and categories",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore, logging loaded patterns.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_goals",
          "docstring": "Load goals from semicolon-separated string, file, or interactive editor.",
          "line_range": null,
          "parameters": [
            "goals_input"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "Compute SHA-256 hash of file contents.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "extract_comments",
          "docstring": "Extract single-line and multi-line comments using tokenize.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "Compute file size, last modified time, line count, and optional hash.",
          "line_range": null,
          "parameters": [
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path and dependencies.",
          "line_range": null,
          "parameters": [
            "path",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_signature",
          "docstring": "Generate function signature.",
          "line_range": null,
          "parameters": [
            "func_node"
          ],
          "decorators": []
        },
        {
          "name": "extract_dependencies",
          "docstring": "Extract module-level imports.",
          "line_range": null,
          "parameters": [
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module in a single pass.",
          "line_range": null,
          "parameters": [
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with robust .gitignore filtering using pathlib.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes",
            "goals_input"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "Extract function calls and module dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "load_gitignore": [
          "line.strip",
          "open",
          "len",
          "logging.warning",
          "logging.info",
          "line.startswith",
          "logging.error"
        ],
        "load_goals": [
          "goals_input.split",
          "temp.write",
          "g.strip",
          "tempfile.NamedTemporaryFile",
          "open",
          "line.strip",
          "len",
          "temp.flush",
          "subprocess.run",
          "logging.info",
          "line.startswith",
          "os.unlink",
          "logging.error"
        ],
        "file_hash": [
          "open",
          "f.read",
          "hashlib.sha256",
          "logging.error"
        ],
        "extract_comments": [
          "open",
          "comments.append",
          "logging.error",
          "tokenize.tokenize"
        ],
        "compute_file_metadata": [
          "sum",
          "os.stat",
          "open",
          "file_hash",
          "logging.error"
        ],
        "infer_category": [
          "any",
          "path.lower"
        ],
        "get_signature": [],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "extract_dependencies": [
          "sorted",
          "dependencies.add",
          "dependencies.update",
          "isinstance",
          "set",
          "ast.walk"
        ],
        "analyze_module": [
          "CallVisitor",
          "extract_comments",
          "source.splitlines",
          "compute_file_metadata",
          "methods.append",
          "logging.error",
          "getattr",
          "hashlib.sha256",
          "open",
          "get_signature",
          "classes.append",
          "functions.append",
          "sorted",
          "visitor.visit",
          "str",
          "ast.get_docstring",
          "isinstance",
          "infer_category",
          "ast.parse",
          "extract_dependencies",
          "f.read"
        ],
        "build_toc_and_modules": [
          "exclude_patterns.extend",
          "modules.append",
          "any",
          "sum",
          "Path",
          "rel_dir.split",
          "os.walk",
          "fnmatch.fnmatch",
          "str",
          "len",
          "toc.append",
          "file_path.relative_to",
          "logging.info",
          "analyze_module",
          "dir_path.relative_to",
          "logging.debug",
          "load_gitignore"
        ],
        "generate_json": [
          "len",
          "load_goals",
          "build_toc_and_modules"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "language_patterns.get",
          "open",
          "json.dump",
          "include_patterns.extend",
          "logging.warning",
          "generate_json",
          "logging.info",
          "logging.error"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ast",
        "datetime",
        "fnmatch",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "tempfile",
        "tokenize",
        "typing"
      ],
      "hash": null,
      "artifact_id": "7cfdfca2-8c91-40cd-b468-639d5409a32b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "compute_hash",
          "docstring": "Compute SHA-256 hash of content.",
          "line_range": null,
          "parameters": [
            "content"
          ],
          "decorators": []
        },
        {
          "name": "load_struct_json",
          "docstring": "Load struct.json for metadata.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_llmstruct_toml",
          "docstring": "Load llmstruct.toml for configuration.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_docs",
          "docstring": "Generate all documentation files with idempotency.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "compute_hash": [
          "content.encode",
          "hashlib.sha256"
        ],
        "load_struct_json": [
          "open",
          "struct_path.exists",
          "Path",
          "json.load"
        ],
        "load_llmstruct_toml": [
          "toml.load",
          "open",
          "toml_path.exists",
          "Path"
        ],
        "generate_docs": [
          "datetime.utcnow",
          "open",
          "f.write",
          "logger.info",
          "compute_hash",
          "project_name.lower",
          "chr",
          "toml_data.get",
          "metadata.get",
          "json.dumps",
          "load_llmstruct_toml",
          "str",
          "file_path.exists",
          "load_struct_json",
          "doc_files.items",
          "any",
          "Path",
          "f.read",
          "struct_data.get"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "toml"
      ],
      "hash": null,
      "artifact_id": "4100773b-aac2-4a5d-b4c4-9633b7b5a43a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "e1025387-dce5-4119-be6b-a121ac038793"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collector",
      "path": "temp_workfiles/unsorted_mess/dump/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_path.exists",
          "Path",
          "gitignore_parser.parse_gitignore"
        ],
        "collect_project": [
          "any",
          "Path",
          "root_dir.rglob",
          "open",
          "f.read",
          "json.dump",
          "str",
          "doc_files.items",
          "gitignore",
          "load_gitignore",
          "file_path.is_file"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "add5a7b2-f4aa-4fa4-8034-444c3f345b21"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "should_ignore",
          "docstring": "Check if path should be ignored based on directories or .gitignore.",
          "line_range": null,
          "parameters": [
            "path",
            "root_dir",
            "ignore_dirs",
            "gitignore_patterns"
          ],
          "decorators": []
        },
        {
          "name": "collect_docs",
          "docstring": "Collect all documentation files into a JSON file.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.strip",
          "gitignore_path.exists",
          "open",
          "line.startswith",
          "patterns.append"
        ],
        "should_ignore": [
          "str",
          "path.relative_to",
          "fnmatch",
          "rel_path.startswith"
        ],
        "collect_docs": [
          "path.relative_to",
          "path.is_file",
          "Path",
          "root_dir.rglob",
          "open",
          "print",
          "f.read",
          "json.dump",
          "str",
          "should_ignore",
          "load_gitignore"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "4e47f6c2-48d8-4dc4-841c-2ca332225d8e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "collect_docs",
          "docstring": "Collect all documentation files into a single text file.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "collect_docs": [
          "collected.append",
          "dir_path.rglob",
          "Path",
          "open",
          "print",
          "f.read",
          "f.write",
          "file_path.exists",
          "dir_path.exists",
          "file_path.is_file"
        ]
      },
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "9d1e15dc-0501-428f-ac18-10924c800ddc"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.refactored_structure",
      "path": "temp_workfiles/unsorted_mess/dump/refactored_structure.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "json_path",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "modules",
            "metadata"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "PythonParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "JSONGenerator",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "generate",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "modules",
                "metadata"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "parse_module": [],
        "generate": [],
        "main": [
          "parser.parse_module",
          "parser.add_argument",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "open",
          "json.dump",
          "JavaScriptParser",
          "JSONGenerator",
          "generator.generate",
          "PythonParser"
        ],
        "attach_to_llm_request": [
          "open",
          "json.dumps",
          "json.load"
        ]
      },
      "dependencies": [],
      "hash": null,
      "artifact_id": "fc69f3b5-c5aa-4291-9ea6-82089f7e6558"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path.",
          "line_range": null,
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module to extract functions, classes, and call graph.",
          "line_range": null,
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function and module calls.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "path.lower"
        ],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "analyze_module": [
          "os.stat",
          "CallVisitor",
          "dependencies.update",
          "set",
          "methods.append",
          "logging.error",
          "code.splitlines",
          "hashlib.sha256",
          "open",
          "code.encode",
          "classes.append",
          "functions.append",
          "sorted",
          "visitor.visit",
          "str",
          "datetime.fromtimestamp",
          "isinstance",
          "ast.get_docstring",
          "infer_category",
          "relative_path.encode",
          "ast.parse",
          "ast.walk",
          "Path",
          "f.read",
          "dependencies.add",
          "len",
          "ast.unparse"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "ast",
        "datetime",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d7e2637b-7f7b-4625-a4d3-431d985d4b37"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_templates___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_templates___init__.py",
      "category": "core",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "f755ae7d-48e6-4d81-81ce-4cfd5914c8cc"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end (1)",
      "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end (1).py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_end_to_end",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_end_to_end": [
          "any",
          "output_json.exists",
          "project_dir.mkdir",
          "open",
          "len",
          "str",
          "main",
          "next",
          "json.load",
          "main_py.write_text",
          "utils_py.write_text",
          "validate_struct_json",
          "tasks_json.write_text"
        ]
      },
      "dependencies": [
        "json",
        "llmstruct.cli",
        "llmstruct.validators.json_validator",
        "main",
        "os",
        "pytest",
        "sys",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "3fd9d7a5-3262-4b65-bbc5-256b2355bed6"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_content_hash",
          "docstring": "Calculate hash of content for idempotency.",
          "line_range": null,
          "parameters": [
            "content"
          ],
          "decorators": []
        },
        {
          "name": "create_file",
          "docstring": "Create or update file if content changed.",
          "line_range": null,
          "parameters": [
            "path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "generate_docs_tree",
          "docstring": "Generate Di\u00e1taxis-compliant documentation for llmstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "print_docs_tree",
          "docstring": "Print documentation tree.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_content_hash": [
          "content.encode",
          "hashlib.sha256"
        ],
        "create_file": [
          "get_content_hash",
          "open",
          "print",
          "f.read",
          "f.write",
          "content.strip",
          "path.exists"
        ],
        "generate_docs_tree": [
          "create_file",
          "Path"
        ],
        "print_docs_tree": [
          "root.startswith",
          "root.replace",
          "print",
          "os.walk"
        ]
      },
      "dependencies": [
        "Path",
        "hashlib",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "1138fb9b-b161-4f52-867b-d3841f820859"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_main",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": null,
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "print",
          "utils.helper"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": null,
      "artifact_id": "eb5d593b-cf28-4e74-8a22-3430ee789ff7"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.filter_llmstruct_json",
      "path": "temp_workfiles/unsorted_mess/dump/filter_llmstruct_json.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load .gitignore patterns.",
          "line_range": null,
          "parameters": [
            "gitignore_path"
          ],
          "decorators": []
        },
        {
          "name": "filter_json",
          "docstring": "Filter struct.json to exclude .gitignore paths and optionally tests.",
          "line_range": null,
          "parameters": [
            "data",
            "gitignore_patterns",
            "include_tests"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.strip",
          "open",
          "line.startswith",
          "patterns.append"
        ],
        "filter_json": [
          "any",
          "module.get",
          "len",
          "fnmatch.fnmatch",
          "data.get"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "open",
          "json.dump",
          "str",
          "load_gitignore",
          "filter_json",
          "logging.info",
          "json.load",
          "logging.error",
          "logging.basicConfig"
        ]
      },
      "dependencies": [
        "argparse",
        "fnmatch",
        "json",
        "logging",
        "os"
      ],
      "hash": null,
      "artifact_id": "3a38bcba-7ac7-412c-bcb6-554b587bba58"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_internal_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_internal_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "e3ebdf9c-995c-4107-bffc-895817ec8d9e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": null,
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": null,
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "int",
          "os.getenv",
          "logging.info"
        ],
        "query": [
          "self._query_ollama",
          "Path",
          "self._query_anthropic",
          "json.dumps",
          "self._query_hybrid",
          "self._query_grok",
          "logging.warning",
          "logging.info",
          "json.load",
          "range",
          "logging.error",
          "asyncio.sleep"
        ],
        "_query_grok": [
          "response.json",
          "session.post",
          "aiohttp.ClientSession",
          "logging.info",
          "logging.error",
          "result.get"
        ],
        "_query_anthropic": [
          "response.json",
          "session.post",
          "aiohttp.ClientSession",
          "logging.info",
          "logging.error",
          "result.get"
        ],
        "_query_ollama": [
          "response.json",
          "session.post",
          "aiohttp.ClientSession",
          "logging.info",
          "logging.error",
          "logging.debug",
          "result.get"
        ],
        "_query_hybrid": [
          "self._query_ollama",
          "self._query_anthropic",
          "len",
          "isinstance",
          "self._query_grok",
          "asyncio.gather",
          "logging.info"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "requests",
        "typing",
        "urljoin",
        "urllib.parse"
      ],
      "hash": null,
      "artifact_id": "13cf8d2c-2723-4d68-8884-5f5434b47cc1"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client (3)",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client (3).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": null,
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": null,
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "int",
          "os.getenv"
        ],
        "query": [
          "self._query_ollama",
          "Path",
          "self._query_anthropic",
          "json.dumps",
          "self._query_hybrid",
          "self._query_grok",
          "logging.warning",
          "logging.info",
          "json.load",
          "range",
          "logging.error",
          "asyncio.sleep"
        ],
        "_query_grok": [
          "response.json",
          "session.post",
          "aiohttp.ClientSession",
          "logging.info",
          "logging.error",
          "result.get"
        ],
        "_query_anthropic": [
          "response.json",
          "session.post",
          "aiohttp.ClientSession",
          "logging.info",
          "logging.error",
          "result.get"
        ],
        "_query_ollama": [
          "response.json",
          "urljoin",
          "session.post",
          "aiohttp.ClientSession",
          "logging.info",
          "logging.error",
          "result.get"
        ],
        "_query_hybrid": [
          "self._query_ollama",
          "self._query_anthropic",
          "len",
          "isinstance",
          "self._query_grok",
          "asyncio.gather",
          "logging.info"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "requests",
        "typing",
        "urljoin",
        "urllib.parse"
      ],
      "hash": null,
      "artifact_id": "547be8ca-8116-4598-9bed-6abb2905f7f3"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.tests___init__",
      "path": "temp_workfiles/unsorted_mess/dump/tests___init__.py",
      "category": "core",
      "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "eda0d243-3efa-4570-9951-7215d406f7dc"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.check_docs",
      "path": "temp_workfiles/unsorted_mess/dump/check_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_struct",
          "docstring": "Load struct.json.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_docs",
          "docstring": "Check docs/ against struct.json and dialogue state.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run doc check and print report.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_struct": [
          "open",
          "json.load"
        ],
        "check_docs": [
          "Path",
          "content.lower",
          "open",
          "f.read",
          "struct.get",
          "os.walk",
          "load_struct",
          "issues.append"
        ],
        "main": [
          "check_docs",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "e335030f-ab6d-42a4-a4bf-1ff2a0a4a9ff"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.javascript_parser",
      "path": "temp_workfiles/unsorted_mess/dump/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "open",
          "f.read",
          "hashlib.sha256"
        ],
        "compute_file_metadata": [
          "os.stat",
          "open",
          "sum",
          "self.file_hash"
        ],
        "parse_module": [
          "self.compute_file_metadata",
          "open",
          "f.read",
          "str",
          "esprima.parseModule"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "a1386c97-a9ef-4874-9abf-2d879d07d4dd"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.self_run",
      "path": "temp_workfiles/unsorted_mess/dump/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json based on prompt keywords.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered struct.json to LLM prompt.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "any",
          "prompt.lower",
          "struct.get",
          "module.get"
        ],
        "attach_to_llm_request": [
          "filter_struct",
          "Path",
          "open",
          "json.dumps",
          "context_file.exists",
          "filter_json",
          "json.load",
          "logging.error",
          "prompt.lower"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "615f767b-95a8-452e-8903-853ef9a0bf5e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with robust .gitignore filtering using pathlib.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "any",
          "sorted",
          "Path",
          "structure.append",
          "os.walk",
          "str",
          "file_path.relative_to",
          "file_path.match"
        ],
        "build_toc_and_modules": [
          "modules.append",
          "any",
          "Path",
          "python_parser.analyze_module",
          "toc.append",
          "str",
          "len",
          "f.match"
        ],
        "generate_json": [
          "sum",
          "Path",
          "get_folder_structure",
          "len",
          "build_toc_and_modules",
          "set",
          "list"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers",
        "pathlib",
        "python_parser",
        "typing"
      ],
      "hash": null,
      "artifact_id": "6267b04a-7602-480a-b32b-2883b8ef367b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end",
      "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_end_to_end",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_end_to_end": [
          "output_json.exists",
          "project_dir.mkdir",
          "open",
          "str",
          "main",
          "json.load",
          "main_py.write_text",
          "validate_struct_json"
        ]
      },
      "dependencies": [
        "json",
        "llmstruct.cli",
        "llmstruct.validators.json_validator",
        "main",
        "os",
        "pytest",
        "sys",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "0ac52a02-561e-4168-b582-d7a40e667ead"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        },
        {
          "name": "PythonParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "file_hash": [
          "open",
          "f.read",
          "hashlib.sha256"
        ],
        "compute_file_metadata": [
          "os.stat",
          "open",
          "sum",
          "self.file_hash"
        ],
        "parse_module": [
          "dependencies.append",
          "CallVisitor",
          "set",
          "methods.append",
          "list",
          "self.compute_file_metadata",
          "open",
          "classes.append",
          "functions.append",
          "sorted",
          "visitor.visit",
          "ast.get_docstring",
          "str",
          "isinstance",
          "dependencies.extend",
          "ast.parse",
          "ast.walk",
          "f.read",
          "call.split"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "ast",
        "datetime",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "42af02d4-2a41-4d96-a2fa-e1012b334797"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers___init__.py",
      "category": "core",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "PythonParser",
        "javascript_parser",
        "python_parser"
      ],
      "hash": null,
      "artifact_id": "de4e310c-d5f8-44f9-9028-c7292887ecf1"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_goals",
          "docstring": "Load project goals from pyproject.toml or default.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "line.strip",
          "gitignore_path.exists",
          "line.startswith",
          "gitignore_path.open",
          "logging.error"
        ],
        "load_goals": [
          "Path",
          "pyproject_path.exists",
          "toml.load",
          "pyproject_path.open",
          "logging.error",
          "config.get"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "open",
          "load_goals",
          "json.dump",
          "generate_json",
          "logging.info",
          "logging.error",
          "load_gitignore"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "argparse",
        "generate_json",
        "generators.json_generator",
        "json",
        "logging",
        "os",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "5414c99a-e165-47eb-9aa7-7d0a2ca63800"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency_proxybypass",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency_proxybypass.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "is_local_address",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "is_local_address": [
          "ipaddress.ip_address",
          "urlparse"
        ],
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "run_llm_request": [
          "response.json",
          "session.post",
          "requests.Session",
          "len",
          "is_local_address",
          "time.perf_counter",
          "get_system_metrics"
        ],
        "test_with_llmstruct": [
          "Path",
          "run_llm_request",
          "open",
          "struct_path.exists",
          "f.read",
          "str",
          "subprocess.run"
        ],
        "test_without_llmstruct": [
          "open",
          "run_llm_request",
          "f.read",
          "Path"
        ],
        "evaluate_accuracy": [
          "sum",
          "response_text.lower",
          "len"
        ],
        "main": [
          "test_with_llmstruct",
          "parser.add_argument",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "evaluate_accuracy",
          "open",
          "print",
          "json.dump",
          "setup_proxy",
          "range",
          "test_without_llmstruct"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "ipaddress",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "subprocess",
        "time",
        "urllib.parse",
        "urlparse"
      ],
      "hash": null,
      "artifact_id": "b8e1e28f-ba3d-4797-abc8-b1e8afe49ed0"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.scripts_setup_github",
      "path": "temp_workfiles/unsorted_mess/dump/scripts_setup_github.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "create_issue",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "repo",
            "token",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "setup_ci_cd",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "repo_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_templates",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "repo_dir"
          ],
          "decorators": []
        },
        {
          "name": "update_readme",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "repo_dir",
            "user_guide_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "open",
          "json.load"
        ],
        "create_issue": [
          "response.json",
          "requests.post",
          "task.get"
        ],
        "setup_ci_cd": [
          "ci_yml.write_text",
          "workflow_dir.mkdir",
          "Path"
        ],
        "setup_templates": [
          "template_dir.mkdir",
          "pr_template.write_text",
          "Path",
          "issue_template.write_text"
        ],
        "update_readme": [
          "Path",
          "readme.write_text"
        ],
        "main": [
          "setup_templates",
          "setup_ci_cd",
          "parser.add_argument",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "issue.get",
          "print",
          "create_issue",
          "task.get",
          "load_json",
          "update_readme"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "os",
        "pathlib",
        "requests"
      ],
      "hash": null,
      "artifact_id": "57bbacec-0a44-4fac-9486-644650512c8e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__ (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__ (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "760b5d46-ed1d-4044-b4ff-36a75f3321ba"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.cli",
      "path": "temp_workfiles/unsorted_mess/dump/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "line.strip",
          "gitignore_path.exists",
          "line.startswith",
          "gitignore_path.open",
          "logging.error"
        ],
        "load_config": [
          "config_path.exists",
          "Path",
          "config_path.open",
          "toml.load",
          "logging.error"
        ],
        "read_file_content": [
          "path.is_file",
          "Path",
          "f.read",
          "path.open",
          "logging.error"
        ],
        "write_to_file": [
          "file_path.open",
          "Path",
          "f.write",
          "str",
          "file_path.exists",
          "logging.warning",
          "base_path.mkdir",
          "logging.info",
          "logging.error"
        ],
        "parse_files_from_response": [
          "files.append",
          "filename.strip",
          "content.strip",
          "re.findall"
        ],
        "interactive": [
          "attach_to_llm_request",
          "get_folder_structure",
          "print",
          "scan_match.group",
          "read_file_content",
          "logging.error",
          "load_gitignore",
          "write_dir.startswith",
          "input",
          "client.query",
          "parse",
          "LLMClient",
          "sorted",
          "write_to_file",
          "re.search",
          "json.dumps",
          "write_match.group",
          "logging.warning",
          "os.listdir",
          "Path",
          "parse_files_from_response",
          "files_to_write.append",
          "user_input.lower"
        ],
        "parse": [
          "Path",
          "json.dump",
          "logging.warning",
          "generate_json",
          "logging.info",
          "load_config",
          "logging.error",
          "config.get",
          "load_gitignore"
        ],
        "query": [
          "Path",
          "json.dump",
          "client.query",
          "logging.info",
          "logging.error",
          "LLMClient"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "parser.add_subparsers",
          "subparsers.add_parser",
          "context",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "interactive",
          "review",
          "dogfood",
          "asyncio.run",
          "query_parser.add_argument",
          "interactive_parser.add_argument",
          "query",
          "dogfood_parser.add_argument",
          "review_parser.add_argument",
          "parse",
          "context_parser.add_argument",
          "parse_parser.add_argument"
        ]
      },
      "dependencies": [
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "fafd4bcc-bb63-4cee-8928-822965c04cf7"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_validators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_validators___init__.py",
      "category": "core",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "37c35902-5195-4fbb-ae27-230ffdf594d7"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct (1).py",
      "category": "core",
      "module_doc": "Generate JSON for workspace based on user instructions template.\n\nCreates structure:\n- metadata with description, instructions, and version\n- toc with module summaries and categories\n- modules with detailed function/class info, comments, call graphs, and categories",
      "functions": [
        {
          "name": "load_goals",
          "docstring": "Load goals from file or interactive editor.",
          "line_range": null,
          "parameters": [
            "goals_file"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "Compute SHA-256 hash of file contents.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "extract_comments",
          "docstring": "Extract single-line and multi-line comments using tokenize.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "Compute file size, last modified time, line count, and optional hash.",
          "line_range": null,
          "parameters": [
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path and dependencies.",
          "line_range": null,
          "parameters": [
            "path",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_signature",
          "docstring": "Generate function signature.",
          "line_range": null,
          "parameters": [
            "func_node"
          ],
          "decorators": []
        },
        {
          "name": "extract_dependencies",
          "docstring": "Extract module-level imports.",
          "line_range": null,
          "parameters": [
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module in a single pass.",
          "line_range": null,
          "parameters": [
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with filtering.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes",
            "goals_file"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "Extract function calls and module dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "load_goals": [
          "temp.write",
          "tempfile.NamedTemporaryFile",
          "line.strip",
          "open",
          "temp.flush",
          "subprocess.run",
          "line.startswith",
          "os.unlink",
          "logging.error"
        ],
        "file_hash": [
          "open",
          "f.read",
          "hashlib.sha256",
          "logging.error"
        ],
        "extract_comments": [
          "open",
          "comments.append",
          "logging.error",
          "tokenize.tokenize"
        ],
        "compute_file_metadata": [
          "sum",
          "os.stat",
          "open",
          "file_hash",
          "logging.error"
        ],
        "infer_category": [
          "any",
          "path.lower"
        ],
        "get_signature": [],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "extract_dependencies": [
          "sorted",
          "dependencies.add",
          "dependencies.update",
          "isinstance",
          "set",
          "ast.walk"
        ],
        "analyze_module": [
          "CallVisitor",
          "extract_comments",
          "source.splitlines",
          "compute_file_metadata",
          "methods.append",
          "logging.error",
          "getattr",
          "hashlib.sha256",
          "open",
          "get_signature",
          "classes.append",
          "functions.append",
          "sorted",
          "visitor.visit",
          "str",
          "ast.get_docstring",
          "isinstance",
          "infer_category",
          "ast.parse",
          "extract_dependencies",
          "f.read"
        ],
        "build_toc_and_modules": [
          "exclude_patterns.extend",
          "modules.append",
          "any",
          "sum",
          "dirpath.split",
          "os.walk",
          "fnmatch.fnmatch",
          "len",
          "toc.append",
          "analyze_module",
          "load_gitignore"
        ],
        "generate_json": [
          "len",
          "load_goals",
          "build_toc_and_modules"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "open",
          "json.dump",
          "generate_json",
          "logging.info",
          "logging.error"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "argparse",
        "ast",
        "datetime",
        "fnmatch",
        "hashlib",
        "json",
        "logging",
        "os",
        "subprocess",
        "tempfile",
        "tokenize",
        "typing"
      ],
      "hash": null,
      "artifact_id": "2bfc2765-a646-486b-9a63-8f948b5c05fd"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_validator",
      "path": "temp_workfiles/unsorted_mess/dump/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": null,
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": null,
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "Path",
          "open",
          "str",
          "json_file.exists",
          "schema_file.exists",
          "logging.info",
          "json.load",
          "logging.error",
          "validate"
        ],
        "validate_directory": [
          "any",
          "Path",
          "str",
          "json_file.match",
          "validate_struct_json"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "78de3cca-dad0-44b9-aecb-6cb04e193c7e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.validate_json",
      "path": "temp_workfiles/unsorted_mess/dump/validate_json.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "open",
          "print",
          "str",
          "json.load",
          "validate"
        ]
      },
      "dependencies": [
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "819494c5-64bc-4302-9643-45ab293fc906"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore, logging loaded patterns.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_goals",
          "docstring": "Load goals from semicolon-separated string, file, or interactive editor.",
          "line_range": null,
          "parameters": [
            "goals_input"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.strip",
          "open",
          "len",
          "logging.warning",
          "logging.info",
          "line.startswith",
          "logging.error"
        ],
        "load_goals": [
          "goals_input.split",
          "temp.write",
          "g.strip",
          "tempfile.NamedTemporaryFile",
          "open",
          "line.strip",
          "len",
          "temp.flush",
          "subprocess.run",
          "logging.info",
          "line.startswith",
          "os.unlink",
          "logging.error"
        ],
        "main": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "language_patterns.get",
          "open",
          "load_goals",
          "json.dump",
          "include_patterns.extend",
          "logging.warning",
          "generate_json",
          "logging.info",
          "logging.error",
          "load_gitignore"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "argparse",
        "generate_json",
        "generators.json_generator",
        "logging",
        "os",
        "subprocess",
        "tempfile",
        "typing"
      ],
      "hash": null,
      "artifact_id": "4e1b15df-9793-4eaf-941b-ef96cac6372a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.clean.internal_cleaner",
      "path": "temp_workfiles/unsorted_mess/dump/clean/internal_cleaner.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "normalize",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "record"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "normalize": [
          "str",
          "isinstance",
          "content.strip",
          "record.get",
          "id.strip"
        ]
      },
      "dependencies": [
        "collections",
        "defaultdict",
        "glob",
        "json",
        "os"
      ],
      "hash": null,
      "artifact_id": "ff2a6160-da0b-4e64-b6e5-a13c5a287bac"
    },
    {
      "module_id": "bak.20250522_102827.scripts.collector",
      "path": "bak/20250522_102827/scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "filtered.append",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "path.relative_to",
          "path.is_file",
          "root_dir.rglob",
          "files.append",
          "str",
          "apply_filters"
        ],
        "generate_struct": [
          "existing.get",
          "Path",
          "json.dump",
          "output_path.open",
          "collect_files",
          "str",
          "len",
          "logger.info",
          "uuid.uuid4",
          "json.load",
          "output_path.exists"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "4065ef84-48b3-406a-82a0-170fc9716ecd"
    },
    {
      "module_id": "bak.20250522_102827.scripts.validate_refs",
      "path": "bak/20250522_102827/scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "idea.get",
          "source_file.exists",
          "Path",
          "logger.error",
          "broken_links.append",
          "logger.info",
          "logger.warning",
          "json.dump",
          "target_file.exists",
          "json.load",
          "enumerate"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "9c5e88de-fb9d-41fa-8d61-84f754cce0b3"
    },
    {
      "module_id": "bak.20250522_102827.scripts.deploy_embedded_files",
      "path": "bak/20250522_102827/scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "validate",
          "logger.warning"
        ],
        "backup_files": [
          "target_dir.exists",
          "shutil.copytree",
          "datetime.now",
          "logger.info"
        ],
        "deploy_embedded_files": [
          "Path",
          "EMBEDDED_FILES.get",
          "validate_json",
          "logger.error",
          "target_path.exists",
          "target_path.open",
          "json.dump",
          "backup_files",
          "f.write",
          "logger.info",
          "EMBEDDED_FILES.items"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "7a51b614-ff8c-4b4e-813a-4eee254c75c0"
    },
    {
      "module_id": "bak.20250522_131121.scripts.collector",
      "path": "bak/20250522_131121/scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "filtered.append",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "path.relative_to",
          "path.is_file",
          "root_dir.rglob",
          "files.append",
          "str",
          "apply_filters"
        ],
        "generate_struct": [
          "existing.get",
          "Path",
          "json.dump",
          "output_path.open",
          "collect_files",
          "str",
          "len",
          "logger.info",
          "uuid.uuid4",
          "json.load",
          "output_path.exists"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "45245e98-7d93-4cda-8837-200ad3478360"
    },
    {
      "module_id": "bak.20250522_131121.scripts.validate_refs",
      "path": "bak/20250522_131121/scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "idea.get",
          "source_file.exists",
          "Path",
          "logger.error",
          "broken_links.append",
          "logger.info",
          "logger.warning",
          "json.dump",
          "target_file.exists",
          "json.load",
          "enumerate"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "bd2d8965-d179-4b15-96d4-ec22b6ebb696"
    },
    {
      "module_id": "bak.20250522_131121.scripts.deploy_embedded_files",
      "path": "bak/20250522_131121/scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.error",
          "RefResolver",
          "logger.warning",
          "validate"
        ],
        "backup_files": [
          "target_dir.exists",
          "shutil.copytree",
          "datetime.now",
          "logger.info"
        ],
        "deploy_embedded_files": [
          "Path",
          "EMBEDDED_FILES.get",
          "validate_json",
          "logger.error",
          "target_path.exists",
          "target_path.open",
          "logger.warning",
          "backup_files",
          "Path.cwd",
          "json.dump",
          "f.write",
          "logger.info"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "f47643d0-4744-4a55-922f-785840810882"
    },
    {
      "module_id": "tests.test_self_run",
      "path": "tests/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "str",
          "select_json",
          "open",
          "json.dump"
        ],
        "test_cache_json": [
          "open",
          "cache.get_full_json",
          "json.dump",
          "str",
          "JSONCache",
          "cache.get_metadata",
          "cache.close",
          "cache.cache_json"
        ],
        "test_attach_to_llm_request_init_json": [
          "attach_to_llm_request",
          "open",
          "json.dump",
          "str",
          "JSONCache",
          "cache.close"
        ],
        "test_attach_to_llm_request_missing_file": [
          "attach_to_llm_request",
          "str"
        ]
      },
      "dependencies": [
        "JSONCache",
        "attach_to_llm_request",
        "filter_json",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "select_json"
      ],
      "hash": null,
      "artifact_id": "e5759d37-b429-43d9-8f88-fd98fad4a9e6"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "8260cef4-aef9-4e4b-9165-9add27b14da3"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "filtered.append",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "path.relative_to",
          "path.is_file",
          "root_dir.rglob",
          "files.append",
          "str",
          "apply_filters"
        ],
        "generate_struct": [
          "existing.get",
          "Path",
          "json.dump",
          "output_path.open",
          "collect_files",
          "str",
          "len",
          "logger.info",
          "uuid.uuid4",
          "json.load",
          "output_path.exists"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "4c5adbc2-9ac9-4018-ae29-c8e05eea544b"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.",
      "functions": [
        {
          "name": "detect_project_changes",
          "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_struct_json",
          "docstring": "Create a backup of existing struct.json.",
          "line_range": null,
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_struct_json",
          "docstring": "Validate generated struct.json for basic structure.",
          "line_range": null,
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "update_struct_json",
          "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful",
          "line_range": null,
          "parameters": [
            "root_dir",
            "struct_path",
            "force",
            "config_override"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for auto-update script.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_config": [],
        "load_gitignore": [],
        "generate_json": [
          "ImportError"
        ],
        "detect_project_changes": [
          "Path",
          "logger.warning",
          "logger.info",
          "subprocess.run",
          "file_path.stat"
        ],
        "backup_struct_json": [
          "Path",
          "logger.error",
          "logger.info",
          "datetime.now",
          "subprocess.run"
        ],
        "validate_struct_json": [
          "logger.error",
          "open",
          "logger.info",
          "json.load"
        ],
        "update_struct_json": [
          "config.get",
          "logger.error",
          "open",
          "logger.info",
          "json.dump",
          "backup_struct_json",
          "os.getcwd",
          "cli_config.get",
          "generate_json",
          "validate_struct_json",
          "subprocess.run",
          "config.update",
          "load_config",
          "detect_project_changes",
          "load_gitignore"
        ],
        "main": [
          "logging.getLogger",
          "parser.add_argument",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "print",
          "os.getcwd",
          "sys.exit",
          "update_struct_json",
          "detect_project_changes"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "generate_json",
        "json",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c00749a9-9344-4d3f-959e-d1e8fceb69b9"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "idea.get",
          "source_file.exists",
          "Path",
          "logger.error",
          "broken_links.append",
          "logger.info",
          "logger.warning",
          "json.dump",
          "target_file.exists",
          "json.load",
          "enumerate"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "bc924ebb-eb0d-4b49-9baa-2732ee88d954"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.error",
          "RefResolver",
          "logger.warning",
          "validate"
        ],
        "backup_files": [
          "target_dir.exists",
          "shutil.copytree",
          "datetime.now",
          "logger.info"
        ],
        "deploy_embedded_files": [
          "Path",
          "EMBEDDED_FILES.get",
          "validate_json",
          "logger.error",
          "target_path.exists",
          "target_path.open",
          "logger.warning",
          "backup_files",
          "Path.cwd",
          "json.dump",
          "f.write",
          "logger.info"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "e6154200-c174-4282-9d5e-0ec7afb70485"
    }
  ]
}