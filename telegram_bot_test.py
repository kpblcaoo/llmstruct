#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç–æ–≤—ã–π Telegram –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å FastAPI
–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ñ–æ—Ä–≥—Ä–∞—É–Ω–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import json
import time
import logging
import aiohttp
import asyncio
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—ã–≤–æ–¥–æ–º –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('telegram_bot_test.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

try:
    from telegram import Update, BotCommand
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
except ImportError:
    print("‚ùå Missing telegram dependencies. Install with: pip install python-telegram-bot")
    exit(1)

class TelegramBotTest:
    def __init__(self, token: str, api_base_url: str = "http://localhost:8000"):
        self.token = token
        self.api_base_url = api_base_url
        self.session = None
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(token).build()
        self.setup_handlers()
        
        logger.info("üß™ Test bot initialized")
    
    async def get_session(self):
        if not self.session:
            self.session = aiohttp.ClientSession()
        return self.session
    
    async def api_call(self, endpoint: str, method: str = "GET", data: dict = None) -> dict:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ API"""
        try:
            session = await self.get_session()
            url = f"{self.api_base_url}/api/v1{endpoint}"
            
            if method == "GET":
                async with session.get(url) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        logger.error(f"API GET error {response.status}: {endpoint}")
                        return {"error": f"HTTP {response.status}"}
            
            elif method == "POST":
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        logger.error(f"API POST error {response.status}: {endpoint}")
                        return {"error": f"HTTP {response.status}"}
                        
        except Exception as e:
            logger.error(f"API call failed: {e}")
            return {"error": str(e)}
    
    async def save_user_message(self, user_id: int, username: str, message: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        result = await self.api_call("/memory/save", "POST", {
            "user_id": user_id,
            "username": username,
            "message": message,
            "timestamp": datetime.now().isoformat()
        })
        
        success = "error" not in result
        if success:
            logger.info(f"üíæ Message saved for {username}: {message[:50]}...")
        else:
            logger.error(f"‚ùå Failed to save message: {result.get('error')}")
        return success
    
    async def get_user_history(self, user_id: int, limit: int = 5) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        result = await self.api_call(f"/memory/history/{user_id}?limit={limit}")
        
        if "error" not in result:
            messages = result.get("messages", [])
            logger.info(f"üìñ Retrieved {len(messages)} messages for user {user_id}")
            return messages
        else:
            logger.error(f"‚ùå Failed to get history: {result.get('error')}")
            return []
    
    async def chat_with_ollama(self, message: str) -> str:
        """–ß–∞—Ç —Å Ollama"""
        result = await self.api_call("/chat/ollama", "POST", {
            "message": message,
            "model": "mistral:latest"
        })
        
        if "error" not in result:
            response = result.get("response", "No response")
            tokens = result.get("tokens_used", 0)
            logger.info(f"ü§ñ Ollama response: {tokens} tokens")
            return response
        else:
            error_msg = f"‚ùå Ollama error: {result.get('error')}"
            logger.error(error_msg)
            return error_msg
    
    async def get_system_status(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        return await self.api_call("/system/health")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("memory", self.memory_command))
        self.application.add_handler(CommandHandler("chat", self.chat_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        logger.info("‚úÖ Handlers setup complete")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        await self.save_user_message(user.id, user.username or "unknown", "/start")
        
        welcome = f"""üß™ **Test Bot Active**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}!

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/status` - —Å—Ç–∞—Ç—É—Å API —Å–µ—Ä–≤–µ—Ä–∞
‚Ä¢ `/memory` - —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è  
‚Ä¢ `/chat <—Å–æ–æ–±—â–µ–Ω–∏–µ>` - —á–∞—Ç —Å Ollama
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —á–∞—Ç–∞

**–õ–æ–≥–∏:** `telegram_bot_test.log`"""
        
        await update.message.reply_text(welcome)
        logger.info(f"üëã Start command from {user.username} ({user.id})")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        user = update.effective_user
        await self.save_user_message(user.id, user.username or "unknown", "/status")
        
        status = await self.get_system_status()
        
        if "error" not in status:
            response = f"""‚úÖ **System Status**

API: {status.get('status', 'unknown')}
Version: {status.get('api_version', 'unknown')}
Metrics: {'‚úÖ' if status.get('metrics_enabled') else '‚ùå'}
Ollama: {'‚úÖ' if status.get('ollama_available') else '‚ùå'}
Time: {status.get('timestamp', 'unknown')}"""
        else:
            response = f"‚ùå **API Error**: {status.get('error')}"
        
        await update.message.reply_text(response)
        logger.info(f"üìä Status command from {user.username}")
    
    async def memory_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /memory"""
        user = update.effective_user
        await self.save_user_message(user.id, user.username or "unknown", "/memory")
        
        history = await self.get_user_history(user.id, 5)
        
        if history:
            response = "üìö **–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):**\n\n"
            for msg in history[-5:]:
                timestamp = msg.get('timestamp', 'unknown')[:16]  # YYYY-MM-DD HH:MM
                message = msg.get('message', 'no message')[:50]
                response += f"‚Ä¢ `{timestamp}` {message}\n"
        else:
            response = "üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞"
        
        await update.message.reply_text(response)
        logger.info(f"üß† Memory command from {user.username}")
    
    async def chat_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /chat"""
        user = update.effective_user
        message_text = update.message.text
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        if len(context.args) > 0:
            user_message = " ".join(context.args)
        else:
            await update.message.reply_text("‚ùå –ù–∞–ø–∏—à–∏: `/chat —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`")
            return
        
        await self.save_user_message(user.id, user.username or "unknown", message_text)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –¥—É–º–∞–µ–º
        await update.message.reply_text("ü§î –î—É–º–∞—é...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Ollama
        response = await self.chat_with_ollama(user_message)
        
        await update.message.reply_text(f"ü§ñ {response}")
        logger.info(f"üí¨ Chat command from {user.username}: {user_message[:30]}...")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        message = update.message.text
        
        await self.save_user_message(user.id, user.username or "unknown", message)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Ç —Å Ollama
        await update.message.reply_text("ü§î –û—Ç–≤–µ—á–∞—é...")
        response = await self.chat_with_ollama(message)
        await update.message.reply_text(f"ü§ñ {response}")
        
        logger.info(f"üí¨ Message from {user.username}: {message[:30]}...")
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.session:
            await self.session.close()
            logger.info("üßπ Session closed")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        print("‚ùå TELEGRAM_BOT_TOKEN not set")
        return
    
    bot = TelegramBotTest(token)
    
    # –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    commands = [
        BotCommand("start", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
        BotCommand("status", "–°—Ç–∞—Ç—É—Å API —Å–µ—Ä–≤–µ—Ä–∞"),
        BotCommand("memory", "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"),
        BotCommand("chat", "–ß–∞—Ç —Å Ollama"),
    ]
    
    logger.info("üöÄ Starting test bot...")
    
    try:
        # –ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ
        bot.application.run_polling(drop_pending_updates=True)
    except KeyboardInterrupt:
        logger.info("üõë Bot stopped by user")
    except Exception as e:
        logger.error(f"‚ùå Bot error: {e}")
    finally:
        # Cleanup –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        logger.info("‚úÖ Bot shutdown complete")

if __name__ == "__main__":
    main() 