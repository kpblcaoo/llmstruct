{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-06-25T20:09:29.096495Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": [],
    "stats": {
      "modules_count": 81,
      "functions_count": 489,
      "classes_count": 87,
      "call_edges_count": 1551
    },
    "artifact_id": "373e052b-1cbe-4ffc-a734-653e7996d98a",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "bb1e7b18-bc0a-479b-a31b-919fe74ea174",
        "metadata": {}
      },
      {
        "path": "llmstruct",
        "type": "directory",
        "artifact_id": "2df0503f-92f1-436e-8fe7-4e2e9447265c",
        "metadata": {}
      },
      {
        "path": "llmstruct.egg-info",
        "type": "directory",
        "artifact_id": "4e3472ff-d96c-4da4-b2ad-3f9e4a20fcbc",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE",
        "type": "directory",
        "artifact_id": "ce4fec87-4cd7-47c0-b612-a6cfcd9115d3",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_argument_parser.py",
        "type": "file",
        "artifact_id": "c5937007-24fe-495a-b5dd-3eca59b9908b",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_commands.py",
        "type": "file",
        "artifact_id": "8afbefa2-ff2c-4091-b0ae-f0de44e632f1",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_config.py",
        "type": "file",
        "artifact_id": "6c01ae12-8c43-437b-a496-b9a30fcca3b9",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_core.py",
        "type": "file",
        "artifact_id": "91f6db42-1407-4f77-9a44-452ca11dd6ac",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_main_commands.py",
        "type": "file",
        "artifact_id": "3d964dc1-33a8-414e-99e9-6ed3ce3ef525",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_utils.py",
        "type": "file",
        "artifact_id": "e38d51b8-9ee8-4194-a76c-a3b4eac2d2c1",
        "metadata": {}
      },
      {
        "path": "llmstruct/__init__.py",
        "type": "file",
        "artifact_id": "9f76e944-a4bd-46f2-8ceb-4932f57ab7ea",
        "metadata": {}
      },
      {
        "path": "llmstruct/__main__.py",
        "type": "file",
        "artifact_id": "21da9469-9fc0-411a-8a37-ad2ec23c4146",
        "metadata": {}
      },
      {
        "path": "llmstruct/api",
        "type": "directory",
        "artifact_id": "2ef5f057-bdde-4dcf-8750-5f5b16403268",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/__init__.py",
        "type": "file",
        "artifact_id": "6708837c-2042-411c-9bc4-cb5be0bcd550",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/app.py",
        "type": "file",
        "artifact_id": "669180ef-deba-4f74-b9fb-2a0fa8d02284",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/config.py",
        "type": "file",
        "artifact_id": "a11b3124-37db-478b-8b3a-9b3a7f91a9c0",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/middleware",
        "type": "directory",
        "artifact_id": "e653a6bb-873d-4860-a9e5-95c906228a4a",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/middleware/__init__.py",
        "type": "file",
        "artifact_id": "09f36c9b-db57-452f-bad4-9018dfe33485",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/middleware/logging.py",
        "type": "file",
        "artifact_id": "7f1c6a80-807e-443b-a5df-a86421624458",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/models",
        "type": "directory",
        "artifact_id": "9bca2b96-b46e-49bc-88d0-e9c802f2a68c",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/models/__init__.py",
        "type": "file",
        "artifact_id": "f24ff323-3bbf-43cc-8d1e-efd128a7ee9d",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/models/requests.py",
        "type": "file",
        "artifact_id": "bfdb8705-1b14-442c-b127-7e7045b3a9b1",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/models/responses.py",
        "type": "file",
        "artifact_id": "8ce3520f-bacd-42d3-9395-10117144cbd9",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/routes",
        "type": "directory",
        "artifact_id": "711fa5c9-08ed-485d-92a7-987d606837a4",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/routes/__init__.py",
        "type": "file",
        "artifact_id": "e4c91594-888c-4289-abb6-9f2a10d42fcb",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/routes/chat.py",
        "type": "file",
        "artifact_id": "412ac3dd-e3fa-45d8-b7bb-92c5f0632a65",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/routes/continue_adapter.py",
        "type": "file",
        "artifact_id": "a87e4de0-d79f-4483-8fa2-de575a682005",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/routes/system.py",
        "type": "file",
        "artifact_id": "3eafe5dc-535f-4976-82bc-1a5375223b1f",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/services",
        "type": "directory",
        "artifact_id": "6cefda68-d827-406c-803f-fcba7410e3d0",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/services/__init__.py",
        "type": "file",
        "artifact_id": "22c0fd89-49a2-4228-9cd2-9e47466acc6a",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/services/chat_session.py",
        "type": "file",
        "artifact_id": "16577c00-09f1-4ff6-94f8-ca4e51df9b45",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/services/cli_bridge.py",
        "type": "file",
        "artifact_id": "fc2228a9-cd4e-4180-9696-2b3b99965ec0",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/services/llm_service.py",
        "type": "file",
        "artifact_id": "c1b6dc2a-dbbb-4856-a2dc-3d17c8e5a311",
        "metadata": {}
      },
      {
        "path": "llmstruct/cache.py",
        "type": "file",
        "artifact_id": "acd9cdc2-e4b1-433b-adea-88dfb56f1455",
        "metadata": {}
      },
      {
        "path": "llmstruct/cli.py",
        "type": "file",
        "artifact_id": "2316e079-eec6-417b-b355-26c706a54c14",
        "metadata": {}
      },
      {
        "path": "llmstruct/core",
        "type": "directory",
        "artifact_id": "371293c7-dcf7-48ef-8c6d-39e1f3d02602",
        "metadata": {}
      },
      {
        "path": "llmstruct/core/__init__.py",
        "type": "file",
        "artifact_id": "2f14c999-f63e-4070-a23f-3c6c9dfd578b",
        "metadata": {}
      },
      {
        "path": "llmstruct/core/config_manager.py",
        "type": "file",
        "artifact_id": "fde2e966-d113-41dc-b78d-8cc63aecc6b6",
        "metadata": {}
      },
      {
        "path": "llmstruct/core/hash_utils.py",
        "type": "file",
        "artifact_id": "7f87ba64-32bd-4bc4-a0c0-d5a02ae75c5c",
        "metadata": {}
      },
      {
        "path": "llmstruct/core/summary_providers.py",
        "type": "file",
        "artifact_id": "001b2642-76cc-4423-9ed6-7bb449ee9dd2",
        "metadata": {}
      },
      {
        "path": "llmstruct/core/uid_generator.py",
        "type": "file",
        "artifact_id": "e2e98d72-4f1c-4a56-b094-61259893a0b6",
        "metadata": {}
      },
      {
        "path": "llmstruct/generators",
        "type": "directory",
        "artifact_id": "cfc39708-befc-422f-b397-ff53e77fce57",
        "metadata": {}
      },
      {
        "path": "llmstruct/generators/__init__.py",
        "type": "file",
        "artifact_id": "9c279b28-4afe-49fa-82e2-52f436a15308",
        "metadata": {}
      },
      {
        "path": "llmstruct/generators/go_json_generator.py",
        "type": "file",
        "artifact_id": "bf26ee9f-89ff-4488-b8e1-b264a51ed278",
        "metadata": {}
      },
      {
        "path": "llmstruct/generators/json_generator.py",
        "type": "file",
        "artifact_id": "639e9f1e-be8f-4a6d-9bdf-396a2d687bb1",
        "metadata": {}
      },
      {
        "path": "llmstruct/json_selector.py",
        "type": "file",
        "artifact_id": "b636dbfd-d743-4352-b86f-4e3274ca6694",
        "metadata": {}
      },
      {
        "path": "llmstruct/llm_client.py",
        "type": "file",
        "artifact_id": "720ec991-58c9-44c0-915b-f25edf831836",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules",
        "type": "directory",
        "artifact_id": "4f249690-e91a-4fec-adae-061160ccd766",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli",
        "type": "directory",
        "artifact_id": "9a59c3da-530f-4138-89b5-61646c3123fe",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/__init__.py",
        "type": "file",
        "artifact_id": "e8a18cf8-967b-45c6-aff4-c4a0e3f449de",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/analyze_duplicates.py",
        "type": "file",
        "artifact_id": "d53de504-b77f-42fc-adc1-47914c61a0f4",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/audit.py",
        "type": "file",
        "artifact_id": "8277ebd9-3057-4ec2-a3c0-ec2360b4118d",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/context.py",
        "type": "file",
        "artifact_id": "67a61e86-82b4-4ec2-a916-f02df701125b",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/copilot.py",
        "type": "file",
        "artifact_id": "4b09ec68-3729-454d-866b-3e8fc501f2ee",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/dogfood.py",
        "type": "file",
        "artifact_id": "5ccb73aa-0666-43f1-be33-ece89b7fa5b4",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/epic.py",
        "type": "file",
        "artifact_id": "b458e38b-45c3-4c26-8da4-8220ae52f764",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/handlers.py",
        "type": "file",
        "artifact_id": "eddeb4df-cbc5-43bd-9401-d9278a6f5584",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/handlers_legacy.py",
        "type": "file",
        "artifact_id": "7e488fce-87da-4edc-a7c3-e7dfeddb4a8e",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/parse.py",
        "type": "file",
        "artifact_id": "3c42ef2f-74cd-4e0c-b80f-b8323bb3940a",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/query.py",
        "type": "file",
        "artifact_id": "78ec85a3-4e50-4999-a972-bfd41313e98a",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/review.py",
        "type": "file",
        "artifact_id": "ee411f46-2f2f-4c77-93d9-2b864a58a212",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/utils.py",
        "type": "file",
        "artifact_id": "0fb52e9c-e4ae-4243-97a6-cfb47c0a34db",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/commands",
        "type": "directory",
        "artifact_id": "a1fb5bd7-e1e0-445c-918b-160fd4b842bc",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/commands/__init__.py",
        "type": "file",
        "artifact_id": "7afd7272-b25b-440f-9320-c66a53ff7140",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/commands/metrics.py",
        "type": "file",
        "artifact_id": "4d260e43-1a1b-41f7-b670-987ca79444a6",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/commands/queue.py",
        "type": "file",
        "artifact_id": "efef95b8-3ab0-4a3b-81a2-d7e8b61e8087",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/commands/services.py",
        "type": "file",
        "artifact_id": "e4ef1745-2f35-42bf-b16d-6044fad938db",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers",
        "type": "directory",
        "artifact_id": "e59454a1-d87c-423b-84c9-fdb728aa80ea",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers/__init__.py",
        "type": "file",
        "artifact_id": "6103d11f-9e55-4e1c-ba59-ab4800d55ab5",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers/go_analyzer.py",
        "type": "file",
        "artifact_id": "a8dabd0d-acef-4e1c-bdc9-2656b984386e",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers/javascript_parser.py",
        "type": "file",
        "artifact_id": "de315715-27f4-4172-8d19-f75b8b8708cb",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers/python_parser.py",
        "type": "file",
        "artifact_id": "293dc12e-8bed-4060-8e51-4737c17e8d02",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers/universal_converter.py",
        "type": "file",
        "artifact_id": "9ff137eb-a1a7-44df-bcf5-bb76416aef1c",
        "metadata": {}
      },
      {
        "path": "llmstruct/self_run.py",
        "type": "file",
        "artifact_id": "fb9eb774-1bea-45be-b3eb-fc3c45f16394",
        "metadata": {}
      },
      {
        "path": "llmstruct/templates",
        "type": "directory",
        "artifact_id": "9f076eeb-2c91-44ed-bd49-c8af5a5906f5",
        "metadata": {}
      },
      {
        "path": "llmstruct/templates/__init__.py",
        "type": "file",
        "artifact_id": "d0635a3d-2e4d-4b6a-b311-b482bd010fed",
        "metadata": {}
      },
      {
        "path": "llmstruct/validators",
        "type": "directory",
        "artifact_id": "6328cb8e-6d43-4a84-8d73-6cc757e52013",
        "metadata": {}
      },
      {
        "path": "llmstruct/validators/__init__.py",
        "type": "file",
        "artifact_id": "d53ea855-2a65-4a2d-9178-64515e4e008b",
        "metadata": {}
      },
      {
        "path": "llmstruct/validators/json_validator.py",
        "type": "file",
        "artifact_id": "013e7024-b402-41c5-bd3b-b658dbf7dfbc",
        "metadata": {}
      },
      {
        "path": "scripts",
        "type": "directory",
        "artifact_id": "b8881744-efe4-414f-92e6-28cb17506eae",
        "metadata": {}
      },
      {
        "path": "scripts/auto_update_struct.py",
        "type": "file",
        "artifact_id": "6eb469f9-eab9-4182-9a28-2ba8b64cb3a4",
        "metadata": {}
      },
      {
        "path": "scripts/collector.py",
        "type": "file",
        "artifact_id": "ff8324ff-ec15-4dac-b91f-9633cf5d8912",
        "metadata": {}
      },
      {
        "path": "scripts/create_comprehensive_index.py",
        "type": "file",
        "artifact_id": "d2386b84-2593-4151-8a51-a6d04caacebe",
        "metadata": {}
      },
      {
        "path": "scripts/create_github_issues.py",
        "type": "file",
        "artifact_id": "9fa58a9f-d12a-4f79-84cb-1eb3cfe3b92f",
        "metadata": {}
      },
      {
        "path": "scripts/create_tasks_index.py",
        "type": "file",
        "artifact_id": "9166570a-040f-4b70-829b-22460c9c9102",
        "metadata": {}
      },
      {
        "path": "scripts/deploy_embedded_files.py",
        "type": "file",
        "artifact_id": "0bae791f-a4f2-4d2c-b658-82f153c26813",
        "metadata": {}
      },
      {
        "path": "scripts/epic_roadmap_manager.py",
        "type": "file",
        "artifact_id": "76335b79-f967-4101-947a-3989784b4fd8",
        "metadata": {}
      },
      {
        "path": "scripts/export_to_github_projects.py",
        "type": "file",
        "artifact_id": "cc51686c-d8e8-4195-af7d-a0fc3f5d4de5",
        "metadata": {}
      },
      {
        "path": "scripts/fix_github_script.py",
        "type": "file",
        "artifact_id": "8780e768-f8e6-422d-9143-9eb6d424dd29",
        "metadata": {}
      },
      {
        "path": "scripts/fix_hardcoded_usernames.py",
        "type": "file",
        "artifact_id": "a3c2c61e-9b12-4ae6-ae36-15a0dd68ecdf",
        "metadata": {}
      },
      {
        "path": "scripts/github_sync_manager.py",
        "type": "file",
        "artifact_id": "70a884d6-5ab4-479f-8517-fa4729526b54",
        "metadata": {}
      },
      {
        "path": "scripts/github_sync_manager_enhanced.py",
        "type": "file",
        "artifact_id": "e5033c04-4d09-4be5-a76f-bc8d9cd0b550",
        "metadata": {}
      },
      {
        "path": "scripts/old",
        "type": "directory",
        "artifact_id": "4a155c7a-d60c-4ddb-9355-f524874b8ce4",
        "metadata": {}
      },
      {
        "path": "scripts/process_926_items.py",
        "type": "file",
        "artifact_id": "671b629c-35f0-4f93-a8dc-3fb770877021",
        "metadata": {}
      },
      {
        "path": "scripts/session_cli.py",
        "type": "file",
        "artifact_id": "4298f4a2-a299-42a1-83d4-298d1490862c",
        "metadata": {}
      },
      {
        "path": "scripts/team",
        "type": "directory",
        "artifact_id": "fa74b602-086e-462d-9821-9a29d51f5d1e",
        "metadata": {}
      },
      {
        "path": "scripts/team/__init__.py",
        "type": "file",
        "artifact_id": "8c45b0ff-7a7f-495a-aebe-4473773e62f5",
        "metadata": {}
      },
      {
        "path": "scripts/validate_epics.py",
        "type": "file",
        "artifact_id": "fc7517cd-e896-41cf-9462-5b2fc3b86da5",
        "metadata": {}
      },
      {
        "path": "scripts/validate_json.py",
        "type": "file",
        "artifact_id": "d9ee7721-a777-4d3f-9d6f-ccc1c1ad3a1b",
        "metadata": {}
      },
      {
        "path": "scripts/validate_refs.py",
        "type": "file",
        "artifact_id": "c019c200-5eb9-477f-9871-b99f7d5a8167",
        "metadata": {}
      },
      {
        "path": "scripts/validate_schemas.py",
        "type": "file",
        "artifact_id": "c9a7ecf0-d421-411e-a76d-6e0fd3e2cd27",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "llmstruct.json_selector",
      "path": "llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "98a9b614-2629-47b2-841d-496fc3d061e2"
    },
    {
      "module_id": "llmstruct.__main__",
      "path": "llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "1a344442-2faf-42df-9e55-7e790cd67db0"
    },
    {
      "module_id": "llmstruct.__init__",
      "path": "llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "14e5d0ed-eb4d-4c00-99ad-86c6d470e3cf"
    },
    {
      "module_id": "llmstruct.cache",
      "path": "llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "62306fc7-9ee1-45a6-b270-2e5bfbe39272"
    },
    {
      "module_id": "llmstruct.self_run",
      "path": "llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "b0cc797f-3c2a-41d5-a320-f1376f698988"
    },
    {
      "module_id": "llmstruct.llm_client",
      "path": "llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "202727a0-8b25-459a-be04-7d0073ecda7b"
    },
    {
      "module_id": "llmstruct.cli",
      "path": "llmstruct/cli.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "artifact_id": "d6816c1a-6197-4c98-bb94-ea5a701d172c"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Automatic struct.json update script",
      "artifact_id": "55b2904a-d417-433e-b9a7-aaaa18165620"
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "58f9dd4c-1cef-4b60-895c-f2cf978a919c"
    },
    {
      "module_id": "scripts.github_sync_manager",
      "path": "scripts/github_sync_manager.py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub",
      "artifact_id": "1e2510f7-404a-459e-9e1f-f9c81dad6362"
    },
    {
      "module_id": "scripts.fix_github_script",
      "path": "scripts/fix_github_script.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Quick fix for GitHub issues creation script",
      "artifact_id": "52963858-db3f-478a-8e2b-dcdd118c100c"
    },
    {
      "module_id": "scripts.create_github_issues",
      "path": "scripts/create_github_issues.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "GitHub Issues Creator for AI-Dogfooding Project",
      "artifact_id": "3e5b3933-8ef6-4aa7-9014-bb8c50bf5a10"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "3c37ba86-084e-477d-892c-d5fc6e38ad80"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "9aaaa4b4-6e2c-4270-a674-e7459affccc5"
    },
    {
      "module_id": "scripts.epic_roadmap_manager",
      "path": "scripts/epic_roadmap_manager.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439",
      "artifact_id": "2b918690-2df0-4bd6-8c22-054e5108d21a"
    },
    {
      "module_id": "scripts.process_926_items",
      "path": "scripts/process_926_items.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "926 Items Processing Script - Updated Implementation",
      "artifact_id": "facf6a34-328f-429a-97d2-d8641acd6f34"
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Session Management CLI",
      "artifact_id": "444a3ab0-8d04-463f-904b-1d701589379d"
    },
    {
      "module_id": "scripts.validate_epics",
      "path": "scripts/validate_epics.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "Epic Data Validator",
      "artifact_id": "9dfa2c71-9dac-4977-ae36-b6acef5ea5ec"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Export script for GitHub Projects integration",
      "artifact_id": "e69a6cfa-f6b3-4f0e-8c03-f6bd4ea65899"
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "JSON Validation Script",
      "artifact_id": "2497d04a-d016-4b45-8bf5-c292dc976c5a"
    },
    {
      "module_id": "scripts.create_comprehensive_index",
      "path": "scripts/create_comprehensive_index.py",
      "category": "core",
      "functions": 37,
      "classes": 2,
      "summary": "Comprehensive Project Index Creator",
      "artifact_id": "66294fc8-1f6d-4a97-833a-99dbca529662"
    },
    {
      "module_id": "scripts.github_sync_manager_enhanced",
      "path": "scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "functions": 28,
      "classes": 3,
      "summary": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout",
      "artifact_id": "214e6da7-e6d6-43ca-ae77-eb7f20013495"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "8907e54f-e773-4b3e-9f40-ffefe1424416"
    },
    {
      "module_id": "scripts.fix_hardcoded_usernames",
      "path": "scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "functions": 12,
      "classes": 2,
      "summary": "Fix Hardcoded Usernames Script",
      "artifact_id": "d3333df2-265b-4f23-92ec-80229032d03a"
    },
    {
      "module_id": "scripts.create_tasks_index",
      "path": "scripts/create_tasks_index.py",
      "category": "core",
      "functions": 18,
      "classes": 3,
      "summary": "Tasks Index Creator",
      "artifact_id": "2d70e5b9-b01d-41d1-8379-79740c821f09"
    },
    {
      "module_id": "llmstruct.templates.__init__",
      "path": "llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "84b4fbd3-b2d7-4399-9c16-f12678bf3ba4"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_argument_parser",
      "path": "llmstruct/ARCHIVE/cli_argument_parser.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "CLI argument parsing for LLMStruct.",
      "artifact_id": "26bf337e-2876-47eb-910d-d42501a93d61"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_core",
      "path": "llmstruct/ARCHIVE/cli_core.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Core CLI functionality and main loop.",
      "artifact_id": "754dd00a-bd56-4b58-b291-0f285b4fb48b"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_utils",
      "path": "llmstruct/ARCHIVE/cli_utils.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "CLI utility functions.",
      "artifact_id": "cd1cb581-8dd4-4999-9e44-0196b2489ab3"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_main_commands",
      "path": "llmstruct/ARCHIVE/cli_main_commands.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "Main CLI command handlers for LLMStruct.",
      "artifact_id": "6adc4585-816b-4418-9f41-86246d89adb8"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_config",
      "path": "llmstruct/ARCHIVE/cli_config.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "CLI configuration management.",
      "artifact_id": "7db27f7c-8873-47dc-9d13-d26b8024e8eb"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_commands",
      "path": "llmstruct/ARCHIVE/cli_commands.py",
      "category": "core",
      "functions": 22,
      "classes": 1,
      "summary": "CLI command processing and handlers.",
      "artifact_id": "aeaaf05d-c6fe-4efc-a947-233ba20deb5b"
    },
    {
      "module_id": "llmstruct.api.__init__",
      "path": "llmstruct/api/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "LLMStruct FastAPI Module",
      "artifact_id": "bb4ffa9e-e8ca-4a39-8c7a-76498a4e437d"
    },
    {
      "module_id": "llmstruct.api.config",
      "path": "llmstruct/api/config.py",
      "category": "core",
      "functions": 0,
      "classes": 1,
      "summary": "Configuration management for LLMStruct FastAPI",
      "artifact_id": "55370731-63b4-4a51-a1f3-9d2f33b4953d"
    },
    {
      "module_id": "llmstruct.api.app",
      "path": "llmstruct/api/app.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Main FastAPI application for LLMStruct",
      "artifact_id": "596b79db-2dd3-455d-825a-e4d244bce349"
    },
    {
      "module_id": "llmstruct.core.hash_utils",
      "path": "llmstruct/core/hash_utils.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "Hash Utilities for LLMStruct",
      "artifact_id": "90b0f7e1-9206-4e19-b8dc-5e1b13926454"
    },
    {
      "module_id": "llmstruct.core.summary_providers",
      "path": "llmstruct/core/summary_providers.py",
      "category": "core",
      "functions": 22,
      "classes": 6,
      "summary": "Summary Providers System",
      "artifact_id": "e60b3fa5-6656-46cd-bb95-fbd80f9df1b3"
    },
    {
      "module_id": "llmstruct.core.uid_generator",
      "path": "llmstruct/core/uid_generator.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "Advanced UID Generator System for LLMStruct v2.1",
      "artifact_id": "13d0cdd6-2b8c-4e24-ac86-7cc8e3c4d080"
    },
    {
      "module_id": "llmstruct.core.__init__",
      "path": "llmstruct/core/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "LLMStruct Core Module",
      "artifact_id": "236c5620-1ab7-4f0b-80aa-bc30e252a997"
    },
    {
      "module_id": "llmstruct.core.config_manager",
      "path": "llmstruct/core/config_manager.py",
      "category": "core",
      "functions": 12,
      "classes": 6,
      "summary": "Configuration Management System for LLMStruct",
      "artifact_id": "c4caef32-3c81-44b4-add9-d98700761314"
    },
    {
      "module_id": "llmstruct.validators.__init__",
      "path": "llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "58ab2e57-33c9-4028-8e49-2592c69b270a"
    },
    {
      "module_id": "llmstruct.validators.json_validator",
      "path": "llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "60da010c-299e-4f29-a5b5-46fa9109471a"
    },
    {
      "module_id": "llmstruct.parsers.universal_converter",
      "path": "llmstruct/parsers/universal_converter.py",
      "category": "core",
      "functions": 14,
      "classes": 3,
      "summary": "Universal Code Converter - Orchestrates all language parsers",
      "artifact_id": "f72fc6df-d700-4c15-9902-a16934ad4c01"
    },
    {
      "module_id": "llmstruct.parsers.python_parser",
      "path": "llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "",
      "artifact_id": "29a4dd2b-3d4f-46b4-85a4-fe034fc3b287"
    },
    {
      "module_id": "llmstruct.parsers.go_analyzer",
      "path": "llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430",
      "artifact_id": "5b6aaf2e-933e-4058-b788-2a222e138973"
    },
    {
      "module_id": "llmstruct.parsers.__init__",
      "path": "llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "b76fa8d8-ed7d-4c1b-87fe-3a3b684b445a"
    },
    {
      "module_id": "llmstruct.parsers.javascript_parser",
      "path": "llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "c82fba12-99b5-4bec-b3c3-d42d636f6fe6"
    },
    {
      "module_id": "llmstruct.generators.go_json_generator",
      "path": "llmstruct/generators/go_json_generator.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "1cd667f6-f1a0-4ddf-b715-abad8b8adb23"
    },
    {
      "module_id": "llmstruct.generators.__init__",
      "path": "llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "05d536f4-2133-4304-aaec-21efc91652c8"
    },
    {
      "module_id": "llmstruct.generators.json_generator",
      "path": "llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "7bf4751e-b13f-490d-b6e8-8dec610279ad"
    },
    {
      "module_id": "llmstruct.api.routes.system",
      "path": "llmstruct/api/routes/system.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "System routes for LLMStruct FastAPI",
      "artifact_id": "3c2a1761-9564-4a95-bfc4-c933211fcd75"
    },
    {
      "module_id": "llmstruct.api.routes.__init__",
      "path": "llmstruct/api/routes/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Routes package for LLMStruct FastAPI",
      "artifact_id": "858cdd48-495c-49c0-8819-8ff35ea75487"
    },
    {
      "module_id": "llmstruct.api.routes.chat",
      "path": "llmstruct/api/routes/chat.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "Chat Routes",
      "artifact_id": "07aaa47d-4063-422d-941b-2ce197b03f8e"
    },
    {
      "module_id": "llmstruct.api.routes.continue_adapter",
      "path": "llmstruct/api/routes/continue_adapter.py",
      "category": "core",
      "functions": 5,
      "classes": 2,
      "summary": "Continue API Adapter",
      "artifact_id": "705e23b3-c95c-4c24-9b8f-5a437cf15a11"
    },
    {
      "module_id": "llmstruct.api.middleware.__init__",
      "path": "llmstruct/api/middleware/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Middleware package for LLMStruct FastAPI",
      "artifact_id": "5e94b19a-2565-480d-84a2-d8a6183e5591"
    },
    {
      "module_id": "llmstruct.api.middleware.logging",
      "path": "llmstruct/api/middleware/logging.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Logging middleware for LLMStruct FastAPI",
      "artifact_id": "0e3c3251-a630-4ecc-a505-6689e058fff6"
    },
    {
      "module_id": "llmstruct.api.services.llm_service",
      "path": "llmstruct/api/services/llm_service.py",
      "category": "core",
      "functions": 17,
      "classes": 4,
      "summary": "LLM Service",
      "artifact_id": "1ebe4176-b0cc-4625-868e-0f9fd7cb18f9"
    },
    {
      "module_id": "llmstruct.api.services.__init__",
      "path": "llmstruct/api/services/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Services package for LLMStruct FastAPI",
      "artifact_id": "5703cf58-9bc5-4410-959d-321a8865476f"
    },
    {
      "module_id": "llmstruct.api.services.cli_bridge",
      "path": "llmstruct/api/services/cli_bridge.py",
      "category": "core",
      "functions": 9,
      "classes": 2,
      "summary": "CLI Bridge Service",
      "artifact_id": "c871354e-a669-4e2d-9d10-0d8b010d01f5"
    },
    {
      "module_id": "llmstruct.api.services.chat_session",
      "path": "llmstruct/api/services/chat_session.py",
      "category": "core",
      "functions": 14,
      "classes": 2,
      "summary": "Chat Session Manager",
      "artifact_id": "5f0d5234-d30a-4d64-8096-4d062c87a103"
    },
    {
      "module_id": "llmstruct.api.models.requests",
      "path": "llmstruct/api/models/requests.py",
      "category": "core",
      "functions": 0,
      "classes": 15,
      "summary": "Request models for LLMStruct FastAPI",
      "artifact_id": "73891413-3f87-4008-a4e7-991baab13ad4"
    },
    {
      "module_id": "llmstruct.api.models.responses",
      "path": "llmstruct/api/models/responses.py",
      "category": "core",
      "functions": 0,
      "classes": 19,
      "summary": "Response models for LLMStruct FastAPI",
      "artifact_id": "daf8651a-9352-4edc-950b-20eef4cdbbc1"
    },
    {
      "module_id": "llmstruct.api.models.__init__",
      "path": "llmstruct/api/models/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Pydantic models for LLMStruct FastAPI",
      "artifact_id": "25031a62-6a97-4aa2-9793-592a9b761307"
    },
    {
      "module_id": "llmstruct.modules.commands.metrics",
      "path": "llmstruct/modules/commands/metrics.py",
      "category": "core",
      "functions": 7,
      "classes": 0,
      "summary": "",
      "artifact_id": "3c647ebb-2cf6-4a71-83c7-efb3f6ff1409"
    },
    {
      "module_id": "llmstruct.modules.commands.services",
      "path": "llmstruct/modules/commands/services.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "fb6f2bc8-08bb-406c-8619-2d50ee51b94f"
    },
    {
      "module_id": "llmstruct.modules.commands.__init__",
      "path": "llmstruct/modules/commands/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "856a3d5b-030c-4b7b-9904-3d021c94b85e"
    },
    {
      "module_id": "llmstruct.modules.commands.queue",
      "path": "llmstruct/modules/commands/queue.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "e33a84af-f83d-43c2-9d51-3f4c4a4e168d"
    },
    {
      "module_id": "llmstruct.modules.cli.audit",
      "path": "llmstruct/modules/cli/audit.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "6e79adf9-5587-45d4-a8a4-6572a5451c26"
    },
    {
      "module_id": "llmstruct.modules.cli.utils",
      "path": "llmstruct/modules/cli/utils.py",
      "category": "cli",
      "functions": 16,
      "classes": 0,
      "summary": "",
      "artifact_id": "dfdeec45-bb60-492a-88ea-450ba625dd9e"
    },
    {
      "module_id": "llmstruct.modules.cli.dogfood",
      "path": "llmstruct/modules/cli/dogfood.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "1131f7c3-f2a5-48da-bd54-88c65f91c737"
    },
    {
      "module_id": "llmstruct.modules.cli.handlers_legacy",
      "path": "llmstruct/modules/cli/handlers_legacy.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "c112484b-68fc-4002-ba03-47ea832364ac"
    },
    {
      "module_id": "llmstruct.modules.cli.analyze_duplicates",
      "path": "llmstruct/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "024188c6-4b12-471e-8703-e89e852b3ec3"
    },
    {
      "module_id": "llmstruct.modules.cli.__init__",
      "path": "llmstruct/modules/cli/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "341a7382-bdb3-4a34-a733-80edaa44429b"
    },
    {
      "module_id": "llmstruct.modules.cli.review",
      "path": "llmstruct/modules/cli/review.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "fc4355e9-dd16-411f-9716-d37922edd23c"
    },
    {
      "module_id": "llmstruct.modules.cli.context",
      "path": "llmstruct/modules/cli/context.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "b25e6ae3-dd45-464e-a0da-71b12c6f84af"
    },
    {
      "module_id": "llmstruct.modules.cli.query",
      "path": "llmstruct/modules/cli/query.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "b4861153-06bc-464f-8c5d-9d337341128d"
    },
    {
      "module_id": "llmstruct.modules.cli.copilot",
      "path": "llmstruct/modules/cli/copilot.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "270f8d8c-e825-4b53-8fb6-5d612e5621f0"
    },
    {
      "module_id": "llmstruct.modules.cli.parse",
      "path": "llmstruct/modules/cli/parse.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "71076ffb-fcdf-403f-a729-0cadee15603f"
    },
    {
      "module_id": "llmstruct.modules.cli.epic",
      "path": "llmstruct/modules/cli/epic.py",
      "category": "cli",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "3aee4014-3d2e-4bb1-8614-73b8f551d4c3"
    },
    {
      "module_id": "llmstruct.modules.cli.handlers",
      "path": "llmstruct/modules/cli/handlers.py",
      "category": "cli",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "184ada66-7747-4719-904c-745b73082076"
    },
    {
      "module_id": "scripts.team.__init__",
      "path": "scripts/team/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "65fe08cb-58db-48e1-ba40-0cf57cd3f628"
    }
  ],
  "modules": [
    {
      "module_id": "llmstruct.json_selector",
      "path": "llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": null,
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": null,
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "data.get",
          "item.get",
          "filtered.append",
          "isinstance"
        ],
        "select_json": [
          "logging.error",
          "ijson.parse",
          "json_file.exists",
          "path.append",
          "f.seek",
          "filtered.append",
          "current_item.get",
          "filter_json",
          "json.load",
          "prefix.startswith",
          "open",
          "Path"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "98a9b614-2629-47b2-841d-496fc3d061e2"
    },
    {
      "module_id": "llmstruct.__main__",
      "path": "llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "llmstruct.cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "1a344442-2faf-42df-9e55-7e790cd67db0"
    },
    {
      "module_id": "llmstruct.__init__",
      "path": "llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "LLMClient",
        "SystemCapabilityDiscovery",
        "ai_cli_integration",
        "ai_self_awareness",
        "llm_client"
      ],
      "hash": null,
      "artifact_id": "14e5d0ed-eb4d-4c00-99ad-86c6d470e3cf"
    },
    {
      "module_id": "llmstruct.cache",
      "path": "llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": null,
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": null,
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "logging.info",
          "logging.error",
          "json_file.exists",
          "json.dumps",
          "str",
          "hashlib.sha256",
          "f.read",
          "open",
          "content.encode",
          "Path"
        ],
        "get_metadata": [
          "cursor.fetchone",
          "json.loads"
        ],
        "get_full_json": [
          "cursor.fetchone",
          "logging.error",
          "open",
          "json.load"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "62306fc7-9ee1-45a6-b270-2e5bfbe39272"
    },
    {
      "module_id": "llmstruct.self_run",
      "path": "llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "isinstance",
          "item.get",
          "struct.get",
          "any",
          "str",
          "filter_json",
          "prompt.lower",
          "module.get"
        ],
        "attach_to_llm_request": [
          "logging.info",
          "context_file.exists",
          "logging.error",
          "filter_struct",
          "json.dumps",
          "cache.get_metadata",
          "cache.cache_json",
          "filter_json",
          "cache.get_full_json",
          "prompt.lower",
          "Path",
          "select_json"
        ]
      },
      "dependencies": [
        "Any",
        "JSONCache",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b0cc797f-3c2a-41d5-a320-f1376f698988"
    },
    {
      "module_id": "llmstruct.llm_client",
      "path": "llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": null,
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": null,
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logging.info",
          "int",
          "os.getenv"
        ],
        "query": [
          "logging.info",
          "self._query_hybrid",
          "logging.error",
          "self._query_grok",
          "self._query_ollama",
          "json.dumps",
          "logging.warning",
          "json.load",
          "range",
          "asyncio.sleep",
          "Path",
          "self._query_anthropic"
        ],
        "_query_grok": [
          "logging.info",
          "response.json",
          "logging.error",
          "session.post",
          "result.get",
          "aiohttp.ClientSession"
        ],
        "_query_anthropic": [
          "logging.info",
          "response.json",
          "logging.error",
          "session.post",
          "result.get",
          "aiohttp.ClientSession"
        ],
        "_query_ollama": [
          "logging.info",
          "response.json",
          "logging.error",
          "session.post",
          "logging.debug",
          "result.get",
          "aiohttp.ClientSession"
        ],
        "_query_hybrid": [
          "isinstance",
          "logging.info",
          "self._query_grok",
          "self._query_ollama",
          "len",
          "asyncio.gather",
          "self._query_anthropic"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "202727a0-8b25-459a-be04-7d0073ecda7b"
    },
    {
      "module_id": "llmstruct.cli",
      "path": "llmstruct/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "normalize_patterns",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "arglist"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "parser.add_subparsers",
          "epic.add_epic_cli_subparser",
          "query_parser.add_argument",
          "parser.parse_args",
          "subparsers.add_parser",
          "argparse.ArgumentParser",
          "dogfood_parser.add_argument",
          "review_parser.add_argument",
          "copilot_parser.add_argument",
          "context_parser.add_argument",
          "audit_parser.add_argument",
          "duplicates_parser.add_argument",
          "parse_parser.add_argument"
        ],
        "normalize_patterns": [
          "p.strip",
          "item.strip",
          "result.extend",
          "result.append",
          "item.split"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "analyze_duplicates",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "audit",
        "cli_core",
        "context",
        "copilot",
        "create_cli_core",
        "dogfood",
        "epic",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "interactive",
        "interactive_legacy",
        "interactive_modular",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.analyze_duplicates",
        "llmstruct.modules.cli.audit",
        "llmstruct.modules.cli.context",
        "llmstruct.modules.cli.copilot",
        "llmstruct.modules.cli.dogfood",
        "llmstruct.modules.cli.handlers",
        "llmstruct.modules.cli.parse",
        "llmstruct.modules.cli.query",
        "llmstruct.modules.cli.review",
        "llmstruct.modules.cli.utils",
        "llmstruct.modules.commands.queue",
        "llmstruct.self_run",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "parse_files_from_response",
        "pathlib",
        "process_cli_queue_enhanced",
        "query",
        "re",
        "read_file_content",
        "review",
        "shutil",
        "sys",
        "time",
        "toml",
        "typing",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "d6816c1a-6197-4c98-bb94-ea5a701d172c"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.",
      "functions": [
        {
          "name": "detect_project_changes",
          "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_struct_json",
          "docstring": "Create a backup of existing struct.json.",
          "line_range": null,
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_struct_json",
          "docstring": "Validate generated struct.json for basic structure.",
          "line_range": null,
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "update_struct_json",
          "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful",
          "line_range": null,
          "parameters": [
            "root_dir",
            "struct_path",
            "force",
            "config_override"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for auto-update script.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_config": [],
        "load_gitignore": [],
        "generate_json": [
          "ImportError"
        ],
        "detect_project_changes": [
          "logger.info",
          "subprocess.run",
          "file_path.stat",
          "logger.warning",
          "Path"
        ],
        "backup_struct_json": [
          "logger.info",
          "subprocess.run",
          "logger.error",
          "datetime.now",
          "Path"
        ],
        "validate_struct_json": [
          "open",
          "logger.info",
          "logger.error",
          "json.load"
        ],
        "update_struct_json": [
          "validate_struct_json",
          "logger.info",
          "subprocess.run",
          "logger.error",
          "generate_json",
          "json.dump",
          "detect_project_changes",
          "config.update",
          "cli_config.get",
          "load_config",
          "backup_struct_json",
          "os.getcwd",
          "config.get",
          "open",
          "load_gitignore"
        ],
        "main": [
          "parser.add_argument",
          "sys.exit",
          "update_struct_json",
          "logging.getLogger",
          "parser.parse_args",
          "detect_project_changes",
          "os.getcwd",
          "argparse.ArgumentParser",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "generate_json",
        "json",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "55b2904a-d417-433e-b9a7-aaaa18165620"
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "58f9dd4c-1cef-4b60-895c-f2cf978a919c"
    },
    {
      "module_id": "scripts.github_sync_manager",
      "path": "scripts/github_sync_manager.py",
      "category": "core",
      "module_doc": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub\nSupports: Issues, Epics (Projects), Discussions\nSafety: dry-run mode, logging, collision detection",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results for idempotency",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log for future idempotency",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Safe GitHub API request with rate limiting",
          "line_range": null,
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_issues",
          "docstring": "Get existing GitHub issues for collision detection",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_discussions",
          "docstring": "Get existing GitHub discussions",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced (idempotency)",
          "line_range": null,
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "find_existing_by_title",
          "docstring": "Find existing GitHub item by title similarity",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "existing_items"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue",
          "docstring": "Create GitHub issue from processed item",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion",
          "docstring": "Create GitHub discussion from processed item",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic",
          "docstring": "Create GitHub epic (as Project or enhanced Issue)",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "sync_category",
          "docstring": "Sync specific category with GitHub",
          "line_range": null,
          "parameters": [
            "self",
            "category",
            "filename"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Pre-sync validation checks",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "Main sync execution",
          "line_range": null,
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubSyncManager",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results for idempotency",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log for future idempotency",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Safe GitHub API request with rate limiting",
              "line_range": null,
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "get_existing_issues",
              "docstring": "Get existing GitHub issues for collision detection",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_existing_discussions",
              "docstring": "Get existing GitHub discussions",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced (idempotency)",
              "line_range": null,
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "find_existing_by_title",
              "docstring": "Find existing GitHub item by title similarity",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "existing_items"
              ]
            },
            {
              "name": "create_github_issue",
              "docstring": "Create GitHub issue from processed item",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion",
              "docstring": "Create GitHub discussion from processed item",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_epic",
              "docstring": "Create GitHub epic (as Project or enhanced Issue)",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "sync_category",
              "docstring": "Sync specific category with GitHub",
              "line_range": null,
              "parameters": [
                "self",
                "category",
                "filename"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Pre-sync validation checks",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "Main sync execution",
              "line_range": null,
              "parameters": [
                "self",
                "categories"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.load_sync_log",
          "print",
          "os.getenv",
          "Path"
        ],
        "load_sync_log": [
          "open",
          "json.load"
        ],
        "save_sync_log": [
          "open",
          "json.dump"
        ],
        "api_request": [
          "requests.post",
          "response.json",
          "method.upper",
          "requests.patch",
          "int",
          "response.raise_for_status",
          "requests.get",
          "print",
          "time.sleep",
          "ValueError"
        ],
        "get_existing_issues": [
          "self.api_request",
          "len",
          "issues.extend"
        ],
        "get_existing_discussions": [],
        "item_already_synced": [
          "item.get"
        ],
        "find_existing_by_title": [
          "title.lower",
          "item.get",
          "len"
        ],
        "create_github_issue": [
          "item.get",
          "processing_meta.get",
          "labels.append",
          "self.api_request",
          "print"
        ],
        "create_github_discussion": [
          "print",
          "item.get"
        ],
        "create_github_epic": [
          "self.api_request",
          "print",
          "item.get"
        ],
        "sync_category": [
          "existing.get",
          "self.create_github_epic",
          "item.get",
          "self.get_existing_discussions",
          "self.item_already_synced",
          "self.get_existing_issues",
          "self.create_github_discussion",
          "file_path.exists",
          "data.get",
          "json.load",
          "datetime.now",
          "result.get",
          "open",
          "print",
          "self.create_github_issue",
          "self.find_existing_by_title"
        ],
        "validate_before_sync": [
          "rate_limit.get",
          "user_info.get",
          "core_limit.get",
          "repo_info.get",
          "self.api_request",
          "print"
        ],
        "run_sync": [
          "self.save_sync_log",
          "r.get",
          "results.values",
          "self.sync_category",
          "self.validate_before_sync",
          "sum",
          "print",
          "datetime.now"
        ],
        "main": [
          "parser.add_argument",
          "len",
          "GitHubSyncManager",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "result.get",
          "print",
          "manager.run_sync"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "1e2510f7-404a-459e-9e1f-f9c81dad6362"
    },
    {
      "module_id": "scripts.fix_github_script",
      "path": "scripts/fix_github_script.py",
      "category": "core",
      "module_doc": "Quick fix for GitHub issues creation script\n\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 JSON \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445",
      "functions": [
        {
          "name": "fix_json_loading",
          "docstring": "\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 JSON \u0434\u0430\u043d\u043d\u044b\u0445",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "fix_json_loading": [
          "f.read",
          "open",
          "print",
          "f.write",
          "Path",
          "content.replace"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "52963858-db3f-478a-8e2b-dcdd118c100c"
    },
    {
      "module_id": "scripts.create_github_issues",
      "path": "scripts/create_github_issues.py",
      "category": "core",
      "module_doc": "GitHub Issues Creator for AI-Dogfooding Project\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GitHub issues \u0438\u0437 \u043d\u0430\u0448\u0438\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447",
      "functions": [
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_epics_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438\u0437 JSON",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f issues",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "token",
            "use_cli"
          ],
          "decorators": []
        },
        {
          "name": "create_epic_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": null,
          "parameters": [
            "self",
            "epic_data"
          ],
          "decorators": []
        },
        {
          "name": "create_task_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": null,
          "parameters": [
            "self",
            "task_data",
            "epic_number"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_api",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_cli",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_format_criteria",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "criteria"
          ],
          "decorators": []
        },
        {
          "name": "_format_tasks",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "_format_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "metrics"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubIssuesCreator",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "token",
                "use_cli"
              ]
            },
            {
              "name": "create_epic_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
              "line_range": null,
              "parameters": [
                "self",
                "epic_data"
              ]
            },
            {
              "name": "create_task_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": null,
              "parameters": [
                "self",
                "task_data",
                "epic_number"
              ]
            },
            {
              "name": "_create_issue_via_api",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_create_issue_via_cli",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_format_criteria",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "criteria"
              ]
            },
            {
              "name": "_format_tasks",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "_format_metrics",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "metrics"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "load_env_file": [
          "line.strip",
          "value.strip",
          "key.strip",
          "line.split",
          "open",
          "print",
          "env_file.exists",
          "line.startswith",
          "Path"
        ],
        "__init__": [],
        "create_epic_issue": [
          "self._format_tasks",
          "self._create_issue_via_cli",
          "self._create_issue_via_api",
          "self._format_criteria",
          "epic_data.get",
          "self._format_metrics"
        ],
        "create_task_issue": [
          "self._create_issue_via_cli",
          "task_data.get",
          "self._create_issue_via_api",
          "self._format_criteria"
        ],
        "_create_issue_via_api": [
          "requests.post",
          "response.json",
          "print"
        ],
        "_create_issue_via_cli": [
          "open",
          "os.unlink",
          "subprocess.run",
          "int",
          "os.getpid",
          "print",
          "f.write",
          "issue_url.split"
        ],
        "_format_criteria": [],
        "_format_tasks": [],
        "_format_metrics": [
          "metrics.items"
        ],
        "load_epics_data": [
          "json.load",
          "epics_file.exists",
          "open",
          "print",
          "Path"
        ],
        "main": [
          "len",
          "creator.create_epic_issue",
          "os.getenv",
          "GitHubIssuesCreator",
          "epic_data.get",
          "epics_data.get",
          "load_epics_data",
          "print",
          "creator.create_task_issue"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "3e5b3933-8ef6-4aa7-9014-bb8c50bf5a10"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "filtered.append",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "path.is_file",
          "files.append",
          "apply_filters",
          "str",
          "path.relative_to",
          "root_dir.rglob"
        ],
        "generate_struct": [
          "existing.get",
          "collect_files",
          "logger.info",
          "len",
          "output_path.exists",
          "str",
          "json.dump",
          "uuid.uuid4",
          "json.load",
          "output_path.open",
          "Path"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "3c37ba86-084e-477d-892c-d5fc6e38ad80"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "logger.info",
          "target_file.exists",
          "source_file.exists",
          "idea.get",
          "json.dump",
          "logger.error",
          "json.load",
          "broken_links.append",
          "logger.warning",
          "Path",
          "enumerate"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "9aaaa4b4-6e2c-4270-a674-e7459affccc5"
    },
    {
      "module_id": "scripts.epic_roadmap_manager",
      "path": "scripts/epic_roadmap_manager.py",
      "category": "core",
      "module_doc": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u0438:\n- \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 roadmap \u0438 \u043f\u043b\u0430\u043d\u043e\u0432\n- \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439\n- \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441 GitHub epics\n- \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u0432",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_roadmap",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_roadmap",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
          "line_range": null,
          "parameters": [
            "self",
            "roadmap"
          ],
          "decorators": []
        },
        {
          "name": "show_overview",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "show_epic_details",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
          "line_range": null,
          "parameters": [
            "self",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
          "line_range": null,
          "parameters": [
            "self",
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "complete_session",
          "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": null,
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EpicRoadmapManager",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_roadmap",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_roadmap",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
              "line_range": null,
              "parameters": [
                "self",
                "roadmap"
              ]
            },
            {
              "name": "show_overview",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "show_epic_details",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
              "line_range": null,
              "parameters": [
                "self",
                "epic_id"
              ]
            },
            {
              "name": "start_session",
              "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
              "line_range": null,
              "parameters": [
                "self",
                "epic_id",
                "session_id"
              ]
            },
            {
              "name": "complete_session",
              "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": null,
              "parameters": [
                "self",
                "session_id"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "load_roadmap": [
          "open",
          "print",
          "json.load"
        ],
        "save_roadmap": [
          "open",
          "print",
          "datetime.now",
          "json.dump"
        ],
        "show_overview": [
          "epic.get",
          "self.load_roadmap",
          "roadmap.get",
          "stats.get",
          "epics.items",
          "print"
        ],
        "show_epic_details": [
          "epic.get",
          "len",
          "session.get",
          "self.load_roadmap",
          "roadmap.get",
          "epic_data.get",
          "print"
        ],
        "start_session": [
          "epic.get",
          "session.get",
          "self.save_roadmap",
          "os.makedirs",
          "self.load_roadmap",
          "roadmap.get",
          "json.dump",
          "epic_data.get",
          "open",
          "print",
          "datetime.now",
          "sess.get"
        ],
        "complete_session": [
          "current_session.get",
          "epic.get",
          "all",
          "session.get",
          "self.save_roadmap",
          "os.makedirs",
          "sessions_log.append",
          "self.load_roadmap",
          "roadmap.get",
          "json.dump",
          "json.load",
          "os.remove",
          "open",
          "print",
          "datetime.now",
          "sess.get"
        ],
        "main": [
          "manager.show_overview",
          "EpicRoadmapManager",
          "parser.add_argument",
          "manager.complete_session",
          "manager.show_epic_details",
          "parser.parse_args",
          "manager.start_session",
          "argparse.ArgumentParser",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "2b918690-2df0-4bd6-8c22-054e5108d21a"
    },
    {
      "module_id": "scripts.process_926_items",
      "path": "scripts/process_926_items.py",
      "category": "core",
      "module_doc": "926 Items Processing Script - Updated Implementation\nProcesses items according to GitHub roadmap + personal management vision\nImplements all decisions from 926_items_processing_execution_plan.md",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_comprehensive_index",
          "docstring": "Load the 926 items from comprehensive index",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "calculate_confidence_score",
          "docstring": "Calculate confidence score for categorization decision",
          "line_range": null,
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "check_t_pot_related",
          "docstring": "Enhanced T-Pot detection",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_team_implementable",
          "docstring": "Check if team can implement without architecture review",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_personal_vs_team_vs_business",
          "docstring": "Classify as personal/team/business",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "identify_epic_candidates",
          "docstring": "Identify items that should be grouped into epics",
          "line_range": null,
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "extract_epic_name",
          "docstring": "Extract epic name from item",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "categorize_item",
          "docstring": "Main categorization logic with confidence scoring",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "find_duplicates",
          "docstring": "Enhanced duplicate detection with T-Pot special handling",
          "line_range": null,
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "calculate_similarity",
          "docstring": "Enhanced similarity calculation",
          "line_range": null,
          "parameters": [
            "self",
            "title1",
            "title2"
          ],
          "decorators": []
        },
        {
          "name": "suggest_merge_strategy",
          "docstring": "Enhanced merge strategy with T-Pot consideration",
          "line_range": null,
          "parameters": [
            "self",
            "item1",
            "item2"
          ],
          "decorators": []
        },
        {
          "name": "process_items",
          "docstring": "Main processing workflow implementing execution plan",
          "line_range": null,
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "save_results",
          "docstring": "Save categorized results with enhanced metadata",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_category_description",
          "docstring": "Category descriptions per execution plan",
          "line_range": null,
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Main execution workflow per execution plan",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskProcessor926",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_comprehensive_index",
              "docstring": "Load the 926 items from comprehensive index",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "calculate_confidence_score",
              "docstring": "Calculate confidence score for categorization decision",
              "line_range": null,
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "check_t_pot_related",
              "docstring": "Enhanced T-Pot detection",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_team_implementable",
              "docstring": "Check if team can implement without architecture review",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_personal_vs_team_vs_business",
              "docstring": "Classify as personal/team/business",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "identify_epic_candidates",
              "docstring": "Identify items that should be grouped into epics",
              "line_range": null,
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "extract_epic_name",
              "docstring": "Extract epic name from item",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "categorize_item",
              "docstring": "Main categorization logic with confidence scoring",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "find_duplicates",
              "docstring": "Enhanced duplicate detection with T-Pot special handling",
              "line_range": null,
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "calculate_similarity",
              "docstring": "Enhanced similarity calculation",
              "line_range": null,
              "parameters": [
                "self",
                "title1",
                "title2"
              ]
            },
            {
              "name": "suggest_merge_strategy",
              "docstring": "Enhanced merge strategy with T-Pot consideration",
              "line_range": null,
              "parameters": [
                "self",
                "item1",
                "item2"
              ]
            },
            {
              "name": "process_items",
              "docstring": "Main processing workflow implementing execution plan",
              "line_range": null,
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "save_results",
              "docstring": "Save categorized results with enhanced metadata",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_category_description",
              "docstring": "Category descriptions per execution plan",
              "line_range": null,
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "run",
              "docstring": "Main execution workflow per execution plan",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "datetime.now",
          "Path"
        ],
        "load_comprehensive_index": [
          "isinstance",
          "data.items",
          "items.extend",
          "items.append",
          "item.get",
          "len",
          "item_content.lower",
          "any",
          "seen_items.add",
          "str",
          "json.load",
          "unique_items.append",
          "index_path.exists",
          "set",
          "hash",
          "open",
          "print",
          "value.items"
        ],
        "calculate_confidence_score": [
          "self.check_t_pot_related",
          "item.get",
          "str",
          "sum",
          "min"
        ],
        "check_t_pot_related": [
          "any",
          "str"
        ],
        "check_team_implementable": [
          "sum",
          "str"
        ],
        "check_personal_vs_team_vs_business": [
          "sum",
          "item.get",
          "max",
          "str"
        ],
        "identify_epic_candidates": [
          "self.extract_epic_name",
          "item.get",
          "len",
          "any",
          "epic_groups.items",
          "str"
        ],
        "extract_epic_name": [
          "title.split",
          "item.get"
        ],
        "categorize_item": [
          "self.check_t_pot_related",
          "any",
          "self.calculate_confidence_score",
          "str",
          "self.check_team_implementable",
          "self.check_personal_vs_team_vs_business"
        ],
        "find_duplicates": [
          "self.check_t_pot_related",
          "item.get",
          "self.suggest_merge_strategy",
          "seen_items.items",
          "self.calculate_similarity",
          "duplicates.append"
        ],
        "calculate_similarity": [
          "title1.split",
          "title2.split",
          "len",
          "words1.intersection",
          "min",
          "set",
          "words1.union"
        ],
        "suggest_merge_strategy": [
          "self.check_t_pot_related",
          "item1.get",
          "len",
          "str",
          "item2.get"
        ],
        "process_items": [
          "category.startswith",
          "self.check_t_pot_related",
          "self.extract_epic_name",
          "len",
          "self.categorize_item",
          "any",
          "str",
          "processed_item.copy",
          "duplicate_item_ids.add",
          "self.check_team_implementable",
          "low_confidence_items.append",
          "self.find_duplicates",
          "set",
          "id",
          "print",
          "datetime.now"
        ],
        "save_results": [
          "item.get",
          "self.get_category_description",
          "len",
          "json.dump",
          "sum",
          "open",
          "print",
          "datetime.now"
        ],
        "get_category_description": [
          "descriptions.get"
        ],
        "run": [
          "self.process_items",
          "print",
          "self.load_comprehensive_index",
          "self.save_results"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "facf6a34-328f-429a-97d2-d8641acd6f34"
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "module_doc": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct.\nPart of the comprehensive session management system.",
      "functions": [
        {
          "name": "get_current_branch",
          "docstring": "Get current git branch.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "save_json_file",
          "docstring": "Save JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_current_timestamp",
          "docstring": "Get current timestamp in ISO format.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log_event",
          "docstring": "Log an event to worklog.json.",
          "line_range": null,
          "parameters": [
            "event_message",
            "author"
          ],
          "decorators": []
        },
        {
          "name": "switch_session",
          "docstring": "Switch to a different session or create new one.",
          "line_range": null,
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "list_sessions",
          "docstring": "List all available sessions.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_session",
          "docstring": "Show current session details.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_worklog",
          "docstring": "Show recent worklog entries.",
          "line_range": null,
          "parameters": [
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main CLI interface.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "get_current_branch": [
          "subprocess.run"
        ],
        "load_json_file": [
          "open",
          "print",
          "json.load"
        ],
        "save_json_file": [
          "open",
          "os.makedirs",
          "json.dump",
          "print"
        ],
        "get_current_timestamp": [
          "datetime.now"
        ],
        "log_event": [
          "current_session.get",
          "get_current_timestamp",
          "save_json_file",
          "get_current_branch",
          "load_json_file",
          "print"
        ],
        "switch_session": [
          "get_current_timestamp",
          "save_json_file",
          "get_current_branch",
          "load_json_file",
          "print",
          "log_event"
        ],
        "list_sessions": [
          "current_session.get",
          "print",
          "load_json_file"
        ],
        "show_current_session": [
          "current_session.get",
          "print",
          "load_json_file"
        ],
        "show_worklog": [
          "print",
          "reversed",
          "len",
          "load_json_file"
        ],
        "main": [
          "log_event",
          "len",
          "int",
          "show_worklog",
          "show_current_session",
          "switch_session",
          "print",
          "list_sessions"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "444a3ab0-8d04-463f-904b-1d701589379d"
    },
    {
      "module_id": "scripts.validate_epics",
      "path": "scripts/validate_epics.py",
      "category": "core",
      "module_doc": "Epic Data Validator\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c GitHub issues",
      "functions": [
        {
          "name": "validate_epic_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u044d\u043f\u0438\u043a\u0430",
          "line_range": null,
          "parameters": [
            "epic"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": null,
          "parameters": [
            "task",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "validate_priorities",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u0432",
          "line_range": null,
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_ids",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c ID \u0437\u0430\u0434\u0430\u0447",
          "line_range": null,
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_epic_structure": [
          "isinstance",
          "errors.append"
        ],
        "validate_task_structure": [
          "isinstance",
          "task.get",
          "errors.append"
        ],
        "validate_priorities": [
          "data.get",
          "epic.get",
          "task.get",
          "errors.append"
        ],
        "validate_task_ids": [
          "epic.get",
          "seen_ids.add",
          "data.get",
          "task.get",
          "set",
          "errors.append"
        ],
        "main": [
          "isinstance",
          "epic.get",
          "validate_task_ids",
          "e.get",
          "validate_epic_structure",
          "sys.exit",
          "len",
          "validate_priorities",
          "json.load",
          "epics_file.exists",
          "all_errors.append",
          "sum",
          "open",
          "print",
          "all_errors.extend",
          "validate_task_structure",
          "Path"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "pathlib",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9dfa2c71-9dac-4977-ae36-b6acef5ea5ec"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "config_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "check_github_cli",
          "docstring": "Check if GitHub CLI is installed and authenticated",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "list_projects",
          "docstring": "List available GitHub Projects (via gh-projects extension)",
          "line_range": null,
          "parameters": [
            "self",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "create_project_item",
          "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
          "line_range": null,
          "parameters": [
            "self",
            "project_number",
            "title",
            "body",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_tasks_to_project",
          "docstring": "Export tasks to GitHub Project",
          "line_range": null,
          "parameters": [
            "self",
            "tasks",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_ideas_to_project",
          "docstring": "Export ideas to GitHub Project",
          "line_range": null,
          "parameters": [
            "self",
            "ideas",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "filter_data",
          "docstring": "Filter data by status and priority",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "status_filter",
            "priority_filter"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExportScript",
          "docstring": "Extended exporter with command-line interface and GitHub CLI integration",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "config_path",
                "dry_run"
              ]
            },
            {
              "name": "check_github_cli",
              "docstring": "Check if GitHub CLI is installed and authenticated",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "list_projects",
              "docstring": "List available GitHub Projects (via gh-projects extension)",
              "line_range": null,
              "parameters": [
                "self",
                "owner",
                "repo"
              ]
            },
            {
              "name": "create_project_item",
              "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
              "line_range": null,
              "parameters": [
                "self",
                "project_number",
                "title",
                "body",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_tasks_to_project",
              "docstring": "Export tasks to GitHub Project",
              "line_range": null,
              "parameters": [
                "self",
                "tasks",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_ideas_to_project",
              "docstring": "Export ideas to GitHub Project",
              "line_range": null,
              "parameters": [
                "self",
                "ideas",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "filter_data",
              "docstring": "Filter data by status and priority",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "status_filter",
                "priority_filter"
              ]
            }
          ],
          "bases": [
            "GitHubProjectsExporter"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "super"
        ],
        "check_github_cli": [
          "print",
          "self._run_gh_command"
        ],
        "list_projects": [
          "isinstance",
          "json.loads",
          "print",
          "self._run_gh_command"
        ],
        "create_project_item": [
          "print",
          "self._run_gh_command",
          "str",
          "output.strip"
        ],
        "export_tasks_to_project": [
          "len",
          "task.get",
          "self.create_project_item",
          "print",
          "self.format_task_for_github"
        ],
        "export_ideas_to_project": [
          "len",
          "self.format_idea_for_github",
          "idea.get",
          "self.create_project_item",
          "print"
        ],
        "filter_data": [
          "item.get"
        ],
        "main": [
          "parser.add_argument",
          "exporter.filter_data",
          "sys.exit",
          "exporter.check_github_cli",
          "exporter.export_tasks_to_project",
          "exporter.export_ideas_to_project",
          "exporter._save_mapping",
          "parser.parse_args",
          "exporter.load_official_data",
          "argparse.ArgumentParser",
          "print",
          "GitHubProjectsExportScript"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "GitHubProjectsExporter",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "datetime",
        "json",
        "llmstruct.gh_view",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "e69a6cfa-f6b3-4f0e-8c03-f6bd4ea65899"
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "module_doc": "JSON Validation Script\nValidates JSON files against their respective schemas.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate a JSON file against a schema.",
          "line_range": null,
          "parameters": [
            "file_path",
            "schema_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "open",
          "print",
          "json.load"
        ],
        "validate_json": [
          "load_json",
          "validator.validate",
          "str",
          "Draft7Validator",
          "print",
          "Path"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "pathlib",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "2497d04a-d016-4b45-8bf5-c292dc976c5a"
    },
    {
      "module_id": "scripts.create_comprehensive_index",
      "path": "scripts/create_comprehensive_index.py",
      "category": "core",
      "module_doc": "Comprehensive Project Index Creator\nScans ALL project directories for tasks, ideas, sessions, and concepts.\nProvides complete visibility into project state and unaccounted innovations.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize comprehensive extraction patterns.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "scan_all_directories",
          "docstring": "Scan all configured directories comprehensively.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_scan_directory",
          "docstring": "Scan a specific directory according to its configuration.",
          "line_range": null,
          "parameters": [
            "self",
            "directory",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_scan_root_files",
          "docstring": "Scan root-level files.",
          "line_range": null,
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_should_scan_file",
          "docstring": "Check if file should be scanned based on extension.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "allowed_types"
          ],
          "decorators": []
        },
        {
          "name": "_scan_file",
          "docstring": "Scan individual file for project items.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_text",
          "docstring": "Extract items from text/markdown files.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_json",
          "docstring": "Extract items from JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_item_from_match",
          "docstring": "Create ProjectItem from regex match.",
          "line_range": null,
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_checkbox_item",
          "docstring": "Create ProjectItem from checkbox match.",
          "line_range": null,
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_simple_item",
          "docstring": "Create simple ProjectItem.",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_status",
          "docstring": "Detect item status from surrounding content.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_priority",
          "docstring": "Detect item priority from surrounding content.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "position",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_assess_strategic_value",
          "docstring": "Assess strategic value of item.",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract context around position.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "position",
            "length"
          ],
          "decorators": []
        },
        {
          "name": "_detect_category",
          "docstring": "Detect item category.",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_effort",
          "docstring": "Estimate effort required.",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tags",
          "docstring": "Extract relevant tags.",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "content",
            "source_dir"
          ],
          "decorators": []
        },
        {
          "name": "_is_noise_checkbox",
          "docstring": "Check if checkbox is noise (navigation, etc).",
          "line_range": null,
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "_parse_json_files",
          "docstring": "Parse structured JSON files for existing data.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_process_structured_json",
          "docstring": "Process structured JSON data.",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_add_json_item",
          "docstring": "Add item from JSON structure.",
          "line_range": null,
          "parameters": [
            "self",
            "item",
            "file_path",
            "item_type"
          ],
          "decorators": []
        },
        {
          "name": "_assess_json_strategic_value",
          "docstring": "Assess strategic value from JSON item.",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_extract_innovation_concepts",
          "docstring": "Extract innovation concepts from content.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_enhance_items",
          "docstring": "Post-process items to enhance metadata and find relationships.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_find_related_items",
          "docstring": "Find related items based on content similarity.",
          "line_range": null,
          "parameters": [
            "self",
            "item",
            "id_map",
            "title_map"
          ],
          "decorators": []
        },
        {
          "name": "generate_comprehensive_report",
          "docstring": "Generate comprehensive analysis report.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_comprehensive_index",
          "docstring": "Save comprehensive index and reports.",
          "line_range": null,
          "parameters": [
            "self",
            "output_dir"
          ],
          "decorators": []
        },
        {
          "name": "_generate_analysis_report",
          "docstring": "Generate human-readable analysis report.",
          "line_range": null,
          "parameters": [
            "self",
            "report"
          ],
          "decorators": []
        },
        {
          "name": "_format_dict",
          "docstring": "Format dictionary for markdown display.",
          "line_range": null,
          "parameters": [
            "self",
            "d"
          ],
          "decorators": []
        },
        {
          "name": "_format_items_list",
          "docstring": "Format items list for markdown display.",
          "line_range": null,
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_tasks",
          "docstring": "Extract tasks from JSON tasks array.",
          "line_range": null,
          "parameters": [
            "self",
            "tasks_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_ideas",
          "docstring": "Extract ideas from JSON ideas array.",
          "line_range": null,
          "parameters": [
            "self",
            "ideas_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_sessions",
          "docstring": "Extract sessions from JSON sessions array.",
          "line_range": null,
          "parameters": [
            "self",
            "sessions_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_array",
          "docstring": "Extract items from JSON array.",
          "line_range": null,
          "parameters": [
            "self",
            "array_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ProjectItem",
          "docstring": "Unified representation of any project item (task, idea, session, concept).",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "ComprehensiveIndexer",
          "docstring": "Comprehensive indexer for all project content.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize comprehensive extraction patterns.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "scan_all_directories",
              "docstring": "Scan all configured directories comprehensively.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_scan_directory",
              "docstring": "Scan a specific directory according to its configuration.",
              "line_range": null,
              "parameters": [
                "self",
                "directory",
                "config"
              ]
            },
            {
              "name": "_scan_root_files",
              "docstring": "Scan root-level files.",
              "line_range": null,
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "_should_scan_file",
              "docstring": "Check if file should be scanned based on extension.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "allowed_types"
              ]
            },
            {
              "name": "_scan_file",
              "docstring": "Scan individual file for project items.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_text",
              "docstring": "Extract items from text/markdown files.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_json",
              "docstring": "Extract items from JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_item_from_match",
              "docstring": "Create ProjectItem from regex match.",
              "line_range": null,
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_checkbox_item",
              "docstring": "Create ProjectItem from checkbox match.",
              "line_range": null,
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_simple_item",
              "docstring": "Create simple ProjectItem.",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority",
                "position"
              ]
            },
            {
              "name": "_detect_status",
              "docstring": "Detect item status from surrounding content.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "position"
              ]
            },
            {
              "name": "_detect_priority",
              "docstring": "Detect item priority from surrounding content.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "position",
                "default"
              ]
            },
            {
              "name": "_assess_strategic_value",
              "docstring": "Assess strategic value of item.",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract context around position.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "position",
                "length"
              ]
            },
            {
              "name": "_detect_category",
              "docstring": "Detect item category.",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_estimate_effort",
              "docstring": "Estimate effort required.",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_tags",
              "docstring": "Extract relevant tags.",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "content",
                "source_dir"
              ]
            },
            {
              "name": "_is_noise_checkbox",
              "docstring": "Check if checkbox is noise (navigation, etc).",
              "line_range": null,
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "_parse_json_files",
              "docstring": "Parse structured JSON files for existing data.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_process_structured_json",
              "docstring": "Process structured JSON data.",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "file_path"
              ]
            },
            {
              "name": "_add_json_item",
              "docstring": "Add item from JSON structure.",
              "line_range": null,
              "parameters": [
                "self",
                "item",
                "file_path",
                "item_type"
              ]
            },
            {
              "name": "_assess_json_strategic_value",
              "docstring": "Assess strategic value from JSON item.",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_extract_innovation_concepts",
              "docstring": "Extract innovation concepts from content.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_enhance_items",
              "docstring": "Post-process items to enhance metadata and find relationships.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_find_related_items",
              "docstring": "Find related items based on content similarity.",
              "line_range": null,
              "parameters": [
                "self",
                "item",
                "id_map",
                "title_map"
              ]
            },
            {
              "name": "generate_comprehensive_report",
              "docstring": "Generate comprehensive analysis report.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_comprehensive_index",
              "docstring": "Save comprehensive index and reports.",
              "line_range": null,
              "parameters": [
                "self",
                "output_dir"
              ]
            },
            {
              "name": "_generate_analysis_report",
              "docstring": "Generate human-readable analysis report.",
              "line_range": null,
              "parameters": [
                "self",
                "report"
              ]
            },
            {
              "name": "_format_dict",
              "docstring": "Format dictionary for markdown display.",
              "line_range": null,
              "parameters": [
                "self",
                "d"
              ]
            },
            {
              "name": "_format_items_list",
              "docstring": "Format items list for markdown display.",
              "line_range": null,
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "_extract_json_tasks",
              "docstring": "Extract tasks from JSON tasks array.",
              "line_range": null,
              "parameters": [
                "self",
                "tasks_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_ideas",
              "docstring": "Extract ideas from JSON ideas array.",
              "line_range": null,
              "parameters": [
                "self",
                "ideas_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_sessions",
              "docstring": "Extract sessions from JSON sessions array.",
              "line_range": null,
              "parameters": [
                "self",
                "sessions_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_array",
              "docstring": "Extract items from JSON array.",
              "line_range": null,
              "parameters": [
                "self",
                "array_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._init_patterns",
          "Path"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "scan_all_directories": [
          "self._scan_directory",
          "self._scan_root_files",
          "logger.info",
          "self._parse_json_files",
          "len",
          "self._enhance_items"
        ],
        "_scan_directory": [
          "logger.info",
          "dir_path.exists",
          "file_path.is_file",
          "logger.warning",
          "self._should_scan_file",
          "self._scan_file",
          "dir_path.glob"
        ],
        "_scan_root_files": [
          "self._scan_file",
          "self._should_scan_file",
          "file_path.is_file"
        ],
        "_should_scan_file": [],
        "_scan_file": [
          "self._extract_from_json",
          "logger.error",
          "f.read",
          "open",
          "self._extract_from_text"
        ],
        "_extract_from_text": [
          "self._is_noise_checkbox",
          "self._create_simple_item",
          "match.start",
          "self._create_checkbox_item",
          "self._create_item_from_match",
          "self._extract_innovation_concepts",
          "match.group"
        ],
        "_extract_from_json": [
          "self._extract_json_tasks",
          "self._extract_json_sessions",
          "isinstance",
          "self._extract_json_array",
          "self._extract_json_ideas",
          "logger.warning",
          "json.loads"
        ],
        "_create_item_from_match": [
          "self._detect_category",
          "self._extract_tags",
          "ProjectItem",
          "self._extract_context",
          "match.start",
          "title.strip",
          "str",
          "self._estimate_effort",
          "match.group",
          "self._detect_status",
          "datetime.now",
          "self._detect_priority",
          "self._assess_strategic_value"
        ],
        "_create_checkbox_item": [
          "self._detect_category",
          "self._extract_tags",
          "ProjectItem",
          "self._extract_context",
          "match.start",
          "str",
          "self._estimate_effort",
          "match.group",
          "self._assess_strategic_value",
          "datetime.now",
          "self._detect_priority"
        ],
        "_create_simple_item": [
          "ProjectItem",
          "self._extract_context",
          "title.strip",
          "str",
          "datetime.now"
        ],
        "_detect_status": [
          "max"
        ],
        "_detect_priority": [
          "max"
        ],
        "_assess_strategic_value": [],
        "_extract_context": [
          "min",
          "max",
          "len"
        ],
        "_detect_category": [
          "title.lower",
          "any"
        ],
        "_estimate_effort": [
          "any"
        ],
        "_extract_tags": [
          "title.lower",
          "source_dir.replace",
          "tags.append"
        ],
        "_is_noise_checkbox": [
          "text.strip",
          "text.lower",
          "any",
          "len"
        ],
        "_parse_json_files": [
          "logger.error",
          "self._process_structured_json",
          "file_path.exists",
          "json.load",
          "open"
        ],
        "_process_structured_json": [
          "isinstance",
          "self._add_json_item"
        ],
        "_add_json_item": [
          "item.get",
          "ProjectItem",
          "len",
          "str",
          "self._assess_json_strategic_value",
          "datetime.now"
        ],
        "_assess_json_strategic_value": [
          "item.get"
        ],
        "_extract_innovation_concepts": [
          "line.strip",
          "ProjectItem",
          "self._extract_context",
          "len",
          "content.find",
          "innovation_lines.append",
          "str",
          "datetime.now",
          "source_dir.replace",
          "content.split",
          "enumerate"
        ],
        "_enhance_items": [
          "logger.info",
          "self._find_related_items",
          "re.sub"
        ],
        "_find_related_items": [
          "ref_type.upper",
          "related.append",
          "re.findall"
        ],
        "generate_comprehensive_report": [
          "len",
          "asdict",
          "by_type.get",
          "by_strategic_value.get",
          "by_priority.get",
          "by_status.get",
          "datetime.now",
          "by_source.get"
        ],
        "save_comprehensive_index": [
          "logger.info",
          "len",
          "self.generate_comprehensive_report",
          "os.makedirs",
          "json.dump",
          "self._generate_analysis_report",
          "open",
          "f.write"
        ],
        "_generate_analysis_report": [
          "self._format_dict",
          "self._format_items_list",
          "len"
        ],
        "_format_dict": [
          "d.items",
          "sorted"
        ],
        "_format_items_list": [
          "result.append"
        ],
        "_extract_json_tasks": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_ideas": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_sessions": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_array": [
          "isinstance",
          "self._add_json_item",
          "str"
        ],
        "main": [
          "logger.info",
          "ComprehensiveIndexer",
          "len",
          "by_strategic.get",
          "indexer.scan_all_directories",
          "print",
          "indexer.save_comprehensive_index"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "66294fc8-1f6d-4a97-833a-99dbca529662"
    },
    {
      "module_id": "scripts.github_sync_manager_enhanced",
      "path": "scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "module_doc": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout\n\u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442: processing results + GitHub API + token management + CLI fallback",
      "functions": [
        {
          "name": "print_info",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_success",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_warning",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_error",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_step",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "step",
            "total",
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Enhanced CLI interface",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_github_token",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
          "line_range": null,
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "check_gh_cli",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_token_from_gh_cli",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_github_token",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "detect_repo_from_git",
          "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Enhanced API request with CLI fallback",
          "line_range": null,
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_direct",
          "docstring": "Direct API request",
          "line_range": null,
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_via_cli",
          "docstring": "API request via GitHub CLI",
          "line_range": null,
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue_enhanced",
          "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_acceptance_criteria",
          "docstring": "Format acceptance criteria from item metadata",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_implementation_notes",
          "docstring": "Format implementation notes",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Enhanced validation",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_enhanced_sync",
          "docstring": "Enhanced sync with full project rollout integration",
          "line_range": null,
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        },
        {
          "name": "sync_category_enhanced",
          "docstring": "Enhanced category sync",
          "line_range": null,
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced",
          "line_range": null,
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic_enhanced",
          "docstring": "Enhanced epic creation",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion_enhanced",
          "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "GitHubTokenManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 GitHub \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 (\u0438\u0437 setup_github_token.sh)",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_env_file",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_github_token",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
              "line_range": null,
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "check_gh_cli",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_token_from_gh_cli",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_github_token",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "EnhancedGitHubSyncManager",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 GitHub Sync Manager \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0432\u0441\u0435\u0445 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "detect_repo_from_git",
              "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Enhanced API request with CLI fallback",
              "line_range": null,
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_direct",
              "docstring": "Direct API request",
              "line_range": null,
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_via_cli",
              "docstring": "API request via GitHub CLI",
              "line_range": null,
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "create_github_issue_enhanced",
              "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_acceptance_criteria",
              "docstring": "Format acceptance criteria from item metadata",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_implementation_notes",
              "docstring": "Format implementation notes",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Enhanced validation",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_enhanced_sync",
              "docstring": "Enhanced sync with full project rollout integration",
              "line_range": null,
              "parameters": [
                "self",
                "categories"
              ]
            },
            {
              "name": "sync_category_enhanced",
              "docstring": "Enhanced category sync",
              "line_range": null,
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced",
              "line_range": null,
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "create_github_epic_enhanced",
              "docstring": "Enhanced epic creation",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion_enhanced",
              "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "print_info": [
          "print"
        ],
        "print_success": [
          "print"
        ],
        "print_warning": [
          "print"
        ],
        "print_error": [
          "print"
        ],
        "print_step": [
          "print"
        ],
        "__init__": [
          "self.load_sync_log",
          "self.detect_repo_from_git",
          "print_info",
          "GitHubTokenManager",
          "Path"
        ],
        "load_env_file": [
          "line.strip",
          "value.strip",
          "key.strip",
          "line.split",
          "open",
          "env_file.exists",
          "line.startswith",
          "Path"
        ],
        "test_github_token": [
          "requests.get",
          "response.json"
        ],
        "check_gh_cli": [
          "subprocess.run"
        ],
        "get_token_from_gh_cli": [
          "subprocess.run"
        ],
        "get_github_token": [
          "self.get_token_from_gh_cli",
          "os.getenv",
          "self.test_github_token",
          "print_warning",
          "self.check_gh_cli"
        ],
        "detect_repo_from_git": [
          "url.replace",
          "url.startswith",
          "len",
          "subprocess.run",
          "url.split",
          "path.split",
          "print_warning",
          "print_info",
          "url.endswith"
        ],
        "load_sync_log": [
          "open",
          "json.load"
        ],
        "save_sync_log": [
          "open",
          "json.dump"
        ],
        "api_request": [
          "self._api_request_via_cli",
          "time.sleep",
          "print_error",
          "self._api_request_direct"
        ],
        "_api_request_direct": [
          "requests.post",
          "response.json",
          "method.upper",
          "requests.patch",
          "int",
          "response.raise_for_status",
          "print_warning",
          "requests.get",
          "ValueError",
          "print_error"
        ],
        "_api_request_via_cli": [
          "method.upper",
          "subprocess.run",
          "json.dumps",
          "print_warning",
          "json.loads",
          "print_error",
          "cmd.extend"
        ],
        "create_github_issue_enhanced": [
          "item.get",
          "self._format_acceptance_criteria",
          "print_success",
          "processing_meta.get",
          "labels.append",
          "self._format_implementation_notes",
          "print_info",
          "self.api_request"
        ],
        "_format_acceptance_criteria": [
          "item.get",
          "criteria.append",
          "criteria.extend"
        ],
        "_format_implementation_notes": [
          "item.get",
          "processing_meta.get",
          "notes.append"
        ],
        "validate_before_sync": [
          "print_step",
          "print_success",
          "file_path.exists",
          "user_info.get",
          "repo_info.get",
          "self.api_request",
          "print_error"
        ],
        "run_enhanced_sync": [
          "self.save_sync_log",
          "self.sync_category_enhanced",
          "print_step",
          "self.validate_before_sync",
          "print_success",
          "print_info",
          "print",
          "datetime.now",
          "result.get",
          "enumerate"
        ],
        "sync_category_enhanced": [
          "self.create_github_issue_enhanced",
          "item.get",
          "self.item_already_synced",
          "self.create_github_discussion_enhanced",
          "file_path.exists",
          "data.get",
          "json.load",
          "self.create_github_epic_enhanced",
          "print_warning",
          "print_info",
          "open",
          "datetime.now",
          "print_error",
          "result.get"
        ],
        "item_already_synced": [
          "item.get"
        ],
        "create_github_epic_enhanced": [
          "self.api_request",
          "item.get",
          "print_success",
          "print_info"
        ],
        "create_github_discussion_enhanced": [
          "item.get",
          "print_warning",
          "print_info"
        ],
        "main": [
          "parser.add_argument",
          "len",
          "print_success",
          "manager.run_enhanced_sync",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "EnhancedGitHubSyncManager",
          "result.get",
          "print_error"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "214e6da7-e6d6-43ca-ae77-eb7f20013495"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.warning",
          "validate",
          "RefResolver",
          "logger.error"
        ],
        "backup_files": [
          "logger.info",
          "datetime.now",
          "target_dir.exists",
          "shutil.copytree"
        ],
        "deploy_embedded_files": [
          "EMBEDDED_FILES.get",
          "validate_json",
          "logger.info",
          "Path.cwd",
          "backup_files",
          "logger.error",
          "target_path.open",
          "target_path.exists",
          "json.dump",
          "logger.warning",
          "f.write",
          "Path"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "8907e54f-e773-4b3e-9f40-ffefe1424416"
    },
    {
      "module_id": "scripts.fix_hardcoded_usernames",
      "path": "scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "module_doc": "Fix Hardcoded Usernames Script\nAutomatically detects and replaces hardcoded usernames with dynamic values from .env or git config.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_detect_user_info",
          "docstring": "Detect user info from .env, git config, or environment.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_env",
          "docstring": "Load user info from .env file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_git",
          "docstring": "Load user info from git config.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_environment",
          "docstring": "Load user info from environment variables.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_user_info",
          "docstring": "Get detected user information.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_files",
          "docstring": "Scan for files containing hardcoded usernames.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "fix_file",
          "docstring": "Fix hardcoded usernames in a single file.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "fix_all_files",
          "docstring": "Fix hardcoded usernames in all project files.",
          "line_range": null,
          "parameters": [
            "self",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "generate_env_template",
          "docstring": "Generate .env template with required variables.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "UserInfoDetector",
          "docstring": "Detect user information from various sources.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_detect_user_info",
              "docstring": "Detect user info from .env, git config, or environment.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_env",
              "docstring": "Load user info from .env file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_git",
              "docstring": "Load user info from git config.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_environment",
              "docstring": "Load user info from environment variables.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_user_info",
              "docstring": "Get detected user information.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "HardcodeFixer",
          "docstring": "Fix hardcoded usernames in project files.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_files",
              "docstring": "Scan for files containing hardcoded usernames.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "fix_file",
              "docstring": "Fix hardcoded usernames in a single file.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "dry_run"
              ]
            },
            {
              "name": "fix_all_files",
              "docstring": "Fix hardcoded usernames in all project files.",
              "line_range": null,
              "parameters": [
                "self",
                "dry_run"
              ]
            },
            {
              "name": "generate_env_template",
              "docstring": "Generate .env template with required variables.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "UserInfoDetector",
          "Path"
        ],
        "_detect_user_info": [
          "env_vars.items",
          "logger.info",
          "env_info.items",
          "self._load_from_git",
          "self._load_from_env",
          "user_info.update",
          "user_info.get",
          "self._load_from_environment"
        ],
        "_load_from_env": [
          "line.strip",
          "value.strip",
          "env_vars.get",
          "key.strip",
          "logger.error",
          "line.split",
          "open",
          "env_file.exists",
          "line.startswith"
        ],
        "_load_from_git": [
          "subprocess.run",
          "match.group",
          "re.search",
          "logger.error"
        ],
        "_load_from_environment": [],
        "get_user_info": [],
        "scan_files": [
          "files_with_hardcode.append",
          "any",
          "str",
          "content.count",
          "logger.warning",
          "f.read",
          "open"
        ],
        "fix_file": [
          "logger.info",
          "logger.error",
          "content.count",
          "f.read",
          "open",
          "f.write",
          "content.replace"
        ],
        "fix_all_files": [
          "self.fix_file",
          "logger.info",
          "len",
          "str",
          "self.scan_files"
        ],
        "generate_env_template": [],
        "main": [
          "logger.info",
          "fixer.generate_env_template",
          "parser.add_argument",
          "replacements.items",
          "len",
          "fixer.fix_all_files",
          "print",
          "parser.parse_args",
          "fixer.scan_files",
          "argparse.ArgumentParser",
          "open",
          "HardcodeFixer",
          "f.write",
          "results.items",
          "Path"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d3333df2-265b-4f23-92ec-80229032d03a"
    },
    {
      "module_id": "scripts.create_tasks_index",
      "path": "scripts/create_tasks_index.py",
      "category": "core",
      "module_doc": "Tasks Index Creator\nScans all documentation files and creates comprehensive index of tasks, EPICs, TODOs, and other actionable items.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize regex patterns for task extraction.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "extract_from_markdown",
          "docstring": "Extract tasks from markdown file.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_status",
          "docstring": "Extract document status.",
          "line_range": null,
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_priority",
          "docstring": "Extract document priority.",
          "line_range": null,
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_date",
          "docstring": "Extract document date.",
          "line_range": null,
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_epics",
          "docstring": "Extract EPIC items.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tasks",
          "docstring": "Extract explicit task items.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_todos",
          "docstring": "Extract TODO items.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_phases",
          "docstring": "Extract phase/step items.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_checkboxes",
          "docstring": "Extract checkbox items as tasks.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract surrounding context for a match.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "start",
            "end",
            "context_lines"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_documentation",
          "docstring": "Scan all documentation files for tasks.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_index",
          "docstring": "Generate comprehensive task index.",
          "line_range": null,
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "generate_summary_report",
          "docstring": "Generate human-readable summary report.",
          "line_range": null,
          "parameters": [
            "self",
            "index"
          ],
          "decorators": []
        },
        {
          "name": "save_index",
          "docstring": "Save index and summary to files.",
          "line_range": null,
          "parameters": [
            "self",
            "index",
            "summary",
            "output_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Task",
          "docstring": "Represents a single task or actionable item.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "TaskExtractor",
          "docstring": "Extract tasks from various document formats.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize regex patterns for task extraction.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "extract_from_markdown",
              "docstring": "Extract tasks from markdown file.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_status",
              "docstring": "Extract document status.",
              "line_range": null,
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_priority",
              "docstring": "Extract document priority.",
              "line_range": null,
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_date",
              "docstring": "Extract document date.",
              "line_range": null,
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_epics",
              "docstring": "Extract EPIC items.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_tasks",
              "docstring": "Extract explicit task items.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_todos",
              "docstring": "Extract TODO items.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_phases",
              "docstring": "Extract phase/step items.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_checkboxes",
              "docstring": "Extract checkbox items as tasks.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract surrounding context for a match.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "start",
                "end",
                "context_lines"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TaskIndexGenerator",
          "docstring": "Generate comprehensive task index.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_documentation",
              "docstring": "Scan all documentation files for tasks.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_index",
              "docstring": "Generate comprehensive task index.",
              "line_range": null,
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "generate_summary_report",
              "docstring": "Generate human-readable summary report.",
              "line_range": null,
              "parameters": [
                "self",
                "index"
              ]
            },
            {
              "name": "save_index",
              "docstring": "Save index and summary to files.",
              "line_range": null,
              "parameters": [
                "self",
                "index",
                "summary",
                "output_dir"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "TaskExtractor",
          "Path"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "extract_from_markdown": [
          "self._extract_phases",
          "self._extract_date",
          "self._extract_tasks",
          "logger.error",
          "self._extract_status",
          "tasks.extend",
          "f.read",
          "self._extract_priority",
          "open",
          "self._extract_epics",
          "self._extract_checkboxes",
          "self._extract_todos"
        ],
        "_extract_status": [
          "match.group"
        ],
        "_extract_priority": [
          "match.group"
        ],
        "_extract_date": [
          "match.group",
          "datetime.now"
        ],
        "_extract_epics": [
          "self._extract_context",
          "Task",
          "match.start",
          "str",
          "tasks.append",
          "match.end",
          "match.group"
        ],
        "_extract_tasks": [
          "self._extract_context",
          "Task",
          "match.start",
          "str",
          "tasks.append",
          "match.end",
          "match.group"
        ],
        "_extract_todos": [
          "Task",
          "match.start",
          "str",
          "tasks.append",
          "match.group"
        ],
        "_extract_phases": [
          "self._extract_context",
          "Task",
          "match.start",
          "str",
          "tasks.append",
          "match.end",
          "match.group"
        ],
        "_extract_checkboxes": [
          "task_title.upper",
          "Task",
          "match.start",
          "any",
          "str",
          "tasks.append",
          "match.group"
        ],
        "_extract_context": [
          "len",
          "min",
          "max",
          "context.strip",
          "content.split"
        ],
        "scan_documentation": [
          "docs_dir.glob",
          "logger.info",
          "all_tasks.extend",
          "docs_dir.exists"
        ],
        "generate_index": [
          "by_category.items",
          "by_file.items",
          "len",
          "by_status.items",
          "asdict",
          "datetime.now",
          "by_priority.items"
        ],
        "generate_summary_report": [
          "sorted",
          "len",
          "status.upper",
          "file_categories.items",
          "category.upper",
          "Path",
          "priority.upper"
        ],
        "save_index": [
          "logger.info",
          "json.dump",
          "output_path.mkdir",
          "open",
          "f.write",
          "Path"
        ],
        "main": [
          "by_category.items",
          "logger.info",
          "parser.add_argument",
          "generator.generate_index",
          "generator.save_index",
          "len",
          "TaskIndexGenerator",
          "print",
          "by_status.items",
          "parser.parse_args",
          "by_status.get",
          "argparse.ArgumentParser",
          "generator.generate_summary_report",
          "by_category.get",
          "generator.scan_documentation",
          "sorted"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "2d70e5b9-b01d-41d1-8379-79740c821f09"
    },
    {
      "module_id": "llmstruct.templates.__init__",
      "path": "llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "84b4fbd3-b2d7-4399-9c16-f12678bf3ba4"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_argument_parser",
      "path": "llmstruct/ARCHIVE/cli_argument_parser.py",
      "category": "core",
      "module_doc": "CLI argument parsing for LLMStruct.",
      "functions": [
        {
          "name": "create_argument_parser",
          "docstring": "Create and configure the main argument parser.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "add_api_bot_commands",
          "docstring": "Add API and bot management commands to the parser.",
          "line_range": null,
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        },
        {
          "name": "create_full_argument_parser",
          "docstring": "Create the full argument parser with all commands.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "create_argument_parser": [
          "parser.add_subparsers",
          "interactive_parser.add_argument",
          "query_parser.add_argument",
          "subparsers.add_parser",
          "argparse.ArgumentParser",
          "dogfood_parser.add_argument",
          "review_parser.add_argument",
          "copilot_parser.add_argument",
          "context_parser.add_argument",
          "audit_parser.add_argument",
          "duplicates_parser.add_argument",
          "parse_parser.add_argument"
        ],
        "add_api_bot_commands": [
          "add_bot_commands",
          "add_api_commands"
        ],
        "create_full_argument_parser": [
          "create_argument_parser",
          "add_api_bot_commands"
        ]
      },
      "dependencies": [
        "Path",
        "add_api_commands",
        "add_bot_commands",
        "api_commands",
        "argparse",
        "bot_commands",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "26bf337e-2876-47eb-910d-d42501a93d61"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_core",
      "path": "llmstruct/ARCHIVE/cli_core.py",
      "category": "core",
      "module_doc": "Core CLI functionality and main loop.",
      "functions": [
        {
          "name": "create_cli_core",
          "docstring": "Factory function to create CLI core instance.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI core with root directory.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_cache",
          "docstring": "Initialize cache if enabled in config.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_copilot",
          "docstring": "Initialize Copilot integration if enabled.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive_mode",
          "docstring": "Run the interactive CLI mode.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "Clean up resources.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLICore",
          "docstring": "Core CLI class handling main loop and coordination.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI core with root directory.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "setup_cache",
              "docstring": "Initialize cache if enabled in config.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_copilot",
              "docstring": "Initialize Copilot integration if enabled.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_interactive_mode",
              "docstring": "Run the interactive CLI mode.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CLIConfig",
          "CLIUtils",
          "CommandProcessor"
        ],
        "setup_cache": [
          "logging.info",
          "cache_config.get",
          "cache_path.mkdir",
          "str",
          "logging.warning",
          "Path",
          "JSONCache"
        ],
        "setup_copilot": [
          "logging.info",
          "logging.warning",
          "initialize_copilot",
          "copilot_config.get"
        ],
        "run_interactive_mode": [
          "user_input.lower",
          "logging.error",
          "self.setup_copilot",
          "user_input.startswith",
          "self.cleanup",
          "input",
          "print",
          "self.setup_cache"
        ],
        "cleanup": [
          "logging.info"
        ],
        "create_cli_core": [
          "CLICore"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "JSONCache",
        "Optional",
        "Path",
        "cli_commands",
        "cli_config",
        "cli_utils",
        "copilot",
        "initialize_copilot",
        "llmstruct.cache",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "754dd00a-bd56-4b58-b291-0f285b4fb48b"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_utils",
      "path": "llmstruct/ARCHIVE/cli_utils.py",
      "category": "core",
      "module_doc": "CLI utility functions.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize utils with root directory.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read file content with size limit.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "write_file_content",
          "docstring": "Write content to file.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "get_directory_structure",
          "docstring": "Get directory structure using folder generator.",
          "line_range": null,
          "parameters": [
            "self",
            "path",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON content.",
          "line_range": null,
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "format_json",
          "docstring": "Format data as JSON string.",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "indent"
          ],
          "decorators": []
        },
        {
          "name": "generate_unique_id",
          "docstring": "Generate unique ID for commands, queues, etc.",
          "line_range": null,
          "parameters": [
            "self",
            "prefix"
          ],
          "decorators": []
        },
        {
          "name": "safe_path_join",
          "docstring": "Safely join path parts, preventing directory traversal.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_exists",
          "docstring": "Check if file exists.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "dir_exists",
          "docstring": "Check if directory exists.",
          "line_range": null,
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_size",
          "docstring": "Get file size in bytes.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_file",
          "docstring": "Create backup of file with timestamp.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_backups",
          "docstring": "Clean up old backup files, keeping only the most recent ones.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "keep_count"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIUtils",
          "docstring": "Utility functions for CLI operations.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize utils with root directory.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "read_file_content",
              "docstring": "Read file content with size limit.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "max_size"
              ]
            },
            {
              "name": "write_file_content",
              "docstring": "Write content to file.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "content"
              ]
            },
            {
              "name": "get_directory_structure",
              "docstring": "Get directory structure using folder generator.",
              "line_range": null,
              "parameters": [
                "self",
                "path",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ]
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON content.",
              "line_range": null,
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "format_json",
              "docstring": "Format data as JSON string.",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "indent"
              ]
            },
            {
              "name": "generate_unique_id",
              "docstring": "Generate unique ID for commands, queues, etc.",
              "line_range": null,
              "parameters": [
                "self",
                "prefix"
              ]
            },
            {
              "name": "safe_path_join",
              "docstring": "Safely join path parts, preventing directory traversal.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_exists",
              "docstring": "Check if file exists.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "dir_exists",
              "docstring": "Check if directory exists.",
              "line_range": null,
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "get_file_size",
              "docstring": "Get file size in bytes.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "backup_file",
              "docstring": "Create backup of file with timestamp.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "cleanup_old_backups",
              "docstring": "Clean up old backup files, keeping only the most recent ones.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "keep_count"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "read_file_content": [
          "logging.error",
          "os.stat",
          "logging.warning",
          "f.read",
          "open"
        ],
        "write_file_content": [
          "logging.info",
          "logging.error",
          "open",
          "f.write",
          "Path"
        ],
        "get_directory_structure": [
          "os.listdir",
          "get_folder_structure",
          "logging.error",
          "sorted"
        ],
        "validate_json": [
          "json.loads",
          "str"
        ],
        "format_json": [
          "json.dumps",
          "logging.error",
          "str"
        ],
        "generate_unique_id": [
          "int",
          "uuid.uuid4",
          "time.time",
          "str"
        ],
        "safe_path_join": [
          "resolved_path.startswith",
          "ValueError"
        ],
        "file_exists": [
          "self.safe_path_join"
        ],
        "dir_exists": [
          "self.safe_path_join"
        ],
        "get_file_size": [
          "self.safe_path_join"
        ],
        "backup_file": [
          "logging.error",
          "time.time",
          "self.safe_path_join",
          "int",
          "src.read",
          "dst.write",
          "open"
        ],
        "cleanup_old_backups": [
          "logging.info",
          "backups.append",
          "logging.error",
          "self.safe_path_join",
          "os.listdir",
          "int",
          "logging.warning",
          "os.remove",
          "backups.sort",
          "filename.split",
          "filename.startswith"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "cd1cb581-8dd4-4999-9e44-0196b2489ab3"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_main_commands",
      "path": "llmstruct/ARCHIVE/cli_main_commands.py",
      "category": "core",
      "module_doc": "Main CLI command handlers for LLMStruct.",
      "functions": [
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "basic_interactive_processing",
          "docstring": "Basic interactive processing without enhanced features.",
          "line_range": null,
          "parameters": [
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse": [
          "logging.info",
          "logging.error",
          "attach_to_llm_request",
          "generate_json",
          "cache.close",
          "load_gitignore",
          "JSONCache"
        ],
        "query": [
          "logging.info",
          "logging.error",
          "client.query",
          "client.query_with_context",
          "hasattr",
          "create_context_orchestrator",
          "json.dump",
          "LLMClient",
          "logging.warning",
          "orchestrator.get_context_for_scenario",
          "cache.close",
          "Path",
          "JSONCache"
        ],
        "interactive": [
          "logging.warning",
          "interactive_modular",
          "interactive_legacy"
        ],
        "interactive_modular": [
          "cli_core.run_interactive_mode",
          "logging.error",
          "interactive_legacy",
          "create_cli_core"
        ],
        "interactive_legacy": [
          "basic_interactive_processing",
          "logging.error",
          "process_cli_queue_enhanced",
          "LLMClient",
          "cache.close",
          "print",
          "Path",
          "JSONCache"
        ],
        "basic_interactive_processing": [
          "user_input.lower",
          "open",
          "client.query",
          "user_input.startswith",
          "f.read",
          "input",
          "print"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "copilot": [
          "logging.info",
          "logging.error",
          "manager.close",
          "hasattr",
          "smart_suggest",
          "manager.unload_context_layer",
          "config_path.exists",
          "layers.split",
          "manager.get_context_status",
          "manager.refresh_all_contexts",
          "shutil.copy",
          "f.write",
          "Path",
          "template_path.exists",
          "manager.validate_change",
          "getattr",
          "initialize_copilot",
          "manager.load_context_layer",
          "open",
          "print",
          "manager.export_context",
          "enumerate"
        ],
        "audit": [
          "hasattr",
          "analyze_duplicates",
          "file_path.exists",
          "print",
          "Path"
        ],
        "analyze_duplicates": [
          "analysis.get",
          "logging.error",
          "len",
          "json.dumps",
          "getattr",
          "f.get",
          "func.get",
          "json.dump",
          "orchestrator.analyze_codebase_for_duplicates",
          "WorkflowOrchestrator",
          "open",
          "print"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Optional",
        "Path",
        "WorkflowOrchestrator",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "cli",
        "cli_core",
        "context_orchestrator",
        "copilot",
        "create_cli_core",
        "create_context_orchestrator",
        "generate_json",
        "initialize_copilot",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "process_cli_queue_enhanced",
        "shutil",
        "smart_suggest",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": null,
      "artifact_id": "6adc4585-816b-4418-9f41-86246d89adb8"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_config",
      "path": "llmstruct/ARCHIVE/cli_config.py",
      "category": "core",
      "module_doc": "CLI configuration management.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize configuration manager.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from llmstruct.toml.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "Get cache configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "Get Copilot configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "Get queue configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "Get context configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_gitignore_patterns",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "Get directories to exclude from scanning.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "Get file patterns to include.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "Get file patterns to exclude.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "Get maximum file size for processing (in bytes).",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_auto_update_config",
          "docstring": "Get auto-update configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_auto_update_enabled",
          "docstring": "Check if auto-update is enabled.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "Get path to struct.json file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "Get path to context file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "Save current configuration to file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_config",
          "docstring": "Update configuration value.",
          "line_range": null,
          "parameters": [
            "self",
            "section",
            "key",
            "value"
          ],
          "decorators": []
        },
        {
          "name": "reload_config",
          "docstring": "Reload configuration from file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIConfig",
          "docstring": "Manages CLI configuration from llmstruct.toml and other sources.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize configuration manager.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from llmstruct.toml.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cache_config",
              "docstring": "Get cache configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_copilot_config",
              "docstring": "Get Copilot configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_queue_config",
              "docstring": "Get queue configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_config",
              "docstring": "Get context configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_gitignore_patterns",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "Get directories to exclude from scanning.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_include_patterns",
              "docstring": "Get file patterns to include.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "Get file patterns to exclude.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_max_file_size",
              "docstring": "Get maximum file size for processing (in bytes).",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_auto_update_config",
              "docstring": "Get auto-update configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_auto_update_enabled",
              "docstring": "Check if auto-update is enabled.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_struct_file_path",
              "docstring": "Get path to struct.json file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_file_path",
              "docstring": "Get path to context file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_config",
              "docstring": "Save current configuration to file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_config",
              "docstring": "Update configuration value.",
              "line_range": null,
              "parameters": [
                "self",
                "section",
                "key",
                "value"
              ]
            },
            {
              "name": "reload_config",
              "docstring": "Reload configuration from file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path"
        ],
        "_load_config": [
          "logging.error",
          "toml.load"
        ],
        "get_cache_config": [],
        "get_copilot_config": [],
        "get_queue_config": [],
        "get_context_config": [],
        "get_gitignore_patterns": [
          "line.strip",
          "logging.error",
          "gitignore_path.exists",
          "gitignore_path.open",
          "line.startswith",
          "Path"
        ],
        "get_exclude_dirs": [
          "cli_config.get",
          "list",
          "parsing_config.get",
          "set"
        ],
        "get_include_patterns": [
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_exclude_patterns": [
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_max_file_size": [],
        "get_auto_update_config": [],
        "is_auto_update_enabled": [
          "self.get_auto_update_config"
        ],
        "get_struct_file_path": [],
        "get_context_file_path": [],
        "save_config": [
          "logging.error",
          "toml.dump"
        ],
        "update_config": [
          "self.save_config"
        ],
        "reload_config": [
          "self._load_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "logging",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "7db27f7c-8873-47dc-9d13-d26b8024e8eb"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_commands",
      "path": "llmstruct/ARCHIVE/cli_commands.py",
      "category": "core",
      "module_doc": "CLI command processing and handlers.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize command processor.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir",
            "config",
            "utils"
          ],
          "decorators": []
        },
        {
          "name": "set_cache",
          "docstring": "Set cache instance.",
          "line_range": null,
          "parameters": [
            "self",
            "cache"
          ],
          "decorators": []
        },
        {
          "name": "set_copilot",
          "docstring": "Set Copilot manager instance.",
          "line_range": null,
          "parameters": [
            "self",
            "copilot_manager"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "Process a command starting with /.",
          "line_range": null,
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "process_prompt",
          "docstring": "Process a regular user prompt (not a command).",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Show help information.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace",
          "docstring": "Handle workspace state and permissions management.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_mode",
          "docstring": "Handle context mode operations with workspace integration.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_view",
          "docstring": "View file or directory contents.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_write",
          "docstring": "Write content to a file.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_queue",
          "docstring": "Handle queue operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_cache",
          "docstring": "Handle cache operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_copilot",
          "docstring": "Handle Copilot operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_config",
          "docstring": "Handle configuration operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Show system status.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_backup",
          "docstring": "Create backup of a file.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_parse",
          "docstring": "Parse project structure.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_audit",
          "docstring": "Handle audit operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_auto_update",
          "docstring": "Handle auto-update operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_struct_status",
          "docstring": "Handle struct status operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context",
          "docstring": "Handle context operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_session",
          "docstring": "Handle session operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CommandProcessor",
          "docstring": "Processes CLI commands and user prompts.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize command processor.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir",
                "config",
                "utils"
              ]
            },
            {
              "name": "set_cache",
              "docstring": "Set cache instance.",
              "line_range": null,
              "parameters": [
                "self",
                "cache"
              ]
            },
            {
              "name": "set_copilot",
              "docstring": "Set Copilot manager instance.",
              "line_range": null,
              "parameters": [
                "self",
                "copilot_manager"
              ]
            },
            {
              "name": "process_command",
              "docstring": "Process a command starting with /.",
              "line_range": null,
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "process_prompt",
              "docstring": "Process a regular user prompt (not a command).",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Show help information.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace",
              "docstring": "Handle workspace state and permissions management.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_mode",
              "docstring": "Handle context mode operations with workspace integration.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_view",
              "docstring": "View file or directory contents.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_write",
              "docstring": "Write content to a file.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_queue",
              "docstring": "Handle queue operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_cache",
              "docstring": "Handle cache operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_copilot",
              "docstring": "Handle Copilot operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_config",
              "docstring": "Handle configuration operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Show system status.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_backup",
              "docstring": "Create backup of a file.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_parse",
              "docstring": "Parse project structure.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_audit",
              "docstring": "Handle audit operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_auto_update",
              "docstring": "Handle auto-update operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_struct_status",
              "docstring": "Handle struct status operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context",
              "docstring": "Handle context operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_session",
              "docstring": "Handle session operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "print",
          "WorkspaceStateManager"
        ],
        "set_cache": [],
        "set_copilot": [],
        "process_command": [
          "command_line.split",
          "logging.error",
          "command_line.strip",
          "len",
          "print"
        ],
        "process_prompt": [
          "logging.info",
          "context_data.get",
          "logging.error",
          "get_optimized_context",
          "prompt.strip",
          "len",
          "logging.warning",
          "CopilotEvent",
          "print",
          "context_info.get"
        ],
        "cmd_help": [
          "print"
        ],
        "cmd_workspace": [
          "state.get",
          "entry.get",
          "logging.error",
          "len",
          "action_args.split",
          "int",
          "boundaries.get",
          "override.get",
          "args.strip",
          "permissions.get",
          "print",
          "result.get"
        ],
        "cmd_mode": [
          "context_data.get",
          "get_optimized_context",
          "len",
          "permissions.get",
          "args.lower",
          "args.strip",
          "re.findall",
          "result.get",
          "print",
          "args.upper",
          "metrics.get"
        ],
        "cmd_view": [
          "os.listdir",
          "print",
          "args.strip",
          "sorted"
        ],
        "cmd_write": [
          "len",
          "args.split",
          "content.endswith",
          "content.startswith",
          "print"
        ],
        "cmd_queue": [
          "queue_data.get",
          "len",
          "cmd.get",
          "json.load",
          "args.strip",
          "os.remove",
          "open",
          "print",
          "enumerate"
        ],
        "cmd_cache": [
          "len",
          "os.listdir",
          "args.strip",
          "stats.get",
          "print"
        ],
        "cmd_copilot": [
          "json.dumps",
          "json.load",
          "args.strip",
          "open",
          "print"
        ],
        "cmd_config": [
          "json.dumps",
          "print",
          "args.strip"
        ],
        "cmd_status": [
          "print"
        ],
        "cmd_backup": [
          "print",
          "args.strip"
        ],
        "cmd_parse": [
          "print",
          "generate_json"
        ],
        "cmd_audit": [
          "print",
          "args.strip"
        ],
        "handle_auto_update": [
          "print",
          "generate_json"
        ],
        "handle_struct_status": [
          "len",
          "os.stat",
          "struct_data.get",
          "json.load",
          "open",
          "print",
          "datetime.fromtimestamp"
        ],
        "cmd_context": [
          "context_data.get",
          "get_optimized_context",
          "len",
          "args.strip",
          "print",
          "metrics.get"
        ],
        "cmd_session": [
          "state.get",
          "len",
          "args.strip",
          "print",
          "datetime.now"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CopilotContextManager",
        "CopilotEvent",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "WorkspaceStateManager",
        "cli_config",
        "cli_utils",
        "copilot",
        "create_context_orchestrator",
        "datetime",
        "generate_json",
        "get_optimized_context",
        "get_optimized_context_for_scenario",
        "initialize_copilot",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "sys",
        "trigger_copilot_event",
        "typing",
        "workspace"
      ],
      "hash": null,
      "artifact_id": "aeaaf05d-c6fe-4efc-a947-233ba20deb5b"
    },
    {
      "module_id": "llmstruct.api.__init__",
      "path": "llmstruct/api/__init__.py",
      "category": "cli",
      "module_doc": "LLMStruct FastAPI Module\n\nProvides HTTP REST API access to LLMStruct CLI functionality.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "bb4ffa9e-e8ca-4a39-8c7a-76498a4e437d"
    },
    {
      "module_id": "llmstruct.api.config",
      "path": "llmstruct/api/config.py",
      "category": "core",
      "module_doc": "Configuration management for LLMStruct FastAPI",
      "functions": [],
      "classes": [
        {
          "name": "Settings",
          "docstring": "Application settings with environment variable support",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseSettings"
          ]
        }
      ],
      "callgraph": {},
      "dependencies": [
        "BaseSettings",
        "List",
        "pydantic",
        "pydantic_settings",
        "typing"
      ],
      "hash": null,
      "artifact_id": "55370731-63b4-4a51-a1f3-9d2f33b4953d"
    },
    {
      "module_id": "llmstruct.api.app",
      "path": "llmstruct/api/app.py",
      "category": "core",
      "module_doc": "Main FastAPI application for LLMStruct",
      "functions": [
        {
          "name": "root",
          "docstring": "Root endpoint with API information",
          "line_range": null,
          "parameters": [],
          "decorators": [
            "app.get('/', tags=['root'])"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "root": [
          "app.get"
        ]
      },
      "dependencies": [
        "CORSMiddleware",
        "Depends",
        "FastAPI",
        "GZipMiddleware",
        "api_key_middleware",
        "chat",
        "config",
        "continue_adapter",
        "fastapi",
        "fastapi.middleware.cors",
        "fastapi.middleware.gzip",
        "logging",
        "middleware.auth",
        "middleware.logging",
        "request_logging_middleware",
        "routes",
        "settings",
        "system",
        "uvicorn"
      ],
      "hash": null,
      "artifact_id": "596b79db-2dd3-455d-825a-e4d244bce349"
    },
    {
      "module_id": "llmstruct.core.hash_utils",
      "path": "llmstruct/core/hash_utils.py",
      "category": "core",
      "module_doc": "Hash Utilities for LLMStruct\n\nProvides consistent hashing for files, functions, and code entities\nto support incremental builds and change detection.",
      "functions": [
        {
          "name": "hash_content",
          "docstring": "Generate hash for string content.\n\nArgs:\n    content: String content to hash\n    algorithm: Hash algorithm (sha256, md5, sha1)\n    \nReturns:\n    Hex digest of the hash",
          "line_range": null,
          "parameters": [
            "content",
            "algorithm"
          ],
          "decorators": []
        },
        {
          "name": "hash_file",
          "docstring": "Generate hash for file content.\n\nArgs:\n    file_path: Path to file\n    algorithm: Hash algorithm\n    \nReturns:\n    Hex digest of file hash, None if file doesn't exist",
          "line_range": null,
          "parameters": [
            "file_path",
            "algorithm"
          ],
          "decorators": []
        },
        {
          "name": "hash_source",
          "docstring": "Generate hash for source code content.\n\nNormalizes whitespace and removes comments for consistent hashing.\n\nArgs:\n    content: Source code content\n    algorithm: Hash algorithm\n    \nReturns:\n    Hex digest of normalized source hash",
          "line_range": null,
          "parameters": [
            "content",
            "algorithm"
          ],
          "decorators": []
        },
        {
          "name": "normalize_source_for_hashing",
          "docstring": "Normalize source code for consistent hashing.\n\n- Removes leading/trailing whitespace\n- Normalizes line endings\n- Removes empty lines\n- Strips inline comments (# comments)\n\nArgs:\n    content: Source code content\n    \nReturns:\n    Normalized content",
          "line_range": null,
          "parameters": [
            "content"
          ],
          "decorators": []
        },
        {
          "name": "hash_entity",
          "docstring": "Generate hash for a code entity (function, class, etc.).\n\nUses entity content and metadata for hashing.\n\nArgs:\n    entity: Entity dictionary with 'content', 'name', 'type' keys\n    algorithm: Hash algorithm\n    \nReturns:\n    Hex digest of entity hash",
          "line_range": null,
          "parameters": [
            "entity",
            "algorithm"
          ],
          "decorators": []
        },
        {
          "name": "create_file_hash_map",
          "docstring": "Create hash map for multiple files.\n\nArgs:\n    file_paths: List of file paths\n    algorithm: Hash algorithm\n    \nReturns:\n    Dictionary mapping file paths to their hashes",
          "line_range": null,
          "parameters": [
            "file_paths",
            "algorithm"
          ],
          "decorators": []
        },
        {
          "name": "has_file_changed",
          "docstring": "Check if file has changed since previous hash.\n\nArgs:\n    file_path: Path to file\n    previous_hash: Previously computed hash\n    algorithm: Hash algorithm\n    \nReturns:\n    True if file has changed, False otherwise",
          "line_range": null,
          "parameters": [
            "file_path",
            "previous_hash",
            "algorithm"
          ],
          "decorators": []
        },
        {
          "name": "create_incremental_hash_database",
          "docstring": "Create hash database for incremental builds.\n\nArgs:\n    base_path: Base directory to scan\n    file_patterns: List of glob patterns for files to include\n    algorithm: Hash algorithm\n    \nReturns:\n    Dictionary mapping file paths to hashes",
          "line_range": null,
          "parameters": [
            "base_path",
            "file_patterns",
            "algorithm"
          ],
          "decorators": []
        },
        {
          "name": "compare_hash_databases",
          "docstring": "Compare two hash databases to find changes.\n\nArgs:\n    old_db: Previous hash database\n    new_db: Current hash database\n    \nReturns:\n    Dictionary with 'added', 'modified', 'deleted' file lists",
          "line_range": null,
          "parameters": [
            "old_db",
            "new_db"
          ],
          "decorators": []
        },
        {
          "name": "quick_file_hash",
          "docstring": "Quick SHA-256 hash of a file",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "quick_content_hash",
          "docstring": "Quick SHA-256 hash of content",
          "line_range": null,
          "parameters": [
            "content"
          ],
          "decorators": []
        },
        {
          "name": "quick_source_hash",
          "docstring": "Quick SHA-256 hash of normalized source code",
          "line_range": null,
          "parameters": [
            "source_code"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "hash_content": [
          "hashlib.new",
          "hasher.hexdigest",
          "content.encode",
          "hasher.update"
        ],
        "hash_file": [
          "path.is_file",
          "path.exists",
          "iter",
          "hashlib.new",
          "f.read",
          "hasher.update",
          "open",
          "hasher.hexdigest",
          "Path"
        ],
        "hash_source": [
          "hash_content",
          "normalize_source_for_hashing"
        ],
        "normalize_source_for_hashing": [
          "content.splitlines",
          "line.strip",
          "lines.append",
          "enumerate"
        ],
        "hash_entity": [
          "p.get",
          "hash_parts.append",
          "hash_content",
          "normalize_source_for_hashing"
        ],
        "create_file_hash_map": [
          "hash_file"
        ],
        "has_file_changed": [
          "hash_file"
        ],
        "create_incremental_hash_database": [
          "hash_file",
          "base_path.glob",
          "str",
          "file_path.is_file",
          "file_path.relative_to",
          "Path"
        ],
        "compare_hash_databases": [
          "modified.append",
          "old_db.keys",
          "new_db.keys",
          "set",
          "list",
          "sorted"
        ],
        "quick_file_hash": [
          "hash_file"
        ],
        "quick_content_hash": [
          "hash_content"
        ],
        "quick_source_hash": [
          "hash_source"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "hashlib",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "90b0f7e1-9206-4e19-b8dc-5e1b13926454"
    },
    {
      "module_id": "llmstruct.core.summary_providers",
      "path": "llmstruct/core/summary_providers.py",
      "category": "core",
      "module_doc": "Summary Providers System\n\nProvides multiple strategies for generating code summaries:\n- HeuristicProvider: Fast, offline, deterministic (default)\n- LLMProvider: AI-powered but optional and disabled by default",
      "functions": [
        {
          "name": "get_summary_system",
          "docstring": "Get global summary system instance",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_summary",
          "docstring": "Generate summary using the configured provider",
          "line_range": null,
          "parameters": [
            "code",
            "entity_type",
            "entity_name",
            "docstring"
          ],
          "decorators": []
        },
        {
          "name": "is_empty",
          "docstring": "Check if summary is effectively empty",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_summary",
          "docstring": "Generate summary for code entity",
          "line_range": null,
          "parameters": [
            "self",
            "code",
            "entity_type",
            "entity_name",
            "docstring"
          ],
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "get_provider_name",
          "docstring": "Get provider name",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "max_length"
          ],
          "decorators": []
        },
        {
          "name": "generate_summary",
          "docstring": "Generate heuristic summary",
          "line_range": null,
          "parameters": [
            "self",
            "code",
            "entity_type",
            "entity_name",
            "docstring"
          ],
          "decorators": []
        },
        {
          "name": "_clean_docstring",
          "docstring": "Clean and truncate docstring",
          "line_range": null,
          "parameters": [
            "self",
            "docstring"
          ],
          "decorators": []
        },
        {
          "name": "_generate_heuristic_summary",
          "docstring": "Generate summary based on naming patterns and code structure",
          "line_range": null,
          "parameters": [
            "self",
            "entity_type",
            "entity_name",
            "code"
          ],
          "decorators": []
        },
        {
          "name": "_humanize_name",
          "docstring": "Convert snake_case or CamelCase to human readable",
          "line_range": null,
          "parameters": [
            "self",
            "name"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tags_from_docstring",
          "docstring": "Extract tags from docstring content",
          "line_range": null,
          "parameters": [
            "self",
            "docstring"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tags_from_code",
          "docstring": "Extract tags from code analysis",
          "line_range": null,
          "parameters": [
            "self",
            "entity_type",
            "entity_name",
            "code"
          ],
          "decorators": []
        },
        {
          "name": "get_provider_name",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "api_key"
          ],
          "decorators": []
        },
        {
          "name": "generate_summary",
          "docstring": "Generate LLM-powered summary",
          "line_range": null,
          "parameters": [
            "self",
            "code",
            "entity_type",
            "entity_name",
            "docstring"
          ],
          "decorators": []
        },
        {
          "name": "_create_cache_key",
          "docstring": "Create cache key for LLM results",
          "line_range": null,
          "parameters": [
            "self",
            "code",
            "entity_type",
            "entity_name"
          ],
          "decorators": []
        },
        {
          "name": "_call_llm_api",
          "docstring": "Call LLM API to generate summary",
          "line_range": null,
          "parameters": [
            "self",
            "code",
            "entity_type",
            "entity_name",
            "docstring"
          ],
          "decorators": []
        },
        {
          "name": "_create_prompt",
          "docstring": "Create LLM prompt for summary generation",
          "line_range": null,
          "parameters": [
            "self",
            "code",
            "entity_type",
            "entity_name",
            "docstring"
          ],
          "decorators": []
        },
        {
          "name": "get_provider_name",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_summary",
          "docstring": "Generate summary using configured provider",
          "line_range": null,
          "parameters": [
            "self",
            "code",
            "entity_type",
            "entity_name",
            "docstring"
          ],
          "decorators": []
        },
        {
          "name": "get_active_provider",
          "docstring": "Get name of currently active provider",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "SummarySource",
          "docstring": "Source of the summary",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "CodeSummary",
          "docstring": "Container for code summary with metadata",
          "line_range": null,
          "methods": [
            {
              "name": "is_empty",
              "docstring": "Check if summary is effectively empty",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "SummaryProvider",
          "docstring": "Abstract base class for summary providers",
          "line_range": null,
          "methods": [
            {
              "name": "generate_summary",
              "docstring": "Generate summary for code entity",
              "line_range": null,
              "parameters": [
                "self",
                "code",
                "entity_type",
                "entity_name",
                "docstring"
              ]
            },
            {
              "name": "get_provider_name",
              "docstring": "Get provider name",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": [
            "ABC"
          ]
        },
        {
          "name": "HeuristicProvider",
          "docstring": "Fast, deterministic summary provider using heuristics.\n\nFallback chain:\n1. Extract and clean docstring (confidence: 0.9)\n2. Generate from function/class name (confidence: 0.3)\n3. Return empty (confidence: 0.0)",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "max_length"
              ]
            },
            {
              "name": "generate_summary",
              "docstring": "Generate heuristic summary",
              "line_range": null,
              "parameters": [
                "self",
                "code",
                "entity_type",
                "entity_name",
                "docstring"
              ]
            },
            {
              "name": "_clean_docstring",
              "docstring": "Clean and truncate docstring",
              "line_range": null,
              "parameters": [
                "self",
                "docstring"
              ]
            },
            {
              "name": "_generate_heuristic_summary",
              "docstring": "Generate summary based on naming patterns and code structure",
              "line_range": null,
              "parameters": [
                "self",
                "entity_type",
                "entity_name",
                "code"
              ]
            },
            {
              "name": "_humanize_name",
              "docstring": "Convert snake_case or CamelCase to human readable",
              "line_range": null,
              "parameters": [
                "self",
                "name"
              ]
            },
            {
              "name": "_extract_tags_from_docstring",
              "docstring": "Extract tags from docstring content",
              "line_range": null,
              "parameters": [
                "self",
                "docstring"
              ]
            },
            {
              "name": "_extract_tags_from_code",
              "docstring": "Extract tags from code analysis",
              "line_range": null,
              "parameters": [
                "self",
                "entity_type",
                "entity_name",
                "code"
              ]
            },
            {
              "name": "get_provider_name",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": [
            "SummaryProvider"
          ]
        },
        {
          "name": "LLMProvider",
          "docstring": "LLM-powered summary provider (optional, disabled by default).\n\nOnly works when LLM is explicitly enabled via configuration.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "api_key"
              ]
            },
            {
              "name": "generate_summary",
              "docstring": "Generate LLM-powered summary",
              "line_range": null,
              "parameters": [
                "self",
                "code",
                "entity_type",
                "entity_name",
                "docstring"
              ]
            },
            {
              "name": "_create_cache_key",
              "docstring": "Create cache key for LLM results",
              "line_range": null,
              "parameters": [
                "self",
                "code",
                "entity_type",
                "entity_name"
              ]
            },
            {
              "name": "_call_llm_api",
              "docstring": "Call LLM API to generate summary",
              "line_range": null,
              "parameters": [
                "self",
                "code",
                "entity_type",
                "entity_name",
                "docstring"
              ]
            },
            {
              "name": "_create_prompt",
              "docstring": "Create LLM prompt for summary generation",
              "line_range": null,
              "parameters": [
                "self",
                "code",
                "entity_type",
                "entity_name",
                "docstring"
              ]
            },
            {
              "name": "get_provider_name",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": [
            "SummaryProvider"
          ]
        },
        {
          "name": "SummarySystem",
          "docstring": "Main summary system that orchestrates different providers",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_summary",
              "docstring": "Generate summary using configured provider",
              "line_range": null,
              "parameters": [
                "self",
                "code",
                "entity_type",
                "entity_name",
                "docstring"
              ]
            },
            {
              "name": "get_active_provider",
              "docstring": "Get name of currently active provider",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "is_empty": [],
        "generate_summary": [
          "get_summary_system"
        ],
        "get_provider_name": [],
        "__init__": [
          "LLMProvider",
          "HeuristicProvider"
        ],
        "_clean_docstring": [
          "re.split",
          "len",
          "re.sub"
        ],
        "_generate_heuristic_summary": [
          "name_lower.startswith",
          "self._humanize_name",
          "entity_type.title",
          "name_lower.endswith",
          "entity_name.lower"
        ],
        "_humanize_name": [
          "word.lower",
          "re.findall",
          "name.split"
        ],
        "_extract_tags_from_docstring": [
          "docstring.lower",
          "any",
          "tags.append"
        ],
        "_extract_tags_from_code": [
          "entity_name.startswith",
          "tags.append"
        ],
        "_create_cache_key": [
          "content.encode",
          "hashlib.md5"
        ],
        "_call_llm_api": [
          "get_config",
          "self._create_prompt",
          "CodeSummary"
        ],
        "_create_prompt": [
          "get_config"
        ],
        "get_active_provider": [
          "get_config",
          "is_llm_enabled"
        ],
        "get_summary_system": [
          "SummarySystem"
        ]
      },
      "dependencies": [
        "ABC",
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "abc",
        "abstractmethod",
        "config_manager",
        "dataclass",
        "dataclasses",
        "enum",
        "get_config",
        "hashlib",
        "is_llm_enabled",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "e60b3fa5-6656-46cd-bb95-fbd80f9df1b3"
    },
    {
      "module_id": "llmstruct.core.uid_generator",
      "path": "llmstruct/core/uid_generator.py",
      "category": "core",
      "module_doc": "Advanced UID Generator System for LLMStruct v2.1\n\nGenerates stable, unique identifiers for code entities using FQNAME-based approach.\nFixes duplicate issues in uid_components array.",
      "functions": [
        {
          "name": "normalize_path",
          "docstring": "Normalize file path for consistent UID generation",
          "line_range": null,
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "generate_uid",
          "docstring": "Generate stable UID using FQNAME approach.\n\nArgs:\n    entity_type: Type of entity\n    module_path: Path to module (e.g., 'src/llmstruct/core/uid_generator.py')\n    entity_name: Name of entity\n    parent_name: Parent entity name (for methods, nested classes)\n    \nReturns:\n    Stable UID string",
          "line_range": null,
          "parameters": [
            "entity_type",
            "module_path",
            "entity_name",
            "parent_name"
          ],
          "decorators": []
        },
        {
          "name": "generate_uid_components",
          "docstring": "Generate hierarchical UID components for navigation.\n\nFIXED: Removes duplicates and ensures each level is unique.\n\nArgs:\n    entity_type: Type of entity\n    module_path: Path to module\n    entity_name: Name of entity  \n    parent_name: Parent entity name\n    \nReturns:\n    List of hierarchical components without duplicates",
          "line_range": null,
          "parameters": [
            "entity_type",
            "module_path",
            "entity_name",
            "parent_name"
          ],
          "decorators": []
        },
        {
          "name": "create_stable_uid",
          "docstring": "Create stable UID based on content hash (fallback method).\n\nArgs:\n    content: Entity content\n    entity_type: Type of entity\n    \nReturns:\n    Stable hash-based UID",
          "line_range": null,
          "parameters": [
            "content",
            "entity_type"
          ],
          "decorators": []
        },
        {
          "name": "create_legacy_artifact_id",
          "docstring": "Create legacy artifact_id for backward compatibility.\n\nArgs:\n    entity: Entity dictionary\n    \nReturns:\n    Legacy artifact ID",
          "line_range": null,
          "parameters": [
            "entity"
          ],
          "decorators": []
        },
        {
          "name": "enhance_entity_with_uid",
          "docstring": "Enhance entity with UID system components.\n\nArgs:\n    entity: Entity dictionary\n    \nReturns:\n    Enhanced entity with uid, uid_components, and artifact_id",
          "line_range": null,
          "parameters": [
            "entity"
          ],
          "decorators": []
        },
        {
          "name": "validate_uid_uniqueness",
          "docstring": "Validate UID uniqueness across entities.\n\nArgs:\n    entities: List of entities with UIDs\n    \nReturns:\n    Dictionary with 'duplicates' and 'conflicts' lists",
          "line_range": null,
          "parameters": [
            "entities"
          ],
          "decorators": []
        },
        {
          "name": "create_module_uid",
          "docstring": "Create UID for module",
          "line_range": null,
          "parameters": [
            "module_path"
          ],
          "decorators": []
        },
        {
          "name": "create_function_uid",
          "docstring": "Create UID for function",
          "line_range": null,
          "parameters": [
            "module_path",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "create_class_uid",
          "docstring": "Create UID for class",
          "line_range": null,
          "parameters": [
            "module_path",
            "class_name"
          ],
          "decorators": []
        },
        {
          "name": "create_method_uid",
          "docstring": "Create UID for method",
          "line_range": null,
          "parameters": [
            "module_path",
            "class_name",
            "method_name"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "UIDType",
          "docstring": "Types of entities that can have UIDs",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        }
      ],
      "callgraph": {
        "normalize_path": [
          "list",
          "normalized.endswith",
          "Path"
        ],
        "generate_uid": [
          "fqname_parts.append",
          "normalize_path"
        ],
        "generate_uid_components": [
          "current_path.append",
          "parent_name.strip",
          "entity_name.strip",
          "normalize_path",
          "normalized_module.split",
          "seen.add",
          "set",
          "part.strip",
          "unique_components.append",
          "components.append"
        ],
        "create_stable_uid": [
          "content.encode",
          "hashlib.sha256"
        ],
        "create_legacy_artifact_id": [
          "hashlib.md5",
          "normalize_path",
          "id_components.append",
          "p.get",
          "combined.encode",
          "entity.get"
        ],
        "enhance_entity_with_uid": [
          "UIDType",
          "create_legacy_artifact_id",
          "generate_uid_components",
          "entity.copy",
          "generate_uid",
          "entity.get"
        ],
        "validate_uid_uniqueness": [
          "existing.get",
          "duplicates.append",
          "entity.get"
        ],
        "create_module_uid": [
          "generate_uid",
          "Path"
        ],
        "create_function_uid": [
          "generate_uid"
        ],
        "create_class_uid": [
          "generate_uid"
        ],
        "create_method_uid": [
          "generate_uid"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "enum",
        "hashlib",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "13d0cdd6-2b8c-4e24-ac86-7cc8e3c4d080"
    },
    {
      "module_id": "llmstruct.core.__init__",
      "path": "llmstruct/core/__init__.py",
      "category": "cli",
      "module_doc": "LLMStruct Core Module\n\nProvides core functionality for code analysis and structure generation.\nAll LLM-dependent features are optional and disabled by default.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "CodeSummary",
        "ConfigManager",
        "HeuristicProvider",
        "LLMProvider",
        "LLMStructConfig",
        "SummarySource",
        "SummarySystem",
        "UIDType",
        "config_manager",
        "create_legacy_artifact_id",
        "enhance_entity_with_uid",
        "generate_summary",
        "generate_uid",
        "generate_uid_components",
        "get_config",
        "get_config_manager",
        "get_summary_provider",
        "get_summary_system",
        "hash_content",
        "hash_entity",
        "hash_file",
        "hash_source",
        "hash_utils",
        "is_llm_enabled",
        "quick_content_hash",
        "quick_file_hash",
        "quick_source_hash",
        "summary_providers",
        "uid_generator"
      ],
      "hash": null,
      "artifact_id": "236c5620-1ab7-4f0b-80aa-bc30e252a997"
    },
    {
      "module_id": "llmstruct.core.config_manager",
      "path": "llmstruct/core/config_manager.py",
      "category": "core",
      "module_doc": "Configuration Management System for LLMStruct\n\nManages global settings including LLM enablement, provider selection,\nand security controls for offline mode.",
      "functions": [
        {
          "name": "get_config_manager",
          "docstring": "Get global configuration manager instance",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_config",
          "docstring": "Get current configuration",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_llm_enabled",
          "docstring": "Check if LLM functionality is globally enabled",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_summary_provider",
          "docstring": "Get active summary provider (heuristic or llm)",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "Apply environment variable overrides",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load configuration from file or create default",
          "line_range": null,
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_create_config_from_dict",
          "docstring": "Create configuration from dictionary",
          "line_range": null,
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_config",
          "docstring": "Get current configuration, loading if necessary",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_llm_enabled",
          "docstring": "Check if LLM functionality is enabled",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_summary_provider",
          "docstring": "Get active summary provider",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_config_template",
          "docstring": "Save configuration template file",
          "line_range": null,
          "parameters": [
            "self",
            "path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMConfig",
          "docstring": "LLM-specific configuration",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "SummaryConfig",
          "docstring": "Summary generation configuration",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "MetricsConfig",
          "docstring": "Code metrics configuration",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "SecurityConfig",
          "docstring": "Security and privacy configuration",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "LLMStructConfig",
          "docstring": "Main LLMStruct configuration",
          "line_range": null,
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "Apply environment variable overrides",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "ConfigManager",
          "docstring": "Manages LLMStruct configuration with security-first defaults",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "load_config",
              "docstring": "Load configuration from file or create default",
              "line_range": null,
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "_create_config_from_dict",
              "docstring": "Create configuration from dictionary",
              "line_range": null,
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "get_config",
              "docstring": "Get current configuration, loading if necessary",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_llm_enabled",
              "docstring": "Check if LLM functionality is enabled",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_summary_provider",
              "docstring": "Get active summary provider",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_config_template",
              "docstring": "Save configuration template file",
              "line_range": null,
              "parameters": [
                "self",
                "path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [
          "os.getenv"
        ],
        "__init__": [],
        "load_config": [
          "yaml.safe_load",
          "self._create_config_from_dict",
          "LLMStructConfig",
          "open",
          "print",
          "Path"
        ],
        "_create_config_from_dict": [
          "security_data.get",
          "summary_data.get",
          "LLMStructConfig",
          "data.get",
          "llm_data.get"
        ],
        "get_config": [
          "get_config_manager"
        ],
        "is_llm_enabled": [
          "get_config_manager"
        ],
        "get_summary_provider": [
          "get_config_manager"
        ],
        "save_config_template": [
          "open",
          "yaml.dump"
        ],
        "get_config_manager": [
          "ConfigManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "dataclass",
        "dataclasses",
        "field",
        "os",
        "pathlib",
        "typing",
        "yaml"
      ],
      "hash": null,
      "artifact_id": "c4caef32-3c81-44b4-add9-d98700761314"
    },
    {
      "module_id": "llmstruct.validators.__init__",
      "path": "llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "58ab2e57-33c9-4028-8e49-2592c69b270a"
    },
    {
      "module_id": "llmstruct.validators.json_validator",
      "path": "llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": null,
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": null,
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "logging.info",
          "schema_file.exists",
          "logging.error",
          "json_file.exists",
          "validate",
          "str",
          "json.load",
          "open",
          "Path"
        ],
        "validate_directory": [
          "validate_struct_json",
          "any",
          "str",
          "json_file.match",
          "Path"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "60da010c-299e-4f29-a5b5-46fa9109471a"
    },
    {
      "module_id": "llmstruct.parsers.universal_converter",
      "path": "llmstruct/parsers/universal_converter.py",
      "category": "core",
      "module_doc": "Universal Code Converter - Orchestrates all language parsers\nConverts any codebase to llmstruct JSON format",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for universal converter",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "detect_language",
          "docstring": "Detect programming language from file extension",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "detect_project_languages",
          "docstring": "Detect all languages in project and count files",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "get_project_files",
          "docstring": "Get all relevant files for conversion",
          "line_range": null,
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_python_project",
          "docstring": "Convert Python project to llmstruct format",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_go_project",
          "docstring": "Convert Go project to llmstruct format",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_javascript_project",
          "docstring": "Convert JavaScript project to llmstruct format",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_project",
          "docstring": "Convert any project to llmstruct format",
          "line_range": null,
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_multi_language_project",
          "docstring": "Convert multi-language project with separate sections per language",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_build_project_structure",
          "docstring": "Build standard llmstruct project structure",
          "line_range": null,
          "parameters": [
            "self",
            "language",
            "project_path",
            "modules",
            "toc"
          ],
          "decorators": []
        },
        {
          "name": "_build_empty_project_structure",
          "docstring": "Build empty structure when conversion fails",
          "line_range": null,
          "parameters": [
            "self",
            "language",
            "project_path",
            "error"
          ],
          "decorators": []
        },
        {
          "name": "_merge_language_results",
          "docstring": "Merge multiple language results into unified structure",
          "line_range": null,
          "parameters": [
            "self",
            "project_path",
            "language_results"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Language",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ConverterConfig",
          "docstring": "Configuration for universal converter",
          "line_range": null,
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "UniversalConverter",
          "docstring": "Universal code converter for any programming language",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "detect_language",
              "docstring": "Detect programming language from file extension",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "detect_project_languages",
              "docstring": "Detect all languages in project and count files",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "get_project_files",
              "docstring": "Get all relevant files for conversion",
              "line_range": null,
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_python_project",
              "docstring": "Convert Python project to llmstruct format",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_go_project",
              "docstring": "Convert Go project to llmstruct format",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_javascript_project",
              "docstring": "Convert JavaScript project to llmstruct format",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_project",
              "docstring": "Convert any project to llmstruct format",
              "line_range": null,
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_multi_language_project",
              "docstring": "Convert multi-language project with separate sections per language",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_build_project_structure",
              "docstring": "Build standard llmstruct project structure",
              "line_range": null,
              "parameters": [
                "self",
                "language",
                "project_path",
                "modules",
                "toc"
              ]
            },
            {
              "name": "_build_empty_project_structure",
              "docstring": "Build empty structure when conversion fails",
              "line_range": null,
              "parameters": [
                "self",
                "language",
                "project_path",
                "error"
              ]
            },
            {
              "name": "_merge_language_results",
              "docstring": "Merge multiple language results into unified structure",
              "line_range": null,
              "parameters": [
                "self",
                "project_path",
                "language_results"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "GoAnalyzer",
          "JavaScriptParser",
          "ConverterConfig"
        ],
        "detect_language": [
          "Path"
        ],
        "detect_project_languages": [
          "languages.get",
          "any",
          "os.walk",
          "self.detect_language"
        ],
        "get_project_files": [
          "files.append",
          "any",
          "os.walk",
          "self.detect_language"
        ],
        "convert_python_project": [
          "logger.info",
          "len",
          "self.get_project_files",
          "toc.append",
          "logger.warning",
          "module_data.get",
          "self._build_project_structure",
          "modules.append",
          "analyze_python"
        ],
        "convert_go_project": [
          "logger.info",
          "logger.error",
          "str",
          "self._build_empty_project_structure",
          "convert_to_llmstruct_format"
        ],
        "convert_javascript_project": [
          "logger.info",
          "len",
          "self.get_project_files",
          "toc.append",
          "logger.warning",
          "module_data.get",
          "self._build_project_structure",
          "modules.append"
        ],
        "convert_project": [
          "self.convert_javascript_project",
          "logger.info",
          "self.convert_go_project",
          "NotImplementedError",
          "languages.keys",
          "max",
          "self.convert_python_project",
          "self.detect_project_languages",
          "ValueError"
        ],
        "convert_multi_language_project": [
          "self.convert_javascript_project",
          "logger.info",
          "self.convert_go_project",
          "logger.error",
          "languages.keys",
          "logger.warning",
          "self._merge_language_results",
          "self.convert_python_project",
          "self.detect_project_languages",
          "ValueError"
        ],
        "_build_project_structure": [
          "language.title",
          "sum",
          "m.get",
          "len"
        ],
        "_build_empty_project_structure": [],
        "_merge_language_results": [
          "all_modules.append",
          "language_results.keys",
          "stats.get",
          "all_toc.append",
          "result.get",
          "list",
          "language_results.items"
        ],
        "main": [
          "converter.convert_project",
          "parser.add_argument",
          "exit",
          "json.dumps",
          "print",
          "UniversalConverter",
          "logger.error",
          "parser.parse_args",
          "converter.convert_multi_language_project",
          "stats.get",
          "argparse.ArgumentParser",
          "traceback.print_exc",
          "result.get",
          "open",
          "Language",
          "f.write",
          "ConverterConfig"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "GoAnalyzer",
        "JavaScriptParser",
        "List",
        "Optional",
        "Path",
        "Union",
        "analyze_module",
        "argparse",
        "convert_to_llmstruct_format",
        "dataclass",
        "dataclasses",
        "enum",
        "go_analyzer",
        "javascript_parser",
        "json",
        "logging",
        "os",
        "pathlib",
        "python_parser",
        "sys",
        "traceback",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f72fc6df-d700-4c15-9902-a16934ad4c01"
    },
    {
      "module_id": "llmstruct.parsers.python_parser",
      "path": "llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data.",
          "line_range": null,
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "self.generic_visit",
          "set"
        ],
        "visit_AsyncFunctionDef": [
          "self.generic_visit",
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "compute_file_hash": [
          "open",
          "f.read",
          "logging.error",
          "hashlib.sha256"
        ],
        "analyze_module": [
          "isinstance",
          "infer_category",
          "compute_file_hash",
          "logging.error",
          "ast.unparse",
          "ast.parse",
          "ast.get_docstring",
          "classes.append",
          "str",
          "visitor.visit",
          "functions.append",
          "ast.walk",
          "f.read",
          "CallVisitor",
          "open",
          "list",
          "Path",
          "sorted"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "29a4dd2b-3d4f-46b4-85a4-fe034fc3b287"
    },
    {
      "module_id": "llmstruct.parsers.go_analyzer",
      "path": "llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "module_doc": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b: go/packages, go/analysis",
      "functions": [
        {
          "name": "convert_to_llmstruct_format",
          "docstring": "\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 llmstruct",
          "line_range": null,
          "parameters": [
            "analysis",
            "include_ranges",
            "goals"
          ],
          "decorators": []
        },
        {
          "name": "_compute_file_hash",
          "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 SHA-256 \u0445\u044d\u0448 \u0444\u0430\u0439\u043b\u0430",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_setup_analyzer",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cleanup",
          "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_project",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_fallback_analysis",
          "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GoAnalyzer",
          "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 Go \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_setup_analyzer",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cleanup",
              "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_project",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_fallback_analysis",
              "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "_setup_analyzer": [
          "subprocess.run",
          "str",
          "analyzer_source.read_text",
          "logging.warning",
          "analyzer_file.write_text",
          "tempfile.mkdtemp",
          "Path"
        ],
        "_cleanup": [
          "shutil.rmtree",
          "Path"
        ],
        "analyze_project": [
          "logging.info",
          "logging.error",
          "self._fallback_analysis",
          "subprocess.run",
          "self._cleanup",
          "logging.warning",
          "json.loads",
          "self._setup_analyzer"
        ],
        "_fallback_analysis": [
          "logging.info",
          "go_mod_path.exists",
          "line.startswith",
          "line.strip",
          "file_path.read_text",
          "len",
          "packages.add",
          "str",
          "go_mod_path.read_text",
          "logging.warning",
          "set",
          "file_path.relative_to",
          "line.split",
          "list",
          "content.split",
          "Path",
          "sorted"
        ],
        "convert_to_llmstruct_format": [
          "analysis.get",
          "struct.get",
          "path.replace",
          "len",
          "classes.append",
          "_compute_file_hash",
          "functions.append",
          "file_data.get",
          "str",
          "uuid.uuid4",
          "toc.append",
          "sum",
          "fn.get",
          "iface.get",
          "modules.append",
          "path.endswith",
          "module.get"
        ],
        "_compute_file_hash": [
          "open",
          "f.read",
          "hashlib.sha256"
        ],
        "main": [
          "parser.add_argument",
          "sys.exit",
          "len",
          "json.dumps",
          "analyzer.analyze_project",
          "parser.parse_args",
          "stats.get",
          "convert_to_llmstruct_format",
          "argparse.ArgumentParser",
          "traceback.print_exc",
          "result.get",
          "GoAnalyzer",
          "open",
          "print",
          "f.write",
          "Path"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "subprocess",
        "sys",
        "tempfile",
        "traceback",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "5b6aaf2e-933e-4058-b788-2a222e138973"
    },
    {
      "module_id": "llmstruct.parsers.__init__",
      "path": "llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "javascript_parser"
      ],
      "hash": null,
      "artifact_id": "b76fa8d8-ed7d-4c1b-87fe-3a3b684b445a"
    },
    {
      "module_id": "llmstruct.parsers.javascript_parser",
      "path": "llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "open",
          "f.read",
          "hashlib.sha256"
        ],
        "compute_file_metadata": [
          "open",
          "os.stat",
          "self.file_hash",
          "sum"
        ],
        "parse_module": [
          "esprima.parseModule",
          "str",
          "self.compute_file_metadata",
          "f.read",
          "open"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c82fba12-99b5-4bec-b3c3-d42d636f6fe6"
    },
    {
      "module_id": "llmstruct.generators.go_json_generator",
      "path": "llmstruct/generators/go_json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_go_folder_structure",
          "docstring": "Capture directory and file structure for Go projects with artifact_id, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_go_toc_and_modules",
          "docstring": "Build TOC and modules for Go projects with artifact_id and robust filtering.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "extract_go_mod_info",
          "docstring": "Extract information from go.mod file.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "generate_go_json",
          "docstring": "Generate JSON structure for Go project with artifact_id, summary, and tags.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_go_folder_structure": [
          "file_path.match",
          "any",
          "str",
          "uuid.uuid4",
          "structure.append",
          "p.rstrip",
          "os.walk",
          "set",
          "file_path.relative_to",
          "p.endswith",
          "Path",
          "sorted"
        ],
        "build_go_toc_and_modules": [
          "len",
          "modules.append",
          "any",
          "str",
          "analyze_module",
          "uuid.uuid4",
          "toc.append",
          "p.rstrip",
          "set",
          "f.match",
          "p.endswith",
          "Path",
          "module.get"
        ],
        "extract_go_mod_info": [
          "go_mod_path.exists",
          "line.strip",
          "logging.error",
          "len",
          "dependencies.append",
          "f.read",
          "line.split",
          "open",
          "content.strip",
          "line.startswith",
          "Path"
        ],
        "generate_go_json": [
          "Path",
          "m.get",
          "len",
          "build_go_toc_and_modules",
          "get_go_folder_structure",
          "str",
          "go_mod_info.get",
          "uuid.uuid4",
          "sum",
          "set",
          "list",
          "extract_go_mod_info"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.go_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "1cd667f6-f1a0-4ddf-b715-abad8b8adb23"
    },
    {
      "module_id": "llmstruct.generators.__init__",
      "path": "llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "05d536f4-2133-4304-aaec-21efc91652c8"
    },
    {
      "module_id": "llmstruct.generators.json_generator",
      "path": "llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 include_dirs.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs",
            "include_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 include_dirs.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs",
            "include_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json_with_output_file",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output_file",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs",
            "include_ranges",
            "include_hashes",
            "goals"
          ],
          "decorators": []
        },
        {
          "name": "norm_dirname",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "d"
          ],
          "decorators": []
        },
        {
          "name": "is_included_dir",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "f"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "abs_dir_path.joinpath",
          "abs_dir_path.match",
          "file_path.match",
          "any",
          "str",
          "uuid.uuid4",
          "structure.append",
          "p.rstrip",
          "os.walk",
          "set",
          "abs_dir_path.relative_to",
          "file_path.relative_to",
          "p.endswith",
          "Path",
          "sorted"
        ],
        "build_toc_and_modules": [],
        "norm_dirname": [],
        "is_included_dir": [
          "any",
          "norm_dirname"
        ],
        "generate_json": [
          "len",
          "str",
          "get_folder_structure",
          "uuid.uuid4",
          "sum",
          "set",
          "list",
          "build_toc_and_modules",
          "Path"
        ],
        "generate_json_with_output_file": [
          "open",
          "json.dump",
          "generate_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "7bf4751e-b13f-490d-b6e8-8dec610279ad"
    },
    {
      "module_id": "llmstruct.api.routes.system",
      "path": "llmstruct/api/routes/system.py",
      "category": "core",
      "module_doc": "System routes for LLMStruct FastAPI\n\nHealth checks, metrics, and system information endpoints.",
      "functions": [
        {
          "name": "get_cli_bridge",
          "docstring": "Dependency to get CLI bridge instance",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "health_check",
          "docstring": "Health check endpoint\n\nReturns the health status of the API and its dependencies.\nThis endpoint does not require authentication.",
          "line_range": null,
          "parameters": [
            "cli"
          ],
          "decorators": [
            "router.get('/health', response_model=HealthResponse)"
          ]
        },
        {
          "name": "get_system_status",
          "docstring": "Get detailed system status\n\nReturns detailed system information including:\n- API version and configuration\n- CLI status and version\n- Resource usage (if available)",
          "line_range": null,
          "parameters": [],
          "decorators": [
            "router.get('/status')"
          ]
        },
        {
          "name": "get_version",
          "docstring": "Get API version information\n\nReturns version information for the API and underlying components.",
          "line_range": null,
          "parameters": [],
          "decorators": [
            "router.get('/version')"
          ]
        },
        {
          "name": "ping",
          "docstring": "Simple ping endpoint for basic connectivity testing",
          "line_range": null,
          "parameters": [],
          "decorators": [
            "router.get('/ping')"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "get_cli_bridge": [
          "CLIBridge"
        ],
        "health_check": [
          "datetime.utcnow",
          "router.get",
          "cli.health_check",
          "str",
          "HealthResponse",
          "cli_health.get",
          "Depends"
        ],
        "get_system_status": [
          "HTTPException",
          "datetime.utcnow",
          "router.get",
          "cli.health_check",
          "str",
          "cli_health.get",
          "CLIBridge"
        ],
        "get_version": [
          "HTTPException",
          "datetime.utcnow",
          "router.get",
          "cli.health_check",
          "str",
          "cli_health.get",
          "CLIBridge"
        ],
        "ping": [
          "datetime.utcnow",
          "router.get"
        ]
      },
      "dependencies": [
        "APIRouter",
        "CLIBridge",
        "Depends",
        "HTTPException",
        "HealthResponse",
        "HealthStatus",
        "asyncio",
        "datetime",
        "fastapi",
        "models.responses",
        "services.cli_bridge"
      ],
      "hash": null,
      "artifact_id": "3c2a1761-9564-4a95-bfc4-c933211fcd75"
    },
    {
      "module_id": "llmstruct.api.routes.__init__",
      "path": "llmstruct/api/routes/__init__.py",
      "category": "cli",
      "module_doc": "Routes package for LLMStruct FastAPI\n\nContains all API endpoint routers.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "858cdd48-495c-49c0-8819-8ff35ea75487"
    },
    {
      "module_id": "llmstruct.api.routes.chat",
      "path": "llmstruct/api/routes/chat.py",
      "category": "core",
      "module_doc": "Chat Routes\n\nWebSocket-based real-time chat with LLM integration",
      "functions": [
        {
          "name": "websocket_chat",
          "docstring": "WebSocket endpoint for real-time chat",
          "line_range": null,
          "parameters": [
            "websocket",
            "session_id",
            "api_key"
          ],
          "decorators": [
            "router.websocket('/chat/ws')"
          ]
        },
        {
          "name": "list_sessions",
          "docstring": "List active chat sessions",
          "line_range": null,
          "parameters": [],
          "decorators": [
            "router.get('/chat/sessions', dependencies=[Depends(get_api_key)])"
          ]
        },
        {
          "name": "get_session",
          "docstring": "Get session details and history",
          "line_range": null,
          "parameters": [
            "session_id"
          ],
          "decorators": [
            "router.get('/chat/sessions/{session_id}', dependencies=[Depends(get_api_key)])"
          ]
        },
        {
          "name": "delete_session",
          "docstring": "Delete a chat session",
          "line_range": null,
          "parameters": [
            "session_id"
          ],
          "decorators": [
            "router.delete('/chat/sessions/{session_id}', dependencies=[Depends(get_api_key)])"
          ]
        },
        {
          "name": "send_message",
          "docstring": "Send a message via HTTP (alternative to WebSocket)",
          "line_range": null,
          "parameters": [
            "message"
          ],
          "decorators": [
            "router.post('/chat/message', dependencies=[Depends(get_api_key)])"
          ]
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "connect",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "websocket",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "disconnect",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "session_id",
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ConnectionManager",
          "docstring": "Manages WebSocket connections",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "connect",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "websocket",
                "session_id"
              ]
            },
            {
              "name": "disconnect",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "send_message",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "session_id",
                "message"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "connect": [
          "logger.info",
          "websocket.accept"
        ],
        "disconnect": [
          "logger.info"
        ],
        "send_message": [
          "llm_service.process_message",
          "router.post",
          "HTTPException",
          "session_manager.add_message",
          "logger.error",
          "ChatResponse",
          "str",
          "Depends"
        ],
        "websocket_chat": [
          "llm_service.process_message",
          "logger.info",
          "session_manager.add_message",
          "manager.disconnect",
          "session_manager.get_or_create_session",
          "manager.connect",
          "websocket.close",
          "router.websocket",
          "logger.error",
          "str",
          "uuid.uuid4",
          "websocket.receive_text",
          "manager.send_message",
          "json.loads",
          "datetime.now",
          "message_data.get"
        ],
        "list_sessions": [
          "Depends",
          "session_manager.list_sessions",
          "router.get"
        ],
        "get_session": [
          "Depends",
          "HTTPException",
          "router.get",
          "session_manager.get_session"
        ],
        "delete_session": [
          "Depends",
          "HTTPException",
          "router.delete",
          "session_manager.delete_session"
        ]
      },
      "dependencies": [
        "APIRouter",
        "Any",
        "ChatMessage",
        "ChatResponse",
        "ChatSessionManager",
        "Depends",
        "Dict",
        "HTTPBearer",
        "HTTPException",
        "LLMService",
        "Optional",
        "WebSocket",
        "WebSocketDisconnect",
        "asyncio",
        "datetime",
        "fastapi",
        "fastapi.security",
        "get_api_key",
        "json",
        "logging",
        "middleware.auth",
        "models.requests",
        "models.responses",
        "services.chat_session",
        "services.llm_service",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "07aaa47d-4063-422d-941b-2ce197b03f8e"
    },
    {
      "module_id": "llmstruct.api.routes.continue_adapter",
      "path": "llmstruct/api/routes/continue_adapter.py",
      "category": "core",
      "module_doc": "Continue API Adapter\n\nTranslates Continue extension requests to LLMStruct chat API format",
      "functions": [
        {
          "name": "continue_chat_completion",
          "docstring": "Continue-compatible chat completion endpoint\nTranslates Continue requests to our LLMStruct format",
          "line_range": null,
          "parameters": [
            "request",
            "api_key"
          ],
          "decorators": [
            "router.post('/v1/chat/completions')"
          ]
        },
        {
          "name": "continue_models",
          "docstring": "List available models for Continue",
          "line_range": null,
          "parameters": [
            "api_key"
          ],
          "decorators": [
            "router.get('/v1/models')"
          ]
        },
        {
          "name": "continue_embeddings",
          "docstring": "Embeddings endpoint for Continue (placeholder)",
          "line_range": null,
          "parameters": [
            "request",
            "api_key"
          ],
          "decorators": [
            "router.post('/v1/embeddings')"
          ]
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "messages",
            "model",
            "temperature",
            "max_tokens",
            "stream"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContinueRequest",
          "docstring": "Continue API request format",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "messages",
                "model",
                "temperature",
                "max_tokens",
                "stream"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "ContinueResponse",
          "docstring": "Continue API response format (OpenAI-compatible)",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "int",
          "datetime.now",
          "content.split",
          "len"
        ],
        "continue_chat_completion": [
          "llm_service.process_message",
          "logger.info",
          "HTTPException",
          "reversed",
          "ContinueResponse",
          "router.post",
          "len",
          "msg.get",
          "request.json",
          "logger.error",
          "str",
          "request_data.get",
          "Depends",
          "datetime.now"
        ],
        "continue_models": [
          "Depends",
          "datetime.now",
          "int",
          "router.get"
        ],
        "continue_embeddings": [
          "router.post",
          "HTTPException",
          "len",
          "input_text.split",
          "request.json",
          "logger.error",
          "str",
          "request_data.get",
          "Depends"
        ]
      },
      "dependencies": [
        "APIRouter",
        "Any",
        "ChatMessage",
        "ChatResponse",
        "Depends",
        "Dict",
        "HTTPException",
        "LLMService",
        "List",
        "Optional",
        "Request",
        "datetime",
        "fastapi",
        "get_api_key",
        "logging",
        "middleware.auth",
        "models.requests",
        "models.responses",
        "services.llm_service",
        "typing"
      ],
      "hash": null,
      "artifact_id": "705e23b3-c95c-4c24-9b8f-5a437cf15a11"
    },
    {
      "module_id": "llmstruct.api.middleware.__init__",
      "path": "llmstruct/api/middleware/__init__.py",
      "category": "cli",
      "module_doc": "Middleware package for LLMStruct FastAPI\n\nContains authentication, logging, and other middleware.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "5e94b19a-2565-480d-84a2-d8a6183e5591"
    },
    {
      "module_id": "llmstruct.api.middleware.logging",
      "path": "llmstruct/api/middleware/logging.py",
      "category": "core",
      "module_doc": "Logging middleware for LLMStruct FastAPI",
      "functions": [
        {
          "name": "request_logging_middleware",
          "docstring": "Request and response logging middleware",
          "line_range": null,
          "parameters": [
            "request",
            "call_next"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "request_logging_middleware": [
          "logger.info",
          "time.time",
          "getattr",
          "logger.error",
          "str",
          "call_next",
          "uuid.uuid4"
        ]
      },
      "dependencies": [
        "Callable",
        "Request",
        "fastapi",
        "logging",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "0e3c3251-a630-4ecc-a505-6689e058fff6"
    },
    {
      "module_id": "llmstruct.api.services.llm_service",
      "path": "llmstruct/api/services/llm_service.py",
      "category": "core",
      "module_doc": "LLM Service\n\nIntegrates with existing LLM models and context orchestration",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "context_info",
            "token_usage"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "api_key"
          ],
          "decorators": []
        },
        {
          "name": "chat_completion",
          "docstring": "Send chat completion request to Anthropic",
          "line_range": null,
          "parameters": [
            "self",
            "messages",
            "temperature"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "api_key"
          ],
          "decorators": []
        },
        {
          "name": "chat_completion",
          "docstring": "Send chat completion request to Grok",
          "line_range": null,
          "parameters": [
            "self",
            "messages",
            "temperature"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_components",
          "docstring": "Initialize context orchestrator and copilot manager",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_message",
          "docstring": "Process a user message and return AI response",
          "line_range": null,
          "parameters": [
            "self",
            "message",
            "session_id",
            "context_mode"
          ],
          "decorators": []
        },
        {
          "name": "_try_llm_providers",
          "docstring": "Try LLM providers in order and return response",
          "line_range": null,
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_get_context",
          "docstring": "Get relevant context for the message",
          "line_range": null,
          "parameters": [
            "self",
            "message",
            "context_mode"
          ],
          "decorators": []
        },
        {
          "name": "_get_full_context",
          "docstring": "Get full project context",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_focused_context",
          "docstring": "Get focused context based on message content",
          "line_range": null,
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "_get_minimal_context",
          "docstring": "Get minimal context - basic project info",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_generate_grok_response",
          "docstring": "Generate response using Grok API",
          "line_range": null,
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_generate_anthropic_response",
          "docstring": "Generate response using Anthropic API",
          "line_range": null,
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_build_system_prompt",
          "docstring": "Build system prompt with project context",
          "line_range": null,
          "parameters": [
            "self",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_generate_mock_response",
          "docstring": "Generate a mock AI response (placeholder for real LLM)",
          "line_range": null,
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMResponse",
          "docstring": "Response from LLM processing",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "context_info",
                "token_usage"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "AnthropicClient",
          "docstring": "Client for Anthropic Claude API",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "api_key"
              ]
            },
            {
              "name": "chat_completion",
              "docstring": "Send chat completion request to Anthropic",
              "line_range": null,
              "parameters": [
                "self",
                "messages",
                "temperature"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "GrokClient",
          "docstring": "Client for Grok API integration",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "api_key"
              ]
            },
            {
              "name": "chat_completion",
              "docstring": "Send chat completion request to Grok",
              "line_range": null,
              "parameters": [
                "self",
                "messages",
                "temperature"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "LLMService",
          "docstring": "Service for LLM processing with context integration",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "base_path"
              ]
            },
            {
              "name": "_initialize_components",
              "docstring": "Initialize context orchestrator and copilot manager",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_message",
              "docstring": "Process a user message and return AI response",
              "line_range": null,
              "parameters": [
                "self",
                "message",
                "session_id",
                "context_mode"
              ]
            },
            {
              "name": "_try_llm_providers",
              "docstring": "Try LLM providers in order and return response",
              "line_range": null,
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            },
            {
              "name": "_get_context",
              "docstring": "Get relevant context for the message",
              "line_range": null,
              "parameters": [
                "self",
                "message",
                "context_mode"
              ]
            },
            {
              "name": "_get_full_context",
              "docstring": "Get full project context",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_focused_context",
              "docstring": "Get focused context based on message content",
              "line_range": null,
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "_get_minimal_context",
              "docstring": "Get minimal context - basic project info",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_generate_grok_response",
              "docstring": "Generate response using Grok API",
              "line_range": null,
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            },
            {
              "name": "_generate_anthropic_response",
              "docstring": "Generate response using Anthropic API",
              "line_range": null,
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            },
            {
              "name": "_build_system_prompt",
              "docstring": "Build system prompt with project context",
              "line_range": null,
              "parameters": [
                "self",
                "context_info"
              ]
            },
            {
              "name": "_generate_mock_response",
              "docstring": "Generate a mock AI response (placeholder for real LLM)",
              "line_range": null,
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "GrokClient",
          "self._initialize_components",
          "AnthropicClient",
          "Path.cwd"
        ],
        "chat_completion": [
          "response.json",
          "httpx.AsyncClient",
          "client.post",
          "response.raise_for_status",
          "ValueError"
        ],
        "_initialize_components": [
          "logger.info",
          "SmartContextOrchestrator",
          "logger.error",
          "CopilotContextManager",
          "str"
        ],
        "process_message": [
          "self._try_llm_providers",
          "self._get_context",
          "logger.error",
          "str",
          "LLMResponse"
        ],
        "_try_llm_providers": [
          "logger.info",
          "len",
          "self._generate_grok_response",
          "self._generate_anthropic_response",
          "self._generate_mock_response",
          "logger.warning"
        ],
        "_get_context": [
          "self._get_focused_context",
          "logger.error",
          "str",
          "self._get_minimal_context",
          "self._get_full_context",
          "context_info.update"
        ],
        "_get_full_context": [
          "struct_file.exists",
          "len",
          "struct_data.get",
          "json.load",
          "open",
          "list"
        ],
        "_get_focused_context": [
          "any",
          "message.lower"
        ],
        "_get_minimal_context": [
          "datetime.now",
          "str"
        ],
        "_generate_grok_response": [
          "ValueError",
          "self._build_system_prompt",
          "len"
        ],
        "_generate_anthropic_response": [
          "ValueError",
          "self._build_system_prompt",
          "len"
        ],
        "_build_system_prompt": [
          "context_info.get"
        ],
        "_generate_mock_response": [
          "message.lower",
          "len",
          "context_info.get"
        ]
      },
      "dependencies": [
        "Any",
        "CopilotContextManager",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "asyncio",
        "context_orchestrator",
        "copilot",
        "datetime",
        "httpx",
        "json",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "1ebe4176-b0cc-4625-868e-0f9fd7cb18f9"
    },
    {
      "module_id": "llmstruct.api.services.__init__",
      "path": "llmstruct/api/services/__init__.py",
      "category": "cli",
      "module_doc": "Services package for LLMStruct FastAPI\n\nContains business logic and integration services.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "5703cf58-9bc5-4410-959d-321a8865476f"
    },
    {
      "module_id": "llmstruct.api.services.cli_bridge",
      "path": "llmstruct/api/services/cli_bridge.py",
      "category": "core",
      "module_doc": "CLI Bridge Service\n\nProvides async integration between FastAPI and existing LLMStruct CLI functionality.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "_get_python_command",
          "docstring": "Determine the best Python command to use",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "scan_project",
          "docstring": "Execute project scan via CLI",
          "line_range": null,
          "parameters": [
            "self",
            "options"
          ],
          "decorators": []
        },
        {
          "name": "get_context",
          "docstring": "Get project context in specified mode",
          "line_range": null,
          "parameters": [
            "self",
            "mode",
            "include_files"
          ],
          "decorators": []
        },
        {
          "name": "get_project_info",
          "docstring": "Get basic project information",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON structure",
          "line_range": null,
          "parameters": [
            "self",
            "json_path"
          ],
          "decorators": []
        },
        {
          "name": "health_check",
          "docstring": "Check CLI health and availability",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_run_command",
          "docstring": "Run CLI command asynchronously",
          "line_range": null,
          "parameters": [
            "self",
            "cmd",
            "timeout"
          ],
          "decorators": []
        },
        {
          "name": "_parse_cli_output",
          "docstring": "Parse CLI JSON output",
          "line_range": null,
          "parameters": [
            "self",
            "output"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIBridgeError",
          "docstring": "CLI Bridge specific errors",
          "line_range": null,
          "methods": [],
          "bases": [
            "Exception"
          ]
        },
        {
          "name": "CLIBridge",
          "docstring": "Bridge between FastAPI and existing CLI functionality",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "base_path"
              ]
            },
            {
              "name": "_get_python_command",
              "docstring": "Determine the best Python command to use",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "scan_project",
              "docstring": "Execute project scan via CLI",
              "line_range": null,
              "parameters": [
                "self",
                "options"
              ]
            },
            {
              "name": "get_context",
              "docstring": "Get project context in specified mode",
              "line_range": null,
              "parameters": [
                "self",
                "mode",
                "include_files"
              ]
            },
            {
              "name": "get_project_info",
              "docstring": "Get basic project information",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON structure",
              "line_range": null,
              "parameters": [
                "self",
                "json_path"
              ]
            },
            {
              "name": "health_check",
              "docstring": "Check CLI health and availability",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_run_command",
              "docstring": "Run CLI command asynchronously",
              "line_range": null,
              "parameters": [
                "self",
                "cmd",
                "timeout"
              ]
            },
            {
              "name": "_parse_cli_output",
              "docstring": "Parse CLI JSON output",
              "line_range": null,
              "parameters": [
                "self",
                "output"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._get_python_command",
          "Path.cwd"
        ],
        "_get_python_command": [
          "venv_python.exists",
          "str"
        ],
        "scan_project": [
          "cmd.append",
          "options.get",
          "os.unlink",
          "logger.error",
          "json.load",
          "self._parse_cli_output",
          "open",
          "tempfile.mkstemp",
          "cmd.extend",
          "self._run_command",
          "os.close"
        ],
        "get_context": [
          "cmd.extend",
          "self._run_command",
          "self._parse_cli_output"
        ],
        "get_project_info": [
          "self._run_command",
          "self._parse_cli_output"
        ],
        "validate_json": [
          "self._run_command",
          "self._parse_cli_output"
        ],
        "health_check": [
          "str",
          "self._run_command"
        ],
        "_run_command": [
          "logger.info",
          "CLIBridgeError",
          "stderr.decode",
          "process.communicate",
          "logger.error",
          "str",
          "asyncio.wait_for",
          "asyncio.create_subprocess_exec",
          "stdout.decode"
        ],
        "_parse_cli_output": [
          "json.loads",
          "output.strip"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asyncio",
        "config",
        "json",
        "logging",
        "os",
        "pathlib",
        "settings",
        "subprocess",
        "tempfile",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c871354e-a669-4e2d-9d10-0d8b010d01f5"
    },
    {
      "module_id": "llmstruct.api.services.chat_session",
      "path": "llmstruct/api/services/chat_session.py",
      "category": "core",
      "module_doc": "Chat Session Manager\n\nManages persistent chat sessions and conversation history",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "add_message",
          "docstring": "Add a message to the session",
          "line_range": null,
          "parameters": [
            "self",
            "role",
            "content",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "get_messages",
          "docstring": "Get messages from session, optionally limited",
          "line_range": null,
          "parameters": [
            "self",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "get_context_string",
          "docstring": "Get recent messages as context string",
          "line_range": null,
          "parameters": [
            "self",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "to_dict",
          "docstring": "Convert session to dictionary",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "storage_path"
          ],
          "decorators": []
        },
        {
          "name": "get_or_create_session",
          "docstring": "Get existing session or create new one",
          "line_range": null,
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "get_session",
          "docstring": "Get session by ID",
          "line_range": null,
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "add_message",
          "docstring": "Add message to session",
          "line_range": null,
          "parameters": [
            "self",
            "session_id",
            "role",
            "content",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "list_sessions",
          "docstring": "List all sessions with summary info",
          "line_range": null,
          "parameters": [
            "self",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "delete_session",
          "docstring": "Delete a session",
          "line_range": null,
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_load_session",
          "docstring": "Load session from storage",
          "line_range": null,
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_save_session",
          "docstring": "Save session to storage",
          "line_range": null,
          "parameters": [
            "self",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_sessions",
          "docstring": "Clean up sessions older than specified days",
          "line_range": null,
          "parameters": [
            "self",
            "days"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ChatSession",
          "docstring": "Represents a chat session with history",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "add_message",
              "docstring": "Add a message to the session",
              "line_range": null,
              "parameters": [
                "self",
                "role",
                "content",
                "metadata"
              ]
            },
            {
              "name": "get_messages",
              "docstring": "Get messages from session, optionally limited",
              "line_range": null,
              "parameters": [
                "self",
                "limit"
              ]
            },
            {
              "name": "get_context_string",
              "docstring": "Get recent messages as context string",
              "line_range": null,
              "parameters": [
                "self",
                "limit"
              ]
            },
            {
              "name": "to_dict",
              "docstring": "Convert session to dictionary",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "ChatSessionManager",
          "docstring": "Manages multiple chat sessions",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "storage_path"
              ]
            },
            {
              "name": "get_or_create_session",
              "docstring": "Get existing session or create new one",
              "line_range": null,
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "get_session",
              "docstring": "Get session by ID",
              "line_range": null,
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "add_message",
              "docstring": "Add message to session",
              "line_range": null,
              "parameters": [
                "self",
                "session_id",
                "role",
                "content",
                "metadata"
              ]
            },
            {
              "name": "list_sessions",
              "docstring": "List all sessions with summary info",
              "line_range": null,
              "parameters": [
                "self",
                "limit"
              ]
            },
            {
              "name": "delete_session",
              "docstring": "Delete a session",
              "line_range": null,
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "_load_session",
              "docstring": "Load session from storage",
              "line_range": null,
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "_save_session",
              "docstring": "Save session to storage",
              "line_range": null,
              "parameters": [
                "self",
                "session"
              ]
            },
            {
              "name": "cleanup_old_sessions",
              "docstring": "Clean up sessions older than specified days",
              "line_range": null,
              "parameters": [
                "self",
                "days"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path.cwd"
        ],
        "add_message": [
          "self._save_session",
          "self.get_or_create_session",
          "session.add_message"
        ],
        "get_messages": [],
        "get_context_string": [
          "context_parts.append",
          "self.get_messages"
        ],
        "to_dict": [
          "len"
        ],
        "get_or_create_session": [
          "self._load_session",
          "session_file.exists",
          "ChatSession"
        ],
        "get_session": [
          "self._load_session",
          "session_file.exists"
        ],
        "list_sessions": [
          "self._load_session",
          "sessions.append",
          "len",
          "sessions.sort",
          "logger.error"
        ],
        "delete_session": [
          "session_file.exists",
          "session_file.unlink"
        ],
        "_load_session": [
          "data.get",
          "open",
          "json.load",
          "ChatSession"
        ],
        "_save_session": [
          "open",
          "session.to_dict",
          "logger.error",
          "json.dump"
        ],
        "cleanup_old_sessions": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asyncio",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "5f0d5234-d30a-4d64-8096-4d062c87a103"
    },
    {
      "module_id": "llmstruct.api.models.requests",
      "path": "llmstruct/api/models/requests.py",
      "category": "core",
      "module_doc": "Request models for LLMStruct FastAPI",
      "functions": [],
      "classes": [
        {
          "name": "ContextMode",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": [
            "str",
            "Enum"
          ]
        },
        {
          "name": "Priority",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": [
            "str",
            "Enum"
          ]
        },
        {
          "name": "ScanRequest",
          "docstring": "Request model for project scanning",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ContextRequest",
          "docstring": "Request model for context generation",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "TaskCreateRequest",
          "docstring": "Request model for creating tasks",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "TaskUpdateRequest",
          "docstring": "Request model for updating tasks",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "QueryRequest",
          "docstring": "Request model for LLM queries",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ValidationRequest",
          "docstring": "Request model for JSON validation",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ChatMessage",
          "docstring": "Chat message request",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {},
      "dependencies": [
        "Any",
        "BaseModel",
        "Dict",
        "Enum",
        "Field",
        "List",
        "Optional",
        "enum",
        "pydantic",
        "typing"
      ],
      "hash": null,
      "artifact_id": "73891413-3f87-4008-a4e7-991baab13ad4"
    },
    {
      "module_id": "llmstruct.api.models.responses",
      "path": "llmstruct/api/models/responses.py",
      "category": "core",
      "module_doc": "Response models for LLMStruct FastAPI",
      "functions": [],
      "classes": [
        {
          "name": "TaskStatus",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": [
            "str",
            "Enum"
          ]
        },
        {
          "name": "HealthStatus",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": [
            "str",
            "Enum"
          ]
        },
        {
          "name": "ProjectInfo",
          "docstring": "Response model for project information",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ScanResponse",
          "docstring": "Response model for project scan results",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ContextResponse",
          "docstring": "Response model for context generation",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "TaskResponse",
          "docstring": "Response model for task operations",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "QueryResponse",
          "docstring": "Response model for LLM queries",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ValidationResponse",
          "docstring": "Response model for JSON validation",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HealthResponse",
          "docstring": "Response model for health checks",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ErrorResponse",
          "docstring": "Response model for API errors",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ChatResponse",
          "docstring": "Chat response",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {},
      "dependencies": [
        "Any",
        "BaseModel",
        "Dict",
        "Enum",
        "Field",
        "List",
        "Optional",
        "datetime",
        "enum",
        "pydantic",
        "typing"
      ],
      "hash": null,
      "artifact_id": "daf8651a-9352-4edc-950b-20eef4cdbbc1"
    },
    {
      "module_id": "llmstruct.api.models.__init__",
      "path": "llmstruct/api/models/__init__.py",
      "category": "cli",
      "module_doc": "Pydantic models for LLMStruct FastAPI\n\nDefines request and response models for API endpoints.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "25031a62-6a97-4aa2-9793-592a9b761307"
    },
    {
      "module_id": "llmstruct.modules.commands.metrics",
      "path": "llmstruct/modules/commands/metrics.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "metrics_status",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_summary",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0432\u043e\u0434\u043a\u0443 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_analytics",
          "docstring": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": null,
          "parameters": [
            "output_file",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "metrics_report",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0435\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u043e\u0442\u0447\u0435\u0442",
          "line_range": null,
          "parameters": [
            "sessions",
            "output_file"
          ],
          "decorators": []
        },
        {
          "name": "metrics_track",
          "docstring": "\u0420\u0443\u0447\u043d\u043e\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": null,
          "parameters": [
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "metrics_tokens",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "cmd_metrics",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "metrics_status": [
          "print",
          "get_metrics_tracker",
          "tracker.get_session_summary"
        ],
        "metrics_summary": [
          "print",
          "max",
          "get_metrics_tracker",
          "tracker.get_session_summary"
        ],
        "metrics_analytics": [
          "csv.writer",
          "tracker.get_session_summary",
          "json.dumps",
          "json.dump",
          "get_metrics_tracker",
          "tracker.get_analytics_data",
          "time.strftime",
          "open",
          "print",
          "writer.writerow",
          "enumerate"
        ],
        "metrics_report": [
          "len",
          "sum",
          "get_metrics_tracker",
          "analytics.get",
          "min",
          "tracker.get_analytics_data",
          "time.strftime",
          "open",
          "print",
          "f.write"
        ],
        "metrics_track": [
          "track_workflow_event",
          "print"
        ],
        "metrics_tokens": [
          "get_token_summary",
          "summary.get",
          "get_metrics_tracker",
          "interaction.get",
          "print",
          "enumerate"
        ],
        "cmd_metrics": [
          "metrics_tokens",
          "metrics_status",
          "metrics_summary",
          "metrics_track",
          "metrics_analytics",
          "metrics_report",
          "print"
        ]
      },
      "dependencies": [
        "csv",
        "get_metrics_tracker",
        "get_token_summary",
        "json",
        "llmstruct.metrics_tracker",
        "time",
        "track_workflow_event"
      ],
      "hash": null,
      "artifact_id": "3c647ebb-2cf6-4a71-83c7-efb3f6ff1409"
    },
    {
      "module_id": "llmstruct.modules.commands.services",
      "path": "llmstruct/modules/commands/services.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "add_api_bot_commands",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f API \u0438 Bot \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438",
          "line_range": null,
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        },
        {
          "name": "cmd_api_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 API \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_bot_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430\u043c\u0438",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_services",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 (API + Bots)",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "add_api_bot_commands": [
          "api_start.add_argument",
          "bot_parser.add_subparsers",
          "bot_subparsers.add_parser",
          "metrics_analytics.add_argument",
          "services_subparsers.add_parser",
          "api_parser.add_subparsers",
          "metrics_track.add_argument",
          "api_subparsers.add_parser",
          "services_parser.add_subparsers",
          "metrics_report.add_argument",
          "subparsers.add_parser",
          "bot_start.add_argument",
          "metrics_parser.add_subparsers",
          "metrics_subparsers.add_parser"
        ],
        "cmd_api_management": [
          "venv_path.exists",
          "response.json",
          "requests.post",
          "open",
          "psutil.Process",
          "subprocess.Popen",
          "int",
          "str",
          "data.get",
          "process.terminate",
          "pid_file.exists",
          "f.read",
          "requests.get",
          "print",
          "f.write",
          "process.wait",
          "Path",
          "pid_file.unlink"
        ],
        "cmd_bot_management": [
          "psutil.Process",
          "subprocess.Popen",
          "int",
          "os.getenv",
          "str",
          "active_bots.append",
          "bot_scripts.get",
          "process.terminate",
          "process.is_running",
          "pid_file.exists",
          "f.read",
          "open",
          "print",
          "f.write",
          "process.wait",
          "Path",
          "pid_file.unlink"
        ],
        "cmd_services": [
          "cmd_api_management",
          "print",
          "time.sleep",
          "cmd_bot_management",
          "type"
        ]
      },
      "dependencies": [
        "Path",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "signal",
        "subprocess",
        "time"
      ],
      "hash": null,
      "artifact_id": "fb6f2bc8-08bb-406c-8619-2d50ee51b94f"
    },
    {
      "module_id": "llmstruct.modules.commands.__init__",
      "path": "llmstruct/modules/commands/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "856a3d5b-030c-4b7b-9904-3d021c94b85e"
    },
    {
      "module_id": "llmstruct.modules.commands.queue",
      "path": "llmstruct/modules/commands/queue.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "process_cli_queue_enhanced": [
          "logging.info",
          "isinstance",
          "item.get",
          "write_to_file",
          "logging.error",
          "time.time",
          "len",
          "options.get",
          "attach_to_llm_request",
          "client.query",
          "get_folder_structure",
          "json.load",
          "read_file_content",
          "open",
          "print",
          "workflow.get",
          "load_gitignore",
          "enumerate"
        ]
      },
      "dependencies": [
        "attach_to_llm_request",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "e33a84af-f83d-43c2-9d51-3f4c4a4e168d"
    },
    {
      "module_id": "llmstruct.modules.cli.audit",
      "path": "llmstruct/modules/cli/audit.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "audit": [
          "hasattr",
          "analyze_duplicates",
          "file_path.exists",
          "print",
          "Path"
        ]
      },
      "dependencies": [
        "Path",
        "analyze_duplicates",
        "llmstruct.cli",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "6e79adf9-5587-45d4-a8a4-6572a5451c26"
    },
    {
      "module_id": "llmstruct.modules.cli.utils",
      "path": "llmstruct/modules/cli/utils.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "config",
            "root_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.strip",
          "logging.error",
          "gitignore_path.exists",
          "gitignore_path.open",
          "line.startswith",
          "Path"
        ],
        "load_config": [
          "logging.error",
          "toml.load",
          "config_path.exists",
          "Path",
          "config_path.open"
        ],
        "read_file_content": [
          "path.is_file",
          "logging.error",
          "f.read",
          "path.open",
          "Path"
        ],
        "write_to_file": [
          "logging.info",
          "logging.error",
          "file_path.open",
          "str",
          "file_path.exists",
          "logging.warning",
          "base_path.mkdir",
          "re.sub",
          "f.write",
          "Path"
        ],
        "parse_files_from_response": [
          "content.strip",
          "re.findall",
          "filename.strip",
          "files.append"
        ],
        "get_cache_config": [
          "config.get"
        ],
        "get_copilot_config": [
          "config.get"
        ],
        "get_queue_config": [
          "config.get"
        ],
        "get_context_config": [
          "config.get"
        ],
        "get_exclude_dirs": [
          "parsing_config.get",
          "cli_config.get",
          "config.get",
          "set",
          "list"
        ],
        "get_include_patterns": [
          "cli_config.get",
          "parsing_config.get",
          "config.get"
        ],
        "get_exclude_patterns": [
          "cli_config.get",
          "parsing_config.get",
          "config.get"
        ],
        "get_max_file_size": [
          "config.get"
        ],
        "get_struct_file_path": [
          "config.get"
        ],
        "get_context_file_path": [
          "config.get"
        ],
        "save_config": [
          "logging.error",
          "toml.dump",
          "Path",
          "config_path.open"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "logging",
        "pathlib",
        "re",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "dfdeec45-bb60-492a-88ea-450ba625dd9e"
    },
    {
      "module_id": "llmstruct.modules.cli.dogfood",
      "path": "llmstruct/modules/cli/dogfood.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "dogfood": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "1131f7c3-f2a5-48da-bd54-88c65f91c737"
    },
    {
      "module_id": "llmstruct.modules.cli.handlers_legacy",
      "path": "llmstruct/modules/cli/handlers_legacy.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive_legacy": [
          "logging.error",
          "os.listdir",
          "user_input.startswith",
          "parse",
          "m.group",
          "re.match",
          "Path",
          "sorted",
          "user_input.lower",
          "json.dumps",
          "LLMClient",
          "cache.close",
          "get_folder_structure",
          "print",
          "load_gitignore",
          "args_str.strip",
          "JSONCache",
          "attach_to_llm_request",
          "client.query",
          "logging.warning",
          "read_file_content",
          "input",
          "write_to_file"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "c112484b-68fc-4002-ba03-47ea832364ac"
    },
    {
      "module_id": "llmstruct.modules.cli.analyze_duplicates",
      "path": "llmstruct/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "analyze_duplicates": [
          "rec.get",
          "analysis.get",
          "r.get",
          "len",
          "json.dumps",
          "getattr",
          "hasattr",
          "duplication_data.get",
          "filtered_duplicates.items",
          "orchestrator.analyze_codebase_for_duplicates",
          "duplicates.items",
          "json.dump",
          "traceback.print_exc",
          "WorkflowOrchestrator",
          "enumerate",
          "open",
          "print",
          "sorted"
        ]
      },
      "dependencies": [
        "WorkflowOrchestrator",
        "json",
        "llmstruct.workflow_orchestrator",
        "traceback"
      ],
      "hash": null,
      "artifact_id": "024188c6-4b12-471e-8703-e89e852b3ec3"
    },
    {
      "module_id": "llmstruct.modules.cli.__init__",
      "path": "llmstruct/modules/cli/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "341a7382-bdb3-4a34-a733-80edaa44429b"
    },
    {
      "module_id": "llmstruct.modules.cli.review",
      "path": "llmstruct/modules/cli/review.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "review": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "fc4355e9-dd16-411f-9716-d37922edd23c"
    },
    {
      "module_id": "llmstruct.modules.cli.context",
      "path": "llmstruct/modules/cli/context.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "context": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "b25e6ae3-dd45-464e-a0da-71b12c6f84af"
    },
    {
      "module_id": "llmstruct.modules.cli.query",
      "path": "llmstruct/modules/cli/query.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "query": [
          "logging.info",
          "logging.error",
          "client.query",
          "client.query_with_context",
          "hasattr",
          "create_context_orchestrator",
          "json.dump",
          "LLMClient",
          "logging.warning",
          "orchestrator.get_context_for_scenario",
          "cache.close",
          "Path",
          "JSONCache"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "create_context_orchestrator",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "b4861153-06bc-464f-8c5d-9d337341128d"
    },
    {
      "module_id": "llmstruct.modules.cli.copilot",
      "path": "llmstruct/modules/cli/copilot.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "copilot": [
          "logging.info",
          "logging.error",
          "manager.close",
          "hasattr",
          "smart_suggest",
          "manager.unload_context_layer",
          "config_path.exists",
          "layers.split",
          "manager.get_context_status",
          "manager.refresh_all_contexts",
          "shutil.copy",
          "f.write",
          "Path",
          "template_path.exists",
          "manager.validate_change",
          "getattr",
          "initialize_copilot",
          "manager.load_context_layer",
          "open",
          "print",
          "manager.export_context",
          "enumerate"
        ]
      },
      "dependencies": [
        "Path",
        "initialize_copilot",
        "llmstruct.copilot",
        "logging",
        "pathlib",
        "shutil",
        "smart_suggest"
      ],
      "hash": null,
      "artifact_id": "270f8d8c-e825-4b53-8fb6-5d612e5621f0"
    },
    {
      "module_id": "llmstruct.modules.cli.parse",
      "path": "llmstruct/modules/cli/parse.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse": [
          "logging.info",
          "logging.error",
          "func.get",
          "hasattr",
          "json.dump",
          "module.get",
          "config_manager.load_config",
          "cli_config.get",
          "generate_json",
          "Path",
          "mod_dir.mkdir",
          "ast_path.open",
          "cache.cache_json",
          "getattr",
          "struct_data.get",
          "struct_path.open",
          "load_config",
          "cache.close",
          "JSONCache",
          "config_manager.get_config",
          "parsing_config.get",
          "logging.warning",
          "get_config_manager",
          "config.get"
        ]
      },
      "dependencies": [
        "ConfigManager",
        "JSONCache",
        "Path",
        "generate_json",
        "get_config_manager",
        "json",
        "llmstruct.cache",
        "llmstruct.core.config_manager",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "load_config",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "71076ffb-fcdf-403f-a729-0cadee15603f"
    },
    {
      "module_id": "llmstruct.modules.cli.epic",
      "path": "llmstruct/modules/cli/epic.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "show_links",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "add_epic_cli_subparser",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "open",
          "json.load"
        ],
        "show_links": [
          "epic.get",
          "item.get",
          "load_json",
          "status_filter.lower",
          "json.dumps",
          "epic_path.exists",
          "link_map.items",
          "str",
          "data.get",
          "t.upper",
          "print",
          "results.items",
          "Path"
        ],
        "add_epic_cli_subparser": [
          "epic_sub.add_parser",
          "show_links_parser.add_argument",
          "subparsers.add_parser",
          "show_links_parser.set_defaults",
          "epic_parser.add_subparsers"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "3aee4014-3d2e-4bb1-8614-73b8f551d4c3"
    },
    {
      "module_id": "llmstruct.modules.cli.handlers",
      "path": "llmstruct/modules/cli/handlers.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive": [
          "logging.warning",
          "interactive_modular",
          "interactive_legacy"
        ],
        "interactive_modular": [
          "logging.info",
          "cli_core.run_interactive_mode",
          "hasattr",
          "create_cli_core"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "create_cli_core",
        "get_folder_structure",
        "interactive_legacy",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.cli_core",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.handlers_legacy",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "184ada66-7747-4719-904c-745b73082076"
    },
    {
      "module_id": "scripts.team.__init__",
      "path": "scripts/team/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "65fe08cb-58db-48e1-ba40-0cf57cd3f628"
    }
  ]
}