#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Go –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã: go/packages, go/analysis
"""

import argparse
import datetime
import hashlib
import json
import logging
import os
import subprocess
import tempfile
import uuid
from pathlib import Path
from typing import Dict, Any, List, Optional

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

class GoAnalyzer:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Go –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    
    def __init__(self):
        self.temp_dir = None
        self.analyzer_path = None
        
    def _setup_analyzer(self) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ä–µ–¥—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        self.temp_dir = tempfile.mkdtemp()
        temp_path = Path(self.temp_dir)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—ã–π Go –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer_source = Path(__file__).parent / "analyzer.go"
        analyzer_file = temp_path / "analyzer.go"
        analyzer_file.write_text(analyzer_source.read_text())
        
        # –°–æ–∑–¥–∞–µ–º go.mod –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        go_mod_content = '''module go-analyzer

go 1.24

require (
    golang.org/x/tools v0.27.0
)

require (
    golang.org/x/mod v0.22.0 // indirect
    golang.org/x/sync v0.10.0 // indirect
)
'''
        
        # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º go.mod –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        (temp_path / "go.mod").write_text(go_mod_content)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∑–∞—Ä–∞–Ω–µ–µ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º
        env = os.environ.copy()
        env['GOSUMDB'] = 'off'  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º
        env['GOPROXY'] = 'https://proxy.golang.org,direct'
        
        try:
            subprocess.run(['go', 'mod', 'download'], cwd=temp_path, check=True, capture_output=True, env=env)
        except subprocess.CalledProcessError:
            logging.warning("Failed to download Go modules, continuing anyway")
        
        self.analyzer_path = str(analyzer_file)
        
    def _cleanup(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        if self.temp_dir and Path(self.temp_dir).exists():
            import shutil
            shutil.rmtree(self.temp_dir, ignore_errors=True)
    
    def analyze_project(self, project_path: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Go –ø—Ä–æ–µ–∫—Ç"""
        try:
            self._setup_analyzer()
            
            logging.info(f"Analyzing Go project: {project_path}")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è Go
            env = os.environ.copy()
            env['GOSUMDB'] = 'off'  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º
            env['GOPROXY'] = 'https://proxy.golang.org,direct'
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            try:
                subprocess.run(['go', 'mod', 'tidy'], cwd=self.temp_dir, check=True, capture_output=True, env=env)
                subprocess.run(['go', 'mod', 'download'], cwd=self.temp_dir, check=True, capture_output=True, env=env)
            except subprocess.CalledProcessError as e:
                logging.warning(f"Failed to prepare Go modules: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
            result = subprocess.run(
                ['go', 'run', 'analyzer.go', project_path],
                cwd=self.temp_dir,
                capture_output=True,
                text=True,
                timeout=120,  # 2 –º–∏–Ω—É—Ç—ã
                env=env
            )
            
            if result.returncode != 0:
                logging.error(f"Analyzer failed: {result.stderr}")
                return self._fallback_analysis(project_path)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            if result.stderr:
                logging.info(f"Analyzer debug output: {result.stderr}")
            
            try:
                return json.loads(result.stdout)
            except json.JSONDecodeError:
                logging.error("Failed to parse analyzer output")
                logging.error(f"Raw output: {result.stdout}")
                return self._fallback_analysis(project_path)
                
        except subprocess.TimeoutExpired:
            logging.error("Analyzer timed out")
            return self._fallback_analysis(project_path)
        except Exception as e:
            logging.error(f"Analyzer error: {e}")
            return self._fallback_analysis(project_path)
        finally:
            self._cleanup()
    
    def _fallback_analysis(self, project_path: str) -> Dict[str, Any]:
        """Fallback –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤"""
        logging.info("Using fallback analysis")
        
        result = {
            "module_name": "unknown",
            "go_version": "unknown", 
            "files": [],
            "dependencies": [],
            "all_packages": [],
            "test_files": [],
            "total_lines": 0,
            "has_go_mod": False,
            "errors": ["Fallback analysis used - limited functionality"]
        }
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ go.mod
        go_mod_path = Path(project_path) / "go.mod"
        if go_mod_path.exists():
            result["has_go_mod"] = True
            try:
                content = go_mod_path.read_text()
                for line in content.split('\n'):
                    line = line.strip()
                    if line.startswith('module '):
                        result["module_name"] = line.split()[1]
                    elif line.startswith('go '):
                        result["go_version"] = line.split()[1]
            except Exception:
                pass
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤
        go_files = list(Path(project_path).rglob("*.go"))
        packages = set()
        
        for file_path in go_files:
            try:
                content = file_path.read_text()
                lines = content.split('\n')
                result["total_lines"] += len(lines)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–∞–∫–µ—Ç–∞
                package_name = "main"
                for line in lines:
                    if line.strip().startswith('package '):
                        package_name = line.strip().split()[1]
                        packages.add(package_name)
                        break
                
                rel_path = str(file_path.relative_to(project_path))
                is_test = file_path.name.endswith("_test.go")
                
                file_analysis = {
                    "path": rel_path,
                    "package": package_name,
                    "imports": [],
                    "functions": [],
                    "structs": [],
                    "variables": [],
                    "constants": [],
                    "interfaces": [],
                    "line_count": len(lines),
                    "has_tests": is_test
                }
                
                result["files"].append(file_analysis)
                
                if is_test:
                    result["test_files"].append(rel_path)
                    
            except Exception as e:
                logging.warning(f"Failed to analyze {file_path}: {e}")
        
        result["all_packages"] = sorted(list(packages))
        return result

if __name__ == "__main__":
    import argparse
    import sys
    import json
    from .go_converter import convert_to_llmstruct_format
    
    parser = argparse.ArgumentParser(description='Universal Go Project Analyzer')
    parser.add_argument('project_path', help='Path to Go project directory')
    parser.add_argument('--output', '-o', help='Output file path (default: stdout)')
    parser.add_argument('--include-ranges', action='store_true', help='Include line ranges')
    parser.add_argument('--goals', nargs='*', help='Project goals', default=[])
    
    args = parser.parse_args()
    
    if not Path(args.project_path).exists():
        print(f"‚ùå Error: Project path {args.project_path} does not exist", file=sys.stderr)
        sys.exit(1)
    
    print(f"üîç Analyzing Go project: {args.project_path}")
    
    try:
        analyzer = GoAnalyzer()
        analysis_result = analyzer.analyze_project(args.project_path)
        
        if not analysis_result:
            print("‚ùå Analysis failed", file=sys.stderr)
            sys.exit(1)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç llmstruct
        result = convert_to_llmstruct_format(
            analysis_result,
            include_ranges=args.include_ranges,
            goals=args.goals
        )
        
        json_output = json.dumps(result, indent=2, ensure_ascii=False)
        
        if args.output:
            with open(args.output, 'w', encoding='utf-8') as f:
                f.write(json_output)
            print(f"‚úÖ Output written to {args.output}")
            
            stats = result.get('metadata', {}).get('stats', {})
            print(f"üìä Statistics:")
            print(f"   - Modules: {stats.get('modules_count', 0)}")
            print(f"   - Functions: {stats.get('functions_count', 0)}")
            print(f"   - Structs: {stats.get('structs_count', 0)}")
            print(f"   - Packages: {stats.get('packages_count', 0)}")
            print(f"   - Total Lines: {stats.get('total_lines', 0)}")
            print(f"   - Test Files: {stats.get('test_files_count', 0)}")
            
            if result.get('metadata', {}).get('analysis_errors'):
                print(f"‚ö†Ô∏è  Warnings: {len(result['metadata']['analysis_errors'])} issues")
        else:
            print(json_output)
            
    except Exception as e:
        print(f"‚ùå Error analyzing project: {e}", file=sys.stderr)
        import traceback
        traceback.print_exc()
        sys.exit(1) 