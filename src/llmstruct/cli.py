import argparse
import os
import json
from typing import List, Dict, Any
from llmstruct.parsers.python_parser import PythonParser
from llmstruct.parsers.javascript_parser import JavaScriptParser
from llmstruct.generators.json_generator import JSONGenerator

def main():
    parser = argparse.ArgumentParser(description="Generate LLMStruct JSON for project")
    parser.add_argument("root_dir", help="Project root directory")
    parser.add_argument("-o", "--output", default="struct.json", help="Output JSON file")
    parser.add_argument("--language", choices=["python", "javascript"], default="python")
    parser.add_argument("--include-ranges", action="store_true", help="Include line ranges")
    parser.add_argument("--include-hashes", action="store_true", help="Include file hashes")
    parser.add_argument("--goals", help="Comma-separated project goals", default="Generate structured JSON")
    parser.add_argument("--tasks", help="Path to tasks JSON file or comma-separated tasks")
    args = parser.parse_args()

    parser = {"python": PythonParser(), "javascript": JavaScriptParser()}[args.language]
    generator = JSONGenerator()
    modules = []

    # Iterate over files
    for root, _, files in os.walk(args.root_dir):
        for file in files:
            if args.language == "python" and file.endswith(".py"):
                filepath = os.path.join(root, file)
                module_data = parser.parse_module(filepath, args.root_dir, args.include_ranges, args.include_hashes)
                if "error" not in module_data:
                    modules.append(module_data)
            elif args.language == "javascript" and file.endswith(".js"):
                filepath = os.path.join(root, file)
                module_data = parser.parse_module(filepath, args.root_dir, args.include_ranges, args.include_hashes)
                if "error" not in module_data:
                    modules.append(module_data)

    # Parse goals and tasks
    goals = [g.strip() for g in args.goals.split(",")] if args.goals else ["Generate structured JSON"]
    tasks = []
    if args.tasks and os.path.isfile(args.tasks):
        with open(args.tasks, "r", encoding="utf-8") as f:
            tasks = json.load(f)
    elif args.tasks:
        tasks = [{"description": t.strip()} for t in args.tasks.split(",")]

    # Build metadata
    metadata = {
        "project_name": os.path.basename(args.root_dir),
        "description": "Generated by LLMStruct",
        "version": "2025-05-17T17:22:00Z",
        "instructions": ["Follow best practices"],
        "goals": goals,
        "tasks": tasks,
        "stats": {
            "modules_count": len(modules),
            "functions_count": sum(len(m.get("functions", [])) for m in modules),
            "classes_count": sum(len(m.get("classes", [])) for m in modules),
            "call_edges_count": sum(len(m.get("callgraph", {})) for m in modules)
        }
    }

    json_data = generator.generate(modules, metadata)
    with open(args.output, "w", encoding="utf-8") as f:
        json.dump(json_data, f, indent=2)

if __name__ == "__main__":
    main()