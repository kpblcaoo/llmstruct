{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-06-01T20:26:46.325487Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": [],
    "stats": {
      "modules_count": 91,
      "functions_count": 722,
      "classes_count": 123,
      "call_edges_count": 2117
    },
    "artifact_id": "20a2f68b-3d8c-43c3-a019-0f53657a2b93",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "aa0c7586-5adb-45cb-b799-e401f2ce3a49",
        "metadata": {}
      },
      {
        "path": "llmstruct",
        "type": "directory",
        "artifact_id": "76c26097-acd4-4eb0-ab23-8b4687b24c8b",
        "metadata": {}
      },
      {
        "path": "llmstruct.egg-info",
        "type": "directory",
        "artifact_id": "a0cce0cf-860a-445f-8406-306db7513e4e",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE",
        "type": "directory",
        "artifact_id": "5d10f4e2-a761-4220-ba69-2277bd07d91f",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_argument_parser.py",
        "type": "file",
        "artifact_id": "8004b991-4866-49e8-93bf-7151ec09175e",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_commands.py",
        "type": "file",
        "artifact_id": "e963f18a-f143-47cb-b2a7-70a6fb008644",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_config.py",
        "type": "file",
        "artifact_id": "f920cccb-7560-484d-9080-863f1108c2d9",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_core.py",
        "type": "file",
        "artifact_id": "27104b3c-a285-4661-9756-81b934e2980a",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_main_commands.py",
        "type": "file",
        "artifact_id": "a8ef0fb9-fd35-4465-b5e1-642990825cc2",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_utils.py",
        "type": "file",
        "artifact_id": "88533756-d5bd-4c26-ae5b-6fab4d1914d7",
        "metadata": {}
      },
      {
        "path": "llmstruct/__init__.py",
        "type": "file",
        "artifact_id": "d1d58048-4a64-41de-a416-9dd254558f64",
        "metadata": {}
      },
      {
        "path": "llmstruct/__main__.py",
        "type": "file",
        "artifact_id": "9f7ba8ce-97e0-4b88-bbc5-3e91dea6b100",
        "metadata": {}
      },
      {
        "path": "llmstruct/ai_cli_integration.py",
        "type": "file",
        "artifact_id": "d361f8ed-ebb6-4c7c-be30-878e4d6b7f59",
        "metadata": {}
      },
      {
        "path": "llmstruct/ai_self_awareness.py",
        "type": "file",
        "artifact_id": "a48f7a2a-8623-4b0b-bad5-7816af4652ac",
        "metadata": {}
      },
      {
        "path": "llmstruct/ai_self_monitor.py",
        "type": "file",
        "artifact_id": "ade94896-2e6e-445b-af62-3b137f2a99e5",
        "metadata": {}
      },
      {
        "path": "llmstruct/ai_workflow_middleware.py",
        "type": "file",
        "artifact_id": "c944b4b0-a3e5-4711-878f-df148607228c",
        "metadata": {}
      },
      {
        "path": "llmstruct/api",
        "type": "directory",
        "artifact_id": "07a70419-ac63-49ec-8b5d-06ad9b989c10",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/__init__.py",
        "type": "file",
        "artifact_id": "e6916b7e-43b4-4e52-bb18-ab8f9eb895db",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/app.py",
        "type": "file",
        "artifact_id": "f99b01c9-421f-4eb2-ad78-b6125416744d",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/config.py",
        "type": "file",
        "artifact_id": "2d44c7af-ff75-4b23-8849-bf1773b5b568",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/middleware",
        "type": "directory",
        "artifact_id": "91d3b894-aa7b-4dd3-947a-5650f7c43689",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/middleware/__init__.py",
        "type": "file",
        "artifact_id": "41a07465-8835-4fb3-8b4d-108e3c4abe9f",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/middleware/auth.py",
        "type": "file",
        "artifact_id": "11c6621e-cf38-43be-a222-1ad208034c66",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/middleware/logging.py",
        "type": "file",
        "artifact_id": "942fddad-d485-4950-877d-623c8cfe88f1",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/models",
        "type": "directory",
        "artifact_id": "c827dff6-38d5-4aea-8fc1-831a9ffd7cd0",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/models/__init__.py",
        "type": "file",
        "artifact_id": "6725f18e-315b-42b4-9637-9fdcad7aa2f7",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/models/requests.py",
        "type": "file",
        "artifact_id": "ef761d61-4e07-40cc-bf3e-e5da686e2ceb",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/models/responses.py",
        "type": "file",
        "artifact_id": "3a8080ec-5279-4ce6-a4ba-8fbcc6222ec1",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/routes",
        "type": "directory",
        "artifact_id": "817babb0-dd61-4bed-8c5d-722731a9ab3d",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/routes/__init__.py",
        "type": "file",
        "artifact_id": "294043a6-b804-41a9-b53a-c890f778b7c0",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/routes/chat.py",
        "type": "file",
        "artifact_id": "9774cea8-4437-4c83-a317-760a11f209ff",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/routes/continue_adapter.py",
        "type": "file",
        "artifact_id": "5d2cf3f2-3e97-4d50-8e6c-63b0ce82315f",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/routes/system.py",
        "type": "file",
        "artifact_id": "2ae384be-f00c-4224-95d1-251d8f1073e1",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/services",
        "type": "directory",
        "artifact_id": "597ec352-e022-4041-bdb9-427aedb720d5",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/services/__init__.py",
        "type": "file",
        "artifact_id": "d507f4bd-a131-444f-864b-537b69af017e",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/services/chat_session.py",
        "type": "file",
        "artifact_id": "47162aa7-ac6d-4308-a15e-b518b598f298",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/services/cli_bridge.py",
        "type": "file",
        "artifact_id": "a6f5e99b-86eb-47bf-ab1f-dc9701d1a50d",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/services/llm_service.py",
        "type": "file",
        "artifact_id": "05d86c66-4a76-40e9-8b61-90cc59eb7e9b",
        "metadata": {}
      },
      {
        "path": "llmstruct/cache.py",
        "type": "file",
        "artifact_id": "2d255c38-5859-4e16-b1ec-aebf21c209a9",
        "metadata": {}
      },
      {
        "path": "llmstruct/cli.py",
        "type": "file",
        "artifact_id": "aaa3da86-52e5-4922-9834-28a24de256a9",
        "metadata": {}
      },
      {
        "path": "llmstruct/context_orchestrator.py",
        "type": "file",
        "artifact_id": "cd8d8010-431d-49da-8059-19c9907a0bc1",
        "metadata": {}
      },
      {
        "path": "llmstruct/copilot.py",
        "type": "file",
        "artifact_id": "32f13711-1518-4354-9db0-41c3ba6ec66a",
        "metadata": {}
      },
      {
        "path": "llmstruct/cursor_ai_bridge.py",
        "type": "file",
        "artifact_id": "fa31d36a-0dfe-4ae7-99b1-5845b5b6257d",
        "metadata": {}
      },
      {
        "path": "llmstruct/cursor_integration.py",
        "type": "file",
        "artifact_id": "9f7dc490-de97-4369-a33b-de240f288430",
        "metadata": {}
      },
      {
        "path": "llmstruct/generators",
        "type": "directory",
        "artifact_id": "ea3ec303-e1d9-4abe-85e9-b58d17611ef8",
        "metadata": {}
      },
      {
        "path": "llmstruct/generators/__init__.py",
        "type": "file",
        "artifact_id": "c14cee32-2dcb-4704-97bb-f5feae91af68",
        "metadata": {}
      },
      {
        "path": "llmstruct/generators/go_json_generator.py",
        "type": "file",
        "artifact_id": "c140ce82-edff-46b4-af50-61a8c556eac3",
        "metadata": {}
      },
      {
        "path": "llmstruct/generators/json_generator.py",
        "type": "file",
        "artifact_id": "b955312e-b032-44de-bf37-2bc2c7f1aeed",
        "metadata": {}
      },
      {
        "path": "llmstruct/gh_view.py",
        "type": "file",
        "artifact_id": "022b1d13-b648-4ccf-abaf-9e2366330475",
        "metadata": {}
      },
      {
        "path": "llmstruct/grok.py",
        "type": "file",
        "artifact_id": "b075ac17-48ce-4afb-8f94-0e6cd9115098",
        "metadata": {}
      },
      {
        "path": "llmstruct/json_selector.py",
        "type": "file",
        "artifact_id": "2c72e416-2fa2-484e-b461-625e7229e4b1",
        "metadata": {}
      },
      {
        "path": "llmstruct/llm_client.py",
        "type": "file",
        "artifact_id": "4f69b763-4a2f-4237-95ec-34f8fe8afa5f",
        "metadata": {}
      },
      {
        "path": "llmstruct/metrics_tracker.py",
        "type": "file",
        "artifact_id": "04a960b6-90d0-4e8b-a200-bdbea6d7e50a",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules",
        "type": "directory",
        "artifact_id": "bbb47cb7-564d-466c-8307-7284c2dafcf0",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli",
        "type": "directory",
        "artifact_id": "a94bd67c-b0b7-423d-b44e-446ac6eab6dc",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/__init__.py",
        "type": "file",
        "artifact_id": "ada0ec2f-46ad-4eb1-8e0c-a28daa5248ac",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/analyze_duplicates.py",
        "type": "file",
        "artifact_id": "4a0e46a8-f4e5-4541-a5a2-937d6dae1c8e",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/audit.py",
        "type": "file",
        "artifact_id": "95998448-9f11-49e5-8e0c-ed7240c4067d",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/context.py",
        "type": "file",
        "artifact_id": "885988bb-5aec-4976-b750-753497a49ea7",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/copilot.py",
        "type": "file",
        "artifact_id": "9f8bc89d-e7b3-41fa-84a4-2ad4c23612b1",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/dogfood.py",
        "type": "file",
        "artifact_id": "4cc7d9d8-fbcd-40c8-a0db-bd6ec07a106c",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/epic.py",
        "type": "file",
        "artifact_id": "a6ddba5b-e9f4-4015-b1d1-54988b6cb8aa",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/handlers.py",
        "type": "file",
        "artifact_id": "d9a00c59-47fc-40f2-9505-7743cd74e75c",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/handlers_legacy.py",
        "type": "file",
        "artifact_id": "a16cc055-7404-417f-bc4e-003d97313960",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/parse.py",
        "type": "file",
        "artifact_id": "c68f9505-0465-4ed6-a11c-1c6b46e8e90a",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/query.py",
        "type": "file",
        "artifact_id": "b479887d-fb32-4126-9dbc-834ae7963bbf",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/review.py",
        "type": "file",
        "artifact_id": "73e019ed-f721-4460-9718-78f1e11d03f4",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/utils.py",
        "type": "file",
        "artifact_id": "2dbf7826-c84f-40de-a113-f684f41a6746",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/commands",
        "type": "directory",
        "artifact_id": "e269e5e8-38dd-46b3-a808-fc5ec9fdc727",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/commands/__init__.py",
        "type": "file",
        "artifact_id": "df211b64-fa44-4cb1-91db-418eac67506e",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/commands/metrics.py",
        "type": "file",
        "artifact_id": "aea86cc4-ca44-4234-9310-27c4ef475450",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/commands/queue.py",
        "type": "file",
        "artifact_id": "b25cc3e0-dc18-48b5-8aeb-0a15acf3e3ee",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/commands/services.py",
        "type": "file",
        "artifact_id": "cc5f7d48-fe53-46da-a7ba-c5d3edd071f1",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers",
        "type": "directory",
        "artifact_id": "5e2dc0cb-e37f-4dca-a02d-c2792a4a1cfc",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers/__init__.py",
        "type": "file",
        "artifact_id": "77d2f4d9-85c5-46ad-901c-e350d031d94f",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers/go_analyzer.py",
        "type": "file",
        "artifact_id": "6662d514-afde-4831-8a27-901e101c0628",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers/javascript_parser.py",
        "type": "file",
        "artifact_id": "10676f29-5006-468e-961a-cbc97041e8ec",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers/python_parser.py",
        "type": "file",
        "artifact_id": "adc75927-997f-486b-8810-5acb1d421c24",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers/universal_converter.py",
        "type": "file",
        "artifact_id": "b849013d-38a0-41dd-8495-fccb1c15d653",
        "metadata": {}
      },
      {
        "path": "llmstruct/self_run.py",
        "type": "file",
        "artifact_id": "b4ffd52d-c09d-4353-b752-0647cf15d426",
        "metadata": {}
      },
      {
        "path": "llmstruct/templates",
        "type": "directory",
        "artifact_id": "bd599460-3b04-4dbc-baef-92d92abb1ae3",
        "metadata": {}
      },
      {
        "path": "llmstruct/templates/__init__.py",
        "type": "file",
        "artifact_id": "36976d30-a4e4-4129-a887-00a16f6f716b",
        "metadata": {}
      },
      {
        "path": "llmstruct/transpiler.py",
        "type": "file",
        "artifact_id": "bf7fb23d-d987-4f72-a2bb-b629c49fa5b2",
        "metadata": {}
      },
      {
        "path": "llmstruct/validators",
        "type": "directory",
        "artifact_id": "f9f539c9-1c0e-4732-aa7f-9c95e9211786",
        "metadata": {}
      },
      {
        "path": "llmstruct/validators/__init__.py",
        "type": "file",
        "artifact_id": "18af6433-1a1d-42be-9180-d74293161131",
        "metadata": {}
      },
      {
        "path": "llmstruct/validators/json_validator.py",
        "type": "file",
        "artifact_id": "d49ab1d3-cf1b-48d5-964a-559cd3b54c8e",
        "metadata": {}
      },
      {
        "path": "llmstruct/workflow_orchestrator.py",
        "type": "file",
        "artifact_id": "1e118b55-c9b1-4f87-8ffd-9898658a96ad",
        "metadata": {}
      },
      {
        "path": "llmstruct/workspace.py",
        "type": "file",
        "artifact_id": "a50d5f2c-02c4-4b28-8d3f-20c22569f9ba",
        "metadata": {}
      },
      {
        "path": "scripts",
        "type": "directory",
        "artifact_id": "9809ce62-e1f3-4f46-935f-2c9b8f0511b6",
        "metadata": {}
      },
      {
        "path": "scripts/auto_update_struct.py",
        "type": "file",
        "artifact_id": "fec4970d-fa88-4f45-810e-00b28ffcade2",
        "metadata": {}
      },
      {
        "path": "scripts/collector.py",
        "type": "file",
        "artifact_id": "611d37bc-a7d1-4a42-8a8b-0fa277cc0df3",
        "metadata": {}
      },
      {
        "path": "scripts/create_comprehensive_index.py",
        "type": "file",
        "artifact_id": "9238f398-f5c8-40ca-8724-2b9baf4fa41c",
        "metadata": {}
      },
      {
        "path": "scripts/create_github_issues.py",
        "type": "file",
        "artifact_id": "22a10ae7-b973-4885-940c-a96ca48fb407",
        "metadata": {}
      },
      {
        "path": "scripts/create_tasks_index.py",
        "type": "file",
        "artifact_id": "2dcb3361-bc15-42f1-a312-20226a42d236",
        "metadata": {}
      },
      {
        "path": "scripts/deploy_embedded_files.py",
        "type": "file",
        "artifact_id": "2e9a997e-1677-4a2f-8168-63a9a59dc77b",
        "metadata": {}
      },
      {
        "path": "scripts/epic_roadmap_manager.py",
        "type": "file",
        "artifact_id": "badbdfa6-c2e3-4626-969a-b6c113ff87c5",
        "metadata": {}
      },
      {
        "path": "scripts/export_to_github_projects.py",
        "type": "file",
        "artifact_id": "1770d7c8-1e48-4233-a13a-f7049558df00",
        "metadata": {}
      },
      {
        "path": "scripts/fix_github_script.py",
        "type": "file",
        "artifact_id": "a014465d-b912-44e3-8afc-788313dbf611",
        "metadata": {}
      },
      {
        "path": "scripts/fix_hardcoded_usernames.py",
        "type": "file",
        "artifact_id": "060f792d-1ec5-46bb-97cd-a647df374bce",
        "metadata": {}
      },
      {
        "path": "scripts/github_sync_manager.py",
        "type": "file",
        "artifact_id": "95a06a6a-8364-48c1-96a2-1b543c3b3e98",
        "metadata": {}
      },
      {
        "path": "scripts/github_sync_manager_enhanced.py",
        "type": "file",
        "artifact_id": "d0e55bd7-5e14-4942-af73-48656fc249c0",
        "metadata": {}
      },
      {
        "path": "scripts/old",
        "type": "directory",
        "artifact_id": "b259b28f-7656-4b33-b9cb-4a6e09d36fd4",
        "metadata": {}
      },
      {
        "path": "scripts/process_926_items.py",
        "type": "file",
        "artifact_id": "c3dd33d9-357c-4f92-8a27-78b50a24effe",
        "metadata": {}
      },
      {
        "path": "scripts/session_cli.py",
        "type": "file",
        "artifact_id": "68798cce-0bae-493b-b53b-0acf668a13ed",
        "metadata": {}
      },
      {
        "path": "scripts/team",
        "type": "directory",
        "artifact_id": "65e501be-317f-46aa-808c-b5cfbfae47e6",
        "metadata": {}
      },
      {
        "path": "scripts/team/__init__.py",
        "type": "file",
        "artifact_id": "ba47608c-8c11-4944-a12a-247e5106b263",
        "metadata": {}
      },
      {
        "path": "scripts/validate_epics.py",
        "type": "file",
        "artifact_id": "ab8c2a1c-2f83-4259-9415-c153d3937d48",
        "metadata": {}
      },
      {
        "path": "scripts/validate_json.py",
        "type": "file",
        "artifact_id": "8a747028-8211-406f-a394-23eda72d3b38",
        "metadata": {}
      },
      {
        "path": "scripts/validate_refs.py",
        "type": "file",
        "artifact_id": "50b41e66-34d0-4a7b-a802-6f3b019ca1ed",
        "metadata": {}
      },
      {
        "path": "scripts/validate_schemas.py",
        "type": "file",
        "artifact_id": "8fdbdc98-1979-4692-bc82-e702e2893f72",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Session Management CLI",
      "artifact_id": "763b4751-8657-4a70-b77c-2408249d40fd"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Automatic struct.json update script",
      "artifact_id": "d3be3fa5-37f5-4dfc-8a72-59d49dfad314"
    },
    {
      "module_id": "scripts.fix_hardcoded_usernames",
      "path": "scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "functions": 12,
      "classes": 2,
      "summary": "Fix Hardcoded Usernames Script",
      "artifact_id": "9cc83259-2a6a-4d53-89e3-f2580cbb8b12"
    },
    {
      "module_id": "scripts.create_github_issues",
      "path": "scripts/create_github_issues.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "GitHub Issues Creator for AI-Dogfooding Project",
      "artifact_id": "4afea26a-96df-4669-8d7f-fec58e0100be"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Export script for GitHub Projects integration",
      "artifact_id": "b22ca1c1-6c75-4f8c-8bd1-805e8864fd0c"
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "ffede154-9ae0-4357-b55c-56a5863b9d64"
    },
    {
      "module_id": "scripts.process_926_items",
      "path": "scripts/process_926_items.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "926 Items Processing Script - Updated Implementation",
      "artifact_id": "f16d3052-d30e-43e3-9dc4-2c534decefd6"
    },
    {
      "module_id": "scripts.fix_github_script",
      "path": "scripts/fix_github_script.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Quick fix for GitHub issues creation script",
      "artifact_id": "bc8f76ef-fd96-42f5-b911-c9a1c575c4d8"
    },
    {
      "module_id": "scripts.github_sync_manager",
      "path": "scripts/github_sync_manager.py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub",
      "artifact_id": "bd5e24fb-36ce-4bc5-b20e-fcc44118bbff"
    },
    {
      "module_id": "scripts.create_comprehensive_index",
      "path": "scripts/create_comprehensive_index.py",
      "category": "core",
      "functions": 37,
      "classes": 2,
      "summary": "Comprehensive Project Index Creator",
      "artifact_id": "0faab809-3f82-429b-a5f7-96dd3e003af2"
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "JSON Validation Script",
      "artifact_id": "eb55f5c0-aa0c-4da2-b810-f09630a3f076"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "75f66076-c017-4444-a788-707f747383c6"
    },
    {
      "module_id": "scripts.create_tasks_index",
      "path": "scripts/create_tasks_index.py",
      "category": "core",
      "functions": 18,
      "classes": 3,
      "summary": "Tasks Index Creator",
      "artifact_id": "fc95861e-898e-43a0-b912-19a500319e96"
    },
    {
      "module_id": "scripts.github_sync_manager_enhanced",
      "path": "scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "functions": 28,
      "classes": 3,
      "summary": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout",
      "artifact_id": "ebba57c9-d7c8-49a7-9b3c-c712f547e53c"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "f64c92bd-9af3-4fa0-8edc-522996899911"
    },
    {
      "module_id": "scripts.validate_epics",
      "path": "scripts/validate_epics.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "Epic Data Validator",
      "artifact_id": "58d90727-1e39-46f6-a68b-1682a56b9cb1"
    },
    {
      "module_id": "scripts.epic_roadmap_manager",
      "path": "scripts/epic_roadmap_manager.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439",
      "artifact_id": "4cd95cfc-ff29-4e1a-b9f1-f8647e0a7e95"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "67214ea5-20df-4231-a5b9-42a403924dcb"
    },
    {
      "module_id": "scripts.team.__init__",
      "path": "scripts/team/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "ebf4bd34-92ff-4791-8b46-386d0ce8d642"
    },
    {
      "module_id": "llmstruct.workspace",
      "path": "llmstruct/workspace.py",
      "category": "core",
      "functions": 20,
      "classes": 1,
      "summary": "Workspace State & Mode Management System",
      "artifact_id": "59676ef0-91a7-4c01-b7df-c61296664156"
    },
    {
      "module_id": "llmstruct.cache",
      "path": "llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "6138549c-367d-4042-9c9f-e9932471c5b7"
    },
    {
      "module_id": "llmstruct.json_selector",
      "path": "llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "9c9fdc18-c195-4207-9756-ff4254df1fd0"
    },
    {
      "module_id": "llmstruct.workflow_orchestrator",
      "path": "llmstruct/workflow_orchestrator.py",
      "category": "core",
      "functions": 29,
      "classes": 5,
      "summary": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture",
      "artifact_id": "26675723-933c-4c10-95e3-a4e91e0089b8"
    },
    {
      "module_id": "llmstruct.gh_view",
      "path": "llmstruct/gh_view.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "GitHub visualization/graph feature (gh-view-v1)",
      "artifact_id": "c1b21cc2-959a-495f-9758-b33bb0c07960"
    },
    {
      "module_id": "llmstruct.self_run",
      "path": "llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "5573a026-5549-4e99-b3ef-208f53e01108"
    },
    {
      "module_id": "llmstruct.copilot",
      "path": "llmstruct/copilot.py",
      "category": "core",
      "functions": 26,
      "classes": 5,
      "summary": "LLMStruct Copilot Integration Module",
      "artifact_id": "ca812d5d-dfa4-4621-ab60-7d1299cfc0d7"
    },
    {
      "module_id": "llmstruct.ai_workflow_middleware",
      "path": "llmstruct/ai_workflow_middleware.py",
      "category": "core",
      "functions": 22,
      "classes": 4,
      "summary": "AI Workflow Middleware - Forces AI Integration with LLMStruct",
      "artifact_id": "37b1020a-ca7a-4e57-b142-6b6d604aaff1"
    },
    {
      "module_id": "llmstruct.ai_cli_integration",
      "path": "llmstruct/ai_cli_integration.py",
      "category": "core",
      "functions": 14,
      "classes": 1,
      "summary": "AI Self-Awareness CLI Integration Module",
      "artifact_id": "e77e5fdf-77da-48bc-beb2-0574bd3aa4f5"
    },
    {
      "module_id": "llmstruct.cursor_integration",
      "path": "llmstruct/cursor_integration.py",
      "category": "core",
      "functions": 22,
      "classes": 6,
      "summary": "Cursor IDE Integration Module",
      "artifact_id": "c18b58d0-6b95-438e-bc55-edd6e6d5c83b"
    },
    {
      "module_id": "llmstruct.grok",
      "path": "llmstruct/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "2111fb2d-b84a-4d16-a3b0-bbd360bfa4c0"
    },
    {
      "module_id": "llmstruct.transpiler",
      "path": "llmstruct/transpiler.py",
      "category": "core",
      "functions": 10,
      "classes": 3,
      "summary": "AI-Powered Universal Transpiler",
      "artifact_id": "a0b1e717-5274-46eb-9960-fb31959357f2"
    },
    {
      "module_id": "llmstruct.llm_client",
      "path": "llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "29d1c554-4e3a-4308-9579-aac8af25bb80"
    },
    {
      "module_id": "llmstruct.__main__",
      "path": "llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "f41beb05-4e0b-4ecb-9a75-6ffbce5b270a"
    },
    {
      "module_id": "llmstruct.metrics_tracker",
      "path": "llmstruct/metrics_tracker.py",
      "category": "core",
      "functions": 29,
      "classes": 4,
      "summary": "LLMStruct Metrics Tracker - \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "artifact_id": "ab34da75-82a2-4284-9aeb-a1e1c5ce2f3b"
    },
    {
      "module_id": "llmstruct.cli",
      "path": "llmstruct/cli.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "artifact_id": "aff39569-0db9-474d-bec8-d5d197ff36ba"
    },
    {
      "module_id": "llmstruct.context_orchestrator",
      "path": "llmstruct/context_orchestrator.py",
      "category": "core",
      "functions": 20,
      "classes": 5,
      "summary": "Smart Context Orchestration for LLMStruct",
      "artifact_id": "ce328fe2-6713-43e2-bcb1-0fda1b911bf2"
    },
    {
      "module_id": "llmstruct.ai_self_monitor",
      "path": "llmstruct/ai_self_monitor.py",
      "category": "core",
      "functions": 16,
      "classes": 4,
      "summary": "AI Self-Monitoring System",
      "artifact_id": "b45ce9e0-bc95-4f01-996a-9007695f29d5"
    },
    {
      "module_id": "llmstruct.cursor_ai_bridge",
      "path": "llmstruct/cursor_ai_bridge.py",
      "category": "core",
      "functions": 21,
      "classes": 1,
      "summary": "Cursor AI Bridge - API Layer for AI Assistant Integration",
      "artifact_id": "6b037207-5f1f-4c0f-a4e3-cd523ec5a820"
    },
    {
      "module_id": "llmstruct.ai_self_awareness",
      "path": "llmstruct/ai_self_awareness.py",
      "category": "core",
      "functions": 47,
      "classes": 8,
      "summary": "AI Self-Awareness Enhancement Module",
      "artifact_id": "f860b992-609b-4aaa-bbe5-fadf606be67c"
    },
    {
      "module_id": "llmstruct.__init__",
      "path": "llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "cff7befb-1b57-4c88-bcd4-bf7003f52595"
    },
    {
      "module_id": "llmstruct.modules.cli.epic",
      "path": "llmstruct/modules/cli/epic.py",
      "category": "cli",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "e34be118-a241-41ab-bc00-bd7c3f5d2b06"
    },
    {
      "module_id": "llmstruct.modules.cli.handlers_legacy",
      "path": "llmstruct/modules/cli/handlers_legacy.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "bc0021d0-b0ff-4a28-9176-7064c4feae69"
    },
    {
      "module_id": "llmstruct.modules.cli.analyze_duplicates",
      "path": "llmstruct/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "1b88f024-8eb6-47d3-8b13-4bfdf923c299"
    },
    {
      "module_id": "llmstruct.modules.cli.copilot",
      "path": "llmstruct/modules/cli/copilot.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "96cda3ae-0908-4417-8e3d-d625e0843923"
    },
    {
      "module_id": "llmstruct.modules.cli.handlers",
      "path": "llmstruct/modules/cli/handlers.py",
      "category": "cli",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "2ce2bfba-253d-448c-8cd1-b33f9a22e570"
    },
    {
      "module_id": "llmstruct.modules.cli.review",
      "path": "llmstruct/modules/cli/review.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "923359ec-1afc-4781-b3eb-9aa468233509"
    },
    {
      "module_id": "llmstruct.modules.cli.dogfood",
      "path": "llmstruct/modules/cli/dogfood.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "d7ab0cae-eb03-41ad-a44e-37d29dd7aa3a"
    },
    {
      "module_id": "llmstruct.modules.cli.parse",
      "path": "llmstruct/modules/cli/parse.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "c0bf28e0-aa50-4224-984f-0e8cea1302fe"
    },
    {
      "module_id": "llmstruct.modules.cli.audit",
      "path": "llmstruct/modules/cli/audit.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "5c948f30-c36a-42e1-9e35-93859324045e"
    },
    {
      "module_id": "llmstruct.modules.cli.query",
      "path": "llmstruct/modules/cli/query.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "cd7b4750-cbd5-4ba3-9b58-0b2a550e12dd"
    },
    {
      "module_id": "llmstruct.modules.cli.utils",
      "path": "llmstruct/modules/cli/utils.py",
      "category": "cli",
      "functions": 16,
      "classes": 0,
      "summary": "",
      "artifact_id": "04a03d19-856c-4a1f-9298-f5134cd098c7"
    },
    {
      "module_id": "llmstruct.modules.cli.context",
      "path": "llmstruct/modules/cli/context.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "5eb8a0b0-cd07-48e4-9042-a4dc82d1d0cd"
    },
    {
      "module_id": "llmstruct.modules.cli.__init__",
      "path": "llmstruct/modules/cli/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "3b088700-e2be-4ef0-8f0a-d261d35bff4c"
    },
    {
      "module_id": "llmstruct.modules.commands.queue",
      "path": "llmstruct/modules/commands/queue.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "f9730a92-22d2-4491-af04-c0f066bb7c41"
    },
    {
      "module_id": "llmstruct.modules.commands.metrics",
      "path": "llmstruct/modules/commands/metrics.py",
      "category": "core",
      "functions": 7,
      "classes": 0,
      "summary": "",
      "artifact_id": "f6addef1-584c-4e35-9ec0-84db3df1af24"
    },
    {
      "module_id": "llmstruct.modules.commands.services",
      "path": "llmstruct/modules/commands/services.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "bda7f55a-a0a7-46b2-bc90-4fb0b54b04ef"
    },
    {
      "module_id": "llmstruct.modules.commands.__init__",
      "path": "llmstruct/modules/commands/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "fd86c9d8-06c8-47c4-965f-12c94ae2d896"
    },
    {
      "module_id": "llmstruct.templates.__init__",
      "path": "llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "8a5d0263-1a24-40a3-a7fc-0de00e75bd00"
    },
    {
      "module_id": "llmstruct.api.config",
      "path": "llmstruct/api/config.py",
      "category": "core",
      "functions": 0,
      "classes": 1,
      "summary": "Configuration management for LLMStruct FastAPI",
      "artifact_id": "537f4df4-d36d-4d70-b5f0-601abbbf6cdd"
    },
    {
      "module_id": "llmstruct.api.app",
      "path": "llmstruct/api/app.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Main FastAPI application for LLMStruct",
      "artifact_id": "28fba4a1-ad5b-4512-bd0c-4e0d914bea51"
    },
    {
      "module_id": "llmstruct.api.__init__",
      "path": "llmstruct/api/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "LLMStruct FastAPI Module",
      "artifact_id": "62d32b23-0dc3-4f8f-af0a-c138e01f48f0"
    },
    {
      "module_id": "llmstruct.api.routes.chat",
      "path": "llmstruct/api/routes/chat.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "Chat Routes",
      "artifact_id": "8a020ecf-8a0b-4b5f-a060-ca057d2e7782"
    },
    {
      "module_id": "llmstruct.api.routes.continue_adapter",
      "path": "llmstruct/api/routes/continue_adapter.py",
      "category": "core",
      "functions": 5,
      "classes": 2,
      "summary": "Continue API Adapter",
      "artifact_id": "3868d99d-66ae-4501-b9c6-af2ad7b274ca"
    },
    {
      "module_id": "llmstruct.api.routes.system",
      "path": "llmstruct/api/routes/system.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "System routes for LLMStruct FastAPI",
      "artifact_id": "da5b6f00-ad04-49cc-b86f-2c8145aaa06b"
    },
    {
      "module_id": "llmstruct.api.routes.__init__",
      "path": "llmstruct/api/routes/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Routes package for LLMStruct FastAPI",
      "artifact_id": "0c25c0b4-a0fc-4ed7-94b4-499a1957bcb6"
    },
    {
      "module_id": "llmstruct.api.models.responses",
      "path": "llmstruct/api/models/responses.py",
      "category": "core",
      "functions": 0,
      "classes": 19,
      "summary": "Response models for LLMStruct FastAPI",
      "artifact_id": "e1c5b325-129a-4960-8a37-8a76209fcfa7"
    },
    {
      "module_id": "llmstruct.api.models.requests",
      "path": "llmstruct/api/models/requests.py",
      "category": "core",
      "functions": 0,
      "classes": 15,
      "summary": "Request models for LLMStruct FastAPI",
      "artifact_id": "64c03eb7-6943-4084-bc42-645f09089408"
    },
    {
      "module_id": "llmstruct.api.models.__init__",
      "path": "llmstruct/api/models/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Pydantic models for LLMStruct FastAPI",
      "artifact_id": "c10ba681-f8c9-4768-b7eb-a41032be002f"
    },
    {
      "module_id": "llmstruct.api.middleware.auth",
      "path": "llmstruct/api/middleware/auth.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Authentication middleware for LLMStruct FastAPI",
      "artifact_id": "71d31acf-ba0c-4f29-bd8c-d2a330cae186"
    },
    {
      "module_id": "llmstruct.api.middleware.logging",
      "path": "llmstruct/api/middleware/logging.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Logging middleware for LLMStruct FastAPI",
      "artifact_id": "2a785395-85a1-4dea-afa9-722c1597104e"
    },
    {
      "module_id": "llmstruct.api.middleware.__init__",
      "path": "llmstruct/api/middleware/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Middleware package for LLMStruct FastAPI",
      "artifact_id": "1feec786-2bf3-4023-9810-301f067310dc"
    },
    {
      "module_id": "llmstruct.api.services.llm_service",
      "path": "llmstruct/api/services/llm_service.py",
      "category": "core",
      "functions": 17,
      "classes": 4,
      "summary": "LLM Service",
      "artifact_id": "fdaa9fbd-787f-4620-a770-96f3a8ef8978"
    },
    {
      "module_id": "llmstruct.api.services.cli_bridge",
      "path": "llmstruct/api/services/cli_bridge.py",
      "category": "core",
      "functions": 9,
      "classes": 2,
      "summary": "CLI Bridge Service",
      "artifact_id": "f8d37c61-39b1-41d4-b847-41a2934e1372"
    },
    {
      "module_id": "llmstruct.api.services.chat_session",
      "path": "llmstruct/api/services/chat_session.py",
      "category": "core",
      "functions": 14,
      "classes": 2,
      "summary": "Chat Session Manager",
      "artifact_id": "08bda02c-0f00-4691-a9f1-0200e69064a4"
    },
    {
      "module_id": "llmstruct.api.services.__init__",
      "path": "llmstruct/api/services/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Services package for LLMStruct FastAPI",
      "artifact_id": "9336aa80-c5fc-4a8e-a81f-af35530c8631"
    },
    {
      "module_id": "llmstruct.generators.json_generator",
      "path": "llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "fbb13e62-50d3-4868-97f5-f99a135ce1c6"
    },
    {
      "module_id": "llmstruct.generators.go_json_generator",
      "path": "llmstruct/generators/go_json_generator.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "6362e2ed-593d-4d67-ad5b-d30ae51138aa"
    },
    {
      "module_id": "llmstruct.generators.__init__",
      "path": "llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "38142613-9a30-4d0b-8b39-46d4721537c4"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_core",
      "path": "llmstruct/ARCHIVE/cli_core.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Core CLI functionality and main loop.",
      "artifact_id": "23e06b8c-3bba-4c35-ab27-eb5d2bee15ae"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_config",
      "path": "llmstruct/ARCHIVE/cli_config.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "CLI configuration management.",
      "artifact_id": "03f9ed8c-25d7-4150-aa11-c03637c13943"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_argument_parser",
      "path": "llmstruct/ARCHIVE/cli_argument_parser.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "CLI argument parsing for LLMStruct.",
      "artifact_id": "9623c73f-a3ce-4cc0-9860-b9893c2a3b5e"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_main_commands",
      "path": "llmstruct/ARCHIVE/cli_main_commands.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "Main CLI command handlers for LLMStruct.",
      "artifact_id": "c62856a5-fb0f-445c-9cbf-00721d4b2106"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_utils",
      "path": "llmstruct/ARCHIVE/cli_utils.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "CLI utility functions.",
      "artifact_id": "32d20697-7716-4152-8c00-0bba5e380980"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_commands",
      "path": "llmstruct/ARCHIVE/cli_commands.py",
      "category": "core",
      "functions": 22,
      "classes": 1,
      "summary": "CLI command processing and handlers.",
      "artifact_id": "3948bb5b-8de8-4c6b-860c-aa3c9032856c"
    },
    {
      "module_id": "llmstruct.validators.json_validator",
      "path": "llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "3f4a7864-efc4-4e3f-a54a-d7b2e6ce1992"
    },
    {
      "module_id": "llmstruct.validators.__init__",
      "path": "llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "0f7c69d6-37c6-4afc-8ab8-d5d3ab126e05"
    },
    {
      "module_id": "llmstruct.parsers.universal_converter",
      "path": "llmstruct/parsers/universal_converter.py",
      "category": "core",
      "functions": 14,
      "classes": 3,
      "summary": "Universal Code Converter - Orchestrates all language parsers",
      "artifact_id": "711b4e09-8857-4751-92d2-fb3850b1617a"
    },
    {
      "module_id": "llmstruct.parsers.go_analyzer",
      "path": "llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430",
      "artifact_id": "abba2ff7-68f4-4a97-91d1-49e70e2afb48"
    },
    {
      "module_id": "llmstruct.parsers.javascript_parser",
      "path": "llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "576ed182-335b-4b48-9dd7-769310d148cc"
    },
    {
      "module_id": "llmstruct.parsers.python_parser",
      "path": "llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "",
      "artifact_id": "d1482b25-326f-4c52-bafa-b2e280c2a2c2"
    },
    {
      "module_id": "llmstruct.parsers.__init__",
      "path": "llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "f0179a0d-20f9-430c-8ad5-2b81782e3bb5"
    }
  ],
  "modules": [
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "module_doc": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct.\nPart of the comprehensive session management system.",
      "functions": [
        {
          "name": "get_current_branch",
          "docstring": "Get current git branch.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "save_json_file",
          "docstring": "Save JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_current_timestamp",
          "docstring": "Get current timestamp in ISO format.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log_event",
          "docstring": "Log an event to worklog.json.",
          "line_range": null,
          "parameters": [
            "event_message",
            "author"
          ],
          "decorators": []
        },
        {
          "name": "switch_session",
          "docstring": "Switch to a different session or create new one.",
          "line_range": null,
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "list_sessions",
          "docstring": "List all available sessions.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_session",
          "docstring": "Show current session details.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_worklog",
          "docstring": "Show recent worklog entries.",
          "line_range": null,
          "parameters": [
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main CLI interface.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "get_current_branch": [
          "subprocess.run"
        ],
        "load_json_file": [
          "print",
          "open",
          "json.load"
        ],
        "save_json_file": [
          "print",
          "json.dump",
          "open",
          "os.makedirs"
        ],
        "get_current_timestamp": [
          "datetime.now"
        ],
        "log_event": [
          "get_current_branch",
          "print",
          "get_current_timestamp",
          "save_json_file",
          "load_json_file",
          "current_session.get"
        ],
        "switch_session": [
          "get_current_branch",
          "print",
          "get_current_timestamp",
          "save_json_file",
          "load_json_file",
          "log_event"
        ],
        "list_sessions": [
          "current_session.get",
          "print",
          "load_json_file"
        ],
        "show_current_session": [
          "current_session.get",
          "print",
          "load_json_file"
        ],
        "show_worklog": [
          "print",
          "reversed",
          "len",
          "load_json_file"
        ],
        "main": [
          "switch_session",
          "int",
          "print",
          "list_sessions",
          "len",
          "show_current_session",
          "show_worklog",
          "log_event"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "763b4751-8657-4a70-b77c-2408249d40fd"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.",
      "functions": [
        {
          "name": "detect_project_changes",
          "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_struct_json",
          "docstring": "Create a backup of existing struct.json.",
          "line_range": null,
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_struct_json",
          "docstring": "Validate generated struct.json for basic structure.",
          "line_range": null,
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "update_struct_json",
          "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful",
          "line_range": null,
          "parameters": [
            "root_dir",
            "struct_path",
            "force",
            "config_override"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for auto-update script.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_config": [],
        "load_gitignore": [],
        "generate_json": [
          "ImportError"
        ],
        "detect_project_changes": [
          "logger.warning",
          "file_path.stat",
          "Path",
          "subprocess.run",
          "logger.info"
        ],
        "backup_struct_json": [
          "Path",
          "subprocess.run",
          "logger.info",
          "logger.error",
          "datetime.now"
        ],
        "validate_struct_json": [
          "logger.error",
          "logger.info",
          "open",
          "json.load"
        ],
        "update_struct_json": [
          "generate_json",
          "config.update",
          "json.dump",
          "config.get",
          "os.getcwd",
          "open",
          "logger.info",
          "cli_config.get",
          "validate_struct_json",
          "subprocess.run",
          "detect_project_changes",
          "logger.error",
          "backup_struct_json",
          "load_config",
          "load_gitignore"
        ],
        "main": [
          "sys.exit",
          "argparse.ArgumentParser",
          "parser.add_argument",
          "print",
          "os.getcwd",
          "parser.parse_args",
          "update_struct_json",
          "detect_project_changes",
          "logging.getLogger"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "generate_json",
        "json",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d3be3fa5-37f5-4dfc-8a72-59d49dfad314"
    },
    {
      "module_id": "scripts.fix_hardcoded_usernames",
      "path": "scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "module_doc": "Fix Hardcoded Usernames Script\nAutomatically detects and replaces hardcoded usernames with dynamic values from .env or git config.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_detect_user_info",
          "docstring": "Detect user info from .env, git config, or environment.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_env",
          "docstring": "Load user info from .env file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_git",
          "docstring": "Load user info from git config.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_environment",
          "docstring": "Load user info from environment variables.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_user_info",
          "docstring": "Get detected user information.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_files",
          "docstring": "Scan for files containing hardcoded usernames.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "fix_file",
          "docstring": "Fix hardcoded usernames in a single file.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "fix_all_files",
          "docstring": "Fix hardcoded usernames in all project files.",
          "line_range": null,
          "parameters": [
            "self",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "generate_env_template",
          "docstring": "Generate .env template with required variables.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "UserInfoDetector",
          "docstring": "Detect user information from various sources.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_detect_user_info",
              "docstring": "Detect user info from .env, git config, or environment.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_env",
              "docstring": "Load user info from .env file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_git",
              "docstring": "Load user info from git config.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_environment",
              "docstring": "Load user info from environment variables.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_user_info",
              "docstring": "Get detected user information.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "HardcodeFixer",
          "docstring": "Fix hardcoded usernames in project files.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_files",
              "docstring": "Scan for files containing hardcoded usernames.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "fix_file",
              "docstring": "Fix hardcoded usernames in a single file.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "dry_run"
              ]
            },
            {
              "name": "fix_all_files",
              "docstring": "Fix hardcoded usernames in all project files.",
              "line_range": null,
              "parameters": [
                "self",
                "dry_run"
              ]
            },
            {
              "name": "generate_env_template",
              "docstring": "Generate .env template with required variables.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "UserInfoDetector",
          "Path"
        ],
        "_detect_user_info": [
          "env_info.items",
          "user_info.get",
          "self._load_from_environment",
          "env_vars.items",
          "self._load_from_env",
          "logger.info",
          "user_info.update",
          "self._load_from_git"
        ],
        "_load_from_env": [
          "value.strip",
          "line.startswith",
          "line.strip",
          "line.split",
          "open",
          "key.strip",
          "logger.error",
          "env_file.exists",
          "env_vars.get"
        ],
        "_load_from_git": [
          "logger.error",
          "subprocess.run",
          "re.search",
          "match.group"
        ],
        "_load_from_environment": [],
        "get_user_info": [],
        "scan_files": [
          "logger.warning",
          "content.count",
          "any",
          "open",
          "str",
          "f.read",
          "files_with_hardcode.append"
        ],
        "fix_file": [
          "f.write",
          "content.count",
          "open",
          "content.replace",
          "logger.info",
          "logger.error",
          "f.read"
        ],
        "fix_all_files": [
          "len",
          "str",
          "logger.info",
          "self.fix_file",
          "self.scan_files"
        ],
        "generate_env_template": [],
        "main": [
          "f.write",
          "replacements.items",
          "argparse.ArgumentParser",
          "Path",
          "parser.add_argument",
          "print",
          "fixer.scan_files",
          "len",
          "open",
          "results.items",
          "HardcodeFixer",
          "parser.parse_args",
          "fixer.generate_env_template",
          "logger.info",
          "fixer.fix_all_files"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9cc83259-2a6a-4d53-89e3-f2580cbb8b12"
    },
    {
      "module_id": "scripts.create_github_issues",
      "path": "scripts/create_github_issues.py",
      "category": "core",
      "module_doc": "GitHub Issues Creator for AI-Dogfooding Project\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GitHub issues \u0438\u0437 \u043d\u0430\u0448\u0438\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447",
      "functions": [
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_epics_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438\u0437 JSON",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f issues",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "token",
            "use_cli"
          ],
          "decorators": []
        },
        {
          "name": "create_epic_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": null,
          "parameters": [
            "self",
            "epic_data"
          ],
          "decorators": []
        },
        {
          "name": "create_task_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": null,
          "parameters": [
            "self",
            "task_data",
            "epic_number"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_api",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_cli",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_format_criteria",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "criteria"
          ],
          "decorators": []
        },
        {
          "name": "_format_tasks",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "_format_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "metrics"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubIssuesCreator",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "token",
                "use_cli"
              ]
            },
            {
              "name": "create_epic_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
              "line_range": null,
              "parameters": [
                "self",
                "epic_data"
              ]
            },
            {
              "name": "create_task_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": null,
              "parameters": [
                "self",
                "task_data",
                "epic_number"
              ]
            },
            {
              "name": "_create_issue_via_api",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_create_issue_via_cli",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_format_criteria",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "criteria"
              ]
            },
            {
              "name": "_format_tasks",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "_format_metrics",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "metrics"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "load_env_file": [
          "value.strip",
          "line.startswith",
          "Path",
          "print",
          "line.strip",
          "open",
          "line.split",
          "key.strip",
          "env_file.exists"
        ],
        "__init__": [],
        "create_epic_issue": [
          "self._format_criteria",
          "self._create_issue_via_api",
          "epic_data.get",
          "self._format_metrics",
          "self._create_issue_via_cli",
          "self._format_tasks"
        ],
        "create_task_issue": [
          "self._create_issue_via_api",
          "self._format_criteria",
          "self._create_issue_via_cli",
          "task_data.get"
        ],
        "_create_issue_via_api": [
          "print",
          "response.json",
          "requests.post"
        ],
        "_create_issue_via_cli": [
          "f.write",
          "os.getpid",
          "int",
          "print",
          "open",
          "subprocess.run",
          "issue_url.split",
          "os.unlink"
        ],
        "_format_criteria": [],
        "_format_tasks": [],
        "_format_metrics": [
          "metrics.items"
        ],
        "load_epics_data": [
          "epics_file.exists",
          "Path",
          "print",
          "open",
          "json.load"
        ],
        "main": [
          "GitHubIssuesCreator",
          "os.getenv",
          "creator.create_task_issue",
          "print",
          "creator.create_epic_issue",
          "len",
          "epics_data.get",
          "load_epics_data",
          "epic_data.get"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "4afea26a-96df-4669-8d7f-fec58e0100be"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "config_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "check_github_cli",
          "docstring": "Check if GitHub CLI is installed and authenticated",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "list_projects",
          "docstring": "List available GitHub Projects (via gh-projects extension)",
          "line_range": null,
          "parameters": [
            "self",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "create_project_item",
          "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
          "line_range": null,
          "parameters": [
            "self",
            "project_number",
            "title",
            "body",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_tasks_to_project",
          "docstring": "Export tasks to GitHub Project",
          "line_range": null,
          "parameters": [
            "self",
            "tasks",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_ideas_to_project",
          "docstring": "Export ideas to GitHub Project",
          "line_range": null,
          "parameters": [
            "self",
            "ideas",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "filter_data",
          "docstring": "Filter data by status and priority",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "status_filter",
            "priority_filter"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExportScript",
          "docstring": "Extended exporter with command-line interface and GitHub CLI integration",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "config_path",
                "dry_run"
              ]
            },
            {
              "name": "check_github_cli",
              "docstring": "Check if GitHub CLI is installed and authenticated",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "list_projects",
              "docstring": "List available GitHub Projects (via gh-projects extension)",
              "line_range": null,
              "parameters": [
                "self",
                "owner",
                "repo"
              ]
            },
            {
              "name": "create_project_item",
              "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
              "line_range": null,
              "parameters": [
                "self",
                "project_number",
                "title",
                "body",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_tasks_to_project",
              "docstring": "Export tasks to GitHub Project",
              "line_range": null,
              "parameters": [
                "self",
                "tasks",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_ideas_to_project",
              "docstring": "Export ideas to GitHub Project",
              "line_range": null,
              "parameters": [
                "self",
                "ideas",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "filter_data",
              "docstring": "Filter data by status and priority",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "status_filter",
                "priority_filter"
              ]
            }
          ],
          "bases": [
            "GitHubProjectsExporter"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "super"
        ],
        "check_github_cli": [
          "self._run_gh_command",
          "print"
        ],
        "list_projects": [
          "self._run_gh_command",
          "json.loads",
          "print",
          "isinstance"
        ],
        "create_project_item": [
          "self._run_gh_command",
          "print",
          "output.strip",
          "str"
        ],
        "export_tasks_to_project": [
          "self.create_project_item",
          "task.get",
          "print",
          "len",
          "self.format_task_for_github"
        ],
        "export_ideas_to_project": [
          "self.create_project_item",
          "print",
          "len",
          "idea.get",
          "self.format_idea_for_github"
        ],
        "filter_data": [
          "item.get"
        ],
        "main": [
          "sys.exit",
          "GitHubProjectsExportScript",
          "argparse.ArgumentParser",
          "exporter.check_github_cli",
          "exporter.filter_data",
          "parser.add_argument",
          "print",
          "exporter.load_official_data",
          "exporter.export_ideas_to_project",
          "exporter.export_tasks_to_project",
          "parser.parse_args",
          "exporter._save_mapping"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "GitHubProjectsExporter",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "datetime",
        "json",
        "llmstruct.gh_view",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b22ca1c1-6c75-4f8c-8bd1-805e8864fd0c"
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "ffede154-9ae0-4357-b55c-56a5863b9d64"
    },
    {
      "module_id": "scripts.process_926_items",
      "path": "scripts/process_926_items.py",
      "category": "core",
      "module_doc": "926 Items Processing Script - Updated Implementation\nProcesses items according to GitHub roadmap + personal management vision\nImplements all decisions from 926_items_processing_execution_plan.md",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_comprehensive_index",
          "docstring": "Load the 926 items from comprehensive index",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "calculate_confidence_score",
          "docstring": "Calculate confidence score for categorization decision",
          "line_range": null,
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "check_t_pot_related",
          "docstring": "Enhanced T-Pot detection",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_team_implementable",
          "docstring": "Check if team can implement without architecture review",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_personal_vs_team_vs_business",
          "docstring": "Classify as personal/team/business",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "identify_epic_candidates",
          "docstring": "Identify items that should be grouped into epics",
          "line_range": null,
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "extract_epic_name",
          "docstring": "Extract epic name from item",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "categorize_item",
          "docstring": "Main categorization logic with confidence scoring",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "find_duplicates",
          "docstring": "Enhanced duplicate detection with T-Pot special handling",
          "line_range": null,
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "calculate_similarity",
          "docstring": "Enhanced similarity calculation",
          "line_range": null,
          "parameters": [
            "self",
            "title1",
            "title2"
          ],
          "decorators": []
        },
        {
          "name": "suggest_merge_strategy",
          "docstring": "Enhanced merge strategy with T-Pot consideration",
          "line_range": null,
          "parameters": [
            "self",
            "item1",
            "item2"
          ],
          "decorators": []
        },
        {
          "name": "process_items",
          "docstring": "Main processing workflow implementing execution plan",
          "line_range": null,
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "save_results",
          "docstring": "Save categorized results with enhanced metadata",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_category_description",
          "docstring": "Category descriptions per execution plan",
          "line_range": null,
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Main execution workflow per execution plan",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskProcessor926",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_comprehensive_index",
              "docstring": "Load the 926 items from comprehensive index",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "calculate_confidence_score",
              "docstring": "Calculate confidence score for categorization decision",
              "line_range": null,
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "check_t_pot_related",
              "docstring": "Enhanced T-Pot detection",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_team_implementable",
              "docstring": "Check if team can implement without architecture review",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_personal_vs_team_vs_business",
              "docstring": "Classify as personal/team/business",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "identify_epic_candidates",
              "docstring": "Identify items that should be grouped into epics",
              "line_range": null,
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "extract_epic_name",
              "docstring": "Extract epic name from item",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "categorize_item",
              "docstring": "Main categorization logic with confidence scoring",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "find_duplicates",
              "docstring": "Enhanced duplicate detection with T-Pot special handling",
              "line_range": null,
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "calculate_similarity",
              "docstring": "Enhanced similarity calculation",
              "line_range": null,
              "parameters": [
                "self",
                "title1",
                "title2"
              ]
            },
            {
              "name": "suggest_merge_strategy",
              "docstring": "Enhanced merge strategy with T-Pot consideration",
              "line_range": null,
              "parameters": [
                "self",
                "item1",
                "item2"
              ]
            },
            {
              "name": "process_items",
              "docstring": "Main processing workflow implementing execution plan",
              "line_range": null,
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "save_results",
              "docstring": "Save categorized results with enhanced metadata",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_category_description",
              "docstring": "Category descriptions per execution plan",
              "line_range": null,
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "run",
              "docstring": "Main execution workflow per execution plan",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "datetime.now",
          "Path"
        ],
        "load_comprehensive_index": [
          "hash",
          "data.items",
          "seen_items.add",
          "set",
          "isinstance",
          "value.items",
          "print",
          "items.extend",
          "len",
          "any",
          "open",
          "item.get",
          "items.append",
          "str",
          "unique_items.append",
          "index_path.exists",
          "item_content.lower",
          "json.load"
        ],
        "calculate_confidence_score": [
          "min",
          "self.check_t_pot_related",
          "item.get",
          "str",
          "sum"
        ],
        "check_t_pot_related": [
          "any",
          "str"
        ],
        "check_team_implementable": [
          "sum",
          "str"
        ],
        "check_personal_vs_team_vs_business": [
          "sum",
          "max",
          "item.get",
          "str"
        ],
        "identify_epic_candidates": [
          "epic_groups.items",
          "len",
          "any",
          "self.extract_epic_name",
          "item.get",
          "str"
        ],
        "extract_epic_name": [
          "item.get",
          "title.split"
        ],
        "categorize_item": [
          "any",
          "self.check_team_implementable",
          "self.check_t_pot_related",
          "str",
          "self.calculate_confidence_score",
          "self.check_personal_vs_team_vs_business"
        ],
        "find_duplicates": [
          "self.calculate_similarity",
          "seen_items.items",
          "self.check_t_pot_related",
          "item.get",
          "duplicates.append",
          "self.suggest_merge_strategy"
        ],
        "calculate_similarity": [
          "min",
          "set",
          "words1.union",
          "title1.split",
          "title2.split",
          "len",
          "words1.intersection"
        ],
        "suggest_merge_strategy": [
          "len",
          "item2.get",
          "self.check_t_pot_related",
          "item1.get",
          "str"
        ],
        "process_items": [
          "processed_item.copy",
          "set",
          "print",
          "duplicate_item_ids.add",
          "len",
          "any",
          "low_confidence_items.append",
          "self.check_team_implementable",
          "id",
          "category.startswith",
          "self.extract_epic_name",
          "self.check_t_pot_related",
          "self.categorize_item",
          "str",
          "datetime.now",
          "self.find_duplicates"
        ],
        "save_results": [
          "print",
          "self.get_category_description",
          "len",
          "open",
          "json.dump",
          "item.get",
          "datetime.now",
          "sum"
        ],
        "get_category_description": [
          "descriptions.get"
        ],
        "run": [
          "self.save_results",
          "print",
          "self.process_items",
          "self.load_comprehensive_index"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f16d3052-d30e-43e3-9dc4-2c534decefd6"
    },
    {
      "module_id": "scripts.fix_github_script",
      "path": "scripts/fix_github_script.py",
      "category": "core",
      "module_doc": "Quick fix for GitHub issues creation script\n\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 JSON \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445",
      "functions": [
        {
          "name": "fix_json_loading",
          "docstring": "\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 JSON \u0434\u0430\u043d\u043d\u044b\u0445",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "fix_json_loading": [
          "f.write",
          "Path",
          "print",
          "open",
          "content.replace",
          "f.read"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "bc8f76ef-fd96-42f5-b911-c9a1c575c4d8"
    },
    {
      "module_id": "scripts.github_sync_manager",
      "path": "scripts/github_sync_manager.py",
      "category": "core",
      "module_doc": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub\nSupports: Issues, Epics (Projects), Discussions\nSafety: dry-run mode, logging, collision detection",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results for idempotency",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log for future idempotency",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Safe GitHub API request with rate limiting",
          "line_range": null,
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_issues",
          "docstring": "Get existing GitHub issues for collision detection",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_discussions",
          "docstring": "Get existing GitHub discussions",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced (idempotency)",
          "line_range": null,
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "find_existing_by_title",
          "docstring": "Find existing GitHub item by title similarity",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "existing_items"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue",
          "docstring": "Create GitHub issue from processed item",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion",
          "docstring": "Create GitHub discussion from processed item",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic",
          "docstring": "Create GitHub epic (as Project or enhanced Issue)",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "sync_category",
          "docstring": "Sync specific category with GitHub",
          "line_range": null,
          "parameters": [
            "self",
            "category",
            "filename"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Pre-sync validation checks",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "Main sync execution",
          "line_range": null,
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubSyncManager",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results for idempotency",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log for future idempotency",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Safe GitHub API request with rate limiting",
              "line_range": null,
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "get_existing_issues",
              "docstring": "Get existing GitHub issues for collision detection",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_existing_discussions",
              "docstring": "Get existing GitHub discussions",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced (idempotency)",
              "line_range": null,
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "find_existing_by_title",
              "docstring": "Find existing GitHub item by title similarity",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "existing_items"
              ]
            },
            {
              "name": "create_github_issue",
              "docstring": "Create GitHub issue from processed item",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion",
              "docstring": "Create GitHub discussion from processed item",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_epic",
              "docstring": "Create GitHub epic (as Project or enhanced Issue)",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "sync_category",
              "docstring": "Sync specific category with GitHub",
              "line_range": null,
              "parameters": [
                "self",
                "category",
                "filename"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Pre-sync validation checks",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "Main sync execution",
              "line_range": null,
              "parameters": [
                "self",
                "categories"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.load_sync_log",
          "print",
          "os.getenv",
          "Path"
        ],
        "load_sync_log": [
          "open",
          "json.load"
        ],
        "save_sync_log": [
          "json.dump",
          "open"
        ],
        "api_request": [
          "requests.get",
          "int",
          "print",
          "requests.patch",
          "method.upper",
          "response.raise_for_status",
          "ValueError",
          "response.json",
          "time.sleep",
          "requests.post"
        ],
        "get_existing_issues": [
          "self.api_request",
          "len",
          "issues.extend"
        ],
        "get_existing_discussions": [],
        "item_already_synced": [
          "item.get"
        ],
        "find_existing_by_title": [
          "len",
          "item.get",
          "title.lower"
        ],
        "create_github_issue": [
          "labels.append",
          "print",
          "self.api_request",
          "item.get",
          "processing_meta.get"
        ],
        "create_github_discussion": [
          "print",
          "item.get"
        ],
        "create_github_epic": [
          "print",
          "item.get",
          "self.api_request"
        ],
        "sync_category": [
          "self.create_github_issue",
          "file_path.exists",
          "self.find_existing_by_title",
          "print",
          "self.create_github_epic",
          "open",
          "self.create_github_discussion",
          "result.get",
          "self.item_already_synced",
          "item.get",
          "existing.get",
          "self.get_existing_discussions",
          "datetime.now",
          "data.get",
          "self.get_existing_issues",
          "json.load"
        ],
        "validate_before_sync": [
          "core_limit.get",
          "repo_info.get",
          "print",
          "self.api_request",
          "rate_limit.get",
          "user_info.get"
        ],
        "run_sync": [
          "self.sync_category",
          "results.values",
          "print",
          "r.get",
          "self.validate_before_sync",
          "self.save_sync_log",
          "datetime.now",
          "sum"
        ],
        "main": [
          "argparse.ArgumentParser",
          "parser.add_argument",
          "print",
          "len",
          "GitHubSyncManager",
          "result.get",
          "parser.parse_args",
          "manager.run_sync"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "bd5e24fb-36ce-4bc5-b20e-fcc44118bbff"
    },
    {
      "module_id": "scripts.create_comprehensive_index",
      "path": "scripts/create_comprehensive_index.py",
      "category": "core",
      "module_doc": "Comprehensive Project Index Creator\nScans ALL project directories for tasks, ideas, sessions, and concepts.\nProvides complete visibility into project state and unaccounted innovations.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize comprehensive extraction patterns.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "scan_all_directories",
          "docstring": "Scan all configured directories comprehensively.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_scan_directory",
          "docstring": "Scan a specific directory according to its configuration.",
          "line_range": null,
          "parameters": [
            "self",
            "directory",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_scan_root_files",
          "docstring": "Scan root-level files.",
          "line_range": null,
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_should_scan_file",
          "docstring": "Check if file should be scanned based on extension.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "allowed_types"
          ],
          "decorators": []
        },
        {
          "name": "_scan_file",
          "docstring": "Scan individual file for project items.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_text",
          "docstring": "Extract items from text/markdown files.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_json",
          "docstring": "Extract items from JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_item_from_match",
          "docstring": "Create ProjectItem from regex match.",
          "line_range": null,
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_checkbox_item",
          "docstring": "Create ProjectItem from checkbox match.",
          "line_range": null,
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_simple_item",
          "docstring": "Create simple ProjectItem.",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_status",
          "docstring": "Detect item status from surrounding content.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_priority",
          "docstring": "Detect item priority from surrounding content.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "position",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_assess_strategic_value",
          "docstring": "Assess strategic value of item.",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract context around position.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "position",
            "length"
          ],
          "decorators": []
        },
        {
          "name": "_detect_category",
          "docstring": "Detect item category.",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_effort",
          "docstring": "Estimate effort required.",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tags",
          "docstring": "Extract relevant tags.",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "content",
            "source_dir"
          ],
          "decorators": []
        },
        {
          "name": "_is_noise_checkbox",
          "docstring": "Check if checkbox is noise (navigation, etc).",
          "line_range": null,
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "_parse_json_files",
          "docstring": "Parse structured JSON files for existing data.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_process_structured_json",
          "docstring": "Process structured JSON data.",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_add_json_item",
          "docstring": "Add item from JSON structure.",
          "line_range": null,
          "parameters": [
            "self",
            "item",
            "file_path",
            "item_type"
          ],
          "decorators": []
        },
        {
          "name": "_assess_json_strategic_value",
          "docstring": "Assess strategic value from JSON item.",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_extract_innovation_concepts",
          "docstring": "Extract innovation concepts from content.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_enhance_items",
          "docstring": "Post-process items to enhance metadata and find relationships.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_find_related_items",
          "docstring": "Find related items based on content similarity.",
          "line_range": null,
          "parameters": [
            "self",
            "item",
            "id_map",
            "title_map"
          ],
          "decorators": []
        },
        {
          "name": "generate_comprehensive_report",
          "docstring": "Generate comprehensive analysis report.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_comprehensive_index",
          "docstring": "Save comprehensive index and reports.",
          "line_range": null,
          "parameters": [
            "self",
            "output_dir"
          ],
          "decorators": []
        },
        {
          "name": "_generate_analysis_report",
          "docstring": "Generate human-readable analysis report.",
          "line_range": null,
          "parameters": [
            "self",
            "report"
          ],
          "decorators": []
        },
        {
          "name": "_format_dict",
          "docstring": "Format dictionary for markdown display.",
          "line_range": null,
          "parameters": [
            "self",
            "d"
          ],
          "decorators": []
        },
        {
          "name": "_format_items_list",
          "docstring": "Format items list for markdown display.",
          "line_range": null,
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_tasks",
          "docstring": "Extract tasks from JSON tasks array.",
          "line_range": null,
          "parameters": [
            "self",
            "tasks_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_ideas",
          "docstring": "Extract ideas from JSON ideas array.",
          "line_range": null,
          "parameters": [
            "self",
            "ideas_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_sessions",
          "docstring": "Extract sessions from JSON sessions array.",
          "line_range": null,
          "parameters": [
            "self",
            "sessions_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_array",
          "docstring": "Extract items from JSON array.",
          "line_range": null,
          "parameters": [
            "self",
            "array_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ProjectItem",
          "docstring": "Unified representation of any project item (task, idea, session, concept).",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "ComprehensiveIndexer",
          "docstring": "Comprehensive indexer for all project content.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize comprehensive extraction patterns.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "scan_all_directories",
              "docstring": "Scan all configured directories comprehensively.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_scan_directory",
              "docstring": "Scan a specific directory according to its configuration.",
              "line_range": null,
              "parameters": [
                "self",
                "directory",
                "config"
              ]
            },
            {
              "name": "_scan_root_files",
              "docstring": "Scan root-level files.",
              "line_range": null,
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "_should_scan_file",
              "docstring": "Check if file should be scanned based on extension.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "allowed_types"
              ]
            },
            {
              "name": "_scan_file",
              "docstring": "Scan individual file for project items.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_text",
              "docstring": "Extract items from text/markdown files.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_json",
              "docstring": "Extract items from JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_item_from_match",
              "docstring": "Create ProjectItem from regex match.",
              "line_range": null,
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_checkbox_item",
              "docstring": "Create ProjectItem from checkbox match.",
              "line_range": null,
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_simple_item",
              "docstring": "Create simple ProjectItem.",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority",
                "position"
              ]
            },
            {
              "name": "_detect_status",
              "docstring": "Detect item status from surrounding content.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "position"
              ]
            },
            {
              "name": "_detect_priority",
              "docstring": "Detect item priority from surrounding content.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "position",
                "default"
              ]
            },
            {
              "name": "_assess_strategic_value",
              "docstring": "Assess strategic value of item.",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract context around position.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "position",
                "length"
              ]
            },
            {
              "name": "_detect_category",
              "docstring": "Detect item category.",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_estimate_effort",
              "docstring": "Estimate effort required.",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_tags",
              "docstring": "Extract relevant tags.",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "content",
                "source_dir"
              ]
            },
            {
              "name": "_is_noise_checkbox",
              "docstring": "Check if checkbox is noise (navigation, etc).",
              "line_range": null,
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "_parse_json_files",
              "docstring": "Parse structured JSON files for existing data.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_process_structured_json",
              "docstring": "Process structured JSON data.",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "file_path"
              ]
            },
            {
              "name": "_add_json_item",
              "docstring": "Add item from JSON structure.",
              "line_range": null,
              "parameters": [
                "self",
                "item",
                "file_path",
                "item_type"
              ]
            },
            {
              "name": "_assess_json_strategic_value",
              "docstring": "Assess strategic value from JSON item.",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_extract_innovation_concepts",
              "docstring": "Extract innovation concepts from content.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_enhance_items",
              "docstring": "Post-process items to enhance metadata and find relationships.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_find_related_items",
              "docstring": "Find related items based on content similarity.",
              "line_range": null,
              "parameters": [
                "self",
                "item",
                "id_map",
                "title_map"
              ]
            },
            {
              "name": "generate_comprehensive_report",
              "docstring": "Generate comprehensive analysis report.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_comprehensive_index",
              "docstring": "Save comprehensive index and reports.",
              "line_range": null,
              "parameters": [
                "self",
                "output_dir"
              ]
            },
            {
              "name": "_generate_analysis_report",
              "docstring": "Generate human-readable analysis report.",
              "line_range": null,
              "parameters": [
                "self",
                "report"
              ]
            },
            {
              "name": "_format_dict",
              "docstring": "Format dictionary for markdown display.",
              "line_range": null,
              "parameters": [
                "self",
                "d"
              ]
            },
            {
              "name": "_format_items_list",
              "docstring": "Format items list for markdown display.",
              "line_range": null,
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "_extract_json_tasks",
              "docstring": "Extract tasks from JSON tasks array.",
              "line_range": null,
              "parameters": [
                "self",
                "tasks_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_ideas",
              "docstring": "Extract ideas from JSON ideas array.",
              "line_range": null,
              "parameters": [
                "self",
                "ideas_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_sessions",
              "docstring": "Extract sessions from JSON sessions array.",
              "line_range": null,
              "parameters": [
                "self",
                "sessions_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_array",
              "docstring": "Extract items from JSON array.",
              "line_range": null,
              "parameters": [
                "self",
                "array_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._init_patterns",
          "Path"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "scan_all_directories": [
          "self._parse_json_files",
          "self._scan_directory",
          "len",
          "self._enhance_items",
          "logger.info",
          "self._scan_root_files"
        ],
        "_scan_directory": [
          "dir_path.exists",
          "logger.warning",
          "dir_path.glob",
          "self._should_scan_file",
          "file_path.is_file",
          "logger.info",
          "self._scan_file"
        ],
        "_scan_root_files": [
          "file_path.is_file",
          "self._should_scan_file",
          "self._scan_file"
        ],
        "_should_scan_file": [],
        "_scan_file": [
          "self._extract_from_json",
          "open",
          "self._extract_from_text",
          "logger.error",
          "f.read"
        ],
        "_extract_from_text": [
          "self._create_item_from_match",
          "self._create_simple_item",
          "self._extract_innovation_concepts",
          "match.group",
          "self._is_noise_checkbox",
          "match.start",
          "self._create_checkbox_item"
        ],
        "_extract_from_json": [
          "logger.warning",
          "isinstance",
          "self._extract_json_sessions",
          "self._extract_json_array",
          "self._extract_json_tasks",
          "json.loads",
          "self._extract_json_ideas"
        ],
        "_create_item_from_match": [
          "ProjectItem",
          "self._assess_strategic_value",
          "match.group",
          "self._detect_status",
          "datetime.now",
          "self._detect_category",
          "title.strip",
          "self._detect_priority",
          "self._extract_context",
          "match.start",
          "str",
          "self._extract_tags",
          "self._estimate_effort"
        ],
        "_create_checkbox_item": [
          "ProjectItem",
          "self._assess_strategic_value",
          "match.group",
          "datetime.now",
          "self._detect_category",
          "self._detect_priority",
          "self._extract_context",
          "match.start",
          "str",
          "self._extract_tags",
          "self._estimate_effort"
        ],
        "_create_simple_item": [
          "ProjectItem",
          "title.strip",
          "str",
          "self._extract_context",
          "datetime.now"
        ],
        "_detect_status": [
          "max"
        ],
        "_detect_priority": [
          "max"
        ],
        "_assess_strategic_value": [],
        "_extract_context": [
          "min",
          "max",
          "len"
        ],
        "_detect_category": [
          "any",
          "title.lower"
        ],
        "_estimate_effort": [
          "any"
        ],
        "_extract_tags": [
          "source_dir.replace",
          "tags.append",
          "title.lower"
        ],
        "_is_noise_checkbox": [
          "text.strip",
          "len",
          "text.lower",
          "any"
        ],
        "_parse_json_files": [
          "file_path.exists",
          "self._process_structured_json",
          "open",
          "logger.error",
          "json.load"
        ],
        "_process_structured_json": [
          "self._add_json_item",
          "isinstance"
        ],
        "_add_json_item": [
          "ProjectItem",
          "len",
          "item.get",
          "str",
          "self._assess_json_strategic_value",
          "datetime.now"
        ],
        "_assess_json_strategic_value": [
          "item.get"
        ],
        "_extract_innovation_concepts": [
          "ProjectItem",
          "datetime.now",
          "source_dir.replace",
          "line.strip",
          "len",
          "content.find",
          "enumerate",
          "self._extract_context",
          "str",
          "innovation_lines.append",
          "content.split"
        ],
        "_enhance_items": [
          "re.sub",
          "self._find_related_items",
          "logger.info"
        ],
        "_find_related_items": [
          "related.append",
          "re.findall",
          "ref_type.upper"
        ],
        "generate_comprehensive_report": [
          "by_status.get",
          "by_strategic_value.get",
          "len",
          "by_type.get",
          "by_source.get",
          "asdict",
          "datetime.now",
          "by_priority.get"
        ],
        "save_comprehensive_index": [
          "f.write",
          "self.generate_comprehensive_report",
          "json.dump",
          "len",
          "open",
          "logger.info",
          "self._generate_analysis_report",
          "os.makedirs"
        ],
        "_generate_analysis_report": [
          "len",
          "self._format_items_list",
          "self._format_dict"
        ],
        "_format_dict": [
          "sorted",
          "d.items"
        ],
        "_format_items_list": [
          "result.append"
        ],
        "_extract_json_tasks": [
          "self._add_json_item",
          "isinstance"
        ],
        "_extract_json_ideas": [
          "self._add_json_item",
          "isinstance"
        ],
        "_extract_json_sessions": [
          "self._add_json_item",
          "isinstance"
        ],
        "_extract_json_array": [
          "self._add_json_item",
          "str",
          "isinstance"
        ],
        "main": [
          "ComprehensiveIndexer",
          "by_strategic.get",
          "print",
          "len",
          "indexer.scan_all_directories",
          "logger.info",
          "indexer.save_comprehensive_index"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "0faab809-3f82-429b-a5f7-96dd3e003af2"
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "module_doc": "JSON Validation Script\nValidates JSON files against their respective schemas.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate a JSON file against a schema.",
          "line_range": null,
          "parameters": [
            "file_path",
            "schema_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "print",
          "open",
          "json.load"
        ],
        "validate_json": [
          "Draft7Validator",
          "Path",
          "print",
          "load_json",
          "str",
          "validator.validate"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "pathlib",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "eb55f5c0-aa0c-4da2-b810-f09630a3f076"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "logger.warning",
          "Path",
          "json.dump",
          "broken_links.append",
          "source_file.exists",
          "idea.get",
          "logger.info",
          "logger.error",
          "enumerate",
          "target_file.exists",
          "json.load"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "75f66076-c017-4444-a788-707f747383c6"
    },
    {
      "module_id": "scripts.create_tasks_index",
      "path": "scripts/create_tasks_index.py",
      "category": "core",
      "module_doc": "Tasks Index Creator\nScans all documentation files and creates comprehensive index of tasks, EPICs, TODOs, and other actionable items.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize regex patterns for task extraction.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "extract_from_markdown",
          "docstring": "Extract tasks from markdown file.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_status",
          "docstring": "Extract document status.",
          "line_range": null,
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_priority",
          "docstring": "Extract document priority.",
          "line_range": null,
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_date",
          "docstring": "Extract document date.",
          "line_range": null,
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_epics",
          "docstring": "Extract EPIC items.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tasks",
          "docstring": "Extract explicit task items.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_todos",
          "docstring": "Extract TODO items.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_phases",
          "docstring": "Extract phase/step items.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_checkboxes",
          "docstring": "Extract checkbox items as tasks.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract surrounding context for a match.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "start",
            "end",
            "context_lines"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_documentation",
          "docstring": "Scan all documentation files for tasks.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_index",
          "docstring": "Generate comprehensive task index.",
          "line_range": null,
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "generate_summary_report",
          "docstring": "Generate human-readable summary report.",
          "line_range": null,
          "parameters": [
            "self",
            "index"
          ],
          "decorators": []
        },
        {
          "name": "save_index",
          "docstring": "Save index and summary to files.",
          "line_range": null,
          "parameters": [
            "self",
            "index",
            "summary",
            "output_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Task",
          "docstring": "Represents a single task or actionable item.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "TaskExtractor",
          "docstring": "Extract tasks from various document formats.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize regex patterns for task extraction.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "extract_from_markdown",
              "docstring": "Extract tasks from markdown file.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_status",
              "docstring": "Extract document status.",
              "line_range": null,
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_priority",
              "docstring": "Extract document priority.",
              "line_range": null,
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_date",
              "docstring": "Extract document date.",
              "line_range": null,
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_epics",
              "docstring": "Extract EPIC items.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_tasks",
              "docstring": "Extract explicit task items.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_todos",
              "docstring": "Extract TODO items.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_phases",
              "docstring": "Extract phase/step items.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_checkboxes",
              "docstring": "Extract checkbox items as tasks.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract surrounding context for a match.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "start",
                "end",
                "context_lines"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TaskIndexGenerator",
          "docstring": "Generate comprehensive task index.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_documentation",
              "docstring": "Scan all documentation files for tasks.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_index",
              "docstring": "Generate comprehensive task index.",
              "line_range": null,
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "generate_summary_report",
              "docstring": "Generate human-readable summary report.",
              "line_range": null,
              "parameters": [
                "self",
                "index"
              ]
            },
            {
              "name": "save_index",
              "docstring": "Save index and summary to files.",
              "line_range": null,
              "parameters": [
                "self",
                "index",
                "summary",
                "output_dir"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "TaskExtractor",
          "Path"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "extract_from_markdown": [
          "tasks.extend",
          "self._extract_epics",
          "self._extract_date",
          "self._extract_phases",
          "self._extract_priority",
          "open",
          "self._extract_todos",
          "logger.error",
          "f.read",
          "self._extract_checkboxes",
          "self._extract_tasks",
          "self._extract_status"
        ],
        "_extract_status": [
          "match.group"
        ],
        "_extract_priority": [
          "match.group"
        ],
        "_extract_date": [
          "datetime.now",
          "match.group"
        ],
        "_extract_epics": [
          "match.group",
          "Task",
          "self._extract_context",
          "match.start",
          "str",
          "tasks.append",
          "match.end"
        ],
        "_extract_tasks": [
          "match.group",
          "Task",
          "self._extract_context",
          "match.start",
          "str",
          "tasks.append",
          "match.end"
        ],
        "_extract_todos": [
          "match.group",
          "Task",
          "str",
          "match.start",
          "tasks.append"
        ],
        "_extract_phases": [
          "match.group",
          "Task",
          "self._extract_context",
          "match.start",
          "str",
          "tasks.append",
          "match.end"
        ],
        "_extract_checkboxes": [
          "match.group",
          "any",
          "task_title.upper",
          "Task",
          "str",
          "match.start",
          "tasks.append"
        ],
        "_extract_context": [
          "min",
          "len",
          "max",
          "context.strip",
          "content.split"
        ],
        "scan_documentation": [
          "all_tasks.extend",
          "docs_dir.exists",
          "docs_dir.glob",
          "logger.info"
        ],
        "generate_index": [
          "by_file.items",
          "len",
          "by_category.items",
          "by_priority.items",
          "asdict",
          "datetime.now",
          "by_status.items"
        ],
        "generate_summary_report": [
          "file_categories.items",
          "Path",
          "status.upper",
          "len",
          "priority.upper",
          "sorted",
          "category.upper"
        ],
        "save_index": [
          "f.write",
          "Path",
          "json.dump",
          "output_path.mkdir",
          "open",
          "logger.info"
        ],
        "main": [
          "by_category.get",
          "generator.generate_summary_report",
          "generator.generate_index",
          "argparse.ArgumentParser",
          "by_status.get",
          "parser.add_argument",
          "print",
          "len",
          "by_category.items",
          "generator.save_index",
          "sorted",
          "parser.parse_args",
          "logger.info",
          "TaskIndexGenerator",
          "generator.scan_documentation",
          "by_status.items"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "fc95861e-898e-43a0-b912-19a500319e96"
    },
    {
      "module_id": "scripts.github_sync_manager_enhanced",
      "path": "scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "module_doc": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout\n\u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442: processing results + GitHub API + token management + CLI fallback",
      "functions": [
        {
          "name": "print_info",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_success",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_warning",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_error",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_step",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "step",
            "total",
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Enhanced CLI interface",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_github_token",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
          "line_range": null,
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "check_gh_cli",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_token_from_gh_cli",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_github_token",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "detect_repo_from_git",
          "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Enhanced API request with CLI fallback",
          "line_range": null,
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_direct",
          "docstring": "Direct API request",
          "line_range": null,
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_via_cli",
          "docstring": "API request via GitHub CLI",
          "line_range": null,
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue_enhanced",
          "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_acceptance_criteria",
          "docstring": "Format acceptance criteria from item metadata",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_implementation_notes",
          "docstring": "Format implementation notes",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Enhanced validation",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_enhanced_sync",
          "docstring": "Enhanced sync with full project rollout integration",
          "line_range": null,
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        },
        {
          "name": "sync_category_enhanced",
          "docstring": "Enhanced category sync",
          "line_range": null,
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced",
          "line_range": null,
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic_enhanced",
          "docstring": "Enhanced epic creation",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion_enhanced",
          "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
          "line_range": null,
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "GitHubTokenManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 GitHub \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 (\u0438\u0437 setup_github_token.sh)",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_env_file",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_github_token",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
              "line_range": null,
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "check_gh_cli",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_token_from_gh_cli",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_github_token",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "EnhancedGitHubSyncManager",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 GitHub Sync Manager \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0432\u0441\u0435\u0445 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "detect_repo_from_git",
              "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Enhanced API request with CLI fallback",
              "line_range": null,
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_direct",
              "docstring": "Direct API request",
              "line_range": null,
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_via_cli",
              "docstring": "API request via GitHub CLI",
              "line_range": null,
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "create_github_issue_enhanced",
              "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_acceptance_criteria",
              "docstring": "Format acceptance criteria from item metadata",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_implementation_notes",
              "docstring": "Format implementation notes",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Enhanced validation",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_enhanced_sync",
              "docstring": "Enhanced sync with full project rollout integration",
              "line_range": null,
              "parameters": [
                "self",
                "categories"
              ]
            },
            {
              "name": "sync_category_enhanced",
              "docstring": "Enhanced category sync",
              "line_range": null,
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced",
              "line_range": null,
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "create_github_epic_enhanced",
              "docstring": "Enhanced epic creation",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion_enhanced",
              "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
              "line_range": null,
              "parameters": [
                "self",
                "item"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "print_info": [
          "print"
        ],
        "print_success": [
          "print"
        ],
        "print_warning": [
          "print"
        ],
        "print_error": [
          "print"
        ],
        "print_step": [
          "print"
        ],
        "__init__": [
          "Path",
          "GitHubTokenManager",
          "print_info",
          "self.load_sync_log",
          "self.detect_repo_from_git"
        ],
        "load_env_file": [
          "value.strip",
          "line.startswith",
          "Path",
          "line.strip",
          "open",
          "line.split",
          "key.strip",
          "env_file.exists"
        ],
        "test_github_token": [
          "response.json",
          "requests.get"
        ],
        "check_gh_cli": [
          "subprocess.run"
        ],
        "get_token_from_gh_cli": [
          "subprocess.run"
        ],
        "get_github_token": [
          "self.check_gh_cli",
          "print_warning",
          "os.getenv",
          "self.test_github_token",
          "self.get_token_from_gh_cli"
        ],
        "detect_repo_from_git": [
          "url.replace",
          "print_warning",
          "url.split",
          "path.split",
          "len",
          "print_info",
          "subprocess.run",
          "url.endswith",
          "url.startswith"
        ],
        "load_sync_log": [
          "open",
          "json.load"
        ],
        "save_sync_log": [
          "json.dump",
          "open"
        ],
        "api_request": [
          "print_error",
          "self._api_request_direct",
          "time.sleep",
          "self._api_request_via_cli"
        ],
        "_api_request_direct": [
          "requests.get",
          "print_warning",
          "int",
          "requests.patch",
          "method.upper",
          "response.raise_for_status",
          "print_error",
          "ValueError",
          "response.json",
          "requests.post"
        ],
        "_api_request_via_cli": [
          "print_warning",
          "method.upper",
          "cmd.extend",
          "subprocess.run",
          "print_error",
          "json.dumps",
          "json.loads"
        ],
        "create_github_issue_enhanced": [
          "self._format_implementation_notes",
          "print_success",
          "self._format_acceptance_criteria",
          "labels.append",
          "print_info",
          "self.api_request",
          "item.get",
          "processing_meta.get"
        ],
        "_format_acceptance_criteria": [
          "criteria.extend",
          "item.get",
          "criteria.append"
        ],
        "_format_implementation_notes": [
          "notes.append",
          "processing_meta.get",
          "item.get"
        ],
        "validate_before_sync": [
          "print_success",
          "file_path.exists",
          "print_step",
          "repo_info.get",
          "self.api_request",
          "print_error",
          "user_info.get"
        ],
        "run_enhanced_sync": [
          "print_success",
          "self.sync_category_enhanced",
          "print_step",
          "datetime.now",
          "print",
          "print_info",
          "result.get",
          "self.validate_before_sync",
          "self.save_sync_log",
          "enumerate"
        ],
        "sync_category_enhanced": [
          "file_path.exists",
          "print_warning",
          "self.create_github_discussion_enhanced",
          "open",
          "print_info",
          "result.get",
          "self.create_github_issue_enhanced",
          "print_error",
          "self.item_already_synced",
          "item.get",
          "self.create_github_epic_enhanced",
          "datetime.now",
          "data.get",
          "json.load"
        ],
        "item_already_synced": [
          "item.get"
        ],
        "create_github_epic_enhanced": [
          "print_success",
          "self.api_request",
          "item.get",
          "print_info"
        ],
        "create_github_discussion_enhanced": [
          "print_warning",
          "item.get",
          "print_info"
        ],
        "main": [
          "EnhancedGitHubSyncManager",
          "print_success",
          "argparse.ArgumentParser",
          "manager.run_enhanced_sync",
          "parser.add_argument",
          "len",
          "result.get",
          "print_error",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ebba57c9-d7c8-49a7-9b3c-c712f547e53c"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "fnmatch.fnmatch",
          "filtered.append"
        ],
        "collect_files": [
          "path.is_file",
          "path.relative_to",
          "files.append",
          "root_dir.rglob",
          "apply_filters",
          "str"
        ],
        "generate_struct": [
          "Path",
          "output_path.open",
          "len",
          "json.dump",
          "logger.info",
          "uuid.uuid4",
          "existing.get",
          "collect_files",
          "output_path.exists",
          "str",
          "json.load"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "f64c92bd-9af3-4fa0-8edc-522996899911"
    },
    {
      "module_id": "scripts.validate_epics",
      "path": "scripts/validate_epics.py",
      "category": "core",
      "module_doc": "Epic Data Validator\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c GitHub issues",
      "functions": [
        {
          "name": "validate_epic_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u044d\u043f\u0438\u043a\u0430",
          "line_range": null,
          "parameters": [
            "epic"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": null,
          "parameters": [
            "task",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "validate_priorities",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u0432",
          "line_range": null,
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_ids",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c ID \u0437\u0430\u0434\u0430\u0447",
          "line_range": null,
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_epic_structure": [
          "errors.append",
          "isinstance"
        ],
        "validate_task_structure": [
          "task.get",
          "errors.append",
          "isinstance"
        ],
        "validate_priorities": [
          "epic.get",
          "data.get",
          "task.get",
          "errors.append"
        ],
        "validate_task_ids": [
          "task.get",
          "set",
          "seen_ids.add",
          "epic.get",
          "data.get",
          "errors.append"
        ],
        "main": [
          "sys.exit",
          "epics_file.exists",
          "validate_epic_structure",
          "all_errors.extend",
          "Path",
          "isinstance",
          "print",
          "len",
          "e.get",
          "open",
          "validate_task_ids",
          "epic.get",
          "validate_task_structure",
          "sum",
          "validate_priorities",
          "all_errors.append",
          "json.load"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "pathlib",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "58d90727-1e39-46f6-a68b-1682a56b9cb1"
    },
    {
      "module_id": "scripts.epic_roadmap_manager",
      "path": "scripts/epic_roadmap_manager.py",
      "category": "core",
      "module_doc": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u0438:\n- \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 roadmap \u0438 \u043f\u043b\u0430\u043d\u043e\u0432\n- \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439\n- \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441 GitHub epics\n- \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u0432",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_roadmap",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_roadmap",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
          "line_range": null,
          "parameters": [
            "self",
            "roadmap"
          ],
          "decorators": []
        },
        {
          "name": "show_overview",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "show_epic_details",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
          "line_range": null,
          "parameters": [
            "self",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
          "line_range": null,
          "parameters": [
            "self",
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "complete_session",
          "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": null,
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EpicRoadmapManager",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_roadmap",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_roadmap",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
              "line_range": null,
              "parameters": [
                "self",
                "roadmap"
              ]
            },
            {
              "name": "show_overview",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "show_epic_details",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
              "line_range": null,
              "parameters": [
                "self",
                "epic_id"
              ]
            },
            {
              "name": "start_session",
              "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
              "line_range": null,
              "parameters": [
                "self",
                "epic_id",
                "session_id"
              ]
            },
            {
              "name": "complete_session",
              "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": null,
              "parameters": [
                "self",
                "session_id"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "load_roadmap": [
          "print",
          "open",
          "json.load"
        ],
        "save_roadmap": [
          "datetime.now",
          "print",
          "json.dump",
          "open"
        ],
        "show_overview": [
          "epics.items",
          "roadmap.get",
          "print",
          "epic.get",
          "stats.get",
          "self.load_roadmap"
        ],
        "show_epic_details": [
          "roadmap.get",
          "print",
          "len",
          "session.get",
          "epic.get",
          "epic_data.get",
          "self.load_roadmap"
        ],
        "start_session": [
          "roadmap.get",
          "sess.get",
          "print",
          "json.dump",
          "session.get",
          "open",
          "epic.get",
          "self.save_roadmap",
          "os.makedirs",
          "epic_data.get",
          "datetime.now",
          "self.load_roadmap"
        ],
        "complete_session": [
          "roadmap.get",
          "all",
          "datetime.now",
          "print",
          "sess.get",
          "json.dump",
          "open",
          "session.get",
          "os.remove",
          "sessions_log.append",
          "epic.get",
          "self.save_roadmap",
          "os.makedirs",
          "current_session.get",
          "self.load_roadmap",
          "json.load"
        ],
        "main": [
          "manager.complete_session",
          "argparse.ArgumentParser",
          "parser.add_argument",
          "print",
          "manager.show_overview",
          "EpicRoadmapManager",
          "parser.parse_args",
          "manager.start_session",
          "manager.show_epic_details"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "4cd95cfc-ff29-4e1a-b9f1-f8647e0a7e95"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.error",
          "validate",
          "logger.warning",
          "RefResolver"
        ],
        "backup_files": [
          "datetime.now",
          "target_dir.exists",
          "shutil.copytree",
          "logger.info"
        ],
        "deploy_embedded_files": [
          "f.write",
          "logger.warning",
          "target_path.open",
          "target_path.exists",
          "Path",
          "json.dump",
          "Path.cwd",
          "logger.info",
          "logger.error",
          "validate_json",
          "EMBEDDED_FILES.get",
          "backup_files"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "67214ea5-20df-4231-a5b9-42a403924dcb"
    },
    {
      "module_id": "scripts.team.__init__",
      "path": "scripts/team/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "ebf4bd34-92ff-4791-8b46-386d0ce8d642"
    },
    {
      "module_id": "llmstruct.workspace",
      "path": "llmstruct/workspace.py",
      "category": "core",
      "module_doc": "Workspace State & Mode Management System\nEnhanced AI-Human Collaboration with Context Boundaries",
      "functions": [
        {
          "name": "create_workspace_manager",
          "docstring": "Factory function to create workspace manager",
          "line_range": null,
          "parameters": [
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_or_create_state",
          "docstring": "Load existing workspace state or create default",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_permission_templates",
          "docstring": "Load permission templates for different modes",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "set_mode",
          "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
          "line_range": null,
          "parameters": [
            "self",
            "modes",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_parse_modes_from_string",
          "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
          "line_range": null,
          "parameters": [
            "self",
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "_combine_mode_permissions",
          "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
          "line_range": null,
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "_get_mode_combination_name",
          "docstring": "Get descriptive name for mode combination",
          "line_range": null,
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "get_current_state",
          "docstring": "Get current workspace state",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "check_permission",
          "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
          "line_range": null,
          "parameters": [
            "self",
            "operation",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "_get_required_capability",
          "docstring": "Map operations to required capabilities",
          "line_range": null,
          "parameters": [
            "self",
            "operation"
          ],
          "decorators": []
        },
        {
          "name": "_is_restricted_target",
          "docstring": "Check if target matches any file restrictions",
          "line_range": null,
          "parameters": [
            "self",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "set_emergency_override",
          "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
          "line_range": null,
          "parameters": [
            "self",
            "level",
            "reason",
            "duration_minutes"
          ],
          "decorators": []
        },
        {
          "name": "_check_emergency_override",
          "docstring": "Check if emergency override is active and not expired",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_strict_mode",
          "docstring": "Integration with existing strict mode system",
          "line_range": null,
          "parameters": [
            "self",
            "strict_tags"
          ],
          "decorators": []
        },
        {
          "name": "add_decision_workflow",
          "docstring": "Add decision to workflow tracking (for [decide] mode)",
          "line_range": null,
          "parameters": [
            "self",
            "decision_id",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "get_workspace_status",
          "docstring": "Get comprehensive workspace status for debugging and display",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_override_time_remaining",
          "docstring": "Get formatted time remaining for emergency override",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_state",
          "docstring": "Save current state to file",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_mode_status",
          "docstring": "Get formatted status string for CLI display",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WorkspaceStateManager",
          "docstring": "Core workspace state management with mode-based permissions and context boundaries.\n\nFeatures:\n- Multi-dimensional mode system ([code][debug], [discuss][meta])\n- Hybrid permission system (capabilities + file restrictions)\n- Smart mode combinations with context awareness\n- Emergency override protocols with time-boxing\n- Integration with existing strict mode system",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "workspace_dir"
              ]
            },
            {
              "name": "_load_or_create_state",
              "docstring": "Load existing workspace state or create default",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_permission_templates",
              "docstring": "Load permission templates for different modes",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "set_mode",
              "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
              "line_range": null,
              "parameters": [
                "self",
                "modes",
                "session_id"
              ]
            },
            {
              "name": "_parse_modes_from_string",
              "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
              "line_range": null,
              "parameters": [
                "self",
                "mode_string"
              ]
            },
            {
              "name": "_combine_mode_permissions",
              "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
              "line_range": null,
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "_get_mode_combination_name",
              "docstring": "Get descriptive name for mode combination",
              "line_range": null,
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "get_current_state",
              "docstring": "Get current workspace state",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "check_permission",
              "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
              "line_range": null,
              "parameters": [
                "self",
                "operation",
                "target"
              ]
            },
            {
              "name": "_get_required_capability",
              "docstring": "Map operations to required capabilities",
              "line_range": null,
              "parameters": [
                "self",
                "operation"
              ]
            },
            {
              "name": "_is_restricted_target",
              "docstring": "Check if target matches any file restrictions",
              "line_range": null,
              "parameters": [
                "self",
                "target"
              ]
            },
            {
              "name": "set_emergency_override",
              "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
              "line_range": null,
              "parameters": [
                "self",
                "level",
                "reason",
                "duration_minutes"
              ]
            },
            {
              "name": "_check_emergency_override",
              "docstring": "Check if emergency override is active and not expired",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_strict_mode",
              "docstring": "Integration with existing strict mode system",
              "line_range": null,
              "parameters": [
                "self",
                "strict_tags"
              ]
            },
            {
              "name": "add_decision_workflow",
              "docstring": "Add decision to workflow tracking (for [decide] mode)",
              "line_range": null,
              "parameters": [
                "self",
                "decision_id",
                "decision_data"
              ]
            },
            {
              "name": "get_workspace_status",
              "docstring": "Get comprehensive workspace status for debugging and display",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_override_time_remaining",
              "docstring": "Get formatted time remaining for emergency override",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_state",
              "docstring": "Save current state to file",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_mode_status",
              "docstring": "Get formatted status string for CLI display",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_or_create_state",
          "self._load_permission_templates",
          "Path"
        ],
        "_load_or_create_state": [
          "datetime.now",
          "self._save_state",
          "open",
          "json.load"
        ],
        "_load_permission_templates": [],
        "set_mode": [
          "isinstance",
          "combined_permissions.get",
          "len",
          "self._get_mode_combination_name",
          "datetime.now",
          "self._parse_modes_from_string",
          "self._combine_mode_permissions",
          "self._save_state"
        ],
        "_parse_modes_from_string": [
          "re.findall"
        ],
        "_combine_mode_permissions": [
          "set",
          "list",
          "template.get",
          "sorted",
          "logger.info"
        ],
        "_get_mode_combination_name": [
          "sorted",
          "combination_names.get"
        ],
        "get_current_state": [],
        "check_permission": [
          "self._is_restricted_target",
          "self._check_emergency_override",
          "permissions.get",
          "self._get_required_capability"
        ],
        "_get_required_capability": [
          "operation.startswith",
          "capability_map.items"
        ],
        "_is_restricted_target": [
          "fnmatch.fnmatch",
          "target.startswith",
          "restriction.startswith"
        ],
        "set_emergency_override": [
          "datetime.now",
          "self._save_state",
          "expires_at.isoformat",
          "timedelta"
        ],
        "_check_emergency_override": [
          "datetime.now",
          "datetime.fromisoformat",
          "self._save_state",
          "override.get"
        ],
        "integrate_strict_mode": [
          "datetime.now",
          "self._save_state"
        ],
        "add_decision_workflow": [
          "datetime.now",
          "self._save_state"
        ],
        "get_workspace_status": [
          "self._get_mode_combination_name",
          "len",
          "self._get_override_time_remaining",
          "override.get"
        ],
        "_get_override_time_remaining": [
          "int",
          "remaining.total_seconds",
          "datetime.fromisoformat",
          "datetime.now",
          "override.get"
        ],
        "_save_state": [
          "json.dump",
          "open"
        ],
        "get_mode_status": [
          "self._get_mode_combination_name",
          "override.get"
        ],
        "create_workspace_manager": [
          "WorkspaceStateManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "Union",
        "datetime",
        "fnmatch",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "timedelta",
        "timezone",
        "typing"
      ],
      "hash": null,
      "artifact_id": "59676ef0-91a7-4c01-b7df-c61296664156"
    },
    {
      "module_id": "llmstruct.cache",
      "path": "llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": null,
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": null,
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "Path",
          "open",
          "logging.info",
          "logging.error",
          "str",
          "content.encode",
          "f.read",
          "json.dumps",
          "json_file.exists",
          "hashlib.sha256"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "logging.error",
          "open",
          "cursor.fetchone",
          "json.load"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "6138549c-367d-4042-9c9f-e9932471c5b7"
    },
    {
      "module_id": "llmstruct.json_selector",
      "path": "llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": null,
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": null,
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "filtered.append",
          "data.get",
          "item.get",
          "isinstance"
        ],
        "select_json": [
          "f.seek",
          "Path",
          "filtered.append",
          "prefix.startswith",
          "ijson.parse",
          "open",
          "current_item.get",
          "logging.error",
          "filter_json",
          "json_file.exists",
          "path.append",
          "json.load"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9c9fdc18-c195-4207-9756-ff4254df1fd0"
    },
    {
      "module_id": "llmstruct.workflow_orchestrator",
      "path": "llmstruct/workflow_orchestrator.py",
      "category": "core",
      "module_doc": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture\nExtends CopilotContextManager and SmartContextOrchestrator instead of duplicating",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface that integrates with existing llmstruct architecture",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root",
            "debug"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_onboarding_guide",
          "docstring": "Generate comprehensive AI onboarding guide using existing architecture",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_project_overview_from_struct",
          "docstring": "Get project overview from struct.json analysis",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_existing_architecture_guide",
          "docstring": "Guide to existing llmstruct architecture",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_copilot_integration_guide",
          "docstring": "Guide for proper CopilotContextManager usage",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_orchestration_guide",
          "docstring": "Guide for SmartContextOrchestrator usage",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_analysis_guide",
          "docstring": "Guide for proper struct.json analysis approach",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_current_context",
          "docstring": "Get comprehensive current context using existing architecture",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_analysis",
          "docstring": "Analyze struct.json for current codebase state",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_architecture_from_struct",
          "docstring": "Analyze architecture patterns from struct.json",
          "line_range": null,
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_function_duplication",
          "docstring": "Analyze function duplication across modules",
          "line_range": null,
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_metrics",
          "docstring": "Calculate complexity metrics from struct.json",
          "line_range": null,
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_score",
          "docstring": "Calculate overall complexity score",
          "line_range": null,
          "parameters": [
            "self",
            "stats"
          ],
          "decorators": []
        },
        {
          "name": "_get_orchestrator_state",
          "docstring": "Get SmartContextOrchestrator state",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_codebase_for_duplicates",
          "docstring": "Analyze codebase for duplicate functions using struct.json (AST/hash analysis by mode).",
          "line_range": null,
          "parameters": [
            "self",
            "deep_duplicates",
            "no_prod_filter"
          ],
          "decorators": []
        },
        {
          "name": "sync_with_existing_architecture",
          "docstring": "Sync with existing llmstruct architecture instead of duplicating",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "create_task",
          "docstring": "Create new task (this is new functionality, not duplication)",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "description",
            "priority",
            "tags",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_active_tasks",
          "docstring": "Get all active tasks",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_json_safe",
          "docstring": "Safe JSON loading with error handling",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_save_json_safe",
          "docstring": "Safe JSON saving with error handling",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_get_active_session_context",
          "docstring": "Get current session context",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_identify_key_components",
          "docstring": "Identify key components from struct analysis",
          "line_range": null,
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_patterns",
          "docstring": "Define workflow patterns that integrate with existing architecture",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_available_commands",
          "docstring": "Available commands that work with existing architecture",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_prod_func",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "paths"
          ],
          "decorators": []
        },
        {
          "name": "is_only_tests_or_archive",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "paths"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskStatus",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "SessionType",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "Task",
          "docstring": "Structured task representation",
          "line_range": null,
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "Session",
          "docstring": "AI work session with context and goals",
          "line_range": null,
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "WorkflowOrchestrator",
          "docstring": "Integration layer that extends existing llmstruct architecture\nUses CopilotContextManager, SmartContextOrchestrator, and struct.json analysis",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root",
                "debug"
              ]
            },
            {
              "name": "get_ai_onboarding_guide",
              "docstring": "Generate comprehensive AI onboarding guide using existing architecture",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_project_overview_from_struct",
              "docstring": "Get project overview from struct.json analysis",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_existing_architecture_guide",
              "docstring": "Guide to existing llmstruct architecture",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_copilot_integration_guide",
              "docstring": "Guide for proper CopilotContextManager usage",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_context_orchestration_guide",
              "docstring": "Guide for SmartContextOrchestrator usage",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_analysis_guide",
              "docstring": "Guide for proper struct.json analysis approach",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_current_context",
              "docstring": "Get comprehensive current context using existing architecture",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_analysis",
              "docstring": "Analyze struct.json for current codebase state",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_architecture_from_struct",
              "docstring": "Analyze architecture patterns from struct.json",
              "line_range": null,
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_analyze_function_duplication",
              "docstring": "Analyze function duplication across modules",
              "line_range": null,
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_calculate_complexity_metrics",
              "docstring": "Calculate complexity metrics from struct.json",
              "line_range": null,
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_calculate_complexity_score",
              "docstring": "Calculate overall complexity score",
              "line_range": null,
              "parameters": [
                "self",
                "stats"
              ]
            },
            {
              "name": "_get_orchestrator_state",
              "docstring": "Get SmartContextOrchestrator state",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_codebase_for_duplicates",
              "docstring": "Analyze codebase for duplicate functions using struct.json (AST/hash analysis by mode).",
              "line_range": null,
              "parameters": [
                "self",
                "deep_duplicates",
                "no_prod_filter"
              ]
            },
            {
              "name": "sync_with_existing_architecture",
              "docstring": "Sync with existing llmstruct architecture instead of duplicating",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "create_task",
              "docstring": "Create new task (this is new functionality, not duplication)",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "description",
                "priority",
                "tags",
                "dependencies"
              ]
            },
            {
              "name": "get_active_tasks",
              "docstring": "Get all active tasks",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_json_safe",
              "docstring": "Safe JSON loading with error handling",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_save_json_safe",
              "docstring": "Safe JSON saving with error handling",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            },
            {
              "name": "_get_active_session_context",
              "docstring": "Get current session context",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_identify_key_components",
              "docstring": "Identify key components from struct analysis",
              "line_range": null,
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_get_workflow_patterns",
              "docstring": "Define workflow patterns that integrate with existing architecture",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_available_commands",
              "docstring": "Available commands that work with existing architecture",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "CopilotContextManager",
          "load_config",
          "Path",
          "print",
          "time.time",
          "str",
          "SmartContextOrchestrator",
          "SystemCapabilityDiscovery",
          "UniversalConverter"
        ],
        "get_ai_onboarding_guide": [
          "self._get_struct_analysis_guide",
          "self._get_project_overview_from_struct",
          "self._get_copilot_integration_guide",
          "self._get_context_orchestration_guide",
          "self._get_existing_architecture_guide",
          "self._get_workflow_patterns",
          "self._get_available_commands"
        ],
        "_get_project_overview_from_struct": [
          "struct_path.exists",
          "struct_data.get",
          "logger.warning",
          "len",
          "open",
          "self._identify_key_components",
          "self._analyze_architecture_from_struct",
          "json.load"
        ],
        "_get_existing_architecture_guide": [],
        "_get_copilot_integration_guide": [],
        "_get_context_orchestration_guide": [],
        "_get_struct_analysis_guide": [],
        "get_current_context": [
          "self._get_active_session_context",
          "logger.warning",
          "self._get_struct_analysis",
          "isinstance",
          "print",
          "time.time",
          "str",
          "self._get_orchestrator_state",
          "self.get_active_tasks"
        ],
        "_get_struct_analysis": [
          "struct_path.exists",
          "struct_data.get",
          "print",
          "time.time",
          "len",
          "open",
          "self._analyze_function_duplication",
          "self._calculate_complexity_metrics",
          "str",
          "logger.error",
          "self._analyze_architecture_from_struct",
          "json.load"
        ],
        "_analyze_architecture_from_struct": [
          "struct_data.get",
          "directories.keys",
          "Path",
          "len",
          "list",
          "directories.items"
        ],
        "_analyze_function_duplication": [
          "module.get",
          "len",
          "struct_data.get",
          "function_names.items"
        ],
        "_calculate_complexity_metrics": [
          "struct_data.get",
          "round",
          "len",
          "self._calculate_complexity_score",
          "stats.get",
          "sum",
          "m.get"
        ],
        "_calculate_complexity_score": [
          "stats.get",
          "round"
        ],
        "_get_orchestrator_state": [
          "str"
        ],
        "analyze_codebase_for_duplicates": [
          "hashlib.md5",
          "ast.dump",
          "self._get_struct_analysis",
          "all_func_bodies.append",
          "print",
          "time.time",
          "struct_analysis.get",
          "func.get",
          "module.get",
          "ast.parse"
        ],
        "is_prod_func": [
          "p.split",
          "any",
          "set"
        ],
        "is_only_tests_or_archive": [
          "p.split",
          "all",
          "set"
        ],
        "sync_with_existing_architecture": [
          "logger.error",
          "open",
          "str",
          "json.dump"
        ],
        "create_task": [
          "self._save_json_safe",
          "logger.info",
          "uuid.uuid4",
          "self._load_json_safe",
          "asdict",
          "Task",
          "str"
        ],
        "get_active_tasks": [
          "t.get",
          "self._load_json_safe"
        ],
        "_load_json_safe": [
          "logger.error",
          "file_path.exists",
          "open",
          "json.load"
        ],
        "_save_json_safe": [
          "logger.error",
          "json.dump",
          "open"
        ],
        "_get_active_session_context": [
          "asdict"
        ],
        "_identify_key_components": [
          "module.get",
          "struct_data.get",
          "len",
          "key_components.append"
        ],
        "_get_workflow_patterns": [],
        "_get_available_commands": [],
        "main": [
          "orchestrator.analyze_codebase_for_duplicates",
          "argparse.ArgumentParser",
          "orchestrator.get_ai_onboarding_guide",
          "orchestrator.sync_with_existing_architecture",
          "parser.add_argument",
          "print",
          "results.items",
          "len",
          "parser.parse_args",
          "WorkflowOrchestrator",
          "context.get",
          "json.dumps",
          "orchestrator.get_current_context",
          "getattr"
        ]
      },
      "dependencies": [
        "Any",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "SystemCapabilityDiscovery",
        "Union",
        "UniversalConverter",
        "ai_self_awareness",
        "argparse",
        "asdict",
        "ast",
        "context_orchestrator",
        "copilot",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "get_cache_config",
        "get_context_config",
        "get_context_file_path",
        "get_copilot_config",
        "get_exclude_dirs",
        "get_exclude_patterns",
        "get_include_patterns",
        "get_max_file_size",
        "get_queue_config",
        "get_struct_file_path",
        "hashlib",
        "json",
        "llmstruct.modules.cli.utils",
        "load_config",
        "logging",
        "os",
        "parsers.universal_converter",
        "pathlib",
        "save_config",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "26675723-933c-4c10-95e3-a4e91e0089b8"
    },
    {
      "module_id": "llmstruct.gh_view",
      "path": "llmstruct/gh_view.py",
      "category": "core",
      "module_doc": "GitHub visualization/graph feature (gh-view-v1)\nExport consolidated tasks/ideas from JSON files to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for GitHub Projects export",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize exporter with configuration",
          "line_range": null,
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from TOML file",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_mapping",
          "docstring": "Load existing ID mapping between local and GitHub",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_mapping",
          "docstring": "Save ID mapping to file",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_run_gh_command",
          "docstring": "Run GitHub CLI command and return success status and output",
          "line_range": null,
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "load_official_data",
          "docstring": "Load tasks and ideas from official JSON files",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "format_task_for_github",
          "docstring": "Format task data for GitHub Project card",
          "line_range": null,
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "format_idea_for_github",
          "docstring": "Format idea data for GitHub Project card",
          "line_range": null,
          "parameters": [
            "self",
            "idea"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExporter",
          "docstring": "Export tasks and ideas to GitHub Projects as cards",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize exporter with configuration",
              "line_range": null,
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from TOML file",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_mapping",
              "docstring": "Load existing ID mapping between local and GitHub",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_mapping",
              "docstring": "Save ID mapping to file",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_run_gh_command",
              "docstring": "Run GitHub CLI command and return success status and output",
              "line_range": null,
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "load_official_data",
              "docstring": "Load tasks and ideas from official JSON files",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "format_task_for_github",
              "docstring": "Format task data for GitHub Project card",
              "line_range": null,
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "format_idea_for_github",
              "docstring": "Format idea data for GitHub Project card",
              "line_range": null,
              "parameters": [
                "self",
                "idea"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_mapping",
          "Path",
          "self._load_config"
        ],
        "_load_config": [
          "toml.load",
          "config.get",
          "open",
          "print"
        ],
        "_load_mapping": [
          "open",
          "json.load"
        ],
        "_save_mapping": [
          "print",
          "json.dump",
          "open"
        ],
        "_run_gh_command": [
          "subprocess.run"
        ],
        "load_official_data": [
          "ideas_data.get",
          "print",
          "tasks_data.get",
          "len",
          "open",
          "ideas_file.exists",
          "tasks_file.exists",
          "json.load"
        ],
        "format_task_for_github": [
          "status_map.get",
          "task.get",
          "body_parts.append"
        ],
        "format_idea_for_github": [
          "status_map.get",
          "body_parts.append",
          "idea.get"
        ],
        "main": [
          "sys.exit",
          "GitHubProjectsExporter",
          "exporter.format_task_for_github",
          "print",
          "len",
          "exporter.load_official_data",
          "exporter.format_idea_for_github"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "pathlib",
        "subprocess",
        "sys",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c1b21cc2-959a-495f-9758-b33bb0c07960"
    },
    {
      "module_id": "llmstruct.self_run",
      "path": "llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "isinstance",
          "prompt.lower",
          "any",
          "filter_json",
          "item.get",
          "str",
          "struct.get",
          "module.get"
        ],
        "attach_to_llm_request": [
          "Path",
          "context_file.exists",
          "prompt.lower",
          "cache.get_full_json",
          "filter_struct",
          "filter_json",
          "cache.cache_json",
          "select_json",
          "logging.info",
          "cache.get_metadata",
          "logging.error",
          "json.dumps"
        ]
      },
      "dependencies": [
        "Any",
        "JSONCache",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "5573a026-5549-4e99-b3ef-208f53e01108"
    },
    {
      "module_id": "llmstruct.copilot",
      "path": "llmstruct/copilot.py",
      "category": "core",
      "module_doc": "LLMStruct Copilot Integration Module\nProvides context-aware development assistance with hybrid copilot capabilities.",
      "functions": [
        {
          "name": "initialize_copilot",
          "docstring": "Initialize copilot context manager for the project.\n\nArgs:\n    project_root: Project root directory\n\nReturns:\n    Configured CopilotContextManager instance",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "trigger_copilot_event",
          "docstring": "Trigger a copilot event and get relevant context.\n\nArgs:\n    manager: CopilotContextManager instance\n    event_type: Type of event\n    file_path: Optional file path\n    **kwargs: Additional event metadata\n\nReturns:\n    Dict with event context",
          "line_range": null,
          "parameters": [
            "manager",
            "event_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "smart_suggest",
          "docstring": "Get smart suggestions based on query and context.\n\nArgs:\n    manager: CopilotContextManager instance\n    query: Query string\n    context: Context type (code, workflow, task, etc.)\n\nReturns:\n    List of suggestions",
          "line_range": null,
          "parameters": [
            "manager",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context_for_scenario",
          "docstring": "Get optimized context for specific scenario - standalone function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": null,
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
          "line_range": null,
          "parameters": [
            "self",
            "project_root",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load copilot configuration from JSON file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_layers",
          "docstring": "Initialize context layers from configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_context_layer",
          "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
          "line_range": null,
          "parameters": [
            "self",
            "layer_name",
            "force"
          ],
          "decorators": []
        },
        {
          "name": "unload_context_layer",
          "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
          "line_range": null,
          "parameters": [
            "self",
            "layer_name"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": null,
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_context",
          "docstring": "Fallback to legacy context loading.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_vscode",
          "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_event",
          "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
          "line_range": null,
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_event_context",
          "docstring": "Legacy event context loading as fallback.",
          "line_range": null,
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "suggest_completion",
          "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
          "line_range": null,
          "parameters": [
            "self",
            "current_code",
            "file_path",
            "cursor_position"
          ],
          "decorators": []
        },
        {
          "name": "validate_change",
          "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "change_type"
          ],
          "decorators": []
        },
        {
          "name": "_matches_scope",
          "docstring": "Check if file matches scope pattern.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "scope"
          ],
          "decorators": []
        },
        {
          "name": "_matches_trigger",
          "docstring": "Check if change type matches trigger.",
          "line_range": null,
          "parameters": [
            "self",
            "change_type",
            "trigger"
          ],
          "decorators": []
        },
        {
          "name": "_validate_json_schema",
          "docstring": "Validate JSON file against schema.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_check_circular_dependencies",
          "docstring": "Check for circular dependencies.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_validate_task_references",
          "docstring": "Validate task references in tasks.json.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
          "line_range": null,
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "refresh_all_contexts",
          "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_status",
          "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "export_context",
          "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
          "line_range": null,
          "parameters": [
            "self",
            "layers",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Clean up resources.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextLayer",
          "docstring": "Context layer priorities for copilot integration.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AttachMode",
          "docstring": "Context attachment modes.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLayerConfig",
          "docstring": "Configuration for a context layer.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotEvent",
          "docstring": "Represents a copilot event for context triggering.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotContextManager",
          "docstring": "Manages context layers and integration with GitHub Copilot.\nProvides intelligent context loading and workflow assistance.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
              "line_range": null,
              "parameters": [
                "self",
                "project_root",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load copilot configuration from JSON file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_initialize_layers",
              "docstring": "Initialize context layers from configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_context_layer",
              "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
              "line_range": null,
              "parameters": [
                "self",
                "layer_name",
                "force"
              ]
            },
            {
              "name": "unload_context_layer",
              "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
              "line_range": null,
              "parameters": [
                "self",
                "layer_name"
              ]
            },
            {
              "name": "get_optimized_context",
              "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
              "line_range": null,
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "max_tokens"
              ]
            },
            {
              "name": "_get_legacy_context",
              "docstring": "Fallback to legacy context loading.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_vscode",
              "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_context_for_event",
              "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
              "line_range": null,
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_get_legacy_event_context",
              "docstring": "Legacy event context loading as fallback.",
              "line_range": null,
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "suggest_completion",
              "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
              "line_range": null,
              "parameters": [
                "self",
                "current_code",
                "file_path",
                "cursor_position"
              ]
            },
            {
              "name": "validate_change",
              "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "change_type"
              ]
            },
            {
              "name": "_matches_scope",
              "docstring": "Check if file matches scope pattern.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "scope"
              ]
            },
            {
              "name": "_matches_trigger",
              "docstring": "Check if change type matches trigger.",
              "line_range": null,
              "parameters": [
                "self",
                "change_type",
                "trigger"
              ]
            },
            {
              "name": "_validate_json_schema",
              "docstring": "Validate JSON file against schema.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_check_circular_dependencies",
              "docstring": "Check for circular dependencies.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_validate_task_references",
              "docstring": "Validate task references in tasks.json.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
              "line_range": null,
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "refresh_all_contexts",
              "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_status",
              "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "export_context",
              "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
              "line_range": null,
              "parameters": [
                "self",
                "layers",
                "format"
              ]
            },
            {
              "name": "close",
              "docstring": "Clean up resources.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config",
          "os.getcwd",
          "JSONCache",
          "str",
          "create_context_orchestrator",
          "self._initialize_layers"
        ],
        "_load_config": [
          "logger.warning",
          "Path",
          "open",
          "logger.info",
          "logger.error",
          "json.load"
        ],
        "_initialize_layers": [
          "layers_config.items",
          "ContextLayerConfig",
          "layer_config.get"
        ],
        "load_context_layer": [
          "source_path.exists",
          "logger.warning",
          "time.time",
          "open",
          "logger.info",
          "logger.error",
          "logger.debug",
          "json.load"
        ],
        "unload_context_layer": [
          "logger.info"
        ],
        "get_optimized_context": [
          "scenario_mapping.get",
          "self._get_legacy_context",
          "logger.error"
        ],
        "_get_legacy_context": [
          "self.load_context_layer"
        ],
        "get_context_for_vscode": [
          "self.get_optimized_context"
        ],
        "get_context_for_event": [
          "scenario_mapping.get",
          "self.get_optimized_context",
          "logger.error",
          "self._get_legacy_event_context"
        ],
        "_get_legacy_event_context": [
          "self.load_context_layer",
          "source_path.exists",
          "file_triggers.get",
          "open",
          "code_triggers.get",
          "logger.error",
          "workflow_triggers.get",
          "triggers.get",
          "json.load"
        ],
        "suggest_completion": [
          "self.load_context_layer",
          "current_module.get",
          "suggestions.append",
          "Path",
          "str",
          "func.get",
          "module.get",
          "struct_context.get"
        ],
        "validate_change": [
          "self._matches_trigger",
          "self._validate_task_references",
          "len",
          "self._check_circular_dependencies",
          "safety_features.get",
          "result.get",
          "self._validate_json_schema",
          "self._matches_scope",
          "rule.get"
        ],
        "_matches_scope": [
          "fnmatch",
          "str",
          "Path"
        ],
        "_matches_trigger": [
          "trigger_map.get"
        ],
        "_validate_json_schema": [
          "json.load",
          "open",
          "file_path.endswith"
        ],
        "_check_circular_dependencies": [
          "self.load_context_layer",
          "struct_data.get",
          "Path",
          "len",
          "str",
          "module.get"
        ],
        "_validate_task_references": [
          "task.get",
          "set",
          "tasks_data.get",
          "open",
          "task_ids.add",
          "file_path.endswith",
          "json.load"
        ],
        "get_workflow_suggestions": [
          "self.load_context_layer",
          "workflows.items",
          "suggestions.append",
          "suggestions.extend",
          "workflow.get",
          "command.lower"
        ],
        "refresh_all_contexts": [
          "self.load_context_layer",
          "list",
          "logger.info"
        ],
        "get_context_status": [
          "list"
        ],
        "export_context": [
          "str",
          "list",
          "json.dumps"
        ],
        "close": [
          "hasattr",
          "logger.info"
        ],
        "initialize_copilot": [
          "CopilotContextManager"
        ],
        "trigger_copilot_event": [
          "manager.get_context_for_event",
          "CopilotEvent"
        ],
        "smart_suggest": [
          "manager.get_workflow_suggestions"
        ],
        "get_optimized_context_for_scenario": [
          "initialize_copilot",
          "manager.get_optimized_context",
          "locals",
          "manager.close"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "Union",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "fnmatch",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ca812d5d-dfa4-4621-ab60-7d1299cfc0d7"
    },
    {
      "module_id": "llmstruct.ai_workflow_middleware",
      "path": "llmstruct/ai_workflow_middleware.py",
      "category": "core",
      "module_doc": "AI Workflow Middleware - Forces AI Integration with LLMStruct\nIntercepts all AI requests and ensures they go through our orchestration system.",
      "functions": [
        {
          "name": "initialize_ai_middleware",
          "docstring": "Initialize global AI middleware.",
          "line_range": null,
          "parameters": [
            "project_root",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_middleware",
          "docstring": "Get current AI middleware instance.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "process_ai_query",
          "docstring": "Global function to process AI queries through middleware.",
          "line_range": null,
          "parameters": [
            "query",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "ensure_llmstruct_integration",
          "docstring": "Decorator that ensures function uses llmstruct system.",
          "line_range": null,
          "parameters": [
            "func"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "_load_middleware_config",
          "docstring": "Load middleware configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_ai_request",
          "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration",
          "line_range": null,
          "parameters": [
            "self",
            "raw_query",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_parse_ai_request",
          "docstring": "Parse raw query into structured AI request.",
          "line_range": null,
          "parameters": [
            "self",
            "raw_query"
          ],
          "decorators": []
        },
        {
          "name": "_should_use_llmstruct",
          "docstring": "Determine if request should use llmstruct system.",
          "line_range": null,
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_process_with_llmstruct",
          "docstring": "Process request through full llmstruct system.",
          "line_range": null,
          "parameters": [
            "self",
            "request",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_process_bypass",
          "docstring": "Process request without llmstruct system.",
          "line_range": null,
          "parameters": [
            "self",
            "request",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_optimize_context",
          "docstring": "Optimize context using orchestrator.",
          "line_range": null,
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_ai_delegation",
          "docstring": "Analyze which AI should handle this request.",
          "line_range": null,
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_context",
          "docstring": "Get enhanced context with project awareness.",
          "line_range": null,
          "parameters": [
            "self",
            "request",
            "context_result"
          ],
          "decorators": []
        },
        {
          "name": "_get_capability_summary",
          "docstring": "Get current system capabilities.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_generate_usage_guidance",
          "docstring": "Generate guidance for AI on how to use llmstruct system.",
          "line_range": null,
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_map_tags_to_scenario",
          "docstring": "Map context tags to orchestrator scenarios.",
          "line_range": null,
          "parameters": [
            "self",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "_default_ai_processing",
          "docstring": "Default AI processing when no custom handler provided.",
          "line_range": null,
          "parameters": [
            "self",
            "request",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_middleware_stats",
          "docstring": "Get middleware usage statistics.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "force_llmstruct_mode",
          "docstring": "Force all future requests to use llmstruct system.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enable_guidance_mode",
          "docstring": "Enable guided mode with llmstruct suggestions.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "wrapper",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AIWorkflowMode",
          "docstring": "AI workflow enforcement modes.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AIRequest",
          "docstring": "Standardized AI request structure.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "AIResponse",
          "docstring": "Standardized AI response structure.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "AIWorkflowMiddleware",
          "docstring": "Middleware that ensures ALL AI interactions go through LLMStruct system.\nThis solves the problem of AI not using its own infrastructure.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root",
                "mode"
              ]
            },
            {
              "name": "_load_middleware_config",
              "docstring": "Load middleware configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_ai_request",
              "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration",
              "line_range": null,
              "parameters": [
                "self",
                "raw_query",
                "ai_handler"
              ]
            },
            {
              "name": "_parse_ai_request",
              "docstring": "Parse raw query into structured AI request.",
              "line_range": null,
              "parameters": [
                "self",
                "raw_query"
              ]
            },
            {
              "name": "_should_use_llmstruct",
              "docstring": "Determine if request should use llmstruct system.",
              "line_range": null,
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_process_with_llmstruct",
              "docstring": "Process request through full llmstruct system.",
              "line_range": null,
              "parameters": [
                "self",
                "request",
                "ai_handler"
              ]
            },
            {
              "name": "_process_bypass",
              "docstring": "Process request without llmstruct system.",
              "line_range": null,
              "parameters": [
                "self",
                "request",
                "ai_handler"
              ]
            },
            {
              "name": "_optimize_context",
              "docstring": "Optimize context using orchestrator.",
              "line_range": null,
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_analyze_ai_delegation",
              "docstring": "Analyze which AI should handle this request.",
              "line_range": null,
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_get_enhanced_context",
              "docstring": "Get enhanced context with project awareness.",
              "line_range": null,
              "parameters": [
                "self",
                "request",
                "context_result"
              ]
            },
            {
              "name": "_get_capability_summary",
              "docstring": "Get current system capabilities.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_generate_usage_guidance",
              "docstring": "Generate guidance for AI on how to use llmstruct system.",
              "line_range": null,
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_map_tags_to_scenario",
              "docstring": "Map context tags to orchestrator scenarios.",
              "line_range": null,
              "parameters": [
                "self",
                "tags"
              ]
            },
            {
              "name": "_default_ai_processing",
              "docstring": "Default AI processing when no custom handler provided.",
              "line_range": null,
              "parameters": [
                "self",
                "request",
                "context"
              ]
            },
            {
              "name": "get_middleware_stats",
              "docstring": "Get middleware usage statistics.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "force_llmstruct_mode",
              "docstring": "Force all future requests to use llmstruct system.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enable_guidance_mode",
              "docstring": "Enable guided mode with llmstruct suggestions.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_middleware_config",
          "Path",
          "logger.info",
          "str",
          "create_context_orchestrator",
          "SystemCapabilityDiscovery",
          "CursorAIBridge"
        ],
        "_load_middleware_config": [
          "config_path.exists",
          "open",
          "json.load"
        ],
        "process_ai_request": [
          "self._parse_ai_request",
          "self._should_use_llmstruct",
          "time.time",
          "self._process_with_llmstruct",
          "AIResponse",
          "str",
          "logger.error",
          "self._process_bypass"
        ],
        "_parse_ai_request": [
          "re.sub",
          "AIRequest",
          "time.time",
          "context_tags.extend",
          "re.findall"
        ],
        "_should_use_llmstruct": [],
        "_process_with_llmstruct": [
          "self._analyze_ai_delegation",
          "self._default_ai_processing",
          "time.time",
          "self._get_enhanced_context",
          "AIResponse",
          "self._optimize_context",
          "ai_handler",
          "enhanced_context.get"
        ],
        "_process_bypass": [
          "ai_handler",
          "AIResponse"
        ],
        "_optimize_context": [
          "len",
          "self._map_tags_to_scenario",
          "context.get",
          "str",
          "logger.error"
        ],
        "_analyze_ai_delegation": [
          "logger.error",
          "delegation.get",
          "str"
        ],
        "_get_enhanced_context": [
          "self._generate_usage_guidance",
          "self._get_capability_summary"
        ],
        "_get_capability_summary": [
          "str"
        ],
        "_generate_usage_guidance": [
          "guidance.append"
        ],
        "_map_tags_to_scenario": [],
        "_default_ai_processing": [],
        "get_middleware_stats": [],
        "force_llmstruct_mode": [
          "logger.info"
        ],
        "enable_guidance_mode": [
          "logger.info"
        ],
        "initialize_ai_middleware": [
          "AIWorkflowMiddleware"
        ],
        "get_ai_middleware": [],
        "process_ai_query": [
          "_middleware_instance.process_ai_request",
          "RuntimeError"
        ],
        "ensure_llmstruct_integration": [],
        "wrapper": [
          "kwargs.get",
          "middleware.process_ai_request",
          "logger.warning",
          "get_ai_middleware",
          "str",
          "func"
        ]
      },
      "dependencies": [
        "Any",
        "Callable",
        "CursorAIBridge",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.context_orchestrator",
        "llmstruct.cursor_ai_bridge",
        "logging",
        "pathlib",
        "re",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "37b1020a-ca7a-4e57-b142-6b6d604aaff1"
    },
    {
      "module_id": "llmstruct.ai_cli_integration",
      "path": "llmstruct/ai_cli_integration.py",
      "category": "core",
      "module_doc": "AI Self-Awareness CLI Integration Module\nIntegrates unused CLI functions into the AI self-awareness system.",
      "functions": [
        {
          "name": "create_ai_cli_integration",
          "docstring": "Factory function to create AI CLI integration instance.",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_enhanced_cli_summary",
          "docstring": "Get a formatted summary of AI CLI integration capabilities.",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI integration system.",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_discover_available_commands",
          "docstring": "Discover which unused CLI commands are available for integration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_status_command",
          "docstring": "Integrate cmd_status for real-time AI system status awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_audit_command",
          "docstring": "Integrate cmd_audit for system health analysis awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_context_command",
          "docstring": "Integrate cmd_context for context mode awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_queue_command",
          "docstring": "Integrate cmd_queue for workflow queue monitoring.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_integration_summary",
          "docstring": "Get summary of CLI command integrations for AI awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_ai_enhancement_impact",
          "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_status",
          "docstring": "Create fallback status information if cmd_status is not available.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_audit",
          "docstring": "Create fallback audit information if cmd_audit is not available.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_context",
          "docstring": "Create fallback context information if cmd_context is not available.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_queue",
          "docstring": "Create fallback queue information if cmd_queue is not available.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AISelfAwarenessCLIIntegration",
          "docstring": "Integrates unused CLI functions to enhance AI self-awareness capabilities.\nTransforms 21 unused CLI commands into useful AI interaction tools.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI integration system.",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_discover_available_commands",
              "docstring": "Discover which unused CLI commands are available for integration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_status_command",
              "docstring": "Integrate cmd_status for real-time AI system status awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_audit_command",
              "docstring": "Integrate cmd_audit for system health analysis awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_context_command",
              "docstring": "Integrate cmd_context for context mode awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_queue_command",
              "docstring": "Integrate cmd_queue for workflow queue monitoring.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_integration_summary",
              "docstring": "Get summary of CLI command integrations for AI awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_ai_enhancement_impact",
              "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_status",
              "docstring": "Create fallback status information if cmd_status is not available.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_audit",
              "docstring": "Create fallback audit information if cmd_audit is not available.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_context",
              "docstring": "Create fallback context information if cmd_context is not available.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_queue",
              "docstring": "Create fallback queue information if cmd_queue is not available.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._discover_available_commands",
          "Path"
        ],
        "_discover_available_commands": [
          "logger.error",
          "getattr",
          "unused_command_mapping.items",
          "hasattr"
        ],
        "integrate_ai_status_command": [
          "logger.error",
          "self._create_fallback_status",
          "cmd_status",
          "str"
        ],
        "integrate_ai_audit_command": [
          "logger.error",
          "self._create_fallback_audit",
          "str",
          "cmd_audit"
        ],
        "integrate_ai_context_command": [
          "self._create_fallback_context",
          "cmd_context",
          "logger.error",
          "str"
        ],
        "integrate_ai_queue_command": [
          "logger.error",
          "self._create_fallback_queue",
          "str",
          "cmd_queue"
        ],
        "get_integration_summary": [
          "cmd.get",
          "self._calculate_ai_enhancement_impact",
          "len",
          "sum",
          "info.get"
        ],
        "_calculate_ai_enhancement_impact": [
          "enhanced_categories.append",
          "capability_categories.items",
          "len",
          "any",
          "info.get"
        ],
        "_create_fallback_status": [
          "str"
        ],
        "_create_fallback_audit": [
          "str"
        ],
        "_create_fallback_context": [],
        "_create_fallback_queue": [],
        "create_ai_cli_integration": [
          "AISelfAwarenessCLIIntegration"
        ],
        "get_ai_enhanced_cli_summary": [
          "integration.integrate_ai_context_command",
          "integration.integrate_ai_queue_command",
          "integration.integrate_ai_audit_command",
          "integration.integrate_ai_status_command",
          "integration.get_integration_summary",
          "create_ai_cli_integration"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "cli_commands",
        "json",
        "llmstruct",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "e77e5fdf-77da-48bc-beb2-0574bd3aa4f5"
    },
    {
      "module_id": "llmstruct.cursor_integration",
      "path": "llmstruct/cursor_integration.py",
      "category": "core",
      "module_doc": "Cursor IDE Integration Module\nProvides seamless integration between llmstruct AI capabilities and Cursor IDE.",
      "functions": [
        {
          "name": "create_cursor_integration",
          "docstring": "Create a Cursor integration manager for the project.",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_optimized_context",
          "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
          "line_range": null,
          "parameters": [
            "self",
            "query_type",
            "file_context"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": null,
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": null,
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "delegate_to_optimal_ai",
          "docstring": "Route tasks to best AI model based on preferences.",
          "line_range": null,
          "parameters": [
            "self",
            "task_type",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_delegation_confidence",
          "docstring": "Calculate confidence in AI delegation decision.",
          "line_range": null,
          "parameters": [
            "self",
            "task_type",
            "selected_ai"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals.",
          "line_range": null,
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "get_priority_guidance",
          "docstring": "Provide priority guidance based on business objectives.",
          "line_range": null,
          "parameters": [
            "self",
            "feature_options"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_feature_score",
          "docstring": "Calculate priority score for a feature.",
          "line_range": null,
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_get_scoring_reasoning",
          "docstring": "Get reasoning for feature scoring.",
          "line_range": null,
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "Start a new Cursor session.",
          "line_range": null,
          "parameters": [
            "self",
            "session_id",
            "user_preferences"
          ],
          "decorators": []
        },
        {
          "name": "save_session_context",
          "docstring": "Save important context for next session.",
          "line_range": null,
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load context from previous sessions.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_cursor_response",
          "docstring": "Get comprehensive response optimized for Cursor.",
          "line_range": null,
          "parameters": [
            "self",
            "query",
            "file_context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorSession",
          "docstring": "Represents a Cursor IDE session with context and preferences.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "CursorContextManager",
          "docstring": "Manages context optimization specifically for Cursor interactions.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_cursor_optimized_context",
              "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
              "line_range": null,
              "parameters": [
                "self",
                "query_type",
                "file_context"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": null,
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": null,
              "parameters": [
                "self",
                "data"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorMultiAIOrchestrator",
          "docstring": "Coordinates different AI models through Cursor interface.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "delegate_to_optimal_ai",
              "docstring": "Route tasks to best AI model based on preferences.",
              "line_range": null,
              "parameters": [
                "self",
                "task_type",
                "context"
              ]
            },
            {
              "name": "_calculate_delegation_confidence",
              "docstring": "Calculate confidence in AI delegation decision.",
              "line_range": null,
              "parameters": [
                "self",
                "task_type",
                "selected_ai"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "PersonalPlanningCursorBridge",
          "docstring": "Bridge between personal planning and Cursor without exposing sensitive data.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals.",
              "line_range": null,
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "get_priority_guidance",
              "docstring": "Provide priority guidance based on business objectives.",
              "line_range": null,
              "parameters": [
                "self",
                "feature_options"
              ]
            },
            {
              "name": "_calculate_feature_score",
              "docstring": "Calculate priority score for a feature.",
              "line_range": null,
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_get_scoring_reasoning",
              "docstring": "Get reasoning for feature scoring.",
              "line_range": null,
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorSessionManager",
          "docstring": "Maintains context across Cursor sessions for better continuity.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "start_session",
              "docstring": "Start a new Cursor session.",
              "line_range": null,
              "parameters": [
                "self",
                "session_id",
                "user_preferences"
              ]
            },
            {
              "name": "save_session_context",
              "docstring": "Save important context for next session.",
              "line_range": null,
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load context from previous sessions.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorIntegrationManager",
          "docstring": "Main integration manager that coordinates all Cursor-specific features.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_comprehensive_cursor_response",
              "docstring": "Get comprehensive response optimized for Cursor.",
              "line_range": null,
              "parameters": [
                "self",
                "query",
                "file_context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "PersonalPlanningCursorBridge",
          "CursorContextManager",
          "CursorMultiAIOrchestrator",
          "CursorSessionManager",
          "SystemCapabilityDiscovery"
        ],
        "get_cursor_optimized_context": [
          "self._apply_privacy_filter",
          "file_path.exists",
          "open",
          "context_rules.get",
          "optimal_config.get",
          "logger.error",
          "str",
          "json.load"
        ],
        "_load_cursor_config": [
          "config_path.exists",
          "Path",
          "open",
          "logger.error",
          "json.load"
        ],
        "_apply_privacy_filter": [
          "self._filter_sensitive_dict",
          "context_data.items",
          "isinstance"
        ],
        "_filter_sensitive_dict": [
          "isinstance",
          "any",
          "key.lower",
          "self._filter_sensitive_dict",
          "data.items"
        ],
        "delegate_to_optimal_ai": [
          "Path",
          "delegation_rules.get",
          "str",
          "self._calculate_delegation_confidence",
          "logger.error"
        ],
        "_calculate_delegation_confidence": [
          "delegation_rules.get"
        ],
        "get_goal_aligned_suggestions": [
          "logger.error",
          "technical_context.lower",
          "suggestions.extend",
          "any"
        ],
        "get_priority_guidance": [
          "scored_features.sort",
          "self._get_scoring_reasoning",
          "logger.error",
          "decision_guidance.get",
          "scored_features.append",
          "str",
          "self._calculate_feature_score"
        ],
        "_calculate_feature_score": [
          "float",
          "feature.lower",
          "any",
          "prioritization.get"
        ],
        "_get_scoring_reasoning": [
          "reasons.append",
          "feature.lower",
          "any"
        ],
        "_load_personal_bridge": [
          "logger.error",
          "open",
          "bridge_path.exists",
          "json.load"
        ],
        "start_session": [
          "logger.error",
          "previous_context.get",
          "self._load_session_context",
          "CursorSession"
        ],
        "save_session_context": [
          "Path",
          "session_data.get",
          "json.dump",
          "open",
          "str",
          "logger.error"
        ],
        "_load_session_context": [
          "logger.error",
          "open",
          "json.load"
        ],
        "get_comprehensive_cursor_response": [
          "logger.error",
          "str"
        ],
        "create_cursor_integration": [
          "CursorIntegrationManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.context_orchestrator",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c18b58d0-6b95-438e-bc55-edd6e6d5c83b"
    },
    {
      "module_id": "llmstruct.grok",
      "path": "llmstruct/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "prompt.split",
          "len",
          "response.json",
          "response.raise_for_status"
        ],
        "test_grok": [
          "GrokClient",
          "time.perf_counter",
          "client.generate"
        ]
      },
      "dependencies": [
        "requests",
        "time"
      ],
      "hash": null,
      "artifact_id": "2111fb2d-b84a-4d16-a3b0-bbd360bfa4c0"
    },
    {
      "module_id": "llmstruct.transpiler",
      "path": "llmstruct/transpiler.py",
      "category": "core",
      "module_doc": "AI-Powered Universal Transpiler\nConverts entire codebases from one language to another using LLM analysis",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for AI transpiler",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "analyze_source_project",
          "docstring": "Analyze source project structure",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "create_target_project_structure",
          "docstring": "Create target project directory structure",
          "line_range": null,
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_generate_structure_info",
          "docstring": "Generate structure information for README",
          "line_range": null,
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "transpile_module",
          "docstring": "Transpile a single module using AI",
          "line_range": null,
          "parameters": [
            "self",
            "module",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_format_functions",
          "docstring": "Format functions for prompt",
          "line_range": null,
          "parameters": [
            "self",
            "functions"
          ],
          "decorators": []
        },
        {
          "name": "_format_classes",
          "docstring": "Format classes for prompt",
          "line_range": null,
          "parameters": [
            "self",
            "classes"
          ],
          "decorators": []
        },
        {
          "name": "determine_target_path",
          "docstring": "Determine target file path for transpiled module",
          "line_range": null,
          "parameters": [
            "self",
            "module"
          ],
          "decorators": []
        },
        {
          "name": "transpile_project",
          "docstring": "Transpile entire project",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TranspilerConfig",
          "docstring": "Configuration for AI transpiler",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "LanguageTemplates",
          "docstring": "Templates and patterns for different target languages",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "AITranspiler",
          "docstring": "AI-powered code transpiler",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "analyze_source_project",
              "docstring": "Analyze source project structure",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "create_target_project_structure",
              "docstring": "Create target project directory structure",
              "line_range": null,
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_generate_structure_info",
              "docstring": "Generate structure information for README",
              "line_range": null,
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "transpile_module",
              "docstring": "Transpile a single module using AI",
              "line_range": null,
              "parameters": [
                "self",
                "module",
                "context"
              ]
            },
            {
              "name": "_format_functions",
              "docstring": "Format functions for prompt",
              "line_range": null,
              "parameters": [
                "self",
                "functions"
              ]
            },
            {
              "name": "_format_classes",
              "docstring": "Format classes for prompt",
              "line_range": null,
              "parameters": [
                "self",
                "classes"
              ]
            },
            {
              "name": "determine_target_path",
              "docstring": "Determine target file path for transpiled module",
              "line_range": null,
              "parameters": [
                "self",
                "module"
              ]
            },
            {
              "name": "transpile_project",
              "docstring": "Transpile entire project",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "ConverterConfig",
          "LLMClient",
          "UniversalConverter"
        ],
        "analyze_source_project": [
          "logger.info"
        ],
        "create_target_project_structure": [
          "logger.warning",
          "shutil.rmtree",
          "Path",
          "self._generate_structure_info",
          "output_path.mkdir",
          "src_dir.mkdir",
          "output_path.exists"
        ],
        "_generate_structure_info": [
          "module.get",
          "len",
          "categories.items",
          "category.title",
          "stats.get",
          "analysis.get"
        ],
        "transpile_module": [
          "target_lang.upper",
          "ctx_module.get",
          "len",
          "logger.error",
          "self._format_functions",
          "response.strip",
          "str",
          "module.get",
          "self._format_classes",
          "target_lang.lower"
        ],
        "_format_functions": [
          "len",
          "func.get"
        ],
        "_format_classes": [
          "len",
          "cls.get"
        ],
        "determine_target_path": [
          "module.get",
          "module_id.split",
          "len",
          "Path"
        ],
        "transpile_project": [
          "self.analyze_source_project",
          "self.transpile_module",
          "Path",
          "self.determine_target_path",
          "len",
          "full_target_path.write_text",
          "logger.error",
          "transpiled_files.append",
          "str",
          "logger.info",
          "range",
          "json.dumps",
          "self.create_target_project_structure",
          "report_path.write_text",
          "errors.append",
          "analysis.get"
        ],
        "main": [
          "exit",
          "argparse.ArgumentParser",
          "traceback.print_exc",
          "parser.add_argument",
          "transpiler.transpile_project",
          "print",
          "AITranspiler",
          "len",
          "TranspilerConfig",
          "parser.parse_args",
          "logger.error",
          "Language"
        ]
      },
      "dependencies": [
        "Any",
        "ConverterConfig",
        "Dict",
        "Enum",
        "LLMClient",
        "Language",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "UniversalConverter",
        "argparse",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "llm_client",
        "logging",
        "os",
        "parsers.universal_converter",
        "pathlib",
        "shutil",
        "traceback",
        "typing"
      ],
      "hash": null,
      "artifact_id": "a0b1e717-5274-46eb-9960-fb31959357f2"
    },
    {
      "module_id": "llmstruct.llm_client",
      "path": "llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": null,
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": null,
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "int",
          "logging.info",
          "os.getenv"
        ],
        "query": [
          "asyncio.sleep",
          "self._query_hybrid",
          "Path",
          "self._query_grok",
          "self._query_anthropic",
          "logging.info",
          "json.dumps",
          "logging.error",
          "logging.warning",
          "range",
          "self._query_ollama",
          "json.load"
        ],
        "_query_grok": [
          "aiohttp.ClientSession",
          "session.post",
          "result.get",
          "logging.info",
          "response.json",
          "logging.error"
        ],
        "_query_anthropic": [
          "aiohttp.ClientSession",
          "session.post",
          "result.get",
          "logging.info",
          "response.json",
          "logging.error"
        ],
        "_query_ollama": [
          "aiohttp.ClientSession",
          "session.post",
          "logging.debug",
          "result.get",
          "response.json",
          "logging.info",
          "logging.error"
        ],
        "_query_hybrid": [
          "isinstance",
          "len",
          "self._query_grok",
          "asyncio.gather",
          "self._query_anthropic",
          "logging.info",
          "self._query_ollama"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "29d1c554-4e3a-4308-9579-aac8af25bb80"
    },
    {
      "module_id": "llmstruct.__main__",
      "path": "llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "llmstruct.cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "f41beb05-4e0b-4ecb-9a75-6ffbce5b270a"
    },
    {
      "module_id": "llmstruct.metrics_tracker",
      "path": "llmstruct/metrics_tracker.py",
      "category": "core",
      "module_doc": "LLMStruct Metrics Tracker - \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u0442\u043e\u043a\u0435\u043d\u044b, performance, \u043e\u0448\u0438\u0431\u043a\u0438, \u043b\u043e\u0436\u043d\u044b\u0435 \u043f\u0443\u0442\u0438 \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 master-plans",
      "functions": [
        {
          "name": "get_metrics_tracker",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 MetricsTracker",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "track_token_usage",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": null,
          "parameters": [
            "provider",
            "model",
            "input_tokens",
            "output_tokens",
            "cost"
          ],
          "decorators": []
        },
        {
          "name": "track_task_start",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": null,
          "parameters": [
            "task_id",
            "task_type"
          ],
          "decorators": []
        },
        {
          "name": "track_task_complete",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": null,
          "parameters": [
            "task_id",
            "status",
            "error"
          ],
          "decorators": []
        },
        {
          "name": "track_false_path",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439",
          "line_range": null,
          "parameters": [
            "task_id",
            "description"
          ],
          "decorators": []
        },
        {
          "name": "track_workflow_event",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f workflow \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": null,
          "parameters": [
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "track_telegram_interaction",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0447\u0435\u0440\u0435\u0437 Telegram \u0441 \u043f\u043e\u043b\u043d\u044b\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c",
          "line_range": null,
          "parameters": [
            "user_message",
            "bot_response",
            "context_size"
          ],
          "decorators": []
        },
        {
          "name": "track_api_interaction",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 API \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043f\u043e\u043b\u043d\u044b\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c",
          "line_range": null,
          "parameters": [
            "endpoint",
            "request_tokens",
            "response_tokens",
            "context_tokens"
          ],
          "decorators": []
        },
        {
          "name": "get_token_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0432\u043e\u0434\u043a\u0443 \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_generate_session_id",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 ID \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_current_branch",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0443\u044e git \u0432\u0435\u0442\u043a\u0443",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_commit_hash",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 commit hash",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_json_hash",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 hash struct.json \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "track_token_usage",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": null,
          "parameters": [
            "self",
            "provider",
            "model",
            "input_tokens",
            "output_tokens",
            "cost_estimate"
          ],
          "decorators": []
        },
        {
          "name": "start_task",
          "docstring": "\u041d\u0430\u0447\u0430\u043b\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": null,
          "parameters": [
            "self",
            "task_id",
            "task_type"
          ],
          "decorators": []
        },
        {
          "name": "complete_task",
          "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": null,
          "parameters": [
            "self",
            "task_id",
            "status",
            "error_message"
          ],
          "decorators": []
        },
        {
          "name": "track_false_path",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439",
          "line_range": null,
          "parameters": [
            "self",
            "task_id",
            "false_path_description"
          ],
          "decorators": []
        },
        {
          "name": "track_rollback",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u043a\u0430\u0442\u043e\u0432",
          "line_range": null,
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        },
        {
          "name": "track_retry",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0445 \u043f\u043e\u043f\u044b\u0442\u043e\u043a",
          "line_range": null,
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        },
        {
          "name": "track_workflow_event",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 workflow \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": null,
          "parameters": [
            "self",
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "calculate_efficiency_score",
          "docstring": "\u0420\u0430\u0441\u0447\u0435\u0442 \u043e\u0446\u0435\u043d\u043a\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_session_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_session_duration",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0435\u0441\u0441\u0438\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_session",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_update_aggregate_metrics",
          "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_analytics_data",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TokenUsage",
          "docstring": "\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "TaskExecution",
          "docstring": "\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": null,
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "WorkflowMetrics",
          "docstring": "\u041c\u0435\u0442\u0440\u0438\u043a\u0438 workflow",
          "line_range": null,
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "MetricsTracker",
          "docstring": "\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_generate_session_id",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 ID \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_current_branch",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0443\u044e git \u0432\u0435\u0442\u043a\u0443",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_commit_hash",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 commit hash",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_json_hash",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 hash struct.json \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "track_token_usage",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
              "line_range": null,
              "parameters": [
                "self",
                "provider",
                "model",
                "input_tokens",
                "output_tokens",
                "cost_estimate"
              ]
            },
            {
              "name": "start_task",
              "docstring": "\u041d\u0430\u0447\u0430\u043b\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": null,
              "parameters": [
                "self",
                "task_id",
                "task_type"
              ]
            },
            {
              "name": "complete_task",
              "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": null,
              "parameters": [
                "self",
                "task_id",
                "status",
                "error_message"
              ]
            },
            {
              "name": "track_false_path",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439",
              "line_range": null,
              "parameters": [
                "self",
                "task_id",
                "false_path_description"
              ]
            },
            {
              "name": "track_rollback",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u043a\u0430\u0442\u043e\u0432",
              "line_range": null,
              "parameters": [
                "self",
                "task_id"
              ]
            },
            {
              "name": "track_retry",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0445 \u043f\u043e\u043f\u044b\u0442\u043e\u043a",
              "line_range": null,
              "parameters": [
                "self",
                "task_id"
              ]
            },
            {
              "name": "track_workflow_event",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 workflow \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
              "line_range": null,
              "parameters": [
                "self",
                "event_type",
                "details"
              ]
            },
            {
              "name": "calculate_efficiency_score",
              "docstring": "\u0420\u0430\u0441\u0447\u0435\u0442 \u043e\u0446\u0435\u043d\u043a\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_session_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_session_duration",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0435\u0441\u0441\u0438\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_session",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_update_aggregate_metrics",
              "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_analytics_data",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "self._get_current_branch",
          "Path",
          "self._generate_session_id",
          "self._get_struct_json_hash",
          "WorkflowMetrics",
          "self._get_commit_hash",
          "asdict",
          "logging.info",
          "datetime.now"
        ],
        "_generate_session_id": [
          "hashlib.md5",
          "datetime.now",
          "timestamp.encode"
        ],
        "_get_current_branch": [
          "subprocess.run"
        ],
        "_get_commit_hash": [
          "subprocess.run"
        ],
        "_get_struct_json_hash": [
          "hashlib.md5",
          "f.read",
          "struct_file.exists",
          "open"
        ],
        "track_token_usage": [
          "get_metrics_tracker"
        ],
        "start_task": [
          "datetime.now",
          "TaskExecution",
          "asdict",
          "logging.info"
        ],
        "complete_task": [
          "datetime.now",
          "datetime.fromisoformat",
          "logging.info",
          "task_data.get"
        ],
        "track_false_path": [
          "get_metrics_tracker"
        ],
        "track_rollback": [
          "logging.warning"
        ],
        "track_retry": [
          "logging.info"
        ],
        "track_workflow_event": [
          "get_metrics_tracker"
        ],
        "calculate_efficiency_score": [
          "min",
          "t.get",
          "len",
          "max",
          "sum"
        ],
        "get_session_summary": [
          "self.calculate_efficiency_score",
          "t.get",
          "len",
          "sum",
          "self._get_session_duration",
          "usage.get"
        ],
        "_get_session_duration": [
          "datetime.now",
          "datetime.fromisoformat"
        ],
        "save_session": [
          "self._update_aggregate_metrics",
          "json.dump",
          "logging.info",
          "open"
        ],
        "_update_aggregate_metrics": [
          "len",
          "json.dump",
          "open",
          "sum",
          "self.get_session_summary",
          "json.load"
        ],
        "get_analytics_data": [
          "max",
          "open",
          "json.load"
        ],
        "get_metrics_tracker": [
          "MetricsTracker"
        ],
        "track_task_start": [
          "get_metrics_tracker"
        ],
        "track_task_complete": [
          "get_metrics_tracker"
        ],
        "track_telegram_interaction": [
          "len",
          "logger.info",
          "logger.error",
          "datetime.now",
          "get_metrics_tracker"
        ],
        "track_api_interaction": [
          "logger.error",
          "datetime.now",
          "get_metrics_tracker",
          "logger.info"
        ],
        "get_token_summary": [
          "logger.error",
          "len",
          "get_metrics_tracker"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "subprocess",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ab34da75-82a2-4284-9aeb-a1e1c5ce2f3b"
    },
    {
      "module_id": "llmstruct.cli",
      "path": "llmstruct/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "normalize_patterns",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "arglist"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "duplicates_parser.add_argument",
          "query_parser.add_argument",
          "argparse.ArgumentParser",
          "parse_parser.add_argument",
          "epic.add_epic_cli_subparser",
          "parser.add_subparsers",
          "parser.parse_args",
          "dogfood_parser.add_argument",
          "review_parser.add_argument",
          "audit_parser.add_argument",
          "subparsers.add_parser",
          "copilot_parser.add_argument",
          "context_parser.add_argument"
        ],
        "normalize_patterns": [
          "item.strip",
          "item.split",
          "p.strip",
          "result.append",
          "result.extend"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "analyze_duplicates",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "audit",
        "cli_core",
        "context",
        "copilot",
        "create_cli_core",
        "dogfood",
        "epic",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "interactive",
        "interactive_legacy",
        "interactive_modular",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.analyze_duplicates",
        "llmstruct.modules.cli.audit",
        "llmstruct.modules.cli.context",
        "llmstruct.modules.cli.copilot",
        "llmstruct.modules.cli.dogfood",
        "llmstruct.modules.cli.handlers",
        "llmstruct.modules.cli.parse",
        "llmstruct.modules.cli.query",
        "llmstruct.modules.cli.review",
        "llmstruct.modules.cli.utils",
        "llmstruct.modules.commands.queue",
        "llmstruct.self_run",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "parse_files_from_response",
        "pathlib",
        "process_cli_queue_enhanced",
        "query",
        "re",
        "read_file_content",
        "review",
        "shutil",
        "sys",
        "time",
        "toml",
        "typing",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "aff39569-0db9-474d-bec8-d5d197ff36ba"
    },
    {
      "module_id": "llmstruct.context_orchestrator",
      "path": "llmstruct/context_orchestrator.py",
      "category": "core",
      "module_doc": "Smart Context Orchestration for LLMStruct\nOptimizes context loading for different LLM usage scenarios",
      "functions": [
        {
          "name": "create_context_orchestrator",
          "docstring": "Factory function to create context orchestrator.",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context for scenario - convenience function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (cli_direct, vscode_copilot, session_work)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": null,
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load context orchestration configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_scenario",
          "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
          "line_range": null,
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "custom_budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_budget_for_scenario",
          "docstring": "Create budget configuration for scenario.",
          "line_range": null,
          "parameters": [
            "self",
            "scenario_config"
          ],
          "decorators": []
        },
        {
          "name": "_load_full_context",
          "docstring": "Load complete context without token restrictions.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_extract_relationship_summary",
          "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438",
          "line_range": null,
          "parameters": [
            "self",
            "max_modules"
          ],
          "decorators": []
        },
        {
          "name": "_load_focused_context",
          "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load session-specific context.",
          "line_range": null,
          "parameters": [
            "self",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_minimal_context",
          "docstring": "Load minimal context for quick operations.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_source_with_filtering",
          "docstring": "Load source with optional filtering based on budget.",
          "line_range": null,
          "parameters": [
            "self",
            "source_name",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_file_context",
          "docstring": "Get context specific to a file.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_essential_parts",
          "docstring": "Extract essential parts of data to fit token budget.",
          "line_range": null,
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_filter_for_current_session",
          "docstring": "Filter data to items relevant to current session.",
          "line_range": null,
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_summary",
          "docstring": "Extract summary information from data.",
          "line_range": null,
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_apply_section_filtering",
          "docstring": "Apply section filtering to exclude specified sections.",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "exclude_sections"
          ],
          "decorators": []
        },
        {
          "name": "_update_metrics",
          "docstring": "Update performance metrics.",
          "line_range": null,
          "parameters": [
            "self",
            "scenario",
            "context",
            "load_time"
          ],
          "decorators": []
        },
        {
          "name": "get_metrics_summary",
          "docstring": "Get summary of context loading metrics.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_metrics",
          "docstring": "Save metrics to file for analysis.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextMode",
          "docstring": "Context loading modes for different scenarios.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLevel",
          "docstring": "Progressive context levels with token budgets.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextBudget",
          "docstring": "Token budget configuration for context loading.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextMetrics",
          "docstring": "Metrics for context loading performance.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "SmartContextOrchestrator",
          "docstring": "Orchestrates context loading based on usage scenario and token budget.\nProvides optimized context for different LLM integration patterns.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load context orchestration configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_scenario",
              "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
              "line_range": null,
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "custom_budget"
              ]
            },
            {
              "name": "_get_budget_for_scenario",
              "docstring": "Create budget configuration for scenario.",
              "line_range": null,
              "parameters": [
                "self",
                "scenario_config"
              ]
            },
            {
              "name": "_load_full_context",
              "docstring": "Load complete context without token restrictions.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_extract_relationship_summary",
              "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438",
              "line_range": null,
              "parameters": [
                "self",
                "max_modules"
              ]
            },
            {
              "name": "_load_focused_context",
              "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "budget"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load session-specific context.",
              "line_range": null,
              "parameters": [
                "self",
                "budget"
              ]
            },
            {
              "name": "_load_minimal_context",
              "docstring": "Load minimal context for quick operations.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_source_with_filtering",
              "docstring": "Load source with optional filtering based on budget.",
              "line_range": null,
              "parameters": [
                "self",
                "source_name",
                "budget"
              ]
            },
            {
              "name": "_get_file_context",
              "docstring": "Get context specific to a file.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_essential_parts",
              "docstring": "Extract essential parts of data to fit token budget.",
              "line_range": null,
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_filter_for_current_session",
              "docstring": "Filter data to items relevant to current session.",
              "line_range": null,
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_extract_summary",
              "docstring": "Extract summary information from data.",
              "line_range": null,
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_apply_section_filtering",
              "docstring": "Apply section filtering to exclude specified sections.",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "exclude_sections"
              ]
            },
            {
              "name": "_update_metrics",
              "docstring": "Update performance metrics.",
              "line_range": null,
              "parameters": [
                "self",
                "scenario",
                "context",
                "load_time"
              ]
            },
            {
              "name": "get_metrics_summary",
              "docstring": "Get summary of context loading metrics.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_metrics",
              "docstring": "Save metrics to file for analysis.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path"
        ],
        "_load_config": [
          "config_path.exists",
          "open",
          "json.load"
        ],
        "get_context_for_scenario": [
          "self._load_full_context",
          "self._update_metrics",
          "scenario_config.get",
          "time.time",
          "self._load_focused_context",
          "self._load_session_context",
          "ContextMode",
          "self._load_minimal_context",
          "self._get_budget_for_scenario"
        ],
        "_get_budget_for_scenario": [
          "scenario_config.get",
          "ContextBudget",
          "budget_config.get"
        ],
        "_load_full_context": [
          "logger.warning",
          "full_path.exists",
          "open",
          "json.load"
        ],
        "_extract_relationship_summary": [
          "struct_path.exists",
          "logger.warning",
          "summary.append",
          "open",
          "struct.get",
          "m.get",
          "json.load"
        ],
        "_load_focused_context": [
          "logger.warning",
          "init_path.exists",
          "session_path.exists",
          "len",
          "open",
          "self._extract_relationship_summary",
          "json.dumps",
          "file_path.endswith",
          "self._get_file_context",
          "self._extract_summary",
          "json.load"
        ],
        "_load_session_context": [
          "self._filter_for_current_session",
          "self._load_source_with_filtering"
        ],
        "_load_minimal_context": [
          "source_path.exists",
          "logger.warning",
          "open",
          "self._extract_summary",
          "json.load"
        ],
        "_load_source_with_filtering": [
          "source_path.exists",
          "logger.warning",
          "open",
          "self._apply_section_filtering",
          "json.load"
        ],
        "_get_file_context": [
          "Path"
        ],
        "_extract_essential_parts": [
          "task.get",
          "isinstance"
        ],
        "_filter_for_current_session": [
          "task.get",
          "logger.warning",
          "current_session_path.exists",
          "open",
          "idea.get",
          "current_session.get",
          "data.items",
          "json.load"
        ],
        "_extract_summary": [
          "t.get",
          "len",
          "isinstance"
        ],
        "_apply_section_filtering": [
          "data.items"
        ],
        "_update_metrics": [
          "ContextMetrics",
          "context.get",
          "len"
        ],
        "get_metrics_summary": [
          "sum",
          "len"
        ],
        "save_metrics": [
          "self.get_metrics_summary",
          "json.dump",
          "open"
        ],
        "create_context_orchestrator": [
          "SmartContextOrchestrator"
        ],
        "get_optimized_context": [
          "orchestrator.get_context_for_scenario",
          "ContextBudget",
          "create_context_orchestrator"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Union",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ce328fe2-6713-43e2-bcb1-0fda1b911bf2"
    },
    {
      "module_id": "llmstruct.ai_self_monitor",
      "path": "llmstruct/ai_self_monitor.py",
      "category": "core",
      "module_doc": "AI Self-Monitoring System\nTracks AI usage patterns and ensures proper llmstruct integration.",
      "functions": [
        {
          "name": "initialize_ai_monitor",
          "docstring": "Initialize global AI monitor.",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_monitor",
          "docstring": "Get current AI monitor instance.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "record_ai_usage",
          "docstring": "Global function to record AI usage.",
          "line_range": null,
          "parameters": [
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "record_ai_interaction",
          "docstring": "Record an AI interaction for monitoring.",
          "line_range": null,
          "parameters": [
            "self",
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_interaction_patterns",
          "docstring": "Analyze patterns in AI interaction.",
          "line_range": null,
          "parameters": [
            "self",
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_effectiveness_score",
          "docstring": "Calculate effectiveness score for interaction.",
          "line_range": null,
          "parameters": [
            "self",
            "patterns",
            "tools_used",
            "used_llmstruct"
          ],
          "decorators": []
        },
        {
          "name": "_check_immediate_feedback",
          "docstring": "Check if immediate feedback/correction is needed.",
          "line_range": null,
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_log_immediate_feedback",
          "docstring": "Log immediate feedback message.",
          "line_range": null,
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "analyze_behavior_trends",
          "docstring": "Analyze AI behavior trends over specified period.",
          "line_range": null,
          "parameters": [
            "self",
            "days"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "Generate specific recommendations for improvement.",
          "line_range": null,
          "parameters": [
            "self",
            "llmstruct_usage",
            "context_awareness",
            "tool_diversity",
            "effectiveness"
          ],
          "decorators": []
        },
        {
          "name": "get_real_time_guidance",
          "docstring": "Get real-time guidance for current query.",
          "line_range": null,
          "parameters": [
            "self",
            "current_query"
          ],
          "decorators": []
        },
        {
          "name": "_load_events",
          "docstring": "Load events from disk.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_events",
          "docstring": "Save events to disk.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_analysis",
          "docstring": "Save behavior analysis to disk.",
          "line_range": null,
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "get_monitoring_report",
          "docstring": "Get comprehensive monitoring report.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AIBehaviorPattern",
          "docstring": "AI behavior patterns to monitor.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AIUsageEvent",
          "docstring": "Single AI usage event.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "AIBehaviorAnalysis",
          "docstring": "Analysis of AI behavior patterns.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "AISelfMonitor",
          "docstring": "Monitors AI behavior and ensures proper llmstruct integration.\nProvides feedback and corrective guidance.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "record_ai_interaction",
              "docstring": "Record an AI interaction for monitoring.",
              "line_range": null,
              "parameters": [
                "self",
                "query",
                "tools_used",
                "used_llmstruct",
                "context_tags",
                "metadata"
              ]
            },
            {
              "name": "_analyze_interaction_patterns",
              "docstring": "Analyze patterns in AI interaction.",
              "line_range": null,
              "parameters": [
                "self",
                "query",
                "tools_used",
                "used_llmstruct",
                "context_tags"
              ]
            },
            {
              "name": "_calculate_effectiveness_score",
              "docstring": "Calculate effectiveness score for interaction.",
              "line_range": null,
              "parameters": [
                "self",
                "patterns",
                "tools_used",
                "used_llmstruct"
              ]
            },
            {
              "name": "_check_immediate_feedback",
              "docstring": "Check if immediate feedback/correction is needed.",
              "line_range": null,
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_log_immediate_feedback",
              "docstring": "Log immediate feedback message.",
              "line_range": null,
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "analyze_behavior_trends",
              "docstring": "Analyze AI behavior trends over specified period.",
              "line_range": null,
              "parameters": [
                "self",
                "days"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "Generate specific recommendations for improvement.",
              "line_range": null,
              "parameters": [
                "self",
                "llmstruct_usage",
                "context_awareness",
                "tool_diversity",
                "effectiveness"
              ]
            },
            {
              "name": "get_real_time_guidance",
              "docstring": "Get real-time guidance for current query.",
              "line_range": null,
              "parameters": [
                "self",
                "current_query"
              ]
            },
            {
              "name": "_load_events",
              "docstring": "Load events from disk.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_events",
              "docstring": "Save events to disk.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_analysis",
              "docstring": "Save behavior analysis to disk.",
              "line_range": null,
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "get_monitoring_report",
              "docstring": "Get comprehensive monitoring report.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logger.info",
          "self._load_events",
          "Path"
        ],
        "record_ai_interaction": [
          "self._calculate_effectiveness_score",
          "len",
          "self._analyze_interaction_patterns",
          "AIUsageEvent",
          "datetime.now",
          "self._save_events",
          "self._check_immediate_feedback"
        ],
        "_analyze_interaction_patterns": [
          "query.lower",
          "any",
          "patterns.append"
        ],
        "_calculate_effectiveness_score": [
          "min",
          "pattern_scores.get",
          "len",
          "set"
        ],
        "_check_immediate_feedback": [
          "self._log_immediate_feedback",
          "any"
        ],
        "_log_immediate_feedback": [
          "print",
          "logger.warning"
        ],
        "analyze_behavior_trends": [
          "AIBehaviorAnalysis",
          "set",
          "timedelta",
          "strengths.append",
          "len",
          "any",
          "all_tools.update",
          "datetime.fromisoformat",
          "self._save_analysis",
          "improvements.append",
          "datetime.now",
          "self._generate_recommendations",
          "sum"
        ],
        "_generate_recommendations": [
          "recommendations.append",
          "recommendations.extend"
        ],
        "get_real_time_guidance": [
          "guidance.append",
          "current_query.lower",
          "any"
        ],
        "_load_events": [
          "AIUsageEvent",
          "len",
          "open",
          "logger.info",
          "logger.error",
          "json.load"
        ],
        "_save_events": [
          "logger.error",
          "json.dump",
          "asdict",
          "open"
        ],
        "_save_analysis": [
          "logger.error",
          "json.dump",
          "asdict",
          "open"
        ],
        "get_monitoring_report": [
          "datetime.now",
          "chr",
          "len",
          "self.analyze_behavior_trends"
        ],
        "initialize_ai_monitor": [
          "AISelfMonitor"
        ],
        "get_ai_monitor": [],
        "record_ai_usage": [
          "_monitor_instance.record_ai_interaction"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b45ce9e0-bc95-4f01-996a-9007695f29d5"
    },
    {
      "module_id": "llmstruct.cursor_ai_bridge",
      "path": "llmstruct/cursor_ai_bridge.py",
      "category": "core",
      "module_doc": "Cursor AI Bridge - API Layer for AI Assistant Integration\nProvides CLI and HTTP endpoints so Cursor AI can use WorkflowOrchestrator",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for Cursor AI Bridge.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "ai_get_context",
          "docstring": "Get AI-optimized context for current development state.",
          "line_range": null,
          "parameters": [
            "self",
            "query_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "ai_analyze_task",
          "docstring": "Analyze a task and provide AI-optimized guidance.",
          "line_range": null,
          "parameters": [
            "self",
            "task_description"
          ],
          "decorators": []
        },
        {
          "name": "ai_create_task",
          "docstring": "Create a task through AI interface.",
          "line_range": null,
          "parameters": [
            "self",
            "title",
            "description",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "ai_get_onboarding_guide",
          "docstring": "Get comprehensive AI onboarding guide.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "ai_check_duplicates",
          "docstring": "Check for code duplicates with AI-friendly output.",
          "line_range": null,
          "parameters": [
            "self",
            "threshold"
          ],
          "decorators": []
        },
        {
          "name": "ai_suggest",
          "docstring": "Get AI suggestions based on context.",
          "line_range": null,
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_task_complexity",
          "docstring": "Estimate task complexity based on codebase analysis.",
          "line_range": null,
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_suggest_approach",
          "docstring": "Suggest approach based on task and codebase state.",
          "line_range": null,
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_find_relevant_modules",
          "docstring": "Find modules relevant to the task.",
          "line_range": null,
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_check_potential_duplicates",
          "docstring": "Check if task might create duplicates.",
          "line_range": null,
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_recommend_ai_for_task",
          "docstring": "Recommend which AI to use for the task.",
          "line_range": null,
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_generate_workflow_steps",
          "docstring": "Generate workflow steps for the task.",
          "line_range": null,
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_determine_context_requirements",
          "docstring": "Determine what context is needed for the task.",
          "line_range": null,
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on context.",
          "line_range": null,
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_available_ai_commands",
          "docstring": "Get available AI commands.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_identify_high_priority_duplicates",
          "docstring": "Identify high-priority duplicates for refactoring.",
          "line_range": null,
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_generate_refactoring_suggestions",
          "docstring": "Generate refactoring suggestions.",
          "line_range": null,
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_classify_task_type",
          "docstring": "Classify task type for AI delegation.",
          "line_range": null,
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_generate_next_steps",
          "docstring": "Generate next steps based on context.",
          "line_range": null,
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorAIBridge",
          "docstring": "Bridge that allows Cursor AI assistant to use WorkflowOrchestrator\nthrough CLI commands and structured JSON responses.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "ai_get_context",
              "docstring": "Get AI-optimized context for current development state.",
              "line_range": null,
              "parameters": [
                "self",
                "query_type",
                "file_path"
              ]
            },
            {
              "name": "ai_analyze_task",
              "docstring": "Analyze a task and provide AI-optimized guidance.",
              "line_range": null,
              "parameters": [
                "self",
                "task_description"
              ]
            },
            {
              "name": "ai_create_task",
              "docstring": "Create a task through AI interface.",
              "line_range": null,
              "parameters": [
                "self",
                "title",
                "description",
                "priority"
              ]
            },
            {
              "name": "ai_get_onboarding_guide",
              "docstring": "Get comprehensive AI onboarding guide.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "ai_check_duplicates",
              "docstring": "Check for code duplicates with AI-friendly output.",
              "line_range": null,
              "parameters": [
                "self",
                "threshold"
              ]
            },
            {
              "name": "ai_suggest",
              "docstring": "Get AI suggestions based on context.",
              "line_range": null,
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_estimate_task_complexity",
              "docstring": "Estimate task complexity based on codebase analysis.",
              "line_range": null,
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_suggest_approach",
              "docstring": "Suggest approach based on task and codebase state.",
              "line_range": null,
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_find_relevant_modules",
              "docstring": "Find modules relevant to the task.",
              "line_range": null,
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_check_potential_duplicates",
              "docstring": "Check if task might create duplicates.",
              "line_range": null,
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_recommend_ai_for_task",
              "docstring": "Recommend which AI to use for the task.",
              "line_range": null,
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_generate_workflow_steps",
              "docstring": "Generate workflow steps for the task.",
              "line_range": null,
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_determine_context_requirements",
              "docstring": "Determine what context is needed for the task.",
              "line_range": null,
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on context.",
              "line_range": null,
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_get_available_ai_commands",
              "docstring": "Get available AI commands.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_identify_high_priority_duplicates",
              "docstring": "Identify high-priority duplicates for refactoring.",
              "line_range": null,
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_generate_refactoring_suggestions",
              "docstring": "Generate refactoring suggestions.",
              "line_range": null,
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_classify_task_type",
              "docstring": "Classify task type for AI delegation.",
              "line_range": null,
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_generate_next_steps",
              "docstring": "Generate next steps based on context.",
              "line_range": null,
              "parameters": [
                "self",
                "context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "WorkflowOrchestrator",
          "CursorIntegrationManager",
          "str",
          "Path"
        ],
        "ai_get_context": [
          "self._get_available_ai_commands",
          "cursor_context.get",
          "len",
          "self._get_workflow_suggestions",
          "context.get",
          "str",
          "datetime.utcnow"
        ],
        "ai_analyze_task": [
          "self._check_potential_duplicates",
          "self._determine_context_requirements",
          "self._suggest_approach",
          "context.get",
          "str",
          "self._estimate_task_complexity",
          "self._find_relevant_modules",
          "self._recommend_ai_for_task",
          "self._generate_workflow_steps"
        ],
        "ai_create_task": [
          "self.ai_analyze_task",
          "datetime.utcnow",
          "str"
        ],
        "ai_get_onboarding_guide": [
          "str"
        ],
        "ai_check_duplicates": [
          "self._generate_refactoring_suggestions",
          "self._identify_high_priority_duplicates",
          "str",
          "analysis.get"
        ],
        "ai_suggest": [
          "delegation.get",
          "self._classify_task_type",
          "self._get_workflow_suggestions",
          "self._generate_next_steps",
          "str"
        ],
        "_estimate_task_complexity": [
          "task.lower",
          "any",
          "complexity_keywords.items"
        ],
        "_suggest_approach": [
          "task.lower",
          "approaches.append"
        ],
        "_find_relevant_modules": [
          "any",
          "struct_analysis.get",
          "relevant.append",
          "module.get",
          "task.lower"
        ],
        "_check_potential_duplicates": [],
        "_recommend_ai_for_task": [
          "task.lower",
          "any"
        ],
        "_generate_workflow_steps": [],
        "_determine_context_requirements": [
          "task.lower",
          "requirements.append"
        ],
        "_get_workflow_suggestions": [],
        "_get_available_ai_commands": [],
        "_identify_high_priority_duplicates": [],
        "_generate_refactoring_suggestions": [],
        "_classify_task_type": [
          "any",
          "context.lower"
        ],
        "_generate_next_steps": [],
        "main": [
          "bridge.ai_analyze_task",
          "argparse.ArgumentParser",
          "bridge.ai_create_task",
          "parser.add_argument",
          "print",
          "bridge.ai_check_duplicates",
          "parser.parse_args",
          "bridge.ai_suggest",
          "bridge.ai_onboarding_guide",
          "json.dumps",
          "bridge.ai_get_context",
          "CursorAIBridge"
        ]
      },
      "dependencies": [
        "Any",
        "CursorIntegrationManager",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "WorkflowOrchestrator",
        "ai_self_awareness",
        "argparse",
        "cursor_integration",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": null,
      "artifact_id": "6b037207-5f1f-4c0f-a4e3-cd523ec5a820"
    },
    {
      "module_id": "llmstruct.ai_self_awareness",
      "path": "llmstruct/ai_self_awareness.py",
      "category": "core",
      "module_doc": "AI Self-Awareness Enhancement Module\nProvides comprehensive system introspection and capability discovery for llmstruct AI systems.\nEnhanced with Cursor IDE integration and real-time metrics.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize the capability discovery system with CLI integration.",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_ensure_directories",
          "docstring": "Ensure required directories exist.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "discover_all_capabilities",
          "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
          "line_range": null,
          "parameters": [
            "self",
            "force_refresh"
          ],
          "decorators": []
        },
        {
          "name": "_get_integration_metrics",
          "docstring": "Get metrics about unused function integration success.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_enhanced_capabilities_summary",
          "docstring": "Get enhanced capabilities summary including unused function integration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_ai_status",
          "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_tools",
          "docstring": "Discover and check health of all available tools.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cli_processor",
          "docstring": "Check CLI processor health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_copilot_manager",
          "docstring": "Check Copilot manager health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_context_orchestrator",
          "docstring": "Check context orchestrator health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cache_system",
          "docstring": "Check cache system health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_struct_parser",
          "docstring": "Check struct.json parser health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_docs_system",
          "docstring": "Check docs.json system health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_capabilities",
          "docstring": "Discover available context capabilities.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_integration_health",
          "docstring": "Check health of all system integrations.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_component_status",
          "docstring": "Check status of a specific component.",
          "line_range": null,
          "parameters": [
            "self",
            "component_name"
          ],
          "decorators": []
        },
        {
          "name": "_discover_vscode_capabilities",
          "docstring": "Discover VS Code specific capabilities.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_cache_hit_rate",
          "docstring": "Calculate cache hit rate using real metrics.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_system_load",
          "docstring": "Estimate current system load using real metrics.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_cache_valid",
          "docstring": "Check if cached capabilities are still valid.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cached_capabilities",
          "docstring": "Load capabilities from cache.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cache_capabilities",
          "docstring": "Cache capabilities to disk.",
          "line_range": null,
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "get_capabilities_summary",
          "docstring": "Get a human-readable summary of current capabilities.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_project_structure",
          "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_directory_structure",
          "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_unused_capabilities",
          "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
          "line_range": null,
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_discover_config_capabilities",
          "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_scenarios",
          "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_command",
          "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
          "line_range": null,
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_config",
          "docstring": "Determine if a config function would be useful for AI configuration awareness.",
          "line_range": null,
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_utility",
          "docstring": "Determine if a utility function would be useful for AI operations.",
          "line_range": null,
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_prioritize_integrations",
          "docstring": "Prioritize which unused functions should be integrated first.",
          "line_range": null,
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_basic_directory_scan",
          "docstring": "Basic directory scan for fallback scenarios.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_status_report",
          "docstring": "Generate Cursor-specific status optimized for IDE integration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "optimize_context_for_cursor",
          "docstring": "Provide perfectly sized context for Cursor interactions.",
          "line_range": null,
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals from personal bridge.",
          "line_range": null,
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_real_cache_hit_rate",
          "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_real_system_load",
          "docstring": "Get actual system performance metrics.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_query_type",
          "docstring": "Analyze query to determine optimal context type.",
          "line_range": null,
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": null,
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": null,
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_get_overall_health_emoji",
          "docstring": "Get emoji representing overall system health.",
          "line_range": null,
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_status_emoji",
          "docstring": "Get emoji for context engine status.",
          "line_range": null,
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_ai_integration_emoji",
          "docstring": "Get emoji for AI integration status.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_goal_alignment_status",
          "docstring": "Get goal alignment status.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CapabilityStatus",
          "docstring": "Status of system capabilities.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextMode",
          "docstring": "Available context modes.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ToolHealth",
          "docstring": "Health status of a specific tool.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextCapabilities",
          "docstring": "Available context capabilities.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "IntegrationHealth",
          "docstring": "Status of system integrations.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "VSCodeCapabilities",
          "docstring": "VS Code specific capabilities.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilities",
          "docstring": "Complete system capabilities overview.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilityDiscovery",
          "docstring": "Discovers and monitors system capabilities in real-time.\nProvides AI with comprehensive understanding of available tools and systems.\nEnhanced with unused function integration for maximum AI self-awareness.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the capability discovery system with CLI integration.",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_ensure_directories",
              "docstring": "Ensure required directories exist.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "discover_all_capabilities",
              "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
              "line_range": null,
              "parameters": [
                "self",
                "force_refresh"
              ]
            },
            {
              "name": "_get_integration_metrics",
              "docstring": "Get metrics about unused function integration success.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_enhanced_capabilities_summary",
              "docstring": "Get enhanced capabilities summary including unused function integration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_comprehensive_ai_status",
              "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_tools",
              "docstring": "Discover and check health of all available tools.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cli_processor",
              "docstring": "Check CLI processor health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_copilot_manager",
              "docstring": "Check Copilot manager health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_context_orchestrator",
              "docstring": "Check context orchestrator health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cache_system",
              "docstring": "Check cache system health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_struct_parser",
              "docstring": "Check struct.json parser health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_docs_system",
              "docstring": "Check docs.json system health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_capabilities",
              "docstring": "Discover available context capabilities.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_integration_health",
              "docstring": "Check health of all system integrations.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_component_status",
              "docstring": "Check status of a specific component.",
              "line_range": null,
              "parameters": [
                "self",
                "component_name"
              ]
            },
            {
              "name": "_discover_vscode_capabilities",
              "docstring": "Discover VS Code specific capabilities.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_cache_hit_rate",
              "docstring": "Calculate cache hit rate using real metrics.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_estimate_system_load",
              "docstring": "Estimate current system load using real metrics.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_cache_valid",
              "docstring": "Check if cached capabilities are still valid.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cached_capabilities",
              "docstring": "Load capabilities from cache.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cache_capabilities",
              "docstring": "Cache capabilities to disk.",
              "line_range": null,
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "get_capabilities_summary",
              "docstring": "Get a human-readable summary of current capabilities.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_project_structure",
              "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_enhanced_directory_structure",
              "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_unused_capabilities",
              "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
              "line_range": null,
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_discover_config_capabilities",
              "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_scenarios",
              "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_ai_useful_command",
              "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
              "line_range": null,
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_config",
              "docstring": "Determine if a config function would be useful for AI configuration awareness.",
              "line_range": null,
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_utility",
              "docstring": "Determine if a utility function would be useful for AI operations.",
              "line_range": null,
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_prioritize_integrations",
              "docstring": "Prioritize which unused functions should be integrated first.",
              "line_range": null,
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_basic_directory_scan",
              "docstring": "Basic directory scan for fallback scenarios.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cursor_status_report",
              "docstring": "Generate Cursor-specific status optimized for IDE integration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "optimize_context_for_cursor",
              "docstring": "Provide perfectly sized context for Cursor interactions.",
              "line_range": null,
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals from personal bridge.",
              "line_range": null,
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "_calculate_real_cache_hit_rate",
              "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_real_system_load",
              "docstring": "Get actual system performance metrics.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_query_type",
              "docstring": "Analyze query to determine optimal context type.",
              "line_range": null,
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": null,
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": null,
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_get_overall_health_emoji",
              "docstring": "Get emoji representing overall system health.",
              "line_range": null,
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_get_context_status_emoji",
              "docstring": "Get emoji for context engine status.",
              "line_range": null,
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_get_ai_integration_emoji",
              "docstring": "Get emoji for AI integration status.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_goal_alignment_status",
              "docstring": "Get goal alignment status.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "create_ai_cli_integration",
          "self._ensure_directories",
          "Path"
        ],
        "_ensure_directories": [],
        "discover_all_capabilities": [
          "self._discover_context_capabilities",
          "self._get_integration_metrics",
          "SystemCapabilities",
          "self._calculate_cache_hit_rate",
          "time.time",
          "self._is_cache_valid",
          "self._cache_capabilities",
          "self._discover_tools",
          "self._analyze_project_structure",
          "self._estimate_system_load",
          "logger.info",
          "datetime.now",
          "self._discover_vscode_capabilities",
          "self._load_cached_capabilities",
          "self._check_integration_health"
        ],
        "_get_integration_metrics": [],
        "get_enhanced_capabilities_summary": [
          "enhanced_info.append",
          "hasattr",
          "self.get_capabilities_summary",
          "str"
        ],
        "get_comprehensive_ai_status": [
          "self.get_enhanced_capabilities_summary",
          "str",
          "get_ai_enhanced_cli_summary"
        ],
        "_discover_tools": [
          "self._check_docs_system",
          "self._check_cache_system",
          "self._check_struct_parser",
          "self._check_context_orchestrator",
          "self._check_cli_processor",
          "self._check_copilot_manager"
        ],
        "_check_cli_processor": [
          "CLIConfig",
          "time.time",
          "CommandProcessor",
          "ToolHealth",
          "str",
          "datetime.now",
          "CLIUtils"
        ],
        "_check_copilot_manager": [
          "time.time",
          "ToolHealth",
          "manager.get_context_status",
          "hasattr",
          "str",
          "initialize_copilot",
          "datetime.now"
        ],
        "_check_context_orchestrator": [
          "logger.warning",
          "time.time",
          "get_optimized_context",
          "ToolHealth",
          "hasattr",
          "str",
          "create_context_orchestrator",
          "datetime.now"
        ],
        "_check_cache_system": [
          "cache.get_full_json",
          "time.time",
          "cache.close",
          "ToolHealth",
          "cache.cache_json",
          "JSONCache",
          "str",
          "datetime.now",
          "struct_file.exists"
        ],
        "_check_struct_parser": [
          "struct_data.get",
          "missing_keys.append",
          "datetime.now",
          "time.time",
          "open",
          "ToolHealth",
          "str",
          "FileNotFoundError",
          "struct_file.exists",
          "json.load"
        ],
        "_check_docs_system": [
          "docs_file.exists",
          "datetime.now",
          "time.time",
          "open",
          "ToolHealth",
          "str",
          "FileNotFoundError",
          "json.load"
        ],
        "_discover_context_capabilities": [
          "isinstance",
          "config.get",
          "list",
          "scenario_mappings.keys",
          "str",
          "create_context_orchestrator",
          "logger.error",
          "ContextCapabilities"
        ],
        "_check_integration_health": [
          "IntegrationHealth",
          "self._check_component_status"
        ],
        "_check_component_status": [
          "hasattr"
        ],
        "_discover_vscode_capabilities": [
          "VSCodeCapabilities"
        ],
        "_calculate_cache_hit_rate": [
          "self._calculate_real_cache_hit_rate"
        ],
        "_estimate_system_load": [
          "self._get_real_system_load"
        ],
        "_is_cache_valid": [
          "time.time"
        ],
        "_load_cached_capabilities": [
          "logger.error",
          "open",
          "json.load"
        ],
        "_cache_capabilities": [
          "logger.error",
          "json.dump",
          "asdict",
          "open"
        ],
        "get_capabilities_summary": [
          "chr",
          "len",
          "str",
          "self.discover_all_capabilities"
        ],
        "_analyze_project_structure": [
          "self._analyze_unused_capabilities",
          "struct_data.get",
          "len",
          "self._get_enhanced_directory_structure",
          "open",
          "str",
          "self._discover_context_scenarios",
          "module.get",
          "sum",
          "struct_file.exists",
          "self._discover_config_capabilities",
          "json.load"
        ],
        "_get_enhanced_directory_structure": [
          "get_directory_structure",
          "self._basic_directory_scan",
          "str"
        ],
        "_analyze_unused_capabilities": [
          "min",
          "struct_data.get",
          "f.startswith",
          "modules.get",
          "self._is_ai_useful_command",
          "config_module.get",
          "len",
          "cli_module.get",
          "self._is_ai_useful_config",
          "str",
          "self._is_ai_useful_utility",
          "utils_module.get",
          "self._prioritize_integrations"
        ],
        "_discover_config_capabilities": [
          "get_queue_config",
          "get_copilot_config",
          "str",
          "get_context_config",
          "is_auto_update_enabled"
        ],
        "_discover_context_scenarios": [
          "str",
          "get_metrics_summary",
          "get_context_for_scenario"
        ],
        "_is_ai_useful_command": [],
        "_is_ai_useful_config": [],
        "_is_ai_useful_utility": [],
        "_prioritize_integrations": [
          "priorities.append"
        ],
        "_basic_directory_scan": [
          "logger.error",
          "item.is_file",
          "item.is_dir",
          "str"
        ],
        "get_cursor_status_report": [
          "self._load_cursor_config",
          "self._get_goal_alignment_status",
          "self._get_overall_health_emoji",
          "self._get_ai_integration_emoji",
          "str",
          "self.discover_all_capabilities",
          "self._get_context_status_emoji"
        ],
        "optimize_context_for_cursor": [
          "self._apply_privacy_filter",
          "self._load_cursor_config",
          "file_path.exists",
          "json.load",
          "open",
          "context_rules.get",
          "optimal_config.get",
          "logger.error",
          "str",
          "self._analyze_query_type",
          "cursor_config.get"
        ],
        "get_goal_aligned_suggestions": [
          "personal_bridge.get",
          "self._load_personal_bridge",
          "suggestions.extend",
          "any",
          "technical_context.lower",
          "logger.error"
        ],
        "_calculate_real_cache_hit_rate": [
          "time.time",
          "len",
          "list",
          "cache_dir.exists",
          "cache_file.stat",
          "logger.error",
          "cache_dir.glob"
        ],
        "_get_real_system_load": [
          "min",
          "psutil.disk_usage",
          "str",
          "psutil.virtual_memory",
          "logger.error",
          "psutil.cpu_percent"
        ],
        "_load_cursor_config": [
          "logger.error",
          "config_path.exists",
          "open",
          "json.load"
        ],
        "_load_personal_bridge": [
          "logger.error",
          "open",
          "bridge_path.exists",
          "json.load"
        ],
        "_analyze_query_type": [
          "any",
          "query_analysis.get"
        ],
        "_apply_privacy_filter": [
          "self._filter_sensitive_dict",
          "context_data.items",
          "isinstance"
        ],
        "_filter_sensitive_dict": [
          "isinstance",
          "any",
          "key.lower",
          "self._filter_sensitive_dict",
          "data.items"
        ],
        "_get_overall_health_emoji": [],
        "_get_context_status_emoji": [
          "len"
        ],
        "_get_ai_integration_emoji": [
          "hasattr"
        ],
        "_get_goal_alignment_status": [
          "self._load_personal_bridge"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "asdict",
        "create_ai_cli_integration",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "get_ai_enhanced_cli_summary",
        "get_auto_update_config",
        "get_context_config",
        "get_context_for_scenario",
        "get_copilot_config",
        "get_directory_structure",
        "get_metrics_summary",
        "get_optimized_context",
        "get_queue_config",
        "initialize_copilot",
        "is_auto_update_enabled",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cache",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "logging",
        "os",
        "pathlib",
        "psutil",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f860b992-609b-4aaa-bbe5-fadf606be67c"
    },
    {
      "module_id": "llmstruct.__init__",
      "path": "llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "LLMClient",
        "SystemCapabilityDiscovery",
        "ai_cli_integration",
        "ai_self_awareness",
        "llm_client"
      ],
      "hash": null,
      "artifact_id": "cff7befb-1b57-4c88-bcd4-bf7003f52595"
    },
    {
      "module_id": "llmstruct.modules.cli.epic",
      "path": "llmstruct/modules/cli/epic.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "show_links",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "add_epic_cli_subparser",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "open",
          "json.load"
        ],
        "show_links": [
          "link_map.items",
          "Path",
          "t.upper",
          "print",
          "results.items",
          "epic.get",
          "load_json",
          "item.get",
          "str",
          "json.dumps",
          "data.get",
          "epic_path.exists",
          "status_filter.lower"
        ],
        "add_epic_cli_subparser": [
          "epic_sub.add_parser",
          "epic_parser.add_subparsers",
          "show_links_parser.set_defaults",
          "subparsers.add_parser",
          "show_links_parser.add_argument"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "e34be118-a241-41ab-bc00-bd7c3f5d2b06"
    },
    {
      "module_id": "llmstruct.modules.cli.handlers_legacy",
      "path": "llmstruct/modules/cli/handlers_legacy.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive_legacy": [
          "m.group",
          "client.query",
          "attach_to_llm_request",
          "write_to_file",
          "json.dumps",
          "read_file_content",
          "get_folder_structure",
          "load_gitignore",
          "args_str.strip",
          "parse",
          "user_input.lower",
          "Path",
          "user_input.startswith",
          "JSONCache",
          "logging.error",
          "LLMClient",
          "os.listdir",
          "print",
          "cache.close",
          "sorted",
          "re.match",
          "logging.warning",
          "input"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "bc0021d0-b0ff-4a28-9176-7064c4feae69"
    },
    {
      "module_id": "llmstruct.modules.cli.analyze_duplicates",
      "path": "llmstruct/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "analyze_duplicates": [
          "orchestrator.analyze_codebase_for_duplicates",
          "rec.get",
          "traceback.print_exc",
          "print",
          "len",
          "json.dump",
          "open",
          "sorted",
          "r.get",
          "enumerate",
          "WorkflowOrchestrator",
          "hasattr",
          "filtered_duplicates.items",
          "json.dumps",
          "duplication_data.get",
          "getattr",
          "duplicates.items",
          "analysis.get"
        ]
      },
      "dependencies": [
        "WorkflowOrchestrator",
        "json",
        "llmstruct.workflow_orchestrator",
        "traceback"
      ],
      "hash": null,
      "artifact_id": "1b88f024-8eb6-47d3-8b13-4bfdf923c299"
    },
    {
      "module_id": "llmstruct.modules.cli.copilot",
      "path": "llmstruct/modules/cli/copilot.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "copilot": [
          "manager.load_context_layer",
          "smart_suggest",
          "manager.get_context_status",
          "logging.info",
          "initialize_copilot",
          "getattr",
          "layers.split",
          "f.write",
          "manager.unload_context_layer",
          "shutil.copy",
          "open",
          "manager.refresh_all_contexts",
          "config_path.exists",
          "Path",
          "hasattr",
          "logging.error",
          "manager.close",
          "template_path.exists",
          "print",
          "manager.export_context",
          "enumerate",
          "manager.validate_change"
        ]
      },
      "dependencies": [
        "Path",
        "initialize_copilot",
        "llmstruct.copilot",
        "logging",
        "pathlib",
        "shutil",
        "smart_suggest"
      ],
      "hash": null,
      "artifact_id": "96cda3ae-0908-4417-8e3d-d625e0843923"
    },
    {
      "module_id": "llmstruct.modules.cli.handlers",
      "path": "llmstruct/modules/cli/handlers.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive": [
          "logging.warning",
          "interactive_legacy",
          "interactive_modular"
        ],
        "interactive_modular": [
          "hasattr",
          "create_cli_core",
          "logging.info",
          "cli_core.run_interactive_mode"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "create_cli_core",
        "get_folder_structure",
        "interactive_legacy",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.cli_core",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.handlers_legacy",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "2ce2bfba-253d-448c-8cd1-b33f9a22e570"
    },
    {
      "module_id": "llmstruct.modules.cli.review",
      "path": "llmstruct/modules/cli/review.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "review": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "923359ec-1afc-4781-b3eb-9aa468233509"
    },
    {
      "module_id": "llmstruct.modules.cli.dogfood",
      "path": "llmstruct/modules/cli/dogfood.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "dogfood": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "d7ab0cae-eb03-41ad-a44e-37d29dd7aa3a"
    },
    {
      "module_id": "llmstruct.modules.cli.parse",
      "path": "llmstruct/modules/cli/parse.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse": [
          "generate_json",
          "logging.info",
          "getattr",
          "struct_path.open",
          "ast_path.open",
          "struct_data.get",
          "Path",
          "parsing_config.get",
          "cache.cache_json",
          "cli_config.get",
          "JSONCache",
          "func.get",
          "logging.error",
          "json.dump",
          "config.get",
          "cache.close",
          "mod_dir.mkdir",
          "module.get",
          "logging.warning",
          "load_config"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "generate_json",
        "json",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "load_config",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "c0bf28e0-aa50-4224-984f-0e8cea1302fe"
    },
    {
      "module_id": "llmstruct.modules.cli.audit",
      "path": "llmstruct/modules/cli/audit.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "audit": [
          "file_path.exists",
          "Path",
          "print",
          "analyze_duplicates",
          "hasattr"
        ]
      },
      "dependencies": [
        "Path",
        "analyze_duplicates",
        "llmstruct.cli",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "5c948f30-c36a-42e1-9e35-93859324045e"
    },
    {
      "module_id": "llmstruct.modules.cli.query",
      "path": "llmstruct/modules/cli/query.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "query": [
          "client.query",
          "Path",
          "json.dump",
          "cache.close",
          "hasattr",
          "JSONCache",
          "logging.info",
          "logging.error",
          "create_context_orchestrator",
          "orchestrator.get_context_for_scenario",
          "logging.warning",
          "client.query_with_context",
          "LLMClient"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "create_context_orchestrator",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "cd7b4750-cbd5-4ba3-9b58-0b2a550e12dd"
    },
    {
      "module_id": "llmstruct.modules.cli.utils",
      "path": "llmstruct/modules/cli/utils.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "config",
            "root_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.startswith",
          "Path",
          "line.strip",
          "gitignore_path.open",
          "gitignore_path.exists",
          "logging.error"
        ],
        "load_config": [
          "config_path.exists",
          "toml.load",
          "Path",
          "config_path.open",
          "logging.error"
        ],
        "read_file_content": [
          "path.is_file",
          "Path",
          "path.open",
          "logging.error",
          "f.read"
        ],
        "write_to_file": [
          "file_path.exists",
          "f.write",
          "Path",
          "re.sub",
          "logging.info",
          "logging.error",
          "base_path.mkdir",
          "str",
          "logging.warning",
          "file_path.open"
        ],
        "parse_files_from_response": [
          "filename.strip",
          "files.append",
          "re.findall",
          "content.strip"
        ],
        "get_cache_config": [
          "config.get"
        ],
        "get_copilot_config": [
          "config.get"
        ],
        "get_queue_config": [
          "config.get"
        ],
        "get_context_config": [
          "config.get"
        ],
        "get_exclude_dirs": [
          "set",
          "config.get",
          "list",
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_include_patterns": [
          "cli_config.get",
          "config.get",
          "parsing_config.get"
        ],
        "get_exclude_patterns": [
          "cli_config.get",
          "config.get",
          "parsing_config.get"
        ],
        "get_max_file_size": [
          "config.get"
        ],
        "get_struct_file_path": [
          "config.get"
        ],
        "get_context_file_path": [
          "config.get"
        ],
        "save_config": [
          "toml.dump",
          "config_path.open",
          "logging.error",
          "Path"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "logging",
        "pathlib",
        "re",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "04a03d19-856c-4a1f-9298-f5134cd098c7"
    },
    {
      "module_id": "llmstruct.modules.cli.context",
      "path": "llmstruct/modules/cli/context.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "context": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "5eb8a0b0-cd07-48e4-9042-a4dc82d1d0cd"
    },
    {
      "module_id": "llmstruct.modules.cli.__init__",
      "path": "llmstruct/modules/cli/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "3b088700-e2be-4ef0-8f0a-d261d35bff4c"
    },
    {
      "module_id": "llmstruct.modules.commands.queue",
      "path": "llmstruct/modules/commands/queue.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "process_cli_queue_enhanced": [
          "client.query",
          "read_file_content",
          "isinstance",
          "print",
          "time.time",
          "len",
          "options.get",
          "open",
          "workflow.get",
          "attach_to_llm_request",
          "logging.info",
          "logging.error",
          "item.get",
          "write_to_file",
          "enumerate",
          "get_folder_structure",
          "load_gitignore",
          "json.load"
        ]
      },
      "dependencies": [
        "attach_to_llm_request",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "f9730a92-22d2-4491-af04-c0f066bb7c41"
    },
    {
      "module_id": "llmstruct.modules.commands.metrics",
      "path": "llmstruct/modules/commands/metrics.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "metrics_status",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_summary",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0432\u043e\u0434\u043a\u0443 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_analytics",
          "docstring": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": null,
          "parameters": [
            "output_file",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "metrics_report",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0435\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u043e\u0442\u0447\u0435\u0442",
          "line_range": null,
          "parameters": [
            "sessions",
            "output_file"
          ],
          "decorators": []
        },
        {
          "name": "metrics_track",
          "docstring": "\u0420\u0443\u0447\u043d\u043e\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": null,
          "parameters": [
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "metrics_tokens",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "cmd_metrics",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "metrics_status": [
          "tracker.get_session_summary",
          "print",
          "get_metrics_tracker"
        ],
        "metrics_summary": [
          "tracker.get_session_summary",
          "print",
          "max",
          "get_metrics_tracker"
        ],
        "metrics_analytics": [
          "csv.writer",
          "tracker.get_analytics_data",
          "time.strftime",
          "tracker.get_session_summary",
          "print",
          "writer.writerow",
          "json.dump",
          "open",
          "json.dumps",
          "enumerate",
          "get_metrics_tracker"
        ],
        "metrics_report": [
          "min",
          "f.write",
          "tracker.get_analytics_data",
          "time.strftime",
          "print",
          "len",
          "analytics.get",
          "open",
          "sum",
          "get_metrics_tracker"
        ],
        "metrics_track": [
          "track_workflow_event",
          "print"
        ],
        "metrics_tokens": [
          "summary.get",
          "print",
          "interaction.get",
          "get_token_summary",
          "enumerate",
          "get_metrics_tracker"
        ],
        "cmd_metrics": [
          "metrics_track",
          "print",
          "metrics_report",
          "metrics_status",
          "metrics_analytics",
          "metrics_tokens",
          "metrics_summary"
        ]
      },
      "dependencies": [
        "csv",
        "get_metrics_tracker",
        "get_token_summary",
        "json",
        "llmstruct.metrics_tracker",
        "time",
        "track_workflow_event"
      ],
      "hash": null,
      "artifact_id": "f6addef1-584c-4e35-9ec0-84db3df1af24"
    },
    {
      "module_id": "llmstruct.modules.commands.services",
      "path": "llmstruct/modules/commands/services.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "add_api_bot_commands",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f API \u0438 Bot \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438",
          "line_range": null,
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        },
        {
          "name": "cmd_api_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 API \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_bot_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430\u043c\u0438",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_services",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 (API + Bots)",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "add_api_bot_commands": [
          "api_start.add_argument",
          "api_parser.add_subparsers",
          "metrics_analytics.add_argument",
          "bot_subparsers.add_parser",
          "services_parser.add_subparsers",
          "metrics_report.add_argument",
          "metrics_parser.add_subparsers",
          "services_subparsers.add_parser",
          "metrics_track.add_argument",
          "metrics_subparsers.add_parser",
          "api_subparsers.add_parser",
          "subparsers.add_parser",
          "bot_parser.add_subparsers",
          "bot_start.add_argument"
        ],
        "cmd_api_management": [
          "process.terminate",
          "f.write",
          "psutil.Process",
          "requests.get",
          "Path",
          "int",
          "subprocess.Popen",
          "print",
          "pid_file.exists",
          "venv_path.exists",
          "open",
          "process.wait",
          "str",
          "response.json",
          "pid_file.unlink",
          "f.read",
          "data.get",
          "requests.post"
        ],
        "cmd_bot_management": [
          "process.terminate",
          "f.write",
          "psutil.Process",
          "os.getenv",
          "Path",
          "int",
          "subprocess.Popen",
          "print",
          "pid_file.exists",
          "open",
          "process.is_running",
          "bot_scripts.get",
          "str",
          "process.wait",
          "pid_file.unlink",
          "f.read",
          "active_bots.append"
        ],
        "cmd_services": [
          "type",
          "cmd_bot_management",
          "cmd_api_management",
          "print",
          "time.sleep"
        ]
      },
      "dependencies": [
        "Path",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "signal",
        "subprocess",
        "time"
      ],
      "hash": null,
      "artifact_id": "bda7f55a-a0a7-46b2-bc90-4fb0b54b04ef"
    },
    {
      "module_id": "llmstruct.modules.commands.__init__",
      "path": "llmstruct/modules/commands/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "fd86c9d8-06c8-47c4-965f-12c94ae2d896"
    },
    {
      "module_id": "llmstruct.templates.__init__",
      "path": "llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "8a5d0263-1a24-40a3-a7fc-0de00e75bd00"
    },
    {
      "module_id": "llmstruct.api.config",
      "path": "llmstruct/api/config.py",
      "category": "core",
      "module_doc": "Configuration management for LLMStruct FastAPI",
      "functions": [],
      "classes": [
        {
          "name": "Settings",
          "docstring": "Application settings with environment variable support",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseSettings"
          ]
        }
      ],
      "callgraph": {},
      "dependencies": [
        "BaseSettings",
        "List",
        "pydantic",
        "pydantic_settings",
        "typing"
      ],
      "hash": null,
      "artifact_id": "537f4df4-d36d-4d70-b5f0-601abbbf6cdd"
    },
    {
      "module_id": "llmstruct.api.app",
      "path": "llmstruct/api/app.py",
      "category": "core",
      "module_doc": "Main FastAPI application for LLMStruct",
      "functions": [
        {
          "name": "root",
          "docstring": "Root endpoint with API information",
          "line_range": null,
          "parameters": [],
          "decorators": [
            "app.get('/', tags=['root'])"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "root": [
          "app.get"
        ]
      },
      "dependencies": [
        "CORSMiddleware",
        "Depends",
        "FastAPI",
        "GZipMiddleware",
        "api_key_middleware",
        "chat",
        "config",
        "continue_adapter",
        "fastapi",
        "fastapi.middleware.cors",
        "fastapi.middleware.gzip",
        "logging",
        "middleware.auth",
        "middleware.logging",
        "request_logging_middleware",
        "routes",
        "settings",
        "system",
        "uvicorn"
      ],
      "hash": null,
      "artifact_id": "28fba4a1-ad5b-4512-bd0c-4e0d914bea51"
    },
    {
      "module_id": "llmstruct.api.__init__",
      "path": "llmstruct/api/__init__.py",
      "category": "cli",
      "module_doc": "LLMStruct FastAPI Module\n\nProvides HTTP REST API access to LLMStruct CLI functionality.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "62d32b23-0dc3-4f8f-af0a-c138e01f48f0"
    },
    {
      "module_id": "llmstruct.api.routes.chat",
      "path": "llmstruct/api/routes/chat.py",
      "category": "core",
      "module_doc": "Chat Routes\n\nWebSocket-based real-time chat with LLM integration",
      "functions": [
        {
          "name": "websocket_chat",
          "docstring": "WebSocket endpoint for real-time chat",
          "line_range": null,
          "parameters": [
            "websocket",
            "session_id",
            "api_key"
          ],
          "decorators": [
            "router.websocket('/chat/ws')"
          ]
        },
        {
          "name": "list_sessions",
          "docstring": "List active chat sessions",
          "line_range": null,
          "parameters": [],
          "decorators": [
            "router.get('/chat/sessions', dependencies=[Depends(get_api_key)])"
          ]
        },
        {
          "name": "get_session",
          "docstring": "Get session details and history",
          "line_range": null,
          "parameters": [
            "session_id"
          ],
          "decorators": [
            "router.get('/chat/sessions/{session_id}', dependencies=[Depends(get_api_key)])"
          ]
        },
        {
          "name": "delete_session",
          "docstring": "Delete a chat session",
          "line_range": null,
          "parameters": [
            "session_id"
          ],
          "decorators": [
            "router.delete('/chat/sessions/{session_id}', dependencies=[Depends(get_api_key)])"
          ]
        },
        {
          "name": "send_message",
          "docstring": "Send a message via HTTP (alternative to WebSocket)",
          "line_range": null,
          "parameters": [
            "message"
          ],
          "decorators": [
            "router.post('/chat/message', dependencies=[Depends(get_api_key)])"
          ]
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "connect",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "websocket",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "disconnect",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "session_id",
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ConnectionManager",
          "docstring": "Manages WebSocket connections",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "connect",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "websocket",
                "session_id"
              ]
            },
            {
              "name": "disconnect",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "send_message",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "session_id",
                "message"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "connect": [
          "websocket.accept",
          "logger.info"
        ],
        "disconnect": [
          "logger.info"
        ],
        "send_message": [
          "router.post",
          "llm_service.process_message",
          "Depends",
          "HTTPException",
          "str",
          "logger.error",
          "ChatResponse",
          "session_manager.add_message"
        ],
        "websocket_chat": [
          "manager.disconnect",
          "websocket.receive_text",
          "router.websocket",
          "manager.connect",
          "websocket.close",
          "logger.info",
          "llm_service.process_message",
          "uuid.uuid4",
          "message_data.get",
          "str",
          "manager.send_message",
          "logger.error",
          "datetime.now",
          "session_manager.get_or_create_session",
          "json.loads",
          "session_manager.add_message"
        ],
        "list_sessions": [
          "session_manager.list_sessions",
          "Depends",
          "router.get"
        ],
        "get_session": [
          "session_manager.get_session",
          "Depends",
          "HTTPException",
          "router.get"
        ],
        "delete_session": [
          "router.delete",
          "HTTPException",
          "Depends",
          "session_manager.delete_session"
        ]
      },
      "dependencies": [
        "APIRouter",
        "Any",
        "ChatMessage",
        "ChatResponse",
        "ChatSessionManager",
        "Depends",
        "Dict",
        "HTTPBearer",
        "HTTPException",
        "LLMService",
        "Optional",
        "WebSocket",
        "WebSocketDisconnect",
        "asyncio",
        "datetime",
        "fastapi",
        "fastapi.security",
        "get_api_key",
        "json",
        "logging",
        "middleware.auth",
        "models.requests",
        "models.responses",
        "services.chat_session",
        "services.llm_service",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "8a020ecf-8a0b-4b5f-a060-ca057d2e7782"
    },
    {
      "module_id": "llmstruct.api.routes.continue_adapter",
      "path": "llmstruct/api/routes/continue_adapter.py",
      "category": "core",
      "module_doc": "Continue API Adapter\n\nTranslates Continue extension requests to LLMStruct chat API format",
      "functions": [
        {
          "name": "continue_chat_completion",
          "docstring": "Continue-compatible chat completion endpoint\nTranslates Continue requests to our LLMStruct format",
          "line_range": null,
          "parameters": [
            "request",
            "api_key"
          ],
          "decorators": [
            "router.post('/v1/chat/completions')"
          ]
        },
        {
          "name": "continue_models",
          "docstring": "List available models for Continue",
          "line_range": null,
          "parameters": [
            "api_key"
          ],
          "decorators": [
            "router.get('/v1/models')"
          ]
        },
        {
          "name": "continue_embeddings",
          "docstring": "Embeddings endpoint for Continue (placeholder)",
          "line_range": null,
          "parameters": [
            "request",
            "api_key"
          ],
          "decorators": [
            "router.post('/v1/embeddings')"
          ]
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "messages",
            "model",
            "temperature",
            "max_tokens",
            "stream"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContinueRequest",
          "docstring": "Continue API request format",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "messages",
                "model",
                "temperature",
                "max_tokens",
                "stream"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "ContinueResponse",
          "docstring": "Continue API response format (OpenAI-compatible)",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "int",
          "datetime.now",
          "len",
          "content.split"
        ],
        "continue_chat_completion": [
          "router.post",
          "msg.get",
          "len",
          "request.json",
          "request_data.get",
          "llm_service.process_message",
          "reversed",
          "Depends",
          "HTTPException",
          "logger.info",
          "logger.error",
          "datetime.now",
          "str",
          "ContinueResponse"
        ],
        "continue_models": [
          "int",
          "datetime.now",
          "Depends",
          "router.get"
        ],
        "continue_embeddings": [
          "router.post",
          "len",
          "request.json",
          "request_data.get",
          "input_text.split",
          "Depends",
          "HTTPException",
          "str",
          "logger.error"
        ]
      },
      "dependencies": [
        "APIRouter",
        "Any",
        "ChatMessage",
        "ChatResponse",
        "Depends",
        "Dict",
        "HTTPException",
        "LLMService",
        "List",
        "Optional",
        "Request",
        "datetime",
        "fastapi",
        "get_api_key",
        "logging",
        "middleware.auth",
        "models.requests",
        "models.responses",
        "services.llm_service",
        "typing"
      ],
      "hash": null,
      "artifact_id": "3868d99d-66ae-4501-b9c6-af2ad7b274ca"
    },
    {
      "module_id": "llmstruct.api.routes.system",
      "path": "llmstruct/api/routes/system.py",
      "category": "core",
      "module_doc": "System routes for LLMStruct FastAPI\n\nHealth checks, metrics, and system information endpoints.",
      "functions": [
        {
          "name": "get_cli_bridge",
          "docstring": "Dependency to get CLI bridge instance",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "health_check",
          "docstring": "Health check endpoint\n\nReturns the health status of the API and its dependencies.\nThis endpoint does not require authentication.",
          "line_range": null,
          "parameters": [
            "cli"
          ],
          "decorators": [
            "router.get('/health', response_model=HealthResponse)"
          ]
        },
        {
          "name": "get_system_status",
          "docstring": "Get detailed system status\n\nReturns detailed system information including:\n- API version and configuration\n- CLI status and version\n- Resource usage (if available)",
          "line_range": null,
          "parameters": [],
          "decorators": [
            "router.get('/status')"
          ]
        },
        {
          "name": "get_version",
          "docstring": "Get API version information\n\nReturns version information for the API and underlying components.",
          "line_range": null,
          "parameters": [],
          "decorators": [
            "router.get('/version')"
          ]
        },
        {
          "name": "ping",
          "docstring": "Simple ping endpoint for basic connectivity testing",
          "line_range": null,
          "parameters": [],
          "decorators": [
            "router.get('/ping')"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "get_cli_bridge": [
          "CLIBridge"
        ],
        "health_check": [
          "cli.health_check",
          "HealthResponse",
          "cli_health.get",
          "Depends",
          "str",
          "datetime.utcnow",
          "router.get"
        ],
        "get_system_status": [
          "cli.health_check",
          "cli_health.get",
          "CLIBridge",
          "HTTPException",
          "str",
          "datetime.utcnow",
          "router.get"
        ],
        "get_version": [
          "cli.health_check",
          "cli_health.get",
          "CLIBridge",
          "HTTPException",
          "str",
          "datetime.utcnow",
          "router.get"
        ],
        "ping": [
          "datetime.utcnow",
          "router.get"
        ]
      },
      "dependencies": [
        "APIRouter",
        "CLIBridge",
        "Depends",
        "HTTPException",
        "HealthResponse",
        "HealthStatus",
        "asyncio",
        "datetime",
        "fastapi",
        "models.responses",
        "services.cli_bridge"
      ],
      "hash": null,
      "artifact_id": "da5b6f00-ad04-49cc-b86f-2c8145aaa06b"
    },
    {
      "module_id": "llmstruct.api.routes.__init__",
      "path": "llmstruct/api/routes/__init__.py",
      "category": "cli",
      "module_doc": "Routes package for LLMStruct FastAPI\n\nContains all API endpoint routers.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "0c25c0b4-a0fc-4ed7-94b4-499a1957bcb6"
    },
    {
      "module_id": "llmstruct.api.models.responses",
      "path": "llmstruct/api/models/responses.py",
      "category": "core",
      "module_doc": "Response models for LLMStruct FastAPI",
      "functions": [],
      "classes": [
        {
          "name": "TaskStatus",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": [
            "str",
            "Enum"
          ]
        },
        {
          "name": "HealthStatus",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": [
            "str",
            "Enum"
          ]
        },
        {
          "name": "ProjectInfo",
          "docstring": "Response model for project information",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ScanResponse",
          "docstring": "Response model for project scan results",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ContextResponse",
          "docstring": "Response model for context generation",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "TaskResponse",
          "docstring": "Response model for task operations",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "QueryResponse",
          "docstring": "Response model for LLM queries",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ValidationResponse",
          "docstring": "Response model for JSON validation",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HealthResponse",
          "docstring": "Response model for health checks",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ErrorResponse",
          "docstring": "Response model for API errors",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ChatResponse",
          "docstring": "Chat response",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {},
      "dependencies": [
        "Any",
        "BaseModel",
        "Dict",
        "Enum",
        "Field",
        "List",
        "Optional",
        "datetime",
        "enum",
        "pydantic",
        "typing"
      ],
      "hash": null,
      "artifact_id": "e1c5b325-129a-4960-8a37-8a76209fcfa7"
    },
    {
      "module_id": "llmstruct.api.models.requests",
      "path": "llmstruct/api/models/requests.py",
      "category": "core",
      "module_doc": "Request models for LLMStruct FastAPI",
      "functions": [],
      "classes": [
        {
          "name": "ContextMode",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": [
            "str",
            "Enum"
          ]
        },
        {
          "name": "Priority",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": [
            "str",
            "Enum"
          ]
        },
        {
          "name": "ScanRequest",
          "docstring": "Request model for project scanning",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ContextRequest",
          "docstring": "Request model for context generation",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "TaskCreateRequest",
          "docstring": "Request model for creating tasks",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "TaskUpdateRequest",
          "docstring": "Request model for updating tasks",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "QueryRequest",
          "docstring": "Request model for LLM queries",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ValidationRequest",
          "docstring": "Request model for JSON validation",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ChatMessage",
          "docstring": "Chat message request",
          "line_range": null,
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {},
      "dependencies": [
        "Any",
        "BaseModel",
        "Dict",
        "Enum",
        "Field",
        "List",
        "Optional",
        "enum",
        "pydantic",
        "typing"
      ],
      "hash": null,
      "artifact_id": "64c03eb7-6943-4084-bc42-645f09089408"
    },
    {
      "module_id": "llmstruct.api.models.__init__",
      "path": "llmstruct/api/models/__init__.py",
      "category": "cli",
      "module_doc": "Pydantic models for LLMStruct FastAPI\n\nDefines request and response models for API endpoints.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "c10ba681-f8c9-4768-b7eb-a41032be002f"
    },
    {
      "module_id": "llmstruct.api.middleware.auth",
      "path": "llmstruct/api/middleware/auth.py",
      "category": "core",
      "module_doc": "Authentication middleware for LLMStruct FastAPI",
      "functions": [
        {
          "name": "get_api_key",
          "docstring": "FastAPI dependency for API key authentication",
          "line_range": null,
          "parameters": [
            "request",
            "credentials"
          ],
          "decorators": []
        },
        {
          "name": "api_key_middleware",
          "docstring": "API key authentication middleware",
          "line_range": null,
          "parameters": [
            "request",
            "call_next"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_api_key": [
          "Depends",
          "HTTPException"
        ],
        "api_key_middleware": [
          "JSONResponse",
          "call_next",
          "time.time",
          "auth_header.startswith"
        ]
      },
      "dependencies": [
        "Callable",
        "Depends",
        "HTTPAuthorizationCredentials",
        "HTTPBearer",
        "HTTPException",
        "JSONResponse",
        "Optional",
        "Request",
        "config",
        "fastapi",
        "fastapi.security",
        "settings",
        "starlette.responses",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "71d31acf-ba0c-4f29-bd8c-d2a330cae186"
    },
    {
      "module_id": "llmstruct.api.middleware.logging",
      "path": "llmstruct/api/middleware/logging.py",
      "category": "core",
      "module_doc": "Logging middleware for LLMStruct FastAPI",
      "functions": [
        {
          "name": "request_logging_middleware",
          "docstring": "Request and response logging middleware",
          "line_range": null,
          "parameters": [
            "request",
            "call_next"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "request_logging_middleware": [
          "call_next",
          "time.time",
          "uuid.uuid4",
          "str",
          "logger.info",
          "logger.error",
          "getattr"
        ]
      },
      "dependencies": [
        "Callable",
        "Request",
        "fastapi",
        "logging",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "2a785395-85a1-4dea-afa9-722c1597104e"
    },
    {
      "module_id": "llmstruct.api.middleware.__init__",
      "path": "llmstruct/api/middleware/__init__.py",
      "category": "cli",
      "module_doc": "Middleware package for LLMStruct FastAPI\n\nContains authentication, logging, and other middleware.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "1feec786-2bf3-4023-9810-301f067310dc"
    },
    {
      "module_id": "llmstruct.api.services.llm_service",
      "path": "llmstruct/api/services/llm_service.py",
      "category": "core",
      "module_doc": "LLM Service\n\nIntegrates with existing LLM models and context orchestration",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "context_info",
            "token_usage"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "api_key"
          ],
          "decorators": []
        },
        {
          "name": "chat_completion",
          "docstring": "Send chat completion request to Anthropic",
          "line_range": null,
          "parameters": [
            "self",
            "messages",
            "temperature"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "api_key"
          ],
          "decorators": []
        },
        {
          "name": "chat_completion",
          "docstring": "Send chat completion request to Grok",
          "line_range": null,
          "parameters": [
            "self",
            "messages",
            "temperature"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_components",
          "docstring": "Initialize context orchestrator and copilot manager",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_message",
          "docstring": "Process a user message and return AI response",
          "line_range": null,
          "parameters": [
            "self",
            "message",
            "session_id",
            "context_mode"
          ],
          "decorators": []
        },
        {
          "name": "_try_llm_providers",
          "docstring": "Try LLM providers in order and return response",
          "line_range": null,
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_get_context",
          "docstring": "Get relevant context for the message",
          "line_range": null,
          "parameters": [
            "self",
            "message",
            "context_mode"
          ],
          "decorators": []
        },
        {
          "name": "_get_full_context",
          "docstring": "Get full project context",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_focused_context",
          "docstring": "Get focused context based on message content",
          "line_range": null,
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "_get_minimal_context",
          "docstring": "Get minimal context - basic project info",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_generate_grok_response",
          "docstring": "Generate response using Grok API",
          "line_range": null,
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_generate_anthropic_response",
          "docstring": "Generate response using Anthropic API",
          "line_range": null,
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_build_system_prompt",
          "docstring": "Build system prompt with project context",
          "line_range": null,
          "parameters": [
            "self",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_generate_mock_response",
          "docstring": "Generate a mock AI response (placeholder for real LLM)",
          "line_range": null,
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMResponse",
          "docstring": "Response from LLM processing",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "context_info",
                "token_usage"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "AnthropicClient",
          "docstring": "Client for Anthropic Claude API",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "api_key"
              ]
            },
            {
              "name": "chat_completion",
              "docstring": "Send chat completion request to Anthropic",
              "line_range": null,
              "parameters": [
                "self",
                "messages",
                "temperature"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "GrokClient",
          "docstring": "Client for Grok API integration",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "api_key"
              ]
            },
            {
              "name": "chat_completion",
              "docstring": "Send chat completion request to Grok",
              "line_range": null,
              "parameters": [
                "self",
                "messages",
                "temperature"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "LLMService",
          "docstring": "Service for LLM processing with context integration",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "base_path"
              ]
            },
            {
              "name": "_initialize_components",
              "docstring": "Initialize context orchestrator and copilot manager",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_message",
              "docstring": "Process a user message and return AI response",
              "line_range": null,
              "parameters": [
                "self",
                "message",
                "session_id",
                "context_mode"
              ]
            },
            {
              "name": "_try_llm_providers",
              "docstring": "Try LLM providers in order and return response",
              "line_range": null,
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            },
            {
              "name": "_get_context",
              "docstring": "Get relevant context for the message",
              "line_range": null,
              "parameters": [
                "self",
                "message",
                "context_mode"
              ]
            },
            {
              "name": "_get_full_context",
              "docstring": "Get full project context",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_focused_context",
              "docstring": "Get focused context based on message content",
              "line_range": null,
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "_get_minimal_context",
              "docstring": "Get minimal context - basic project info",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_generate_grok_response",
              "docstring": "Generate response using Grok API",
              "line_range": null,
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            },
            {
              "name": "_generate_anthropic_response",
              "docstring": "Generate response using Anthropic API",
              "line_range": null,
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            },
            {
              "name": "_build_system_prompt",
              "docstring": "Build system prompt with project context",
              "line_range": null,
              "parameters": [
                "self",
                "context_info"
              ]
            },
            {
              "name": "_generate_mock_response",
              "docstring": "Generate a mock AI response (placeholder for real LLM)",
              "line_range": null,
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "GrokClient",
          "self._initialize_components",
          "Path.cwd",
          "AnthropicClient"
        ],
        "chat_completion": [
          "response.raise_for_status",
          "client.post",
          "ValueError",
          "response.json",
          "httpx.AsyncClient"
        ],
        "_initialize_components": [
          "CopilotContextManager",
          "logger.info",
          "str",
          "SmartContextOrchestrator",
          "logger.error"
        ],
        "process_message": [
          "self._get_context",
          "logger.error",
          "LLMResponse",
          "str",
          "self._try_llm_providers"
        ],
        "_try_llm_providers": [
          "logger.warning",
          "self._generate_mock_response",
          "len",
          "self._generate_anthropic_response",
          "self._generate_grok_response",
          "logger.info"
        ],
        "_get_context": [
          "self._get_focused_context",
          "logger.error",
          "self._get_minimal_context",
          "context_info.update",
          "str",
          "self._get_full_context"
        ],
        "_get_full_context": [
          "struct_data.get",
          "len",
          "open",
          "list",
          "struct_file.exists",
          "json.load"
        ],
        "_get_focused_context": [
          "message.lower",
          "any"
        ],
        "_get_minimal_context": [
          "datetime.now",
          "str"
        ],
        "_generate_grok_response": [
          "self._build_system_prompt",
          "ValueError",
          "len"
        ],
        "_generate_anthropic_response": [
          "self._build_system_prompt",
          "ValueError",
          "len"
        ],
        "_build_system_prompt": [
          "context_info.get"
        ],
        "_generate_mock_response": [
          "message.lower",
          "len",
          "context_info.get"
        ]
      },
      "dependencies": [
        "Any",
        "CopilotContextManager",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "asyncio",
        "context_orchestrator",
        "copilot",
        "datetime",
        "httpx",
        "json",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "fdaa9fbd-787f-4620-a770-96f3a8ef8978"
    },
    {
      "module_id": "llmstruct.api.services.cli_bridge",
      "path": "llmstruct/api/services/cli_bridge.py",
      "category": "core",
      "module_doc": "CLI Bridge Service\n\nProvides async integration between FastAPI and existing LLMStruct CLI functionality.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "_get_python_command",
          "docstring": "Determine the best Python command to use",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "scan_project",
          "docstring": "Execute project scan via CLI",
          "line_range": null,
          "parameters": [
            "self",
            "options"
          ],
          "decorators": []
        },
        {
          "name": "get_context",
          "docstring": "Get project context in specified mode",
          "line_range": null,
          "parameters": [
            "self",
            "mode",
            "include_files"
          ],
          "decorators": []
        },
        {
          "name": "get_project_info",
          "docstring": "Get basic project information",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON structure",
          "line_range": null,
          "parameters": [
            "self",
            "json_path"
          ],
          "decorators": []
        },
        {
          "name": "health_check",
          "docstring": "Check CLI health and availability",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_run_command",
          "docstring": "Run CLI command asynchronously",
          "line_range": null,
          "parameters": [
            "self",
            "cmd",
            "timeout"
          ],
          "decorators": []
        },
        {
          "name": "_parse_cli_output",
          "docstring": "Parse CLI JSON output",
          "line_range": null,
          "parameters": [
            "self",
            "output"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIBridgeError",
          "docstring": "CLI Bridge specific errors",
          "line_range": null,
          "methods": [],
          "bases": [
            "Exception"
          ]
        },
        {
          "name": "CLIBridge",
          "docstring": "Bridge between FastAPI and existing CLI functionality",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "base_path"
              ]
            },
            {
              "name": "_get_python_command",
              "docstring": "Determine the best Python command to use",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "scan_project",
              "docstring": "Execute project scan via CLI",
              "line_range": null,
              "parameters": [
                "self",
                "options"
              ]
            },
            {
              "name": "get_context",
              "docstring": "Get project context in specified mode",
              "line_range": null,
              "parameters": [
                "self",
                "mode",
                "include_files"
              ]
            },
            {
              "name": "get_project_info",
              "docstring": "Get basic project information",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON structure",
              "line_range": null,
              "parameters": [
                "self",
                "json_path"
              ]
            },
            {
              "name": "health_check",
              "docstring": "Check CLI health and availability",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_run_command",
              "docstring": "Run CLI command asynchronously",
              "line_range": null,
              "parameters": [
                "self",
                "cmd",
                "timeout"
              ]
            },
            {
              "name": "_parse_cli_output",
              "docstring": "Parse CLI JSON output",
              "line_range": null,
              "parameters": [
                "self",
                "output"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path.cwd",
          "self._get_python_command"
        ],
        "_get_python_command": [
          "venv_python.exists",
          "str"
        ],
        "scan_project": [
          "cmd.append",
          "self._parse_cli_output",
          "os.close",
          "options.get",
          "logger.error",
          "cmd.extend",
          "self._run_command",
          "open",
          "tempfile.mkstemp",
          "os.unlink",
          "json.load"
        ],
        "get_context": [
          "self._parse_cli_output",
          "cmd.extend",
          "self._run_command"
        ],
        "get_project_info": [
          "self._parse_cli_output",
          "self._run_command"
        ],
        "validate_json": [
          "self._parse_cli_output",
          "self._run_command"
        ],
        "health_check": [
          "str",
          "self._run_command"
        ],
        "_run_command": [
          "asyncio.wait_for",
          "stdout.decode",
          "asyncio.create_subprocess_exec",
          "stderr.decode",
          "process.communicate",
          "CLIBridgeError",
          "str",
          "logger.info",
          "logger.error"
        ],
        "_parse_cli_output": [
          "output.strip",
          "json.loads"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asyncio",
        "config",
        "json",
        "logging",
        "os",
        "pathlib",
        "settings",
        "subprocess",
        "tempfile",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f8d37c61-39b1-41d4-b847-41a2934e1372"
    },
    {
      "module_id": "llmstruct.api.services.chat_session",
      "path": "llmstruct/api/services/chat_session.py",
      "category": "core",
      "module_doc": "Chat Session Manager\n\nManages persistent chat sessions and conversation history",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "add_message",
          "docstring": "Add a message to the session",
          "line_range": null,
          "parameters": [
            "self",
            "role",
            "content",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "get_messages",
          "docstring": "Get messages from session, optionally limited",
          "line_range": null,
          "parameters": [
            "self",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "get_context_string",
          "docstring": "Get recent messages as context string",
          "line_range": null,
          "parameters": [
            "self",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "to_dict",
          "docstring": "Convert session to dictionary",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "storage_path"
          ],
          "decorators": []
        },
        {
          "name": "get_or_create_session",
          "docstring": "Get existing session or create new one",
          "line_range": null,
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "get_session",
          "docstring": "Get session by ID",
          "line_range": null,
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "add_message",
          "docstring": "Add message to session",
          "line_range": null,
          "parameters": [
            "self",
            "session_id",
            "role",
            "content",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "list_sessions",
          "docstring": "List all sessions with summary info",
          "line_range": null,
          "parameters": [
            "self",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "delete_session",
          "docstring": "Delete a session",
          "line_range": null,
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_load_session",
          "docstring": "Load session from storage",
          "line_range": null,
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_save_session",
          "docstring": "Save session to storage",
          "line_range": null,
          "parameters": [
            "self",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_sessions",
          "docstring": "Clean up sessions older than specified days",
          "line_range": null,
          "parameters": [
            "self",
            "days"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ChatSession",
          "docstring": "Represents a chat session with history",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "add_message",
              "docstring": "Add a message to the session",
              "line_range": null,
              "parameters": [
                "self",
                "role",
                "content",
                "metadata"
              ]
            },
            {
              "name": "get_messages",
              "docstring": "Get messages from session, optionally limited",
              "line_range": null,
              "parameters": [
                "self",
                "limit"
              ]
            },
            {
              "name": "get_context_string",
              "docstring": "Get recent messages as context string",
              "line_range": null,
              "parameters": [
                "self",
                "limit"
              ]
            },
            {
              "name": "to_dict",
              "docstring": "Convert session to dictionary",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "ChatSessionManager",
          "docstring": "Manages multiple chat sessions",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "storage_path"
              ]
            },
            {
              "name": "get_or_create_session",
              "docstring": "Get existing session or create new one",
              "line_range": null,
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "get_session",
              "docstring": "Get session by ID",
              "line_range": null,
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "add_message",
              "docstring": "Add message to session",
              "line_range": null,
              "parameters": [
                "self",
                "session_id",
                "role",
                "content",
                "metadata"
              ]
            },
            {
              "name": "list_sessions",
              "docstring": "List all sessions with summary info",
              "line_range": null,
              "parameters": [
                "self",
                "limit"
              ]
            },
            {
              "name": "delete_session",
              "docstring": "Delete a session",
              "line_range": null,
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "_load_session",
              "docstring": "Load session from storage",
              "line_range": null,
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "_save_session",
              "docstring": "Save session to storage",
              "line_range": null,
              "parameters": [
                "self",
                "session"
              ]
            },
            {
              "name": "cleanup_old_sessions",
              "docstring": "Clean up sessions older than specified days",
              "line_range": null,
              "parameters": [
                "self",
                "days"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path.cwd"
        ],
        "add_message": [
          "self._save_session",
          "session.add_message",
          "self.get_or_create_session"
        ],
        "get_messages": [],
        "get_context_string": [
          "context_parts.append",
          "self.get_messages"
        ],
        "to_dict": [
          "len"
        ],
        "get_or_create_session": [
          "self._load_session",
          "session_file.exists",
          "ChatSession"
        ],
        "get_session": [
          "self._load_session",
          "session_file.exists"
        ],
        "list_sessions": [
          "self._load_session",
          "len",
          "sessions.append",
          "sessions.sort",
          "logger.error"
        ],
        "delete_session": [
          "session_file.exists",
          "session_file.unlink"
        ],
        "_load_session": [
          "data.get",
          "ChatSession",
          "open",
          "json.load"
        ],
        "_save_session": [
          "logger.error",
          "json.dump",
          "open",
          "session.to_dict"
        ],
        "cleanup_old_sessions": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asyncio",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "08bda02c-0f00-4691-a9f1-0200e69064a4"
    },
    {
      "module_id": "llmstruct.api.services.__init__",
      "path": "llmstruct/api/services/__init__.py",
      "category": "cli",
      "module_doc": "Services package for LLMStruct FastAPI\n\nContains business logic and integration services.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "9336aa80-c5fc-4a8e-a81f-af35530c8631"
    },
    {
      "module_id": "llmstruct.generators.json_generator",
      "path": "llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 include_dirs.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs",
            "include_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 include_dirs.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs",
            "include_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json_with_output_file",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output_file",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs",
            "include_ranges",
            "include_hashes",
            "goals"
          ],
          "decorators": []
        },
        {
          "name": "norm_dirname",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "d"
          ],
          "decorators": []
        },
        {
          "name": "is_included_dir",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "f"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "os.walk",
          "set",
          "Path",
          "abs_dir_path.match",
          "file_path.match",
          "p.endswith",
          "p.rstrip",
          "any",
          "sorted",
          "uuid.uuid4",
          "str",
          "structure.append",
          "file_path.relative_to",
          "abs_dir_path.relative_to",
          "abs_dir_path.joinpath"
        ],
        "build_toc_and_modules": [],
        "norm_dirname": [],
        "is_included_dir": [
          "norm_dirname",
          "any"
        ],
        "generate_json": [
          "set",
          "build_toc_and_modules",
          "Path",
          "len",
          "list",
          "uuid.uuid4",
          "str",
          "sum",
          "get_folder_structure"
        ],
        "generate_json_with_output_file": [
          "generate_json",
          "json.dump",
          "open"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "fbb13e62-50d3-4868-97f5-f99a135ce1c6"
    },
    {
      "module_id": "llmstruct.generators.go_json_generator",
      "path": "llmstruct/generators/go_json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_go_folder_structure",
          "docstring": "Capture directory and file structure for Go projects with artifact_id, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_go_toc_and_modules",
          "docstring": "Build TOC and modules for Go projects with artifact_id and robust filtering.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "extract_go_mod_info",
          "docstring": "Extract information from go.mod file.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "generate_go_json",
          "docstring": "Generate JSON structure for Go project with artifact_id, summary, and tags.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_go_folder_structure": [
          "os.walk",
          "set",
          "Path",
          "p.endswith",
          "p.rstrip",
          "any",
          "sorted",
          "uuid.uuid4",
          "str",
          "structure.append",
          "file_path.relative_to",
          "file_path.match"
        ],
        "build_go_toc_and_modules": [
          "set",
          "Path",
          "modules.append",
          "toc.append",
          "p.endswith",
          "p.rstrip",
          "any",
          "len",
          "uuid.uuid4",
          "f.match",
          "str",
          "module.get",
          "analyze_module"
        ],
        "extract_go_mod_info": [
          "content.strip",
          "line.startswith",
          "Path",
          "line.strip",
          "len",
          "open",
          "go_mod_path.exists",
          "line.split",
          "logging.error",
          "dependencies.append",
          "f.read"
        ],
        "generate_go_json": [
          "set",
          "Path",
          "build_go_toc_and_modules",
          "len",
          "list",
          "go_mod_info.get",
          "extract_go_mod_info",
          "uuid.uuid4",
          "str",
          "get_go_folder_structure",
          "sum",
          "m.get"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.go_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "6362e2ed-593d-4d67-ad5b-d30ae51138aa"
    },
    {
      "module_id": "llmstruct.generators.__init__",
      "path": "llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "38142613-9a30-4d0b-8b39-46d4721537c4"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_core",
      "path": "llmstruct/ARCHIVE/cli_core.py",
      "category": "core",
      "module_doc": "Core CLI functionality and main loop.",
      "functions": [
        {
          "name": "create_cli_core",
          "docstring": "Factory function to create CLI core instance.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI core with root directory.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_cache",
          "docstring": "Initialize cache if enabled in config.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_copilot",
          "docstring": "Initialize Copilot integration if enabled.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive_mode",
          "docstring": "Run the interactive CLI mode.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "Clean up resources.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLICore",
          "docstring": "Core CLI class handling main loop and coordination.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI core with root directory.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "setup_cache",
              "docstring": "Initialize cache if enabled in config.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_copilot",
              "docstring": "Initialize Copilot integration if enabled.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_interactive_mode",
              "docstring": "Run the interactive CLI mode.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CLIConfig",
          "CLIUtils",
          "CommandProcessor"
        ],
        "setup_cache": [
          "Path",
          "cache_path.mkdir",
          "JSONCache",
          "cache_config.get",
          "str",
          "logging.info",
          "logging.warning"
        ],
        "setup_copilot": [
          "initialize_copilot",
          "logging.warning",
          "copilot_config.get",
          "logging.info"
        ],
        "run_interactive_mode": [
          "user_input.lower",
          "print",
          "user_input.startswith",
          "self.setup_cache",
          "self.cleanup",
          "logging.error",
          "self.setup_copilot",
          "input"
        ],
        "cleanup": [
          "logging.info"
        ],
        "create_cli_core": [
          "CLICore"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "JSONCache",
        "Optional",
        "Path",
        "cli_commands",
        "cli_config",
        "cli_utils",
        "copilot",
        "initialize_copilot",
        "llmstruct.cache",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "23e06b8c-3bba-4c35-ab27-eb5d2bee15ae"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_config",
      "path": "llmstruct/ARCHIVE/cli_config.py",
      "category": "core",
      "module_doc": "CLI configuration management.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize configuration manager.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from llmstruct.toml.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "Get cache configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "Get Copilot configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "Get queue configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "Get context configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_gitignore_patterns",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "Get directories to exclude from scanning.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "Get file patterns to include.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "Get file patterns to exclude.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "Get maximum file size for processing (in bytes).",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_auto_update_config",
          "docstring": "Get auto-update configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_auto_update_enabled",
          "docstring": "Check if auto-update is enabled.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "Get path to struct.json file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "Get path to context file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "Save current configuration to file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_config",
          "docstring": "Update configuration value.",
          "line_range": null,
          "parameters": [
            "self",
            "section",
            "key",
            "value"
          ],
          "decorators": []
        },
        {
          "name": "reload_config",
          "docstring": "Reload configuration from file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIConfig",
          "docstring": "Manages CLI configuration from llmstruct.toml and other sources.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize configuration manager.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from llmstruct.toml.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cache_config",
              "docstring": "Get cache configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_copilot_config",
              "docstring": "Get Copilot configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_queue_config",
              "docstring": "Get queue configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_config",
              "docstring": "Get context configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_gitignore_patterns",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "Get directories to exclude from scanning.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_include_patterns",
              "docstring": "Get file patterns to include.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "Get file patterns to exclude.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_max_file_size",
              "docstring": "Get maximum file size for processing (in bytes).",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_auto_update_config",
              "docstring": "Get auto-update configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_auto_update_enabled",
              "docstring": "Check if auto-update is enabled.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_struct_file_path",
              "docstring": "Get path to struct.json file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_file_path",
              "docstring": "Get path to context file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_config",
              "docstring": "Save current configuration to file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_config",
              "docstring": "Update configuration value.",
              "line_range": null,
              "parameters": [
                "self",
                "section",
                "key",
                "value"
              ]
            },
            {
              "name": "reload_config",
              "docstring": "Reload configuration from file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path"
        ],
        "_load_config": [
          "toml.load",
          "logging.error"
        ],
        "get_cache_config": [],
        "get_copilot_config": [],
        "get_queue_config": [],
        "get_context_config": [],
        "get_gitignore_patterns": [
          "line.startswith",
          "Path",
          "line.strip",
          "gitignore_path.open",
          "gitignore_path.exists",
          "logging.error"
        ],
        "get_exclude_dirs": [
          "list",
          "cli_config.get",
          "set",
          "parsing_config.get"
        ],
        "get_include_patterns": [
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_exclude_patterns": [
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_max_file_size": [],
        "get_auto_update_config": [],
        "is_auto_update_enabled": [
          "self.get_auto_update_config"
        ],
        "get_struct_file_path": [],
        "get_context_file_path": [],
        "save_config": [
          "logging.error",
          "toml.dump"
        ],
        "update_config": [
          "self.save_config"
        ],
        "reload_config": [
          "self._load_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "logging",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "03f9ed8c-25d7-4150-aa11-c03637c13943"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_argument_parser",
      "path": "llmstruct/ARCHIVE/cli_argument_parser.py",
      "category": "core",
      "module_doc": "CLI argument parsing for LLMStruct.",
      "functions": [
        {
          "name": "create_argument_parser",
          "docstring": "Create and configure the main argument parser.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "add_api_bot_commands",
          "docstring": "Add API and bot management commands to the parser.",
          "line_range": null,
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        },
        {
          "name": "create_full_argument_parser",
          "docstring": "Create the full argument parser with all commands.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "create_argument_parser": [
          "duplicates_parser.add_argument",
          "interactive_parser.add_argument",
          "query_parser.add_argument",
          "argparse.ArgumentParser",
          "parse_parser.add_argument",
          "parser.add_subparsers",
          "dogfood_parser.add_argument",
          "review_parser.add_argument",
          "audit_parser.add_argument",
          "subparsers.add_parser",
          "copilot_parser.add_argument",
          "context_parser.add_argument"
        ],
        "add_api_bot_commands": [
          "add_api_commands",
          "add_bot_commands"
        ],
        "create_full_argument_parser": [
          "create_argument_parser",
          "add_api_bot_commands"
        ]
      },
      "dependencies": [
        "Path",
        "add_api_commands",
        "add_bot_commands",
        "api_commands",
        "argparse",
        "bot_commands",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "9623c73f-a3ce-4cc0-9860-b9893c2a3b5e"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_main_commands",
      "path": "llmstruct/ARCHIVE/cli_main_commands.py",
      "category": "core",
      "module_doc": "Main CLI command handlers for LLMStruct.",
      "functions": [
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "basic_interactive_processing",
          "docstring": "Basic interactive processing without enhanced features.",
          "line_range": null,
          "parameters": [
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse": [
          "generate_json",
          "cache.close",
          "JSONCache",
          "attach_to_llm_request",
          "logging.info",
          "logging.error",
          "load_gitignore"
        ],
        "query": [
          "client.query",
          "Path",
          "json.dump",
          "cache.close",
          "hasattr",
          "JSONCache",
          "logging.info",
          "logging.error",
          "create_context_orchestrator",
          "orchestrator.get_context_for_scenario",
          "logging.warning",
          "client.query_with_context",
          "LLMClient"
        ],
        "interactive": [
          "logging.warning",
          "interactive_legacy",
          "interactive_modular"
        ],
        "interactive_modular": [
          "interactive_legacy",
          "create_cli_core",
          "logging.error",
          "cli_core.run_interactive_mode"
        ],
        "interactive_legacy": [
          "Path",
          "print",
          "process_cli_queue_enhanced",
          "basic_interactive_processing",
          "cache.close",
          "JSONCache",
          "logging.error",
          "LLMClient"
        ],
        "basic_interactive_processing": [
          "user_input.lower",
          "client.query",
          "print",
          "user_input.startswith",
          "open",
          "f.read",
          "input"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "copilot": [
          "manager.load_context_layer",
          "smart_suggest",
          "manager.get_context_status",
          "logging.info",
          "initialize_copilot",
          "getattr",
          "layers.split",
          "f.write",
          "manager.unload_context_layer",
          "shutil.copy",
          "open",
          "manager.refresh_all_contexts",
          "config_path.exists",
          "Path",
          "hasattr",
          "logging.error",
          "manager.close",
          "template_path.exists",
          "print",
          "manager.export_context",
          "enumerate",
          "manager.validate_change"
        ],
        "audit": [
          "file_path.exists",
          "Path",
          "print",
          "analyze_duplicates",
          "hasattr"
        ],
        "analyze_duplicates": [
          "orchestrator.analyze_codebase_for_duplicates",
          "print",
          "len",
          "json.dump",
          "open",
          "WorkflowOrchestrator",
          "json.dumps",
          "func.get",
          "logging.error",
          "getattr",
          "f.get",
          "analysis.get"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Optional",
        "Path",
        "WorkflowOrchestrator",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "cli",
        "cli_core",
        "context_orchestrator",
        "copilot",
        "create_cli_core",
        "create_context_orchestrator",
        "generate_json",
        "initialize_copilot",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "process_cli_queue_enhanced",
        "shutil",
        "smart_suggest",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": null,
      "artifact_id": "c62856a5-fb0f-445c-9cbf-00721d4b2106"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_utils",
      "path": "llmstruct/ARCHIVE/cli_utils.py",
      "category": "core",
      "module_doc": "CLI utility functions.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize utils with root directory.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read file content with size limit.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "write_file_content",
          "docstring": "Write content to file.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "get_directory_structure",
          "docstring": "Get directory structure using folder generator.",
          "line_range": null,
          "parameters": [
            "self",
            "path",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON content.",
          "line_range": null,
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "format_json",
          "docstring": "Format data as JSON string.",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "indent"
          ],
          "decorators": []
        },
        {
          "name": "generate_unique_id",
          "docstring": "Generate unique ID for commands, queues, etc.",
          "line_range": null,
          "parameters": [
            "self",
            "prefix"
          ],
          "decorators": []
        },
        {
          "name": "safe_path_join",
          "docstring": "Safely join path parts, preventing directory traversal.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_exists",
          "docstring": "Check if file exists.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "dir_exists",
          "docstring": "Check if directory exists.",
          "line_range": null,
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_size",
          "docstring": "Get file size in bytes.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_file",
          "docstring": "Create backup of file with timestamp.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_backups",
          "docstring": "Clean up old backup files, keeping only the most recent ones.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "keep_count"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIUtils",
          "docstring": "Utility functions for CLI operations.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize utils with root directory.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "read_file_content",
              "docstring": "Read file content with size limit.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "max_size"
              ]
            },
            {
              "name": "write_file_content",
              "docstring": "Write content to file.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "content"
              ]
            },
            {
              "name": "get_directory_structure",
              "docstring": "Get directory structure using folder generator.",
              "line_range": null,
              "parameters": [
                "self",
                "path",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ]
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON content.",
              "line_range": null,
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "format_json",
              "docstring": "Format data as JSON string.",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "indent"
              ]
            },
            {
              "name": "generate_unique_id",
              "docstring": "Generate unique ID for commands, queues, etc.",
              "line_range": null,
              "parameters": [
                "self",
                "prefix"
              ]
            },
            {
              "name": "safe_path_join",
              "docstring": "Safely join path parts, preventing directory traversal.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_exists",
              "docstring": "Check if file exists.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "dir_exists",
              "docstring": "Check if directory exists.",
              "line_range": null,
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "get_file_size",
              "docstring": "Get file size in bytes.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "backup_file",
              "docstring": "Create backup of file with timestamp.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "cleanup_old_backups",
              "docstring": "Clean up old backup files, keeping only the most recent ones.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "keep_count"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "read_file_content": [
          "os.stat",
          "open",
          "logging.error",
          "logging.warning",
          "f.read"
        ],
        "write_file_content": [
          "f.write",
          "Path",
          "open",
          "logging.info",
          "logging.error"
        ],
        "get_directory_structure": [
          "sorted",
          "os.listdir",
          "get_folder_structure",
          "logging.error"
        ],
        "validate_json": [
          "json.loads",
          "str"
        ],
        "format_json": [
          "logging.error",
          "str",
          "json.dumps"
        ],
        "generate_unique_id": [
          "int",
          "uuid.uuid4",
          "time.time",
          "str"
        ],
        "safe_path_join": [
          "resolved_path.startswith",
          "ValueError"
        ],
        "file_exists": [
          "self.safe_path_join"
        ],
        "dir_exists": [
          "self.safe_path_join"
        ],
        "get_file_size": [
          "self.safe_path_join"
        ],
        "backup_file": [
          "dst.write",
          "int",
          "time.time",
          "open",
          "logging.error",
          "self.safe_path_join",
          "src.read"
        ],
        "cleanup_old_backups": [
          "os.listdir",
          "backups.append",
          "int",
          "backups.sort",
          "os.remove",
          "logging.info",
          "logging.error",
          "self.safe_path_join",
          "logging.warning",
          "filename.startswith",
          "filename.split"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "32d20697-7716-4152-8c00-0bba5e380980"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_commands",
      "path": "llmstruct/ARCHIVE/cli_commands.py",
      "category": "core",
      "module_doc": "CLI command processing and handlers.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize command processor.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir",
            "config",
            "utils"
          ],
          "decorators": []
        },
        {
          "name": "set_cache",
          "docstring": "Set cache instance.",
          "line_range": null,
          "parameters": [
            "self",
            "cache"
          ],
          "decorators": []
        },
        {
          "name": "set_copilot",
          "docstring": "Set Copilot manager instance.",
          "line_range": null,
          "parameters": [
            "self",
            "copilot_manager"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "Process a command starting with /.",
          "line_range": null,
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "process_prompt",
          "docstring": "Process a regular user prompt (not a command).",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Show help information.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace",
          "docstring": "Handle workspace state and permissions management.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_mode",
          "docstring": "Handle context mode operations with workspace integration.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_view",
          "docstring": "View file or directory contents.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_write",
          "docstring": "Write content to a file.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_queue",
          "docstring": "Handle queue operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_cache",
          "docstring": "Handle cache operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_copilot",
          "docstring": "Handle Copilot operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_config",
          "docstring": "Handle configuration operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Show system status.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_backup",
          "docstring": "Create backup of a file.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_parse",
          "docstring": "Parse project structure.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_audit",
          "docstring": "Handle audit operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_auto_update",
          "docstring": "Handle auto-update operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_struct_status",
          "docstring": "Handle struct status operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context",
          "docstring": "Handle context operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_session",
          "docstring": "Handle session operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CommandProcessor",
          "docstring": "Processes CLI commands and user prompts.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize command processor.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir",
                "config",
                "utils"
              ]
            },
            {
              "name": "set_cache",
              "docstring": "Set cache instance.",
              "line_range": null,
              "parameters": [
                "self",
                "cache"
              ]
            },
            {
              "name": "set_copilot",
              "docstring": "Set Copilot manager instance.",
              "line_range": null,
              "parameters": [
                "self",
                "copilot_manager"
              ]
            },
            {
              "name": "process_command",
              "docstring": "Process a command starting with /.",
              "line_range": null,
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "process_prompt",
              "docstring": "Process a regular user prompt (not a command).",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Show help information.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace",
              "docstring": "Handle workspace state and permissions management.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_mode",
              "docstring": "Handle context mode operations with workspace integration.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_view",
              "docstring": "View file or directory contents.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_write",
              "docstring": "Write content to a file.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_queue",
              "docstring": "Handle queue operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_cache",
              "docstring": "Handle cache operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_copilot",
              "docstring": "Handle Copilot operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_config",
              "docstring": "Handle configuration operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Show system status.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_backup",
              "docstring": "Create backup of a file.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_parse",
              "docstring": "Parse project structure.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_audit",
              "docstring": "Handle audit operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_auto_update",
              "docstring": "Handle auto-update operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_struct_status",
              "docstring": "Handle struct status operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context",
              "docstring": "Handle context operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_session",
              "docstring": "Handle session operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "WorkspaceStateManager",
          "print"
        ],
        "set_cache": [],
        "set_copilot": [],
        "process_command": [
          "command_line.split",
          "print",
          "len",
          "logging.error",
          "command_line.strip"
        ],
        "process_prompt": [
          "context_data.get",
          "print",
          "len",
          "get_optimized_context",
          "logging.info",
          "context_info.get",
          "logging.error",
          "logging.warning",
          "CopilotEvent",
          "prompt.strip"
        ],
        "cmd_help": [
          "print"
        ],
        "cmd_workspace": [
          "args.strip",
          "state.get",
          "int",
          "print",
          "action_args.split",
          "len",
          "entry.get",
          "boundaries.get",
          "result.get",
          "permissions.get",
          "logging.error",
          "override.get"
        ],
        "cmd_mode": [
          "args.lower",
          "args.strip",
          "context_data.get",
          "print",
          "len",
          "args.upper",
          "get_optimized_context",
          "result.get",
          "re.findall",
          "permissions.get",
          "metrics.get"
        ],
        "cmd_view": [
          "args.strip",
          "os.listdir",
          "print",
          "sorted"
        ],
        "cmd_write": [
          "content.endswith",
          "print",
          "args.split",
          "len",
          "content.startswith"
        ],
        "cmd_queue": [
          "cmd.get",
          "args.strip",
          "print",
          "len",
          "open",
          "queue_data.get",
          "os.remove",
          "enumerate",
          "json.load"
        ],
        "cmd_cache": [
          "os.listdir",
          "args.strip",
          "print",
          "len",
          "stats.get"
        ],
        "cmd_copilot": [
          "args.strip",
          "print",
          "open",
          "json.dumps",
          "json.load"
        ],
        "cmd_config": [
          "args.strip",
          "print",
          "json.dumps"
        ],
        "cmd_status": [
          "print"
        ],
        "cmd_backup": [
          "args.strip",
          "print"
        ],
        "cmd_parse": [
          "print",
          "generate_json"
        ],
        "cmd_audit": [
          "args.strip",
          "print"
        ],
        "handle_auto_update": [
          "print",
          "generate_json"
        ],
        "handle_struct_status": [
          "datetime.fromtimestamp",
          "struct_data.get",
          "os.stat",
          "print",
          "len",
          "open",
          "json.load"
        ],
        "cmd_context": [
          "args.strip",
          "context_data.get",
          "print",
          "len",
          "get_optimized_context",
          "metrics.get"
        ],
        "cmd_session": [
          "args.strip",
          "state.get",
          "print",
          "len",
          "datetime.now"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CopilotContextManager",
        "CopilotEvent",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "WorkspaceStateManager",
        "cli_config",
        "cli_utils",
        "copilot",
        "create_context_orchestrator",
        "datetime",
        "generate_json",
        "get_optimized_context",
        "get_optimized_context_for_scenario",
        "initialize_copilot",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "sys",
        "trigger_copilot_event",
        "typing",
        "workspace"
      ],
      "hash": null,
      "artifact_id": "3948bb5b-8de8-4c6b-860c-aa3c9032856c"
    },
    {
      "module_id": "llmstruct.validators.json_validator",
      "path": "llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": null,
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": null,
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "schema_file.exists",
          "Path",
          "open",
          "logging.info",
          "logging.error",
          "str",
          "validate",
          "json_file.exists",
          "json.load"
        ],
        "validate_directory": [
          "Path",
          "any",
          "validate_struct_json",
          "str",
          "json_file.match"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "3f4a7864-efc4-4e3f-a54a-d7b2e6ce1992"
    },
    {
      "module_id": "llmstruct.validators.__init__",
      "path": "llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "0f7c69d6-37c6-4afc-8ab8-d5d3ab126e05"
    },
    {
      "module_id": "llmstruct.parsers.universal_converter",
      "path": "llmstruct/parsers/universal_converter.py",
      "category": "core",
      "module_doc": "Universal Code Converter - Orchestrates all language parsers\nConverts any codebase to llmstruct JSON format",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for universal converter",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "detect_language",
          "docstring": "Detect programming language from file extension",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "detect_project_languages",
          "docstring": "Detect all languages in project and count files",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "get_project_files",
          "docstring": "Get all relevant files for conversion",
          "line_range": null,
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_python_project",
          "docstring": "Convert Python project to llmstruct format",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_go_project",
          "docstring": "Convert Go project to llmstruct format",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_javascript_project",
          "docstring": "Convert JavaScript project to llmstruct format",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_project",
          "docstring": "Convert any project to llmstruct format",
          "line_range": null,
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_multi_language_project",
          "docstring": "Convert multi-language project with separate sections per language",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_build_project_structure",
          "docstring": "Build standard llmstruct project structure",
          "line_range": null,
          "parameters": [
            "self",
            "language",
            "project_path",
            "modules",
            "toc"
          ],
          "decorators": []
        },
        {
          "name": "_build_empty_project_structure",
          "docstring": "Build empty structure when conversion fails",
          "line_range": null,
          "parameters": [
            "self",
            "language",
            "project_path",
            "error"
          ],
          "decorators": []
        },
        {
          "name": "_merge_language_results",
          "docstring": "Merge multiple language results into unified structure",
          "line_range": null,
          "parameters": [
            "self",
            "project_path",
            "language_results"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Language",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ConverterConfig",
          "docstring": "Configuration for universal converter",
          "line_range": null,
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "UniversalConverter",
          "docstring": "Universal code converter for any programming language",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "detect_language",
              "docstring": "Detect programming language from file extension",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "detect_project_languages",
              "docstring": "Detect all languages in project and count files",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "get_project_files",
              "docstring": "Get all relevant files for conversion",
              "line_range": null,
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_python_project",
              "docstring": "Convert Python project to llmstruct format",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_go_project",
              "docstring": "Convert Go project to llmstruct format",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_javascript_project",
              "docstring": "Convert JavaScript project to llmstruct format",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_project",
              "docstring": "Convert any project to llmstruct format",
              "line_range": null,
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_multi_language_project",
              "docstring": "Convert multi-language project with separate sections per language",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_build_project_structure",
              "docstring": "Build standard llmstruct project structure",
              "line_range": null,
              "parameters": [
                "self",
                "language",
                "project_path",
                "modules",
                "toc"
              ]
            },
            {
              "name": "_build_empty_project_structure",
              "docstring": "Build empty structure when conversion fails",
              "line_range": null,
              "parameters": [
                "self",
                "language",
                "project_path",
                "error"
              ]
            },
            {
              "name": "_merge_language_results",
              "docstring": "Merge multiple language results into unified structure",
              "line_range": null,
              "parameters": [
                "self",
                "project_path",
                "language_results"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "ConverterConfig",
          "GoAnalyzer",
          "JavaScriptParser"
        ],
        "detect_language": [
          "Path"
        ],
        "detect_project_languages": [
          "os.walk",
          "languages.get",
          "any",
          "self.detect_language"
        ],
        "get_project_files": [
          "os.walk",
          "files.append",
          "any",
          "self.detect_language"
        ],
        "convert_python_project": [
          "self.get_project_files",
          "module_data.get",
          "logger.warning",
          "toc.append",
          "modules.append",
          "len",
          "self._build_project_structure",
          "analyze_python",
          "logger.info"
        ],
        "convert_go_project": [
          "convert_to_llmstruct_format",
          "self._build_empty_project_structure",
          "str",
          "logger.info",
          "logger.error"
        ],
        "convert_javascript_project": [
          "self.get_project_files",
          "module_data.get",
          "logger.warning",
          "toc.append",
          "modules.append",
          "len",
          "self._build_project_structure",
          "logger.info"
        ],
        "convert_project": [
          "self.detect_project_languages",
          "self.convert_go_project",
          "languages.keys",
          "NotImplementedError",
          "max",
          "self.convert_javascript_project",
          "ValueError",
          "logger.info",
          "self.convert_python_project"
        ],
        "convert_multi_language_project": [
          "self.detect_project_languages",
          "self.convert_go_project",
          "logger.warning",
          "languages.keys",
          "self.convert_javascript_project",
          "self._merge_language_results",
          "ValueError",
          "logger.info",
          "logger.error",
          "self.convert_python_project"
        ],
        "_build_project_structure": [
          "sum",
          "m.get",
          "len",
          "language.title"
        ],
        "_build_empty_project_structure": [],
        "_merge_language_results": [
          "language_results.items",
          "list",
          "result.get",
          "language_results.keys",
          "all_modules.append",
          "stats.get",
          "all_toc.append"
        ],
        "main": [
          "f.write",
          "exit",
          "argparse.ArgumentParser",
          "ConverterConfig",
          "traceback.print_exc",
          "parser.add_argument",
          "print",
          "logger.error",
          "open",
          "result.get",
          "parser.parse_args",
          "json.dumps",
          "converter.convert_project",
          "stats.get",
          "converter.convert_multi_language_project",
          "Language",
          "UniversalConverter"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "GoAnalyzer",
        "JavaScriptParser",
        "List",
        "Optional",
        "Path",
        "Union",
        "analyze_module",
        "argparse",
        "convert_to_llmstruct_format",
        "dataclass",
        "dataclasses",
        "enum",
        "go_analyzer",
        "javascript_parser",
        "json",
        "logging",
        "os",
        "pathlib",
        "python_parser",
        "sys",
        "traceback",
        "typing"
      ],
      "hash": null,
      "artifact_id": "711b4e09-8857-4751-92d2-fb3850b1617a"
    },
    {
      "module_id": "llmstruct.parsers.go_analyzer",
      "path": "llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "module_doc": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b: go/packages, go/analysis",
      "functions": [
        {
          "name": "convert_to_llmstruct_format",
          "docstring": "\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 llmstruct",
          "line_range": null,
          "parameters": [
            "analysis",
            "include_ranges",
            "goals"
          ],
          "decorators": []
        },
        {
          "name": "_compute_file_hash",
          "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 SHA-256 \u0445\u044d\u0448 \u0444\u0430\u0439\u043b\u0430",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_setup_analyzer",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cleanup",
          "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_project",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_fallback_analysis",
          "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": null,
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GoAnalyzer",
          "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 Go \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_setup_analyzer",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cleanup",
              "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_project",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_fallback_analysis",
              "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": null,
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "_setup_analyzer": [
          "tempfile.mkdtemp",
          "Path",
          "subprocess.run",
          "str",
          "logging.warning",
          "analyzer_source.read_text",
          "analyzer_file.write_text"
        ],
        "_cleanup": [
          "shutil.rmtree",
          "Path"
        ],
        "analyze_project": [
          "self._cleanup",
          "self._setup_analyzer",
          "self._fallback_analysis",
          "subprocess.run",
          "logging.info",
          "logging.error",
          "logging.warning",
          "json.loads"
        ],
        "_fallback_analysis": [
          "line.startswith",
          "go_mod_path.read_text",
          "Path",
          "set",
          "logging.warning",
          "line.strip",
          "len",
          "go_mod_path.exists",
          "line.split",
          "list",
          "sorted",
          "logging.info",
          "packages.add",
          "str",
          "file_path.relative_to",
          "file_path.read_text",
          "content.split"
        ],
        "convert_to_llmstruct_format": [
          "module.get",
          "iface.get",
          "toc.append",
          "modules.append",
          "functions.append",
          "path.replace",
          "len",
          "fn.get",
          "file_data.get",
          "uuid.uuid4",
          "struct.get",
          "_compute_file_hash",
          "str",
          "sum",
          "classes.append",
          "path.endswith",
          "analysis.get"
        ],
        "_compute_file_hash": [
          "f.read",
          "open",
          "hashlib.sha256"
        ],
        "main": [
          "sys.exit",
          "GoAnalyzer",
          "f.write",
          "convert_to_llmstruct_format",
          "argparse.ArgumentParser",
          "Path",
          "traceback.print_exc",
          "parser.add_argument",
          "print",
          "len",
          "open",
          "result.get",
          "parser.parse_args",
          "json.dumps",
          "stats.get",
          "analyzer.analyze_project"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "subprocess",
        "sys",
        "tempfile",
        "traceback",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "abba2ff7-68f4-4a97-91d1-49e70e2afb48"
    },
    {
      "module_id": "llmstruct.parsers.javascript_parser",
      "path": "llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "f.read",
          "open",
          "hashlib.sha256"
        ],
        "compute_file_metadata": [
          "sum",
          "self.file_hash",
          "os.stat",
          "open"
        ],
        "parse_module": [
          "esprima.parseModule",
          "self.compute_file_metadata",
          "open",
          "str",
          "f.read"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "576ed182-335b-4b48-9dd7-769310d148cc"
    },
    {
      "module_id": "llmstruct.parsers.python_parser",
      "path": "llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data.",
          "line_range": null,
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "self.generic_visit",
          "set"
        ],
        "visit_AsyncFunctionDef": [
          "self.generic_visit",
          "set"
        ],
        "visit_Call": [
          "self.generic_visit",
          "isinstance"
        ],
        "compute_file_hash": [
          "logging.error",
          "f.read",
          "open",
          "hashlib.sha256"
        ],
        "analyze_module": [
          "ast.walk",
          "visitor.visit",
          "infer_category",
          "Path",
          "isinstance",
          "functions.append",
          "ast.get_docstring",
          "open",
          "list",
          "sorted",
          "ast.unparse",
          "CallVisitor",
          "logging.error",
          "str",
          "ast.parse",
          "compute_file_hash",
          "classes.append",
          "f.read"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d1482b25-326f-4c52-bafa-b2e280c2a2c2"
    },
    {
      "module_id": "llmstruct.parsers.__init__",
      "path": "llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "javascript_parser"
      ],
      "hash": null,
      "artifact_id": "f0179a0d-20f9-430c-8ad5-2b81782e3bb5"
    }
  ]
}