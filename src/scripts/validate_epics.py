#!/usr/bin/env python3
"""
Epic Data Validator
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö —ç–ø–∏–∫–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º GitHub issues
"""

import json
import sys
from pathlib import Path
from typing import Dict, List, Any

def validate_epic_structure(epic: Dict[str, Any]) -> List[str]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ç–ø–∏–∫–∞"""
    errors = []
    
    required_fields = [
        'id', 'name', 'status', 'priority', 'estimate', 
        'description', 'done_criteria', 'metrics', 'tasks'
    ]
    
    for field in required_fields:
        if field not in epic:
            errors.append(f"Missing required field: {field}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
    if 'id' in epic and not isinstance(epic['id'], int):
        errors.append("Field 'id' must be integer")
    
    if 'tasks' in epic and not isinstance(epic['tasks'], list):
        errors.append("Field 'tasks' must be list")
    
    if 'done_criteria' in epic and not isinstance(epic['done_criteria'], list):
        errors.append("Field 'done_criteria' must be list")
    
    return errors

def validate_task_structure(task: Dict[str, Any], epic_id: int) -> List[str]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–¥–∞—á–∏"""
    errors = []
    
    required_fields = ['id', 'name', 'priority', 'estimate', 'description', 'acceptance_criteria']
    
    for field in required_fields:
        if field not in task:
            errors.append(f"Epic {epic_id}, Task {task.get('id', '?')}: Missing field {field}")
    
    if 'id' in task and not isinstance(task['id'], int):
        errors.append(f"Epic {epic_id}, Task {task.get('id', '?')}: 'id' must be integer")
    
    if 'acceptance_criteria' in task and not isinstance(task['acceptance_criteria'], list):
        errors.append(f"Epic {epic_id}, Task {task.get('id', '?')}: 'acceptance_criteria' must be list")
    
    return errors

def validate_priorities(data: Dict[str, Any]) -> List[str]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"""
    errors = []
    valid_priorities = ['üî• CRITICAL', 'üî• HIGH', 'üü° MEDIUM', 'üü¢ LOW']
    
    for epic in data.get('epics', []):
        if epic.get('priority') not in valid_priorities:
            errors.append(f"Epic {epic.get('id')}: Invalid priority '{epic.get('priority')}'")
        
        for task in epic.get('tasks', []):
            if task.get('priority') not in valid_priorities:
                errors.append(f"Epic {epic.get('id')}, Task {task.get('id')}: Invalid priority '{task.get('priority')}'")
    
    return errors

def validate_task_ids(data: Dict[str, Any]) -> List[str]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID –∑–∞–¥–∞—á"""
    errors = []
    seen_ids = set()
    
    for epic in data.get('epics', []):
        for task in epic.get('tasks', []):
            task_id = task.get('id')
            if task_id in seen_ids:
                errors.append(f"Duplicate task ID: {task_id}")
            seen_ids.add(task_id)
    
    return errors

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    epics_file = Path("epics/epics_data.json")
    
    if not epics_file.exists():
        print("‚ùå File epics/epics_data.json not found!")
        sys.exit(1)
    
    try:
        with open(epics_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except json.JSONDecodeError as e:
        print(f"‚ùå JSON decode error: {e}")
        sys.exit(1)
    
    print("üîç Validating epics data...")
    
    all_errors = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if 'epics' not in data:
        all_errors.append("Missing 'epics' key in JSON")
    elif not isinstance(data['epics'], list):
        all_errors.append("'epics' must be a list")
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —ç–ø–∏–∫–∞
        for epic in data['epics']:
            errors = validate_epic_structure(epic)
            all_errors.extend(errors)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á —ç–ø–∏–∫–∞
            for task in epic.get('tasks', []):
                task_errors = validate_task_structure(task, epic.get('id', '?'))
                all_errors.extend(task_errors)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    all_errors.extend(validate_priorities(data))
    all_errors.extend(validate_task_ids(data))
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    if all_errors:
        print(f"‚ùå Validation failed with {len(all_errors)} errors:")
        for error in all_errors:
            print(f"  ‚Ä¢ {error}")
        sys.exit(1)
    else:
        print("‚úÖ Validation successful!")
        print(f"Found {len(data['epics'])} epics with {sum(len(e.get('tasks', [])) for e in data['epics'])} total tasks")

if __name__ == "__main__":
    main() 