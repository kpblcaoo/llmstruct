#!/usr/bin/env python3
"""
Test message sender to Telegram
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import os
import sys
import asyncio
import httpx
from datetime import datetime

async def send_test_message():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN", "7576808324:AAG_lyXEt-AEfGCSJ5VoOx1oUEniyjcmHBI")
    chat_id = -4938821563  # Your chat ID from logs
    
    test_message = """üß™ **–¢–ï–°–¢ –î–í–£–°–¢–û–†–û–ù–ù–ï–ô –°–í–Ø–ó–ò**

üì± Cursor ‚Üí Telegram: **–†–ê–ë–û–¢–ê–ï–¢** ‚úÖ
üîÑ –°–µ–π—á–∞—Å —Ç–µ—Å—Ç–∏—Ä—É–µ–º: Telegram ‚Üí Cursor

**–ó–∞–¥–∞—á–∞:** –û—Ç–≤–µ—Ç—å –ª—é–±—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏
üìù –ù–∞–ø—Ä–∏–º–µ—Ä: "—Ç–µ—Å—Ç", "ok", "—Ä–∞–±–æ—Ç–∞–µ—Ç" –∏–ª–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ

‚è≥ –ñ–¥—É —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞)
ü§ñ Cursor –±—É–¥–µ—Ç –∂–¥–∞—Ç—å, –ø–æ–∫–∞ —Ç—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏—à—å"""

    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    
    data = {
        "chat_id": chat_id,
        "text": test_message,
        "parse_mode": "Markdown"
    }
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(url, json=data)
            
            if response.status_code == 200:
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
                print(f"üì± Chat ID: {chat_id}")
                print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
                print("\nüîÑ –¢–µ–ø–µ—Ä—å –∂–¥—É —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ Telegram...")
                print("üìù –û—Ç–≤–µ—Ç—å –ª—é–±—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏")
                print("\nüí° –ö—É—Ä—Å–æ—Ä –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –∑–¥–µ—Å—å, –ø–æ–∫–∞ —Ç—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏—à—å")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}")
                print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def wait_for_user_response():
    """–ñ–¥–µ—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤"""
    
    user_log_file = "logs/telegram/user_messages.log"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    start_time = datetime.now()
    print(f"\n‚è∞ –ù–∞—á–∏–Ω–∞—é –æ–∂–∏–¥–∞–Ω–∏–µ —Å {start_time.strftime('%H:%M:%S')}")
    
    while True:
        try:
            if os.path.exists(user_log_file):
                with open(user_log_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                
                # –ò—â–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ start_time
                for line in reversed(lines[-10:]):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
                    if "| –ú–∏—Ö–∞–∏–ª (@kpblcko_mike):" in line:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –ª–æ–≥–∞
                        try:
                            timestamp_str = line.split(" | ")[0]
                            log_time = datetime.fromisoformat(timestamp_str.replace("T", " "))
                            
                            if log_time > start_time:
                                # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!
                                message = line.split("): ", 1)[1].strip()
                                print(f"\nüéâ –ü–û–õ–£–ß–ï–ù –û–¢–í–ï–¢!")
                                print(f"‚è∞ –í—Ä–µ–º—è: {log_time.strftime('%H:%M:%S')}")
                                print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: '{message}'")
                                print("\n‚úÖ –î–í–£–°–¢–û–†–û–ù–ù–Ø–Ø –°–í–Ø–ó–¨ –†–ê–ë–û–¢–ê–ï–¢!")
                                return message
                        except:
                            continue
            
            # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(1)
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏: {e}")
            await asyncio.sleep(2)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢ –î–í–£–°–¢–û–†–û–ù–ù–ï–ô –°–í–Ø–ó–ò CURSOR ‚Üî TELEGRAM")
    print("=" * 50)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if await send_test_message():
        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞
        response = await wait_for_user_response()
        
        if response:
            print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê: –£–°–ü–ï–•")
            print(f"üìù –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: '{response}'")
            print("‚úÖ –°–≤—è–∑—å Cursor ‚Üî Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print(f"\n‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê: –ù–ï –ó–ê–í–ï–†–®–ï–ù")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

if __name__ == "__main__":
    asyncio.run(main()) 