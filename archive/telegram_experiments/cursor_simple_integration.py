#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Cursor —Å Telegram –±–æ—Ç–æ–º
–ë–∞–∑–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ JSON —Ñ–∞–π–ª—ã –±–µ–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π
"""

import os
import json
import time
from datetime import datetime
from pathlib import Path
from typing import Optional, List, Dict, Any

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏
DATA_DIR = Path("data/telegram")
USER_MESSAGES_FILE = DATA_DIR / "user_messages.json"
CURSOR_COMMANDS_FILE = DATA_DIR / "cursor_commands.json"
BOT_RESPONSES_FILE = DATA_DIR / "bot_responses.json"

def ensure_data_dir():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö"""
    DATA_DIR.mkdir(parents=True, exist_ok=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    for file in [USER_MESSAGES_FILE, CURSOR_COMMANDS_FILE, BOT_RESPONSES_FILE]:
        if not file.exists():
            file.write_text('[]')

def get_user_messages(limit: int = 10) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
    
    Returns:
        –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    ensure_data_dir()
    
    try:
        with open(USER_MESSAGES_FILE, 'r', encoding='utf-8') as f:
            messages = json.load(f)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        return messages[-limit:] if messages else []
        
    except Exception as e:
        print(f"‚ùå Error reading user messages: {e}")
        return []

def send_to_telegram(text: str, message_type: str = "response") -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    
    Args:
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (response, notification, etc.)
    
    Returns:
        True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
    """
    ensure_data_dir()
    
    try:
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
        with open(CURSOR_COMMANDS_FILE, 'r', encoding='utf-8') as f:
            commands = json.load(f)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
        new_command = {
            "id": f"cmd_{int(time.time())}_{len(commands)}",
            "timestamp": datetime.now().isoformat(),
            "text": text,
            "type": message_type,
            "processed": False
        }
        
        commands.append(new_command)
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∫–æ–º–∞–Ω–¥
        if len(commands) > 50:
            commands = commands[-50:]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(CURSOR_COMMANDS_FILE, 'w', encoding='utf-8') as f:
            json.dump(commands, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ Message queued for Telegram: {text[:50]}...")
        return True
        
    except Exception as e:
        print(f"‚ùå Error sending to Telegram: {e}")
        return False

def check_new_messages(last_check_timestamp: Optional[str] = None) -> List[Dict[str, Any]]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    
    Args:
        last_check_timestamp: ISO timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    Returns:
        –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    ensure_data_dir()
    
    try:
        with open(USER_MESSAGES_FILE, 'r', encoding='utf-8') as f:
            messages = json.load(f)
        
        if not last_check_timestamp:
            # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return messages[-1:] if messages else []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        new_messages = []
        for msg in messages:
            if msg.get("timestamp", "") > last_check_timestamp:
                new_messages.append(msg)
        
        return new_messages
        
    except Exception as e:
        print(f"‚ùå Error checking new messages: {e}")
        return []

def get_last_message() -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ None
    """
    messages = get_user_messages(limit=1)
    return messages[0] if messages else None

def show_conversation_status() -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    
    Returns:
        –°—Ç–∞—Ç—É—Å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    """
    ensure_data_dir()
    
    try:
        # –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with open(USER_MESSAGES_FILE, 'r', encoding='utf-8') as f:
            user_messages = json.load(f)
        
        # –ß–∏—Ç–∞–µ–º –∫–æ–º–∞–Ω–¥—ã Cursor
        with open(CURSOR_COMMANDS_FILE, 'r', encoding='utf-8') as f:
            cursor_commands = json.load(f)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        last_user_msg = user_messages[-1] if user_messages else None
        pending_commands = [cmd for cmd in cursor_commands if not cmd.get("processed", False)]
        
        status = {
            "timestamp": datetime.now().isoformat(),
            "total_user_messages": len(user_messages),
            "total_cursor_commands": len(cursor_commands),
            "pending_commands": len(pending_commands),
            "last_user_message": last_user_msg,
            "bot_active": Path("simple_bot.log").exists(),
            "data_files": {
                "user_messages": USER_MESSAGES_FILE.exists(),
                "cursor_commands": CURSOR_COMMANDS_FILE.exists(),
                "bot_responses": BOT_RESPONSES_FILE.exists()
            }
        }
        
        return status
        
    except Exception as e:
        print(f"‚ùå Error getting conversation status: {e}")
        return {"error": str(e)}

def start_conversation_monitor(callback_func=None, check_interval: int = 3):
    """
    –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Args:
        callback_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        check_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    ensure_data_dir()
    
    print("üîç Starting conversation monitor...")
    print("Press Ctrl+C to stop")
    
    last_timestamp = datetime.now().isoformat()
    
    try:
        while True:
            new_messages = check_new_messages(last_timestamp)
            
            if new_messages:
                print(f"\nüìù {len(new_messages)} new message(s):")
                for msg in new_messages:
                    print(f"  üë§ {msg.get('username', 'Unknown')}: {msg.get('text', '')[:100]}...")
                    
                    if callback_func:
                        callback_func(msg)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º timestamp
                if new_messages:
                    last_timestamp = max(msg.get('timestamp', '') for msg in new_messages)
            
            time.sleep(check_interval)
            
    except KeyboardInterrupt:
        print("\nüõë Monitoring stopped")

# –§—É–Ω–∫—Ü–∏–∏-—Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

def quick_reply(text: str):
    """–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –≤ Telegram"""
    return send_to_telegram(f"üí¨ {text}")

def quick_status():
    """–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    return send_to_telegram("üìä *–°—Ç–∞—Ç—É—Å Cursor AI*\n\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞\n‚è∞ " + datetime.now().strftime("%H:%M:%S"))

def quick_notification(text: str):
    """–ë—ã—Å—Ç—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    return send_to_telegram(f"üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*\n\n{text}", "notification")

def list_recent_messages(count: int = 5):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    messages = get_user_messages(count)
    
    if not messages:
        print("üì≠ No messages found")
        return
    
    print(f"üì¨ Last {len(messages)} message(s):")
    for i, msg in enumerate(messages, 1):
        timestamp = msg.get('timestamp', '')[:19].replace('T', ' ')
        username = msg.get('username', 'Unknown')
        text = msg.get('text', '')[:100]
        print(f"{i}. [{timestamp}] {username}: {text}...")

def test_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üß™ Testing Cursor ‚Üî Telegram integration...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    ensure_data_dir()
    print("‚úÖ Data directory structure OK")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    status = show_conversation_status()
    print(f"‚úÖ Status: {status['total_user_messages']} user messages, {status['total_cursor_commands']} cursor commands")
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    test_result = send_to_telegram("üß™ **–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Cursor**\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Cursor AI")
    if test_result:
        print("‚úÖ Test message sent successfully")
    else:
        print("‚ùå Test message failed")
    
    return test_result


if __name__ == "__main__":
    import sys
    
    if len(sys.argv) < 2:
        print("üîß Available commands:")
        print("  python cursor_simple_integration.py test          - Test integration")
        print("  python cursor_simple_integration.py status        - Show status")
        print("  python cursor_simple_integration.py messages      - Show recent messages")
        print("  python cursor_simple_integration.py send 'text'   - Send message")
        print("  python cursor_simple_integration.py monitor       - Start monitor")
        sys.exit(1)
    
    command = sys.argv[1]
    
    if command == "test":
        test_integration()
    elif command == "status":
        status = show_conversation_status()
        print(json.dumps(status, indent=2, ensure_ascii=False))
    elif command == "messages":
        list_recent_messages()
    elif command == "send" and len(sys.argv) > 2:
        text = " ".join(sys.argv[2:])
        send_to_telegram(text)
    elif command == "monitor":
        start_conversation_monitor()
    else:
        print(f"‚ùå Unknown command: {command}") 