#!/usr/bin/env python3
"""
üéØ Cursor Integration for Telegram Master Controller
–ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Cursor —Å Telegram –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º
"""

import json
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional

class CursorTelegramIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Cursor —Å Telegram Master Controller"""
    
    def __init__(self):
        self.commands_file = Path("data/telegram/cursor_commands.json")
        self.responses_file = Path("data/telegram/cursor_responses.json")
        self.status_file = Path("data/telegram/master_status.json")
        
        # Ensure directories exist
        self.commands_file.parent.mkdir(parents=True, exist_ok=True)
        
        # Keep track of processed commands
        self.processed_commands = set()
    
    def check_for_commands(self) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not self.commands_file.exists():
                return []
            
            with open(self.commands_file, 'r', encoding='utf-8') as f:
                commands = json.load(f)
            
            # Filter new commands
            new_commands = []
            for cmd in commands:
                cmd_id = cmd.get('id')
                if cmd_id and cmd_id not in self.processed_commands:
                    new_commands.append(cmd)
                    self.processed_commands.add(cmd_id)
            
            return new_commands
            
        except Exception as e:
            print(f"‚ùå Error checking commands: {e}")
            return []
    
    def send_response(self, message: str, response_type: str = "info"):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram"""
        try:
            responses = []
            if self.responses_file.exists():
                with open(self.responses_file, 'r', encoding='utf-8') as f:
                    responses = json.load(f)
            
            response = {
                "id": f"resp_{int(time.time())}",
                "timestamp": datetime.now().isoformat(),
                "message": message,
                "type": response_type,
                "sent": False
            }
            
            responses.append(response)
            
            # Keep only last 50 responses
            if len(responses) > 50:
                responses = responses[-50:]
            
            with open(self.responses_file, 'w', encoding='utf-8') as f:
                json.dump(responses, f, ensure_ascii=False, indent=2)
            
            print(f"üì§ Response queued: {message[:50]}...")
            
        except Exception as e:
            print(f"‚ùå Error sending response: {e}")
    
    def update_status(self, message: str, status: str):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        try:
            status_data = {
                "status": status,
                "message": message,
                "timestamp": datetime.now().isoformat(),
                "updated_by": "cursor"
            }
            
            with open(self.status_file, 'w', encoding='utf-8') as f:
                json.dump(status_data, f, ensure_ascii=False, indent=2)
            
            print(f"üìä Status updated: {status} - {message}")
            
        except Exception as e:
            print(f"‚ùå Error updating status: {e}")
    
    def send_progress_update(self, step: str, details: str, progress: int = 0):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        message = f"""üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**

üéØ **–¢–µ–∫—É—â–∏–π —à–∞–≥:** {step}
üìù **–î–µ—Ç–∞–ª–∏:** {details}
‚è≥ **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress}%

‚ö° –ü—Ä–æ–¥–æ–ª–∂–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ..."""
        
        self.send_response(message, "progress")
        self.update_status(f"{step}: {details}", "executing")
    
    def send_completion(self, summary: str, success: bool = True):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        status_emoji = "‚úÖ" if success else "‚ùå"
        status_text = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ" if success else "–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π"
        
        message = f"""{status_emoji} **{status_text}**

üìã **–ò—Ç–æ–≥–∏:**
{summary}

üéØ –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –∫–æ–º–∞–Ω–¥–∞–º."""
        
        self.send_response(message, "completion")
        self.update_status(status_text, "completed" if success else "failed")
    
    def ask_for_confirmation(self, question: str, context: str = ""):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        message = f"""‚ùì **–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ**

üìù **–í–æ–ø—Ä–æ—Å:** {question}

{f"üìã **–ö–æ–Ω—Ç–µ–∫—Å—Ç:** {context}" if context else ""}

üí¨ –û—Ç–≤–µ—Ç—å *–¥–∞* –∏–ª–∏ *–Ω–µ—Ç* –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."""
        
        self.send_response(message, "question")
        self.update_status("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "waiting_confirmation")

# Convenient functions for direct use
_integration = CursorTelegramIntegration()

def check_telegram_commands() -> List[Dict]:
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥"""
    return _integration.check_for_commands()

def send_telegram_message(message: str, msg_type: str = "info"):
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    _integration.send_response(message, msg_type)

def update_telegram_status(message: str, status: str):
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
    _integration.update_status(message, status)

def send_progress(step: str, details: str, progress: int = 0):
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    _integration.send_progress_update(step, details, progress)

def send_completion(summary: str, success: bool = True):
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    _integration.send_completion(summary, success)

def ask_confirmation(question: str, context: str = ""):
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    _integration.ask_for_confirmation(question, context)

# Example usage for Cursor AI
if __name__ == "__main__":
    print("üß™ Testing Cursor Integration...")
    
    # Check for commands
    commands = check_telegram_commands()
    print(f"üì• Found {len(commands)} new commands")
    
    for cmd in commands:
        print(f"üéØ Command: {cmd.get('command')} - {cmd.get('message', '')}")
        
        if cmd.get('command') == 'start_master_plan':
            send_telegram_message("üöÄ **–ú–∞—Å—Ç–µ—Ä-–ø–ª–∞–Ω –∑–∞–ø—É—â–µ–Ω!**\n\n‚öôÔ∏è –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...")
            send_progress("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã", 10)
            
        elif cmd.get('command') == 'user_message':
            user_message = cmd.get('message', '')
            send_telegram_message(f"üí¨ **–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:** {user_message}\n\n‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    
    print("‚úÖ Integration test completed") 