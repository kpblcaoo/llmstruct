#!/usr/bin/env python3
"""
Cursor Telegram Reader - –ß–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram –±–æ—Ç–∞ –¥–ª—è Cursor
"""

import os
import json
import time
from pathlib import Path
from datetime import datetime, timedelta
from typing import List, Dict, Optional

class TelegramLogReader:
    """–ß–∏—Ç–∞—Ç–µ–ª—å –ª–æ–≥–æ–≤ Telegram –¥–ª—è Cursor"""
    
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root)
        self.logs_dir = self.project_root / "logs" / "telegram"
        self.messages_log = self.logs_dir / "user_messages.log"
        self.cursor_commands = self.logs_dir / "cursor_commands.log"
        
    def get_latest_messages(self, count: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.messages_log.exists():
            return []
        
        try:
            with open(self.messages_log, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –†–∞–∑–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å–∏
            entries = content.split('===')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç
            messages = []
            
            for entry in entries[-count:]:
                if entry.strip():
                    lines = entry.strip().split('\n')
                    if len(lines) >= 4:
                        timestamp_line = lines[0].strip()
                        user_line = lines[1].strip()
                        type_line = lines[2].strip()
                        message_line = lines[3].strip()
                        
                        message_data = {
                            'timestamp': timestamp_line,
                            'user': user_line.replace('üë§ USER:', '').strip(),
                            'type': type_line.replace('üì± TYPE:', '').strip(),
                            'message': message_line.replace('üí¨ MESSAGE:', '').strip()
                        }
                        messages.append(message_data)
            
            return messages
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []
    
    def get_cursor_commands(self, hours: int = 24) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Cursor –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã"""
        if not self.cursor_commands.exists():
            return []
        
        try:
            with open(self.cursor_commands, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            commands = []
            cutoff_time = datetime.now() - timedelta(hours=hours)
            
            for line in lines:
                if '| CURSOR COMMAND:' in line:
                    parts = line.split('| CURSOR COMMAND:', 1)
                    if len(parts) == 2:
                        timestamp_str = parts[0].strip()
                        command = parts[1].strip()
                        
                        try:
                            timestamp = datetime.strptime(timestamp_str, "%Y-%m-%d %H:%M:%S")
                            if timestamp >= cutoff_time:
                                commands.append({
                                    'timestamp': timestamp_str,
                                    'command': command
                                })
                        except ValueError:
                            continue
            
            return commands
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ Cursor: {e}")
            return []
    
    def watch_new_messages(self, callback=None):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        if not self.messages_log.exists():
            print("üìÑ –§–∞–π–ª –ª–æ–≥–æ–≤ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω. –û–∂–∏–¥–∞–Ω–∏–µ...")
            return
        
        print(f"üëÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {self.messages_log}")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        last_size = self.messages_log.stat().st_size
        
        try:
            while True:
                current_size = self.messages_log.stat().st_size
                
                if current_size > last_size:
                    # –ß–∏—Ç–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                    with open(self.messages_log, 'r', encoding='utf-8') as f:
                        f.seek(last_size)
                        new_content = f.read()
                    
                    if new_content.strip():
                        print(f"\nüÜï –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
                        print(new_content)
                        
                        if callback:
                            callback(new_content)
                    
                    last_size = current_size
                
                time.sleep(1)
                
        except KeyboardInterrupt:
            print("\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def print_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üìä –°—Ç–∞—Ç—É—Å Telegram –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"üìÅ –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤: {self.logs_dir}")
        print(f"üìÑ –°–æ–æ–±—â–µ–Ω–∏—è: {self.messages_log}")
        print(f"üéØ –ö–æ–º–∞–Ω–¥—ã Cursor: {self.cursor_commands}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        messages_exist = self.messages_log.exists()
        commands_exist = self.cursor_commands.exists()
        
        print(f"‚úÖ –§–∞–π–ª —Å–æ–æ–±—â–µ–Ω–∏–π: {'–°—É—â–µ—Å—Ç–≤—É–µ—Ç' if messages_exist else '–ù–µ —Å–æ–∑–¥–∞–Ω'}")
        print(f"‚úÖ –§–∞–π–ª –∫–æ–º–∞–Ω–¥: {'–°—É—â–µ—Å—Ç–≤—É–µ—Ç' if commands_exist else '–ù–µ —Å–æ–∑–¥–∞–Ω'}")
        
        if messages_exist:
            stat = self.messages_log.stat()
            print(f"üìè –†–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π: {stat.st_size} –±–∞–π—Ç")
            print(f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {datetime.fromtimestamp(stat.st_mtime)}")
        
        if commands_exist:
            stat = self.cursor_commands.stat()
            print(f"üìè –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥: {stat.st_size} –±–∞–π—Ç")
            print(f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {datetime.fromtimestamp(stat.st_mtime)}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    reader = TelegramLogReader()
    
    if len(sys.argv) < 2:
        print("ü§ñ Cursor Telegram Reader")
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python cursor_telegram_reader.py status    - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
        print("  python cursor_telegram_reader.py latest    - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        print("  python cursor_telegram_reader.py commands  - –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Cursor")
        print("  python cursor_telegram_reader.py watch     - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        return
    
    command = sys.argv[1].lower()
    
    if command == "status":
        reader.print_status()
        
    elif command == "latest":
        count = int(sys.argv[2]) if len(sys.argv) > 2 else 5
        messages = reader.get_latest_messages(count)
        
        if messages:
            print(f"üì± –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π:")
            for msg in messages:
                print(f"\n{msg['timestamp']}")
                print(f"üë§ {msg['user']}")
                print(f"üí¨ {msg['message']}")
                print("-" * 50)
        else:
            print("üì≠ –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç")
    
    elif command == "commands":
        hours = int(sys.argv[2]) if len(sys.argv) > 2 else 24
        commands = reader.get_cursor_commands(hours)
        
        if commands:
            print(f"üéØ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è Cursor –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤:")
            for cmd in commands:
                print(f"{cmd['timestamp']} | {cmd['command']}")
        else:
            print("üéØ –ö–æ–º–∞–Ω–¥ –¥–ª—è Cursor –ø–æ–∫–∞ –Ω–µ—Ç")
    
    elif command == "watch":
        reader.watch_new_messages()
    
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")

if __name__ == "__main__":
    main() 