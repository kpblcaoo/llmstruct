#!/usr/bin/env python3
"""
Cursor ‚Üî Telegram Bridge
–ß–∏—Ç–∞–µ—Ç cursor –∫–æ–º–∞–Ω–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram
"""

import os
import sys
import time
import asyncio
import httpx
import json
from typing import Dict, Optional
from datetime import datetime

# Add project root to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from cursor_telegram_reader_enhanced import EnhancedCursorTelegramReader

class CursorTelegramBridge:
    """Bridge –º–µ–∂–¥—É cursor –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ Telegram –æ—Ç–≤–µ—Ç–∞–º–∏"""
    
    def __init__(self):
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.user_chat_id = -4938821563  # From logs
        
        self.reader = EnhancedCursorTelegramReader()
        
        # Response templates
        self.response_templates = {
            "processing": "‚öôÔ∏è *Cursor –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É...*\n\n`{command}`\n\n‚è≥ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
            "completed": "‚úÖ *–í—ã–ø–æ–ª–Ω–µ–Ω–æ Cursor AI*\n\n{result}",
            "error": "‚ùå *–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è*\n\n{error}",
            "timeout": "‚è∞ *–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è*\n\n–ö–æ–º–∞–Ω–¥–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
        }
    
    async def send_telegram_message(self, text: str, parse_mode: str = "Markdown") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        if not self.bot_token:
            print("‚ùå TELEGRAM_BOT_TOKEN not found")
            return False
        
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {
            "chat_id": self.user_chat_id,
            "text": text[:4096],  # Telegram limit
            "parse_mode": parse_mode
        }
        
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.post(url, json=data)
                if response.status_code == 200:
                    print(f"‚úÖ Message sent to Telegram")
                    return True
                else:
                    print(f"‚ùå Failed to send message: {response.status_code}")
                    return False
        except Exception as e:
            print(f"‚ùå Error sending message: {e}")
            return False
    
    async def process_cursor_command(self, command_data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å cursor –∫–æ–º–∞–Ω–¥—É"""
        command = command_data['command']
        context = command_data.get('context', '')
        
        print(f"\nüéØ Processing cursor command: {command[:50]}...")
        
        # Send processing notification
        processing_msg = self.response_templates["processing"].format(command=command[:100])
        await self.send_telegram_message(processing_msg)
        
        # Simulate processing (here you would integrate with actual Cursor AI)
        # For now, we'll create smart responses based on command content
        result = await self.simulate_cursor_processing(command, context)
        
        # Send result
        if result.get("success"):
            response_msg = self.response_templates["completed"].format(result=result["content"])
        else:
            response_msg = self.response_templates["error"].format(error=result.get("error", "Unknown error"))
        
        await self.send_telegram_message(response_msg)
    
    async def simulate_cursor_processing(self, command: str, context: str = "") -> Dict:
        """–°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥s Cursor AI"""
        # Simulate processing delay
        await asyncio.sleep(2)
        
        # Smart responses based on command content
        command_lower = command.lower()
        
        if "—Å—Ç–∞—Ç—É—Å" in command_lower or "status" in command_lower:
            return {
                "success": True,
                "content": """üîç *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã LLMStruct*

üìä *–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:*
‚Ä¢ Enhanced Telegram Bot: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ LLM Chain: ü¶ô Ollama ‚Üí üöÄ Grok ‚Üí üß† Anthropic
‚Ä¢ Cursor Bridge: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ Metrics System: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞

üéØ *–ì–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥!*"""
            }
        
        elif "–ø–æ–º–æ—â—å" in command_lower or "help" in command_lower:
            return {
                "success": True,
                "content": """üìö *Cursor AI –ø–æ–º–æ—â—å*

üéØ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ `—Å—Ç–∞—Ç—É—Å` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `–∞–Ω–∞–ª–∏–∑` - –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞/–ø—Ä–æ–µ–∫—Ç–∞
‚Ä¢ `—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥` - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
‚Ä¢ `—Ç–µ—Å—Ç—ã` - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
‚Ä¢ `–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è` - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è docs

üí° *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
2. –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ `cursor <–∫–æ–º–∞–Ω–¥–∞>`
3. –ü–æ–ª—É—á–∏—Ç–µ —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç!"""
            }
        
        elif "–∞–Ω–∞–ª–∏–∑" in command_lower or "–∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞" in command_lower:
            return {
                "success": True,
                "content": """üîç *–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ LLMStruct*

üìã *–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ:*
‚Ä¢ 272 –º–æ–¥—É–ª—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
‚Ä¢ 1857 —Ñ—É–Ω–∫—Ü–∏–π –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π  
‚Ä¢ 183 –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

‚úÖ *–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:*
‚Ä¢ –•–æ—Ä–æ—à–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ AI —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
‚Ä¢ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ unit —Ç–µ—Å—Ç–æ–≤
‚Ä¢ –£–ª—É—á—à–∏—Ç—å error handling
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
            }
        
        elif any(word in command_lower for word in ["–≥–æ—Ç–æ–≤", "ready", "start", "—Å—Ç–∞—Ä—Ç"]):
            return {
                "success": True,
                "content": """üöÄ *Cursor AI –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!*

‚úÖ *–°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:*
‚Ä¢ Enhanced Bot –∑–∞–ø—É—â–µ–Ω
‚Ä¢ LLM Chain –∞–∫—Ç–∏–≤–Ω–∞
‚Ä¢ Bridge —Ä–∞–±–æ—Ç–∞–µ—Ç

üéØ *–ñ–¥–µ–º –≤–∞—à–∏—Ö –∫–æ–º–∞–Ω–¥!*
–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –ø—Ä–æ–µ–∫—Ç–æ–º."""
            }
        
        else:
            # General processing
            return {
                "success": True,
                "content": f"""‚öôÔ∏è *Cursor AI –æ–±—Ä–∞–±–æ—Ç–∞–ª –∫–æ–º–∞–Ω–¥—É*

üìù *–ö–æ–º–∞–Ω–¥–∞:* `{command[:100]}{'...' if len(command) > 100 else ''}`

üí≠ *–†–µ–∑—É–ª—å—Ç–∞—Ç:*
–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é. –î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏.

üéØ *–ß—Ç–æ –¥–∞–ª—å—à–µ?*
–û–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å."""
            }
    
    def handle_cursor_command(self, command_data: Dict):
        """Handle cursor command (sync wrapper)"""
        print(f"\n{'='*60}")
        print(f"üìÖ {command_data['timestamp']}")
        print(f"üë§ {command_data['from_user']}")
        print(f"üéØ {command_data['command']}")
        if command_data['context']:
            print(f"üìù {command_data['context']}")
        print("="*60)
        
        # Process asynchronously
        asyncio.run(self.process_cursor_command(command_data))
    
    def start_bridge(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å bridge"""
        print("üåâ Starting Cursor ‚Üî Telegram Bridge")
        print(f"üéØ Target chat: {self.user_chat_id}")
        print("Press Ctrl+C to stop\n")
        
        # Show recent context
        recent_messages = self.reader.get_recent_user_messages(3)
        if recent_messages:
            print("üìù Recent messages context:")
            for msg in recent_messages:
                print(f"  {msg['timestamp'][:19]} | {msg['user']}: {msg['message'][:50]}...")
            print()
        
        # Send startup notification
        startup_msg = """üåâ *Cursor ‚Üî Telegram Bridge –∑–∞–ø—É—â–µ–Ω*

‚úÖ –ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ cursor –∫–æ–º–∞–Ω–¥
üì± –û—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç
üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `cursor <–∫–æ–º–∞–Ω–¥–∞>` –∏–ª–∏ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞

Ready! üöÄ"""
        
        asyncio.run(self.send_telegram_message(startup_msg))
        
        # Start polling
        self.reader.poll_for_commands(self.handle_cursor_command)

def main():
    """Main entry point"""
    if not os.getenv("TELEGRAM_BOT_TOKEN"):
        print("‚ùå TELEGRAM_BOT_TOKEN not found in environment")
        return 1
    
    bridge = CursorTelegramBridge()
    bridge.start_bridge()
    return 0

if __name__ == "__main__":
    exit(main()) 