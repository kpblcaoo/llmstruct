#!/usr/bin/env python3
"""
Cursor Task Reporter
–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –æ –∑–∞–¥–∞—á–∞—Ö –≤ Telegram
"""

import httpx
import asyncio
import os
from datetime import datetime
from typing import Optional

class CursorReporter:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç—ã –æ –∑–∞–¥–∞—á–∞—Ö –≤ Telegram"""
    
    def __init__(self, bot_token: str = None, chat_id: int = None):
        self.bot_token = bot_token or os.getenv("TELEGRAM_BOT_TOKEN")
        self.chat_id = chat_id or -4938821563  # –í–∞—à chat_id
        
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN required")
    
    async def send_report(self, task: str, status: str, details: str = "", priority: str = "normal"):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ –∑–∞–¥–∞—á–µ"""
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        status_emojis = {
            "started": "üöÄ",
            "progress": "‚öôÔ∏è", 
            "completed": "‚úÖ",
            "failed": "‚ùå",
            "paused": "‚è∏Ô∏è",
            "cancelled": "üö´"
        }
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        priority_emojis = {
            "low": "üü¢",
            "normal": "üîµ", 
            "high": "üü°",
            "urgent": "üî¥"
        }
        
        status_emoji = status_emojis.get(status.lower(), "üìã")
        priority_emoji = priority_emojis.get(priority.lower(), "üîµ")
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
        def escape_markdown(text):
            """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown"""
            escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
            for char in escape_chars:
                text = text.replace(char, f'\\{char}')
            return text
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        message = f"""{status_emoji} *Cursor Task Report*

{priority_emoji} *Priority:* {priority.title()}
üìã *Task:* {escape_markdown(task)}
üìä *Status:* {status.title()}
üïê *Time:* {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

{escape_markdown(details)}

_Sent from Cursor IDE_"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        
        data = {
            "chat_id": self.chat_id,
            "text": message,
            "parse_mode": "Markdown"
        }
        
        async with httpx.AsyncClient() as client:
            try:
                response = await client.post(url, json=data)
                result = response.json()
                
                if result.get("ok"):
                    print(f"‚úÖ Report sent: {task} - {status}")
                    return True
                else:
                    print(f"‚ùå Failed to send report: {result}")
                    return False
                    
            except Exception as e:
                print(f"‚ùå Error sending report: {e}")
                return False

# –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def report_task_started(task: str, details: str = ""):
    """–û—Ç—á–µ—Ç –æ –Ω–∞—á–∞–ª–µ –∑–∞–¥–∞—á–∏"""
    reporter = CursorReporter()
    return await reporter.send_report(task, "started", details)

async def report_task_progress(task: str, details: str = ""):
    """–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∑–∞–¥–∞—á–∏"""
    reporter = CursorReporter()
    return await reporter.send_report(task, "progress", details)

async def report_task_completed(task: str, details: str = ""):
    """–û—Ç—á–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"""
    reporter = CursorReporter()
    return await reporter.send_report(task, "completed", details)

async def report_task_failed(task: str, details: str = ""):
    """–û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –∑–∞–¥–∞—á–∏"""
    reporter = CursorReporter()
    return await reporter.send_report(task, "failed", details, "high")

# –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
def report_started(task: str, details: str = ""):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –æ—Ç—á–µ—Ç –æ –Ω–∞—á–∞–ª–µ"""
    return asyncio.run(report_task_started(task, details))

def report_progress(task: str, details: str = ""):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"""
    return asyncio.run(report_task_progress(task, details))

def report_completed(task: str, details: str = ""):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –æ—Ç—á–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    return asyncio.run(report_task_completed(task, details))

def report_failed(task: str, details: str = ""):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ"""
    return asyncio.run(report_task_failed(task, details))

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    test_task = "Testing Cursor Reporter"
    test_details = """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
‚Ä¢ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π  
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã"""
    
    print("üìã Sending test report...")
    success = report_started(test_task, test_details)
    
    if success:
        print("‚úÖ Test report sent successfully!")
    else:
        print("‚ùå Test report failed!") 